
ADHOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007228  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080073c8  080073c8  000173c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007484  08007484  00017484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800748c  0800748c  0001748c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001c4  20000000  08007494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000055d0  200001c4  08007658  000201c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20005794  08007658  00025794  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002061d  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004112  00000000  00000000  00040811  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000013e0  00000000  00000000  00044928  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001228  00000000  00000000  00045d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000981c  00000000  00000000  00046f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000060de  00000000  00000000  0005074c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005682a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005290  00000000  00000000  000568a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c4 	.word	0x200001c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080073b0 	.word	0x080073b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001c8 	.word	0x200001c8
 80001dc:	080073b0 	.word	0x080073b0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b97a 	b.w	80004ec <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	468c      	mov	ip, r1
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	9e08      	ldr	r6, [sp, #32]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d151      	bne.n	80002c4 <__udivmoddi4+0xb4>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d96d      	bls.n	8000302 <__udivmoddi4+0xf2>
 8000226:	fab2 fe82 	clz	lr, r2
 800022a:	f1be 0f00 	cmp.w	lr, #0
 800022e:	d00b      	beq.n	8000248 <__udivmoddi4+0x38>
 8000230:	f1ce 0c20 	rsb	ip, lr, #32
 8000234:	fa01 f50e 	lsl.w	r5, r1, lr
 8000238:	fa20 fc0c 	lsr.w	ip, r0, ip
 800023c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000240:	ea4c 0c05 	orr.w	ip, ip, r5
 8000244:	fa00 f40e 	lsl.w	r4, r0, lr
 8000248:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800024c:	0c25      	lsrs	r5, r4, #16
 800024e:	fbbc f8fa 	udiv	r8, ip, sl
 8000252:	fa1f f987 	uxth.w	r9, r7
 8000256:	fb0a cc18 	mls	ip, sl, r8, ip
 800025a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800025e:	fb08 f309 	mul.w	r3, r8, r9
 8000262:	42ab      	cmp	r3, r5
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x6c>
 8000266:	19ed      	adds	r5, r5, r7
 8000268:	f108 32ff 	add.w	r2, r8, #4294967295
 800026c:	f080 8123 	bcs.w	80004b6 <__udivmoddi4+0x2a6>
 8000270:	42ab      	cmp	r3, r5
 8000272:	f240 8120 	bls.w	80004b6 <__udivmoddi4+0x2a6>
 8000276:	f1a8 0802 	sub.w	r8, r8, #2
 800027a:	443d      	add	r5, r7
 800027c:	1aed      	subs	r5, r5, r3
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb5 f0fa 	udiv	r0, r5, sl
 8000284:	fb0a 5510 	mls	r5, sl, r0, r5
 8000288:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800028c:	fb00 f909 	mul.w	r9, r0, r9
 8000290:	45a1      	cmp	r9, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x98>
 8000294:	19e4      	adds	r4, r4, r7
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 810a 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 800029e:	45a1      	cmp	r9, r4
 80002a0:	f240 8107 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	eba4 0409 	sub.w	r4, r4, r9
 80002ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b0:	2100      	movs	r1, #0
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	d061      	beq.n	800037a <__udivmoddi4+0x16a>
 80002b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ba:	2300      	movs	r3, #0
 80002bc:	6034      	str	r4, [r6, #0]
 80002be:	6073      	str	r3, [r6, #4]
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d907      	bls.n	80002d8 <__udivmoddi4+0xc8>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	d054      	beq.n	8000376 <__udivmoddi4+0x166>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	f040 808e 	bne.w	80003fe <__udivmoddi4+0x1ee>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xdc>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2d0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0503 	sbc.w	r5, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	46ac      	mov	ip, r5
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d03f      	beq.n	800037a <__udivmoddi4+0x16a>
 80002fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	b912      	cbnz	r2, 800030a <__udivmoddi4+0xfa>
 8000304:	2701      	movs	r7, #1
 8000306:	fbb7 f7f2 	udiv	r7, r7, r2
 800030a:	fab7 fe87 	clz	lr, r7
 800030e:	f1be 0f00 	cmp.w	lr, #0
 8000312:	d134      	bne.n	800037e <__udivmoddi4+0x16e>
 8000314:	1beb      	subs	r3, r5, r7
 8000316:	0c3a      	lsrs	r2, r7, #16
 8000318:	fa1f fc87 	uxth.w	ip, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb02 3318 	mls	r3, r2, r8, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb0c f308 	mul.w	r3, ip, r8
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x134>
 8000334:	19ed      	adds	r5, r5, r7
 8000336:	f108 30ff 	add.w	r0, r8, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x132>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80d1 	bhi.w	80004e4 <__udivmoddi4+0x2d4>
 8000342:	4680      	mov	r8, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0f2 	udiv	r0, r5, r2
 800034c:	fb02 5510 	mls	r5, r2, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb0c fc00 	mul.w	ip, ip, r0
 8000358:	45a4      	cmp	ip, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x15c>
 800035c:	19e4      	adds	r4, r4, r7
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x15a>
 8000364:	45a4      	cmp	ip, r4
 8000366:	f200 80b8 	bhi.w	80004da <__udivmoddi4+0x2ca>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 040c 	sub.w	r4, r4, ip
 8000370:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000374:	e79d      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000376:	4631      	mov	r1, r6
 8000378:	4630      	mov	r0, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	f1ce 0420 	rsb	r4, lr, #32
 8000382:	fa05 f30e 	lsl.w	r3, r5, lr
 8000386:	fa07 f70e 	lsl.w	r7, r7, lr
 800038a:	fa20 f804 	lsr.w	r8, r0, r4
 800038e:	0c3a      	lsrs	r2, r7, #16
 8000390:	fa25 f404 	lsr.w	r4, r5, r4
 8000394:	ea48 0803 	orr.w	r8, r8, r3
 8000398:	fbb4 f1f2 	udiv	r1, r4, r2
 800039c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a0:	fb02 4411 	mls	r4, r2, r1, r4
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ac:	fb01 f30c 	mul.w	r3, r1, ip
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1bc>
 80003b8:	19ed      	adds	r5, r5, r7
 80003ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80003be:	f080 808a 	bcs.w	80004d6 <__udivmoddi4+0x2c6>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	f240 8087 	bls.w	80004d6 <__udivmoddi4+0x2c6>
 80003c8:	3902      	subs	r1, #2
 80003ca:	443d      	add	r5, r7
 80003cc:	1aeb      	subs	r3, r5, r3
 80003ce:	fa1f f588 	uxth.w	r5, r8
 80003d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003d6:	fb02 3310 	mls	r3, r2, r0, r3
 80003da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003de:	fb00 f30c 	mul.w	r3, r0, ip
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1e6>
 80003e6:	19ed      	adds	r5, r5, r7
 80003e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003ec:	d26f      	bcs.n	80004ce <__udivmoddi4+0x2be>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d96d      	bls.n	80004ce <__udivmoddi4+0x2be>
 80003f2:	3802      	subs	r0, #2
 80003f4:	443d      	add	r5, r7
 80003f6:	1aeb      	subs	r3, r5, r3
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	e78f      	b.n	800031e <__udivmoddi4+0x10e>
 80003fe:	f1c1 0720 	rsb	r7, r1, #32
 8000402:	fa22 f807 	lsr.w	r8, r2, r7
 8000406:	408b      	lsls	r3, r1
 8000408:	fa05 f401 	lsl.w	r4, r5, r1
 800040c:	ea48 0303 	orr.w	r3, r8, r3
 8000410:	fa20 fe07 	lsr.w	lr, r0, r7
 8000414:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000418:	40fd      	lsrs	r5, r7
 800041a:	ea4e 0e04 	orr.w	lr, lr, r4
 800041e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000422:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000426:	fb0c 5519 	mls	r5, ip, r9, r5
 800042a:	fa1f f883 	uxth.w	r8, r3
 800042e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000432:	fb09 f408 	mul.w	r4, r9, r8
 8000436:	42ac      	cmp	r4, r5
 8000438:	fa02 f201 	lsl.w	r2, r2, r1
 800043c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x244>
 8000442:	18ed      	adds	r5, r5, r3
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d243      	bcs.n	80004d2 <__udivmoddi4+0x2c2>
 800044a:	42ac      	cmp	r4, r5
 800044c:	d941      	bls.n	80004d2 <__udivmoddi4+0x2c2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	441d      	add	r5, r3
 8000454:	1b2d      	subs	r5, r5, r4
 8000456:	fa1f fe8e 	uxth.w	lr, lr
 800045a:	fbb5 f0fc 	udiv	r0, r5, ip
 800045e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000462:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45a0      	cmp	r8, r4
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x26e>
 800046e:	18e4      	adds	r4, r4, r3
 8000470:	f100 35ff 	add.w	r5, r0, #4294967295
 8000474:	d229      	bcs.n	80004ca <__udivmoddi4+0x2ba>
 8000476:	45a0      	cmp	r8, r4
 8000478:	d927      	bls.n	80004ca <__udivmoddi4+0x2ba>
 800047a:	3802      	subs	r0, #2
 800047c:	441c      	add	r4, r3
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba4 0408 	sub.w	r4, r4, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454c      	cmp	r4, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	464d      	mov	r5, r9
 8000490:	d315      	bcc.n	80004be <__udivmoddi4+0x2ae>
 8000492:	d012      	beq.n	80004ba <__udivmoddi4+0x2aa>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x29c>
 8000496:	ebba 030e 	subs.w	r3, sl, lr
 800049a:	eb64 0405 	sbc.w	r4, r4, r5
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40cb      	lsrs	r3, r1
 80004a4:	431f      	orrs	r7, r3
 80004a6:	40cc      	lsrs	r4, r1
 80004a8:	6037      	str	r7, [r6, #0]
 80004aa:	6074      	str	r4, [r6, #4]
 80004ac:	2100      	movs	r1, #0
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	4618      	mov	r0, r3
 80004b4:	e6f8      	b.n	80002a8 <__udivmoddi4+0x98>
 80004b6:	4690      	mov	r8, r2
 80004b8:	e6e0      	b.n	800027c <__udivmoddi4+0x6c>
 80004ba:	45c2      	cmp	sl, r8
 80004bc:	d2ea      	bcs.n	8000494 <__udivmoddi4+0x284>
 80004be:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c2:	eb69 0503 	sbc.w	r5, r9, r3
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7e4      	b.n	8000494 <__udivmoddi4+0x284>
 80004ca:	4628      	mov	r0, r5
 80004cc:	e7d7      	b.n	800047e <__udivmoddi4+0x26e>
 80004ce:	4640      	mov	r0, r8
 80004d0:	e791      	b.n	80003f6 <__udivmoddi4+0x1e6>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e7be      	b.n	8000454 <__udivmoddi4+0x244>
 80004d6:	4601      	mov	r1, r0
 80004d8:	e778      	b.n	80003cc <__udivmoddi4+0x1bc>
 80004da:	3802      	subs	r0, #2
 80004dc:	443c      	add	r4, r7
 80004de:	e745      	b.n	800036c <__udivmoddi4+0x15c>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xe6>
 80004e4:	f1a8 0802 	sub.w	r8, r8, #2
 80004e8:	443d      	add	r5, r7
 80004ea:	e72b      	b.n	8000344 <__udivmoddi4+0x134>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f4:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <HAL_Init+0x40>)
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <HAL_Init+0x40>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000500:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <HAL_Init+0x40>)
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x40>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800050a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800050c:	4a08      	ldr	r2, [pc, #32]	; (8000530 <HAL_Init+0x40>)
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_Init+0x40>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 f917 	bl	800074c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051e:	2000      	movs	r0, #0
 8000520:	f006 f870 	bl	8006604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000524:	f006 f81c 	bl	8006560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000528:	2300      	movs	r3, #0
}
 800052a:	4618      	mov	r0, r3
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <HAL_IncTick+0x20>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_IncTick+0x24>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4413      	add	r3, r2
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_IncTick+0x24>)
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000
 8000558:	20003f38 	.word	0x20003f38

0800055c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return uwTick;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <HAL_GetTick+0x14>)
 8000562:	681b      	ldr	r3, [r3, #0]
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20003f38 	.word	0x20003f38

08000574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff ffee 	bl	800055c <HAL_GetTick>
 8000580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800058c:	d005      	beq.n	800059a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <HAL_Delay+0x40>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	461a      	mov	r2, r3
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4413      	add	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059a:	bf00      	nop
 800059c:	f7ff ffde 	bl	800055c <HAL_GetTick>
 80005a0:	4602      	mov	r2, r0
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	1ad2      	subs	r2, r2, r3
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d3f7      	bcc.n	800059c <HAL_Delay+0x28>
  {
  }
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000000 	.word	0x20000000

080005b8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f003 0307 	and.w	r3, r3, #7
 80005c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <NVIC_SetPriorityGrouping+0x44>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ea:	4a04      	ldr	r2, [pc, #16]	; (80005fc <NVIC_SetPriorityGrouping+0x44>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	60d3      	str	r3, [r2, #12]
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <NVIC_GetPriorityGrouping+0x18>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	f003 0307 	and.w	r3, r3, #7
}
 800060e:	4618      	mov	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000626:	4909      	ldr	r1, [pc, #36]	; (800064c <NVIC_EnableIRQ+0x30>)
 8000628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062c:	095b      	lsrs	r3, r3, #5
 800062e:	79fa      	ldrb	r2, [r7, #7]
 8000630:	f002 021f 	and.w	r2, r2, #31
 8000634:	2001      	movs	r0, #1
 8000636:	fa00 f202 	lsl.w	r2, r0, r2
 800063a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000e100 	.word	0xe000e100

08000650 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800065c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	da0b      	bge.n	800067c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	490d      	ldr	r1, [pc, #52]	; (800069c <NVIC_SetPriority+0x4c>)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 030f 	and.w	r3, r3, #15
 800066c:	3b04      	subs	r3, #4
 800066e:	683a      	ldr	r2, [r7, #0]
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	0112      	lsls	r2, r2, #4
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	440b      	add	r3, r1
 8000678:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800067a:	e009      	b.n	8000690 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	4908      	ldr	r1, [pc, #32]	; (80006a0 <NVIC_SetPriority+0x50>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	0112      	lsls	r2, r2, #4
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	440b      	add	r3, r1
 800068c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	e000e100 	.word	0xe000e100

080006a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b089      	sub	sp, #36	; 0x24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	f1c3 0307 	rsb	r3, r3, #7
 80006be:	2b04      	cmp	r3, #4
 80006c0:	bf28      	it	cs
 80006c2:	2304      	movcs	r3, #4
 80006c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3304      	adds	r3, #4
 80006ca:	2b06      	cmp	r3, #6
 80006cc:	d902      	bls.n	80006d4 <NVIC_EncodePriority+0x30>
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3b03      	subs	r3, #3
 80006d2:	e000      	b.n	80006d6 <NVIC_EncodePriority+0x32>
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	2201      	movs	r2, #1
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	fa02 f303 	lsl.w	r3, r2, r3
 80006e0:	1e5a      	subs	r2, r3, #1
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	401a      	ands	r2, r3
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ea:	2101      	movs	r1, #1
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	1e59      	subs	r1, r3, #1
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000718:	d301      	bcc.n	800071e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071a:	2301      	movs	r3, #1
 800071c:	e00f      	b.n	800073e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <SysTick_Config+0x40>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000726:	210f      	movs	r1, #15
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f7ff ff90 	bl	8000650 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <SysTick_Config+0x40>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <SysTick_Config+0x40>)
 8000738:	2207      	movs	r2, #7
 800073a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	e000e010 	.word	0xe000e010

0800074c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff2f 	bl	80005b8 <NVIC_SetPriorityGrouping>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000762:	b580      	push	{r7, lr}
 8000764:	b086      	sub	sp, #24
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000774:	f7ff ff44 	bl	8000600 <NVIC_GetPriorityGrouping>
 8000778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	6978      	ldr	r0, [r7, #20]
 8000780:	f7ff ff90 	bl	80006a4 <NVIC_EncodePriority>
 8000784:	4602      	mov	r2, r0
 8000786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078a:	4611      	mov	r1, r2
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff5f 	bl	8000650 <NVIC_SetPriority>
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff37 	bl	800061c <NVIC_EnableIRQ>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ffa2 	bl	8000708 <SysTick_Config>
 80007c4:	4603      	mov	r3, r0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b04      	cmp	r3, #4
 80007dc:	d106      	bne.n	80007ec <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007de:	4a09      	ldr	r2, [pc, #36]	; (8000804 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80007ea:	e005      	b.n	80007f8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007ec:	4a05      	ldr	r2, [pc, #20]	; (8000804 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f023 0304 	bic.w	r3, r3, #4
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000e010 	.word	0xe000e010

08000808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000808:	b480      	push	{r7}
 800080a:	b089      	sub	sp, #36	; 0x24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
 8000822:	e159      	b.n	8000ad8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000824:	2201      	movs	r2, #1
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	4013      	ands	r3, r2
 8000836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	429a      	cmp	r2, r3
 800083e:	f040 8148 	bne.w	8000ad2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d003      	beq.n	8000852 <HAL_GPIO_Init+0x4a>
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b12      	cmp	r3, #18
 8000850:	d123      	bne.n	800089a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	08da      	lsrs	r2, r3, #3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3208      	adds	r2, #8
 800085a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800085e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	220f      	movs	r2, #15
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	4013      	ands	r3, r2
 8000874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	691a      	ldr	r2, [r3, #16]
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	f003 0307 	and.w	r3, r3, #7
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	4313      	orrs	r3, r2
 800088a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	08da      	lsrs	r2, r3, #3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3208      	adds	r2, #8
 8000894:	69b9      	ldr	r1, [r7, #24]
 8000896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	2203      	movs	r2, #3
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43db      	mvns	r3, r3
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	4013      	ands	r3, r2
 80008b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f003 0203 	and.w	r2, r3, #3
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	69ba      	ldr	r2, [r7, #24]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d00b      	beq.n	80008ee <HAL_GPIO_Init+0xe6>
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d007      	beq.n	80008ee <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e2:	2b11      	cmp	r3, #17
 80008e4:	d003      	beq.n	80008ee <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b12      	cmp	r3, #18
 80008ec:	d130      	bne.n	8000950 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	2203      	movs	r2, #3
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4013      	ands	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	68da      	ldr	r2, [r3, #12]
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4313      	orrs	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000924:	2201      	movs	r2, #1
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4013      	ands	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	091b      	lsrs	r3, r3, #4
 800093a:	f003 0201 	and.w	r2, r3, #1
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	4313      	orrs	r3, r2
 8000948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	2203      	movs	r2, #3
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	4313      	orrs	r3, r2
 8000978:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000988:	2b00      	cmp	r3, #0
 800098a:	f000 80a2 	beq.w	8000ad2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4a56      	ldr	r2, [pc, #344]	; (8000aec <HAL_GPIO_Init+0x2e4>)
 8000994:	4b55      	ldr	r3, [pc, #340]	; (8000aec <HAL_GPIO_Init+0x2e4>)
 8000996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b53      	ldr	r3, [pc, #332]	; (8000aec <HAL_GPIO_Init+0x2e4>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009aa:	4a51      	ldr	r2, [pc, #324]	; (8000af0 <HAL_GPIO_Init+0x2e8>)
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	3302      	adds	r3, #2
 80009b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f003 0303 	and.w	r3, r3, #3
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	220f      	movs	r2, #15
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a48      	ldr	r2, [pc, #288]	; (8000af4 <HAL_GPIO_Init+0x2ec>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d019      	beq.n	8000a0a <HAL_GPIO_Init+0x202>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a47      	ldr	r2, [pc, #284]	; (8000af8 <HAL_GPIO_Init+0x2f0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d013      	beq.n	8000a06 <HAL_GPIO_Init+0x1fe>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a46      	ldr	r2, [pc, #280]	; (8000afc <HAL_GPIO_Init+0x2f4>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d00d      	beq.n	8000a02 <HAL_GPIO_Init+0x1fa>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a45      	ldr	r2, [pc, #276]	; (8000b00 <HAL_GPIO_Init+0x2f8>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d007      	beq.n	80009fe <HAL_GPIO_Init+0x1f6>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a44      	ldr	r2, [pc, #272]	; (8000b04 <HAL_GPIO_Init+0x2fc>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d101      	bne.n	80009fa <HAL_GPIO_Init+0x1f2>
 80009f6:	2304      	movs	r3, #4
 80009f8:	e008      	b.n	8000a0c <HAL_GPIO_Init+0x204>
 80009fa:	2307      	movs	r3, #7
 80009fc:	e006      	b.n	8000a0c <HAL_GPIO_Init+0x204>
 80009fe:	2303      	movs	r3, #3
 8000a00:	e004      	b.n	8000a0c <HAL_GPIO_Init+0x204>
 8000a02:	2302      	movs	r3, #2
 8000a04:	e002      	b.n	8000a0c <HAL_GPIO_Init+0x204>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <HAL_GPIO_Init+0x204>
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	69fa      	ldr	r2, [r7, #28]
 8000a0e:	f002 0203 	and.w	r2, r2, #3
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	4093      	lsls	r3, r2
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a1c:	4934      	ldr	r1, [pc, #208]	; (8000af0 <HAL_GPIO_Init+0x2e8>)
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	3302      	adds	r3, #2
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a2a:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	43db      	mvns	r3, r3
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	4013      	ands	r3, r2
 8000a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a4e:	4a2e      	ldr	r2, [pc, #184]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a54:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	69ba      	ldr	r2, [r7, #24]
 8000a60:	4013      	ands	r3, r2
 8000a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d003      	beq.n	8000a78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a78:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a7e:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	43db      	mvns	r3, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aa2:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	61fb      	str	r3, [r7, #28]
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	2b0f      	cmp	r3, #15
 8000adc:	f67f aea2 	bls.w	8000824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	3724      	adds	r7, #36	; 0x24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40013800 	.word	0x40013800
 8000af4:	40020000 	.word	0x40020000
 8000af8:	40020400 	.word	0x40020400
 8000afc:	40020800 	.word	0x40020800
 8000b00:	40020c00 	.word	0x40020c00
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40013c00 	.word	0x40013c00

08000b0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0e:	b08f      	sub	sp, #60	; 0x3c
 8000b10:	af0a      	add	r7, sp, #40	; 0x28
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e0f7      	b.n	8000d12 <HAL_PCD_Init+0x206>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2203      	movs	r2, #3
 8000b26:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f005 fed6 	bl	80068dc <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 ff69 	bl	8002a0c <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	687e      	ldr	r6, [r7, #4]
 8000b42:	466d      	mov	r5, sp
 8000b44:	f106 0410 	add.w	r4, r6, #16
 8000b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b54:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b58:	1d33      	adds	r3, r6, #4
 8000b5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b5c:	6838      	ldr	r0, [r7, #0]
 8000b5e:	f001 fef3 	bl	8002948 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 ff60 	bl	8002a2e <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	e04c      	b.n	8000c0e <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	1a9b      	subs	r3, r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	440b      	add	r3, r1
 8000b82:	3339      	adds	r3, #57	; 0x39
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	b2d8      	uxtb	r0, r3
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	4613      	mov	r3, r2
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	1a9b      	subs	r3, r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	440b      	add	r3, r1
 8000b9a:	3338      	adds	r3, #56	; 0x38
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	b298      	uxth	r0, r3
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	1a9b      	subs	r3, r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	333e      	adds	r3, #62	; 0x3e
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	1a9b      	subs	r3, r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	333b      	adds	r3, #59	; 0x3b
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket = 0U;
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	1a9b      	subs	r3, r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	440b      	add	r3, r1
 8000bda:	3340      	adds	r3, #64	; 0x40
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	4613      	mov	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	1a9b      	subs	r3, r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	440b      	add	r3, r1
 8000bee:	3344      	adds	r3, #68	; 0x44
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	1a9b      	subs	r3, r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	440b      	add	r3, r1
 8000c02:	334c      	adds	r3, #76	; 0x4c
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < 15U; i++)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2b0e      	cmp	r3, #14
 8000c12:	d9af      	bls.n	8000b74 <HAL_PCD_Init+0x68>
 }
 
 for (i = 0U; i < 15U; i++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	e05a      	b.n	8000cd0 <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	1a9b      	subs	r3, r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	440b      	add	r3, r1
 8000c28:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	b2d8      	uxtb	r0, r3
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	1a9b      	subs	r3, r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	440b      	add	r3, r1
 8000c42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000c46:	4602      	mov	r2, r0
 8000c48:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	b298      	uxth	r0, r3
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	4613      	mov	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	333e      	adds	r3, #62	; 0x3e
 8000c5e:	4602      	mov	r2, r0
 8000c60:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	4613      	mov	r3, r2
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	1a9b      	subs	r3, r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	1a9b      	subs	r3, r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	440b      	add	r3, r1
 8000c86:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	4613      	mov	r3, r2
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	1a9b      	subs	r3, r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	1a9b      	subs	r3, r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	3340      	adds	r3, #64	; 0x40
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	605a      	str	r2, [r3, #4]
 for (i = 0U; i < 15U; i++)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2b0e      	cmp	r3, #14
 8000cd4:	d9a1      	bls.n	8000c1a <HAL_PCD_Init+0x10e>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	687e      	ldr	r6, [r7, #4]
 8000cde:	466d      	mov	r5, sp
 8000ce0:	f106 0410 	add.w	r4, r6, #16
 8000ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ce6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cf0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cf4:	1d33      	adds	r3, r6, #4
 8000cf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cf8:	6838      	ldr	r0, [r7, #0]
 8000cfa:	f001 febf 	bl	8002a7c <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 fee0 	bl	8003ad0 <USB_DevDisconnect>
 return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d1a <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d101      	bne.n	8000d30 <HAL_PCD_Start+0x16>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e012      	b.n	8000d56 <HAL_PCD_Start+0x3c>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2201      	movs	r2, #1
 8000d34:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f002 feb0 	bl	8003aa2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 fe4f 	bl	80029ea <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08c      	sub	sp, #48	; 0x30
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	623b      	str	r3, [r7, #32]
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
 8000d86:	4b7c      	ldr	r3, [pc, #496]	; (8000f78 <HAL_PCD_IRQHandler+0x218>)
 8000d88:	613b      	str	r3, [r7, #16]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 ff40 	bl	8003c14 <USB_GetMode>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f040 8468 	bne.w	800166c <HAL_PCD_IRQHandler+0x90c>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f002 feac 	bl	8003afe <USB_ReadInterrupts>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f000 845e 	beq.w	800166a <HAL_PCD_IRQHandler+0x90a>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f002 fea3 	bl	8003afe <USB_ReadInterrupts>
 8000db8:	4603      	mov	r3, r0
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d107      	bne.n	8000dd2 <HAL_PCD_IRQHandler+0x72>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	6812      	ldr	r2, [r2, #0]
 8000dca:	6952      	ldr	r2, [r2, #20]
 8000dcc:	f002 0202 	and.w	r2, r2, #2
 8000dd0:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 fe91 	bl	8003afe <USB_ReadInterrupts>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000de2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000de6:	f040 80b2 	bne.w	8000f4e <HAL_PCD_IRQHandler+0x1ee>
    {
      epnum = 0U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 fe98 	bl	8003b28 <USB_ReadDevAllOutEpInterrupt>
 8000df8:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 8000dfa:	e0a4      	b.n	8000f46 <HAL_PCD_IRQHandler+0x1e6>
      {
        if (ep_intr & 0x1U)
 8000dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 8099 	beq.w	8000f3a <HAL_PCD_IRQHandler+0x1da>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f002 feb8 	bl	8003b88 <USB_ReadDevOutEPInterrupt>
 8000e18:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d06b      	beq.n	8000efc <HAL_PCD_IRQHandler+0x19c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	015a      	lsls	r2, r3, #5
 8000e28:	6a3b      	ldr	r3, [r7, #32]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000e30:	461a      	mov	r2, r3
 8000e32:	2301      	movs	r3, #1
 8000e34:	6093      	str	r3, [r2, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d13c      	bne.n	8000eb8 <HAL_PCD_IRQHandler+0x158>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e42:	4613      	mov	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	0159      	lsls	r1, r3, #5
 8000e56:	6a3b      	ldr	r3, [r7, #32]
 8000e58:	440b      	add	r3, r1
 8000e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e64:	1ad1      	subs	r1, r2, r3
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	1a9b      	subs	r3, r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4403      	add	r3, r0
 8000e74:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000e78:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7e:	4613      	mov	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000e8c:	6819      	ldr	r1, [r3, #0]
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e92:	4613      	mov	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4403      	add	r3, r0
 8000e9c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4419      	add	r1, r3
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	1a9b      	subs	r3, r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4403      	add	r3, r0
 8000eb2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000eb6:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f005 fd6a 	bl	8006998 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d117      	bne.n	8000efc <HAL_PCD_IRQHandler+0x19c>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d114      	bne.n	8000efc <HAL_PCD_IRQHandler+0x19c>
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d108      	bne.n	8000efc <HAL_PCD_IRQHandler+0x19c>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	f002 fed0 	bl	8003c9c <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d00b      	beq.n	8000f1e <HAL_PCD_IRQHandler+0x1be>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f005 fd34 	bl	8006974 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	015a      	lsls	r2, r3, #5
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	4413      	add	r3, r2
 8000f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f18:	461a      	mov	r2, r3
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	f003 0310 	and.w	r3, r3, #16
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d008      	beq.n	8000f3a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	015a      	lsls	r2, r3, #5
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	4413      	add	r3, r2
 8000f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f34:	461a      	mov	r2, r3
 8000f36:	2310      	movs	r3, #16
 8000f38:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	085b      	lsrs	r3, r3, #1
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8000f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f47f af57 	bne.w	8000dfc <HAL_PCD_IRQHandler+0x9c>
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 fdd3 	bl	8003afe <USB_ReadInterrupts>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000f62:	f040 80c5 	bne.w	80010f0 <HAL_PCD_IRQHandler+0x390>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 fdf4 	bl	8003b58 <USB_ReadDevAllInEpInterrupt>
 8000f70:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 8000f76:	e0b7      	b.n	80010e8 <HAL_PCD_IRQHandler+0x388>
 8000f78:	0aba9500 	.word	0x0aba9500
      {
        if (ep_intr & 0x1U) /* In ITR */
 8000f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 80aa 	beq.w	80010dc <HAL_PCD_IRQHandler+0x37c>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fe14 	bl	8003bc0 <USB_ReadDevInEPInterrupt>
 8000f98:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d05a      	beq.n	800105a <HAL_PCD_IRQHandler+0x2fa>
          {
            fifoemptymsk = 0x1U << epnum;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000fae:	6a3b      	ldr	r3, [r7, #32]
 8000fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	015a      	lsls	r2, r3, #5
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	4413      	add	r3, r2
 8000fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d11b      	bne.n	8001018 <HAL_PCD_IRQHandler+0x2b8>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	3344      	adds	r3, #68	; 0x44
 8000ff0:	6819      	ldr	r1, [r3, #0]
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	1a9b      	subs	r3, r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4403      	add	r3, r0
 8001000:	3340      	adds	r3, #64	; 0x40
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4419      	add	r1, r3
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800100a:	4613      	mov	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	1a9b      	subs	r3, r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4403      	add	r3, r0
 8001014:	3344      	adds	r3, #68	; 0x44
 8001016:	6019      	str	r1, [r3, #0]
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4619      	mov	r1, r3
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f005 fcd5 	bl	80069ce <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d116      	bne.n	800105a <HAL_PCD_IRQHandler+0x2fa>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	2b00      	cmp	r3, #0
 8001030:	d113      	bne.n	800105a <HAL_PCD_IRQHandler+0x2fa>
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001036:	4613      	mov	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	1a9b      	subs	r3, r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	334c      	adds	r3, #76	; 0x4c
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d108      	bne.n	800105a <HAL_PCD_IRQHandler+0x2fa>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001052:	461a      	mov	r2, r3
 8001054:	2101      	movs	r1, #1
 8001056:	f002 fe21 	bl	8003c9c <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	f003 0308 	and.w	r3, r3, #8
 8001060:	2b00      	cmp	r3, #0
 8001062:	d008      	beq.n	8001076 <HAL_PCD_IRQHandler+0x316>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	015a      	lsls	r2, r3, #5
 8001068:	6a3b      	ldr	r3, [r7, #32]
 800106a:	4413      	add	r3, r2
 800106c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001070:	461a      	mov	r2, r3
 8001072:	2308      	movs	r3, #8
 8001074:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	f003 0310 	and.w	r3, r3, #16
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <HAL_PCD_IRQHandler+0x332>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	015a      	lsls	r2, r3, #5
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	4413      	add	r3, r2
 8001088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800108c:	461a      	mov	r2, r3
 800108e:	2310      	movs	r3, #16
 8001090:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001098:	2b00      	cmp	r3, #0
 800109a:	d008      	beq.n	80010ae <HAL_PCD_IRQHandler+0x34e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	015a      	lsls	r2, r3, #5
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	4413      	add	r3, r2
 80010a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010a8:	461a      	mov	r2, r3
 80010aa:	2340      	movs	r3, #64	; 0x40
 80010ac:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <HAL_PCD_IRQHandler+0x36a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	015a      	lsls	r2, r3, #5
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	4413      	add	r3, r2
 80010c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010c4:	461a      	mov	r2, r3
 80010c6:	2302      	movs	r3, #2
 80010c8:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_PCD_IRQHandler+0x37c>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 80010d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fcf1 	bl	8001abe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	3301      	adds	r3, #1
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80010e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e4:	085b      	lsrs	r3, r3, #1
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 80010e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f47f af46 	bne.w	8000f7c <HAL_PCD_IRQHandler+0x21c>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 fd02 	bl	8003afe <USB_ReadInterrupts>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001104:	d115      	bne.n	8001132 <HAL_PCD_IRQHandler+0x3d2>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800110c:	461a      	mov	r2, r3
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f023 0301 	bic.w	r3, r3, #1
 800111a:	6053      	str	r3, [r2, #4]
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f005 fccf 	bl	8006ac0 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	6812      	ldr	r2, [r2, #0]
 800112a:	6952      	ldr	r2, [r2, #20]
 800112c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001130:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f002 fce1 	bl	8003afe <USB_ReadInterrupts>
 800113c:	4603      	mov	r3, r0
 800113e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001146:	d112      	bne.n	800116e <HAL_PCD_IRQHandler+0x40e>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b01      	cmp	r3, #1
 8001156:	d102      	bne.n	800115e <HAL_PCD_IRQHandler+0x3fe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f005 fc89 	bl	8006a70 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	6812      	ldr	r2, [r2, #0]
 8001166:	6952      	ldr	r2, [r2, #20]
 8001168:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800116c:	615a      	str	r2, [r3, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fcc3 	bl	8003afe <USB_ReadInterrupts>
 8001178:	4603      	mov	r3, r0
 800117a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800117e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001182:	f040 8091 	bne.w	80012a8 <HAL_PCD_IRQHandler+0x548>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800118c:	461a      	mov	r2, r3
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f023 0301 	bic.w	r3, r3, #1
 800119a:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2110      	movs	r1, #16
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fd9c 	bl	8002ce0 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ac:	e014      	b.n	80011d8 <HAL_PCD_IRQHandler+0x478>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 80011ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b0:	015a      	lsls	r2, r3, #5
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	4413      	add	r3, r2
 80011b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011ba:	461a      	mov	r2, r3
 80011bc:	23ff      	movs	r3, #255	; 0xff
 80011be:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 80011c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c2:	015a      	lsls	r2, r3, #5
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	4413      	add	r3, r2
 80011c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011cc:	461a      	mov	r2, r3
 80011ce:	23ff      	movs	r3, #255	; 0xff
 80011d0:	6093      	str	r3, [r2, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d4:	3301      	adds	r3, #1
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011de:	429a      	cmp	r2, r3
 80011e0:	d8e5      	bhi.n	80011ae <HAL_PCD_IRQHandler+0x44e>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011e8:	461a      	mov	r2, r3
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011f6:	461a      	mov	r2, r3
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001204:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	2b00      	cmp	r3, #0
 800120c:	d018      	beq.n	8001240 <HAL_PCD_IRQHandler+0x4e0>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001214:	461a      	mov	r2, r3
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800121c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001220:	f043 030b 	orr.w	r3, r3, #11
 8001224:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8001228:	6a3b      	ldr	r3, [r7, #32]
 800122a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800122e:	461a      	mov	r2, r3
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001238:	f043 030b 	orr.w	r3, r3, #11
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	e015      	b.n	800126c <HAL_PCD_IRQHandler+0x50c>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001246:	461a      	mov	r2, r3
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	f043 030b 	orr.w	r3, r3, #11
 8001254:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800125c:	461a      	mov	r2, r3
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	f043 030b 	orr.w	r3, r3, #11
 800126a:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001272:	461a      	mov	r2, r3
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001280:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	b2d9      	uxtb	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001292:	461a      	mov	r2, r3
 8001294:	f002 fd02 	bl	8003c9c <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	6952      	ldr	r2, [r2, #20]
 80012a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80012a6:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f002 fc26 	bl	8003afe <USB_ReadInterrupts>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012bc:	f040 80da 	bne.w	8001474 <HAL_PCD_IRQHandler+0x714>
    {
      USB_ActivateSetup(hpcd->Instance);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 fcb3 	bl	8003c30 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	68d2      	ldr	r2, [r2, #12]
 80012d4:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80012d8:	60da      	str	r2, [r3, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fd5e 	bl	8002da0 <USB_GetDevSpeed>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10f      	bne.n	800130a <HAL_PCD_IRQHandler+0x5aa>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f6:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	68d2      	ldr	r2, [r2, #12]
 8001302:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	e0a9      	b.n	800145e <HAL_PCD_IRQHandler+0x6fe>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2203      	movs	r2, #3
 800130e:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2240      	movs	r2, #64	; 0x40
 8001314:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8001316:	f001 f8ad 	bl	8002474 <HAL_RCC_GetHCLKFreq>
 800131a:	6138      	str	r0, [r7, #16]
        
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4a7b      	ldr	r2, [pc, #492]	; (800150c <HAL_PCD_IRQHandler+0x7ac>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d90c      	bls.n	800133e <HAL_PCD_IRQHandler+0x5de>
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4a7a      	ldr	r2, [pc, #488]	; (8001510 <HAL_PCD_IRQHandler+0x7b0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d808      	bhi.n	800133e <HAL_PCD_IRQHandler+0x5de>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	68d2      	ldr	r2, [r2, #12]
 8001336:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	e08f      	b.n	800145e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4a73      	ldr	r2, [pc, #460]	; (8001510 <HAL_PCD_IRQHandler+0x7b0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d90c      	bls.n	8001360 <HAL_PCD_IRQHandler+0x600>
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4a72      	ldr	r2, [pc, #456]	; (8001514 <HAL_PCD_IRQHandler+0x7b4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d808      	bhi.n	8001360 <HAL_PCD_IRQHandler+0x600>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	68d2      	ldr	r2, [r2, #12]
 8001358:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	e07e      	b.n	800145e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4a6c      	ldr	r2, [pc, #432]	; (8001514 <HAL_PCD_IRQHandler+0x7b4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d90c      	bls.n	8001382 <HAL_PCD_IRQHandler+0x622>
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4a6b      	ldr	r2, [pc, #428]	; (8001518 <HAL_PCD_IRQHandler+0x7b8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d808      	bhi.n	8001382 <HAL_PCD_IRQHandler+0x622>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	68d2      	ldr	r2, [r2, #12]
 800137a:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	e06d      	b.n	800145e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4a64      	ldr	r2, [pc, #400]	; (8001518 <HAL_PCD_IRQHandler+0x7b8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d90c      	bls.n	80013a4 <HAL_PCD_IRQHandler+0x644>
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4a63      	ldr	r2, [pc, #396]	; (800151c <HAL_PCD_IRQHandler+0x7bc>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d808      	bhi.n	80013a4 <HAL_PCD_IRQHandler+0x644>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6812      	ldr	r2, [r2, #0]
 800139a:	68d2      	ldr	r2, [r2, #12]
 800139c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	e05c      	b.n	800145e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4a5d      	ldr	r2, [pc, #372]	; (800151c <HAL_PCD_IRQHandler+0x7bc>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d90c      	bls.n	80013c6 <HAL_PCD_IRQHandler+0x666>
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4a5c      	ldr	r2, [pc, #368]	; (8001520 <HAL_PCD_IRQHandler+0x7c0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d808      	bhi.n	80013c6 <HAL_PCD_IRQHandler+0x666>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6812      	ldr	r2, [r2, #0]
 80013bc:	68d2      	ldr	r2, [r2, #12]
 80013be:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	e04b      	b.n	800145e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4a55      	ldr	r2, [pc, #340]	; (8001520 <HAL_PCD_IRQHandler+0x7c0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d90c      	bls.n	80013e8 <HAL_PCD_IRQHandler+0x688>
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4a54      	ldr	r2, [pc, #336]	; (8001524 <HAL_PCD_IRQHandler+0x7c4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d808      	bhi.n	80013e8 <HAL_PCD_IRQHandler+0x688>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	68d2      	ldr	r2, [r2, #12]
 80013e0:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	e03a      	b.n	800145e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4a4e      	ldr	r2, [pc, #312]	; (8001524 <HAL_PCD_IRQHandler+0x7c4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d90c      	bls.n	800140a <HAL_PCD_IRQHandler+0x6aa>
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4a4d      	ldr	r2, [pc, #308]	; (8001528 <HAL_PCD_IRQHandler+0x7c8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d808      	bhi.n	800140a <HAL_PCD_IRQHandler+0x6aa>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	68d2      	ldr	r2, [r2, #12]
 8001402:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	e029      	b.n	800145e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4a46      	ldr	r2, [pc, #280]	; (8001528 <HAL_PCD_IRQHandler+0x7c8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d90c      	bls.n	800142c <HAL_PCD_IRQHandler+0x6cc>
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4a45      	ldr	r2, [pc, #276]	; (800152c <HAL_PCD_IRQHandler+0x7cc>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d808      	bhi.n	800142c <HAL_PCD_IRQHandler+0x6cc>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	68d2      	ldr	r2, [r2, #12]
 8001424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	e018      	b.n	800145e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4a3f      	ldr	r2, [pc, #252]	; (800152c <HAL_PCD_IRQHandler+0x7cc>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d90c      	bls.n	800144e <HAL_PCD_IRQHandler+0x6ee>
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4a3e      	ldr	r2, [pc, #248]	; (8001530 <HAL_PCD_IRQHandler+0x7d0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d808      	bhi.n	800144e <HAL_PCD_IRQHandler+0x6ee>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	68d2      	ldr	r2, [r2, #12]
 8001446:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	e007      	b.n	800145e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	68d2      	ldr	r2, [r2, #12]
 8001458:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 800145c:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f005 fadd 	bl	8006a1e <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	6952      	ldr	r2, [r2, #20]
 800146e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001472:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f002 fb40 	bl	8003afe <USB_ReadInterrupts>
 800147e:	4603      	mov	r3, r0
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b10      	cmp	r3, #16
 8001486:	d174      	bne.n	8001572 <HAL_PCD_IRQHandler+0x812>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	6992      	ldr	r2, [r2, #24]
 8001492:	f022 0210 	bic.w	r2, r2, #16
 8001496:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	f003 020f 	and.w	r2, r3, #15
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	0c5b      	lsrs	r3, r3, #17
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d138      	bne.n	8001534 <HAL_PCD_IRQHandler+0x7d4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d049      	beq.n	8001562 <HAL_PCD_IRQHandler+0x802>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	68d9      	ldr	r1, [r3, #12]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	091b      	lsrs	r3, r3, #4
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014dc:	b29b      	uxth	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	6a38      	ldr	r0, [r7, #32]
 80014e2:	f002 f9b3 	bl	800384c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f2:	441a      	add	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	699a      	ldr	r2, [r3, #24]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001504:	441a      	add	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	619a      	str	r2, [r3, #24]
 800150a:	e02a      	b.n	8001562 <HAL_PCD_IRQHandler+0x802>
 800150c:	00d8acbf 	.word	0x00d8acbf
 8001510:	00e4e1bf 	.word	0x00e4e1bf
 8001514:	00f423ff 	.word	0x00f423ff
 8001518:	0106737f 	.word	0x0106737f
 800151c:	011a499f 	.word	0x011a499f
 8001520:	01312cff 	.word	0x01312cff
 8001524:	014ca43f 	.word	0x014ca43f
 8001528:	016e35ff 	.word	0x016e35ff
 800152c:	01a6ab1f 	.word	0x01a6ab1f
 8001530:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	0c5b      	lsrs	r3, r3, #17
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	2b06      	cmp	r3, #6
 800153e:	d110      	bne.n	8001562 <HAL_PCD_IRQHandler+0x802>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001546:	2208      	movs	r2, #8
 8001548:	4619      	mov	r1, r3
 800154a:	6a38      	ldr	r0, [r7, #32]
 800154c:	f002 f97e 	bl	800384c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	699a      	ldr	r2, [r3, #24]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	091b      	lsrs	r3, r3, #4
 8001558:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800155c:	441a      	add	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	6992      	ldr	r2, [r2, #24]
 800156c:	f042 0210 	orr.w	r2, r2, #16
 8001570:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fac1 	bl	8003afe <USB_ReadInterrupts>
 800157c:	4603      	mov	r3, r0
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b08      	cmp	r3, #8
 8001584:	d10a      	bne.n	800159c <HAL_PCD_IRQHandler+0x83c>
    {
      HAL_PCD_SOFCallback(hpcd);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f005 fa3b 	bl	8006a02 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6812      	ldr	r2, [r2, #0]
 8001594:	6952      	ldr	r2, [r2, #20]
 8001596:	f002 0208 	and.w	r2, r2, #8
 800159a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 faac 	bl	8003afe <USB_ReadInterrupts>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015b0:	d10d      	bne.n	80015ce <HAL_PCD_IRQHandler+0x86e>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f005 faa1 	bl	8006b00 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	6952      	ldr	r2, [r2, #20]
 80015c8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80015cc:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 fa93 	bl	8003afe <USB_ReadInterrupts>
 80015d8:	4603      	mov	r3, r0
 80015da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80015e2:	d10d      	bne.n	8001600 <HAL_PCD_IRQHandler+0x8a0>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	4619      	mov	r1, r3
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f005 fa76 	bl	8006adc <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	6952      	ldr	r2, [r2, #20]
 80015fa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80015fe:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f002 fa7a 	bl	8003afe <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001614:	d10a      	bne.n	800162c <HAL_PCD_IRQHandler+0x8cc>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f005 fa84 	bl	8006b24 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	6952      	ldr	r2, [r2, #20]
 8001626:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800162a:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f002 fa64 	bl	8003afe <USB_ReadInterrupts>
 8001636:	4603      	mov	r3, r0
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b04      	cmp	r3, #4
 800163e:	d115      	bne.n	800166c <HAL_PCD_IRQHandler+0x90c>
    {
      temp = hpcd->Instance->GOTGINT;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <HAL_PCD_IRQHandler+0x8f8>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f005 fa74 	bl	8006b40 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	6851      	ldr	r1, [r2, #4]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	430a      	orrs	r2, r1
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	e000      	b.n	800166c <HAL_PCD_IRQHandler+0x90c>
      return;
 800166a:	bf00      	nop
    }
  }
}
 800166c:	3730      	adds	r7, #48	; 0x30
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop

08001674 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_PCD_SetAddress+0x1a>
 800168a:	2302      	movs	r3, #2
 800168c:	e00f      	b.n	80016ae <HAL_PCD_SetAddress+0x3a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 f9d9 	bl	8003a56 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	4608      	mov	r0, r1
 80016c0:	4611      	mov	r1, r2
 80016c2:	461a      	mov	r2, r3
 80016c4:	4603      	mov	r3, r0
 80016c6:	70fb      	strb	r3, [r7, #3]
 80016c8:	460b      	mov	r3, r1
 80016ca:	803b      	strh	r3, [r7, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80016d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	da0b      	bge.n	80016f4 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	1a9b      	subs	r3, r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	3338      	adds	r3, #56	; 0x38
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	e00b      	b.n	800170c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001712:	b2da      	uxtb	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	09db      	lsrs	r3, r3, #7
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8001728:	883a      	ldrh	r2, [r7, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	78ba      	ldrb	r2, [r7, #2]
 8001732:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	785b      	ldrb	r3, [r3, #1]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d004      	beq.n	8001746 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b29a      	uxth	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8001746:	78bb      	ldrb	r3, [r7, #2]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d102      	bne.n	8001752 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	711a      	strb	r2, [r3, #4]
  }
  
  __HAL_LOCK(hpcd); 
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_PCD_EP_Open+0xaa>
 800175c:	2302      	movs	r3, #2
 800175e:	e00e      	b.n	800177e <HAL_PCD_EP_Open+0xc8>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	4618      	mov	r0, r3
 8001770:	f001 fb4b 	bl	8002e0a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 800177c:	7afb      	ldrb	r3, [r7, #11]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	460b      	mov	r3, r1
 8001790:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8001792:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001796:	2b00      	cmp	r3, #0
 8001798:	da0b      	bge.n	80017b2 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017a0:	4613      	mov	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	1a9b      	subs	r3, r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	3338      	adds	r3, #56	; 0x38
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e00b      	b.n	80017ca <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017b8:	4613      	mov	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	1a9b      	subs	r3, r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80017d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	09db      	lsrs	r3, r3, #7
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <HAL_PCD_EP_Close+0x6e>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e00e      	b.n	8001812 <HAL_PCD_EP_Close+0x8c>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68f9      	ldr	r1, [r7, #12]
 8001802:	4618      	mov	r0, r3
 8001804:	f001 fb8a 	bl	8002f1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	460b      	mov	r3, r1
 8001828:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800182a:	7afb      	ldrb	r3, [r7, #11]
 800182c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2200      	movs	r2, #0
 8001858:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 800185a:	7afb      	ldrb	r3, [r7, #11]
 800185c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001860:	b2da      	uxtb	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d102      	bne.n	8001874 <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 8001874:	7afb      	ldrb	r3, [r7, #11]
 8001876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	6979      	ldr	r1, [r7, #20]
 800188c:	f001 fe4a 	bl	8003524 <USB_EP0StartXfer>
 8001890:	e008      	b.n	80018a4 <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	461a      	mov	r2, r3
 800189e:	6979      	ldr	r1, [r7, #20]
 80018a0:	f001 fbfe 	bl	80030a0 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	460b      	mov	r3, r1
 80018b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	f003 020f 	and.w	r2, r3, #15
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	1a9b      	subs	r3, r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	460b      	mov	r3, r1
 80018ee:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80018f0:	7afb      	ldrb	r3, [r7, #11]
 80018f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018f6:	4613      	mov	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	1a9b      	subs	r3, r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	3338      	adds	r3, #56	; 0x38
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2201      	movs	r2, #1
 800191c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 800191e:	7afb      	ldrb	r3, [r7, #11]
 8001920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001924:	b2da      	uxtb	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d102      	bne.n	8001938 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 8001938:	7afb      	ldrb	r3, [r7, #11]
 800193a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	6979      	ldr	r1, [r7, #20]
 8001950:	f001 fde8 	bl	8003524 <USB_EP0StartXfer>
 8001954:	e008      	b.n	8001968 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	6979      	ldr	r1, [r7, #20]
 8001964:	f001 fb9c 	bl	80030a0 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 800197e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001982:	2b00      	cmp	r3, #0
 8001984:	da0b      	bge.n	800199e <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	3338      	adds	r3, #56	; 0x38
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	e009      	b.n	80019b2 <HAL_PCD_EP_SetStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	4613      	mov	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2201      	movs	r2, #1
 80019b6:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80019c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	09db      	lsrs	r3, r3, #7
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_PCD_EP_SetStall+0x70>
 80019de:	2302      	movs	r3, #2
 80019e0:	e01e      	b.n	8001a20 <HAL_PCD_EP_SetStall+0xae>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68f9      	ldr	r1, [r7, #12]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f001 ff52 	bl	800389a <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10a      	bne.n	8001a16 <HAL_PCD_EP_SetStall+0xa4>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	b2d9      	uxtb	r1, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001a10:	461a      	mov	r2, r3
 8001a12:	f002 f943 	bl	8003c9c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8001a34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	da0b      	bge.n	8001a54 <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a42:	4613      	mov	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	3338      	adds	r3, #56	; 0x38
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	e009      	b.n	8001a68 <HAL_PCD_EP_ClrStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001a7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	09db      	lsrs	r3, r3, #7
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_PCD_EP_ClrStall+0x70>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e00e      	b.n	8001ab6 <HAL_PCD_EP_ClrStall+0x8e>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68f9      	ldr	r1, [r7, #12]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 ff68 	bl	800397c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b08a      	sub	sp, #40	; 0x28
 8001ac2:	af02      	add	r7, sp, #8
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	3338      	adds	r3, #56	; 0x38
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d202      	bcs.n	8001b04 <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3U) / 4U;
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	3303      	adds	r3, #3
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	61bb      	str	r3, [r7, #24]
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b0c:	e02b      	b.n	8001b66 <PCD_WriteEmptyTxFifo+0xa8>
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d202      	bcs.n	8001b2a <PCD_WriteEmptyTxFifo+0x6c>
    {
      len = ep->maxpacket;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3303      	adds	r3, #3
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	68d9      	ldr	r1, [r3, #12]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	b298      	uxth	r0, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	4603      	mov	r3, r0
 8001b48:	6978      	ldr	r0, [r7, #20]
 8001b4a:	f001 fe4a 	bl	80037e2 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	441a      	add	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	441a      	add	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	619a      	str	r2, [r3, #24]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	015a      	lsls	r2, r3, #5
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d909      	bls.n	8001b90 <PCD_WriteEmptyTxFifo+0xd2>
          (ep->xfer_count < ep->xfer_len) &&
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	699a      	ldr	r2, [r3, #24]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	695b      	ldr	r3, [r3, #20]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d203      	bcs.n	8001b90 <PCD_WriteEmptyTxFifo+0xd2>
            (ep->xfer_len != 0U))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	695b      	ldr	r3, [r3, #20]
          (ep->xfer_count < ep->xfer_len) &&
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1be      	bne.n	8001b0e <PCD_WriteEmptyTxFifo+0x50>
  }
  
  if(len <= 0U)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d110      	bne.n	8001bb8 <PCD_WriteEmptyTxFifo+0xfa>
  {
    fifoemptymsk = 0x1U << epnum;
 8001b96:	2201      	movs	r2, #1
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3720      	adds	r7, #32
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	70fb      	strb	r3, [r7, #3]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d107      	bne.n	8001bf8 <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	883a      	ldrh	r2, [r7, #0]
 8001bee:	0411      	lsls	r1, r2, #16
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
 8001bf6:	e028      	b.n	8001c4a <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	0c1b      	lsrs	r3, r3, #16
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	4413      	add	r3, r2
 8001c04:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	e00d      	b.n	8001c28 <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	3340      	adds	r3, #64	; 0x40
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	0c1b      	lsrs	r3, r3, #16
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	3301      	adds	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	dbec      	blt.n	8001c0c <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6819      	ldr	r1, [r3, #0]
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	883a      	ldrh	r2, [r7, #0]
 8001c3c:	0410      	lsls	r0, r2, #16
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	4302      	orrs	r2, r0
 8001c42:	3340      	adds	r3, #64	; 0x40
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	887a      	ldrh	r2, [r7, #2]
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e22d      	b.n	80020ea <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d075      	beq.n	8001d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c9a:	4ba3      	ldr	r3, [pc, #652]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d00c      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ca6:	4ba0      	ldr	r3, [pc, #640]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d112      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb2:	4b9d      	ldr	r3, [pc, #628]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cbe:	d10b      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	4b99      	ldr	r3, [pc, #612]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d05b      	beq.n	8001d84 <HAL_RCC_OscConfig+0x108>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d157      	bne.n	8001d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e208      	b.n	80020ea <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce0:	d106      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x74>
 8001ce2:	4a91      	ldr	r2, [pc, #580]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	4b90      	ldr	r3, [pc, #576]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e01d      	b.n	8001d2c <HAL_RCC_OscConfig+0xb0>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x98>
 8001cfa:	4a8b      	ldr	r2, [pc, #556]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	4b8a      	ldr	r3, [pc, #552]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4a88      	ldr	r2, [pc, #544]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	4b87      	ldr	r3, [pc, #540]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0xb0>
 8001d14:	4a84      	ldr	r2, [pc, #528]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001d16:	4b84      	ldr	r3, [pc, #528]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4a81      	ldr	r2, [pc, #516]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001d22:	4b81      	ldr	r3, [pc, #516]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d013      	beq.n	8001d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7fe fc12 	bl	800055c <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7fe fc0e 	bl	800055c <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1cd      	b.n	80020ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b76      	ldr	r3, [pc, #472]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0xc0>
 8001d5a:	e014      	b.n	8001d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7fe fbfe 	bl	800055c <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d64:	f7fe fbfa 	bl	800055c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	; 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e1b9      	b.n	80020ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	4b6c      	ldr	r3, [pc, #432]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0xe8>
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d063      	beq.n	8001e5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d92:	4b65      	ldr	r3, [pc, #404]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00b      	beq.n	8001db6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d9e:	4b62      	ldr	r3, [pc, #392]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d11c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001daa:	4b5f      	ldr	r3, [pc, #380]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d116      	bne.n	8001de4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	4b5c      	ldr	r3, [pc, #368]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_RCC_OscConfig+0x152>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e18d      	b.n	80020ea <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	4956      	ldr	r1, [pc, #344]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	4b55      	ldr	r3, [pc, #340]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de2:	e03a      	b.n	8001e5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d020      	beq.n	8001e2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dec:	4b4f      	ldr	r3, [pc, #316]	; (8001f2c <HAL_RCC_OscConfig+0x2b0>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df2:	f7fe fbb3 	bl	800055c <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfa:	f7fe fbaf 	bl	800055c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e16e      	b.n	80020ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e18:	4943      	ldr	r1, [pc, #268]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001e1a:	4b43      	ldr	r3, [pc, #268]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]
 8001e2c:	e015      	b.n	8001e5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2e:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <HAL_RCC_OscConfig+0x2b0>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7fe fb92 	bl	800055c <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e3c:	f7fe fb8e 	bl	800055c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e14d      	b.n	80020ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d030      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d016      	beq.n	8001e9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e6e:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <HAL_RCC_OscConfig+0x2b4>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e74:	f7fe fb72 	bl	800055c <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7c:	f7fe fb6e 	bl	800055c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e12d      	b.n	80020ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x200>
 8001e9a:	e015      	b.n	8001ec8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9c:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_RCC_OscConfig+0x2b4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7fe fb5b 	bl	800055c <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eaa:	f7fe fb57 	bl	800055c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e116      	b.n	80020ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f0      	bne.n	8001eaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80a0 	beq.w	8002016 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10f      	bne.n	8001f06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f02:	2301      	movs	r3, #1
 8001f04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCC_OscConfig+0x2b8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d121      	bne.n	8001f56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f12:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <HAL_RCC_OscConfig+0x2b8>)
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_RCC_OscConfig+0x2b8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1e:	f7fe fb1d 	bl	800055c <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	e011      	b.n	8001f4a <HAL_RCC_OscConfig+0x2ce>
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	42470000 	.word	0x42470000
 8001f30:	42470e80 	.word	0x42470e80
 8001f34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f38:	f7fe fb10 	bl	800055c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e0cf      	b.n	80020ea <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4a:	4b6a      	ldr	r3, [pc, #424]	; (80020f4 <HAL_RCC_OscConfig+0x478>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCC_OscConfig+0x2f0>
 8001f5e:	4a66      	ldr	r2, [pc, #408]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 8001f60:	4b65      	ldr	r3, [pc, #404]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6a:	e01c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x32a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d10c      	bne.n	8001f8e <HAL_RCC_OscConfig+0x312>
 8001f74:	4a60      	ldr	r2, [pc, #384]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 8001f76:	4b60      	ldr	r3, [pc, #384]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f80:	4a5d      	ldr	r2, [pc, #372]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 8001f82:	4b5d      	ldr	r3, [pc, #372]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 8001f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8c:	e00b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x32a>
 8001f8e:	4a5a      	ldr	r2, [pc, #360]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 8001f90:	4b59      	ldr	r3, [pc, #356]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9a:	4a57      	ldr	r2, [pc, #348]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 8001f9c:	4b56      	ldr	r3, [pc, #344]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 8001f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d015      	beq.n	8001fda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fae:	f7fe fad5 	bl	800055c <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb6:	f7fe fad1 	bl	800055c <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e08e      	b.n	80020ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	4b4a      	ldr	r3, [pc, #296]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ee      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x33a>
 8001fd8:	e014      	b.n	8002004 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fda:	f7fe fabf 	bl	800055c <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7fe fabb 	bl	800055c <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e078      	b.n	80020ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff8:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1ee      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	4a3b      	ldr	r2, [pc, #236]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 800200c:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d064      	beq.n	80020e8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800201e:	4b36      	ldr	r3, [pc, #216]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b08      	cmp	r3, #8
 8002028:	d05c      	beq.n	80020e4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d141      	bne.n	80020b6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002032:	4b32      	ldr	r3, [pc, #200]	; (80020fc <HAL_RCC_OscConfig+0x480>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7fe fa90 	bl	800055c <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002040:	f7fe fa8c 	bl	800055c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e04b      	b.n	80020ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800205e:	4926      	ldr	r1, [pc, #152]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69da      	ldr	r2, [r3, #28]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	019b      	lsls	r3, r3, #6
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	085b      	lsrs	r3, r3, #1
 8002078:	3b01      	subs	r3, #1
 800207a:	041b      	lsls	r3, r3, #16
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	061b      	lsls	r3, r3, #24
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002088:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <HAL_RCC_OscConfig+0x480>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe fa65 	bl	800055c <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002096:	f7fe fa61 	bl	800055c <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e020      	b.n	80020ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x41a>
 80020b4:	e018      	b.n	80020e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_RCC_OscConfig+0x480>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7fe fa4e 	bl	800055c <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c4:	f7fe fa4a 	bl	800055c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e009      	b.n	80020ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <HAL_RCC_OscConfig+0x47c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x448>
 80020e2:	e001      	b.n	80020e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40007000 	.word	0x40007000
 80020f8:	40023800 	.word	0x40023800
 80020fc:	42470060 	.word	0x42470060

08002100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0ca      	b.n	80022aa <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002114:	4b67      	ldr	r3, [pc, #412]	; (80022b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 020f 	and.w	r2, r3, #15
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d20c      	bcs.n	800213c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b64      	ldr	r3, [pc, #400]	; (80022b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b62      	ldr	r3, [pc, #392]	; (80022b4 <HAL_RCC_ClockConfig+0x1b4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 020f 	and.w	r2, r3, #15
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0b6      	b.n	80022aa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d020      	beq.n	800218a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002154:	4a58      	ldr	r2, [pc, #352]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002156:	4b58      	ldr	r3, [pc, #352]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800215e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800216c:	4a52      	ldr	r2, [pc, #328]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 800216e:	4b52      	ldr	r3, [pc, #328]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002178:	494f      	ldr	r1, [pc, #316]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 800217a:	4b4f      	ldr	r3, [pc, #316]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d044      	beq.n	8002220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b46      	ldr	r3, [pc, #280]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d119      	bne.n	80021de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e07d      	b.n	80022aa <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d003      	beq.n	80021be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021be:	4b3e      	ldr	r3, [pc, #248]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e06d      	b.n	80022aa <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ce:	4b3a      	ldr	r3, [pc, #232]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e065      	b.n	80022aa <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021de:	4936      	ldr	r1, [pc, #216]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	4b35      	ldr	r3, [pc, #212]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f023 0203 	bic.w	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f0:	f7fe f9b4 	bl	800055c <HAL_GetTick>
 80021f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f6:	e00a      	b.n	800220e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f8:	f7fe f9b0 	bl	800055c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	; 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e04d      	b.n	80022aa <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 020c 	and.w	r2, r3, #12
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	429a      	cmp	r2, r3
 800221e:	d1eb      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 020f 	and.w	r2, r3, #15
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d90c      	bls.n	8002248 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 020f 	and.w	r2, r3, #15
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e030      	b.n	80022aa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002254:	4918      	ldr	r1, [pc, #96]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d009      	beq.n	8002286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002272:	4911      	ldr	r1, [pc, #68]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002286:	f000 f81d 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 800228a:	4601      	mov	r1, r0
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	5cd3      	ldrb	r3, [r2, r3]
 800229a:	fa21 f303 	lsr.w	r3, r1, r3
 800229e:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f004 f9ae 	bl	8006604 <HAL_InitTick>

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023c00 	.word	0x40023c00
 80022b8:	40023800 	.word	0x40023800
 80022bc:	0800746c 	.word	0x0800746c
 80022c0:	20000118 	.word	0x20000118

080022c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022c8:	b08f      	sub	sp, #60	; 0x3c
 80022ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d0:	2300      	movs	r3, #0
 80022d2:	637b      	str	r3, [r7, #52]	; 0x34
 80022d4:	2300      	movs	r3, #0
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022dc:	4b62      	ldr	r3, [pc, #392]	; (8002468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d007      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x34>
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d008      	beq.n	80022fe <HAL_RCC_GetSysClockFreq+0x3a>
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f040 80b2 	bne.w	8002456 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f2:	4b5e      	ldr	r3, [pc, #376]	; (800246c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80022f6:	e0b1      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022f8:	4b5d      	ldr	r3, [pc, #372]	; (8002470 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80022fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022fc:	e0ae      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022fe:	4b5a      	ldr	r3, [pc, #360]	; (8002468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002308:	4b57      	ldr	r3, [pc, #348]	; (8002468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d04e      	beq.n	80023b2 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002314:	4b54      	ldr	r3, [pc, #336]	; (8002468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	f04f 0400 	mov.w	r4, #0
 800231e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	ea01 0103 	and.w	r1, r1, r3
 800232a:	ea02 0204 	and.w	r2, r2, r4
 800232e:	460b      	mov	r3, r1
 8002330:	4614      	mov	r4, r2
 8002332:	0160      	lsls	r0, r4, #5
 8002334:	6278      	str	r0, [r7, #36]	; 0x24
 8002336:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002338:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800233c:	6278      	str	r0, [r7, #36]	; 0x24
 800233e:	015b      	lsls	r3, r3, #5
 8002340:	623b      	str	r3, [r7, #32]
 8002342:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002346:	1a5b      	subs	r3, r3, r1
 8002348:	eb64 0402 	sbc.w	r4, r4, r2
 800234c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8002350:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8002354:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002358:	ebb8 0803 	subs.w	r8, r8, r3
 800235c:	eb69 0904 	sbc.w	r9, r9, r4
 8002360:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002372:	61bb      	str	r3, [r7, #24]
 8002374:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002378:	eb18 0801 	adds.w	r8, r8, r1
 800237c:	eb49 0902 	adc.w	r9, r9, r2
 8002380:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002398:	4640      	mov	r0, r8
 800239a:	4649      	mov	r1, r9
 800239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239e:	f04f 0400 	mov.w	r4, #0
 80023a2:	461a      	mov	r2, r3
 80023a4:	4623      	mov	r3, r4
 80023a6:	f7fd ff1b 	bl	80001e0 <__aeabi_uldivmod>
 80023aa:	4603      	mov	r3, r0
 80023ac:	460c      	mov	r4, r1
 80023ae:	637b      	str	r3, [r7, #52]	; 0x34
 80023b0:	e043      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b2:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	099b      	lsrs	r3, r3, #6
 80023b8:	f04f 0400 	mov.w	r4, #0
 80023bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	ea01 0103 	and.w	r1, r1, r3
 80023c8:	ea02 0204 	and.w	r2, r2, r4
 80023cc:	460b      	mov	r3, r1
 80023ce:	4614      	mov	r4, r2
 80023d0:	0160      	lsls	r0, r4, #5
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	015b      	lsls	r3, r3, #5
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80023e4:	1a5b      	subs	r3, r3, r1
 80023e6:	eb64 0402 	sbc.w	r4, r4, r2
 80023ea:	01a6      	lsls	r6, r4, #6
 80023ec:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80023f0:	019d      	lsls	r5, r3, #6
 80023f2:	1aed      	subs	r5, r5, r3
 80023f4:	eb66 0604 	sbc.w	r6, r6, r4
 80023f8:	00f3      	lsls	r3, r6, #3
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	00eb      	lsls	r3, r5, #3
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	e897 0060 	ldmia.w	r7, {r5, r6}
 800240c:	186d      	adds	r5, r5, r1
 800240e:	eb46 0602 	adc.w	r6, r6, r2
 8002412:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8002416:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800241a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800241e:	4655      	mov	r5, sl
 8002420:	465e      	mov	r6, fp
 8002422:	4628      	mov	r0, r5
 8002424:	4631      	mov	r1, r6
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	f04f 0400 	mov.w	r4, #0
 800242c:	461a      	mov	r2, r3
 800242e:	4623      	mov	r3, r4
 8002430:	f7fd fed6 	bl	80001e0 <__aeabi_uldivmod>
 8002434:	4603      	mov	r3, r0
 8002436:	460c      	mov	r4, r1
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	0c1b      	lsrs	r3, r3, #16
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	3301      	adds	r3, #1
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800244a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002454:	e002      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002458:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800245a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800245e:	4618      	mov	r0, r3
 8002460:	373c      	adds	r7, #60	; 0x3c
 8002462:	46bd      	mov	sp, r7
 8002464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002468:	40023800 	.word	0x40023800
 800246c:	00f42400 	.word	0x00f42400
 8002470:	007a1200 	.word	0x007a1200

08002474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <HAL_RCC_GetHCLKFreq+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000118 	.word	0x20000118

0800248c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002490:	f7ff fff0 	bl	8002474 <HAL_RCC_GetHCLKFreq>
 8002494:	4601      	mov	r1, r0
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	0b5b      	lsrs	r3, r3, #13
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4a03      	ldr	r2, [pc, #12]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a2:	5cd3      	ldrb	r3, [r2, r3]
 80024a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	0800747c 	.word	0x0800747c

080024b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	220f      	movs	r2, #15
 80024c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_RCC_GetClockConfig+0x5c>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0203 	and.w	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_RCC_GetClockConfig+0x5c>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <HAL_RCC_GetClockConfig+0x5c>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_RCC_GetClockConfig+0x5c>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	08db      	lsrs	r3, r3, #3
 80024ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <HAL_RCC_GetClockConfig+0x60>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 020f 	and.w	r2, r3, #15
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	601a      	str	r2, [r3, #0]
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	40023c00 	.word	0x40023c00

08002518 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e01d      	b.n	8002566 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f815 	bl	800256e <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f000 f95e 	bl	8002818 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	68d2      	ldr	r2, [r2, #12]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d122      	bne.n	8002614 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d11b      	bne.n	8002614 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0202 	mvn.w	r2, #2
 80025e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f8ee 	bl	80027dc <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8e0 	bl	80027c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f8f1 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b04      	cmp	r3, #4
 8002620:	d122      	bne.n	8002668 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b04      	cmp	r3, #4
 800262e:	d11b      	bne.n	8002668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0204 	mvn.w	r2, #4
 8002638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2202      	movs	r2, #2
 800263e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f8c4 	bl	80027dc <HAL_TIM_IC_CaptureCallback>
 8002654:	e005      	b.n	8002662 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f8b6 	bl	80027c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f8c7 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b08      	cmp	r3, #8
 8002674:	d122      	bne.n	80026bc <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b08      	cmp	r3, #8
 8002682:	d11b      	bne.n	80026bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0208 	mvn.w	r2, #8
 800268c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2204      	movs	r2, #4
 8002692:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f89a 	bl	80027dc <HAL_TIM_IC_CaptureCallback>
 80026a8:	e005      	b.n	80026b6 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f88c 	bl	80027c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f89d 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b10      	cmp	r3, #16
 80026c8:	d122      	bne.n	8002710 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b10      	cmp	r3, #16
 80026d6:	d11b      	bne.n	8002710 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0210 	mvn.w	r2, #16
 80026e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2208      	movs	r2, #8
 80026e6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f870 	bl	80027dc <HAL_TIM_IC_CaptureCallback>
 80026fc:	e005      	b.n	800270a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f862 	bl	80027c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f873 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b01      	cmp	r3, #1
 800271c:	d10e      	bne.n	800273c <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d107      	bne.n	800273c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0201 	mvn.w	r2, #1
 8002734:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f003 fefa 	bl	8006530 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	2b80      	cmp	r3, #128	; 0x80
 8002748:	d10e      	bne.n	8002768 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002754:	2b80      	cmp	r3, #128	; 0x80
 8002756:	d107      	bne.n	8002768 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002760:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f8e6 	bl	8002934 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d10e      	bne.n	8002794 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002780:	2b40      	cmp	r3, #64	; 0x40
 8002782:	d107      	bne.n	8002794 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800278c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f838 	bl	8002804 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d10e      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	d107      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0220 	mvn.w	r2, #32
 80027b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f8b0 	bl	8002920 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a35      	ldr	r2, [pc, #212]	; (8002904 <TIM_Base_SetConfig+0xec>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00f      	beq.n	8002854 <TIM_Base_SetConfig+0x3c>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283a:	d00b      	beq.n	8002854 <TIM_Base_SetConfig+0x3c>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a32      	ldr	r2, [pc, #200]	; (8002908 <TIM_Base_SetConfig+0xf0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d007      	beq.n	8002854 <TIM_Base_SetConfig+0x3c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a31      	ldr	r2, [pc, #196]	; (800290c <TIM_Base_SetConfig+0xf4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d003      	beq.n	8002854 <TIM_Base_SetConfig+0x3c>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a30      	ldr	r2, [pc, #192]	; (8002910 <TIM_Base_SetConfig+0xf8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d101      	bne.n	8002858 <TIM_Base_SetConfig+0x40>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <TIM_Base_SetConfig+0x42>
 8002858:	2300      	movs	r3, #0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a24      	ldr	r2, [pc, #144]	; (8002904 <TIM_Base_SetConfig+0xec>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d01b      	beq.n	80028b0 <TIM_Base_SetConfig+0x98>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287e:	d017      	beq.n	80028b0 <TIM_Base_SetConfig+0x98>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a21      	ldr	r2, [pc, #132]	; (8002908 <TIM_Base_SetConfig+0xf0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d013      	beq.n	80028b0 <TIM_Base_SetConfig+0x98>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a20      	ldr	r2, [pc, #128]	; (800290c <TIM_Base_SetConfig+0xf4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00f      	beq.n	80028b0 <TIM_Base_SetConfig+0x98>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <TIM_Base_SetConfig+0xf8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00b      	beq.n	80028b0 <TIM_Base_SetConfig+0x98>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a1e      	ldr	r2, [pc, #120]	; (8002914 <TIM_Base_SetConfig+0xfc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d007      	beq.n	80028b0 <TIM_Base_SetConfig+0x98>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <TIM_Base_SetConfig+0x100>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d003      	beq.n	80028b0 <TIM_Base_SetConfig+0x98>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a1c      	ldr	r2, [pc, #112]	; (800291c <TIM_Base_SetConfig+0x104>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d101      	bne.n	80028b4 <TIM_Base_SetConfig+0x9c>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <TIM_Base_SetConfig+0x9e>
 80028b4:	2300      	movs	r3, #0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a07      	ldr	r2, [pc, #28]	; (8002904 <TIM_Base_SetConfig+0xec>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d103      	bne.n	80028f2 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	615a      	str	r2, [r3, #20]
}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	40010000 	.word	0x40010000
 8002908:	40000400 	.word	0x40000400
 800290c:	40000800 	.word	0x40000800
 8002910:	40000c00 	.word	0x40000c00
 8002914:	40014000 	.word	0x40014000
 8002918:	40014400 	.word	0x40014400
 800291c:	40014800 	.word	0x40014800

08002920 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002948:	b084      	sub	sp, #16
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	f107 0014 	add.w	r0, r7, #20
 8002956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	2b01      	cmp	r3, #1
 800295e:	d120      	bne.n	80029a2 <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002964:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 8002988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800298a:	2b01      	cmp	r3, #1
 800298c:	d105      	bne.n	800299a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f001 f9c4 	bl	8003d28 <USB_CoreReset>
 80029a0:	e00c      	b.n	80029bc <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f001 f9ba 	bl	8003d28 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d10b      	bne.n	80029da <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f043 0206 	orr.w	r2, r3, #6
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f043 0220 	orr.w	r2, r3, #32
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029e6:	b004      	add	sp, #16
 80029e8:	4770      	bx	lr

080029ea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f023 0201 	bic.w	r2, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	460b      	mov	r3, r1
 8002a38:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d106      	bne.n	8002a5a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	60da      	str	r2, [r3, #12]
 8002a58:	e008      	b.n	8002a6c <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 8002a6c:	2032      	movs	r0, #50	; 0x32
 8002a6e:	f7fd fd81 	bl	8000574 <HAL_Delay>
  
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	f107 001c 	add.w	r0, r7, #28
 8002a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
 8002a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d106      	bne.n	8002aa6 <USB_DevInit+0x2a>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	639a      	str	r2, [r3, #56]	; 0x38
 8002aa4:	e005      	b.n	8002ab2 <USB_DevInit+0x36>
  }
  else
  {
    /* Enable VBUS */
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2300      	movs	r3, #0
 8002abc:	6013      	str	r3, [r2, #0]
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6013      	str	r3, [r2, #0]
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d10c      	bne.n	8002af0 <USB_DevInit+0x74>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d104      	bne.n	8002ae6 <USB_DevInit+0x6a>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8002adc:	2100      	movs	r1, #0
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f946 	bl	8002d70 <USB_SetDevSpeed>
 8002ae4:	e008      	b.n	8002af8 <USB_DevInit+0x7c>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f941 	bl	8002d70 <USB_SetDevSpeed>
 8002aee:	e003      	b.n	8002af8 <USB_DevInit+0x7c>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002af0:	2103      	movs	r1, #3
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f93c 	bl	8002d70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8002af8:	2110      	movs	r1, #16
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f8f0 	bl	8002ce0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f913 	bl	8002d2c <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2300      	movs	r3, #0
 8002b10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b24:	461a      	mov	r2, r3
 8002b26:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2a:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b32:	461a      	mov	r2, r3
 8002b34:	2300      	movs	r3, #0
 8002b36:	61d3      	str	r3, [r2, #28]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e034      	b.n	8002ba8 <USB_DevInit+0x12c>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b54:	d10a      	bne.n	8002b6c <USB_DevInit+0xf0>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b62:	461a      	mov	r2, r3
 8002b64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e008      	b.n	8002b7e <USB_DevInit+0x102>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	23ff      	movs	r3, #255	; 0xff
 8002ba0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d8c6      	bhi.n	8002b3e <USB_DevInit+0xc2>
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e034      	b.n	8002c20 <USB_DevInit+0x1a4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bcc:	d10a      	bne.n	8002be4 <USB_DevInit+0x168>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e008      	b.n	8002bf6 <USB_DevInit+0x17a>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c02:	461a      	mov	r2, r3
 8002c04:	2300      	movs	r3, #0
 8002c06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c14:	461a      	mov	r2, r3
 8002c16:	23ff      	movs	r3, #255	; 0xff
 8002c18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d8c6      	bhi.n	8002bb6 <USB_DevInit+0x13a>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c2e:	461a      	mov	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c3c:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1U)
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d117      	bne.n	8002c74 <USB_DevInit+0x1f8>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <USB_DevInit+0x25c>)
 8002c4e:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c56:	461a      	mov	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	f043 0303 	orr.w	r3, r3, #3
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002c80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d105      	bne.n	8002c94 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	f043 0210 	orr.w	r2, r3, #16
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699a      	ldr	r2, [r3, #24]
 8002c98:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <USB_DevInit+0x260>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8002ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <USB_DevInit+0x236>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f043 0208 	orr.w	r2, r3, #8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8002cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d107      	bne.n	8002cc8 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cd4:	b004      	add	sp, #16
 8002cd6:	4770      	bx	lr
 8002cd8:	00800100 	.word	0x00800100
 8002cdc:	803c3800 	.word	0x803c3800

08002ce0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	019b      	lsls	r3, r3, #6
 8002cf2:	f043 0220 	orr.w	r2, r3, #32
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <USB_FlushTxFifo+0x48>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d901      	bls.n	8002d0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e006      	b.n	8002d1a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d0f0      	beq.n	8002cfa <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	00030d40 	.word	0x00030d40

08002d2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2210      	movs	r2, #16
 8002d3c:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3301      	adds	r3, #1
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4a09      	ldr	r2, [pc, #36]	; (8002d6c <USB_FlushRxFifo+0x40>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d901      	bls.n	8002d50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e006      	b.n	8002d5e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d0f0      	beq.n	8002d3e <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	00030d40 	.word	0x00030d40

08002d70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d82:	4619      	mov	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	73fb      	strb	r3, [r7, #15]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0306 	and.w	r3, r3, #6
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	73fb      	strb	r3, [r7, #15]
 8002dc0:	e01c      	b.n	8002dfc <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 0306 	and.w	r3, r3, #6
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d007      	beq.n	8002de2 <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d102      	bne.n	8002de8 <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 8002de2:	2303      	movs	r3, #3
 8002de4:	73fb      	strb	r3, [r7, #15]
 8002de6:	e009      	b.n	8002dfc <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0306 	and.w	r3, r3, #6
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d101      	bne.n	8002dfc <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	785b      	ldrb	r3, [r3, #1]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d13e      	bne.n	8002e9a <USB_ActivateEndpoint+0x90>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e22:	4619      	mov	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	2301      	movs	r3, #1
 8002e34:	4083      	lsls	r3, r0
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d15c      	bne.n	8002f0e <USB_ActivateEndpoint+0x104>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e62:	4618      	mov	r0, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e7c:	6839      	ldr	r1, [r7, #0]
 8002e7e:	78c9      	ldrb	r1, [r1, #3]
 8002e80:	0489      	lsls	r1, r1, #18
 8002e82:	430b      	orrs	r3, r1
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 8002e84:	6839      	ldr	r1, [r7, #0]
 8002e86:	7809      	ldrb	r1, [r1, #0]
 8002e88:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e96:	6003      	str	r3, [r0, #0]
 8002e98:	e039      	b.n	8002f0e <USB_ActivateEndpoint+0x104>
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	4083      	lsls	r3, r0
 8002eb4:	041b      	lsls	r3, r3, #16
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d11d      	bne.n	8002f0e <USB_ActivateEndpoint+0x104>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002efa:	6839      	ldr	r1, [r7, #0]
 8002efc:	78c9      	ldrb	r1, [r1, #3]
 8002efe:	0489      	lsls	r1, r1, #18
 8002f00:	430b      	orrs	r3, r1
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f0c:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	785b      	ldrb	r3, [r3, #1]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d154      	bne.n	8002fdc <USB_DeactivateEndpoint+0xc0>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f40:	4619      	mov	r1, r3
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f56:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f66:	461a      	mov	r2, r3
 8002f68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f6c:	6013      	str	r3, [r2, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f82:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3301      	adds	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4a43      	ldr	r2, [pc, #268]	; (800309c <USB_DeactivateEndpoint+0x180>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <USB_DeactivateEndpoint+0x7a>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e07d      	b.n	8003092 <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fae:	d0e9      	beq.n	8002f84 <USB_DeactivateEndpoint+0x68>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8002fb0:	2110      	movs	r1, #16
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff fe94 	bl	8002ce0 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc6:	69da      	ldr	r2, [r3, #28]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	2301      	movs	r3, #1
 8002fd0:	4083      	lsls	r3, r0
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61cb      	str	r3, [r1, #28]
 8002fda:	e059      	b.n	8003090 <USB_DeactivateEndpoint+0x174>
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fea:	4619      	mov	r1, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003000:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003010:	461a      	mov	r2, r3
 8003012:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003016:	6013      	str	r3, [r2, #0]
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003026:	461a      	mov	r2, r3
 8003028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800302c:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	3301      	adds	r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a19      	ldr	r2, [pc, #100]	; (800309c <USB_DeactivateEndpoint+0x180>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <USB_DeactivateEndpoint+0x124>
      {
        return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e028      	b.n	8003092 <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b10      	cmp	r3, #16
 8003056:	d0ea      	beq.n	800302e <USB_DeactivateEndpoint+0x112>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800305e:	461a      	mov	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800306c:	6053      	str	r3, [r2, #4]
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003074:	4619      	mov	r1, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	2301      	movs	r3, #1
 8003086:	4083      	lsls	r3, r0
 8003088:	041b      	lsls	r3, r3, #16
 800308a:	43db      	mvns	r3, r3
 800308c:	4013      	ands	r3, r2
 800308e:	61cb      	str	r3, [r1, #28]
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	00030d40 	.word	0x00030d40

080030a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	4613      	mov	r3, r2
 80030ac:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	785b      	ldrb	r3, [r3, #1]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	f040 8146 	bne.w	8003348 <USB_EPStartXfer+0x2a8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d13b      	bne.n	800313c <USB_EPStartXfer+0x9c>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d2:	4619      	mov	r1, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80030e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80030ec:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fc:	4619      	mov	r1, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003112:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003122:	4619      	mov	r1, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	0cdb      	lsrs	r3, r3, #19
 8003136:	04db      	lsls	r3, r3, #19
 8003138:	610b      	str	r3, [r1, #16]
 800313a:	e086      	b.n	800324a <USB_EPStartXfer+0x1aa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800314a:	4619      	mov	r1, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	0cdb      	lsrs	r3, r3, #19
 800315e:	04db      	lsls	r3, r3, #19
 8003160:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4413      	add	r3, r2
 800316c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003170:	4619      	mov	r1, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003186:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800318a:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800319a:	4618      	mov	r0, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	6959      	ldr	r1, [r3, #20]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	440b      	add	r3, r1
 80031b6:	1e59      	subs	r1, r3, #1
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c0:	04d9      	lsls	r1, r3, #19
 80031c2:	4b8c      	ldr	r3, [pc, #560]	; (80033f4 <USB_EPStartXfer+0x354>)
 80031c4:	400b      	ands	r3, r1
 80031c6:	4313      	orrs	r3, r2
 80031c8:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d8:	4619      	mov	r1, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f2:	4313      	orrs	r3, r2
 80031f4:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	78db      	ldrb	r3, [r3, #3]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d125      	bne.n	800324a <USB_EPStartXfer+0x1aa>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800320c:	4619      	mov	r1, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003222:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003232:	4619      	mov	r1, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003248:	610b      	str	r3, [r1, #16]
      }       
    }

    if (dma == 1U)
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d10b      	bne.n	8003268 <USB_EPStartXfer+0x1c8>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800325e:	461a      	mov	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	6153      	str	r3, [r2, #20]
 8003266:	e016      	b.n	8003296 <USB_EPStartXfer+0x1f6>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	78db      	ldrb	r3, [r3, #3]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d012      	beq.n	8003296 <USB_EPStartXfer+0x1f6>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00e      	beq.n	8003296 <USB_EPStartXfer+0x1f6>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327e:	4619      	mov	r1, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	2301      	movs	r3, #1
 8003290:	4083      	lsls	r3, r0
 8003292:	4313      	orrs	r3, r2
 8003294:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	78db      	ldrb	r3, [r3, #3]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d12e      	bne.n	80032fc <USB_EPStartXfer+0x25c>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d113      	bne.n	80032d6 <USB_EPStartXfer+0x236>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032bc:	4619      	mov	r1, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032d2:	600b      	str	r3, [r1, #0]
 80032d4:	e012      	b.n	80032fc <USB_EPStartXfer+0x25c>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e4:	4619      	mov	r1, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fa:	600b      	str	r3, [r1, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4413      	add	r3, r2
 8003306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800330a:	4619      	mov	r1, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4413      	add	r3, r2
 8003316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003320:	600b      	str	r3, [r1, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	78db      	ldrb	r3, [r3, #3]
 8003326:	2b01      	cmp	r3, #1
 8003328:	f040 80f5 	bne.w	8003516 <USB_EPStartXfer+0x476>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	68d9      	ldr	r1, [r3, #12]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	b298      	uxth	r0, r3
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	4603      	mov	r3, r0
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fa4e 	bl	80037e2 <USB_WritePacket>
 8003346:	e0e6      	b.n	8003516 <USB_EPStartXfer+0x476>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003356:	4619      	mov	r1, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	0cdb      	lsrs	r3, r3, #19
 800336a:	04db      	lsls	r3, r3, #19
 800336c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337c:	4619      	mov	r1, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003392:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003396:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d12b      	bne.n	80033f8 <USB_EPStartXfer+0x358>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ae:	4619      	mov	r1, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c8:	4313      	orrs	r3, r2
 80033ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033da:	4619      	mov	r1, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80033f0:	610b      	str	r3, [r1, #16]
 80033f2:	e03c      	b.n	800346e <USB_EPStartXfer+0x3ce>
 80033f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4413      	add	r3, r2
 8003402:	1e5a      	subs	r2, r3, #1
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	fbb2 f3f3 	udiv	r3, r2, r3
 800340c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4413      	add	r3, r2
 8003418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341c:	4619      	mov	r1, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	8afb      	ldrh	r3, [r7, #22]
 8003430:	04db      	lsls	r3, r3, #19
 8003432:	4618      	mov	r0, r3
 8003434:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <USB_EPStartXfer+0x480>)
 8003436:	4003      	ands	r3, r0
 8003438:	4313      	orrs	r3, r2
 800343a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344a:	4618      	mov	r0, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	8af9      	ldrh	r1, [r7, #22]
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346a:	4313      	orrs	r3, r2
 800346c:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1U)
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d10a      	bne.n	800348a <USB_EPStartXfer+0x3ea>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003482:	461a      	mov	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	6153      	str	r3, [r2, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	78db      	ldrb	r3, [r3, #3]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d12e      	bne.n	80034f0 <USB_EPStartXfer+0x450>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d113      	bne.n	80034ca <USB_EPStartXfer+0x42a>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b0:	4619      	mov	r1, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034c6:	600b      	str	r3, [r1, #0]
 80034c8:	e012      	b.n	80034f0 <USB_EPStartXfer+0x450>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d8:	4619      	mov	r1, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ee:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fe:	4619      	mov	r1, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003514:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	1ff80000 	.word	0x1ff80000

08003524 <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	4613      	mov	r3, r2
 8003530:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	785b      	ldrb	r3, [r3, #1]
 8003536:	2b01      	cmp	r3, #1
 8003538:	f040 80d2 	bne.w	80036e0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d13b      	bne.n	80035bc <USB_EP0StartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003552:	4619      	mov	r1, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003568:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800356c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357c:	4619      	mov	r1, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003592:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a2:	4619      	mov	r1, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	0cdb      	lsrs	r3, r3, #19
 80035b6:	04db      	lsls	r3, r3, #19
 80035b8:	610b      	str	r3, [r1, #16]
 80035ba:	e05a      	b.n	8003672 <USB_EP0StartXfer+0x14e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ca:	4619      	mov	r1, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	0cdb      	lsrs	r3, r3, #19
 80035de:	04db      	lsls	r3, r3, #19
 80035e0:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f0:	4619      	mov	r1, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003606:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800360a:	610b      	str	r3, [r1, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	429a      	cmp	r2, r3
 8003616:	d903      	bls.n	8003620 <USB_EP0StartXfer+0xfc>
      {
        ep->xfer_len = ep->maxpacket;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362e:	4619      	mov	r1, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003644:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003654:	4619      	mov	r1, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800366e:	4313      	orrs	r3, r2
 8003670:	610b      	str	r3, [r1, #16]
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003680:	4619      	mov	r1, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003696:	600b      	str	r3, [r1, #0]
    
    if (dma == 1)
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10b      	bne.n	80036b6 <USB_EP0StartXfer+0x192>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ac:	461a      	mov	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	6153      	str	r3, [r2, #20]
 80036b4:	e08e      	b.n	80037d4 <USB_EP0StartXfer+0x2b0>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 808a 	beq.w	80037d4 <USB_EP0StartXfer+0x2b0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c6:	4619      	mov	r1, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	2301      	movs	r3, #1
 80036d8:	4083      	lsls	r3, r0
 80036da:	4313      	orrs	r3, r2
 80036dc:	634b      	str	r3, [r1, #52]	; 0x34
 80036de:	e079      	b.n	80037d4 <USB_EP0StartXfer+0x2b0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ee:	4619      	mov	r1, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	0cdb      	lsrs	r3, r3, #19
 8003702:	04db      	lsls	r3, r3, #19
 8003704:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003714:	4619      	mov	r1, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800372a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800372e:	610b      	str	r3, [r1, #16]
      
    if (ep->xfer_len > 0U)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <USB_EP0StartXfer+0x21c>
    {
      ep->xfer_len = ep->maxpacket;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4413      	add	r3, r2
 800374a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374e:	4619      	mov	r1, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003764:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003774:	4619      	mov	r1, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378e:	4313      	orrs	r3, r2
 8003790:	610b      	str	r3, [r1, #16]
    

    if (dma == 1U)
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d10a      	bne.n	80037ae <USB_EP0StartXfer+0x28a>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a6:	461a      	mov	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	6153      	str	r3, [r2, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037bc:	4619      	mov	r1, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037d2:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b087      	sub	sp, #28
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	4611      	mov	r1, r2
 80037ee:	461a      	mov	r2, r3
 80037f0:	460b      	mov	r3, r1
 80037f2:	71fb      	strb	r3, [r7, #7]
 80037f4:	4613      	mov	r3, r2
 80037f6:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 8003800:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d11a      	bne.n	800383e <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 8003808:	88bb      	ldrh	r3, [r7, #4]
 800380a:	3303      	adds	r3, #3
 800380c:	089b      	lsrs	r3, r3, #2
 800380e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	e00f      	b.n	8003836 <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	031a      	lsls	r2, r3, #12
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003822:	461a      	mov	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	3301      	adds	r3, #1
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	3304      	adds	r3, #4
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	429a      	cmp	r2, r3
 800383c:	d3eb      	bcc.n	8003816 <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	371c      	adds	r7, #28
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	4613      	mov	r3, r2
 8003858:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	3303      	adds	r3, #3
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e00b      	b.n	8003884 <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	3301      	adds	r3, #1
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3304      	adds	r3, #4
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	429a      	cmp	r2, r3
 800388a:	d3ef      	bcc.n	800386c <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 800388c:	68bb      	ldr	r3, [r7, #8]
}
 800388e:	4618      	mov	r0, r3
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	785b      	ldrb	r3, [r3, #1]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d130      	bne.n	800390e <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	db12      	blt.n	80038e6 <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ce:	4619      	mov	r1, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038e4:	600b      	str	r3, [r1, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f4:	4619      	mov	r1, r3
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800390a:	600b      	str	r3, [r1, #0]
 800390c:	e02f      	b.n	800396e <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	db12      	blt.n	8003948 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003930:	4619      	mov	r1, r3
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003946:	600b      	str	r3, [r1, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003956:	4619      	mov	r1, r3
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800396c:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	785b      	ldrb	r3, [r3, #1]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d12e      	bne.n	80039ec <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399c:	4619      	mov	r1, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039b2:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	78db      	ldrb	r3, [r3, #3]
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d003      	beq.n	80039c4 <USB_EPClearStall+0x48>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	78db      	ldrb	r3, [r3, #3]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d141      	bne.n	8003a48 <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d2:	4619      	mov	r1, r3
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e8:	600b      	str	r3, [r1, #0]
 80039ea:	e02d      	b.n	8003a48 <USB_EPClearStall+0xcc>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fa:	4619      	mov	r1, r3
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a10:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	78db      	ldrb	r3, [r3, #3]
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d003      	beq.n	8003a22 <USB_EPClearStall+0xa6>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	78db      	ldrb	r3, [r3, #3]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d112      	bne.n	8003a48 <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a30:	4619      	mov	r1, r3
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a46:	600b      	str	r3, [r1, #0]
    }    
  }
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a68:	461a      	mov	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a76:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a7e:	4619      	mov	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003a90:	4313      	orrs	r3, r2
 8003a92:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f023 0302 	bic.w	r3, r3, #2
 8003abe:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003ac0:	2003      	movs	r0, #3
 8003ac2:	f7fc fd57 	bl	8000574 <HAL_Delay>
  
  return HAL_OK;  
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ade:	461a      	mov	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003aee:	2003      	movs	r0, #3
 8003af0:	f7fc fd40 	bl	8000574 <HAL_Delay>
  
  return HAL_OK;  
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b085      	sub	sp, #20
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4013      	ands	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  return v;  
 8003b1a:	68fb      	ldr	r3, [r7, #12]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4013      	ands	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000U) >> 16U);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	0c1b      	lsrs	r3, r3, #16
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4013      	ands	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFFU));
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	b29b      	uxth	r3, r3
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  return v;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bde:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
 8003be8:	01db      	lsls	r3, r3, #7
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	4013      	ands	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  return v;
 8003c06:	68fb      	ldr	r3, [r7, #12]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f003 0301 	and.w	r3, r3, #1
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3e:	461a      	mov	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c4c:	f023 0307 	bic.w	r3, r3, #7
 8003c50:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0306 	and.w	r3, r3, #6
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d10a      	bne.n	8003c78 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c68:	461a      	mov	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f043 0303 	orr.w	r3, r3, #3
 8003c76:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7e:	461a      	mov	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cca:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f043 0318 	orr.w	r3, r3, #24
 8003ce0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce8:	461a      	mov	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003cf6:	6113      	str	r3, [r2, #16]
  
  if (dma == 1U)
 8003cf8:	7afb      	ldrb	r3, [r7, #11]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d10c      	bne.n	8003d18 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d04:	461a      	mov	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d10:	461a      	mov	r2, r3
 8003d12:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8003d16:	6013      	str	r3, [r2, #0]
  }
  
  return HAL_OK;  
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
	...

08003d28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3301      	adds	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <USB_CoreReset+0x64>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e01b      	b.n	8003d7e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	daf2      	bge.n	8003d34 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3301      	adds	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <USB_CoreReset+0x64>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e006      	b.n	8003d7e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d0f0      	beq.n	8003d5e <USB_CoreReset+0x36>
  
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	00030d40 	.word	0x00030d40

08003d90 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	7c1b      	ldrb	r3, [r3, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10e      	bne.n	8003dc6 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8003da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dac:	2202      	movs	r2, #2
 8003dae:	2181      	movs	r1, #129	; 0x81
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f002 ff59 	bl	8006c68 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8003db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dba:	2202      	movs	r2, #2
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f002 ff52 	bl	8006c68 <USBD_LL_OpenEP>
 8003dc4:	e00b      	b.n	8003dde <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8003dc6:	2340      	movs	r3, #64	; 0x40
 8003dc8:	2202      	movs	r2, #2
 8003dca:	2181      	movs	r1, #129	; 0x81
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f002 ff4b 	bl	8006c68 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8003dd2:	2340      	movs	r3, #64	; 0x40
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f002 ff45 	bl	8006c68 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8003dde:	2308      	movs	r3, #8
 8003de0:	2203      	movs	r2, #3
 8003de2:	2182      	movs	r1, #130	; 0x82
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f002 ff3f 	bl	8006c68 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003dea:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003dee:	f003 fa03 	bl	80071f8 <malloc>
 8003df2:	4603      	mov	r3, r0
 8003df4:	461a      	mov	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d102      	bne.n	8003e0c <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 8003e06:	2301      	movs	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
 8003e0a:	e026      	b.n	8003e5a <USBD_CDC_Init+0xca>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003e12:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7c1b      	ldrb	r3, [r3, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <USBD_CDC_Init+0xba>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e40:	2101      	movs	r1, #1
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f003 f88c 	bl	8006f60 <USBD_LL_PrepareReceive>
 8003e48:	e007      	b.n	8003e5a <USBD_CDC_Init+0xca>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e50:	2340      	movs	r3, #64	; 0x40
 8003e52:	2101      	movs	r1, #1
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f003 f883 	bl	8006f60 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8003e74:	2181      	movs	r1, #129	; 0x81
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f002 ff34 	bl	8006ce4 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f002 ff30 	bl	8006ce4 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8003e84:	2182      	movs	r1, #130	; 0x82
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f002 ff2c 	bl	8006ce4 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00e      	beq.n	8003eb4 <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f003 f9ae 	bl	8007208 <free>
    pdev->pClassData = NULL;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003ed0:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d03a      	beq.n	8003f54 <USBD_CDC_Setup+0x94>
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d000      	beq.n	8003ee4 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8003ee2:	e043      	b.n	8003f6c <USBD_CDC_Setup+0xac>
    if (req->wLength)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	88db      	ldrh	r3, [r3, #6]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d029      	beq.n	8003f40 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	b25b      	sxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	da11      	bge.n	8003f1a <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8003f02:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	88d2      	ldrh	r2, [r2, #6]
 8003f08:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 8003f0a:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	88db      	ldrh	r3, [r3, #6]
 8003f10:	461a      	mov	r2, r3
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f001 f82c 	bl	8004f70 <USBD_CtlSendData>
    break;
 8003f18:	e029      	b.n	8003f6e <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	785a      	ldrb	r2, [r3, #1]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	88db      	ldrh	r3, [r3, #6]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 8003f30:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	88db      	ldrh	r3, [r3, #6]
 8003f36:	461a      	mov	r2, r3
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f001 f847 	bl	8004fcc <USBD_CtlPrepareRx>
    break;
 8003f3e:	e016      	b.n	8003f6e <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	7850      	ldrb	r0, [r2, #1]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	6839      	ldr	r1, [r7, #0]
 8003f50:	4798      	blx	r3
    break;
 8003f52:	e00c      	b.n	8003f6e <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	785b      	ldrb	r3, [r3, #1]
 8003f58:	2b0a      	cmp	r3, #10
 8003f5a:	d001      	beq.n	8003f60 <USBD_CDC_Setup+0xa0>
 8003f5c:	2b0b      	cmp	r3, #11
      break;
 8003f5e:	e005      	b.n	8003f6c <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 8003f60:	2201      	movs	r2, #1
 8003f62:	4905      	ldr	r1, [pc, #20]	; (8003f78 <USBD_CDC_Setup+0xb8>)
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f001 f803 	bl	8004f70 <USBD_CtlSendData>
      break;
 8003f6a:	bf00      	nop
    break;
 8003f6c:	bf00      	nop
  }
  return USBD_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	200001e0 	.word	0x200001e0

08003f7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003f8e:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e000      	b.n	8003fa8 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8003fa6:	2302      	movs	r3, #2
  }
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003fc6:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f003 f801 	bl	8006fd4 <USBD_LL_GetRxDataSize>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00d      	beq.n	8004000 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	4798      	blx	r3

    return USBD_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004000:	2302      	movs	r3, #2
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004018:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d015      	beq.n	8004050 <USBD_CDC_EP0_RxReady+0x46>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800402a:	2bff      	cmp	r3, #255	; 0xff
 800402c:	d010      	beq.n	8004050 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800403c:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004044:	b292      	uxth	r2, r2
 8004046:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	22ff      	movs	r2, #255	; 0xff
 800404c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2243      	movs	r2, #67	; 0x43
 8004068:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800406a:	4b03      	ldr	r3, [pc, #12]	; (8004078 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800406c:	4618      	mov	r0, r3
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	2000008c 	.word	0x2000008c

0800407c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2243      	movs	r2, #67	; 0x43
 8004088:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800408a:	4b03      	ldr	r3, [pc, #12]	; (8004098 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	20000048 	.word	0x20000048

0800409c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2243      	movs	r2, #67	; 0x43
 80040a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80040aa:	4b03      	ldr	r3, [pc, #12]	; (80040b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	200000d0 	.word	0x200000d0

080040bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	220a      	movs	r2, #10
 80040c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80040ca:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	20000004 	.word	0x20000004

080040dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80040e6:	2302      	movs	r3, #2
 80040e8:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 80040f8:	2300      	movs	r3, #0
 80040fa:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800410a:	b480      	push	{r7}
 800410c:	b087      	sub	sp, #28
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	4613      	mov	r3, r2
 8004116:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800411e:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8004128:	88fa      	ldrh	r2, [r7, #6]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800414e:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004174:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800417c:	2b00      	cmp	r3, #0
 800417e:	d017      	beq.n	80041b0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	7c1b      	ldrb	r3, [r3, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d109      	bne.n	800419c <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800418e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004192:	2101      	movs	r1, #1
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f002 fee3 	bl	8006f60 <USBD_LL_PrepareReceive>
 800419a:	e007      	b.n	80041ac <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041a2:	2340      	movs	r3, #64	; 0x40
 80041a4:	2101      	movs	r1, #1
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f002 feda 	bl	8006f60 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e000      	b.n	80041b2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80041b0:	2302      	movs	r3, #2
  }
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	4613      	mov	r3, r2
 80041c6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 80041ce:	2302      	movs	r3, #2
 80041d0:	e01a      	b.n	8004208 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	79fa      	ldrb	r2, [r7, #7]
 80041fe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f002 fcab 	bl	8006b5c <USBD_LL_Init>
  
  return USBD_OK; 
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d006      	beq.n	8004232 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]
 8004230:	e001      	b.n	8004236 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8004232:	2302      	movs	r3, #2
 8004234:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8004236:	7bfb      	ldrb	r3, [r7, #15]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f002 fcd9 	bl	8006c04 <USBD_LL_Start>
  
  return USBD_OK;  
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	460b      	mov	r3, r1
 800427c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800427e:	2302      	movs	r3, #2
 8004280:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00c      	beq.n	80042a6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	78fa      	ldrb	r2, [r7, #3]
 8004296:	4611      	mov	r1, r2
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	4611      	mov	r1, r2
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	4798      	blx	r3
  return USBD_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042e6:	6839      	ldr	r1, [r7, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fd98 	bl	8004e1e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80042fc:	461a      	mov	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	2b01      	cmp	r3, #1
 8004310:	d00b      	beq.n	800432a <USBD_LL_SetupStage+0x54>
 8004312:	2b02      	cmp	r3, #2
 8004314:	d011      	beq.n	800433a <USBD_LL_SetupStage+0x64>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d117      	bne.n	800434a <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f9c6 	bl	80046b4 <USBD_StdDevReq>
    break;
 8004328:	e01a      	b.n	8004360 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004330:	4619      	mov	r1, r3
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fa0e 	bl	8004754 <USBD_StdItfReq>
    break;
 8004338:	e012      	b.n	8004360 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004340:	4619      	mov	r1, r3
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fa39 	bl	80047ba <USBD_StdEPReq>
    break;
 8004348:	e00a      	b.n	8004360 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004350:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004354:	b2db      	uxtb	r3, r3
 8004356:	4619      	mov	r1, r3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f002 fcf9 	bl	8006d50 <USBD_LL_StallEP>
    break;
 800435e:	bf00      	nop
  }  
  return USBD_OK;  
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b086      	sub	sp, #24
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	460b      	mov	r3, r1
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004378:	7afb      	ldrb	r3, [r7, #11]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d138      	bne.n	80043f0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004384:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800438c:	2b03      	cmp	r3, #3
 800438e:	d142      	bne.n	8004416 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	429a      	cmp	r2, r3
 800439a:	d914      	bls.n	80043c6 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	1ad2      	subs	r2, r2, r3
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	4293      	cmp	r3, r2
 80043b4:	bf28      	it	cs
 80043b6:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 fe22 	bl	8005008 <USBD_CtlContinueRx>
 80043c4:	e027      	b.n	8004416 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80043d8:	2b03      	cmp	r3, #3
 80043da:	d105      	bne.n	80043e8 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 fe1f 	bl	800502c <USBD_CtlSendStatus>
 80043ee:	e012      	b.n	8004416 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00c      	beq.n	8004416 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8004402:	2b03      	cmp	r3, #3
 8004404:	d107      	bne.n	8004416 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	7afa      	ldrb	r2, [r7, #11]
 8004410:	4611      	mov	r1, r2
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	4798      	blx	r3
  }  
  return USBD_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	460b      	mov	r3, r1
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800442e:	7afb      	ldrb	r3, [r7, #11]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d16c      	bne.n	800450e <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3314      	adds	r3, #20
 8004438:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004440:	2b02      	cmp	r3, #2
 8004442:	d157      	bne.n	80044f4 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	429a      	cmp	r2, r3
 800444e:	d915      	bls.n	800447c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	1ad2      	subs	r2, r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8004462:	b29b      	uxth	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fd9d 	bl	8004fa8 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800446e:	2300      	movs	r3, #0
 8004470:	2200      	movs	r2, #0
 8004472:	2100      	movs	r1, #0
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f002 fd73 	bl	8006f60 <USBD_LL_PrepareReceive>
 800447a:	e03b      	b.n	80044f4 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	68d2      	ldr	r2, [r2, #12]
 8004484:	fbb3 f1f2 	udiv	r1, r3, r2
 8004488:	fb02 f201 	mul.w	r2, r2, r1
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d11c      	bne.n	80044cc <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 800449a:	429a      	cmp	r2, r3
 800449c:	d316      	bcc.n	80044cc <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d20f      	bcs.n	80044cc <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80044ac:	2200      	movs	r2, #0
 80044ae:	2100      	movs	r1, #0
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 fd79 	bl	8004fa8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80044be:	2300      	movs	r3, #0
 80044c0:	2200      	movs	r2, #0
 80044c2:	2100      	movs	r1, #0
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f002 fd4b 	bl	8006f60 <USBD_LL_PrepareReceive>
 80044ca:	e013      	b.n	80044f4 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d105      	bne.n	80044ee <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fdaf 	bl	8005052 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d11a      	bne.n	8004534 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f7ff feac 	bl	800425c <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800450c:	e012      	b.n	8004534 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00c      	beq.n	8004534 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8004520:	2b03      	cmp	r3, #3
 8004522:	d107      	bne.n	8004534 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	7afa      	ldrb	r2, [r7, #11]
 800452e:	4611      	mov	r1, r2
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	4798      	blx	r3
  }  
  return USBD_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004546:	2340      	movs	r3, #64	; 0x40
 8004548:	2200      	movs	r2, #0
 800454a:	2100      	movs	r1, #0
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f002 fb8b 	bl	8006c68 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2240      	movs	r2, #64	; 0x40
 8004556:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800455a:	2340      	movs	r3, #64	; 0x40
 800455c:	2200      	movs	r2, #0
 800455e:	2180      	movs	r1, #128	; 0x80
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f002 fb81 	bl	8006c68 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2240      	movs	r2, #64	; 0x40
 800456a:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6852      	ldr	r2, [r2, #4]
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	4611      	mov	r1, r2
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4798      	blx	r3
 
  
  return USBD_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2204      	movs	r2, #4
 80045d4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004616:	2b03      	cmp	r3, #3
 8004618:	d10b      	bne.n	8004632 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	460b      	mov	r3, r1
 8004660:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6852      	ldr	r2, [r2, #4]
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	4611      	mov	r1, r2
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	4798      	blx	r3
   
  return USBD_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 80046be:	2300      	movs	r3, #0
 80046c0:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	785b      	ldrb	r3, [r3, #1]
 80046c6:	2b09      	cmp	r3, #9
 80046c8:	d839      	bhi.n	800473e <USBD_StdDevReq+0x8a>
 80046ca:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <USBD_StdDevReq+0x1c>)
 80046cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d0:	08004721 	.word	0x08004721
 80046d4:	08004735 	.word	0x08004735
 80046d8:	0800473f 	.word	0x0800473f
 80046dc:	0800472b 	.word	0x0800472b
 80046e0:	0800473f 	.word	0x0800473f
 80046e4:	08004703 	.word	0x08004703
 80046e8:	080046f9 	.word	0x080046f9
 80046ec:	0800473f 	.word	0x0800473f
 80046f0:	08004717 	.word	0x08004717
 80046f4:	0800470d 	.word	0x0800470d
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 80046f8:	6839      	ldr	r1, [r7, #0]
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f936 	bl	800496c <USBD_GetDescriptor>
    break;
 8004700:	e022      	b.n	8004748 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8004702:	6839      	ldr	r1, [r7, #0]
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fa25 	bl	8004b54 <USBD_SetAddress>
    break;
 800470a:	e01d      	b.n	8004748 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800470c:	6839      	ldr	r1, [r7, #0]
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fa5e 	bl	8004bd0 <USBD_SetConfig>
    break;
 8004714:	e018      	b.n	8004748 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8004716:	6839      	ldr	r1, [r7, #0]
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fae1 	bl	8004ce0 <USBD_GetConfig>
    break;
 800471e:	e013      	b.n	8004748 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8004720:	6839      	ldr	r1, [r7, #0]
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fb0e 	bl	8004d44 <USBD_GetStatus>
    break;
 8004728:	e00e      	b.n	8004748 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800472a:	6839      	ldr	r1, [r7, #0]
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fb33 	bl	8004d98 <USBD_SetFeature>
    break;
 8004732:	e009      	b.n	8004748 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8004734:	6839      	ldr	r1, [r7, #0]
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fb49 	bl	8004dce <USBD_ClrFeature>
    break;
 800473c:	e004      	b.n	8004748 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800473e:	6839      	ldr	r1, [r7, #0]
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 fba9 	bl	8004e98 <USBD_CtlError>
    break;
 8004746:	bf00      	nop
  }
  
  return ret;
 8004748:	7bfb      	ldrb	r3, [r7, #15]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop

08004754 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 800475e:	2300      	movs	r3, #0
 8004760:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004768:	2b03      	cmp	r3, #3
 800476a:	d11b      	bne.n	80047a4 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	889b      	ldrh	r3, [r3, #4]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b01      	cmp	r3, #1
 8004774:	d811      	bhi.n	800479a <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	6839      	ldr	r1, [r7, #0]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	88db      	ldrh	r3, [r3, #6]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d110      	bne.n	80047ae <USBD_StdItfReq+0x5a>
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10d      	bne.n	80047ae <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fc4a 	bl	800502c <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8004798:	e009      	b.n	80047ae <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 800479a:	6839      	ldr	r1, [r7, #0]
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fb7b 	bl	8004e98 <USBD_CtlError>
    break;
 80047a2:	e004      	b.n	80047ae <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 80047a4:	6839      	ldr	r1, [r7, #0]
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fb76 	bl	8004e98 <USBD_CtlError>
    break;
 80047ac:	e000      	b.n	80047b0 <USBD_StdItfReq+0x5c>
    break;
 80047ae:	bf00      	nop
  }
  return USBD_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 80047c4:	2300      	movs	r3, #0
 80047c6:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	889b      	ldrh	r3, [r3, #4]
 80047cc:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d108      	bne.n	80047ec <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	6839      	ldr	r1, [r7, #0]
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	4798      	blx	r3
    
    return USBD_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e0ba      	b.n	8004962 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d039      	beq.n	8004868 <USBD_StdEPReq+0xae>
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d002      	beq.n	80047fe <USBD_StdEPReq+0x44>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d06b      	beq.n	80048d4 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 80047fc:	e0b0      	b.n	8004960 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004804:	2b02      	cmp	r3, #2
 8004806:	d002      	beq.n	800480e <USBD_StdEPReq+0x54>
 8004808:	2b03      	cmp	r3, #3
 800480a:	d00c      	beq.n	8004826 <USBD_StdEPReq+0x6c>
 800480c:	e025      	b.n	800485a <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800480e:	7bbb      	ldrb	r3, [r7, #14]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d027      	beq.n	8004864 <USBD_StdEPReq+0xaa>
 8004814:	7bbb      	ldrb	r3, [r7, #14]
 8004816:	2b80      	cmp	r3, #128	; 0x80
 8004818:	d024      	beq.n	8004864 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 800481a:	7bbb      	ldrb	r3, [r7, #14]
 800481c:	4619      	mov	r1, r3
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f002 fa96 	bl	8006d50 <USBD_LL_StallEP>
      break;	
 8004824:	e01e      	b.n	8004864 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	885b      	ldrh	r3, [r3, #2]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10a      	bne.n	8004844 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800482e:	7bbb      	ldrb	r3, [r7, #14]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d007      	beq.n	8004844 <USBD_StdEPReq+0x8a>
 8004834:	7bbb      	ldrb	r3, [r7, #14]
 8004836:	2b80      	cmp	r3, #128	; 0x80
 8004838:	d004      	beq.n	8004844 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 800483a:	7bbb      	ldrb	r3, [r7, #14]
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f002 fa86 	bl	8006d50 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	6839      	ldr	r1, [r7, #0]
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fbea 	bl	800502c <USBD_CtlSendStatus>
      break;
 8004858:	e005      	b.n	8004866 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 800485a:	6839      	ldr	r1, [r7, #0]
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fb1b 	bl	8004e98 <USBD_CtlError>
      break;    
 8004862:	e000      	b.n	8004866 <USBD_StdEPReq+0xac>
      break;	
 8004864:	bf00      	nop
    break;
 8004866:	e07b      	b.n	8004960 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800486e:	2b02      	cmp	r3, #2
 8004870:	d002      	beq.n	8004878 <USBD_StdEPReq+0xbe>
 8004872:	2b03      	cmp	r3, #3
 8004874:	d00c      	beq.n	8004890 <USBD_StdEPReq+0xd6>
 8004876:	e024      	b.n	80048c2 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004878:	7bbb      	ldrb	r3, [r7, #14]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d026      	beq.n	80048cc <USBD_StdEPReq+0x112>
 800487e:	7bbb      	ldrb	r3, [r7, #14]
 8004880:	2b80      	cmp	r3, #128	; 0x80
 8004882:	d023      	beq.n	80048cc <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8004884:	7bbb      	ldrb	r3, [r7, #14]
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f002 fa61 	bl	8006d50 <USBD_LL_StallEP>
      break;	
 800488e:	e01d      	b.n	80048cc <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	885b      	ldrh	r3, [r3, #2]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d11b      	bne.n	80048d0 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8004898:	7bbb      	ldrb	r3, [r7, #14]
 800489a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80048a2:	7bbb      	ldrb	r3, [r7, #14]
 80048a4:	4619      	mov	r1, r3
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f002 fa88 	bl	8006dbc <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	6839      	ldr	r1, [r7, #0]
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fbb6 	bl	800502c <USBD_CtlSendStatus>
      break;
 80048c0:	e006      	b.n	80048d0 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 80048c2:	6839      	ldr	r1, [r7, #0]
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fae7 	bl	8004e98 <USBD_CtlError>
      break;    
 80048ca:	e002      	b.n	80048d2 <USBD_StdEPReq+0x118>
      break;	
 80048cc:	bf00      	nop
 80048ce:	e047      	b.n	8004960 <USBD_StdEPReq+0x1a6>
      break;
 80048d0:	bf00      	nop
    break;
 80048d2:	e045      	b.n	8004960 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d002      	beq.n	80048e4 <USBD_StdEPReq+0x12a>
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d00b      	beq.n	80048fa <USBD_StdEPReq+0x140>
 80048e2:	e036      	b.n	8004952 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 80048e4:	7bbb      	ldrb	r3, [r7, #14]
 80048e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d036      	beq.n	800495c <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 80048ee:	7bbb      	ldrb	r3, [r7, #14]
 80048f0:	4619      	mov	r1, r3
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f002 fa2c 	bl	8006d50 <USBD_LL_StallEP>
      break;	
 80048f8:	e030      	b.n	800495c <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80048fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	da08      	bge.n	8004914 <USBD_StdEPReq+0x15a>
 8004902:	7bbb      	ldrb	r3, [r7, #14]
 8004904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004908:	3301      	adds	r3, #1
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	4413      	add	r3, r2
 8004910:	3304      	adds	r3, #4
 8004912:	e007      	b.n	8004924 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8004914:	7bbb      	ldrb	r3, [r7, #14]
 8004916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800491a:	3310      	adds	r3, #16
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	4413      	add	r3, r2
 8004922:	3304      	adds	r3, #4
 8004924:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004926:	7bbb      	ldrb	r3, [r7, #14]
 8004928:	4619      	mov	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f002 fa7c 	bl	8006e28 <USBD_LL_IsStallEP>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2201      	movs	r2, #1
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	e002      	b.n	8004944 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8004944:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8004946:	2202      	movs	r2, #2
 8004948:	4619      	mov	r1, r3
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fb10 	bl	8004f70 <USBD_CtlSendData>
      break;
 8004950:	e005      	b.n	800495e <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8004952:	6839      	ldr	r1, [r7, #0]
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fa9f 	bl	8004e98 <USBD_CtlError>
      break;
 800495a:	e000      	b.n	800495e <USBD_StdEPReq+0x1a4>
      break;	
 800495c:	bf00      	nop
    break;
 800495e:	bf00      	nop
  }
  return ret;
 8004960:	7bfb      	ldrb	r3, [r7, #15]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	885b      	ldrh	r3, [r3, #2]
 800497a:	0a1b      	lsrs	r3, r3, #8
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	2b06      	cmp	r3, #6
 8004982:	f200 80c9 	bhi.w	8004b18 <USBD_GetDescriptor+0x1ac>
 8004986:	a201      	add	r2, pc, #4	; (adr r2, 800498c <USBD_GetDescriptor+0x20>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	080049a9 	.word	0x080049a9
 8004990:	080049c1 	.word	0x080049c1
 8004994:	08004a01 	.word	0x08004a01
 8004998:	08004b19 	.word	0x08004b19
 800499c:	08004b19 	.word	0x08004b19
 80049a0:	08004ac5 	.word	0x08004ac5
 80049a4:	08004aeb 	.word	0x08004aeb
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	7c12      	ldrb	r2, [r2, #16]
 80049b4:	f107 010a 	add.w	r1, r7, #10
 80049b8:	4610      	mov	r0, r2
 80049ba:	4798      	blx	r3
 80049bc:	60f8      	str	r0, [r7, #12]
    break;
 80049be:	e0b0      	b.n	8004b22 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	7c1b      	ldrb	r3, [r3, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10d      	bne.n	80049e4 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	f107 020a 	add.w	r2, r7, #10
 80049d4:	4610      	mov	r0, r2
 80049d6:	4798      	blx	r3
 80049d8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3301      	adds	r3, #1
 80049de:	2202      	movs	r2, #2
 80049e0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80049e2:	e09e      	b.n	8004b22 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	f107 020a 	add.w	r2, r7, #10
 80049f0:	4610      	mov	r0, r2
 80049f2:	4798      	blx	r3
 80049f4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	3301      	adds	r3, #1
 80049fa:	2202      	movs	r2, #2
 80049fc:	701a      	strb	r2, [r3, #0]
    break;
 80049fe:	e090      	b.n	8004b22 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	885b      	ldrh	r3, [r3, #2]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b05      	cmp	r3, #5
 8004a08:	d856      	bhi.n	8004ab8 <USBD_GetDescriptor+0x14c>
 8004a0a:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <USBD_GetDescriptor+0xa4>)
 8004a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a10:	08004a29 	.word	0x08004a29
 8004a14:	08004a41 	.word	0x08004a41
 8004a18:	08004a59 	.word	0x08004a59
 8004a1c:	08004a71 	.word	0x08004a71
 8004a20:	08004a89 	.word	0x08004a89
 8004a24:	08004aa1 	.word	0x08004aa1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	7c12      	ldrb	r2, [r2, #16]
 8004a34:	f107 010a 	add.w	r1, r7, #10
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4798      	blx	r3
 8004a3c:	60f8      	str	r0, [r7, #12]
      break;
 8004a3e:	e040      	b.n	8004ac2 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	7c12      	ldrb	r2, [r2, #16]
 8004a4c:	f107 010a 	add.w	r1, r7, #10
 8004a50:	4610      	mov	r0, r2
 8004a52:	4798      	blx	r3
 8004a54:	60f8      	str	r0, [r7, #12]
      break;
 8004a56:	e034      	b.n	8004ac2 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	7c12      	ldrb	r2, [r2, #16]
 8004a64:	f107 010a 	add.w	r1, r7, #10
 8004a68:	4610      	mov	r0, r2
 8004a6a:	4798      	blx	r3
 8004a6c:	60f8      	str	r0, [r7, #12]
      break;
 8004a6e:	e028      	b.n	8004ac2 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	7c12      	ldrb	r2, [r2, #16]
 8004a7c:	f107 010a 	add.w	r1, r7, #10
 8004a80:	4610      	mov	r0, r2
 8004a82:	4798      	blx	r3
 8004a84:	60f8      	str	r0, [r7, #12]
      break;
 8004a86:	e01c      	b.n	8004ac2 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	7c12      	ldrb	r2, [r2, #16]
 8004a94:	f107 010a 	add.w	r1, r7, #10
 8004a98:	4610      	mov	r0, r2
 8004a9a:	4798      	blx	r3
 8004a9c:	60f8      	str	r0, [r7, #12]
      break;
 8004a9e:	e010      	b.n	8004ac2 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	7c12      	ldrb	r2, [r2, #16]
 8004aac:	f107 010a 	add.w	r1, r7, #10
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	4798      	blx	r3
 8004ab4:	60f8      	str	r0, [r7, #12]
      break;
 8004ab6:	e004      	b.n	8004ac2 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8004ab8:	6839      	ldr	r1, [r7, #0]
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f9ec 	bl	8004e98 <USBD_CtlError>
      return;
 8004ac0:	e044      	b.n	8004b4c <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8004ac2:	e02e      	b.n	8004b22 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	7c1b      	ldrb	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d109      	bne.n	8004ae0 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad4:	f107 020a 	add.w	r2, r7, #10
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4798      	blx	r3
 8004adc:	60f8      	str	r0, [r7, #12]
      break;
 8004ade:	e020      	b.n	8004b22 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004ae0:	6839      	ldr	r1, [r7, #0]
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f9d8 	bl	8004e98 <USBD_CtlError>
      return;
 8004ae8:	e030      	b.n	8004b4c <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	7c1b      	ldrb	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10d      	bne.n	8004b0e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afa:	f107 020a 	add.w	r2, r7, #10
 8004afe:	4610      	mov	r0, r2
 8004b00:	4798      	blx	r3
 8004b02:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3301      	adds	r3, #1
 8004b08:	2207      	movs	r2, #7
 8004b0a:	701a      	strb	r2, [r3, #0]
      break; 
 8004b0c:	e009      	b.n	8004b22 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004b0e:	6839      	ldr	r1, [r7, #0]
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f9c1 	bl	8004e98 <USBD_CtlError>
      return;
 8004b16:	e019      	b.n	8004b4c <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8004b18:	6839      	ldr	r1, [r7, #0]
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f9bc 	bl	8004e98 <USBD_CtlError>
    return;
 8004b20:	e014      	b.n	8004b4c <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8004b22:	897b      	ldrh	r3, [r7, #10]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d011      	beq.n	8004b4c <USBD_GetDescriptor+0x1e0>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	88db      	ldrh	r3, [r3, #6]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	88da      	ldrh	r2, [r3, #6]
 8004b34:	897b      	ldrh	r3, [r7, #10]
 8004b36:	4293      	cmp	r3, r2
 8004b38:	bf28      	it	cs
 8004b3a:	4613      	movcs	r3, r2
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8004b40:	897b      	ldrh	r3, [r7, #10]
 8004b42:	461a      	mov	r2, r3
 8004b44:	68f9      	ldr	r1, [r7, #12]
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fa12 	bl	8004f70 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop

08004b54 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	889b      	ldrh	r3, [r3, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d12c      	bne.n	8004bc0 <USBD_SetAddress+0x6c>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	88db      	ldrh	r3, [r3, #6]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d128      	bne.n	8004bc0 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	885b      	ldrh	r3, [r3, #2]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b78:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d104      	bne.n	8004b8e <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8004b84:	6839      	ldr	r1, [r7, #0]
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f986 	bl	8004e98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004b8c:	e01c      	b.n	8004bc8 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	7bfa      	ldrb	r2, [r7, #15]
 8004b92:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f002 f970 	bl	8006e80 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fa43 	bl	800502c <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d004      	beq.n	8004bb6 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004bb4:	e008      	b.n	8004bc8 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004bbe:	e003      	b.n	8004bc8 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8004bc0:	6839      	ldr	r1, [r7, #0]
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f968 	bl	8004e98 <USBD_CtlError>
  } 
}
 8004bc8:	bf00      	nop
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	885b      	ldrh	r3, [r3, #2]
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	4b3e      	ldr	r3, [pc, #248]	; (8004cdc <USBD_SetConfig+0x10c>)
 8004be2:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004be4:	4b3d      	ldr	r3, [pc, #244]	; (8004cdc <USBD_SetConfig+0x10c>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d904      	bls.n	8004bf6 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8004bec:	6839      	ldr	r1, [r7, #0]
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f952 	bl	8004e98 <USBD_CtlError>
 8004bf4:	e06f      	b.n	8004cd6 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d002      	beq.n	8004c06 <USBD_SetConfig+0x36>
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d023      	beq.n	8004c4c <USBD_SetConfig+0x7c>
 8004c04:	e062      	b.n	8004ccc <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8004c06:	4b35      	ldr	r3, [pc, #212]	; (8004cdc <USBD_SetConfig+0x10c>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d01a      	beq.n	8004c44 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8004c0e:	4b33      	ldr	r3, [pc, #204]	; (8004cdc <USBD_SetConfig+0x10c>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004c20:	4b2e      	ldr	r3, [pc, #184]	; (8004cdc <USBD_SetConfig+0x10c>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	4619      	mov	r1, r3
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7ff fb23 	bl	8004272 <USBD_SetClassConfig>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d104      	bne.n	8004c3c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8004c32:	6839      	ldr	r1, [r7, #0]
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f92f 	bl	8004e98 <USBD_CtlError>
          return;
 8004c3a:	e04c      	b.n	8004cd6 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f9f5 	bl	800502c <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8004c42:	e048      	b.n	8004cd6 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f9f1 	bl	800502c <USBD_CtlSendStatus>
      break;
 8004c4a:	e044      	b.n	8004cd6 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8004c4c:	4b23      	ldr	r3, [pc, #140]	; (8004cdc <USBD_SetConfig+0x10c>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d112      	bne.n	8004c7a <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8004c5c:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <USBD_SetConfig+0x10c>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8004c66:	4b1d      	ldr	r3, [pc, #116]	; (8004cdc <USBD_SetConfig+0x10c>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff fb1f 	bl	80042b0 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f9da 	bl	800502c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004c78:	e02d      	b.n	8004cd6 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8004c7a:	4b18      	ldr	r3, [pc, #96]	; (8004cdc <USBD_SetConfig+0x10c>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d01d      	beq.n	8004cc4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff fb0d 	bl	80042b0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004c96:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <USBD_SetConfig+0x10c>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004ca0:	4b0e      	ldr	r3, [pc, #56]	; (8004cdc <USBD_SetConfig+0x10c>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff fae3 	bl	8004272 <USBD_SetClassConfig>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d104      	bne.n	8004cbc <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8004cb2:	6839      	ldr	r1, [r7, #0]
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f8ef 	bl	8004e98 <USBD_CtlError>
          return;
 8004cba:	e00c      	b.n	8004cd6 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f9b5 	bl	800502c <USBD_CtlSendStatus>
      break;
 8004cc2:	e008      	b.n	8004cd6 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f9b1 	bl	800502c <USBD_CtlSendStatus>
      break;
 8004cca:	e004      	b.n	8004cd6 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8004ccc:	6839      	ldr	r1, [r7, #0]
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f8e2 	bl	8004e98 <USBD_CtlError>
      break;
 8004cd4:	bf00      	nop
    }
  }
}
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	200001e1 	.word	0x200001e1

08004ce0 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	88db      	ldrh	r3, [r3, #6]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d004      	beq.n	8004cfc <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8004cf2:	6839      	ldr	r1, [r7, #0]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f8cf 	bl	8004e98 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8004cfa:	e01f      	b.n	8004d3c <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d002      	beq.n	8004d0c <USBD_GetConfig+0x2c>
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d00b      	beq.n	8004d22 <USBD_GetConfig+0x42>
 8004d0a:	e012      	b.n	8004d32 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8004d16:	2201      	movs	r2, #1
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f928 	bl	8004f70 <USBD_CtlSendData>
      break;
 8004d20:	e00c      	b.n	8004d3c <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8004d26:	2201      	movs	r2, #1
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f920 	bl	8004f70 <USBD_CtlSendData>
      break;
 8004d30:	e004      	b.n	8004d3c <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8004d32:	6839      	ldr	r1, [r7, #0]
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f8af 	bl	8004e98 <USBD_CtlError>
      break;
 8004d3a:	bf00      	nop
}
 8004d3c:	bf00      	nop
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004d54:	3b02      	subs	r3, #2
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d815      	bhi.n	8004d86 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f043 0202 	orr.w	r2, r3, #2
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f8f6 	bl	8004f70 <USBD_CtlSendData>
                      2);
    break;
 8004d84:	e004      	b.n	8004d90 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8004d86:	6839      	ldr	r1, [r7, #0]
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f885 	bl	8004e98 <USBD_CtlError>
    break;
 8004d8e:	bf00      	nop
  }
}
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	885b      	ldrh	r3, [r3, #2]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d10d      	bne.n	8004dc6 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	6839      	ldr	r1, [r7, #0]
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f933 	bl	800502c <USBD_CtlSendStatus>
  }

}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004dde:	3b02      	subs	r3, #2
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d812      	bhi.n	8004e0a <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	885b      	ldrh	r3, [r3, #2]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d113      	bne.n	8004e14 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	6839      	ldr	r1, [r7, #0]
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f912 	bl	800502c <USBD_CtlSendStatus>
    }
    break;
 8004e08:	e004      	b.n	8004e14 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8004e0a:	6839      	ldr	r1, [r7, #0]
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f843 	bl	8004e98 <USBD_CtlError>
    break;
 8004e12:	e000      	b.n	8004e16 <USBD_ClrFeature+0x48>
    break;
 8004e14:	bf00      	nop
  }
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781a      	ldrb	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	785a      	ldrb	r2, [r3, #1]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	3302      	adds	r3, #2
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	3303      	adds	r3, #3
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	4413      	add	r3, r2
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	3304      	adds	r3, #4
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	3305      	adds	r3, #5
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	4413      	add	r3, r2
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	3306      	adds	r3, #6
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	3307      	adds	r3, #7
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	4413      	add	r3, r2
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	80da      	strh	r2, [r3, #6]

}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8004ea2:	2180      	movs	r1, #128	; 0x80
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f001 ff53 	bl	8006d50 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8004eaa:	2100      	movs	r1, #0
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f001 ff4f 	bl	8006d50 <USBD_LL_StallEP>
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b086      	sub	sp, #24
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d033      	beq.n	8004f38 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f835 	bl	8004f40 <USBD_GetLen>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	3301      	adds	r3, #1
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8004ee4:	7dfb      	ldrb	r3, [r7, #23]
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	75fa      	strb	r2, [r7, #23]
 8004eea:	461a      	mov	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4413      	add	r3, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	8812      	ldrh	r2, [r2, #0]
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	75fa      	strb	r2, [r7, #23]
 8004efe:	461a      	mov	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4413      	add	r3, r2
 8004f04:	2203      	movs	r2, #3
 8004f06:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8004f08:	e012      	b.n	8004f30 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	75fa      	strb	r2, [r7, #23]
 8004f10:	461a      	mov	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	441a      	add	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1c59      	adds	r1, r3, #1
 8004f1a:	60f9      	str	r1, [r7, #12]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8004f20:	7dfb      	ldrb	r3, [r7, #23]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	75fa      	strb	r2, [r7, #23]
 8004f26:	461a      	mov	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e8      	bne.n	8004f0a <USBD_GetString+0x50>
    }
  } 
}
 8004f38:	bf00      	nop
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8004f4c:	e005      	b.n	8004f5a <USBD_GetLen+0x1a>
    {
        len++;
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	3301      	adds	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
        buf++;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3301      	adds	r3, #1
 8004f58:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f5      	bne.n	8004f4e <USBD_GetLen+0xe>
    }

    return len;
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2202      	movs	r2, #2
 8004f82:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8004f86:	88fa      	ldrh	r2, [r7, #6]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8004f8c:	88fa      	ldrh	r2, [r7, #6]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	2100      	movs	r1, #0
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f001 ffa7 	bl	8006eec <USBD_LL_Transmit>
  
  return USBD_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8004fb6:	88fb      	ldrh	r3, [r7, #6]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	2100      	movs	r1, #0
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f001 ff95 	bl	8006eec <USBD_LL_Transmit>
  
  return USBD_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2203      	movs	r2, #3
 8004fde:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8004fe2:	88fa      	ldrh	r2, [r7, #6]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8004fea:	88fa      	ldrh	r2, [r7, #6]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f001 ffb1 	bl	8006f60 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	4613      	mov	r3, r2
 8005014:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	2100      	movs	r1, #0
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f001 ff9f 	bl	8006f60 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2204      	movs	r2, #4
 8005038:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800503c:	2300      	movs	r3, #0
 800503e:	2200      	movs	r2, #0
 8005040:	2100      	movs	r1, #0
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f001 ff52 	bl	8006eec <USBD_LL_Transmit>
  
  return USBD_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2205      	movs	r2, #5
 800505e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8005062:	2300      	movs	r3, #0
 8005064:	2200      	movs	r2, #0
 8005066:	2100      	movs	r1, #0
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f001 ff79 	bl	8006f60 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800508a:	2b84      	cmp	r3, #132	; 0x84
 800508c:	d005      	beq.n	800509a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800508e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4413      	add	r3, r2
 8005096:	3303      	adds	r3, #3
 8005098:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800509a:	68fb      	ldr	r3, [r7, #12]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80050ac:	f000 fe36 	bl	8005d1c <vTaskStartScheduler>
  
  return osOK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80050b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050b8:	b087      	sub	sp, #28
 80050ba:	af02      	add	r7, sp, #8
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685c      	ldr	r4, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050cc:	b29e      	uxth	r6, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff ffcf 	bl	8005078 <makeFreeRtosPriority>
 80050da:	4602      	mov	r2, r0
 80050dc:	f107 030c 	add.w	r3, r7, #12
 80050e0:	9301      	str	r3, [sp, #4]
 80050e2:	9200      	str	r2, [sp, #0]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	4632      	mov	r2, r6
 80050e8:	4629      	mov	r1, r5
 80050ea:	4620      	mov	r0, r4
 80050ec:	f000 fcb8 	bl	8005a60 <xTaskCreate>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d001      	beq.n	80050fa <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	e000      	b.n	80050fc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80050fa:	68fb      	ldr	r3, [r7, #12]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005104 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <osDelay+0x16>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	e000      	b.n	800511c <osDelay+0x18>
 800511a:	2301      	movs	r3, #1
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fdc9 	bl	8005cb4 <vTaskDelay>
  
  return osOK;
 8005122:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005130:	f001 f8b4 	bl	800629c <xTaskGetSchedulerState>
 8005134:	4603      	mov	r3, r0
 8005136:	2b01      	cmp	r3, #1
 8005138:	d001      	beq.n	800513e <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800513a:	f000 fa6d 	bl	8005618 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}

08005142 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f103 0208 	add.w	r2, r3, #8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f04f 32ff 	mov.w	r2, #4294967295
 800515a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f103 0208 	add.w	r2, r3, #8
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f103 0208 	add.w	r2, r3, #8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	601a      	str	r2, [r3, #0]
}
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fa:	d103      	bne.n	8005204 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e00c      	b.n	800521e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3308      	adds	r3, #8
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	e002      	b.n	8005212 <vListInsert+0x2e>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	429a      	cmp	r2, r3
 800521c:	d9f6      	bls.n	800520c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	601a      	str	r2, [r3, #0]
}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005256:	b480      	push	{r7}
 8005258:	b085      	sub	sp, #20
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6892      	ldr	r2, [r2, #8]
 800526c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6852      	ldr	r2, [r2, #4]
 8005276:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	429a      	cmp	r2, r3
 8005280:	d103      	bne.n	800528a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	1e5a      	subs	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
	...

080052ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3b04      	subs	r3, #4
 80052bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3b04      	subs	r3, #4
 80052ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f023 0201 	bic.w	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3b04      	subs	r3, #4
 80052da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052dc:	4a0c      	ldr	r2, [pc, #48]	; (8005310 <pxPortInitialiseStack+0x64>)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3b14      	subs	r3, #20
 80052e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3b04      	subs	r3, #4
 80052f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f06f 0202 	mvn.w	r2, #2
 80052fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3b20      	subs	r3, #32
 8005300:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005302:	68fb      	ldr	r3, [r7, #12]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	08005315 	.word	0x08005315

08005314 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800531e:	4b11      	ldr	r3, [pc, #68]	; (8005364 <prvTaskExitError+0x50>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005326:	d009      	beq.n	800533c <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	e7fe      	b.n	800533a <prvTaskExitError+0x26>
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800534e:	bf00      	nop
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0fc      	beq.n	8005350 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000114 	.word	0x20000114
	...

08005370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005370:	4b07      	ldr	r3, [pc, #28]	; (8005390 <pxCurrentTCBConst2>)
 8005372:	6819      	ldr	r1, [r3, #0]
 8005374:	6808      	ldr	r0, [r1, #0]
 8005376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537a:	f380 8809 	msr	PSP, r0
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f04f 0000 	mov.w	r0, #0
 8005386:	f380 8811 	msr	BASEPRI, r0
 800538a:	4770      	bx	lr
 800538c:	f3af 8000 	nop.w

08005390 <pxCurrentTCBConst2>:
 8005390:	20003e00 	.word	0x20003e00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop

08005398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005398:	4808      	ldr	r0, [pc, #32]	; (80053bc <prvPortStartFirstTask+0x24>)
 800539a:	6800      	ldr	r0, [r0, #0]
 800539c:	6800      	ldr	r0, [r0, #0]
 800539e:	f380 8808 	msr	MSP, r0
 80053a2:	f04f 0000 	mov.w	r0, #0
 80053a6:	f380 8814 	msr	CONTROL, r0
 80053aa:	b662      	cpsie	i
 80053ac:	b661      	cpsie	f
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	df00      	svc	0
 80053b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053ba:	bf00      	nop
 80053bc:	e000ed08 	.word	0xe000ed08

080053c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053c6:	4b44      	ldr	r3, [pc, #272]	; (80054d8 <xPortStartScheduler+0x118>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a44      	ldr	r2, [pc, #272]	; (80054dc <xPortStartScheduler+0x11c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d109      	bne.n	80053e4 <xPortStartScheduler+0x24>
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	e7fe      	b.n	80053e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053e4:	4b3c      	ldr	r3, [pc, #240]	; (80054d8 <xPortStartScheduler+0x118>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a3d      	ldr	r2, [pc, #244]	; (80054e0 <xPortStartScheduler+0x120>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d109      	bne.n	8005402 <xPortStartScheduler+0x42>
 80053ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	e7fe      	b.n	8005400 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005402:	4b38      	ldr	r3, [pc, #224]	; (80054e4 <xPortStartScheduler+0x124>)
 8005404:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	b2db      	uxtb	r3, r3
 800540c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	22ff      	movs	r2, #255	; 0xff
 8005412:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005424:	b2da      	uxtb	r2, r3
 8005426:	4b30      	ldr	r3, [pc, #192]	; (80054e8 <xPortStartScheduler+0x128>)
 8005428:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800542a:	4b30      	ldr	r3, [pc, #192]	; (80054ec <xPortStartScheduler+0x12c>)
 800542c:	2207      	movs	r2, #7
 800542e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005430:	e009      	b.n	8005446 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005432:	4b2e      	ldr	r3, [pc, #184]	; (80054ec <xPortStartScheduler+0x12c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3b01      	subs	r3, #1
 8005438:	4a2c      	ldr	r2, [pc, #176]	; (80054ec <xPortStartScheduler+0x12c>)
 800543a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	b2db      	uxtb	r3, r3
 8005444:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005446:	78fb      	ldrb	r3, [r7, #3]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544e:	2b80      	cmp	r3, #128	; 0x80
 8005450:	d0ef      	beq.n	8005432 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005452:	4b26      	ldr	r3, [pc, #152]	; (80054ec <xPortStartScheduler+0x12c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f1c3 0307 	rsb	r3, r3, #7
 800545a:	2b04      	cmp	r3, #4
 800545c:	d009      	beq.n	8005472 <xPortStartScheduler+0xb2>
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	60bb      	str	r3, [r7, #8]
 8005470:	e7fe      	b.n	8005470 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005472:	4b1e      	ldr	r3, [pc, #120]	; (80054ec <xPortStartScheduler+0x12c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	4a1c      	ldr	r2, [pc, #112]	; (80054ec <xPortStartScheduler+0x12c>)
 800547a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800547c:	4b1b      	ldr	r3, [pc, #108]	; (80054ec <xPortStartScheduler+0x12c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005484:	4a19      	ldr	r2, [pc, #100]	; (80054ec <xPortStartScheduler+0x12c>)
 8005486:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	b2da      	uxtb	r2, r3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005490:	4a17      	ldr	r2, [pc, #92]	; (80054f0 <xPortStartScheduler+0x130>)
 8005492:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <xPortStartScheduler+0x130>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800549a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800549c:	4a14      	ldr	r2, [pc, #80]	; (80054f0 <xPortStartScheduler+0x130>)
 800549e:	4b14      	ldr	r3, [pc, #80]	; (80054f0 <xPortStartScheduler+0x130>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054a8:	f000 f8d6 	bl	8005658 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054ac:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <xPortStartScheduler+0x134>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80054b2:	f000 f8f5 	bl	80056a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054b6:	4a10      	ldr	r2, [pc, #64]	; (80054f8 <xPortStartScheduler+0x138>)
 80054b8:	4b0f      	ldr	r3, [pc, #60]	; (80054f8 <xPortStartScheduler+0x138>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80054c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054c2:	f7ff ff69 	bl	8005398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054c6:	f000 fdd5 	bl	8006074 <vTaskSwitchContext>
	prvTaskExitError();
 80054ca:	f7ff ff23 	bl	8005314 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	e000ed00 	.word	0xe000ed00
 80054dc:	410fc271 	.word	0x410fc271
 80054e0:	410fc270 	.word	0x410fc270
 80054e4:	e000e400 	.word	0xe000e400
 80054e8:	200001e2 	.word	0x200001e2
 80054ec:	200001e4 	.word	0x200001e4
 80054f0:	e000ed20 	.word	0xe000ed20
 80054f4:	20000114 	.word	0x20000114
 80054f8:	e000ef34 	.word	0xe000ef34

080054fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005514:	4b0e      	ldr	r3, [pc, #56]	; (8005550 <vPortEnterCritical+0x54>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3301      	adds	r3, #1
 800551a:	4a0d      	ldr	r2, [pc, #52]	; (8005550 <vPortEnterCritical+0x54>)
 800551c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800551e:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <vPortEnterCritical+0x54>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d10e      	bne.n	8005544 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005526:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <vPortEnterCritical+0x58>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d009      	beq.n	8005544 <vPortEnterCritical+0x48>
 8005530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	603b      	str	r3, [r7, #0]
 8005542:	e7fe      	b.n	8005542 <vPortEnterCritical+0x46>
	}
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	20000114 	.word	0x20000114
 8005554:	e000ed04 	.word	0xe000ed04

08005558 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800555e:	4b11      	ldr	r3, [pc, #68]	; (80055a4 <vPortExitCritical+0x4c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <vPortExitCritical+0x22>
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	607b      	str	r3, [r7, #4]
 8005578:	e7fe      	b.n	8005578 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800557a:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <vPortExitCritical+0x4c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3b01      	subs	r3, #1
 8005580:	4a08      	ldr	r2, [pc, #32]	; (80055a4 <vPortExitCritical+0x4c>)
 8005582:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005584:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <vPortExitCritical+0x4c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d104      	bne.n	8005596 <vPortExitCritical+0x3e>
 800558c:	2300      	movs	r3, #0
 800558e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000114 	.word	0x20000114
	...

080055b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055b0:	f3ef 8009 	mrs	r0, PSP
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	4b15      	ldr	r3, [pc, #84]	; (8005610 <pxCurrentTCBConst>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	f01e 0f10 	tst.w	lr, #16
 80055c0:	bf08      	it	eq
 80055c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ca:	6010      	str	r0, [r2, #0]
 80055cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055d4:	f380 8811 	msr	BASEPRI, r0
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f000 fd48 	bl	8006074 <vTaskSwitchContext>
 80055e4:	f04f 0000 	mov.w	r0, #0
 80055e8:	f380 8811 	msr	BASEPRI, r0
 80055ec:	bc09      	pop	{r0, r3}
 80055ee:	6819      	ldr	r1, [r3, #0]
 80055f0:	6808      	ldr	r0, [r1, #0]
 80055f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f6:	f01e 0f10 	tst.w	lr, #16
 80055fa:	bf08      	it	eq
 80055fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005600:	f380 8809 	msr	PSP, r0
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	f3af 8000 	nop.w

08005610 <pxCurrentTCBConst>:
 8005610:	20003e00 	.word	0x20003e00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop

08005618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005630:	f000 fc64 	bl	8005efc <xTaskIncrementTick>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800563a:	4b06      	ldr	r3, [pc, #24]	; (8005654 <xPortSysTickHandler+0x3c>)
 800563c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	2300      	movs	r3, #0
 8005644:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800564c:	bf00      	nop
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800565c:	4b0b      	ldr	r3, [pc, #44]	; (800568c <vPortSetupTimerInterrupt+0x34>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005662:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <vPortSetupTimerInterrupt+0x38>)
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005668:	4a0a      	ldr	r2, [pc, #40]	; (8005694 <vPortSetupTimerInterrupt+0x3c>)
 800566a:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <vPortSetupTimerInterrupt+0x40>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	490b      	ldr	r1, [pc, #44]	; (800569c <vPortSetupTimerInterrupt+0x44>)
 8005670:	fba1 1303 	umull	r1, r3, r1, r3
 8005674:	099b      	lsrs	r3, r3, #6
 8005676:	3b01      	subs	r3, #1
 8005678:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800567a:	4b04      	ldr	r3, [pc, #16]	; (800568c <vPortSetupTimerInterrupt+0x34>)
 800567c:	2207      	movs	r2, #7
 800567e:	601a      	str	r2, [r3, #0]
}
 8005680:	bf00      	nop
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	e000e010 	.word	0xe000e010
 8005690:	e000e018 	.word	0xe000e018
 8005694:	e000e014 	.word	0xe000e014
 8005698:	20000118 	.word	0x20000118
 800569c:	10624dd3 	.word	0x10624dd3

080056a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80056a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80056b0 <vPortEnableVFP+0x10>
 80056a4:	6801      	ldr	r1, [r0, #0]
 80056a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80056aa:	6001      	str	r1, [r0, #0]
 80056ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80056ae:	bf00      	nop
 80056b0:	e000ed88 	.word	0xe000ed88

080056b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08a      	sub	sp, #40	; 0x28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056c0:	f000 fb72 	bl	8005da8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056c4:	4b57      	ldr	r3, [pc, #348]	; (8005824 <pvPortMalloc+0x170>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056cc:	f000 f90c 	bl	80058e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056d0:	4b55      	ldr	r3, [pc, #340]	; (8005828 <pvPortMalloc+0x174>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f040 808c 	bne.w	80057f6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01c      	beq.n	800571e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80056e4:	2208      	movs	r2, #8
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4413      	add	r3, r2
 80056ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d013      	beq.n	800571e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f023 0307 	bic.w	r3, r3, #7
 80056fc:	3308      	adds	r3, #8
 80056fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	2b00      	cmp	r3, #0
 8005708:	d009      	beq.n	800571e <pvPortMalloc+0x6a>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	e7fe      	b.n	800571c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d068      	beq.n	80057f6 <pvPortMalloc+0x142>
 8005724:	4b41      	ldr	r3, [pc, #260]	; (800582c <pvPortMalloc+0x178>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	429a      	cmp	r2, r3
 800572c:	d863      	bhi.n	80057f6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800572e:	4b40      	ldr	r3, [pc, #256]	; (8005830 <pvPortMalloc+0x17c>)
 8005730:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005732:	4b3f      	ldr	r3, [pc, #252]	; (8005830 <pvPortMalloc+0x17c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005738:	e004      	b.n	8005744 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	429a      	cmp	r2, r3
 800574c:	d203      	bcs.n	8005756 <pvPortMalloc+0xa2>
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f1      	bne.n	800573a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005756:	4b33      	ldr	r3, [pc, #204]	; (8005824 <pvPortMalloc+0x170>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575c:	429a      	cmp	r2, r3
 800575e:	d04a      	beq.n	80057f6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2208      	movs	r2, #8
 8005766:	4413      	add	r3, r2
 8005768:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	1ad2      	subs	r2, r2, r3
 800577a:	2308      	movs	r3, #8
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	429a      	cmp	r2, r3
 8005780:	d91e      	bls.n	80057c0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4413      	add	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	2b00      	cmp	r3, #0
 8005792:	d009      	beq.n	80057a8 <pvPortMalloc+0xf4>
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	e7fe      	b.n	80057a6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	1ad2      	subs	r2, r2, r3
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057ba:	69b8      	ldr	r0, [r7, #24]
 80057bc:	f000 f8f6 	bl	80059ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057c0:	4b1a      	ldr	r3, [pc, #104]	; (800582c <pvPortMalloc+0x178>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	4a18      	ldr	r2, [pc, #96]	; (800582c <pvPortMalloc+0x178>)
 80057cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057ce:	4b17      	ldr	r3, [pc, #92]	; (800582c <pvPortMalloc+0x178>)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b18      	ldr	r3, [pc, #96]	; (8005834 <pvPortMalloc+0x180>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d203      	bcs.n	80057e2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057da:	4b14      	ldr	r3, [pc, #80]	; (800582c <pvPortMalloc+0x178>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a15      	ldr	r2, [pc, #84]	; (8005834 <pvPortMalloc+0x180>)
 80057e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <pvPortMalloc+0x174>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057f6:	f000 fae5 	bl	8005dc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	f003 0307 	and.w	r3, r3, #7
 8005800:	2b00      	cmp	r3, #0
 8005802:	d009      	beq.n	8005818 <pvPortMalloc+0x164>
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	e7fe      	b.n	8005816 <pvPortMalloc+0x162>
	return pvReturn;
 8005818:	69fb      	ldr	r3, [r7, #28]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3728      	adds	r7, #40	; 0x28
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20003df0 	.word	0x20003df0
 8005828:	20003dfc 	.word	0x20003dfc
 800582c:	20003df4 	.word	0x20003df4
 8005830:	20003de8 	.word	0x20003de8
 8005834:	20003df8 	.word	0x20003df8

08005838 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d046      	beq.n	80058d8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800584a:	2308      	movs	r3, #8
 800584c:	425b      	negs	r3, r3
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4413      	add	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	4b20      	ldr	r3, [pc, #128]	; (80058e0 <vPortFree+0xa8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4013      	ands	r3, r2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d109      	bne.n	800587a <vPortFree+0x42>
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	e7fe      	b.n	8005878 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <vPortFree+0x5e>
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	60bb      	str	r3, [r7, #8]
 8005894:	e7fe      	b.n	8005894 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	4b11      	ldr	r3, [pc, #68]	; (80058e0 <vPortFree+0xa8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4013      	ands	r3, r2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d019      	beq.n	80058d8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d115      	bne.n	80058d8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <vPortFree+0xa8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	43db      	mvns	r3, r3
 80058b6:	401a      	ands	r2, r3
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058bc:	f000 fa74 	bl	8005da8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <vPortFree+0xac>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4413      	add	r3, r2
 80058ca:	4a06      	ldr	r2, [pc, #24]	; (80058e4 <vPortFree+0xac>)
 80058cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058ce:	6938      	ldr	r0, [r7, #16]
 80058d0:	f000 f86c 	bl	80059ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80058d4:	f000 fa76 	bl	8005dc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058d8:	bf00      	nop
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	20003dfc 	.word	0x20003dfc
 80058e4:	20003df4 	.word	0x20003df4

080058e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058ee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80058f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058f4:	4b27      	ldr	r3, [pc, #156]	; (8005994 <prvHeapInit+0xac>)
 80058f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00c      	beq.n	800591c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3307      	adds	r3, #7
 8005906:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0307 	bic.w	r3, r3, #7
 800590e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	4a1f      	ldr	r2, [pc, #124]	; (8005994 <prvHeapInit+0xac>)
 8005918:	4413      	add	r3, r2
 800591a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005920:	4a1d      	ldr	r2, [pc, #116]	; (8005998 <prvHeapInit+0xb0>)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005926:	4b1c      	ldr	r3, [pc, #112]	; (8005998 <prvHeapInit+0xb0>)
 8005928:	2200      	movs	r2, #0
 800592a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	4413      	add	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005934:	2208      	movs	r2, #8
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	1a9b      	subs	r3, r3, r2
 800593a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0307 	bic.w	r3, r3, #7
 8005942:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4a15      	ldr	r2, [pc, #84]	; (800599c <prvHeapInit+0xb4>)
 8005948:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800594a:	4b14      	ldr	r3, [pc, #80]	; (800599c <prvHeapInit+0xb4>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2200      	movs	r2, #0
 8005950:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005952:	4b12      	ldr	r3, [pc, #72]	; (800599c <prvHeapInit+0xb4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	1ad2      	subs	r2, r2, r3
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005968:	4b0c      	ldr	r3, [pc, #48]	; (800599c <prvHeapInit+0xb4>)
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4a0a      	ldr	r2, [pc, #40]	; (80059a0 <prvHeapInit+0xb8>)
 8005976:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	4a09      	ldr	r2, [pc, #36]	; (80059a4 <prvHeapInit+0xbc>)
 800597e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005980:	4b09      	ldr	r3, [pc, #36]	; (80059a8 <prvHeapInit+0xc0>)
 8005982:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005986:	601a      	str	r2, [r3, #0]
}
 8005988:	bf00      	nop
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	200001e8 	.word	0x200001e8
 8005998:	20003de8 	.word	0x20003de8
 800599c:	20003df0 	.word	0x20003df0
 80059a0:	20003df8 	.word	0x20003df8
 80059a4:	20003df4 	.word	0x20003df4
 80059a8:	20003dfc 	.word	0x20003dfc

080059ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059b4:	4b28      	ldr	r3, [pc, #160]	; (8005a58 <prvInsertBlockIntoFreeList+0xac>)
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	e002      	b.n	80059c0 <prvInsertBlockIntoFreeList+0x14>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d3f7      	bcc.n	80059ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	441a      	add	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d108      	bne.n	80059ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	441a      	add	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	441a      	add	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d118      	bne.n	8005a34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <prvInsertBlockIntoFreeList+0xb0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d00d      	beq.n	8005a2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	441a      	add	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	e008      	b.n	8005a3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a2a:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <prvInsertBlockIntoFreeList+0xb0>)
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	e003      	b.n	8005a3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d002      	beq.n	8005a4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a4a:	bf00      	nop
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20003de8 	.word	0x20003de8
 8005a5c:	20003df0 	.word	0x20003df0

08005a60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08c      	sub	sp, #48	; 0x30
 8005a64:	af04      	add	r7, sp, #16
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	603b      	str	r3, [r7, #0]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fe1d 	bl	80056b4 <pvPortMalloc>
 8005a7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00e      	beq.n	8005aa0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005a82:	2054      	movs	r0, #84	; 0x54
 8005a84:	f7ff fe16 	bl	80056b4 <pvPortMalloc>
 8005a88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	631a      	str	r2, [r3, #48]	; 0x30
 8005a96:	e005      	b.n	8005aa4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a98:	6978      	ldr	r0, [r7, #20]
 8005a9a:	f7ff fecd 	bl	8005838 <vPortFree>
 8005a9e:	e001      	b.n	8005aa4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d013      	beq.n	8005ad2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005aaa:	88fa      	ldrh	r2, [r7, #6]
 8005aac:	2300      	movs	r3, #0
 8005aae:	9303      	str	r3, [sp, #12]
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	9302      	str	r3, [sp, #8]
 8005ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab6:	9301      	str	r3, [sp, #4]
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f80e 	bl	8005ae2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ac6:	69f8      	ldr	r0, [r7, #28]
 8005ac8:	f000 f88a 	bl	8005be0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005acc:	2301      	movs	r3, #1
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	e002      	b.n	8005ad8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
	}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b088      	sub	sp, #32
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	607a      	str	r2, [r7, #4]
 8005aee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005afa:	3b01      	subs	r3, #1
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	f023 0307 	bic.w	r3, r3, #7
 8005b08:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d009      	beq.n	8005b28 <prvInitialiseNewTask+0x46>
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	617b      	str	r3, [r7, #20]
 8005b26:	e7fe      	b.n	8005b26 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	e012      	b.n	8005b54 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	4413      	add	r3, r2
 8005b34:	7819      	ldrb	r1, [r3, #0]
 8005b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	3334      	adds	r3, #52	; 0x34
 8005b3e:	460a      	mov	r2, r1
 8005b40:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	4413      	add	r3, r2
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d006      	beq.n	8005b5c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	3301      	adds	r3, #1
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	2b0f      	cmp	r3, #15
 8005b58:	d9e9      	bls.n	8005b2e <prvInitialiseNewTask+0x4c>
 8005b5a:	e000      	b.n	8005b5e <prvInitialiseNewTask+0x7c>
		{
			break;
 8005b5c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	2b06      	cmp	r3, #6
 8005b6a:	d901      	bls.n	8005b70 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b6c:	2306      	movs	r3, #6
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b7a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	2200      	movs	r2, #0
 8005b80:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	3304      	adds	r3, #4
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fafb 	bl	8005182 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	3318      	adds	r3, #24
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff faf6 	bl	8005182 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	f1c3 0207 	rsb	r2, r3, #7
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	2200      	movs	r2, #0
 8005bb0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	68f9      	ldr	r1, [r7, #12]
 8005bbe:	69b8      	ldr	r0, [r7, #24]
 8005bc0:	f7ff fb74 	bl	80052ac <pxPortInitialiseStack>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bd6:	bf00      	nop
 8005bd8:	3720      	adds	r7, #32
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005be8:	f7ff fc88 	bl	80054fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005bec:	4b2a      	ldr	r3, [pc, #168]	; (8005c98 <prvAddNewTaskToReadyList+0xb8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	4a29      	ldr	r2, [pc, #164]	; (8005c98 <prvAddNewTaskToReadyList+0xb8>)
 8005bf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005bf6:	4b29      	ldr	r3, [pc, #164]	; (8005c9c <prvAddNewTaskToReadyList+0xbc>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d109      	bne.n	8005c12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005bfe:	4a27      	ldr	r2, [pc, #156]	; (8005c9c <prvAddNewTaskToReadyList+0xbc>)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c04:	4b24      	ldr	r3, [pc, #144]	; (8005c98 <prvAddNewTaskToReadyList+0xb8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d110      	bne.n	8005c2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c0c:	f000 faa4 	bl	8006158 <prvInitialiseTaskLists>
 8005c10:	e00d      	b.n	8005c2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c12:	4b23      	ldr	r3, [pc, #140]	; (8005ca0 <prvAddNewTaskToReadyList+0xc0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d109      	bne.n	8005c2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c1a:	4b20      	ldr	r3, [pc, #128]	; (8005c9c <prvAddNewTaskToReadyList+0xbc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d802      	bhi.n	8005c2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c28:	4a1c      	ldr	r2, [pc, #112]	; (8005c9c <prvAddNewTaskToReadyList+0xbc>)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ca4 <prvAddNewTaskToReadyList+0xc4>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3301      	adds	r3, #1
 8005c34:	4a1b      	ldr	r2, [pc, #108]	; (8005ca4 <prvAddNewTaskToReadyList+0xc4>)
 8005c36:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	409a      	lsls	r2, r3
 8005c40:	4b19      	ldr	r3, [pc, #100]	; (8005ca8 <prvAddNewTaskToReadyList+0xc8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	4a18      	ldr	r2, [pc, #96]	; (8005ca8 <prvAddNewTaskToReadyList+0xc8>)
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4a15      	ldr	r2, [pc, #84]	; (8005cac <prvAddNewTaskToReadyList+0xcc>)
 8005c58:	441a      	add	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4610      	mov	r0, r2
 8005c62:	f7ff fa9b 	bl	800519c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c66:	f7ff fc77 	bl	8005558 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <prvAddNewTaskToReadyList+0xc0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00e      	beq.n	8005c90 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c72:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <prvAddNewTaskToReadyList+0xbc>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d207      	bcs.n	8005c90 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c80:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <prvAddNewTaskToReadyList+0xd0>)
 8005c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c90:	bf00      	nop
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20003f00 	.word	0x20003f00
 8005c9c:	20003e00 	.word	0x20003e00
 8005ca0:	20003f0c 	.word	0x20003f0c
 8005ca4:	20003f1c 	.word	0x20003f1c
 8005ca8:	20003f08 	.word	0x20003f08
 8005cac:	20003e04 	.word	0x20003e04
 8005cb0:	e000ed04 	.word	0xe000ed04

08005cb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d016      	beq.n	8005cf4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cc6:	4b13      	ldr	r3, [pc, #76]	; (8005d14 <vTaskDelay+0x60>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <vTaskDelay+0x2e>
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	60bb      	str	r3, [r7, #8]
 8005ce0:	e7fe      	b.n	8005ce0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005ce2:	f000 f861 	bl	8005da8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 faf5 	bl	80062d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005cee:	f000 f869 	bl	8005dc4 <xTaskResumeAll>
 8005cf2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d107      	bne.n	8005d0a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005cfa:	4b07      	ldr	r3, [pc, #28]	; (8005d18 <vTaskDelay+0x64>)
 8005cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d0a:	bf00      	nop
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20003f28 	.word	0x20003f28
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8005d22:	4b1b      	ldr	r3, [pc, #108]	; (8005d90 <vTaskStartScheduler+0x74>)
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	2300      	movs	r3, #0
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	2280      	movs	r2, #128	; 0x80
 8005d2e:	4919      	ldr	r1, [pc, #100]	; (8005d94 <vTaskStartScheduler+0x78>)
 8005d30:	4819      	ldr	r0, [pc, #100]	; (8005d98 <vTaskStartScheduler+0x7c>)
 8005d32:	f7ff fe95 	bl	8005a60 <xTaskCreate>
 8005d36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d115      	bne.n	8005d6a <vTaskStartScheduler+0x4e>
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d50:	4b12      	ldr	r3, [pc, #72]	; (8005d9c <vTaskStartScheduler+0x80>)
 8005d52:	f04f 32ff 	mov.w	r2, #4294967295
 8005d56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d58:	4b11      	ldr	r3, [pc, #68]	; (8005da0 <vTaskStartScheduler+0x84>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005d5e:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <vTaskStartScheduler+0x88>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d64:	f7ff fb2c 	bl	80053c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d68:	e00d      	b.n	8005d86 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d70:	d109      	bne.n	8005d86 <vTaskStartScheduler+0x6a>
 8005d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	607b      	str	r3, [r7, #4]
 8005d84:	e7fe      	b.n	8005d84 <vTaskStartScheduler+0x68>
}
 8005d86:	bf00      	nop
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20003f24 	.word	0x20003f24
 8005d94:	080073c8 	.word	0x080073c8
 8005d98:	08006129 	.word	0x08006129
 8005d9c:	20003f20 	.word	0x20003f20
 8005da0:	20003f0c 	.word	0x20003f0c
 8005da4:	20003f04 	.word	0x20003f04

08005da8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005dac:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <vTaskSuspendAll+0x18>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3301      	adds	r3, #1
 8005db2:	4a03      	ldr	r2, [pc, #12]	; (8005dc0 <vTaskSuspendAll+0x18>)
 8005db4:	6013      	str	r3, [r2, #0]
}
 8005db6:	bf00      	nop
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	20003f28 	.word	0x20003f28

08005dc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005dd2:	4b41      	ldr	r3, [pc, #260]	; (8005ed8 <xTaskResumeAll+0x114>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d109      	bne.n	8005dee <xTaskResumeAll+0x2a>
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	e7fe      	b.n	8005dec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005dee:	f7ff fb85 	bl	80054fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005df2:	4b39      	ldr	r3, [pc, #228]	; (8005ed8 <xTaskResumeAll+0x114>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	4a37      	ldr	r2, [pc, #220]	; (8005ed8 <xTaskResumeAll+0x114>)
 8005dfa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dfc:	4b36      	ldr	r3, [pc, #216]	; (8005ed8 <xTaskResumeAll+0x114>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d161      	bne.n	8005ec8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e04:	4b35      	ldr	r3, [pc, #212]	; (8005edc <xTaskResumeAll+0x118>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d05d      	beq.n	8005ec8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e0c:	e02e      	b.n	8005e6c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005e0e:	4b34      	ldr	r3, [pc, #208]	; (8005ee0 <xTaskResumeAll+0x11c>)
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3318      	adds	r3, #24
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff fa1b 	bl	8005256 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3304      	adds	r3, #4
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff fa16 	bl	8005256 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2e:	2201      	movs	r2, #1
 8005e30:	409a      	lsls	r2, r3
 8005e32:	4b2c      	ldr	r3, [pc, #176]	; (8005ee4 <xTaskResumeAll+0x120>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	4a2a      	ldr	r2, [pc, #168]	; (8005ee4 <xTaskResumeAll+0x120>)
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4a27      	ldr	r2, [pc, #156]	; (8005ee8 <xTaskResumeAll+0x124>)
 8005e4a:	441a      	add	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f7ff f9a2 	bl	800519c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5c:	4b23      	ldr	r3, [pc, #140]	; (8005eec <xTaskResumeAll+0x128>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d302      	bcc.n	8005e6c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005e66:	4b22      	ldr	r3, [pc, #136]	; (8005ef0 <xTaskResumeAll+0x12c>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e6c:	4b1c      	ldr	r3, [pc, #112]	; (8005ee0 <xTaskResumeAll+0x11c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1cc      	bne.n	8005e0e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e7a:	f000 f9e9 	bl	8006250 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005e7e:	4b1d      	ldr	r3, [pc, #116]	; (8005ef4 <xTaskResumeAll+0x130>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d010      	beq.n	8005eac <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e8a:	f000 f837 	bl	8005efc <xTaskIncrementTick>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005e94:	4b16      	ldr	r3, [pc, #88]	; (8005ef0 <xTaskResumeAll+0x12c>)
 8005e96:	2201      	movs	r2, #1
 8005e98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f1      	bne.n	8005e8a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005ea6:	4b13      	ldr	r3, [pc, #76]	; (8005ef4 <xTaskResumeAll+0x130>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005eac:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <xTaskResumeAll+0x12c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d009      	beq.n	8005ec8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005eb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ef8 <xTaskResumeAll+0x134>)
 8005eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ec8:	f7ff fb46 	bl	8005558 <vPortExitCritical>

	return xAlreadyYielded;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20003f28 	.word	0x20003f28
 8005edc:	20003f00 	.word	0x20003f00
 8005ee0:	20003ec0 	.word	0x20003ec0
 8005ee4:	20003f08 	.word	0x20003f08
 8005ee8:	20003e04 	.word	0x20003e04
 8005eec:	20003e00 	.word	0x20003e00
 8005ef0:	20003f14 	.word	0x20003f14
 8005ef4:	20003f10 	.word	0x20003f10
 8005ef8:	e000ed04 	.word	0xe000ed04

08005efc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f06:	4b50      	ldr	r3, [pc, #320]	; (8006048 <xTaskIncrementTick+0x14c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f040 808c 	bne.w	8006028 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f10:	4b4e      	ldr	r3, [pc, #312]	; (800604c <xTaskIncrementTick+0x150>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3301      	adds	r3, #1
 8005f16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f18:	4a4c      	ldr	r2, [pc, #304]	; (800604c <xTaskIncrementTick+0x150>)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d11f      	bne.n	8005f64 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f24:	4b4a      	ldr	r3, [pc, #296]	; (8006050 <xTaskIncrementTick+0x154>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d009      	beq.n	8005f42 <xTaskIncrementTick+0x46>
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	e7fe      	b.n	8005f40 <xTaskIncrementTick+0x44>
 8005f42:	4b43      	ldr	r3, [pc, #268]	; (8006050 <xTaskIncrementTick+0x154>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	4b42      	ldr	r3, [pc, #264]	; (8006054 <xTaskIncrementTick+0x158>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a40      	ldr	r2, [pc, #256]	; (8006050 <xTaskIncrementTick+0x154>)
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	4a40      	ldr	r2, [pc, #256]	; (8006054 <xTaskIncrementTick+0x158>)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	4b40      	ldr	r3, [pc, #256]	; (8006058 <xTaskIncrementTick+0x15c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	4a3e      	ldr	r2, [pc, #248]	; (8006058 <xTaskIncrementTick+0x15c>)
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	f000 f976 	bl	8006250 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f64:	4b3d      	ldr	r3, [pc, #244]	; (800605c <xTaskIncrementTick+0x160>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d34d      	bcc.n	800600a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f6e:	4b38      	ldr	r3, [pc, #224]	; (8006050 <xTaskIncrementTick+0x154>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <xTaskIncrementTick+0x80>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e000      	b.n	8005f7e <xTaskIncrementTick+0x82>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d004      	beq.n	8005f8c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f82:	4b36      	ldr	r3, [pc, #216]	; (800605c <xTaskIncrementTick+0x160>)
 8005f84:	f04f 32ff 	mov.w	r2, #4294967295
 8005f88:	601a      	str	r2, [r3, #0]
					break;
 8005f8a:	e03e      	b.n	800600a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f8c:	4b30      	ldr	r3, [pc, #192]	; (8006050 <xTaskIncrementTick+0x154>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d203      	bcs.n	8005fac <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fa4:	4a2d      	ldr	r2, [pc, #180]	; (800605c <xTaskIncrementTick+0x160>)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6013      	str	r3, [r2, #0]
						break;
 8005faa:	e02e      	b.n	800600a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff f950 	bl	8005256 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d004      	beq.n	8005fc8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	3318      	adds	r3, #24
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7ff f947 	bl	8005256 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	2201      	movs	r2, #1
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	4b23      	ldr	r3, [pc, #140]	; (8006060 <xTaskIncrementTick+0x164>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	4a22      	ldr	r2, [pc, #136]	; (8006060 <xTaskIncrementTick+0x164>)
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4a1f      	ldr	r2, [pc, #124]	; (8006064 <xTaskIncrementTick+0x168>)
 8005fe8:	441a      	add	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	f7ff f8d3 	bl	800519c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffa:	4b1b      	ldr	r3, [pc, #108]	; (8006068 <xTaskIncrementTick+0x16c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	429a      	cmp	r2, r3
 8006002:	d3b4      	bcc.n	8005f6e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006004:	2301      	movs	r3, #1
 8006006:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006008:	e7b1      	b.n	8005f6e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800600a:	4b17      	ldr	r3, [pc, #92]	; (8006068 <xTaskIncrementTick+0x16c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006010:	4914      	ldr	r1, [pc, #80]	; (8006064 <xTaskIncrementTick+0x168>)
 8006012:	4613      	mov	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	440b      	add	r3, r1
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d907      	bls.n	8006032 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006022:	2301      	movs	r3, #1
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	e004      	b.n	8006032 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006028:	4b10      	ldr	r3, [pc, #64]	; (800606c <xTaskIncrementTick+0x170>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3301      	adds	r3, #1
 800602e:	4a0f      	ldr	r2, [pc, #60]	; (800606c <xTaskIncrementTick+0x170>)
 8006030:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006032:	4b0f      	ldr	r3, [pc, #60]	; (8006070 <xTaskIncrementTick+0x174>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800603a:	2301      	movs	r3, #1
 800603c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800603e:	697b      	ldr	r3, [r7, #20]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	20003f28 	.word	0x20003f28
 800604c:	20003f04 	.word	0x20003f04
 8006050:	20003eb8 	.word	0x20003eb8
 8006054:	20003ebc 	.word	0x20003ebc
 8006058:	20003f18 	.word	0x20003f18
 800605c:	20003f20 	.word	0x20003f20
 8006060:	20003f08 	.word	0x20003f08
 8006064:	20003e04 	.word	0x20003e04
 8006068:	20003e00 	.word	0x20003e00
 800606c:	20003f10 	.word	0x20003f10
 8006070:	20003f14 	.word	0x20003f14

08006074 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800607a:	4b26      	ldr	r3, [pc, #152]	; (8006114 <vTaskSwitchContext+0xa0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006082:	4b25      	ldr	r3, [pc, #148]	; (8006118 <vTaskSwitchContext+0xa4>)
 8006084:	2201      	movs	r2, #1
 8006086:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006088:	e03e      	b.n	8006108 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800608a:	4b23      	ldr	r3, [pc, #140]	; (8006118 <vTaskSwitchContext+0xa4>)
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006090:	4b22      	ldr	r3, [pc, #136]	; (800611c <vTaskSwitchContext+0xa8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	fab3 f383 	clz	r3, r3
 800609c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800609e:	7afb      	ldrb	r3, [r7, #11]
 80060a0:	f1c3 031f 	rsb	r3, r3, #31
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	491e      	ldr	r1, [pc, #120]	; (8006120 <vTaskSwitchContext+0xac>)
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d109      	bne.n	80060ce <vTaskSwitchContext+0x5a>
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	607b      	str	r3, [r7, #4]
 80060cc:	e7fe      	b.n	80060cc <vTaskSwitchContext+0x58>
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4a11      	ldr	r2, [pc, #68]	; (8006120 <vTaskSwitchContext+0xac>)
 80060da:	4413      	add	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	605a      	str	r2, [r3, #4]
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	3308      	adds	r3, #8
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d104      	bne.n	80060fe <vTaskSwitchContext+0x8a>
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	605a      	str	r2, [r3, #4]
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	4a07      	ldr	r2, [pc, #28]	; (8006124 <vTaskSwitchContext+0xb0>)
 8006106:	6013      	str	r3, [r2, #0]
}
 8006108:	bf00      	nop
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	20003f28 	.word	0x20003f28
 8006118:	20003f14 	.word	0x20003f14
 800611c:	20003f08 	.word	0x20003f08
 8006120:	20003e04 	.word	0x20003e04
 8006124:	20003e00 	.word	0x20003e00

08006128 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006130:	f000 f852 	bl	80061d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006134:	4b06      	ldr	r3, [pc, #24]	; (8006150 <prvIdleTask+0x28>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d9f9      	bls.n	8006130 <prvIdleTask+0x8>
			{
				taskYIELD();
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <prvIdleTask+0x2c>)
 800613e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800614c:	e7f0      	b.n	8006130 <prvIdleTask+0x8>
 800614e:	bf00      	nop
 8006150:	20003e04 	.word	0x20003e04
 8006154:	e000ed04 	.word	0xe000ed04

08006158 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800615e:	2300      	movs	r3, #0
 8006160:	607b      	str	r3, [r7, #4]
 8006162:	e00c      	b.n	800617e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	4613      	mov	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4a12      	ldr	r2, [pc, #72]	; (80061b8 <prvInitialiseTaskLists+0x60>)
 8006170:	4413      	add	r3, r2
 8006172:	4618      	mov	r0, r3
 8006174:	f7fe ffe5 	bl	8005142 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3301      	adds	r3, #1
 800617c:	607b      	str	r3, [r7, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b06      	cmp	r3, #6
 8006182:	d9ef      	bls.n	8006164 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006184:	480d      	ldr	r0, [pc, #52]	; (80061bc <prvInitialiseTaskLists+0x64>)
 8006186:	f7fe ffdc 	bl	8005142 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800618a:	480d      	ldr	r0, [pc, #52]	; (80061c0 <prvInitialiseTaskLists+0x68>)
 800618c:	f7fe ffd9 	bl	8005142 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006190:	480c      	ldr	r0, [pc, #48]	; (80061c4 <prvInitialiseTaskLists+0x6c>)
 8006192:	f7fe ffd6 	bl	8005142 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006196:	480c      	ldr	r0, [pc, #48]	; (80061c8 <prvInitialiseTaskLists+0x70>)
 8006198:	f7fe ffd3 	bl	8005142 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800619c:	480b      	ldr	r0, [pc, #44]	; (80061cc <prvInitialiseTaskLists+0x74>)
 800619e:	f7fe ffd0 	bl	8005142 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061a2:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <prvInitialiseTaskLists+0x78>)
 80061a4:	4a05      	ldr	r2, [pc, #20]	; (80061bc <prvInitialiseTaskLists+0x64>)
 80061a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061a8:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <prvInitialiseTaskLists+0x7c>)
 80061aa:	4a05      	ldr	r2, [pc, #20]	; (80061c0 <prvInitialiseTaskLists+0x68>)
 80061ac:	601a      	str	r2, [r3, #0]
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20003e04 	.word	0x20003e04
 80061bc:	20003e90 	.word	0x20003e90
 80061c0:	20003ea4 	.word	0x20003ea4
 80061c4:	20003ec0 	.word	0x20003ec0
 80061c8:	20003ed4 	.word	0x20003ed4
 80061cc:	20003eec 	.word	0x20003eec
 80061d0:	20003eb8 	.word	0x20003eb8
 80061d4:	20003ebc 	.word	0x20003ebc

080061d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061de:	e019      	b.n	8006214 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061e0:	f7ff f98c 	bl	80054fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80061e4:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <prvCheckTasksWaitingTermination+0x4c>)
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3304      	adds	r3, #4
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff f830 	bl	8005256 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061f6:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <prvCheckTasksWaitingTermination+0x50>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	4a0a      	ldr	r2, [pc, #40]	; (8006228 <prvCheckTasksWaitingTermination+0x50>)
 80061fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006200:	4b0a      	ldr	r3, [pc, #40]	; (800622c <prvCheckTasksWaitingTermination+0x54>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3b01      	subs	r3, #1
 8006206:	4a09      	ldr	r2, [pc, #36]	; (800622c <prvCheckTasksWaitingTermination+0x54>)
 8006208:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800620a:	f7ff f9a5 	bl	8005558 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f80e 	bl	8006230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006214:	4b05      	ldr	r3, [pc, #20]	; (800622c <prvCheckTasksWaitingTermination+0x54>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e1      	bne.n	80061e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800621c:	bf00      	nop
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	20003ed4 	.word	0x20003ed4
 8006228:	20003f00 	.word	0x20003f00
 800622c:	20003ee8 	.word	0x20003ee8

08006230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff fafb 	bl	8005838 <vPortFree>
			vPortFree( pxTCB );
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7ff faf8 	bl	8005838 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006248:	bf00      	nop
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006256:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <prvResetNextTaskUnblockTime+0x44>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <prvResetNextTaskUnblockTime+0x14>
 8006260:	2301      	movs	r3, #1
 8006262:	e000      	b.n	8006266 <prvResetNextTaskUnblockTime+0x16>
 8006264:	2300      	movs	r3, #0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d004      	beq.n	8006274 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800626a:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <prvResetNextTaskUnblockTime+0x48>)
 800626c:	f04f 32ff 	mov.w	r2, #4294967295
 8006270:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006272:	e008      	b.n	8006286 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006274:	4b07      	ldr	r3, [pc, #28]	; (8006294 <prvResetNextTaskUnblockTime+0x44>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	4a05      	ldr	r2, [pc, #20]	; (8006298 <prvResetNextTaskUnblockTime+0x48>)
 8006284:	6013      	str	r3, [r2, #0]
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20003eb8 	.word	0x20003eb8
 8006298:	20003f20 	.word	0x20003f20

0800629c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062a2:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <xTaskGetSchedulerState+0x34>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d102      	bne.n	80062b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062aa:	2301      	movs	r3, #1
 80062ac:	607b      	str	r3, [r7, #4]
 80062ae:	e008      	b.n	80062c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b0:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <xTaskGetSchedulerState+0x38>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d102      	bne.n	80062be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062b8:	2302      	movs	r3, #2
 80062ba:	607b      	str	r3, [r7, #4]
 80062bc:	e001      	b.n	80062c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062be:	2300      	movs	r3, #0
 80062c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062c2:	687b      	ldr	r3, [r7, #4]
	}
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	20003f0c 	.word	0x20003f0c
 80062d4:	20003f28 	.word	0x20003f28

080062d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062e2:	4b29      	ldr	r3, [pc, #164]	; (8006388 <prvAddCurrentTaskToDelayedList+0xb0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062e8:	4b28      	ldr	r3, [pc, #160]	; (800638c <prvAddCurrentTaskToDelayedList+0xb4>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fe ffb1 	bl	8005256 <uxListRemove>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10b      	bne.n	8006312 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80062fa:	4b24      	ldr	r3, [pc, #144]	; (800638c <prvAddCurrentTaskToDelayedList+0xb4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	2201      	movs	r2, #1
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	43da      	mvns	r2, r3
 8006308:	4b21      	ldr	r3, [pc, #132]	; (8006390 <prvAddCurrentTaskToDelayedList+0xb8>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4013      	ands	r3, r2
 800630e:	4a20      	ldr	r2, [pc, #128]	; (8006390 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006310:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d10a      	bne.n	8006330 <prvAddCurrentTaskToDelayedList+0x58>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d007      	beq.n	8006330 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006320:	4b1a      	ldr	r3, [pc, #104]	; (800638c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3304      	adds	r3, #4
 8006326:	4619      	mov	r1, r3
 8006328:	481a      	ldr	r0, [pc, #104]	; (8006394 <prvAddCurrentTaskToDelayedList+0xbc>)
 800632a:	f7fe ff37 	bl	800519c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800632e:	e026      	b.n	800637e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4413      	add	r3, r2
 8006336:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006338:	4b14      	ldr	r3, [pc, #80]	; (800638c <prvAddCurrentTaskToDelayedList+0xb4>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	429a      	cmp	r2, r3
 8006346:	d209      	bcs.n	800635c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006348:	4b13      	ldr	r3, [pc, #76]	; (8006398 <prvAddCurrentTaskToDelayedList+0xc0>)
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	4b0f      	ldr	r3, [pc, #60]	; (800638c <prvAddCurrentTaskToDelayedList+0xb4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3304      	adds	r3, #4
 8006352:	4619      	mov	r1, r3
 8006354:	4610      	mov	r0, r2
 8006356:	f7fe ff45 	bl	80051e4 <vListInsert>
}
 800635a:	e010      	b.n	800637e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800635c:	4b0f      	ldr	r3, [pc, #60]	; (800639c <prvAddCurrentTaskToDelayedList+0xc4>)
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	4b0a      	ldr	r3, [pc, #40]	; (800638c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3304      	adds	r3, #4
 8006366:	4619      	mov	r1, r3
 8006368:	4610      	mov	r0, r2
 800636a:	f7fe ff3b 	bl	80051e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800636e:	4b0c      	ldr	r3, [pc, #48]	; (80063a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	429a      	cmp	r2, r3
 8006376:	d202      	bcs.n	800637e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006378:	4a09      	ldr	r2, [pc, #36]	; (80063a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	6013      	str	r3, [r2, #0]
}
 800637e:	bf00      	nop
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	20003f04 	.word	0x20003f04
 800638c:	20003e00 	.word	0x20003e00
 8006390:	20003f08 	.word	0x20003f08
 8006394:	20003eec 	.word	0x20003eec
 8006398:	20003ebc 	.word	0x20003ebc
 800639c:	20003eb8 	.word	0x20003eb8
 80063a0:	20003f20 	.word	0x20003f20

080063a4 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80063a4:	b5b0      	push	{r4, r5, r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80063aa:	f7fa f8a1 	bl	80004f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80063ae:	f000 f819 	bl	80063e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80063b2:	f000 f88b 	bl	80064cc <MX_GPIO_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80063b6:	4b09      	ldr	r3, [pc, #36]	; (80063dc <main+0x38>)
 80063b8:	1d3c      	adds	r4, r7, #4
 80063ba:	461d      	mov	r5, r3
 80063bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80063c4:	1d3b      	adds	r3, r7, #4
 80063c6:	2100      	movs	r1, #0
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fe fe74 	bl	80050b6 <osThreadCreate>
 80063ce:	4602      	mov	r2, r0
 80063d0:	4b03      	ldr	r3, [pc, #12]	; (80063e0 <main+0x3c>)
 80063d2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 80063d4:	f7fe fe68 	bl	80050a8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80063d8:	e7fe      	b.n	80063d8 <main+0x34>
 80063da:	bf00      	nop
 80063dc:	080073dc 	.word	0x080073dc
 80063e0:	20003f3c 	.word	0x20003f3c

080063e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b094      	sub	sp, #80	; 0x50
 80063e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80063ea:	2300      	movs	r3, #0
 80063ec:	60bb      	str	r3, [r7, #8]
 80063ee:	4a33      	ldr	r2, [pc, #204]	; (80064bc <SystemClock_Config+0xd8>)
 80063f0:	4b32      	ldr	r3, [pc, #200]	; (80064bc <SystemClock_Config+0xd8>)
 80063f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063f8:	6413      	str	r3, [r2, #64]	; 0x40
 80063fa:	4b30      	ldr	r3, [pc, #192]	; (80064bc <SystemClock_Config+0xd8>)
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006402:	60bb      	str	r3, [r7, #8]
 8006404:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006406:	2300      	movs	r3, #0
 8006408:	607b      	str	r3, [r7, #4]
 800640a:	4a2d      	ldr	r2, [pc, #180]	; (80064c0 <SystemClock_Config+0xdc>)
 800640c:	4b2c      	ldr	r3, [pc, #176]	; (80064c0 <SystemClock_Config+0xdc>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	4b2a      	ldr	r3, [pc, #168]	; (80064c0 <SystemClock_Config+0xdc>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800641e:	607b      	str	r3, [r7, #4]
 8006420:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006422:	2301      	movs	r3, #1
 8006424:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006426:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800642a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800642c:	2302      	movs	r3, #2
 800642e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006430:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006434:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006436:	2304      	movs	r3, #4
 8006438:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800643a:	2360      	movs	r3, #96	; 0x60
 800643c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800643e:	2306      	movs	r3, #6
 8006440:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006442:	2304      	movs	r3, #4
 8006444:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006446:	f107 0320 	add.w	r3, r7, #32
 800644a:	4618      	mov	r0, r3
 800644c:	f7fb fc16 	bl	8001c7c <HAL_RCC_OscConfig>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006456:	21bb      	movs	r1, #187	; 0xbb
 8006458:	481a      	ldr	r0, [pc, #104]	; (80064c4 <SystemClock_Config+0xe0>)
 800645a:	f000 f87b 	bl	8006554 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800645e:	230f      	movs	r3, #15
 8006460:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006462:	2302      	movs	r3, #2
 8006464:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800646a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800646e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006470:	2300      	movs	r3, #0
 8006472:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006474:	f107 030c 	add.w	r3, r7, #12
 8006478:	2101      	movs	r1, #1
 800647a:	4618      	mov	r0, r3
 800647c:	f7fb fe40 	bl	8002100 <HAL_RCC_ClockConfig>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <SystemClock_Config+0xaa>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006486:	21c9      	movs	r1, #201	; 0xc9
 8006488:	480e      	ldr	r0, [pc, #56]	; (80064c4 <SystemClock_Config+0xe0>)
 800648a:	f000 f863 	bl	8006554 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800648e:	f7fb fff1 	bl	8002474 <HAL_RCC_GetHCLKFreq>
 8006492:	4602      	mov	r2, r0
 8006494:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <SystemClock_Config+0xe4>)
 8006496:	fba3 2302 	umull	r2, r3, r3, r2
 800649a:	099b      	lsrs	r3, r3, #6
 800649c:	4618      	mov	r0, r3
 800649e:	f7fa f98a 	bl	80007b6 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80064a2:	2004      	movs	r0, #4
 80064a4:	f7fa f994 	bl	80007d0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80064a8:	2200      	movs	r2, #0
 80064aa:	210f      	movs	r1, #15
 80064ac:	f04f 30ff 	mov.w	r0, #4294967295
 80064b0:	f7fa f957 	bl	8000762 <HAL_NVIC_SetPriority>
}
 80064b4:	bf00      	nop
 80064b6:	3750      	adds	r7, #80	; 0x50
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40023800 	.word	0x40023800
 80064c0:	40007000 	.word	0x40007000
 80064c4:	080073f0 	.word	0x080073f0
 80064c8:	10624dd3 	.word	0x10624dd3

080064cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80064d2:	2300      	movs	r3, #0
 80064d4:	607b      	str	r3, [r7, #4]
 80064d6:	4a10      	ldr	r2, [pc, #64]	; (8006518 <MX_GPIO_Init+0x4c>)
 80064d8:	4b0f      	ldr	r3, [pc, #60]	; (8006518 <MX_GPIO_Init+0x4c>)
 80064da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e0:	6313      	str	r3, [r2, #48]	; 0x30
 80064e2:	4b0d      	ldr	r3, [pc, #52]	; (8006518 <MX_GPIO_Init+0x4c>)
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ea:	607b      	str	r3, [r7, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80064ee:	2300      	movs	r3, #0
 80064f0:	603b      	str	r3, [r7, #0]
 80064f2:	4a09      	ldr	r2, [pc, #36]	; (8006518 <MX_GPIO_Init+0x4c>)
 80064f4:	4b08      	ldr	r3, [pc, #32]	; (8006518 <MX_GPIO_Init+0x4c>)
 80064f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f8:	f043 0301 	orr.w	r3, r3, #1
 80064fc:	6313      	str	r3, [r2, #48]	; 0x30
 80064fe:	4b06      	ldr	r3, [pc, #24]	; (8006518 <MX_GPIO_Init+0x4c>)
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	683b      	ldr	r3, [r7, #0]

}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	40023800 	.word	0x40023800

0800651c <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8006524:	f000 f930 	bl	8006788 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006528:	2001      	movs	r0, #1
 800652a:	f7fe fdeb 	bl	8005104 <osDelay>
 800652e:	e7fb      	b.n	8006528 <StartDefaultTask+0xc>

08006530 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a04      	ldr	r2, [pc, #16]	; (8006550 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d101      	bne.n	8006546 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006542:	f7f9 fff7 	bl	8000534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	40010000 	.word	0x40010000

08006554 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800655e:	e7fe      	b.n	800655e <_Error_Handler+0xa>

08006560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006566:	2300      	movs	r3, #0
 8006568:	607b      	str	r3, [r7, #4]
 800656a:	4a25      	ldr	r2, [pc, #148]	; (8006600 <HAL_MspInit+0xa0>)
 800656c:	4b24      	ldr	r3, [pc, #144]	; (8006600 <HAL_MspInit+0xa0>)
 800656e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006574:	6453      	str	r3, [r2, #68]	; 0x44
 8006576:	4b22      	ldr	r3, [pc, #136]	; (8006600 <HAL_MspInit+0xa0>)
 8006578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800657e:	607b      	str	r3, [r7, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006582:	2300      	movs	r3, #0
 8006584:	603b      	str	r3, [r7, #0]
 8006586:	4a1e      	ldr	r2, [pc, #120]	; (8006600 <HAL_MspInit+0xa0>)
 8006588:	4b1d      	ldr	r3, [pc, #116]	; (8006600 <HAL_MspInit+0xa0>)
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006590:	6413      	str	r3, [r2, #64]	; 0x40
 8006592:	4b1b      	ldr	r3, [pc, #108]	; (8006600 <HAL_MspInit+0xa0>)
 8006594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800659e:	2003      	movs	r0, #3
 80065a0:	f7fa f8d4 	bl	800074c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80065a4:	2200      	movs	r2, #0
 80065a6:	2100      	movs	r1, #0
 80065a8:	f06f 000b 	mvn.w	r0, #11
 80065ac:	f7fa f8d9 	bl	8000762 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80065b0:	2200      	movs	r2, #0
 80065b2:	2100      	movs	r1, #0
 80065b4:	f06f 000a 	mvn.w	r0, #10
 80065b8:	f7fa f8d3 	bl	8000762 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80065bc:	2200      	movs	r2, #0
 80065be:	2100      	movs	r1, #0
 80065c0:	f06f 0009 	mvn.w	r0, #9
 80065c4:	f7fa f8cd 	bl	8000762 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80065c8:	2200      	movs	r2, #0
 80065ca:	2100      	movs	r1, #0
 80065cc:	f06f 0004 	mvn.w	r0, #4
 80065d0:	f7fa f8c7 	bl	8000762 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80065d4:	2200      	movs	r2, #0
 80065d6:	2100      	movs	r1, #0
 80065d8:	f06f 0003 	mvn.w	r0, #3
 80065dc:	f7fa f8c1 	bl	8000762 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80065e0:	2200      	movs	r2, #0
 80065e2:	210f      	movs	r1, #15
 80065e4:	f06f 0001 	mvn.w	r0, #1
 80065e8:	f7fa f8bb 	bl	8000762 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80065ec:	2200      	movs	r2, #0
 80065ee:	210f      	movs	r1, #15
 80065f0:	f04f 30ff 	mov.w	r0, #4294967295
 80065f4:	f7fa f8b5 	bl	8000762 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065f8:	bf00      	nop
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	40023800 	.word	0x40023800

08006604 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08c      	sub	sp, #48	; 0x30
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800660c:	2300      	movs	r3, #0
 800660e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8006614:	2200      	movs	r2, #0
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	2019      	movs	r0, #25
 800661a:	f7fa f8a2 	bl	8000762 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800661e:	2019      	movs	r0, #25
 8006620:	f7fa f8bb 	bl	800079a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	4a1e      	ldr	r2, [pc, #120]	; (80066a4 <HAL_InitTick+0xa0>)
 800662a:	4b1e      	ldr	r3, [pc, #120]	; (80066a4 <HAL_InitTick+0xa0>)
 800662c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	6453      	str	r3, [r2, #68]	; 0x44
 8006634:	4b1b      	ldr	r3, [pc, #108]	; (80066a4 <HAL_InitTick+0xa0>)
 8006636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006640:	f107 0210 	add.w	r2, r7, #16
 8006644:	f107 0314 	add.w	r3, r7, #20
 8006648:	4611      	mov	r1, r2
 800664a:	4618      	mov	r0, r3
 800664c:	f7fb ff32 	bl	80024b4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006650:	f7fb ff1c 	bl	800248c <HAL_RCC_GetPCLK2Freq>
 8006654:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	4a13      	ldr	r2, [pc, #76]	; (80066a8 <HAL_InitTick+0xa4>)
 800665a:	fba2 2303 	umull	r2, r3, r2, r3
 800665e:	0c9b      	lsrs	r3, r3, #18
 8006660:	3b01      	subs	r3, #1
 8006662:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006664:	4b11      	ldr	r3, [pc, #68]	; (80066ac <HAL_InitTick+0xa8>)
 8006666:	4a12      	ldr	r2, [pc, #72]	; (80066b0 <HAL_InitTick+0xac>)
 8006668:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800666a:	4b10      	ldr	r3, [pc, #64]	; (80066ac <HAL_InitTick+0xa8>)
 800666c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006670:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8006672:	4a0e      	ldr	r2, [pc, #56]	; (80066ac <HAL_InitTick+0xa8>)
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8006678:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <HAL_InitTick+0xa8>)
 800667a:	2200      	movs	r2, #0
 800667c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800667e:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <HAL_InitTick+0xa8>)
 8006680:	2200      	movs	r2, #0
 8006682:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8006684:	4809      	ldr	r0, [pc, #36]	; (80066ac <HAL_InitTick+0xa8>)
 8006686:	f7fb ff47 	bl	8002518 <HAL_TIM_Base_Init>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d104      	bne.n	800669a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8006690:	4806      	ldr	r0, [pc, #24]	; (80066ac <HAL_InitTick+0xa8>)
 8006692:	f7fb ff76 	bl	8002582 <HAL_TIM_Base_Start_IT>
 8006696:	4603      	mov	r3, r0
 8006698:	e000      	b.n	800669c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
}
 800669c:	4618      	mov	r0, r3
 800669e:	3730      	adds	r7, #48	; 0x30
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	40023800 	.word	0x40023800
 80066a8:	431bde83 	.word	0x431bde83
 80066ac:	20003f40 	.word	0x20003f40
 80066b0:	40010000 	.word	0x40010000

080066b4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80066b8:	bf00      	nop
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80066c2:	b480      	push	{r7}
 80066c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80066c6:	e7fe      	b.n	80066c6 <HardFault_Handler+0x4>

080066c8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80066c8:	b480      	push	{r7}
 80066ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80066cc:	e7fe      	b.n	80066cc <MemManage_Handler+0x4>

080066ce <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80066ce:	b480      	push	{r7}
 80066d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80066d2:	e7fe      	b.n	80066d2 <BusFault_Handler+0x4>

080066d4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80066d8:	e7fe      	b.n	80066d8 <UsageFault_Handler+0x4>

080066da <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80066da:	b480      	push	{r7}
 80066dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80066de:	bf00      	nop
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80066ec:	f7fe fd1e 	bl	800512c <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80066f0:	bf00      	nop
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80066f8:	4802      	ldr	r0, [pc, #8]	; (8006704 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80066fa:	f7fb ff5d 	bl	80025b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80066fe:	bf00      	nop
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20003f40 	.word	0x20003f40

08006708 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800670c:	4802      	ldr	r0, [pc, #8]	; (8006718 <OTG_FS_IRQHandler+0x10>)
 800670e:	f7fa fb27 	bl	8000d60 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006712:	bf00      	nop
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	200051a0 	.word	0x200051a0

0800671c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006720:	4a16      	ldr	r2, [pc, #88]	; (800677c <SystemInit+0x60>)
 8006722:	4b16      	ldr	r3, [pc, #88]	; (800677c <SystemInit+0x60>)
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800672c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006730:	4a13      	ldr	r2, [pc, #76]	; (8006780 <SystemInit+0x64>)
 8006732:	4b13      	ldr	r3, [pc, #76]	; (8006780 <SystemInit+0x64>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f043 0301 	orr.w	r3, r3, #1
 800673a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800673c:	4b10      	ldr	r3, [pc, #64]	; (8006780 <SystemInit+0x64>)
 800673e:	2200      	movs	r2, #0
 8006740:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006742:	4a0f      	ldr	r2, [pc, #60]	; (8006780 <SystemInit+0x64>)
 8006744:	4b0e      	ldr	r3, [pc, #56]	; (8006780 <SystemInit+0x64>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800674c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006750:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006752:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <SystemInit+0x64>)
 8006754:	4a0b      	ldr	r2, [pc, #44]	; (8006784 <SystemInit+0x68>)
 8006756:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006758:	4a09      	ldr	r2, [pc, #36]	; (8006780 <SystemInit+0x64>)
 800675a:	4b09      	ldr	r3, [pc, #36]	; (8006780 <SystemInit+0x64>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006762:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006764:	4b06      	ldr	r3, [pc, #24]	; (8006780 <SystemInit+0x64>)
 8006766:	2200      	movs	r2, #0
 8006768:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800676a:	4b04      	ldr	r3, [pc, #16]	; (800677c <SystemInit+0x60>)
 800676c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006770:	609a      	str	r2, [r3, #8]
#endif
}
 8006772:	bf00      	nop
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	e000ed00 	.word	0xe000ed00
 8006780:	40023800 	.word	0x40023800
 8006784:	24003010 	.word	0x24003010

08006788 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800678c:	2200      	movs	r2, #0
 800678e:	4908      	ldr	r1, [pc, #32]	; (80067b0 <MX_USB_DEVICE_Init+0x28>)
 8006790:	4808      	ldr	r0, [pc, #32]	; (80067b4 <MX_USB_DEVICE_Init+0x2c>)
 8006792:	f7fd fd12 	bl	80041ba <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8006796:	4908      	ldr	r1, [pc, #32]	; (80067b8 <MX_USB_DEVICE_Init+0x30>)
 8006798:	4806      	ldr	r0, [pc, #24]	; (80067b4 <MX_USB_DEVICE_Init+0x2c>)
 800679a:	f7fd fd39 	bl	8004210 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800679e:	4907      	ldr	r1, [pc, #28]	; (80067bc <MX_USB_DEVICE_Init+0x34>)
 80067a0:	4804      	ldr	r0, [pc, #16]	; (80067b4 <MX_USB_DEVICE_Init+0x2c>)
 80067a2:	f7fd fc9b 	bl	80040dc <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80067a6:	4803      	ldr	r0, [pc, #12]	; (80067b4 <MX_USB_DEVICE_Init+0x2c>)
 80067a8:	f7fd fd4c 	bl	8004244 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80067ac:	bf00      	nop
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	2000012c 	.word	0x2000012c
 80067b4:	20003f7c 	.word	0x20003f7c
 80067b8:	20000010 	.word	0x20000010
 80067bc:	2000011c 	.word	0x2000011c

080067c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80067c4:	2200      	movs	r2, #0
 80067c6:	4905      	ldr	r1, [pc, #20]	; (80067dc <CDC_Init_FS+0x1c>)
 80067c8:	4805      	ldr	r0, [pc, #20]	; (80067e0 <CDC_Init_FS+0x20>)
 80067ca:	f7fd fc9e 	bl	800410a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80067ce:	4905      	ldr	r1, [pc, #20]	; (80067e4 <CDC_Init_FS+0x24>)
 80067d0:	4803      	ldr	r0, [pc, #12]	; (80067e0 <CDC_Init_FS+0x20>)
 80067d2:	f7fd fcb4 	bl	800413e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80067d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80067d8:	4618      	mov	r0, r3
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	200049a0 	.word	0x200049a0
 80067e0:	20003f7c 	.word	0x20003f7c
 80067e4:	200041a0 	.word	0x200041a0

080067e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80067ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	6039      	str	r1, [r7, #0]
 8006802:	71fb      	strb	r3, [r7, #7]
 8006804:	4613      	mov	r3, r2
 8006806:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	2b23      	cmp	r3, #35	; 0x23
 800680c:	d84a      	bhi.n	80068a4 <CDC_Control_FS+0xac>
 800680e:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <CDC_Control_FS+0x1c>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	080068a5 	.word	0x080068a5
 8006818:	080068a5 	.word	0x080068a5
 800681c:	080068a5 	.word	0x080068a5
 8006820:	080068a5 	.word	0x080068a5
 8006824:	080068a5 	.word	0x080068a5
 8006828:	080068a5 	.word	0x080068a5
 800682c:	080068a5 	.word	0x080068a5
 8006830:	080068a5 	.word	0x080068a5
 8006834:	080068a5 	.word	0x080068a5
 8006838:	080068a5 	.word	0x080068a5
 800683c:	080068a5 	.word	0x080068a5
 8006840:	080068a5 	.word	0x080068a5
 8006844:	080068a5 	.word	0x080068a5
 8006848:	080068a5 	.word	0x080068a5
 800684c:	080068a5 	.word	0x080068a5
 8006850:	080068a5 	.word	0x080068a5
 8006854:	080068a5 	.word	0x080068a5
 8006858:	080068a5 	.word	0x080068a5
 800685c:	080068a5 	.word	0x080068a5
 8006860:	080068a5 	.word	0x080068a5
 8006864:	080068a5 	.word	0x080068a5
 8006868:	080068a5 	.word	0x080068a5
 800686c:	080068a5 	.word	0x080068a5
 8006870:	080068a5 	.word	0x080068a5
 8006874:	080068a5 	.word	0x080068a5
 8006878:	080068a5 	.word	0x080068a5
 800687c:	080068a5 	.word	0x080068a5
 8006880:	080068a5 	.word	0x080068a5
 8006884:	080068a5 	.word	0x080068a5
 8006888:	080068a5 	.word	0x080068a5
 800688c:	080068a5 	.word	0x080068a5
 8006890:	080068a5 	.word	0x080068a5
 8006894:	080068a5 	.word	0x080068a5
 8006898:	080068a5 	.word	0x080068a5
 800689c:	080068a5 	.word	0x080068a5
 80068a0:	080068a5 	.word	0x080068a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80068a4:	bf00      	nop
  }

  return (USBD_OK);
 80068a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	4805      	ldr	r0, [pc, #20]	; (80068d8 <CDC_Receive_FS+0x24>)
 80068c2:	f7fd fc3c 	bl	800413e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80068c6:	4804      	ldr	r0, [pc, #16]	; (80068d8 <CDC_Receive_FS+0x24>)
 80068c8:	f7fd fc4d 	bl	8004166 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80068cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20003f7c 	.word	0x20003f7c

080068dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068ec:	d139      	bne.n	8006962 <HAL_PCD_MspInit+0x86>
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80068ee:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80068f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f4:	2302      	movs	r3, #2
 80068f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f8:	2300      	movs	r3, #0
 80068fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068fc:	2303      	movs	r3, #3
 80068fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006900:	230a      	movs	r3, #10
 8006902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006904:	f107 030c 	add.w	r3, r7, #12
 8006908:	4619      	mov	r1, r3
 800690a:	4818      	ldr	r0, [pc, #96]	; (800696c <HAL_PCD_MspInit+0x90>)
 800690c:	f7f9 ff7c 	bl	8000808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006914:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006916:	2300      	movs	r3, #0
 8006918:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800691a:	2300      	movs	r3, #0
 800691c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800691e:	f107 030c 	add.w	r3, r7, #12
 8006922:	4619      	mov	r1, r3
 8006924:	4811      	ldr	r0, [pc, #68]	; (800696c <HAL_PCD_MspInit+0x90>)
 8006926:	f7f9 ff6f 	bl	8000808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800692a:	4a11      	ldr	r2, [pc, #68]	; (8006970 <HAL_PCD_MspInit+0x94>)
 800692c:	4b10      	ldr	r3, [pc, #64]	; (8006970 <HAL_PCD_MspInit+0x94>)
 800692e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006934:	6353      	str	r3, [r2, #52]	; 0x34
 8006936:	2300      	movs	r3, #0
 8006938:	60bb      	str	r3, [r7, #8]
 800693a:	4a0d      	ldr	r2, [pc, #52]	; (8006970 <HAL_PCD_MspInit+0x94>)
 800693c:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <HAL_PCD_MspInit+0x94>)
 800693e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006944:	6453      	str	r3, [r2, #68]	; 0x44
 8006946:	4b0a      	ldr	r3, [pc, #40]	; (8006970 <HAL_PCD_MspInit+0x94>)
 8006948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800694e:	60bb      	str	r3, [r7, #8]
 8006950:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8006952:	2200      	movs	r2, #0
 8006954:	2105      	movs	r1, #5
 8006956:	2043      	movs	r0, #67	; 0x43
 8006958:	f7f9 ff03 	bl	8000762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800695c:	2043      	movs	r0, #67	; 0x43
 800695e:	f7f9 ff1c 	bl	800079a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006962:	bf00      	nop
 8006964:	3720      	adds	r7, #32
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40020000 	.word	0x40020000
 8006970:	40023800 	.word	0x40023800

08006974 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8006988:	4619      	mov	r1, r3
 800698a:	4610      	mov	r0, r2
 800698c:	f7fd fca3 	bl	80042d6 <USBD_LL_SetupStage>
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 80069aa:	78fa      	ldrb	r2, [r7, #3]
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	4613      	mov	r3, r2
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	1a9b      	subs	r3, r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	440b      	add	r3, r1
 80069b8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	78fb      	ldrb	r3, [r7, #3]
 80069c0:	4619      	mov	r1, r3
 80069c2:	f7fd fcd2 	bl	800436a <USBD_LL_DataOutStage>
}
 80069c6:	bf00      	nop
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b082      	sub	sp, #8
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	460b      	mov	r3, r1
 80069d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 80069e0:	78fa      	ldrb	r2, [r7, #3]
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	1a9b      	subs	r3, r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	3344      	adds	r3, #68	; 0x44
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	4619      	mov	r1, r3
 80069f6:	f7fd fd13 	bl	8004420 <USBD_LL_DataInStage>
}
 80069fa:	bf00      	nop
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fd fdf9 	bl	8004608 <USBD_LL_SOF>
}
 8006a16:	bf00      	nop
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006a26:	2301      	movs	r3, #1
 8006a28:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <HAL_PCD_ResetCallback+0x1a>
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d003      	beq.n	8006a3e <HAL_PCD_ResetCallback+0x20>
 8006a36:	e005      	b.n	8006a44 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8006a3c:	e005      	b.n	8006a4a <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	73fb      	strb	r3, [r7, #15]
    break;
 8006a42:	e002      	b.n	8006a4a <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 8006a44:	2301      	movs	r3, #1
 8006a46:	73fb      	strb	r3, [r7, #15]
    break;    
 8006a48:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8006a50:	7bfa      	ldrb	r2, [r7, #15]
 8006a52:	4611      	mov	r1, r2
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fd fda1 	bl	800459c <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fd fd6c 	bl	800453e <USBD_LL_Reset>
}
 8006a66:	bf00      	nop
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fd fd9c 	bl	80045bc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f043 0301 	orr.w	r3, r3, #1
 8006a9c:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d005      	beq.n	8006ab2 <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006aa6:	4a05      	ldr	r2, [pc, #20]	; (8006abc <HAL_PCD_SuspendCallback+0x4c>)
 8006aa8:	4b04      	ldr	r3, [pc, #16]	; (8006abc <HAL_PCD_SuspendCallback+0x4c>)
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	f043 0306 	orr.w	r3, r3, #6
 8006ab0:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ab2:	bf00      	nop
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	e000ed00 	.word	0xe000ed00

08006ac0 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fd fd89 	bl	80045e6 <USBD_LL_Resume>
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8006aee:	78fa      	ldrb	r2, [r7, #3]
 8006af0:	4611      	mov	r1, r2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fd fdaf 	bl	8004656 <USBD_LL_IsoOUTIncomplete>
}
 8006af8:	bf00      	nop
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	4611      	mov	r1, r2
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fd fd90 	bl	800463c <USBD_LL_IsoINIncomplete>
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fd fd9c 	bl	8004670 <USBD_LL_DevConnected>
}
 8006b38:	bf00      	nop
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fd fd99 	bl	8004686 <USBD_LL_DevDisconnected>
}
 8006b54:	bf00      	nop
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d142      	bne.n	8006bf2 <USBD_LL_Init+0x96>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006b6c:	4a23      	ldr	r2, [pc, #140]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a21      	ldr	r2, [pc, #132]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006b78:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006b7c:	4b1f      	ldr	r3, [pc, #124]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006b7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006b82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006b84:	4b1d      	ldr	r3, [pc, #116]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006b86:	2204      	movs	r2, #4
 8006b88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006b8a:	4b1c      	ldr	r3, [pc, #112]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006b90:	4b1a      	ldr	r3, [pc, #104]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8006b96:	4b19      	ldr	r3, [pc, #100]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b9c:	4b17      	ldr	r3, [pc, #92]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006ba2:	4b16      	ldr	r3, [pc, #88]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006ba8:	4b14      	ldr	r3, [pc, #80]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006bae:	4b13      	ldr	r3, [pc, #76]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006bb4:	4b11      	ldr	r3, [pc, #68]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006bba:	4b10      	ldr	r3, [pc, #64]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006bc0:	480e      	ldr	r0, [pc, #56]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006bc2:	f7f9 ffa3 	bl	8000b0c <HAL_PCD_Init>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d004      	beq.n	8006bd6 <USBD_LL_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006bcc:	f240 1153 	movw	r1, #339	; 0x153
 8006bd0:	480b      	ldr	r0, [pc, #44]	; (8006c00 <USBD_LL_Init+0xa4>)
 8006bd2:	f7ff fcbf 	bl	8006554 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006bd6:	2180      	movs	r1, #128	; 0x80
 8006bd8:	4808      	ldr	r0, [pc, #32]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006bda:	f7fb f83d 	bl	8001c58 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006bde:	2240      	movs	r2, #64	; 0x40
 8006be0:	2100      	movs	r1, #0
 8006be2:	4806      	ldr	r0, [pc, #24]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006be4:	f7fa ffed 	bl	8001bc2 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006be8:	2280      	movs	r2, #128	; 0x80
 8006bea:	2101      	movs	r1, #1
 8006bec:	4803      	ldr	r0, [pc, #12]	; (8006bfc <USBD_LL_Init+0xa0>)
 8006bee:	f7fa ffe8 	bl	8001bc2 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	200051a0 	.word	0x200051a0
 8006c00:	08007400 	.word	0x08007400

08006c04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fa f87d 	bl	8000d1a <HAL_PCD_Start>
 8006c20:	4603      	mov	r3, r0
 8006c22:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d816      	bhi.n	8006c58 <USBD_LL_Start+0x54>
 8006c2a:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <USBD_LL_Start+0x2c>)
 8006c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c30:	08006c41 	.word	0x08006c41
 8006c34:	08006c47 	.word	0x08006c47
 8006c38:	08006c4d 	.word	0x08006c4d
 8006c3c:	08006c53 	.word	0x08006c53
    case HAL_OK :
      usb_status = USBD_OK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	73fb      	strb	r3, [r7, #15]
    break;
 8006c44:	e00b      	b.n	8006c5e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c46:	2302      	movs	r3, #2
 8006c48:	73fb      	strb	r3, [r7, #15]
    break;
 8006c4a:	e008      	b.n	8006c5e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c50:	e005      	b.n	8006c5e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c52:	2302      	movs	r3, #2
 8006c54:	73fb      	strb	r3, [r7, #15]
    break;
 8006c56:	e002      	b.n	8006c5e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006c58:	2302      	movs	r3, #2
 8006c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c5c:	bf00      	nop
  }
  return usb_status;
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	4608      	mov	r0, r1
 8006c72:	4611      	mov	r1, r2
 8006c74:	461a      	mov	r2, r3
 8006c76:	4603      	mov	r3, r0
 8006c78:	70fb      	strb	r3, [r7, #3]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	70bb      	strb	r3, [r7, #2]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006c90:	78bb      	ldrb	r3, [r7, #2]
 8006c92:	883a      	ldrh	r2, [r7, #0]
 8006c94:	78f9      	ldrb	r1, [r7, #3]
 8006c96:	f7fa fd0e 	bl	80016b6 <HAL_PCD_EP_Open>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006c9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d817      	bhi.n	8006cd4 <USBD_LL_OpenEP+0x6c>
 8006ca4:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <USBD_LL_OpenEP+0x44>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006cbd 	.word	0x08006cbd
 8006cb0:	08006cc3 	.word	0x08006cc3
 8006cb4:	08006cc9 	.word	0x08006cc9
 8006cb8:	08006ccf 	.word	0x08006ccf
    case HAL_OK :
      usb_status = USBD_OK;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc0:	e00b      	b.n	8006cda <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc6:	e008      	b.n	8006cda <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	73fb      	strb	r3, [r7, #15]
    break;
 8006ccc:	e005      	b.n	8006cda <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006cce:	2302      	movs	r3, #2
 8006cd0:	73fb      	strb	r3, [r7, #15]
    break;
 8006cd2:	e002      	b.n	8006cda <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8006cd8:	bf00      	nop
  }
  return usb_status;
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006cfe:	78fa      	ldrb	r2, [r7, #3]
 8006d00:	4611      	mov	r1, r2
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fa fd3f 	bl	8001786 <HAL_PCD_EP_Close>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8006d0c:	7bbb      	ldrb	r3, [r7, #14]
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d816      	bhi.n	8006d40 <USBD_LL_CloseEP+0x5c>
 8006d12:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <USBD_LL_CloseEP+0x34>)
 8006d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d18:	08006d29 	.word	0x08006d29
 8006d1c:	08006d2f 	.word	0x08006d2f
 8006d20:	08006d35 	.word	0x08006d35
 8006d24:	08006d3b 	.word	0x08006d3b
    case HAL_OK :
      usb_status = USBD_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d2c:	e00b      	b.n	8006d46 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d2e:	2302      	movs	r3, #2
 8006d30:	73fb      	strb	r3, [r7, #15]
    break;
 8006d32:	e008      	b.n	8006d46 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d34:	2301      	movs	r3, #1
 8006d36:	73fb      	strb	r3, [r7, #15]
    break;
 8006d38:	e005      	b.n	8006d46 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	73fb      	strb	r3, [r7, #15]
    break;
 8006d3e:	e002      	b.n	8006d46 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006d40:	2302      	movs	r3, #2
 8006d42:	73fb      	strb	r3, [r7, #15]
    break;
 8006d44:	bf00      	nop
  }
  return usb_status;  
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006d6a:	78fa      	ldrb	r2, [r7, #3]
 8006d6c:	4611      	mov	r1, r2
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fa fdff 	bl	8001972 <HAL_PCD_EP_SetStall>
 8006d74:	4603      	mov	r3, r0
 8006d76:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d816      	bhi.n	8006dac <USBD_LL_StallEP+0x5c>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <USBD_LL_StallEP+0x34>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006d95 	.word	0x08006d95
 8006d88:	08006d9b 	.word	0x08006d9b
 8006d8c:	08006da1 	.word	0x08006da1
 8006d90:	08006da7 	.word	0x08006da7
    case HAL_OK :
      usb_status = USBD_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	73fb      	strb	r3, [r7, #15]
    break;
 8006d98:	e00b      	b.n	8006db2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8006d9e:	e008      	b.n	8006db2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006da0:	2301      	movs	r3, #1
 8006da2:	73fb      	strb	r3, [r7, #15]
    break;
 8006da4:	e005      	b.n	8006db2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006da6:	2302      	movs	r3, #2
 8006da8:	73fb      	strb	r3, [r7, #15]
    break;
 8006daa:	e002      	b.n	8006db2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006dac:	2302      	movs	r3, #2
 8006dae:	73fb      	strb	r3, [r7, #15]
    break;
 8006db0:	bf00      	nop
  }
  return usb_status;  
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006dd6:	78fa      	ldrb	r2, [r7, #3]
 8006dd8:	4611      	mov	r1, r2
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fa fe24 	bl	8001a28 <HAL_PCD_EP_ClrStall>
 8006de0:	4603      	mov	r3, r0
 8006de2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d816      	bhi.n	8006e18 <USBD_LL_ClearStallEP+0x5c>
 8006dea:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <USBD_LL_ClearStallEP+0x34>)
 8006dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df0:	08006e01 	.word	0x08006e01
 8006df4:	08006e07 	.word	0x08006e07
 8006df8:	08006e0d 	.word	0x08006e0d
 8006dfc:	08006e13 	.word	0x08006e13
    case HAL_OK :
      usb_status = USBD_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73fb      	strb	r3, [r7, #15]
    break;
 8006e04:	e00b      	b.n	8006e1e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e06:	2302      	movs	r3, #2
 8006e08:	73fb      	strb	r3, [r7, #15]
    break;
 8006e0a:	e008      	b.n	8006e1e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e10:	e005      	b.n	8006e1e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e12:	2302      	movs	r3, #2
 8006e14:	73fb      	strb	r3, [r7, #15]
    break;
 8006e16:	e002      	b.n	8006e1e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e1c:	bf00      	nop
  }
  return usb_status; 
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006e3a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	da0b      	bge.n	8006e5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e4a:	68f9      	ldr	r1, [r7, #12]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	1a9b      	subs	r3, r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	440b      	add	r3, r1
 8006e56:	333a      	adds	r3, #58	; 0x3a
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	e00b      	b.n	8006e74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e62:	68f9      	ldr	r1, [r7, #12]
 8006e64:	4613      	mov	r3, r2
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	1a9b      	subs	r3, r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	440b      	add	r3, r1
 8006e6e:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8006e72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006e9a:	78fa      	ldrb	r2, [r7, #3]
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fa fbe8 	bl	8001674 <HAL_PCD_SetAddress>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006ea8:	7bbb      	ldrb	r3, [r7, #14]
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d816      	bhi.n	8006edc <USBD_LL_SetUSBAddress+0x5c>
 8006eae:	a201      	add	r2, pc, #4	; (adr r2, 8006eb4 <USBD_LL_SetUSBAddress+0x34>)
 8006eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb4:	08006ec5 	.word	0x08006ec5
 8006eb8:	08006ecb 	.word	0x08006ecb
 8006ebc:	08006ed1 	.word	0x08006ed1
 8006ec0:	08006ed7 	.word	0x08006ed7
    case HAL_OK :
      usb_status = USBD_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ec8:	e00b      	b.n	8006ee2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006eca:	2302      	movs	r3, #2
 8006ecc:	73fb      	strb	r3, [r7, #15]
    break;
 8006ece:	e008      	b.n	8006ee2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ed4:	e005      	b.n	8006ee2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	73fb      	strb	r3, [r7, #15]
    break;
 8006eda:	e002      	b.n	8006ee2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006edc:	2302      	movs	r3, #2
 8006ede:	73fb      	strb	r3, [r7, #15]
    break;
 8006ee0:	bf00      	nop
  }
  return usb_status;  
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	607a      	str	r2, [r7, #4]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	460b      	mov	r3, r1
 8006efa:	72fb      	strb	r3, [r7, #11]
 8006efc:	4613      	mov	r3, r2
 8006efe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006f0e:	893b      	ldrh	r3, [r7, #8]
 8006f10:	7af9      	ldrb	r1, [r7, #11]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	f7fa fce4 	bl	80018e0 <HAL_PCD_EP_Transmit>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8006f1c:	7dbb      	ldrb	r3, [r7, #22]
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d816      	bhi.n	8006f50 <USBD_LL_Transmit+0x64>
 8006f22:	a201      	add	r2, pc, #4	; (adr r2, 8006f28 <USBD_LL_Transmit+0x3c>)
 8006f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f28:	08006f39 	.word	0x08006f39
 8006f2c:	08006f3f 	.word	0x08006f3f
 8006f30:	08006f45 	.word	0x08006f45
 8006f34:	08006f4b 	.word	0x08006f4b
    case HAL_OK :
      usb_status = USBD_OK;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	75fb      	strb	r3, [r7, #23]
    break;
 8006f3c:	e00b      	b.n	8006f56 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f3e:	2302      	movs	r3, #2
 8006f40:	75fb      	strb	r3, [r7, #23]
    break;
 8006f42:	e008      	b.n	8006f56 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f44:	2301      	movs	r3, #1
 8006f46:	75fb      	strb	r3, [r7, #23]
    break;
 8006f48:	e005      	b.n	8006f56 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	75fb      	strb	r3, [r7, #23]
    break;
 8006f4e:	e002      	b.n	8006f56 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8006f50:	2302      	movs	r3, #2
 8006f52:	75fb      	strb	r3, [r7, #23]
    break;
 8006f54:	bf00      	nop
  }
  return usb_status;    
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	607a      	str	r2, [r7, #4]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	72fb      	strb	r3, [r7, #11]
 8006f70:	4613      	mov	r3, r2
 8006f72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006f82:	893b      	ldrh	r3, [r7, #8]
 8006f84:	7af9      	ldrb	r1, [r7, #11]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	f7fa fc47 	bl	800181a <HAL_PCD_EP_Receive>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8006f90:	7dbb      	ldrb	r3, [r7, #22]
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d816      	bhi.n	8006fc4 <USBD_LL_PrepareReceive+0x64>
 8006f96:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <USBD_LL_PrepareReceive+0x3c>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	08006fad 	.word	0x08006fad
 8006fa0:	08006fb3 	.word	0x08006fb3
 8006fa4:	08006fb9 	.word	0x08006fb9
 8006fa8:	08006fbf 	.word	0x08006fbf
    case HAL_OK :
      usb_status = USBD_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	75fb      	strb	r3, [r7, #23]
    break;
 8006fb0:	e00b      	b.n	8006fca <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	75fb      	strb	r3, [r7, #23]
    break;
 8006fb6:	e008      	b.n	8006fca <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	75fb      	strb	r3, [r7, #23]
    break;
 8006fbc:	e005      	b.n	8006fca <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	75fb      	strb	r3, [r7, #23]
    break;
 8006fc2:	e002      	b.n	8006fca <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	75fb      	strb	r3, [r7, #23]
    break;
 8006fc8:	bf00      	nop
  }
  return usb_status; 
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006fe6:	78fa      	ldrb	r2, [r7, #3]
 8006fe8:	4611      	mov	r1, r2
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fa fc5f 	bl	80018ae <HAL_PCD_EP_GetRxCount>
 8006ff0:	4603      	mov	r3, r0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	6039      	str	r1, [r7, #0]
 8007006:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2212      	movs	r2, #18
 800700c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800700e:	4b03      	ldr	r3, [pc, #12]	; (800701c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	20000148 	.word	0x20000148

08007020 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	6039      	str	r1, [r7, #0]
 800702a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2204      	movs	r2, #4
 8007030:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007032:	4b03      	ldr	r3, [pc, #12]	; (8007040 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	2000015c 	.word	0x2000015c

08007044 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	6039      	str	r1, [r7, #0]
 800704e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d105      	bne.n	8007062 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	4907      	ldr	r1, [pc, #28]	; (8007078 <USBD_FS_ProductStrDescriptor+0x34>)
 800705a:	4808      	ldr	r0, [pc, #32]	; (800707c <USBD_FS_ProductStrDescriptor+0x38>)
 800705c:	f7fd ff2d 	bl	8004eba <USBD_GetString>
 8007060:	e004      	b.n	800706c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	4904      	ldr	r1, [pc, #16]	; (8007078 <USBD_FS_ProductStrDescriptor+0x34>)
 8007066:	4805      	ldr	r0, [pc, #20]	; (800707c <USBD_FS_ProductStrDescriptor+0x38>)
 8007068:	f7fd ff27 	bl	8004eba <USBD_GetString>
  }
  return USBD_StrDesc;
 800706c:	4b02      	ldr	r3, [pc, #8]	; (8007078 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20005590 	.word	0x20005590
 800707c:	08007414 	.word	0x08007414

08007080 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	4603      	mov	r3, r0
 8007088:	6039      	str	r1, [r7, #0]
 800708a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	4904      	ldr	r1, [pc, #16]	; (80070a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007090:	4804      	ldr	r0, [pc, #16]	; (80070a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007092:	f7fd ff12 	bl	8004eba <USBD_GetString>
  return USBD_StrDesc;
 8007096:	4b02      	ldr	r3, [pc, #8]	; (80070a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	20005590 	.word	0x20005590
 80070a4:	0800742c 	.word	0x0800742c

080070a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	6039      	str	r1, [r7, #0]
 80070b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d105      	bne.n	80070c6 <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	4907      	ldr	r1, [pc, #28]	; (80070dc <USBD_FS_SerialStrDescriptor+0x34>)
 80070be:	4808      	ldr	r0, [pc, #32]	; (80070e0 <USBD_FS_SerialStrDescriptor+0x38>)
 80070c0:	f7fd fefb 	bl	8004eba <USBD_GetString>
 80070c4:	e004      	b.n	80070d0 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	4904      	ldr	r1, [pc, #16]	; (80070dc <USBD_FS_SerialStrDescriptor+0x34>)
 80070ca:	4805      	ldr	r0, [pc, #20]	; (80070e0 <USBD_FS_SerialStrDescriptor+0x38>)
 80070cc:	f7fd fef5 	bl	8004eba <USBD_GetString>
  }
  return USBD_StrDesc;
 80070d0:	4b02      	ldr	r3, [pc, #8]	; (80070dc <USBD_FS_SerialStrDescriptor+0x34>)
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20005590 	.word	0x20005590
 80070e0:	08007440 	.word	0x08007440

080070e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	6039      	str	r1, [r7, #0]
 80070ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070f0:	79fb      	ldrb	r3, [r7, #7]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d105      	bne.n	8007102 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	4907      	ldr	r1, [pc, #28]	; (8007118 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070fa:	4808      	ldr	r0, [pc, #32]	; (800711c <USBD_FS_ConfigStrDescriptor+0x38>)
 80070fc:	f7fd fedd 	bl	8004eba <USBD_GetString>
 8007100:	e004      	b.n	800710c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	4904      	ldr	r1, [pc, #16]	; (8007118 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007106:	4805      	ldr	r0, [pc, #20]	; (800711c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007108:	f7fd fed7 	bl	8004eba <USBD_GetString>
  }
  return USBD_StrDesc;
 800710c:	4b02      	ldr	r3, [pc, #8]	; (8007118 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800710e:	4618      	mov	r0, r3
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20005590 	.word	0x20005590
 800711c:	08007450 	.word	0x08007450

08007120 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	6039      	str	r1, [r7, #0]
 800712a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800712c:	79fb      	ldrb	r3, [r7, #7]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d105      	bne.n	800713e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	4907      	ldr	r1, [pc, #28]	; (8007154 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007136:	4808      	ldr	r0, [pc, #32]	; (8007158 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007138:	f7fd febf 	bl	8004eba <USBD_GetString>
 800713c:	e004      	b.n	8007148 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	4904      	ldr	r1, [pc, #16]	; (8007154 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007142:	4805      	ldr	r0, [pc, #20]	; (8007158 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007144:	f7fd feb9 	bl	8004eba <USBD_GetString>
  }
  return USBD_StrDesc;
 8007148:	4b02      	ldr	r3, [pc, #8]	; (8007154 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20005590 	.word	0x20005590
 8007158:	0800745c 	.word	0x0800745c

0800715c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800715c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007194 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007160:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007162:	e003      	b.n	800716c <LoopCopyDataInit>

08007164 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007164:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007166:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007168:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800716a:	3104      	adds	r1, #4

0800716c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800716c:	480b      	ldr	r0, [pc, #44]	; (800719c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800716e:	4b0c      	ldr	r3, [pc, #48]	; (80071a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007170:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007172:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007174:	d3f6      	bcc.n	8007164 <CopyDataInit>
  ldr  r2, =_sbss
 8007176:	4a0b      	ldr	r2, [pc, #44]	; (80071a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007178:	e002      	b.n	8007180 <LoopFillZerobss>

0800717a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800717a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800717c:	f842 3b04 	str.w	r3, [r2], #4

08007180 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007180:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007182:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007184:	d3f9      	bcc.n	800717a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007186:	f7ff fac9 	bl	800671c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800718a:	f000 f811 	bl	80071b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800718e:	f7ff f909 	bl	80063a4 <main>
  bx  lr    
 8007192:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007194:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007198:	08007494 	.word	0x08007494
  ldr  r0, =_sdata
 800719c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80071a0:	200001c4 	.word	0x200001c4
  ldr  r2, =_sbss
 80071a4:	200001c4 	.word	0x200001c4
  ldr  r3, = _ebss
 80071a8:	20005794 	.word	0x20005794

080071ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80071ac:	e7fe      	b.n	80071ac <ADC_IRQHandler>
	...

080071b0 <__libc_init_array>:
 80071b0:	b570      	push	{r4, r5, r6, lr}
 80071b2:	4e0d      	ldr	r6, [pc, #52]	; (80071e8 <__libc_init_array+0x38>)
 80071b4:	4c0d      	ldr	r4, [pc, #52]	; (80071ec <__libc_init_array+0x3c>)
 80071b6:	1ba4      	subs	r4, r4, r6
 80071b8:	10a4      	asrs	r4, r4, #2
 80071ba:	2500      	movs	r5, #0
 80071bc:	42a5      	cmp	r5, r4
 80071be:	d109      	bne.n	80071d4 <__libc_init_array+0x24>
 80071c0:	4e0b      	ldr	r6, [pc, #44]	; (80071f0 <__libc_init_array+0x40>)
 80071c2:	4c0c      	ldr	r4, [pc, #48]	; (80071f4 <__libc_init_array+0x44>)
 80071c4:	f000 f8f4 	bl	80073b0 <_init>
 80071c8:	1ba4      	subs	r4, r4, r6
 80071ca:	10a4      	asrs	r4, r4, #2
 80071cc:	2500      	movs	r5, #0
 80071ce:	42a5      	cmp	r5, r4
 80071d0:	d105      	bne.n	80071de <__libc_init_array+0x2e>
 80071d2:	bd70      	pop	{r4, r5, r6, pc}
 80071d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071d8:	4798      	blx	r3
 80071da:	3501      	adds	r5, #1
 80071dc:	e7ee      	b.n	80071bc <__libc_init_array+0xc>
 80071de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071e2:	4798      	blx	r3
 80071e4:	3501      	adds	r5, #1
 80071e6:	e7f2      	b.n	80071ce <__libc_init_array+0x1e>
 80071e8:	0800748c 	.word	0x0800748c
 80071ec:	0800748c 	.word	0x0800748c
 80071f0:	0800748c 	.word	0x0800748c
 80071f4:	08007490 	.word	0x08007490

080071f8 <malloc>:
 80071f8:	4b02      	ldr	r3, [pc, #8]	; (8007204 <malloc+0xc>)
 80071fa:	4601      	mov	r1, r0
 80071fc:	6818      	ldr	r0, [r3, #0]
 80071fe:	f000 b859 	b.w	80072b4 <_malloc_r>
 8007202:	bf00      	nop
 8007204:	20000160 	.word	0x20000160

08007208 <free>:
 8007208:	4b02      	ldr	r3, [pc, #8]	; (8007214 <free+0xc>)
 800720a:	4601      	mov	r1, r0
 800720c:	6818      	ldr	r0, [r3, #0]
 800720e:	f000 b803 	b.w	8007218 <_free_r>
 8007212:	bf00      	nop
 8007214:	20000160 	.word	0x20000160

08007218 <_free_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4605      	mov	r5, r0
 800721c:	2900      	cmp	r1, #0
 800721e:	d045      	beq.n	80072ac <_free_r+0x94>
 8007220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007224:	1f0c      	subs	r4, r1, #4
 8007226:	2b00      	cmp	r3, #0
 8007228:	bfb8      	it	lt
 800722a:	18e4      	addlt	r4, r4, r3
 800722c:	f000 f8b0 	bl	8007390 <__malloc_lock>
 8007230:	4a1f      	ldr	r2, [pc, #124]	; (80072b0 <_free_r+0x98>)
 8007232:	6813      	ldr	r3, [r2, #0]
 8007234:	4610      	mov	r0, r2
 8007236:	b933      	cbnz	r3, 8007246 <_free_r+0x2e>
 8007238:	6063      	str	r3, [r4, #4]
 800723a:	6014      	str	r4, [r2, #0]
 800723c:	4628      	mov	r0, r5
 800723e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007242:	f000 b8a6 	b.w	8007392 <__malloc_unlock>
 8007246:	42a3      	cmp	r3, r4
 8007248:	d90c      	bls.n	8007264 <_free_r+0x4c>
 800724a:	6821      	ldr	r1, [r4, #0]
 800724c:	1862      	adds	r2, r4, r1
 800724e:	4293      	cmp	r3, r2
 8007250:	bf04      	itt	eq
 8007252:	681a      	ldreq	r2, [r3, #0]
 8007254:	685b      	ldreq	r3, [r3, #4]
 8007256:	6063      	str	r3, [r4, #4]
 8007258:	bf04      	itt	eq
 800725a:	1852      	addeq	r2, r2, r1
 800725c:	6022      	streq	r2, [r4, #0]
 800725e:	6004      	str	r4, [r0, #0]
 8007260:	e7ec      	b.n	800723c <_free_r+0x24>
 8007262:	4613      	mov	r3, r2
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	b10a      	cbz	r2, 800726c <_free_r+0x54>
 8007268:	42a2      	cmp	r2, r4
 800726a:	d9fa      	bls.n	8007262 <_free_r+0x4a>
 800726c:	6819      	ldr	r1, [r3, #0]
 800726e:	1858      	adds	r0, r3, r1
 8007270:	42a0      	cmp	r0, r4
 8007272:	d10b      	bne.n	800728c <_free_r+0x74>
 8007274:	6820      	ldr	r0, [r4, #0]
 8007276:	4401      	add	r1, r0
 8007278:	1858      	adds	r0, r3, r1
 800727a:	4282      	cmp	r2, r0
 800727c:	6019      	str	r1, [r3, #0]
 800727e:	d1dd      	bne.n	800723c <_free_r+0x24>
 8007280:	6810      	ldr	r0, [r2, #0]
 8007282:	6852      	ldr	r2, [r2, #4]
 8007284:	605a      	str	r2, [r3, #4]
 8007286:	4401      	add	r1, r0
 8007288:	6019      	str	r1, [r3, #0]
 800728a:	e7d7      	b.n	800723c <_free_r+0x24>
 800728c:	d902      	bls.n	8007294 <_free_r+0x7c>
 800728e:	230c      	movs	r3, #12
 8007290:	602b      	str	r3, [r5, #0]
 8007292:	e7d3      	b.n	800723c <_free_r+0x24>
 8007294:	6820      	ldr	r0, [r4, #0]
 8007296:	1821      	adds	r1, r4, r0
 8007298:	428a      	cmp	r2, r1
 800729a:	bf04      	itt	eq
 800729c:	6811      	ldreq	r1, [r2, #0]
 800729e:	6852      	ldreq	r2, [r2, #4]
 80072a0:	6062      	str	r2, [r4, #4]
 80072a2:	bf04      	itt	eq
 80072a4:	1809      	addeq	r1, r1, r0
 80072a6:	6021      	streq	r1, [r4, #0]
 80072a8:	605c      	str	r4, [r3, #4]
 80072aa:	e7c7      	b.n	800723c <_free_r+0x24>
 80072ac:	bd38      	pop	{r3, r4, r5, pc}
 80072ae:	bf00      	nop
 80072b0:	20003f2c 	.word	0x20003f2c

080072b4 <_malloc_r>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	1ccd      	adds	r5, r1, #3
 80072b8:	f025 0503 	bic.w	r5, r5, #3
 80072bc:	3508      	adds	r5, #8
 80072be:	2d0c      	cmp	r5, #12
 80072c0:	bf38      	it	cc
 80072c2:	250c      	movcc	r5, #12
 80072c4:	2d00      	cmp	r5, #0
 80072c6:	4606      	mov	r6, r0
 80072c8:	db01      	blt.n	80072ce <_malloc_r+0x1a>
 80072ca:	42a9      	cmp	r1, r5
 80072cc:	d903      	bls.n	80072d6 <_malloc_r+0x22>
 80072ce:	230c      	movs	r3, #12
 80072d0:	6033      	str	r3, [r6, #0]
 80072d2:	2000      	movs	r0, #0
 80072d4:	bd70      	pop	{r4, r5, r6, pc}
 80072d6:	f000 f85b 	bl	8007390 <__malloc_lock>
 80072da:	4a23      	ldr	r2, [pc, #140]	; (8007368 <_malloc_r+0xb4>)
 80072dc:	6814      	ldr	r4, [r2, #0]
 80072de:	4621      	mov	r1, r4
 80072e0:	b991      	cbnz	r1, 8007308 <_malloc_r+0x54>
 80072e2:	4c22      	ldr	r4, [pc, #136]	; (800736c <_malloc_r+0xb8>)
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	b91b      	cbnz	r3, 80072f0 <_malloc_r+0x3c>
 80072e8:	4630      	mov	r0, r6
 80072ea:	f000 f841 	bl	8007370 <_sbrk_r>
 80072ee:	6020      	str	r0, [r4, #0]
 80072f0:	4629      	mov	r1, r5
 80072f2:	4630      	mov	r0, r6
 80072f4:	f000 f83c 	bl	8007370 <_sbrk_r>
 80072f8:	1c43      	adds	r3, r0, #1
 80072fa:	d126      	bne.n	800734a <_malloc_r+0x96>
 80072fc:	230c      	movs	r3, #12
 80072fe:	6033      	str	r3, [r6, #0]
 8007300:	4630      	mov	r0, r6
 8007302:	f000 f846 	bl	8007392 <__malloc_unlock>
 8007306:	e7e4      	b.n	80072d2 <_malloc_r+0x1e>
 8007308:	680b      	ldr	r3, [r1, #0]
 800730a:	1b5b      	subs	r3, r3, r5
 800730c:	d41a      	bmi.n	8007344 <_malloc_r+0x90>
 800730e:	2b0b      	cmp	r3, #11
 8007310:	d90f      	bls.n	8007332 <_malloc_r+0x7e>
 8007312:	600b      	str	r3, [r1, #0]
 8007314:	50cd      	str	r5, [r1, r3]
 8007316:	18cc      	adds	r4, r1, r3
 8007318:	4630      	mov	r0, r6
 800731a:	f000 f83a 	bl	8007392 <__malloc_unlock>
 800731e:	f104 000b 	add.w	r0, r4, #11
 8007322:	1d23      	adds	r3, r4, #4
 8007324:	f020 0007 	bic.w	r0, r0, #7
 8007328:	1ac3      	subs	r3, r0, r3
 800732a:	d01b      	beq.n	8007364 <_malloc_r+0xb0>
 800732c:	425a      	negs	r2, r3
 800732e:	50e2      	str	r2, [r4, r3]
 8007330:	bd70      	pop	{r4, r5, r6, pc}
 8007332:	428c      	cmp	r4, r1
 8007334:	bf0d      	iteet	eq
 8007336:	6863      	ldreq	r3, [r4, #4]
 8007338:	684b      	ldrne	r3, [r1, #4]
 800733a:	6063      	strne	r3, [r4, #4]
 800733c:	6013      	streq	r3, [r2, #0]
 800733e:	bf18      	it	ne
 8007340:	460c      	movne	r4, r1
 8007342:	e7e9      	b.n	8007318 <_malloc_r+0x64>
 8007344:	460c      	mov	r4, r1
 8007346:	6849      	ldr	r1, [r1, #4]
 8007348:	e7ca      	b.n	80072e0 <_malloc_r+0x2c>
 800734a:	1cc4      	adds	r4, r0, #3
 800734c:	f024 0403 	bic.w	r4, r4, #3
 8007350:	42a0      	cmp	r0, r4
 8007352:	d005      	beq.n	8007360 <_malloc_r+0xac>
 8007354:	1a21      	subs	r1, r4, r0
 8007356:	4630      	mov	r0, r6
 8007358:	f000 f80a 	bl	8007370 <_sbrk_r>
 800735c:	3001      	adds	r0, #1
 800735e:	d0cd      	beq.n	80072fc <_malloc_r+0x48>
 8007360:	6025      	str	r5, [r4, #0]
 8007362:	e7d9      	b.n	8007318 <_malloc_r+0x64>
 8007364:	bd70      	pop	{r4, r5, r6, pc}
 8007366:	bf00      	nop
 8007368:	20003f2c 	.word	0x20003f2c
 800736c:	20003f30 	.word	0x20003f30

08007370 <_sbrk_r>:
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	4c06      	ldr	r4, [pc, #24]	; (800738c <_sbrk_r+0x1c>)
 8007374:	2300      	movs	r3, #0
 8007376:	4605      	mov	r5, r0
 8007378:	4608      	mov	r0, r1
 800737a:	6023      	str	r3, [r4, #0]
 800737c:	f000 f80a 	bl	8007394 <_sbrk>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d102      	bne.n	800738a <_sbrk_r+0x1a>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	b103      	cbz	r3, 800738a <_sbrk_r+0x1a>
 8007388:	602b      	str	r3, [r5, #0]
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	20005790 	.word	0x20005790

08007390 <__malloc_lock>:
 8007390:	4770      	bx	lr

08007392 <__malloc_unlock>:
 8007392:	4770      	bx	lr

08007394 <_sbrk>:
 8007394:	4b04      	ldr	r3, [pc, #16]	; (80073a8 <_sbrk+0x14>)
 8007396:	6819      	ldr	r1, [r3, #0]
 8007398:	4602      	mov	r2, r0
 800739a:	b909      	cbnz	r1, 80073a0 <_sbrk+0xc>
 800739c:	4903      	ldr	r1, [pc, #12]	; (80073ac <_sbrk+0x18>)
 800739e:	6019      	str	r1, [r3, #0]
 80073a0:	6818      	ldr	r0, [r3, #0]
 80073a2:	4402      	add	r2, r0
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	4770      	bx	lr
 80073a8:	20003f34 	.word	0x20003f34
 80073ac:	20005794 	.word	0x20005794

080073b0 <_init>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	bf00      	nop
 80073b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b6:	bc08      	pop	{r3}
 80073b8:	469e      	mov	lr, r3
 80073ba:	4770      	bx	lr

080073bc <_fini>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	bf00      	nop
 80073c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c2:	bc08      	pop	{r3}
 80073c4:	469e      	mov	lr, r3
 80073c6:	4770      	bx	lr
