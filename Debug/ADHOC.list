
ADHOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  08010dc8  08010dc8  00020dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080110cc  080110cc  000210cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080110d4  080110d4  000210d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080110d8  080110d8  000210d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  20000000  080110dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005a2c  200002c8  080113a4  000302c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20005cf4  080113a4  00035cf4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003439a  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000063d1  00000000  00000000  00064692  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001dc8  00000000  00000000  0006aa68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001bc0  00000000  00000000  0006c830  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f5d8  00000000  00000000  0006e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000a67d  00000000  00000000  0007d9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00088045  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007e6c  00000000  00000000  000880c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010db0 	.word	0x08010db0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	08010db0 	.word	0x08010db0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000504:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000528:	2003      	movs	r0, #3
 800052a:	f000 f917 	bl	800075c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052e:	2000      	movs	r0, #0
 8000530:	f00f fd62 	bl	800fff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000534:	f00f fd0e 	bl	800ff54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_IncTick+0x20>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_IncTick+0x24>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4413      	add	r3, r2
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_IncTick+0x24>)
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000000 	.word	0x20000000
 8000568:	200045fc 	.word	0x200045fc

0800056c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return uwTick;
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <HAL_GetTick+0x14>)
 8000572:	681b      	ldr	r3, [r3, #0]
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	200045fc 	.word	0x200045fc

08000584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800058c:	f7ff ffee 	bl	800056c <HAL_GetTick>
 8000590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800059c:	d005      	beq.n	80005aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_Delay+0x40>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4413      	add	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005aa:	bf00      	nop
 80005ac:	f7ff ffde 	bl	800056c <HAL_GetTick>
 80005b0:	4602      	mov	r2, r0
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	1ad2      	subs	r2, r2, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d3f7      	bcc.n	80005ac <HAL_Delay+0x28>
  {
  }
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000000 	.word	0x20000000

080005c8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <NVIC_SetPriorityGrouping+0x44>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fa:	4a04      	ldr	r2, [pc, #16]	; (800060c <NVIC_SetPriorityGrouping+0x44>)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <NVIC_GetPriorityGrouping+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	f003 0307 	and.w	r3, r3, #7
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000636:	4909      	ldr	r1, [pc, #36]	; (800065c <NVIC_EnableIRQ+0x30>)
 8000638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063c:	095b      	lsrs	r3, r3, #5
 800063e:	79fa      	ldrb	r2, [r7, #7]
 8000640:	f002 021f 	and.w	r2, r2, #31
 8000644:	2001      	movs	r0, #1
 8000646:	fa00 f202 	lsl.w	r2, r0, r2
 800064a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000e100 	.word	0xe000e100

08000660 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800066c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	da0b      	bge.n	800068c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	490d      	ldr	r1, [pc, #52]	; (80006ac <NVIC_SetPriority+0x4c>)
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 030f 	and.w	r3, r3, #15
 800067c:	3b04      	subs	r3, #4
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	0112      	lsls	r2, r2, #4
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440b      	add	r3, r1
 8000688:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800068a:	e009      	b.n	80006a0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	4908      	ldr	r1, [pc, #32]	; (80006b0 <NVIC_SetPriority+0x50>)
 800068e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	b2d2      	uxtb	r2, r2
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b089      	sub	sp, #36	; 0x24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	f1c3 0307 	rsb	r3, r3, #7
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	bf28      	it	cs
 80006d2:	2304      	movcs	r3, #4
 80006d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3304      	adds	r3, #4
 80006da:	2b06      	cmp	r3, #6
 80006dc:	d902      	bls.n	80006e4 <NVIC_EncodePriority+0x30>
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3b03      	subs	r3, #3
 80006e2:	e000      	b.n	80006e6 <NVIC_EncodePriority+0x32>
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	2201      	movs	r2, #1
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	1e5a      	subs	r2, r3, #1
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	401a      	ands	r2, r3
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fa:	2101      	movs	r1, #1
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000702:	1e59      	subs	r1, r3, #1
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	4313      	orrs	r3, r2
         );
}
 800070a:	4618      	mov	r0, r3
 800070c:	3724      	adds	r7, #36	; 0x24
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000728:	d301      	bcc.n	800072e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800072a:	2301      	movs	r3, #1
 800072c:	e00f      	b.n	800074e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <SysTick_Config+0x40>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000736:	210f      	movs	r1, #15
 8000738:	f04f 30ff 	mov.w	r0, #4294967295
 800073c:	f7ff ff90 	bl	8000660 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <SysTick_Config+0x40>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <SysTick_Config+0x40>)
 8000748:	2207      	movs	r2, #7
 800074a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	e000e010 	.word	0xe000e010

0800075c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff ff2f 	bl	80005c8 <NVIC_SetPriorityGrouping>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000772:	b580      	push	{r7, lr}
 8000774:	b086      	sub	sp, #24
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	60b9      	str	r1, [r7, #8]
 800077c:	607a      	str	r2, [r7, #4]
 800077e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000784:	f7ff ff44 	bl	8000610 <NVIC_GetPriorityGrouping>
 8000788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	68b9      	ldr	r1, [r7, #8]
 800078e:	6978      	ldr	r0, [r7, #20]
 8000790:	f7ff ff90 	bl	80006b4 <NVIC_EncodePriority>
 8000794:	4602      	mov	r2, r0
 8000796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff5f 	bl	8000660 <NVIC_SetPriority>
}
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff37 	bl	800062c <NVIC_EnableIRQ>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ffa2 	bl	8000718 <SysTick_Config>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d106      	bne.n	80007fc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007ee:	4a09      	ldr	r2, [pc, #36]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80007fa:	e005      	b.n	8000808 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007fc:	4a05      	ldr	r2, [pc, #20]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f023 0304 	bic.w	r3, r3, #4
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	b480      	push	{r7}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
 8000832:	e159      	b.n	8000ae8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000834:	2201      	movs	r2, #1
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	429a      	cmp	r2, r3
 800084e:	f040 8148 	bne.w	8000ae2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d003      	beq.n	8000862 <HAL_GPIO_Init+0x4a>
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2b12      	cmp	r3, #18
 8000860:	d123      	bne.n	80008aa <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	08da      	lsrs	r2, r3, #3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3208      	adds	r2, #8
 800086a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800086e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	220f      	movs	r2, #15
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43db      	mvns	r3, r3
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	4013      	ands	r3, r2
 8000884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	691a      	ldr	r2, [r3, #16]
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	f003 0307 	and.w	r3, r3, #7
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	4313      	orrs	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	08da      	lsrs	r2, r3, #3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3208      	adds	r2, #8
 80008a4:	69b9      	ldr	r1, [r7, #24]
 80008a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2203      	movs	r2, #3
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4013      	ands	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 0203 	and.w	r2, r3, #3
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d00b      	beq.n	80008fe <HAL_GPIO_Init+0xe6>
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d007      	beq.n	80008fe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f2:	2b11      	cmp	r3, #17
 80008f4:	d003      	beq.n	80008fe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b12      	cmp	r3, #18
 80008fc:	d130      	bne.n	8000960 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	2203      	movs	r2, #3
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4013      	ands	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	68da      	ldr	r2, [r3, #12]
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	4313      	orrs	r3, r2
 8000926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	69ba      	ldr	r2, [r7, #24]
 800092c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000934:	2201      	movs	r2, #1
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	4013      	ands	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	091b      	lsrs	r3, r3, #4
 800094a:	f003 0201 	and.w	r2, r3, #1
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4313      	orrs	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	2203      	movs	r2, #3
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	4013      	ands	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	689a      	ldr	r2, [r3, #8]
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	4313      	orrs	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 80a2 	beq.w	8000ae2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4a56      	ldr	r2, [pc, #344]	; (8000afc <HAL_GPIO_Init+0x2e4>)
 80009a4:	4b55      	ldr	r3, [pc, #340]	; (8000afc <HAL_GPIO_Init+0x2e4>)
 80009a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b53      	ldr	r3, [pc, #332]	; (8000afc <HAL_GPIO_Init+0x2e4>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ba:	4a51      	ldr	r2, [pc, #324]	; (8000b00 <HAL_GPIO_Init+0x2e8>)
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	089b      	lsrs	r3, r3, #2
 80009c0:	3302      	adds	r3, #2
 80009c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f003 0303 	and.w	r3, r3, #3
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	220f      	movs	r2, #15
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4013      	ands	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a48      	ldr	r2, [pc, #288]	; (8000b04 <HAL_GPIO_Init+0x2ec>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d019      	beq.n	8000a1a <HAL_GPIO_Init+0x202>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a47      	ldr	r2, [pc, #284]	; (8000b08 <HAL_GPIO_Init+0x2f0>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d013      	beq.n	8000a16 <HAL_GPIO_Init+0x1fe>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a46      	ldr	r2, [pc, #280]	; (8000b0c <HAL_GPIO_Init+0x2f4>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00d      	beq.n	8000a12 <HAL_GPIO_Init+0x1fa>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a45      	ldr	r2, [pc, #276]	; (8000b10 <HAL_GPIO_Init+0x2f8>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d007      	beq.n	8000a0e <HAL_GPIO_Init+0x1f6>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a44      	ldr	r2, [pc, #272]	; (8000b14 <HAL_GPIO_Init+0x2fc>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d101      	bne.n	8000a0a <HAL_GPIO_Init+0x1f2>
 8000a06:	2304      	movs	r3, #4
 8000a08:	e008      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	e006      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a0e:	2303      	movs	r3, #3
 8000a10:	e004      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e002      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a16:	2301      	movs	r3, #1
 8000a18:	e000      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	69fa      	ldr	r2, [r7, #28]
 8000a1e:	f002 0203 	and.w	r2, r2, #3
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	4093      	lsls	r3, r2
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a2c:	4934      	ldr	r1, [pc, #208]	; (8000b00 <HAL_GPIO_Init+0x2e8>)
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a3a:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a5e:	4a2e      	ldr	r2, [pc, #184]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a64:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4013      	ands	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a88:	4a23      	ldr	r2, [pc, #140]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a8e:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ab2:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000adc:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	61fb      	str	r3, [r7, #28]
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	2b0f      	cmp	r3, #15
 8000aec:	f67f aea2 	bls.w	8000834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000af0:	bf00      	nop
 8000af2:	3724      	adds	r7, #36	; 0x24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40013800 	.word	0x40013800
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020400 	.word	0x40020400
 8000b0c:	40020800 	.word	0x40020800
 8000b10:	40020c00 	.word	0x40020c00
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40013c00 	.word	0x40013c00

08000b1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1e:	b08f      	sub	sp, #60	; 0x3c
 8000b20:	af0a      	add	r7, sp, #40	; 0x28
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e0f7      	b.n	8000d22 <HAL_PCD_Init+0x206>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2203      	movs	r2, #3
 8000b36:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f00f fb34 	bl	80101a8 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 ff69 	bl	8002a1c <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	687e      	ldr	r6, [r7, #4]
 8000b52:	466d      	mov	r5, sp
 8000b54:	f106 0410 	add.w	r4, r6, #16
 8000b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b64:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b68:	1d33      	adds	r3, r6, #4
 8000b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b6c:	6838      	ldr	r0, [r7, #0]
 8000b6e:	f001 fef3 	bl	8002958 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 ff60 	bl	8002a3e <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	e04c      	b.n	8000c1e <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	1a9b      	subs	r3, r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	440b      	add	r3, r1
 8000b92:	3339      	adds	r3, #57	; 0x39
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	b2d8      	uxtb	r0, r3
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	1a9b      	subs	r3, r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	440b      	add	r3, r1
 8000baa:	3338      	adds	r3, #56	; 0x38
 8000bac:	4602      	mov	r2, r0
 8000bae:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	b298      	uxth	r0, r3
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	1a9b      	subs	r3, r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	333e      	adds	r3, #62	; 0x3e
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	1a9b      	subs	r3, r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	333b      	adds	r3, #59	; 0x3b
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket = 0U;
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4613      	mov	r3, r2
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	1a9b      	subs	r3, r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	440b      	add	r3, r1
 8000bea:	3340      	adds	r3, #64	; 0x40
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	1a9b      	subs	r3, r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	3344      	adds	r3, #68	; 0x44
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	1a9b      	subs	r3, r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	440b      	add	r3, r1
 8000c12:	334c      	adds	r3, #76	; 0x4c
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < 15U; i++)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2b0e      	cmp	r3, #14
 8000c22:	d9af      	bls.n	8000b84 <HAL_PCD_Init+0x68>
 }
 
 for (i = 0U; i < 15U; i++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	e05a      	b.n	8000ce0 <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	1a9b      	subs	r3, r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	440b      	add	r3, r1
 8000c38:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	b2d8      	uxtb	r0, r3
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	1a9b      	subs	r3, r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	440b      	add	r3, r1
 8000c52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000c56:	4602      	mov	r2, r0
 8000c58:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	b298      	uxth	r0, r3
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	4613      	mov	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	1a9b      	subs	r3, r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	333e      	adds	r3, #62	; 0x3e
 8000c6e:	4602      	mov	r2, r0
 8000c70:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	4613      	mov	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	1a9b      	subs	r3, r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	440b      	add	r3, r1
 8000c96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	1a9b      	subs	r3, r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	440b      	add	r3, r1
 8000cac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	1a9b      	subs	r3, r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	3340      	adds	r3, #64	; 0x40
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]
 for (i = 0U; i < 15U; i++)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2b0e      	cmp	r3, #14
 8000ce4:	d9a1      	bls.n	8000c2a <HAL_PCD_Init+0x10e>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	687e      	ldr	r6, [r7, #4]
 8000cee:	466d      	mov	r5, sp
 8000cf0:	f106 0410 	add.w	r4, r6, #16
 8000cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d00:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d04:	1d33      	adds	r3, r6, #4
 8000d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d08:	6838      	ldr	r0, [r7, #0]
 8000d0a:	f001 febf 	bl	8002a8c <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f002 fee0 	bl	8003ae0 <USB_DevDisconnect>
 return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d2a <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d101      	bne.n	8000d40 <HAL_PCD_Start+0x16>
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	e012      	b.n	8000d66 <HAL_PCD_Start+0x3c>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2201      	movs	r2, #1
 8000d44:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 feb0 	bl	8003ab2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 fe4f 	bl	80029fa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	623b      	str	r3, [r7, #32]
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
 8000d96:	4b7c      	ldr	r3, [pc, #496]	; (8000f88 <HAL_PCD_IRQHandler+0x218>)
 8000d98:	613b      	str	r3, [r7, #16]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 ff40 	bl	8003c24 <USB_GetMode>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8468 	bne.w	800167c <HAL_PCD_IRQHandler+0x90c>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f002 feac 	bl	8003b0e <USB_ReadInterrupts>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 845e 	beq.w	800167a <HAL_PCD_IRQHandler+0x90a>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fea3 	bl	8003b0e <USB_ReadInterrupts>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d107      	bne.n	8000de2 <HAL_PCD_IRQHandler+0x72>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	6952      	ldr	r2, [r2, #20]
 8000ddc:	f002 0202 	and.w	r2, r2, #2
 8000de0:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 fe91 	bl	8003b0e <USB_ReadInterrupts>
 8000dec:	4603      	mov	r3, r0
 8000dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000df2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000df6:	f040 80b2 	bne.w	8000f5e <HAL_PCD_IRQHandler+0x1ee>
    {
      epnum = 0U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f002 fe98 	bl	8003b38 <USB_ReadDevAllOutEpInterrupt>
 8000e08:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 8000e0a:	e0a4      	b.n	8000f56 <HAL_PCD_IRQHandler+0x1e6>
      {
        if (ep_intr & 0x1U)
 8000e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 8099 	beq.w	8000f4a <HAL_PCD_IRQHandler+0x1da>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	4611      	mov	r1, r2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 feb8 	bl	8003b98 <USB_ReadDevOutEPInterrupt>
 8000e28:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d06b      	beq.n	8000f0c <HAL_PCD_IRQHandler+0x19c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	015a      	lsls	r2, r3, #5
 8000e38:	6a3b      	ldr	r3, [r7, #32]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000e40:	461a      	mov	r2, r3
 8000e42:	2301      	movs	r3, #1
 8000e44:	6093      	str	r3, [r2, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d13c      	bne.n	8000ec8 <HAL_PCD_IRQHandler+0x158>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e52:	4613      	mov	r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	1a9b      	subs	r3, r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	0159      	lsls	r1, r3, #5
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	440b      	add	r3, r1
 8000e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e74:	1ad1      	subs	r1, r2, r3
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	1a9b      	subs	r3, r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4403      	add	r3, r0
 8000e84:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000e88:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e8e:	4613      	mov	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	440b      	add	r3, r1
 8000e98:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000e9c:	6819      	ldr	r1, [r3, #0]
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	1a9b      	subs	r3, r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4403      	add	r3, r0
 8000eac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4419      	add	r1, r3
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb8:	4613      	mov	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	1a9b      	subs	r3, r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4403      	add	r3, r0
 8000ec2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000ec6:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4619      	mov	r1, r3
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f00f f9c8 	bl	8010264 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d117      	bne.n	8000f0c <HAL_PCD_IRQHandler+0x19c>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d114      	bne.n	8000f0c <HAL_PCD_IRQHandler+0x19c>
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	1a9b      	subs	r3, r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d108      	bne.n	8000f0c <HAL_PCD_IRQHandler+0x19c>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8000f04:	461a      	mov	r2, r3
 8000f06:	2101      	movs	r1, #1
 8000f08:	f002 fed0 	bl	8003cac <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00b      	beq.n	8000f2e <HAL_PCD_IRQHandler+0x1be>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f00f f992 	bl	8010240 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	015a      	lsls	r2, r3, #5
 8000f20:	6a3b      	ldr	r3, [r7, #32]
 8000f22:	4413      	add	r3, r2
 8000f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f28:	461a      	mov	r2, r3
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d008      	beq.n	8000f4a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	015a      	lsls	r2, r3, #5
 8000f3c:	6a3b      	ldr	r3, [r7, #32]
 8000f3e:	4413      	add	r3, r2
 8000f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f44:	461a      	mov	r2, r3
 8000f46:	2310      	movs	r3, #16
 8000f48:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f52:	085b      	lsrs	r3, r3, #1
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8000f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f47f af57 	bne.w	8000e0c <HAL_PCD_IRQHandler+0x9c>
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 fdd3 	bl	8003b0e <USB_ReadInterrupts>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000f72:	f040 80c5 	bne.w	8001100 <HAL_PCD_IRQHandler+0x390>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 fdf4 	bl	8003b68 <USB_ReadDevAllInEpInterrupt>
 8000f80:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 8000f86:	e0b7      	b.n	80010f8 <HAL_PCD_IRQHandler+0x388>
 8000f88:	0aba9500 	.word	0x0aba9500
      {
        if (ep_intr & 0x1U) /* In ITR */
 8000f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 80aa 	beq.w	80010ec <HAL_PCD_IRQHandler+0x37c>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 fe14 	bl	8003bd0 <USB_ReadDevInEPInterrupt>
 8000fa8:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d05a      	beq.n	800106a <HAL_PCD_IRQHandler+0x2fa>
          {
            fifoemptymsk = 0x1U << epnum;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
 8000fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	6a3b      	ldr	r3, [r7, #32]
 8000fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	015a      	lsls	r2, r3, #5
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	4413      	add	r3, r2
 8000fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d11b      	bne.n	8001028 <HAL_PCD_IRQHandler+0x2b8>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	1a9b      	subs	r3, r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3344      	adds	r3, #68	; 0x44
 8001000:	6819      	ldr	r1, [r3, #0]
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001006:	4613      	mov	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	1a9b      	subs	r3, r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4403      	add	r3, r0
 8001010:	3340      	adds	r3, #64	; 0x40
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4419      	add	r1, r3
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800101a:	4613      	mov	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	1a9b      	subs	r3, r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4403      	add	r3, r0
 8001024:	3344      	adds	r3, #68	; 0x44
 8001026:	6019      	str	r1, [r3, #0]
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4619      	mov	r1, r3
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f00f f933 	bl	801029a <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d116      	bne.n	800106a <HAL_PCD_IRQHandler+0x2fa>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	2b00      	cmp	r3, #0
 8001040:	d113      	bne.n	800106a <HAL_PCD_IRQHandler+0x2fa>
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001046:	4613      	mov	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	1a9b      	subs	r3, r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	440b      	add	r3, r1
 8001050:	334c      	adds	r3, #76	; 0x4c
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d108      	bne.n	800106a <HAL_PCD_IRQHandler+0x2fa>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001062:	461a      	mov	r2, r3
 8001064:	2101      	movs	r1, #1
 8001066:	f002 fe21 	bl	8003cac <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b00      	cmp	r3, #0
 8001072:	d008      	beq.n	8001086 <HAL_PCD_IRQHandler+0x316>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	015a      	lsls	r2, r3, #5
 8001078:	6a3b      	ldr	r3, [r7, #32]
 800107a:	4413      	add	r3, r2
 800107c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001080:	461a      	mov	r2, r3
 8001082:	2308      	movs	r3, #8
 8001084:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	2b00      	cmp	r3, #0
 800108e:	d008      	beq.n	80010a2 <HAL_PCD_IRQHandler+0x332>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	015a      	lsls	r2, r3, #5
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	4413      	add	r3, r2
 8001098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800109c:	461a      	mov	r2, r3
 800109e:	2310      	movs	r3, #16
 80010a0:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d008      	beq.n	80010be <HAL_PCD_IRQHandler+0x34e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	015a      	lsls	r2, r3, #5
 80010b0:	6a3b      	ldr	r3, [r7, #32]
 80010b2:	4413      	add	r3, r2
 80010b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010b8:	461a      	mov	r2, r3
 80010ba:	2340      	movs	r3, #64	; 0x40
 80010bc:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d008      	beq.n	80010da <HAL_PCD_IRQHandler+0x36a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	015a      	lsls	r2, r3, #5
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	4413      	add	r3, r2
 80010d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010d4:	461a      	mov	r2, r3
 80010d6:	2302      	movs	r3, #2
 80010d8:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_PCD_IRQHandler+0x37c>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 80010e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 fcf1 	bl	8001ace <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	3301      	adds	r3, #1
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80010f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f4:	085b      	lsrs	r3, r3, #1
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 80010f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f47f af46 	bne.w	8000f8c <HAL_PCD_IRQHandler+0x21c>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fd02 	bl	8003b0e <USB_ReadInterrupts>
 800110a:	4603      	mov	r3, r0
 800110c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001110:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001114:	d115      	bne.n	8001142 <HAL_PCD_IRQHandler+0x3d2>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001116:	6a3b      	ldr	r3, [r7, #32]
 8001118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800111c:	461a      	mov	r2, r3
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f023 0301 	bic.w	r3, r3, #1
 800112a:	6053      	str	r3, [r2, #4]
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f00f f92d 	bl	801038c <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	6812      	ldr	r2, [r2, #0]
 800113a:	6952      	ldr	r2, [r2, #20]
 800113c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001140:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f002 fce1 	bl	8003b0e <USB_ReadInterrupts>
 800114c:	4603      	mov	r3, r0
 800114e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001156:	d112      	bne.n	800117e <HAL_PCD_IRQHandler+0x40e>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b01      	cmp	r3, #1
 8001166:	d102      	bne.n	800116e <HAL_PCD_IRQHandler+0x3fe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f00f f8e7 	bl	801033c <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	6812      	ldr	r2, [r2, #0]
 8001176:	6952      	ldr	r2, [r2, #20]
 8001178:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800117c:	615a      	str	r2, [r3, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f002 fcc3 	bl	8003b0e <USB_ReadInterrupts>
 8001188:	4603      	mov	r3, r0
 800118a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800118e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001192:	f040 8091 	bne.w	80012b8 <HAL_PCD_IRQHandler+0x548>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800119c:	461a      	mov	r2, r3
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f023 0301 	bic.w	r3, r3, #1
 80011aa:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2110      	movs	r1, #16
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 fd9c 	bl	8002cf0 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011bc:	e014      	b.n	80011e8 <HAL_PCD_IRQHandler+0x478>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 80011be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c0:	015a      	lsls	r2, r3, #5
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	4413      	add	r3, r2
 80011c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011ca:	461a      	mov	r2, r3
 80011cc:	23ff      	movs	r3, #255	; 0xff
 80011ce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 80011d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d2:	015a      	lsls	r2, r3, #5
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	4413      	add	r3, r2
 80011d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011dc:	461a      	mov	r2, r3
 80011de:	23ff      	movs	r3, #255	; 0xff
 80011e0:	6093      	str	r3, [r2, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e4:	3301      	adds	r3, #1
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d8e5      	bhi.n	80011be <HAL_PCD_IRQHandler+0x44e>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011f8:	461a      	mov	r2, r3
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001206:	461a      	mov	r2, r3
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001214:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	2b00      	cmp	r3, #0
 800121c:	d018      	beq.n	8001250 <HAL_PCD_IRQHandler+0x4e0>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001224:	461a      	mov	r2, r3
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800122c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001230:	f043 030b 	orr.w	r3, r3, #11
 8001234:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800123e:	461a      	mov	r2, r3
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001248:	f043 030b 	orr.w	r3, r3, #11
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	e015      	b.n	800127c <HAL_PCD_IRQHandler+0x50c>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001256:	461a      	mov	r2, r3
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f043 030b 	orr.w	r3, r3, #11
 8001264:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800126c:	461a      	mov	r2, r3
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	f043 030b 	orr.w	r3, r3, #11
 800127a:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001282:	461a      	mov	r2, r3
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001290:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	b2d9      	uxtb	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80012a2:	461a      	mov	r2, r3
 80012a4:	f002 fd02 	bl	8003cac <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	6952      	ldr	r2, [r2, #20]
 80012b2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80012b6:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 fc26 	bl	8003b0e <USB_ReadInterrupts>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012cc:	f040 80da 	bne.w	8001484 <HAL_PCD_IRQHandler+0x714>
    {
      USB_ActivateSetup(hpcd->Instance);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 fcb3 	bl	8003c40 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	68d2      	ldr	r2, [r2, #12]
 80012e4:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80012e8:	60da      	str	r2, [r3, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 fd5e 	bl	8002db0 <USB_GetDevSpeed>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10f      	bne.n	800131a <HAL_PCD_IRQHandler+0x5aa>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001306:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	68d2      	ldr	r2, [r2, #12]
 8001312:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	e0a9      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2203      	movs	r2, #3
 800131e:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2240      	movs	r2, #64	; 0x40
 8001324:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8001326:	f001 f8ad 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 800132a:	6138      	str	r0, [r7, #16]
        
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4a7b      	ldr	r2, [pc, #492]	; (800151c <HAL_PCD_IRQHandler+0x7ac>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d90c      	bls.n	800134e <HAL_PCD_IRQHandler+0x5de>
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4a7a      	ldr	r2, [pc, #488]	; (8001520 <HAL_PCD_IRQHandler+0x7b0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d808      	bhi.n	800134e <HAL_PCD_IRQHandler+0x5de>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	68d2      	ldr	r2, [r2, #12]
 8001346:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	e08f      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4a73      	ldr	r2, [pc, #460]	; (8001520 <HAL_PCD_IRQHandler+0x7b0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d90c      	bls.n	8001370 <HAL_PCD_IRQHandler+0x600>
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4a72      	ldr	r2, [pc, #456]	; (8001524 <HAL_PCD_IRQHandler+0x7b4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d808      	bhi.n	8001370 <HAL_PCD_IRQHandler+0x600>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	68d2      	ldr	r2, [r2, #12]
 8001368:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	e07e      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4a6c      	ldr	r2, [pc, #432]	; (8001524 <HAL_PCD_IRQHandler+0x7b4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d90c      	bls.n	8001392 <HAL_PCD_IRQHandler+0x622>
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4a6b      	ldr	r2, [pc, #428]	; (8001528 <HAL_PCD_IRQHandler+0x7b8>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d808      	bhi.n	8001392 <HAL_PCD_IRQHandler+0x622>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	68d2      	ldr	r2, [r2, #12]
 800138a:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	e06d      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4a64      	ldr	r2, [pc, #400]	; (8001528 <HAL_PCD_IRQHandler+0x7b8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d90c      	bls.n	80013b4 <HAL_PCD_IRQHandler+0x644>
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4a63      	ldr	r2, [pc, #396]	; (800152c <HAL_PCD_IRQHandler+0x7bc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d808      	bhi.n	80013b4 <HAL_PCD_IRQHandler+0x644>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	68d2      	ldr	r2, [r2, #12]
 80013ac:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	e05c      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4a5d      	ldr	r2, [pc, #372]	; (800152c <HAL_PCD_IRQHandler+0x7bc>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d90c      	bls.n	80013d6 <HAL_PCD_IRQHandler+0x666>
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4a5c      	ldr	r2, [pc, #368]	; (8001530 <HAL_PCD_IRQHandler+0x7c0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d808      	bhi.n	80013d6 <HAL_PCD_IRQHandler+0x666>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	68d2      	ldr	r2, [r2, #12]
 80013ce:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	e04b      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4a55      	ldr	r2, [pc, #340]	; (8001530 <HAL_PCD_IRQHandler+0x7c0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d90c      	bls.n	80013f8 <HAL_PCD_IRQHandler+0x688>
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4a54      	ldr	r2, [pc, #336]	; (8001534 <HAL_PCD_IRQHandler+0x7c4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d808      	bhi.n	80013f8 <HAL_PCD_IRQHandler+0x688>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	68d2      	ldr	r2, [r2, #12]
 80013f0:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	e03a      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4a4e      	ldr	r2, [pc, #312]	; (8001534 <HAL_PCD_IRQHandler+0x7c4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d90c      	bls.n	800141a <HAL_PCD_IRQHandler+0x6aa>
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4a4d      	ldr	r2, [pc, #308]	; (8001538 <HAL_PCD_IRQHandler+0x7c8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d808      	bhi.n	800141a <HAL_PCD_IRQHandler+0x6aa>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	68d2      	ldr	r2, [r2, #12]
 8001412:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	e029      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4a46      	ldr	r2, [pc, #280]	; (8001538 <HAL_PCD_IRQHandler+0x7c8>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d90c      	bls.n	800143c <HAL_PCD_IRQHandler+0x6cc>
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4a45      	ldr	r2, [pc, #276]	; (800153c <HAL_PCD_IRQHandler+0x7cc>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d808      	bhi.n	800143c <HAL_PCD_IRQHandler+0x6cc>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	68d2      	ldr	r2, [r2, #12]
 8001434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	e018      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4a3f      	ldr	r2, [pc, #252]	; (800153c <HAL_PCD_IRQHandler+0x7cc>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d90c      	bls.n	800145e <HAL_PCD_IRQHandler+0x6ee>
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4a3e      	ldr	r2, [pc, #248]	; (8001540 <HAL_PCD_IRQHandler+0x7d0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d808      	bhi.n	800145e <HAL_PCD_IRQHandler+0x6ee>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	68d2      	ldr	r2, [r2, #12]
 8001456:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	e007      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	68d2      	ldr	r2, [r2, #12]
 8001468:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 800146c:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f00e ff3b 	bl	80102ea <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	6952      	ldr	r2, [r2, #20]
 800147e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001482:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fb40 	bl	8003b0e <USB_ReadInterrupts>
 800148e:	4603      	mov	r3, r0
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b10      	cmp	r3, #16
 8001496:	d174      	bne.n	8001582 <HAL_PCD_IRQHandler+0x812>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	6992      	ldr	r2, [r2, #24]
 80014a2:	f022 0210 	bic.w	r2, r2, #16
 80014a6:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f003 020f 	and.w	r2, r3, #15
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	0c5b      	lsrs	r3, r3, #17
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d138      	bne.n	8001544 <HAL_PCD_IRQHandler+0x7d4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d049      	beq.n	8001572 <HAL_PCD_IRQHandler+0x802>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	68d9      	ldr	r1, [r3, #12]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	6a38      	ldr	r0, [r7, #32]
 80014f2:	f002 f9b3 	bl	800385c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001502:	441a      	add	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	699a      	ldr	r2, [r3, #24]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	091b      	lsrs	r3, r3, #4
 8001510:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001514:	441a      	add	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	619a      	str	r2, [r3, #24]
 800151a:	e02a      	b.n	8001572 <HAL_PCD_IRQHandler+0x802>
 800151c:	00d8acbf 	.word	0x00d8acbf
 8001520:	00e4e1bf 	.word	0x00e4e1bf
 8001524:	00f423ff 	.word	0x00f423ff
 8001528:	0106737f 	.word	0x0106737f
 800152c:	011a499f 	.word	0x011a499f
 8001530:	01312cff 	.word	0x01312cff
 8001534:	014ca43f 	.word	0x014ca43f
 8001538:	016e35ff 	.word	0x016e35ff
 800153c:	01a6ab1f 	.word	0x01a6ab1f
 8001540:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	0c5b      	lsrs	r3, r3, #17
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	2b06      	cmp	r3, #6
 800154e:	d110      	bne.n	8001572 <HAL_PCD_IRQHandler+0x802>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001556:	2208      	movs	r2, #8
 8001558:	4619      	mov	r1, r3
 800155a:	6a38      	ldr	r0, [r7, #32]
 800155c:	f002 f97e 	bl	800385c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	699a      	ldr	r2, [r3, #24]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800156c:	441a      	add	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6812      	ldr	r2, [r2, #0]
 800157a:	6992      	ldr	r2, [r2, #24]
 800157c:	f042 0210 	orr.w	r2, r2, #16
 8001580:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f002 fac1 	bl	8003b0e <USB_ReadInterrupts>
 800158c:	4603      	mov	r3, r0
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b08      	cmp	r3, #8
 8001594:	d10a      	bne.n	80015ac <HAL_PCD_IRQHandler+0x83c>
    {
      HAL_PCD_SOFCallback(hpcd);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f00e fe99 	bl	80102ce <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	6952      	ldr	r2, [r2, #20]
 80015a6:	f002 0208 	and.w	r2, r2, #8
 80015aa:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 faac 	bl	8003b0e <USB_ReadInterrupts>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015c0:	d10d      	bne.n	80015de <HAL_PCD_IRQHandler+0x86e>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4619      	mov	r1, r3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f00e feff 	bl	80103cc <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	6952      	ldr	r2, [r2, #20]
 80015d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80015dc:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 fa93 	bl	8003b0e <USB_ReadInterrupts>
 80015e8:	4603      	mov	r3, r0
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80015f2:	d10d      	bne.n	8001610 <HAL_PCD_IRQHandler+0x8a0>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4619      	mov	r1, r3
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f00e fed4 	bl	80103a8 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	6952      	ldr	r2, [r2, #20]
 800160a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800160e:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f002 fa7a 	bl	8003b0e <USB_ReadInterrupts>
 800161a:	4603      	mov	r3, r0
 800161c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001624:	d10a      	bne.n	800163c <HAL_PCD_IRQHandler+0x8cc>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f00e fee2 	bl	80103f0 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	6952      	ldr	r2, [r2, #20]
 8001636:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800163a:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f002 fa64 	bl	8003b0e <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b04      	cmp	r3, #4
 800164e:	d115      	bne.n	800167c <HAL_PCD_IRQHandler+0x90c>
    {
      temp = hpcd->Instance->GOTGINT;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <HAL_PCD_IRQHandler+0x8f8>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f00e fed2 	bl	801040c <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	6851      	ldr	r1, [r2, #4]
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	430a      	orrs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	e000      	b.n	800167c <HAL_PCD_IRQHandler+0x90c>
      return;
 800167a:	bf00      	nop
    }
  }
}
 800167c:	3730      	adds	r7, #48	; 0x30
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop

08001684 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_PCD_SetAddress+0x1a>
 800169a:	2302      	movs	r3, #2
 800169c:	e00f      	b.n	80016be <HAL_PCD_SetAddress+0x3a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f002 f9d9 	bl	8003a66 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	4608      	mov	r0, r1
 80016d0:	4611      	mov	r1, r2
 80016d2:	461a      	mov	r2, r3
 80016d4:	4603      	mov	r3, r0
 80016d6:	70fb      	strb	r3, [r7, #3]
 80016d8:	460b      	mov	r3, r1
 80016da:	803b      	strh	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80016e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da0b      	bge.n	8001704 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016f2:	4613      	mov	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	3338      	adds	r3, #56	; 0x38
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e00b      	b.n	800171c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800170a:	4613      	mov	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	1a9b      	subs	r3, r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001722:	b2da      	uxtb	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	09db      	lsrs	r3, r3, #7
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8001738:	883a      	ldrh	r2, [r7, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	78ba      	ldrb	r2, [r7, #2]
 8001742:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	785b      	ldrb	r3, [r3, #1]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d004      	beq.n	8001756 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b29a      	uxth	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8001756:	78bb      	ldrb	r3, [r7, #2]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d102      	bne.n	8001762 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	711a      	strb	r2, [r3, #4]
  }
  
  __HAL_LOCK(hpcd); 
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_PCD_EP_Open+0xaa>
 800176c:	2302      	movs	r3, #2
 800176e:	e00e      	b.n	800178e <HAL_PCD_EP_Open+0xc8>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68f9      	ldr	r1, [r7, #12]
 800177e:	4618      	mov	r0, r3
 8001780:	f001 fb4b 	bl	8002e1a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 800178c:	7afb      	ldrb	r3, [r7, #11]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80017a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da0b      	bge.n	80017c2 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017b0:	4613      	mov	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	3338      	adds	r3, #56	; 0x38
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	e00b      	b.n	80017da <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017c8:	4613      	mov	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80017e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	09db      	lsrs	r3, r3, #7
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_PCD_EP_Close+0x6e>
 8001800:	2302      	movs	r3, #2
 8001802:	e00e      	b.n	8001822 <HAL_PCD_EP_Close+0x8c>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68f9      	ldr	r1, [r7, #12]
 8001812:	4618      	mov	r0, r3
 8001814:	f001 fb8a 	bl	8002f2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	460b      	mov	r3, r1
 8001838:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800183a:	7afb      	ldrb	r3, [r7, #11]
 800183c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001840:	4613      	mov	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	1a9b      	subs	r3, r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2200      	movs	r2, #0
 8001868:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 800186a:	7afb      	ldrb	r3, [r7, #11]
 800186c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001870:	b2da      	uxtb	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d102      	bne.n	8001884 <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 8001884:	7afb      	ldrb	r3, [r7, #11]
 8001886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	6979      	ldr	r1, [r7, #20]
 800189c:	f001 fe4a 	bl	8003534 <USB_EP0StartXfer>
 80018a0:	e008      	b.n	80018b4 <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	6979      	ldr	r1, [r7, #20]
 80018b0:	f001 fbfe 	bl	80030b0 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	f003 020f 	and.w	r2, r3, #15
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	460b      	mov	r3, r1
 80018fe:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001900:	7afb      	ldrb	r3, [r7, #11]
 8001902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001906:	4613      	mov	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	3338      	adds	r3, #56	; 0x38
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2201      	movs	r2, #1
 800192c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 800192e:	7afb      	ldrb	r3, [r7, #11]
 8001930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001934:	b2da      	uxtb	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d102      	bne.n	8001948 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 8001948:	7afb      	ldrb	r3, [r7, #11]
 800194a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	6979      	ldr	r1, [r7, #20]
 8001960:	f001 fde8 	bl	8003534 <USB_EP0StartXfer>
 8001964:	e008      	b.n	8001978 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	6979      	ldr	r1, [r7, #20]
 8001974:	f001 fb9c 	bl	80030b0 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 800198e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001992:	2b00      	cmp	r3, #0
 8001994:	da0b      	bge.n	80019ae <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800199c:	4613      	mov	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	3338      	adds	r3, #56	; 0x38
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e009      	b.n	80019c2 <HAL_PCD_EP_SetStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	4413      	add	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2201      	movs	r2, #1
 80019c6:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80019d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	09db      	lsrs	r3, r3, #7
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_PCD_EP_SetStall+0x70>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e01e      	b.n	8001a30 <HAL_PCD_EP_SetStall+0xae>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 ff52 	bl	80038aa <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10a      	bne.n	8001a26 <HAL_PCD_EP_SetStall+0xa4>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	b2d9      	uxtb	r1, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001a20:	461a      	mov	r2, r3
 8001a22:	f002 f943 	bl	8003cac <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8001a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	da0b      	bge.n	8001a64 <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a52:	4613      	mov	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	3338      	adds	r3, #56	; 0x38
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	e009      	b.n	8001a78 <HAL_PCD_EP_ClrStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001a8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	09db      	lsrs	r3, r3, #7
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_PCD_EP_ClrStall+0x70>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e00e      	b.n	8001ac6 <HAL_PCD_EP_ClrStall+0x8e>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68f9      	ldr	r1, [r7, #12]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f001 ff68 	bl	800398c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b08a      	sub	sp, #40	; 0x28
 8001ad2:	af02      	add	r7, sp, #8
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	3338      	adds	r3, #56	; 0x38
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d202      	bcs.n	8001b14 <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3U) / 4U;
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	3303      	adds	r3, #3
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	61bb      	str	r3, [r7, #24]
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b1c:	e02b      	b.n	8001b76 <PCD_WriteEmptyTxFifo+0xa8>
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d202      	bcs.n	8001b3a <PCD_WriteEmptyTxFifo+0x6c>
    {
      len = ep->maxpacket;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3303      	adds	r3, #3
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	68d9      	ldr	r1, [r3, #12]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	b298      	uxth	r0, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	4603      	mov	r3, r0
 8001b58:	6978      	ldr	r0, [r7, #20]
 8001b5a:	f001 fe4a 	bl	80037f2 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	441a      	add	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	441a      	add	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	619a      	str	r2, [r3, #24]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	015a      	lsls	r2, r3, #5
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d909      	bls.n	8001ba0 <PCD_WriteEmptyTxFifo+0xd2>
          (ep->xfer_count < ep->xfer_len) &&
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	699a      	ldr	r2, [r3, #24]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	695b      	ldr	r3, [r3, #20]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d203      	bcs.n	8001ba0 <PCD_WriteEmptyTxFifo+0xd2>
            (ep->xfer_len != 0U))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	695b      	ldr	r3, [r3, #20]
          (ep->xfer_count < ep->xfer_len) &&
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1be      	bne.n	8001b1e <PCD_WriteEmptyTxFifo+0x50>
  }
  
  if(len <= 0U)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d110      	bne.n	8001bc8 <PCD_WriteEmptyTxFifo+0xfa>
  {
    fifoemptymsk = 0x1U << epnum;
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	70fb      	strb	r3, [r7, #3]
 8001bde:	4613      	mov	r3, r2
 8001be0:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d107      	bne.n	8001c08 <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	883a      	ldrh	r2, [r7, #0]
 8001bfe:	0411      	lsls	r1, r2, #16
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28
 8001c06:	e028      	b.n	8001c5a <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	0c1b      	lsrs	r3, r3, #16
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	4413      	add	r3, r2
 8001c14:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
 8001c1a:	e00d      	b.n	8001c38 <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	3340      	adds	r3, #64	; 0x40
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	0c1b      	lsrs	r3, r3, #16
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	4413      	add	r3, r2
 8001c30:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	3301      	adds	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	dbec      	blt.n	8001c1c <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6819      	ldr	r1, [r3, #0]
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	883a      	ldrh	r2, [r7, #0]
 8001c4c:	0410      	lsls	r0, r2, #16
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	4302      	orrs	r2, r0
 8001c52:	3340      	adds	r3, #64	; 0x40
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	887a      	ldrh	r2, [r7, #2]
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e22d      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d075      	beq.n	8001d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001caa:	4ba3      	ldr	r3, [pc, #652]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d00c      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb6:	4ba0      	ldr	r3, [pc, #640]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d112      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc2:	4b9d      	ldr	r3, [pc, #628]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cce:	d10b      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	4b99      	ldr	r3, [pc, #612]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d05b      	beq.n	8001d94 <HAL_RCC_OscConfig+0x108>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d157      	bne.n	8001d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e208      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf0:	d106      	bne.n	8001d00 <HAL_RCC_OscConfig+0x74>
 8001cf2:	4a91      	ldr	r2, [pc, #580]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	4b90      	ldr	r3, [pc, #576]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e01d      	b.n	8001d3c <HAL_RCC_OscConfig+0xb0>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x98>
 8001d0a:	4a8b      	ldr	r2, [pc, #556]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d0c:	4b8a      	ldr	r3, [pc, #552]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4a88      	ldr	r2, [pc, #544]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	4b87      	ldr	r3, [pc, #540]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e00b      	b.n	8001d3c <HAL_RCC_OscConfig+0xb0>
 8001d24:	4a84      	ldr	r2, [pc, #528]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d26:	4b84      	ldr	r3, [pc, #528]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4a81      	ldr	r2, [pc, #516]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d32:	4b81      	ldr	r3, [pc, #516]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7fe fc12 	bl	800056c <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7fe fc0e 	bl	800056c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1cd      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	4b76      	ldr	r3, [pc, #472]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0xc0>
 8001d6a:	e014      	b.n	8001d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7fe fbfe 	bl	800056c <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d74:	f7fe fbfa 	bl	800056c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e1b9      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d86:	4b6c      	ldr	r3, [pc, #432]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0xe8>
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d063      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001da2:	4b65      	ldr	r3, [pc, #404]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dae:	4b62      	ldr	r3, [pc, #392]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d11c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dba:	4b5f      	ldr	r3, [pc, #380]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d116      	bne.n	8001df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	4b5c      	ldr	r3, [pc, #368]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <HAL_RCC_OscConfig+0x152>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d001      	beq.n	8001dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e18d      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dde:	4956      	ldr	r1, [pc, #344]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	4b55      	ldr	r3, [pc, #340]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df2:	e03a      	b.n	8001e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d020      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfc:	4b4f      	ldr	r3, [pc, #316]	; (8001f3c <HAL_RCC_OscConfig+0x2b0>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e02:	f7fe fbb3 	bl	800056c <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e0a:	f7fe fbaf 	bl	800056c <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e16e      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1c:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	4943      	ldr	r1, [pc, #268]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001e2a:	4b43      	ldr	r3, [pc, #268]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
 8001e3c:	e015      	b.n	8001e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3e:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HAL_RCC_OscConfig+0x2b0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7fe fb92 	bl	800056c <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7fe fb8e 	bl	800056c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e14d      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5e:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d030      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d016      	beq.n	8001eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7e:	4b30      	ldr	r3, [pc, #192]	; (8001f40 <HAL_RCC_OscConfig+0x2b4>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7fe fb72 	bl	800056c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7fe fb6e 	bl	800056c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e12d      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x200>
 8001eaa:	e015      	b.n	8001ed8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eac:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_RCC_OscConfig+0x2b4>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7fe fb5b 	bl	800056c <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eba:	f7fe fb57 	bl	800056c <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e116      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f0      	bne.n	8001eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80a0 	beq.w	8002026 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10f      	bne.n	8001f16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f12:	2301      	movs	r3, #1
 8001f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_OscConfig+0x2b8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d121      	bne.n	8001f66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <HAL_RCC_OscConfig+0x2b8>)
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <HAL_RCC_OscConfig+0x2b8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2e:	f7fe fb1d 	bl	800056c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f34:	e011      	b.n	8001f5a <HAL_RCC_OscConfig+0x2ce>
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	42470000 	.word	0x42470000
 8001f40:	42470e80 	.word	0x42470e80
 8001f44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f48:	f7fe fb10 	bl	800056c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e0cf      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5a:	4b6a      	ldr	r3, [pc, #424]	; (8002104 <HAL_RCC_OscConfig+0x478>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d106      	bne.n	8001f7c <HAL_RCC_OscConfig+0x2f0>
 8001f6e:	4a66      	ldr	r2, [pc, #408]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001f70:	4b65      	ldr	r3, [pc, #404]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7a:	e01c      	b.n	8001fb6 <HAL_RCC_OscConfig+0x32a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d10c      	bne.n	8001f9e <HAL_RCC_OscConfig+0x312>
 8001f84:	4a60      	ldr	r2, [pc, #384]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001f86:	4b60      	ldr	r3, [pc, #384]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f90:	4a5d      	ldr	r2, [pc, #372]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001f92:	4b5d      	ldr	r3, [pc, #372]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9c:	e00b      	b.n	8001fb6 <HAL_RCC_OscConfig+0x32a>
 8001f9e:	4a5a      	ldr	r2, [pc, #360]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001fa0:	4b59      	ldr	r3, [pc, #356]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8001faa:	4a57      	ldr	r2, [pc, #348]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001fac:	4b56      	ldr	r3, [pc, #344]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d015      	beq.n	8001fea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbe:	f7fe fad5 	bl	800056c <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7fe fad1 	bl	800056c <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e08e      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fdc:	4b4a      	ldr	r3, [pc, #296]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ee      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x33a>
 8001fe8:	e014      	b.n	8002014 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7fe fabf 	bl	800056c <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7fe fabb 	bl	800056c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e078      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002008:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ee      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d105      	bne.n	8002026 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201a:	4a3b      	ldr	r2, [pc, #236]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 800201c:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d064      	beq.n	80020f8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800202e:	4b36      	ldr	r3, [pc, #216]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b08      	cmp	r3, #8
 8002038:	d05c      	beq.n	80020f4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d141      	bne.n	80020c6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002042:	4b32      	ldr	r3, [pc, #200]	; (800210c <HAL_RCC_OscConfig+0x480>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7fe fa90 	bl	800056c <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002050:	f7fe fa8c 	bl	800056c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e04b      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002062:	4b29      	ldr	r3, [pc, #164]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800206e:	4926      	ldr	r1, [pc, #152]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69da      	ldr	r2, [r3, #28]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	019b      	lsls	r3, r3, #6
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002086:	085b      	lsrs	r3, r3, #1
 8002088:	3b01      	subs	r3, #1
 800208a:	041b      	lsls	r3, r3, #16
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002092:	061b      	lsls	r3, r3, #24
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <HAL_RCC_OscConfig+0x480>)
 800209a:	2201      	movs	r2, #1
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7fe fa65 	bl	800056c <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a6:	f7fe fa61 	bl	800056c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e020      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x41a>
 80020c4:	e018      	b.n	80020f8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_RCC_OscConfig+0x480>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7fe fa4e 	bl	800056c <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d4:	f7fe fa4a 	bl	800056c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e009      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x448>
 80020f2:	e001      	b.n	80020f8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40007000 	.word	0x40007000
 8002108:	40023800 	.word	0x40023800
 800210c:	42470060 	.word	0x42470060

08002110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0ca      	b.n	80022ba <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002124:	4b67      	ldr	r3, [pc, #412]	; (80022c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 020f 	and.w	r2, r3, #15
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d20c      	bcs.n	800214c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b64      	ldr	r3, [pc, #400]	; (80022c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b62      	ldr	r3, [pc, #392]	; (80022c4 <HAL_RCC_ClockConfig+0x1b4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 020f 	and.w	r2, r3, #15
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0b6      	b.n	80022ba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002164:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002166:	4b58      	ldr	r3, [pc, #352]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800216e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800217c:	4a52      	ldr	r2, [pc, #328]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 800217e:	4b52      	ldr	r3, [pc, #328]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	494f      	ldr	r1, [pc, #316]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 800218a:	4b4f      	ldr	r3, [pc, #316]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d044      	beq.n	8002230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d119      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e07d      	b.n	80022ba <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d003      	beq.n	80021ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ce:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e06d      	b.n	80022ba <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021de:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e065      	b.n	80022ba <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ee:	4936      	ldr	r1, [pc, #216]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f023 0203 	bic.w	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002200:	f7fe f9b4 	bl	800056c <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	e00a      	b.n	800221e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002208:	f7fe f9b0 	bl	800056c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e04d      	b.n	80022ba <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 020c 	and.w	r2, r3, #12
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	429a      	cmp	r2, r3
 800222e:	d1eb      	bne.n	8002208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 020f 	and.w	r2, r3, #15
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d90c      	bls.n	8002258 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 020f 	and.w	r2, r3, #15
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e030      	b.n	80022ba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002264:	4918      	ldr	r1, [pc, #96]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002282:	4911      	ldr	r1, [pc, #68]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002296:	f000 f81d 	bl	80022d4 <HAL_RCC_GetSysClockFreq>
 800229a:	4601      	mov	r1, r0
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	4a09      	ldr	r2, [pc, #36]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	5cd3      	ldrb	r3, [r2, r3]
 80022aa:	fa21 f303 	lsr.w	r3, r1, r3
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80022b2:	2000      	movs	r0, #0
 80022b4:	f00d fea0 	bl	800fff8 <HAL_InitTick>

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023c00 	.word	0x40023c00
 80022c8:	40023800 	.word	0x40023800
 80022cc:	08010fa8 	.word	0x08010fa8
 80022d0:	200000c0 	.word	0x200000c0

080022d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d8:	b08f      	sub	sp, #60	; 0x3c
 80022da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e0:	2300      	movs	r3, #0
 80022e2:	637b      	str	r3, [r7, #52]	; 0x34
 80022e4:	2300      	movs	r3, #0
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ec:	4b62      	ldr	r3, [pc, #392]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d007      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x34>
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d008      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x3a>
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f040 80b2 	bne.w	8002466 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002302:	4b5e      	ldr	r3, [pc, #376]	; (800247c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002304:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8002306:	e0b1      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002308:	4b5d      	ldr	r3, [pc, #372]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800230c:	e0ae      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800230e:	4b5a      	ldr	r3, [pc, #360]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002318:	4b57      	ldr	r3, [pc, #348]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d04e      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002324:	4b54      	ldr	r3, [pc, #336]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	f04f 0400 	mov.w	r4, #0
 800232e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	ea01 0103 	and.w	r1, r1, r3
 800233a:	ea02 0204 	and.w	r2, r2, r4
 800233e:	460b      	mov	r3, r1
 8002340:	4614      	mov	r4, r2
 8002342:	0160      	lsls	r0, r4, #5
 8002344:	6278      	str	r0, [r7, #36]	; 0x24
 8002346:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002348:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800234c:	6278      	str	r0, [r7, #36]	; 0x24
 800234e:	015b      	lsls	r3, r3, #5
 8002350:	623b      	str	r3, [r7, #32]
 8002352:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002356:	1a5b      	subs	r3, r3, r1
 8002358:	eb64 0402 	sbc.w	r4, r4, r2
 800235c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8002360:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8002364:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002368:	ebb8 0803 	subs.w	r8, r8, r3
 800236c:	eb69 0904 	sbc.w	r9, r9, r4
 8002370:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002388:	eb18 0801 	adds.w	r8, r8, r1
 800238c:	eb49 0902 	adc.w	r9, r9, r2
 8002390:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80023a8:	4640      	mov	r0, r8
 80023aa:	4649      	mov	r1, r9
 80023ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ae:	f04f 0400 	mov.w	r4, #0
 80023b2:	461a      	mov	r2, r3
 80023b4:	4623      	mov	r3, r4
 80023b6:	f7fd ff1b 	bl	80001f0 <__aeabi_uldivmod>
 80023ba:	4603      	mov	r3, r0
 80023bc:	460c      	mov	r4, r1
 80023be:	637b      	str	r3, [r7, #52]	; 0x34
 80023c0:	e043      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c2:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	099b      	lsrs	r3, r3, #6
 80023c8:	f04f 0400 	mov.w	r4, #0
 80023cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	ea01 0103 	and.w	r1, r1, r3
 80023d8:	ea02 0204 	and.w	r2, r2, r4
 80023dc:	460b      	mov	r3, r1
 80023de:	4614      	mov	r4, r2
 80023e0:	0160      	lsls	r0, r4, #5
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	015b      	lsls	r3, r3, #5
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80023f4:	1a5b      	subs	r3, r3, r1
 80023f6:	eb64 0402 	sbc.w	r4, r4, r2
 80023fa:	01a6      	lsls	r6, r4, #6
 80023fc:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002400:	019d      	lsls	r5, r3, #6
 8002402:	1aed      	subs	r5, r5, r3
 8002404:	eb66 0604 	sbc.w	r6, r6, r4
 8002408:	00f3      	lsls	r3, r6, #3
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	00eb      	lsls	r3, r5, #3
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	e897 0060 	ldmia.w	r7, {r5, r6}
 800241c:	186d      	adds	r5, r5, r1
 800241e:	eb46 0602 	adc.w	r6, r6, r2
 8002422:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8002426:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800242a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800242e:	4655      	mov	r5, sl
 8002430:	465e      	mov	r6, fp
 8002432:	4628      	mov	r0, r5
 8002434:	4631      	mov	r1, r6
 8002436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002438:	f04f 0400 	mov.w	r4, #0
 800243c:	461a      	mov	r2, r3
 800243e:	4623      	mov	r3, r4
 8002440:	f7fd fed6 	bl	80001f0 <__aeabi_uldivmod>
 8002444:	4603      	mov	r3, r0
 8002446:	460c      	mov	r4, r1
 8002448:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	0c1b      	lsrs	r3, r3, #16
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	3301      	adds	r3, #1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800245a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002464:	e002      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800246a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800246e:	4618      	mov	r0, r3
 8002470:	373c      	adds	r7, #60	; 0x3c
 8002472:	46bd      	mov	sp, r7
 8002474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	00f42400 	.word	0x00f42400
 8002480:	007a1200 	.word	0x007a1200

08002484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_RCC_GetHCLKFreq+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	200000c0 	.word	0x200000c0

0800249c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024a0:	f7ff fff0 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024a4:	4601      	mov	r1, r0
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	0b5b      	lsrs	r3, r3, #13
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	4a03      	ldr	r2, [pc, #12]	; (80024c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
 80024b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800
 80024c0:	08010fb8 	.word	0x08010fb8

080024c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	220f      	movs	r2, #15
 80024d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_GetClockConfig+0x5c>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0203 	and.w	r2, r3, #3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_RCC_GetClockConfig+0x5c>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_RCC_GetClockConfig+0x5c>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_GetClockConfig+0x5c>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	08db      	lsrs	r3, r3, #3
 80024fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <HAL_RCC_GetClockConfig+0x60>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 020f 	and.w	r2, r3, #15
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	601a      	str	r2, [r3, #0]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	40023c00 	.word	0x40023c00

08002528 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e01d      	b.n	8002576 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f815 	bl	800257e <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3304      	adds	r3, #4
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f000 f95e 	bl	8002828 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	68d2      	ldr	r2, [r2, #12]
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	f042 0201 	orr.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d122      	bne.n	8002624 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d11b      	bne.n	8002624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0202 	mvn.w	r2, #2
 80025f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f8ee 	bl	80027ec <HAL_TIM_IC_CaptureCallback>
 8002610:	e005      	b.n	800261e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f8e0 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f8f1 	bl	8002800 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b04      	cmp	r3, #4
 8002630:	d122      	bne.n	8002678 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b04      	cmp	r3, #4
 800263e:	d11b      	bne.n	8002678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0204 	mvn.w	r2, #4
 8002648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2202      	movs	r2, #2
 800264e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8c4 	bl	80027ec <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f8b6 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f8c7 	bl	8002800 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b08      	cmp	r3, #8
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b08      	cmp	r3, #8
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0208 	mvn.w	r2, #8
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2204      	movs	r2, #4
 80026a2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f89a 	bl	80027ec <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f88c 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f89d 	bl	8002800 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0210 	mvn.w	r2, #16
 80026f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2208      	movs	r2, #8
 80026f6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f870 	bl	80027ec <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f862 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f873 	bl	8002800 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	d10e      	bne.n	800274c <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b01      	cmp	r3, #1
 800273a:	d107      	bne.n	800274c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0201 	mvn.w	r2, #1
 8002744:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f00d fbec 	bl	800ff24 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b80      	cmp	r3, #128	; 0x80
 8002758:	d10e      	bne.n	8002778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	2b80      	cmp	r3, #128	; 0x80
 8002766:	d107      	bne.n	8002778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002770:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f8e6 	bl	8002944 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002782:	2b40      	cmp	r3, #64	; 0x40
 8002784:	d10e      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b40      	cmp	r3, #64	; 0x40
 8002792:	d107      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800279c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f838 	bl	8002814 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	d10e      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d107      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0220 	mvn.w	r2, #32
 80027c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f8b0 	bl	8002930 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a35      	ldr	r2, [pc, #212]	; (8002914 <TIM_Base_SetConfig+0xec>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00f      	beq.n	8002864 <TIM_Base_SetConfig+0x3c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284a:	d00b      	beq.n	8002864 <TIM_Base_SetConfig+0x3c>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a32      	ldr	r2, [pc, #200]	; (8002918 <TIM_Base_SetConfig+0xf0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d007      	beq.n	8002864 <TIM_Base_SetConfig+0x3c>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a31      	ldr	r2, [pc, #196]	; (800291c <TIM_Base_SetConfig+0xf4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d003      	beq.n	8002864 <TIM_Base_SetConfig+0x3c>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a30      	ldr	r2, [pc, #192]	; (8002920 <TIM_Base_SetConfig+0xf8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d101      	bne.n	8002868 <TIM_Base_SetConfig+0x40>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <TIM_Base_SetConfig+0x42>
 8002868:	2300      	movs	r3, #0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a24      	ldr	r2, [pc, #144]	; (8002914 <TIM_Base_SetConfig+0xec>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d01b      	beq.n	80028c0 <TIM_Base_SetConfig+0x98>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288e:	d017      	beq.n	80028c0 <TIM_Base_SetConfig+0x98>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a21      	ldr	r2, [pc, #132]	; (8002918 <TIM_Base_SetConfig+0xf0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d013      	beq.n	80028c0 <TIM_Base_SetConfig+0x98>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a20      	ldr	r2, [pc, #128]	; (800291c <TIM_Base_SetConfig+0xf4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00f      	beq.n	80028c0 <TIM_Base_SetConfig+0x98>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a1f      	ldr	r2, [pc, #124]	; (8002920 <TIM_Base_SetConfig+0xf8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d00b      	beq.n	80028c0 <TIM_Base_SetConfig+0x98>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a1e      	ldr	r2, [pc, #120]	; (8002924 <TIM_Base_SetConfig+0xfc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d007      	beq.n	80028c0 <TIM_Base_SetConfig+0x98>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <TIM_Base_SetConfig+0x100>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d003      	beq.n	80028c0 <TIM_Base_SetConfig+0x98>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a1c      	ldr	r2, [pc, #112]	; (800292c <TIM_Base_SetConfig+0x104>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d101      	bne.n	80028c4 <TIM_Base_SetConfig+0x9c>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <TIM_Base_SetConfig+0x9e>
 80028c4:	2300      	movs	r3, #0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a07      	ldr	r2, [pc, #28]	; (8002914 <TIM_Base_SetConfig+0xec>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d103      	bne.n	8002902 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	615a      	str	r2, [r3, #20]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40010000 	.word	0x40010000
 8002918:	40000400 	.word	0x40000400
 800291c:	40000800 	.word	0x40000800
 8002920:	40000c00 	.word	0x40000c00
 8002924:	40014000 	.word	0x40014000
 8002928:	40014400 	.word	0x40014400
 800292c:	40014800 	.word	0x40014800

08002930 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002958:	b084      	sub	sp, #16
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	f107 0014 	add.w	r0, r7, #20
 8002966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296c:	2b01      	cmp	r3, #1
 800296e:	d120      	bne.n	80029b2 <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 8002998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800299a:	2b01      	cmp	r3, #1
 800299c:	d105      	bne.n	80029aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f001 f9c4 	bl	8003d38 <USB_CoreReset>
 80029b0:	e00c      	b.n	80029cc <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f001 f9ba 	bl	8003d38 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d10b      	bne.n	80029ea <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f043 0206 	orr.w	r2, r3, #6
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f043 0220 	orr.w	r2, r3, #32
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029f6:	b004      	add	sp, #16
 80029f8:	4770      	bx	lr

080029fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f043 0201 	orr.w	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f023 0201 	bic.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002a56:	78fb      	ldrb	r3, [r7, #3]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d106      	bne.n	8002a6a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	60da      	str	r2, [r3, #12]
 8002a68:	e008      	b.n	8002a7c <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 8002a7c:	2032      	movs	r0, #50	; 0x32
 8002a7e:	f7fd fd81 	bl	8000584 <HAL_Delay>
  
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	f107 001c 	add.w	r0, r7, #28
 8002a9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
 8002aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <USB_DevInit+0x2a>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ab4:	e005      	b.n	8002ac2 <USB_DevInit+0x36>
  }
  else
  {
    /* Enable VBUS */
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2300      	movs	r3, #0
 8002acc:	6013      	str	r3, [r2, #0]
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6013      	str	r3, [r2, #0]
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d10c      	bne.n	8002b00 <USB_DevInit+0x74>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d104      	bne.n	8002af6 <USB_DevInit+0x6a>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8002aec:	2100      	movs	r1, #0
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f946 	bl	8002d80 <USB_SetDevSpeed>
 8002af4:	e008      	b.n	8002b08 <USB_DevInit+0x7c>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8002af6:	2101      	movs	r1, #1
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f941 	bl	8002d80 <USB_SetDevSpeed>
 8002afe:	e003      	b.n	8002b08 <USB_DevInit+0x7c>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002b00:	2103      	movs	r1, #3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f93c 	bl	8002d80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8002b08:	2110      	movs	r1, #16
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f8f0 	bl	8002cf0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f913 	bl	8002d3c <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2300      	movs	r3, #0
 8002b20:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b34:	461a      	mov	r2, r3
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3a:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b42:	461a      	mov	r2, r3
 8002b44:	2300      	movs	r3, #0
 8002b46:	61d3      	str	r3, [r2, #28]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e034      	b.n	8002bb8 <USB_DevInit+0x12c>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b64:	d10a      	bne.n	8002b7c <USB_DevInit+0xf0>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b72:	461a      	mov	r2, r3
 8002b74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e008      	b.n	8002b8e <USB_DevInit+0x102>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bac:	461a      	mov	r2, r3
 8002bae:	23ff      	movs	r3, #255	; 0xff
 8002bb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d8c6      	bhi.n	8002b4e <USB_DevInit+0xc2>
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	e034      	b.n	8002c30 <USB_DevInit+0x1a4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bdc:	d10a      	bne.n	8002bf4 <USB_DevInit+0x168>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bea:	461a      	mov	r2, r3
 8002bec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e008      	b.n	8002c06 <USB_DevInit+0x17a>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c00:	461a      	mov	r2, r3
 8002c02:	2300      	movs	r3, #0
 8002c04:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c12:	461a      	mov	r2, r3
 8002c14:	2300      	movs	r3, #0
 8002c16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c24:	461a      	mov	r2, r3
 8002c26:	23ff      	movs	r3, #255	; 0xff
 8002c28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d8c6      	bhi.n	8002bc6 <USB_DevInit+0x13a>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c3e:	461a      	mov	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c4c:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1U)
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d117      	bne.n	8002c84 <USB_DevInit+0x1f8>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <USB_DevInit+0x25c>)
 8002c5e:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c66:	461a      	mov	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c74:	f043 0303 	orr.w	r3, r3, #3
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002c90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f043 0210 	orr.w	r2, r3, #16
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699a      	ldr	r2, [r3, #24]
 8002ca8:	4b10      	ldr	r3, [pc, #64]	; (8002cec <USB_DevInit+0x260>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <USB_DevInit+0x236>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f043 0208 	orr.w	r2, r3, #8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8002cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d107      	bne.n	8002cd8 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ce4:	b004      	add	sp, #16
 8002ce6:	4770      	bx	lr
 8002ce8:	00800100 	.word	0x00800100
 8002cec:	803c3800 	.word	0x803c3800

08002cf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <USB_FlushTxFifo+0x48>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e006      	b.n	8002d2a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d0f0      	beq.n	8002d0a <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	00030d40 	.word	0x00030d40

08002d3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3301      	adds	r3, #1
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <USB_FlushRxFifo+0x40>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e006      	b.n	8002d6e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d0f0      	beq.n	8002d4e <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	00030d40 	.word	0x00030d40

08002d80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d92:	4619      	mov	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0306 	and.w	r3, r3, #6
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]
 8002dd0:	e01c      	b.n	8002e0c <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0306 	and.w	r3, r3, #6
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d007      	beq.n	8002df2 <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d102      	bne.n	8002df8 <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 8002df2:	2303      	movs	r3, #3
 8002df4:	73fb      	strb	r3, [r7, #15]
 8002df6:	e009      	b.n	8002e0c <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0306 	and.w	r3, r3, #6
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d101      	bne.n	8002e0c <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	785b      	ldrb	r3, [r3, #1]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d13e      	bne.n	8002eaa <USB_ActivateEndpoint+0x90>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e32:	4619      	mov	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e3a:	69da      	ldr	r2, [r3, #28]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	2301      	movs	r3, #1
 8002e44:	4083      	lsls	r3, r0
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d15c      	bne.n	8002f1e <USB_ActivateEndpoint+0x104>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e72:	4618      	mov	r0, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e8c:	6839      	ldr	r1, [r7, #0]
 8002e8e:	78c9      	ldrb	r1, [r1, #3]
 8002e90:	0489      	lsls	r1, r1, #18
 8002e92:	430b      	orrs	r3, r1
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 8002e94:	6839      	ldr	r1, [r7, #0]
 8002e96:	7809      	ldrb	r1, [r1, #0]
 8002e98:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea6:	6003      	str	r3, [r0, #0]
 8002ea8:	e039      	b.n	8002f1e <USB_ActivateEndpoint+0x104>
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	4083      	lsls	r3, r0
 8002ec4:	041b      	lsls	r3, r3, #16
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11d      	bne.n	8002f1e <USB_ActivateEndpoint+0x104>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f0a:	6839      	ldr	r1, [r7, #0]
 8002f0c:	78c9      	ldrb	r1, [r1, #3]
 8002f0e:	0489      	lsls	r1, r1, #18
 8002f10:	430b      	orrs	r3, r1
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f1c:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	785b      	ldrb	r3, [r3, #1]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d154      	bne.n	8002fec <USB_DeactivateEndpoint+0xc0>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f50:	4619      	mov	r1, r3
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f66:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f76:	461a      	mov	r2, r3
 8002f78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f7c:	6013      	str	r3, [r2, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f92:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3301      	adds	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4a43      	ldr	r2, [pc, #268]	; (80030ac <USB_DeactivateEndpoint+0x180>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <USB_DeactivateEndpoint+0x7a>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e07d      	b.n	80030a2 <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbe:	d0e9      	beq.n	8002f94 <USB_DeactivateEndpoint+0x68>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8002fc0:	2110      	movs	r1, #16
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fe94 	bl	8002cf0 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fce:	4619      	mov	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd6:	69da      	ldr	r2, [r3, #28]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	2301      	movs	r3, #1
 8002fe0:	4083      	lsls	r3, r0
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61cb      	str	r3, [r1, #28]
 8002fea:	e059      	b.n	80030a0 <USB_DeactivateEndpoint+0x174>
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003010:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003020:	461a      	mov	r2, r3
 8003022:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003026:	6013      	str	r3, [r2, #0]
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003036:	461a      	mov	r2, r3
 8003038:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800303c:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3301      	adds	r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a19      	ldr	r2, [pc, #100]	; (80030ac <USB_DeactivateEndpoint+0x180>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <USB_DeactivateEndpoint+0x124>
      {
        return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e028      	b.n	80030a2 <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b10      	cmp	r3, #16
 8003066:	d0ea      	beq.n	800303e <USB_DeactivateEndpoint+0x112>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800306e:	461a      	mov	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800307c:	6053      	str	r3, [r2, #4]
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003084:	4619      	mov	r1, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	2301      	movs	r3, #1
 8003096:	4083      	lsls	r3, r0
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	43db      	mvns	r3, r3
 800309c:	4013      	ands	r3, r2
 800309e:	61cb      	str	r3, [r1, #28]
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	00030d40 	.word	0x00030d40

080030b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	785b      	ldrb	r3, [r3, #1]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	f040 8146 	bne.w	8003358 <USB_EPStartXfer+0x2a8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d13b      	bne.n	800314c <USB_EPStartXfer+0x9c>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e2:	4619      	mov	r1, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80030f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80030fc:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800310c:	4619      	mov	r1, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003122:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003132:	4619      	mov	r1, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	0cdb      	lsrs	r3, r3, #19
 8003146:	04db      	lsls	r3, r3, #19
 8003148:	610b      	str	r3, [r1, #16]
 800314a:	e086      	b.n	800325a <USB_EPStartXfer+0x1aa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315a:	4619      	mov	r1, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	0cdb      	lsrs	r3, r3, #19
 800316e:	04db      	lsls	r3, r3, #19
 8003170:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003180:	4619      	mov	r1, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003196:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800319a:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031aa:	4618      	mov	r0, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	6959      	ldr	r1, [r3, #20]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	440b      	add	r3, r1
 80031c6:	1e59      	subs	r1, r3, #1
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80031d0:	04d9      	lsls	r1, r3, #19
 80031d2:	4b8c      	ldr	r3, [pc, #560]	; (8003404 <USB_EPStartXfer+0x354>)
 80031d4:	400b      	ands	r3, r1
 80031d6:	4313      	orrs	r3, r2
 80031d8:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e8:	4619      	mov	r1, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003202:	4313      	orrs	r3, r2
 8003204:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	78db      	ldrb	r3, [r3, #3]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d125      	bne.n	800325a <USB_EPStartXfer+0x1aa>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800321c:	4619      	mov	r1, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003232:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003242:	4619      	mov	r1, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4413      	add	r3, r2
 800324e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003258:	610b      	str	r3, [r1, #16]
      }       
    }

    if (dma == 1U)
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d10b      	bne.n	8003278 <USB_EPStartXfer+0x1c8>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800326e:	461a      	mov	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	6153      	str	r3, [r2, #20]
 8003276:	e016      	b.n	80032a6 <USB_EPStartXfer+0x1f6>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	78db      	ldrb	r3, [r3, #3]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d012      	beq.n	80032a6 <USB_EPStartXfer+0x1f6>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00e      	beq.n	80032a6 <USB_EPStartXfer+0x1f6>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328e:	4619      	mov	r1, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	2301      	movs	r3, #1
 80032a0:	4083      	lsls	r3, r0
 80032a2:	4313      	orrs	r3, r2
 80032a4:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	78db      	ldrb	r3, [r3, #3]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d12e      	bne.n	800330c <USB_EPStartXfer+0x25c>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d113      	bne.n	80032e6 <USB_EPStartXfer+0x236>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032cc:	4619      	mov	r1, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032e2:	600b      	str	r3, [r1, #0]
 80032e4:	e012      	b.n	800330c <USB_EPStartXfer+0x25c>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f4:	4619      	mov	r1, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330a:	600b      	str	r3, [r1, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4413      	add	r3, r2
 8003316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800331a:	4619      	mov	r1, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003330:	600b      	str	r3, [r1, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	78db      	ldrb	r3, [r3, #3]
 8003336:	2b01      	cmp	r3, #1
 8003338:	f040 80f5 	bne.w	8003526 <USB_EPStartXfer+0x476>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	68d9      	ldr	r1, [r3, #12]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	b298      	uxth	r0, r3
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	4603      	mov	r3, r0
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fa4e 	bl	80037f2 <USB_WritePacket>
 8003356:	e0e6      	b.n	8003526 <USB_EPStartXfer+0x476>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003366:	4619      	mov	r1, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	0cdb      	lsrs	r3, r3, #19
 800337a:	04db      	lsls	r3, r3, #19
 800337c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338c:	4619      	mov	r1, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033a6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d12b      	bne.n	8003408 <USB_EPStartXfer+0x358>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033be:	4619      	mov	r1, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d8:	4313      	orrs	r3, r2
 80033da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ea:	4619      	mov	r1, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003400:	610b      	str	r3, [r1, #16]
 8003402:	e03c      	b.n	800347e <USB_EPStartXfer+0x3ce>
 8003404:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4413      	add	r3, r2
 8003412:	1e5a      	subs	r2, r3, #1
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	fbb2 f3f3 	udiv	r3, r2, r3
 800341c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342c:	4619      	mov	r1, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	8afb      	ldrh	r3, [r7, #22]
 8003440:	04db      	lsls	r3, r3, #19
 8003442:	4618      	mov	r0, r3
 8003444:	4b3a      	ldr	r3, [pc, #232]	; (8003530 <USB_EPStartXfer+0x480>)
 8003446:	4003      	ands	r3, r0
 8003448:	4313      	orrs	r3, r2
 800344a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345a:	4618      	mov	r0, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	8af9      	ldrh	r1, [r7, #22]
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347a:	4313      	orrs	r3, r2
 800347c:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1U)
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d10a      	bne.n	800349a <USB_EPStartXfer+0x3ea>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4413      	add	r3, r2
 800348e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003492:	461a      	mov	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	6153      	str	r3, [r2, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	78db      	ldrb	r3, [r3, #3]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d12e      	bne.n	8003500 <USB_EPStartXfer+0x450>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d113      	bne.n	80034da <USB_EPStartXfer+0x42a>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c0:	4619      	mov	r1, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034d6:	600b      	str	r3, [r1, #0]
 80034d8:	e012      	b.n	8003500 <USB_EPStartXfer+0x450>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e8:	4619      	mov	r1, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fe:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350e:	4619      	mov	r1, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003524:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	1ff80000 	.word	0x1ff80000

08003534 <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	4613      	mov	r3, r2
 8003540:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	785b      	ldrb	r3, [r3, #1]
 8003546:	2b01      	cmp	r3, #1
 8003548:	f040 80d2 	bne.w	80036f0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d13b      	bne.n	80035cc <USB_EP0StartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003562:	4619      	mov	r1, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003578:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800357c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	4619      	mov	r1, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b2:	4619      	mov	r1, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	0cdb      	lsrs	r3, r3, #19
 80035c6:	04db      	lsls	r3, r3, #19
 80035c8:	610b      	str	r3, [r1, #16]
 80035ca:	e05a      	b.n	8003682 <USB_EP0StartXfer+0x14e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035da:	4619      	mov	r1, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	0cdb      	lsrs	r3, r3, #19
 80035ee:	04db      	lsls	r3, r3, #19
 80035f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003600:	4619      	mov	r1, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003616:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800361a:	610b      	str	r3, [r1, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	d903      	bls.n	8003630 <USB_EP0StartXfer+0xfc>
      {
        ep->xfer_len = ep->maxpacket;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363e:	4619      	mov	r1, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003654:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003664:	4619      	mov	r1, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367e:	4313      	orrs	r3, r2
 8003680:	610b      	str	r3, [r1, #16]
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003690:	4619      	mov	r1, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036a6:	600b      	str	r3, [r1, #0]
    
    if (dma == 1)
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d10b      	bne.n	80036c6 <USB_EP0StartXfer+0x192>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036bc:	461a      	mov	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	6153      	str	r3, [r2, #20]
 80036c4:	e08e      	b.n	80037e4 <USB_EP0StartXfer+0x2b0>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 808a 	beq.w	80037e4 <USB_EP0StartXfer+0x2b0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d6:	4619      	mov	r1, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	2301      	movs	r3, #1
 80036e8:	4083      	lsls	r3, r0
 80036ea:	4313      	orrs	r3, r2
 80036ec:	634b      	str	r3, [r1, #52]	; 0x34
 80036ee:	e079      	b.n	80037e4 <USB_EP0StartXfer+0x2b0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fe:	4619      	mov	r1, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	0cdb      	lsrs	r3, r3, #19
 8003712:	04db      	lsls	r3, r3, #19
 8003714:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003724:	4619      	mov	r1, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800373a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800373e:	610b      	str	r3, [r1, #16]
      
    if (ep->xfer_len > 0U)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <USB_EP0StartXfer+0x21c>
    {
      ep->xfer_len = ep->maxpacket;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800375e:	4619      	mov	r1, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003774:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003784:	4619      	mov	r1, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379e:	4313      	orrs	r3, r2
 80037a0:	610b      	str	r3, [r1, #16]
    

    if (dma == 1U)
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d10a      	bne.n	80037be <USB_EP0StartXfer+0x28a>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b6:	461a      	mov	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	6153      	str	r3, [r2, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037cc:	4619      	mov	r1, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037e2:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b087      	sub	sp, #28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	4611      	mov	r1, r2
 80037fe:	461a      	mov	r2, r3
 8003800:	460b      	mov	r3, r1
 8003802:	71fb      	strb	r3, [r7, #7]
 8003804:	4613      	mov	r3, r2
 8003806:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 8003810:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d11a      	bne.n	800384e <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 8003818:	88bb      	ldrh	r3, [r7, #4]
 800381a:	3303      	adds	r3, #3
 800381c:	089b      	lsrs	r3, r3, #2
 800381e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e00f      	b.n	8003846 <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	031a      	lsls	r2, r3, #12
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4413      	add	r3, r2
 800382e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003832:	461a      	mov	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3301      	adds	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	3304      	adds	r3, #4
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	429a      	cmp	r2, r3
 800384c:	d3eb      	bcc.n	8003826 <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	3303      	adds	r3, #3
 8003872:	089b      	lsrs	r3, r3, #2
 8003874:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	e00b      	b.n	8003894 <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	3301      	adds	r3, #1
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	3304      	adds	r3, #4
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	429a      	cmp	r2, r3
 800389a:	d3ef      	bcc.n	800387c <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 800389c:	68bb      	ldr	r3, [r7, #8]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	785b      	ldrb	r3, [r3, #1]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d130      	bne.n	800391e <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	db12      	blt.n	80038f6 <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038de:	4619      	mov	r1, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038f4:	600b      	str	r3, [r1, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003904:	4619      	mov	r1, r3
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800391a:	600b      	str	r3, [r1, #0]
 800391c:	e02f      	b.n	800397e <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	db12      	blt.n	8003958 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003940:	4619      	mov	r1, r3
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003956:	600b      	str	r3, [r1, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003966:	4619      	mov	r1, r3
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800397c:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	785b      	ldrb	r3, [r3, #1]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d12e      	bne.n	80039fc <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ac:	4619      	mov	r1, r3
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039c2:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	78db      	ldrb	r3, [r3, #3]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d003      	beq.n	80039d4 <USB_EPClearStall+0x48>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	78db      	ldrb	r3, [r3, #3]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d141      	bne.n	8003a58 <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e2:	4619      	mov	r1, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f8:	600b      	str	r3, [r1, #0]
 80039fa:	e02d      	b.n	8003a58 <USB_EPClearStall+0xcc>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a20:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	78db      	ldrb	r3, [r3, #3]
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d003      	beq.n	8003a32 <USB_EPClearStall+0xa6>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	78db      	ldrb	r3, [r3, #3]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d112      	bne.n	8003a58 <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a40:	4619      	mov	r1, r3
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a56:	600b      	str	r3, [r1, #0]
    }    
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	460b      	mov	r3, r1
 8003a70:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a78:	461a      	mov	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a86:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a8e:	4619      	mov	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f023 0302 	bic.w	r3, r3, #2
 8003ace:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003ad0:	2003      	movs	r0, #3
 8003ad2:	f7fc fd57 	bl	8000584 <HAL_Delay>
  
  return HAL_OK;  
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aee:	461a      	mov	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f043 0302 	orr.w	r3, r3, #2
 8003afc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003afe:	2003      	movs	r0, #3
 8003b00:	f7fc fd40 	bl	8000584 <HAL_Delay>
  
  return HAL_OK;  
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b085      	sub	sp, #20
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4013      	ands	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
  return v;  
 8003b2a:	68fb      	ldr	r3, [r7, #12]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4013      	ands	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000U) >> 16U);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	0c1b      	lsrs	r3, r3, #16
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4013      	ands	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFFU));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	b29b      	uxth	r3, r3
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  return v;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf8:	01db      	lsls	r3, r3, #7
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4013      	ands	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
  return v;
 8003c16:	68fb      	ldr	r3, [r7, #12]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f003 0301 	and.w	r3, r3, #1
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4e:	461a      	mov	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c5c:	f023 0307 	bic.w	r3, r3, #7
 8003c60:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0306 	and.w	r3, r3, #6
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d10a      	bne.n	8003c88 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c78:	461a      	mov	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f043 0303 	orr.w	r3, r3, #3
 8003c86:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8e:	461a      	mov	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cda:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f043 0318 	orr.w	r3, r3, #24
 8003cf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003d06:	6113      	str	r3, [r2, #16]
  
  if (dma == 1U)
 8003d08:	7afb      	ldrb	r3, [r7, #11]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d10c      	bne.n	8003d28 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d14:	461a      	mov	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d20:	461a      	mov	r2, r3
 8003d22:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8003d26:	6013      	str	r3, [r2, #0]
  }
  
  return HAL_OK;  
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3301      	adds	r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4a13      	ldr	r2, [pc, #76]	; (8003d9c <USB_CoreReset+0x64>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e01b      	b.n	8003d8e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	daf2      	bge.n	8003d44 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3301      	adds	r3, #1
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4a09      	ldr	r2, [pc, #36]	; (8003d9c <USB_CoreReset+0x64>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d901      	bls.n	8003d80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e006      	b.n	8003d8e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d0f0      	beq.n	8003d6e <USB_CoreReset+0x36>
  
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	00030d40 	.word	0x00030d40

08003da0 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	70fb      	strb	r3, [r7, #3]
    /* Open EP IN */
	USBD_LL_OpenEP(pdev, RNDIS_NOTIFICATION_IN_EP, USBD_EP_TYPE_INTR, RNDIS_NOTIFICATION_IN_SZ);
 8003dac:	2308      	movs	r3, #8
 8003dae:	2203      	movs	r2, #3
 8003db0:	2181      	movs	r1, #129	; 0x81
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f00c fbc4 	bl	8010540 <USBD_LL_OpenEP>
    
    /* Open EP OUT */
	USBD_LL_OpenEP(pdev, RNDIS_DATA_IN_EP, USBD_EP_TYPE_BULK, RNDIS_DATA_IN_SZ);
 8003db8:	2340      	movs	r3, #64	; 0x40
 8003dba:	2202      	movs	r2, #2
 8003dbc:	2182      	movs	r1, #130	; 0x82
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f00c fbbe 	bl	8010540 <USBD_LL_OpenEP>

    /* Open EP IN */
	USBD_LL_OpenEP(pdev, RNDIS_DATA_OUT_EP, USBD_EP_TYPE_BULK, RNDIS_DATA_OUT_SZ);
 8003dc4:	2340      	movs	r3, #64	; 0x40
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	2101      	movs	r1, #1
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f00c fbb8 	bl	8010540 <USBD_LL_OpenEP>
    
    /* Init Xfer states */
    //txState =0;
    //rxState =0;
	pDev = pdev;
 8003dd0:	4a13      	ldr	r2, [pc, #76]	; (8003e20 <USBD_CDC_Init+0x80>)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6013      	str	r3, [r2, #0]
    USBD_LL_PrepareReceive(pdev, RNDIS_DATA_OUT_EP, (uint8_t*)usb_rx_buffer, RNDIS_DATA_OUT_SZ);
 8003dd6:	2340      	movs	r3, #64	; 0x40
 8003dd8:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <USBD_CDC_Init+0x84>)
 8003dda:	2101      	movs	r1, #1
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f00c fd2b 	bl	8010838 <USBD_LL_PrepareReceive>
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
    if( xipInitTaskHandle != NULL )
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <USBD_CDC_Init+0x88>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d012      	beq.n	8003e14 <USBD_CDC_Init+0x74>
	{
		vTaskNotifyGiveFromISR( xipInitTaskHandle, &xHigherPriorityTaskWoken );
 8003dee:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <USBD_CDC_Init+0x88>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f107 020c 	add.w	r2, r7, #12
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f004 fac9 	bl	8008390 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <USBD_CDC_Init+0x74>
 8003e04:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <USBD_CDC_Init+0x8c>)
 8003e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	f3bf 8f6f 	isb	sy
	}
    return 0;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20005430 	.word	0x20005430
 8003e24:	20004600 	.word	0x20004600
 8003e28:	20005428 	.word	0x20005428
 8003e2c:	e000ed04 	.word	0xe000ed04

08003e30 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev, RNDIS_NOTIFICATION_IN_EP);
 8003e3c:	2181      	movs	r1, #129	; 0x81
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f00c fbbc 	bl	80105bc <USBD_LL_CloseEP>
  
  USBD_LL_CloseEP(pdev, RNDIS_DATA_IN_EP);
 8003e44:	2182      	movs	r1, #130	; 0x82
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f00c fbb8 	bl	80105bc <USBD_LL_CloseEP>
  
  USBD_LL_CloseEP(pdev, RNDIS_DATA_OUT_EP);
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f00c fbb4 	bl	80105bc <USBD_LL_CloseEP>
  
  return 0;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <USBD_CDC_Setup>:
  *         Handle the CDC specific requests
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
	switch (req->bmRequest & USB_REQ_TYPE_MASK){
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	d000      	beq.n	8003e78 <USBD_CDC_Setup+0x18>
				{
					USBD_CtlPrepareRx (pdev, encapsulated_buffer, req->wLength);
				}
			}
		default:
			break;
 8003e76:	e018      	b.n	8003eaa <USBD_CDC_Setup+0x4a>
			if (req->wLength){
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	88db      	ldrh	r3, [r3, #6]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d014      	beq.n	8003eaa <USBD_CDC_Setup+0x4a>
				if (req->bmRequest & 0x80)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	b25b      	sxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da08      	bge.n	8003e9c <USBD_CDC_Setup+0x3c>
					USBD_CtlSendData(pdev, encapsulated_buffer, ((rndis_generic_msg_t *)encapsulated_buffer)->MessageLength);
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <USBD_CDC_Setup+0x58>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	4909      	ldr	r1, [pc, #36]	; (8003eb8 <USBD_CDC_Setup+0x58>)
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f001 fc83 	bl	80057a0 <USBD_CtlSendData>
			break;
 8003e9a:	e006      	b.n	8003eaa <USBD_CDC_Setup+0x4a>
					USBD_CtlPrepareRx (pdev, encapsulated_buffer, req->wLength);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	88db      	ldrh	r3, [r3, #6]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4905      	ldr	r1, [pc, #20]	; (8003eb8 <USBD_CDC_Setup+0x58>)
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f001 fca9 	bl	80057fc <USBD_CtlPrepareRx>
			break;
 8003eaa:	bf00      	nop
	}
	return USBD_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20004d98 	.word	0x20004d98

08003ebc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	70fb      	strb	r3, [r7, #3]
	epnum &= 0x0F;
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	70fb      	strb	r3, [r7, #3]
	if (epnum == (RNDIS_DATA_IN_EP & 0x0F)){
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d126      	bne.n	8003f24 <USBD_CDC_DataIn+0x68>
		rndis_first_tx = 0;
 8003ed6:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <USBD_CDC_DataIn+0x74>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
		rndis_sended += sended;
 8003edc:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <USBD_CDC_DataIn+0x78>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	4b15      	ldr	r3, [pc, #84]	; (8003f38 <USBD_CDC_DataIn+0x7c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <USBD_CDC_DataIn+0x78>)
 8003ee8:	6013      	str	r3, [r2, #0]
		rndis_tx_size -= sended;
 8003eea:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <USBD_CDC_DataIn+0x80>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <USBD_CDC_DataIn+0x7c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	4a11      	ldr	r2, [pc, #68]	; (8003f3c <USBD_CDC_DataIn+0x80>)
 8003ef6:	6013      	str	r3, [r2, #0]
		rndis_tx_ptr += sended;
 8003ef8:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <USBD_CDC_DataIn+0x84>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a0e      	ldr	r2, [pc, #56]	; (8003f38 <USBD_CDC_DataIn+0x7c>)
 8003efe:	6812      	ldr	r2, [r2, #0]
 8003f00:	4413      	add	r3, r2
 8003f02:	4a0f      	ldr	r2, [pc, #60]	; (8003f40 <USBD_CDC_DataIn+0x84>)
 8003f04:	6013      	str	r3, [r2, #0]
		sended = 0;
 8003f06:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <USBD_CDC_DataIn+0x7c>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
		usbd_cdc_transfer(pdev);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f95d 	bl	80041cc <usbd_cdc_transfer>
		if(rndis_tx_size<=0){
 8003f12:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <USBD_CDC_DataIn+0x80>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	dc04      	bgt.n	8003f24 <USBD_CDC_DataIn+0x68>
			usb_eth_stat.txok++;
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <USBD_CDC_DataIn+0x88>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	4a08      	ldr	r2, [pc, #32]	; (8003f44 <USBD_CDC_DataIn+0x88>)
 8003f22:	6013      	str	r3, [r2, #0]
		}
	}
	return USBD_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000004 	.word	0x20000004
 8003f34:	20000300 	.word	0x20000300
 8003f38:	20000304 	.word	0x20000304
 8003f3c:	200002fc 	.word	0x200002fc
 8003f40:	200002f8 	.word	0x200002f8
 8003f44:	200002e4 	.word	0x200002e4

08003f48 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	70fb      	strb	r3, [r7, #3]
	uint32_t xfer_count = USBD_LL_GetRxDataSize (pdev, epnum);
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	4619      	mov	r1, r3
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f00c fca7 	bl	80108ac <USBD_LL_GetRxDataSize>
 8003f5e:	60f8      	str	r0, [r7, #12]
	static int rndis_received = 0;
	if (epnum == RNDIS_DATA_OUT_EP){
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d146      	bne.n	8003ff4 <USBD_CDC_DataOut+0xac>
		if (rndis_received + xfer_count > RNDIS_RX_BUFFER_SIZE){
 8003f66:	4b26      	ldr	r3, [pc, #152]	; (8004000 <USBD_CDC_DataOut+0xb8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f240 6216 	movw	r2, #1558	; 0x616
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d908      	bls.n	8003f8a <USBD_CDC_DataOut+0x42>
			usb_eth_stat.rxbad++;
 8003f78:	4b22      	ldr	r3, [pc, #136]	; (8004004 <USBD_CDC_DataOut+0xbc>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	4a21      	ldr	r2, [pc, #132]	; (8004004 <USBD_CDC_DataOut+0xbc>)
 8003f80:	60d3      	str	r3, [r2, #12]
			rndis_received = 0;
 8003f82:	4b1f      	ldr	r3, [pc, #124]	; (8004000 <USBD_CDC_DataOut+0xb8>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e02e      	b.n	8003fe8 <USBD_CDC_DataOut+0xa0>
		}
		else{
			if (rndis_received + xfer_count <= RNDIS_RX_BUFFER_SIZE){
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <USBD_CDC_DataOut+0xb8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f240 6216 	movw	r2, #1558	; 0x616
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d81d      	bhi.n	8003fd8 <USBD_CDC_DataOut+0x90>
				memcpy(&rndis_rx_buffer[rndis_received], usb_rx_buffer, xfer_count);
 8003f9c:	4b18      	ldr	r3, [pc, #96]	; (8004000 <USBD_CDC_DataOut+0xb8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a19      	ldr	r2, [pc, #100]	; (8004008 <USBD_CDC_DataOut+0xc0>)
 8003fa2:	4413      	add	r3, r2
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4919      	ldr	r1, [pc, #100]	; (800400c <USBD_CDC_DataOut+0xc4>)
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f00c fda0 	bl	8010aee <memcpy>
				rndis_received += xfer_count;
 8003fae:	4b14      	ldr	r3, [pc, #80]	; (8004000 <USBD_CDC_DataOut+0xb8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4b11      	ldr	r3, [pc, #68]	; (8004000 <USBD_CDC_DataOut+0xb8>)
 8003fbc:	601a      	str	r2, [r3, #0]
				if (xfer_count != RNDIS_DATA_OUT_SZ){
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d011      	beq.n	8003fe8 <USBD_CDC_DataOut+0xa0>
					handle_packet(rndis_rx_buffer, rndis_received);
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <USBD_CDC_DataOut+0xb8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4619      	mov	r1, r3
 8003fca:	480f      	ldr	r0, [pc, #60]	; (8004008 <USBD_CDC_DataOut+0xc0>)
 8003fcc:	f000 f976 	bl	80042bc <handle_packet>
					rndis_received = 0;
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <USBD_CDC_DataOut+0xb8>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e007      	b.n	8003fe8 <USBD_CDC_DataOut+0xa0>
				}
			}
			else{
				rndis_received = 0;
 8003fd8:	4b09      	ldr	r3, [pc, #36]	; (8004000 <USBD_CDC_DataOut+0xb8>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
				usb_eth_stat.rxbad++;
 8003fde:	4b09      	ldr	r3, [pc, #36]	; (8004004 <USBD_CDC_DataOut+0xbc>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	4a07      	ldr	r2, [pc, #28]	; (8004004 <USBD_CDC_DataOut+0xbc>)
 8003fe6:	60d3      	str	r3, [r2, #12]
			}
		}
	    USBD_LL_PrepareReceive(pdev, RNDIS_DATA_OUT_EP, (uint8_t*)usb_rx_buffer, RNDIS_DATA_OUT_SZ);
 8003fe8:	2340      	movs	r3, #64	; 0x40
 8003fea:	4a08      	ldr	r2, [pc, #32]	; (800400c <USBD_CDC_DataOut+0xc4>)
 8003fec:	2101      	movs	r1, #1
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f00c fc22 	bl	8010838 <USBD_LL_PrepareReceive>
	}
    return USBD_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000314 	.word	0x20000314
 8004004:	200002e4 	.word	0x200002e4
 8004008:	20004780 	.word	0x20004780
 800400c:	20004600 	.word	0x20004600

08004010 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	switch (((rndis_generic_msg_t *)encapsulated_buffer)->MessageType){
 8004018:	4b3f      	ldr	r3, [pc, #252]	; (8004118 <USBD_CDC_EP0_RxReady+0x108>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3b02      	subs	r3, #2
 800401e:	2b06      	cmp	r3, #6
 8004020:	d873      	bhi.n	800410a <USBD_CDC_EP0_RxReady+0xfa>
 8004022:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <USBD_CDC_EP0_RxReady+0x18>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	08004045 	.word	0x08004045
 800402c:	0800410b 	.word	0x0800410b
 8004030:	080040a7 	.word	0x080040a7
 8004034:	080040af 	.word	0x080040af
 8004038:	080040b7 	.word	0x080040b7
 800403c:	0800410b 	.word	0x0800410b
 8004040:	080040e7 	.word	0x080040e7
		case REMOTE_NDIS_INITIALIZE_MSG:
			{
				rndis_initialize_cmplt_t *m;
				m = ((rndis_initialize_cmplt_t *)encapsulated_buffer);
 8004044:	4b34      	ldr	r3, [pc, #208]	; (8004118 <USBD_CDC_EP0_RxReady+0x108>)
 8004046:	617b      	str	r3, [r7, #20]
				/* m->MessageID is same as before */
				m->MessageType = REMOTE_NDIS_INITIALIZE_CMPLT;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	4a34      	ldr	r2, [pc, #208]	; (800411c <USBD_CDC_EP0_RxReady+0x10c>)
 800404c:	601a      	str	r2, [r3, #0]
				m->MessageLength = sizeof(rndis_initialize_cmplt_t);
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2234      	movs	r2, #52	; 0x34
 8004052:	605a      	str	r2, [r3, #4]
				m->MajorVersion = RNDIS_MAJOR_VERSION;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2201      	movs	r2, #1
 8004058:	611a      	str	r2, [r3, #16]
				m->MinorVersion = RNDIS_MINOR_VERSION;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2200      	movs	r2, #0
 800405e:	615a      	str	r2, [r3, #20]
				m->Status = RNDIS_STATUS_SUCCESS;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2200      	movs	r2, #0
 8004064:	60da      	str	r2, [r3, #12]
				m->DeviceFlags = RNDIS_DF_CONNECTIONLESS;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2201      	movs	r2, #1
 800406a:	619a      	str	r2, [r3, #24]
				m->Medium = RNDIS_MEDIUM_802_3;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2200      	movs	r2, #0
 8004070:	61da      	str	r2, [r3, #28]
				m->MaxPacketsPerTransfer = 1;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2201      	movs	r2, #1
 8004076:	621a      	str	r2, [r3, #32]
				m->MaxTransferSize = RNDIS_RX_BUFFER_SIZE;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f240 6216 	movw	r2, #1558	; 0x616
 800407e:	625a      	str	r2, [r3, #36]	; 0x24
				m->PacketAlignmentFactor = 0;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2200      	movs	r2, #0
 8004084:	629a      	str	r2, [r3, #40]	; 0x28
				m->AfListOffset = 0;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2200      	movs	r2, #0
 800408a:	62da      	str	r2, [r3, #44]	; 0x2c
				m->AfListSize = 0;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2200      	movs	r2, #0
 8004090:	631a      	str	r2, [r3, #48]	; 0x30
				rndis_state = rndis_initialized;
 8004092:	4b23      	ldr	r3, [pc, #140]	; (8004120 <USBD_CDC_EP0_RxReady+0x110>)
 8004094:	2201      	movs	r2, #1
 8004096:	701a      	strb	r2, [r3, #0]
				USBD_LL_Transmit(pdev, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 8004098:	2308      	movs	r3, #8
 800409a:	4a22      	ldr	r2, [pc, #136]	; (8004124 <USBD_CDC_EP0_RxReady+0x114>)
 800409c:	2181      	movs	r1, #129	; 0x81
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f00c fb90 	bl	80107c4 <USBD_LL_Transmit>
			}
			break;
 80040a4:	e032      	b.n	800410c <USBD_CDC_EP0_RxReady+0xfc>

		case REMOTE_NDIS_QUERY_MSG:
			rndis_query(pdev);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f946 	bl	8004338 <rndis_query>
			break;
 80040ac:	e02e      	b.n	800410c <USBD_CDC_EP0_RxReady+0xfc>

		case REMOTE_NDIS_SET_MSG:
			rndis_handle_set_msg(pdev);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fb4e 	bl	8004750 <rndis_handle_set_msg>
			break;
 80040b4:	e02a      	b.n	800410c <USBD_CDC_EP0_RxReady+0xfc>

		case REMOTE_NDIS_RESET_MSG:
			{
				rndis_reset_cmplt_t * m;
				m = ((rndis_reset_cmplt_t *)encapsulated_buffer);
 80040b6:	4b18      	ldr	r3, [pc, #96]	; (8004118 <USBD_CDC_EP0_RxReady+0x108>)
 80040b8:	613b      	str	r3, [r7, #16]
				rndis_state = rndis_uninitialized;
 80040ba:	4b19      	ldr	r3, [pc, #100]	; (8004120 <USBD_CDC_EP0_RxReady+0x110>)
 80040bc:	2200      	movs	r2, #0
 80040be:	701a      	strb	r2, [r3, #0]
				m->MessageType = REMOTE_NDIS_RESET_CMPLT;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4a19      	ldr	r2, [pc, #100]	; (8004128 <USBD_CDC_EP0_RxReady+0x118>)
 80040c4:	601a      	str	r2, [r3, #0]
				m->MessageLength = sizeof(rndis_reset_cmplt_t);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2210      	movs	r2, #16
 80040ca:	605a      	str	r2, [r3, #4]
				m->Status = RNDIS_STATUS_SUCCESS;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2200      	movs	r2, #0
 80040d0:	609a      	str	r2, [r3, #8]
				m->AddressingReset = 1; /* Make it look like we did something */
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2201      	movs	r2, #1
 80040d6:	60da      	str	r2, [r3, #12]
				/* m->AddressingReset = 0; - Windows halts if set to 1 for some reason */
				USBD_LL_Transmit(pdev,RNDIS_NOTIFICATION_IN_EP,(uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00",8);
 80040d8:	2308      	movs	r3, #8
 80040da:	4a12      	ldr	r2, [pc, #72]	; (8004124 <USBD_CDC_EP0_RxReady+0x114>)
 80040dc:	2181      	movs	r1, #129	; 0x81
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f00c fb70 	bl	80107c4 <USBD_LL_Transmit>
			}
			break;
 80040e4:	e012      	b.n	800410c <USBD_CDC_EP0_RxReady+0xfc>

		case REMOTE_NDIS_KEEPALIVE_MSG:
			{
				rndis_keepalive_cmplt_t * m;
				m = (rndis_keepalive_cmplt_t *)encapsulated_buffer;
 80040e6:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <USBD_CDC_EP0_RxReady+0x108>)
 80040e8:	60fb      	str	r3, [r7, #12]
				m->MessageType = REMOTE_NDIS_KEEPALIVE_CMPLT;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4a0f      	ldr	r2, [pc, #60]	; (800412c <USBD_CDC_EP0_RxReady+0x11c>)
 80040ee:	601a      	str	r2, [r3, #0]
				m->MessageLength = sizeof(rndis_keepalive_cmplt_t);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2210      	movs	r2, #16
 80040f4:	605a      	str	r2, [r3, #4]
				m->Status = RNDIS_STATUS_SUCCESS;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	60da      	str	r2, [r3, #12]
			}
			/* We have data to send back */
			USBD_LL_Transmit(pdev,RNDIS_NOTIFICATION_IN_EP,(uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00",8);
 80040fc:	2308      	movs	r3, #8
 80040fe:	4a09      	ldr	r2, [pc, #36]	; (8004124 <USBD_CDC_EP0_RxReady+0x114>)
 8004100:	2181      	movs	r1, #129	; 0x81
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f00c fb5e 	bl	80107c4 <USBD_LL_Transmit>
			break;
 8004108:	e000      	b.n	800410c <USBD_CDC_EP0_RxReady+0xfc>

		default:
			break;
 800410a:	bf00      	nop
	}
	return USBD_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20004d98 	.word	0x20004d98
 800411c:	80000002 	.word	0x80000002
 8004120:	2000542c 	.word	0x2000542c
 8004124:	08010dc8 	.word	0x08010dc8
 8004128:	80000006 	.word	0x80000006
 800412c:	80000008 	.word	0x80000008

08004130 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length){
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
    *length = sizeof(usbd_cdc_CfgDesc);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	224b      	movs	r2, #75	; 0x4b
 800413c:	801a      	strh	r2, [r3, #0]
    usbd_cdc_CfgDesc[2] = sizeof(usbd_cdc_CfgDesc) & 0xFF;
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <USBD_CDC_GetFSCfgDesc+0x28>)
 8004140:	224b      	movs	r2, #75	; 0x4b
 8004142:	709a      	strb	r2, [r3, #2]
    usbd_cdc_CfgDesc[3] = (sizeof(usbd_cdc_CfgDesc) >> 8) & 0xFF;
 8004144:	4b04      	ldr	r3, [pc, #16]	; (8004158 <USBD_CDC_GetFSCfgDesc+0x28>)
 8004146:	2200      	movs	r2, #0
 8004148:	70da      	strb	r2, [r3, #3]
    return usbd_cdc_CfgDesc;
 800414a:	4b03      	ldr	r3, [pc, #12]	; (8004158 <USBD_CDC_GetFSCfgDesc+0x28>)
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	20000040 	.word	0x20000040

0800415c <usbd_rndis_sof>:

// Start Of Frame event management
static uint8_t usbd_rndis_sof(USBD_HandleTypeDef *pdev){
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  //rndis_send();
  return usbd_cdc_transfer(pdev);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f831 	bl	80041cc <usbd_cdc_transfer>
 800416a:	4603      	mov	r3, r0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <rndis_iso_in_incomplete>:

static uint8_t rndis_iso_in_incomplete(USBD_HandleTypeDef *pdev, uint8_t epnum){
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	70fb      	strb	r3, [r7, #3]
  return usbd_cdc_transfer(pdev);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f823 	bl	80041cc <usbd_cdc_transfer>
 8004186:	4603      	mov	r3, r0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <rndis_iso_out_incomplete>:

static uint8_t rndis_iso_out_incomplete(USBD_HandleTypeDef *pdev, uint8_t epnum){
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	70fb      	strb	r3, [r7, #3]
  return usbd_cdc_transfer(pdev);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f815 	bl	80041cc <usbd_cdc_transfer>
 80041a2:	4603      	mov	r3, r0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <usbd_rndis_GetDeviceQualifierDesc>:

static uint8_t  *usbd_rndis_GetDeviceQualifierDesc (uint16_t *length){
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_DeviceQualifierDesc);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	220a      	movs	r2, #10
 80041b8:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceQualifierDesc;
 80041ba:	4b03      	ldr	r3, [pc, #12]	; (80041c8 <usbd_rndis_GetDeviceQualifierDesc+0x1c>)
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	2000008c 	.word	0x2000008c

080041cc <usbd_cdc_transfer>:

static uint8_t usbd_cdc_transfer(void *pdev){
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	if (sended != 0 || rndis_tx_ptr == NULL || rndis_tx_size <= 0 || rndis_state!=rndis_data_initialized) return USBD_OK;
 80041d4:	4b32      	ldr	r3, [pc, #200]	; (80042a0 <usbd_cdc_transfer+0xd4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10b      	bne.n	80041f4 <usbd_cdc_transfer+0x28>
 80041dc:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <usbd_cdc_transfer+0xd8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d007      	beq.n	80041f4 <usbd_cdc_transfer+0x28>
 80041e4:	4b30      	ldr	r3, [pc, #192]	; (80042a8 <usbd_cdc_transfer+0xdc>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	dd03      	ble.n	80041f4 <usbd_cdc_transfer+0x28>
 80041ec:	4b2f      	ldr	r3, [pc, #188]	; (80042ac <usbd_cdc_transfer+0xe0>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d001      	beq.n	80041f8 <usbd_cdc_transfer+0x2c>
 80041f4:	2300      	movs	r3, #0
 80041f6:	e04f      	b.n	8004298 <usbd_cdc_transfer+0xcc>
	if (rndis_first_tx)
 80041f8:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <usbd_cdc_transfer+0xe4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d037      	beq.n	8004270 <usbd_cdc_transfer+0xa4>
	{
		static uint8_t first[RNDIS_DATA_IN_SZ];
		rndis_data_packet_t *hdr;

		hdr = (rndis_data_packet_t *)first;
 8004200:	4b2c      	ldr	r3, [pc, #176]	; (80042b4 <usbd_cdc_transfer+0xe8>)
 8004202:	60bb      	str	r3, [r7, #8]
		memset(hdr, 0, sizeof(rndis_data_packet_t));
 8004204:	222c      	movs	r2, #44	; 0x2c
 8004206:	2100      	movs	r1, #0
 8004208:	68b8      	ldr	r0, [r7, #8]
 800420a:	f00c fc95 	bl	8010b38 <memset>
		hdr->MessageType = REMOTE_NDIS_PACKET_MSG;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]
		hdr->MessageLength = sizeof(rndis_data_packet_t) + rndis_tx_size;
 8004214:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <usbd_cdc_transfer+0xdc>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	605a      	str	r2, [r3, #4]
		hdr->DataOffset = sizeof(rndis_data_packet_t) - offsetof(rndis_data_packet_t, DataOffset);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2224      	movs	r2, #36	; 0x24
 8004224:	609a      	str	r2, [r3, #8]
		hdr->DataLength = rndis_tx_size;
 8004226:	4b20      	ldr	r3, [pc, #128]	; (80042a8 <usbd_cdc_transfer+0xdc>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	60da      	str	r2, [r3, #12]

		sended = RNDIS_DATA_IN_SZ - sizeof(rndis_data_packet_t);
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <usbd_cdc_transfer+0xd4>)
 8004232:	2214      	movs	r2, #20
 8004234:	601a      	str	r2, [r3, #0]
		if (sended > rndis_tx_size) sended = rndis_tx_size;
 8004236:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <usbd_cdc_transfer+0xd4>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <usbd_cdc_transfer+0xdc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	dd03      	ble.n	800424a <usbd_cdc_transfer+0x7e>
 8004242:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <usbd_cdc_transfer+0xdc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a16      	ldr	r2, [pc, #88]	; (80042a0 <usbd_cdc_transfer+0xd4>)
 8004248:	6013      	str	r3, [r2, #0]
		memcpy(first + sizeof(rndis_data_packet_t), rndis_tx_ptr, sended);
 800424a:	481b      	ldr	r0, [pc, #108]	; (80042b8 <usbd_cdc_transfer+0xec>)
 800424c:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <usbd_cdc_transfer+0xd8>)
 800424e:	6819      	ldr	r1, [r3, #0]
 8004250:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <usbd_cdc_transfer+0xd4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	461a      	mov	r2, r3
 8004256:	f00c fc4a 	bl	8010aee <memcpy>

		USBD_LL_Transmit(pdev, RNDIS_DATA_IN_EP, (uint8_t *)first, sizeof(rndis_data_packet_t) + sended);
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <usbd_cdc_transfer+0xd4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	332c      	adds	r3, #44	; 0x2c
 8004262:	b29b      	uxth	r3, r3
 8004264:	4a13      	ldr	r2, [pc, #76]	; (80042b4 <usbd_cdc_transfer+0xe8>)
 8004266:	2182      	movs	r1, #130	; 0x82
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f00c faab 	bl	80107c4 <USBD_LL_Transmit>
 800426e:	e012      	b.n	8004296 <usbd_cdc_transfer+0xca>
	}
	else
	{
		int n = rndis_tx_size;
 8004270:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <usbd_cdc_transfer+0xdc>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60fb      	str	r3, [r7, #12]
		if (n > RNDIS_DATA_IN_SZ) n = RNDIS_DATA_IN_SZ;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	dd01      	ble.n	8004280 <usbd_cdc_transfer+0xb4>
 800427c:	2340      	movs	r3, #64	; 0x40
 800427e:	60fb      	str	r3, [r7, #12]
		USBD_LL_Transmit(pdev, RNDIS_DATA_IN_EP, rndis_tx_ptr, n);
 8004280:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <usbd_cdc_transfer+0xd8>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	b29b      	uxth	r3, r3
 8004288:	2182      	movs	r1, #130	; 0x82
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f00c fa9a 	bl	80107c4 <USBD_LL_Transmit>
		sended = n;
 8004290:	4a03      	ldr	r2, [pc, #12]	; (80042a0 <usbd_cdc_transfer+0xd4>)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6013      	str	r3, [r2, #0]
	}
	return USBD_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20000304 	.word	0x20000304
 80042a4:	200002f8 	.word	0x200002f8
 80042a8:	200002fc 	.word	0x200002fc
 80042ac:	2000542c 	.word	0x2000542c
 80042b0:	20000004 	.word	0x20000004
 80042b4:	20000318 	.word	0x20000318
 80042b8:	20000344 	.word	0x20000344

080042bc <handle_packet>:

static void handle_packet(const char *data, int size){
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
	rndis_data_packet_t *p;
	p = (rndis_data_packet_t *)data;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	60fb      	str	r3, [r7, #12]
	if (size < sizeof(rndis_data_packet_t)) return;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b2b      	cmp	r3, #43	; 0x2b
 80042ce:	d929      	bls.n	8004324 <handle_packet+0x68>
	if (p->MessageType != REMOTE_NDIS_PACKET_MSG || p->MessageLength != size) return;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d127      	bne.n	8004328 <handle_packet+0x6c>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d122      	bne.n	8004328 <handle_packet+0x6c>
	if (p->DataOffset + offsetof(rndis_data_packet_t, DataOffset) + p->DataLength != size)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	4413      	add	r3, r2
 80042ec:	f103 0208 	add.w	r2, r3, #8
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d005      	beq.n	8004302 <handle_packet+0x46>
	{
		usb_eth_stat.rxbad++;
 80042f6:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <handle_packet+0x74>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	3301      	adds	r3, #1
 80042fc:	4a0c      	ldr	r2, [pc, #48]	; (8004330 <handle_packet+0x74>)
 80042fe:	60d3      	str	r3, [r2, #12]
		return;
 8004300:	e013      	b.n	800432a <handle_packet+0x6e>
	}
	usb_eth_stat.rxok++;
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <handle_packet+0x74>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	3301      	adds	r3, #1
 8004308:	4a09      	ldr	r2, [pc, #36]	; (8004330 <handle_packet+0x74>)
 800430a:	6053      	str	r3, [r2, #4]
	rndis_rxproc(&rndis_rx_buffer[p->DataOffset + offsetof(rndis_data_packet_t, DataOffset)], p->DataLength);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	3308      	adds	r3, #8
 8004312:	4a08      	ldr	r2, [pc, #32]	; (8004334 <handle_packet+0x78>)
 8004314:	441a      	add	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	4619      	mov	r1, r3
 800431c:	4610      	mov	r0, r2
 800431e:	f000 fae5 	bl	80048ec <rndis_rxproc>
 8004322:	e002      	b.n	800432a <handle_packet+0x6e>
	if (size < sizeof(rndis_data_packet_t)) return;
 8004324:	bf00      	nop
 8004326:	e000      	b.n	800432a <handle_packet+0x6e>
	if (p->MessageType != REMOTE_NDIS_PACKET_MSG || p->MessageLength != size) return;
 8004328:	bf00      	nop
}
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	200002e4 	.word	0x200002e4
 8004334:	20004780 	.word	0x20004780

08004338 <rndis_query>:

static const char *rndis_vendor = RNDIS_VENDOR;

void rndis_query(void  *pdev){
 8004338:	b590      	push	{r4, r7, lr}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	switch (((rndis_query_msg_t *)encapsulated_buffer)->Oid){
 8004340:	4bb2      	ldr	r3, [pc, #712]	; (800460c <rndis_query+0x2d4>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4ab2      	ldr	r2, [pc, #712]	; (8004610 <rndis_query+0x2d8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	f000 808d 	beq.w	8004466 <rndis_query+0x12e>
 800434c:	4ab0      	ldr	r2, [pc, #704]	; (8004610 <rndis_query+0x2d8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d83f      	bhi.n	80043d2 <rndis_query+0x9a>
 8004352:	4ab0      	ldr	r2, [pc, #704]	; (8004614 <rndis_query+0x2dc>)
 8004354:	4293      	cmp	r3, r2
 8004356:	f000 80e5 	beq.w	8004524 <rndis_query+0x1ec>
 800435a:	4aae      	ldr	r2, [pc, #696]	; (8004614 <rndis_query+0x2dc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d81b      	bhi.n	8004398 <rndis_query+0x60>
 8004360:	4aad      	ldr	r2, [pc, #692]	; (8004618 <rndis_query+0x2e0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	f000 8094 	beq.w	8004490 <rndis_query+0x158>
 8004368:	4aab      	ldr	r2, [pc, #684]	; (8004618 <rndis_query+0x2e0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d807      	bhi.n	800437e <rndis_query+0x46>
 800436e:	4aab      	ldr	r2, [pc, #684]	; (800461c <rndis_query+0x2e4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d071      	beq.n	8004458 <rndis_query+0x120>
 8004374:	4aaa      	ldr	r2, [pc, #680]	; (8004620 <rndis_query+0x2e8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	f000 809c 	beq.w	80044b4 <rndis_query+0x17c>
 800437c:	e13c      	b.n	80045f8 <rndis_query+0x2c0>
 800437e:	4aa9      	ldr	r2, [pc, #676]	; (8004624 <rndis_query+0x2ec>)
 8004380:	4293      	cmp	r3, r2
 8004382:	f000 80c1 	beq.w	8004508 <rndis_query+0x1d0>
 8004386:	4aa8      	ldr	r2, [pc, #672]	; (8004628 <rndis_query+0x2f0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	f000 8099 	beq.w	80044c0 <rndis_query+0x188>
 800438e:	4aa7      	ldr	r2, [pc, #668]	; (800462c <rndis_query+0x2f4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	f000 8083 	beq.w	800449c <rndis_query+0x164>
 8004396:	e12f      	b.n	80045f8 <rndis_query+0x2c0>
 8004398:	4aa5      	ldr	r2, [pc, #660]	; (8004630 <rndis_query+0x2f8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	f000 80ac 	beq.w	80044f8 <rndis_query+0x1c0>
 80043a0:	4aa3      	ldr	r2, [pc, #652]	; (8004630 <rndis_query+0x2f8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d808      	bhi.n	80043b8 <rndis_query+0x80>
 80043a6:	4aa3      	ldr	r2, [pc, #652]	; (8004634 <rndis_query+0x2fc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	f000 808f 	beq.w	80044cc <rndis_query+0x194>
 80043ae:	4aa1      	ldr	r2, [pc, #644]	; (8004634 <rndis_query+0x2fc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	f200 8092 	bhi.w	80044da <rndis_query+0x1a2>
 80043b6:	e0bc      	b.n	8004532 <rndis_query+0x1fa>
 80043b8:	4a9f      	ldr	r2, [pc, #636]	; (8004638 <rndis_query+0x300>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	f000 80de 	beq.w	800457c <rndis_query+0x244>
 80043c0:	4a9e      	ldr	r2, [pc, #632]	; (800463c <rndis_query+0x304>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	f000 80bc 	beq.w	8004540 <rndis_query+0x208>
 80043c8:	4a9d      	ldr	r2, [pc, #628]	; (8004640 <rndis_query+0x308>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	f000 80a3 	beq.w	8004516 <rndis_query+0x1de>
 80043d0:	e112      	b.n	80045f8 <rndis_query+0x2c0>
 80043d2:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 80043d6:	d054      	beq.n	8004482 <rndis_query+0x14a>
 80043d8:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 80043dc:	d81f      	bhi.n	800441e <rndis_query+0xe6>
 80043de:	4a99      	ldr	r2, [pc, #612]	; (8004644 <rndis_query+0x30c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	f000 80eb 	beq.w	80045bc <rndis_query+0x284>
 80043e6:	4a97      	ldr	r2, [pc, #604]	; (8004644 <rndis_query+0x30c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d80b      	bhi.n	8004404 <rndis_query+0xcc>
 80043ec:	4a96      	ldr	r2, [pc, #600]	; (8004648 <rndis_query+0x310>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	f000 80ac 	beq.w	800454c <rndis_query+0x214>
 80043f4:	4a95      	ldr	r2, [pc, #596]	; (800464c <rndis_query+0x314>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	f000 80d8 	beq.w	80045ac <rndis_query+0x274>
 80043fc:	4a94      	ldr	r2, [pc, #592]	; (8004650 <rndis_query+0x318>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d052      	beq.n	80044a8 <rndis_query+0x170>
 8004402:	e0f9      	b.n	80045f8 <rndis_query+0x2c0>
 8004404:	4a93      	ldr	r2, [pc, #588]	; (8004654 <rndis_query+0x31c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	f000 80e0 	beq.w	80045cc <rndis_query+0x294>
 800440c:	4a91      	ldr	r2, [pc, #580]	; (8004654 <rndis_query+0x31c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	f0c0 80e4 	bcc.w	80045dc <rndis_query+0x2a4>
 8004414:	4a90      	ldr	r2, [pc, #576]	; (8004658 <rndis_query+0x320>)
 8004416:	4293      	cmp	r3, r2
 8004418:	f000 80e8 	beq.w	80045ec <rndis_query+0x2b4>
 800441c:	e0ec      	b.n	80045f8 <rndis_query+0x2c0>
 800441e:	4a8f      	ldr	r2, [pc, #572]	; (800465c <rndis_query+0x324>)
 8004420:	4293      	cmp	r3, r2
 8004422:	f000 80a5 	beq.w	8004570 <rndis_query+0x238>
 8004426:	4a8d      	ldr	r2, [pc, #564]	; (800465c <rndis_query+0x324>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d808      	bhi.n	800443e <rndis_query+0x106>
 800442c:	4a8c      	ldr	r2, [pc, #560]	; (8004660 <rndis_query+0x328>)
 800442e:	4293      	cmp	r3, r2
 8004430:	f000 8098 	beq.w	8004564 <rndis_query+0x22c>
 8004434:	4a8a      	ldr	r2, [pc, #552]	; (8004660 <rndis_query+0x328>)
 8004436:	4293      	cmp	r3, r2
 8004438:	f200 808e 	bhi.w	8004558 <rndis_query+0x220>
 800443c:	e01a      	b.n	8004474 <rndis_query+0x13c>
 800443e:	4a89      	ldr	r2, [pc, #548]	; (8004664 <rndis_query+0x32c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	f000 80a7 	beq.w	8004594 <rndis_query+0x25c>
 8004446:	4a88      	ldr	r2, [pc, #544]	; (8004668 <rndis_query+0x330>)
 8004448:	4293      	cmp	r3, r2
 800444a:	f000 80a9 	beq.w	80045a0 <rndis_query+0x268>
 800444e:	4a87      	ldr	r2, [pc, #540]	; (800466c <rndis_query+0x334>)
 8004450:	4293      	cmp	r3, r2
 8004452:	f000 8099 	beq.w	8004588 <rndis_query+0x250>
 8004456:	e0cf      	b.n	80045f8 <rndis_query+0x2c0>
		case OID_GEN_SUPPORTED_LIST:         rndis_query_cmplt(pdev, RNDIS_STATUS_SUCCESS, OIDSupportedList, 4 * OID_LIST_LENGTH); return;
 8004458:	2358      	movs	r3, #88	; 0x58
 800445a:	4a85      	ldr	r2, [pc, #532]	; (8004670 <rndis_query+0x338>)
 800445c:	2100      	movs	r1, #0
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f918 	bl	8004694 <rndis_query_cmplt>
 8004464:	e0cf      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_VENDOR_DRIVER_VERSION:  rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0x00001000);  return;
 8004466:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800446a:	2100      	movs	r1, #0
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f943 	bl	80046f8 <rndis_query_cmplt32>
 8004472:	e0c8      	b.n	8004606 <rndis_query+0x2ce>
		case OID_802_3_CURRENT_ADDRESS:      rndis_query_cmplt(pdev, RNDIS_STATUS_SUCCESS, &station_hwaddr, 6); return;
 8004474:	2306      	movs	r3, #6
 8004476:	4a7f      	ldr	r2, [pc, #508]	; (8004674 <rndis_query+0x33c>)
 8004478:	2100      	movs	r1, #0
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f90a 	bl	8004694 <rndis_query_cmplt>
 8004480:	e0c1      	b.n	8004606 <rndis_query+0x2ce>
		case OID_802_3_PERMANENT_ADDRESS:    rndis_query_cmplt(pdev, RNDIS_STATUS_SUCCESS, &permanent_hwaddr, 6); return;
 8004482:	2306      	movs	r3, #6
 8004484:	4a7c      	ldr	r2, [pc, #496]	; (8004678 <rndis_query+0x340>)
 8004486:	2100      	movs	r1, #0
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f903 	bl	8004694 <rndis_query_cmplt>
 800448e:	e0ba      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_MEDIA_SUPPORTED:        rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 8004490:	2200      	movs	r2, #0
 8004492:	2100      	movs	r1, #0
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f92f 	bl	80046f8 <rndis_query_cmplt32>
 800449a:	e0b4      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_MEDIA_IN_USE:           rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 800449c:	2200      	movs	r2, #0
 800449e:	2100      	movs	r1, #0
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f929 	bl	80046f8 <rndis_query_cmplt32>
 80044a6:	e0ae      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_PHYSICAL_MEDIUM:        rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 80044a8:	2200      	movs	r2, #0
 80044aa:	2100      	movs	r1, #0
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f923 	bl	80046f8 <rndis_query_cmplt32>
 80044b2:	e0a8      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_HARDWARE_STATUS:        rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 80044b4:	2200      	movs	r2, #0
 80044b6:	2100      	movs	r1, #0
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f91d 	bl	80046f8 <rndis_query_cmplt32>
 80044be:	e0a2      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_LINK_SPEED:             rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, RNDIS_LINK_SPEED / 100); return;
 80044c0:	4a6e      	ldr	r2, [pc, #440]	; (800467c <rndis_query+0x344>)
 80044c2:	2100      	movs	r1, #0
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f917 	bl	80046f8 <rndis_query_cmplt32>
 80044ca:	e09c      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_VENDOR_ID:              rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0x00FFFFFF); return;
 80044cc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80044d0:	2100      	movs	r1, #0
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f910 	bl	80046f8 <rndis_query_cmplt32>
 80044d8:	e095      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_VENDOR_DESCRIPTION:     rndis_query_cmplt(pdev, RNDIS_STATUS_SUCCESS, rndis_vendor, strlen(rndis_vendor) + 1); return;
 80044da:	4b69      	ldr	r3, [pc, #420]	; (8004680 <rndis_query+0x348>)
 80044dc:	681c      	ldr	r4, [r3, #0]
 80044de:	4b68      	ldr	r3, [pc, #416]	; (8004680 <rndis_query+0x348>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fb fe7c 	bl	80001e0 <strlen>
 80044e8:	4603      	mov	r3, r0
 80044ea:	3301      	adds	r3, #1
 80044ec:	4622      	mov	r2, r4
 80044ee:	2100      	movs	r1, #0
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f8cf 	bl	8004694 <rndis_query_cmplt>
 80044f6:	e086      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_CURRENT_PACKET_FILTER:  rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, oid_packet_filter); return;
 80044f8:	4b62      	ldr	r3, [pc, #392]	; (8004684 <rndis_query+0x34c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	2100      	movs	r1, #0
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f8f9 	bl	80046f8 <rndis_query_cmplt32>
 8004506:	e07e      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_MAXIMUM_FRAME_SIZE:     rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE - ETH_HEADER_SIZE); return;
 8004508:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800450c:	2100      	movs	r1, #0
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8f2 	bl	80046f8 <rndis_query_cmplt32>
 8004514:	e077      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_MAXIMUM_TOTAL_SIZE:     rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE); return;
 8004516:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800451a:	2100      	movs	r1, #0
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f8eb 	bl	80046f8 <rndis_query_cmplt32>
 8004522:	e070      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_TRANSMIT_BLOCK_SIZE:    rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE); return;
 8004524:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8004528:	2100      	movs	r1, #0
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8e4 	bl	80046f8 <rndis_query_cmplt32>
 8004530:	e069      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_RECEIVE_BLOCK_SIZE:     rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE); return;
 8004532:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8004536:	2100      	movs	r1, #0
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f8dd 	bl	80046f8 <rndis_query_cmplt32>
 800453e:	e062      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_MEDIA_CONNECT_STATUS:   rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, NDIS_MEDIA_STATE_CONNECTED); return;
 8004540:	2200      	movs	r2, #0
 8004542:	2100      	movs	r1, #0
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f8d7 	bl	80046f8 <rndis_query_cmplt32>
 800454a:	e05c      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_RNDIS_CONFIG_PARAMETER: rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 800454c:	2200      	movs	r2, #0
 800454e:	2100      	movs	r1, #0
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f8d1 	bl	80046f8 <rndis_query_cmplt32>
 8004556:	e056      	b.n	8004606 <rndis_query+0x2ce>
		case OID_802_3_MAXIMUM_LIST_SIZE:    rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 1); return;
 8004558:	2201      	movs	r2, #1
 800455a:	2100      	movs	r1, #0
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f8cb 	bl	80046f8 <rndis_query_cmplt32>
 8004562:	e050      	b.n	8004606 <rndis_query+0x2ce>
		case OID_802_3_MULTICAST_LIST:       rndis_query_cmplt32(pdev, RNDIS_STATUS_NOT_SUPPORTED, 0); return;
 8004564:	2200      	movs	r2, #0
 8004566:	4948      	ldr	r1, [pc, #288]	; (8004688 <rndis_query+0x350>)
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f8c5 	bl	80046f8 <rndis_query_cmplt32>
 800456e:	e04a      	b.n	8004606 <rndis_query+0x2ce>
		case OID_802_3_MAC_OPTIONS:          rndis_query_cmplt32(pdev, RNDIS_STATUS_NOT_SUPPORTED, 0); return;
 8004570:	2200      	movs	r2, #0
 8004572:	4945      	ldr	r1, [pc, #276]	; (8004688 <rndis_query+0x350>)
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f8bf 	bl	80046f8 <rndis_query_cmplt32>
 800457a:	e044      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_MAC_OPTIONS:            rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, /*MAC_OPT*/ 0); return;
 800457c:	2200      	movs	r2, #0
 800457e:	2100      	movs	r1, #0
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f8b9 	bl	80046f8 <rndis_query_cmplt32>
 8004586:	e03e      	b.n	8004606 <rndis_query+0x2ce>
		case OID_802_3_RCV_ERROR_ALIGNMENT:  rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 8004588:	2200      	movs	r2, #0
 800458a:	2100      	movs	r1, #0
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f8b3 	bl	80046f8 <rndis_query_cmplt32>
 8004592:	e038      	b.n	8004606 <rndis_query+0x2ce>
		case OID_802_3_XMIT_ONE_COLLISION:   rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 8004594:	2200      	movs	r2, #0
 8004596:	2100      	movs	r1, #0
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f8ad 	bl	80046f8 <rndis_query_cmplt32>
 800459e:	e032      	b.n	8004606 <rndis_query+0x2ce>
		case OID_802_3_XMIT_MORE_COLLISIONS: rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 80045a0:	2200      	movs	r2, #0
 80045a2:	2100      	movs	r1, #0
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f8a7 	bl	80046f8 <rndis_query_cmplt32>
 80045aa:	e02c      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_XMIT_OK:                rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, usb_eth_stat.txok); return;
 80045ac:	4b37      	ldr	r3, [pc, #220]	; (800468c <rndis_query+0x354>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	2100      	movs	r1, #0
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f89f 	bl	80046f8 <rndis_query_cmplt32>
 80045ba:	e024      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_RCV_OK:                 rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, usb_eth_stat.rxok); return;
 80045bc:	4b33      	ldr	r3, [pc, #204]	; (800468c <rndis_query+0x354>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	461a      	mov	r2, r3
 80045c2:	2100      	movs	r1, #0
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f897 	bl	80046f8 <rndis_query_cmplt32>
 80045ca:	e01c      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_RCV_ERROR:              rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, usb_eth_stat.rxbad); return;
 80045cc:	4b2f      	ldr	r3, [pc, #188]	; (800468c <rndis_query+0x354>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	461a      	mov	r2, r3
 80045d2:	2100      	movs	r1, #0
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f88f 	bl	80046f8 <rndis_query_cmplt32>
 80045da:	e014      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_XMIT_ERROR:             rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, usb_eth_stat.txbad); return;
 80045dc:	4b2b      	ldr	r3, [pc, #172]	; (800468c <rndis_query+0x354>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	461a      	mov	r2, r3
 80045e2:	2100      	movs	r1, #0
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f887 	bl	80046f8 <rndis_query_cmplt32>
 80045ea:	e00c      	b.n	8004606 <rndis_query+0x2ce>
		case OID_GEN_RCV_NO_BUFFER:          rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 80045ec:	2200      	movs	r2, #0
 80045ee:	2100      	movs	r1, #0
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f881 	bl	80046f8 <rndis_query_cmplt32>
 80045f6:	e006      	b.n	8004606 <rndis_query+0x2ce>
		default:                             rndis_query_cmplt(pdev, RNDIS_STATUS_FAILURE, NULL, 0); return;
 80045f8:	2300      	movs	r3, #0
 80045fa:	2200      	movs	r2, #0
 80045fc:	4924      	ldr	r1, [pc, #144]	; (8004690 <rndis_query+0x358>)
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f848 	bl	8004694 <rndis_query_cmplt>
 8004604:	bf00      	nop
	}
}
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	bd90      	pop	{r4, r7, pc}
 800460c:	20004d98 	.word	0x20004d98
 8004610:	00010116 	.word	0x00010116
 8004614:	0001010a 	.word	0x0001010a
 8004618:	00010103 	.word	0x00010103
 800461c:	00010101 	.word	0x00010101
 8004620:	00010102 	.word	0x00010102
 8004624:	00010106 	.word	0x00010106
 8004628:	00010107 	.word	0x00010107
 800462c:	00010104 	.word	0x00010104
 8004630:	0001010e 	.word	0x0001010e
 8004634:	0001010c 	.word	0x0001010c
 8004638:	00010113 	.word	0x00010113
 800463c:	00010114 	.word	0x00010114
 8004640:	00010111 	.word	0x00010111
 8004644:	00020102 	.word	0x00020102
 8004648:	0001021b 	.word	0x0001021b
 800464c:	00020101 	.word	0x00020101
 8004650:	00010202 	.word	0x00010202
 8004654:	00020104 	.word	0x00020104
 8004658:	00020105 	.word	0x00020105
 800465c:	01010105 	.word	0x01010105
 8004660:	01010103 	.word	0x01010103
 8004664:	01020102 	.word	0x01020102
 8004668:	01020103 	.word	0x01020103
 800466c:	01020101 	.word	0x01020101
 8004670:	08010ec0 	.word	0x08010ec0
 8004674:	08010f18 	.word	0x08010f18
 8004678:	08010f20 	.word	0x08010f20
 800467c:	0001d4c0 	.word	0x0001d4c0
 8004680:	20000098 	.word	0x20000098
 8004684:	200002f4 	.word	0x200002f4
 8004688:	c00000bb 	.word	0xc00000bb
 800468c:	200002e4 	.word	0x200002e4
 8004690:	c0000001 	.word	0xc0000001

08004694 <rndis_query_cmplt>:

void rndis_query_cmplt(void *pdev, int status, const void *data, int size){
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
	rndis_query_cmplt_t *c;
	c = (rndis_query_cmplt_t *)encapsulated_buffer;
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <rndis_query_cmplt+0x58>)
 80046a4:	617b      	str	r3, [r7, #20]
	c->MessageType = REMOTE_NDIS_QUERY_CMPLT;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	4a11      	ldr	r2, [pc, #68]	; (80046f0 <rndis_query_cmplt+0x5c>)
 80046aa:	601a      	str	r2, [r3, #0]
	c->MessageLength = sizeof(rndis_query_cmplt_t) + size;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	f103 0218 	add.w	r2, r3, #24
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	605a      	str	r2, [r3, #4]
	c->InformationBufferLength = size;
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	611a      	str	r2, [r3, #16]
	c->InformationBufferOffset = 16;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2210      	movs	r2, #16
 80046c0:	615a      	str	r2, [r3, #20]
	c->Status = status;
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	60da      	str	r2, [r3, #12]
	memcpy(c + 1, data, size);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	3318      	adds	r3, #24
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f00c fa0c 	bl	8010aee <memcpy>
	USBD_LL_Transmit(pdev, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 80046d6:	2308      	movs	r3, #8
 80046d8:	4a06      	ldr	r2, [pc, #24]	; (80046f4 <rndis_query_cmplt+0x60>)
 80046da:	2181      	movs	r1, #129	; 0x81
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f00c f871 	bl	80107c4 <USBD_LL_Transmit>
}
 80046e2:	bf00      	nop
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20004d98 	.word	0x20004d98
 80046f0:	80000004 	.word	0x80000004
 80046f4:	08010dc8 	.word	0x08010dc8

080046f8 <rndis_query_cmplt32>:

void rndis_query_cmplt32(void *pdev, int status, uint32_t data){
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
	rndis_query_cmplt_t *c;
	c = (rndis_query_cmplt_t *)encapsulated_buffer;
 8004704:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <rndis_query_cmplt32+0x4c>)
 8004706:	617b      	str	r3, [r7, #20]
	c->MessageType = REMOTE_NDIS_QUERY_CMPLT;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	4a0f      	ldr	r2, [pc, #60]	; (8004748 <rndis_query_cmplt32+0x50>)
 800470c:	601a      	str	r2, [r3, #0]
	c->MessageLength = sizeof(rndis_query_cmplt_t) + 4;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	221c      	movs	r2, #28
 8004712:	605a      	str	r2, [r3, #4]
	c->InformationBufferLength = 4;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2204      	movs	r2, #4
 8004718:	611a      	str	r2, [r3, #16]
	c->InformationBufferOffset = 16;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2210      	movs	r2, #16
 800471e:	615a      	str	r2, [r3, #20]
	c->Status = status;
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	60da      	str	r2, [r3, #12]
	*(uint32_t *)(c + 1) = data;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	3318      	adds	r3, #24
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	601a      	str	r2, [r3, #0]
	USBD_LL_Transmit(pdev, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 800472e:	2308      	movs	r3, #8
 8004730:	4a06      	ldr	r2, [pc, #24]	; (800474c <rndis_query_cmplt32+0x54>)
 8004732:	2181      	movs	r1, #129	; 0x81
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f00c f845 	bl	80107c4 <USBD_LL_Transmit>
}
 800473a:	bf00      	nop
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20004d98 	.word	0x20004d98
 8004748:	80000004 	.word	0x80000004
 800474c:	08010dc8 	.word	0x08010dc8

08004750 <rndis_handle_set_msg>:
#define PARMNAME  ((uint8_t *)CFGBUF + CFGBUF->ParameterNameOffset)
#define PARMVALUE ((uint8_t *)CFGBUF + CFGBUF->ParameterValueOffset)
#define PARMVALUELENGTH	CFGBUF->ParameterValueLength
#define PARM_NAME_LENGTH 25 /* Maximum parameter name length */

void rndis_handle_set_msg(void  *pdev){
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
	rndis_set_cmplt_t *c;
	rndis_set_msg_t *m;
	rndis_Oid_t oid;

	c = (rndis_set_cmplt_t *)encapsulated_buffer;
 8004758:	4b2c      	ldr	r3, [pc, #176]	; (800480c <rndis_handle_set_msg+0xbc>)
 800475a:	61fb      	str	r3, [r7, #28]
	m = (rndis_set_msg_t *)encapsulated_buffer;
 800475c:	4b2b      	ldr	r3, [pc, #172]	; (800480c <rndis_handle_set_msg+0xbc>)
 800475e:	61bb      	str	r3, [r7, #24]
		parmlength -= 2;
		i++;
	}
	*/

	oid = m->Oid;
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	617b      	str	r3, [r7, #20]
	c->MessageType = REMOTE_NDIS_SET_CMPLT;
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	4a29      	ldr	r2, [pc, #164]	; (8004810 <rndis_handle_set_msg+0xc0>)
 800476a:	601a      	str	r2, [r3, #0]
	c->MessageLength = sizeof(rndis_set_cmplt_t);
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	2210      	movs	r2, #16
 8004770:	605a      	str	r2, [r3, #4]
	c->Status = RNDIS_STATUS_SUCCESS;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	2200      	movs	r2, #0
 8004776:	60da      	str	r2, [r3, #12]

	switch (oid)
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4a26      	ldr	r2, [pc, #152]	; (8004814 <rndis_handle_set_msg+0xc4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d036      	beq.n	80047ee <rndis_handle_set_msg+0x9e>
 8004780:	4a24      	ldr	r2, [pc, #144]	; (8004814 <rndis_handle_set_msg+0xc4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d806      	bhi.n	8004794 <rndis_handle_set_msg+0x44>
 8004786:	4a24      	ldr	r2, [pc, #144]	; (8004818 <rndis_handle_set_msg+0xc8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d017      	beq.n	80047bc <rndis_handle_set_msg+0x6c>
 800478c:	4a23      	ldr	r2, [pc, #140]	; (800481c <rndis_handle_set_msg+0xcc>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d02f      	beq.n	80047f2 <rndis_handle_set_msg+0xa2>
 8004792:	e028      	b.n	80047e6 <rndis_handle_set_msg+0x96>
 8004794:	4a22      	ldr	r2, [pc, #136]	; (8004820 <rndis_handle_set_msg+0xd0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <rndis_handle_set_msg+0x52>
 800479a:	4a22      	ldr	r2, [pc, #136]	; (8004824 <rndis_handle_set_msg+0xd4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d02a      	beq.n	80047f6 <rndis_handle_set_msg+0xa6>
 80047a0:	e021      	b.n	80047e6 <rndis_handle_set_msg+0x96>
	{
		/* Parameters set up in 'Advanced' tab */
		case OID_GEN_RNDIS_CONFIG_PARAMETER:
			{
                rndis_config_parameter_t *p;
				char *ptr = (char *)m;
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	613b      	str	r3, [r7, #16]
				ptr += sizeof(rndis_generic_msg_t);
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	3308      	adds	r3, #8
 80047aa:	613b      	str	r3, [r7, #16]
				ptr += m->InformationBufferOffset;
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
				p = (rndis_config_parameter_t *)ptr;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	60fb      	str	r3, [r7, #12]
				//rndis_handle_config_parm(ptr, p->ParameterNameOffset, p->ParameterValueOffset, p->ParameterNameLength, p->ParameterValueLength);
			}
			break;
 80047ba:	e01d      	b.n	80047f8 <rndis_handle_set_msg+0xa8>

		/* Mandatory general OIDs */
		case OID_GEN_CURRENT_PACKET_FILTER:
			oid_packet_filter = *INFBUF;
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	f103 0208 	add.w	r2, r3, #8
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	4413      	add	r3, r2
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a17      	ldr	r2, [pc, #92]	; (8004828 <rndis_handle_set_msg+0xd8>)
 80047cc:	6013      	str	r3, [r2, #0]
			if (oid_packet_filter)
 80047ce:	4b16      	ldr	r3, [pc, #88]	; (8004828 <rndis_handle_set_msg+0xd8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <rndis_handle_set_msg+0x8e>
			{
				//rndis_packetFilter(oid_packet_filter);
				rndis_state = rndis_data_initialized;
 80047d6:	4b15      	ldr	r3, [pc, #84]	; (800482c <rndis_handle_set_msg+0xdc>)
 80047d8:	2202      	movs	r2, #2
 80047da:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				rndis_state = rndis_initialized;
			}
			break;
 80047dc:	e00c      	b.n	80047f8 <rndis_handle_set_msg+0xa8>
				rndis_state = rndis_initialized;
 80047de:	4b13      	ldr	r3, [pc, #76]	; (800482c <rndis_handle_set_msg+0xdc>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	701a      	strb	r2, [r3, #0]
			break;
 80047e4:	e008      	b.n	80047f8 <rndis_handle_set_msg+0xa8>
		/* Power Managment: fails for now */
		case OID_PNP_ADD_WAKE_UP_PATTERN:
		case OID_PNP_REMOVE_WAKE_UP_PATTERN:
		case OID_PNP_ENABLE_WAKE_UP:
		default:
			c->Status = RNDIS_STATUS_FAILURE;
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	4a11      	ldr	r2, [pc, #68]	; (8004830 <rndis_handle_set_msg+0xe0>)
 80047ea:	60da      	str	r2, [r3, #12]
			break;
 80047ec:	e004      	b.n	80047f8 <rndis_handle_set_msg+0xa8>
			break;
 80047ee:	bf00      	nop
 80047f0:	e002      	b.n	80047f8 <rndis_handle_set_msg+0xa8>
			break;
 80047f2:	bf00      	nop
 80047f4:	e000      	b.n	80047f8 <rndis_handle_set_msg+0xa8>
			break;
 80047f6:	bf00      	nop
	}

	/* c->MessageID is same as before */
	USBD_LL_Transmit(pdev, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 80047f8:	2308      	movs	r3, #8
 80047fa:	4a0e      	ldr	r2, [pc, #56]	; (8004834 <rndis_handle_set_msg+0xe4>)
 80047fc:	2181      	movs	r1, #129	; 0x81
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f00b ffe0 	bl	80107c4 <USBD_LL_Transmit>
	return;
 8004804:	bf00      	nop
}
 8004806:	3720      	adds	r7, #32
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20004d98 	.word	0x20004d98
 8004810:	80000005 	.word	0x80000005
 8004814:	00010112 	.word	0x00010112
 8004818:	0001010e 	.word	0x0001010e
 800481c:	0001010f 	.word	0x0001010f
 8004820:	0001021b 	.word	0x0001021b
 8004824:	01010103 	.word	0x01010103
 8004828:	200002f4 	.word	0x200002f4
 800482c:	2000542c 	.word	0x2000542c
 8004830:	c0000001 	.word	0xc0000001
 8004834:	08010dc8 	.word	0x08010dc8

08004838 <xNetworkInterfaceInitialise>:

BaseType_t xNetworkInterfaceInitialise( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af02      	add	r7, sp, #8
	xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, configMAX_PRIORITIES - 1, &xEMACTaskHandle );
 800483e:	4b07      	ldr	r3, [pc, #28]	; (800485c <xNetworkInterfaceInitialise+0x24>)
 8004840:	9301      	str	r3, [sp, #4]
 8004842:	2306      	movs	r3, #6
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	2300      	movs	r3, #0
 8004848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800484c:	4904      	ldr	r1, [pc, #16]	; (8004860 <xNetworkInterfaceInitialise+0x28>)
 800484e:	4805      	ldr	r0, [pc, #20]	; (8004864 <xNetworkInterfaceInitialise+0x2c>)
 8004850:	f002 fcd0 	bl	80071f4 <xTaskCreate>

    return pdTRUE;
 8004854:	2301      	movs	r3, #1
}
 8004856:	4618      	mov	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	20000308 	.word	0x20000308
 8004860:	08010ddc 	.word	0x08010ddc
 8004864:	08004965 	.word	0x08004965

08004868 <xNetworkInterfaceOutput>:

BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor, BaseType_t xReleaseAfterSend ){
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
    This example assumes SendData() is a peripheral driver library function that
    takes a pointer to the start of the data to be sent and the length of the
    data to be sent as two separate parameters.  The start of the data is located
    by pxDescriptor->pucEthernetBuffer.  The length of the data is located
    by pxDescriptor->xDataLength. */
	if (pxDescriptor->xDataLength <= 0 ||
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <xNetworkInterfaceOutput+0x26>
			pxDescriptor->xDataLength > ETH_MAX_PACKET_SIZE ||
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
	if (pxDescriptor->xDataLength <= 0 ||
 800487e:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8004882:	4293      	cmp	r3, r2
 8004884:	d803      	bhi.n	800488e <xNetworkInterfaceOutput+0x26>
		rndis_tx_size > 0) return pdFALSE;
 8004886:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <xNetworkInterfaceOutput+0x70>)
 8004888:	681b      	ldr	r3, [r3, #0]
			pxDescriptor->xDataLength > ETH_MAX_PACKET_SIZE ||
 800488a:	2b00      	cmp	r3, #0
 800488c:	dd01      	ble.n	8004892 <xNetworkInterfaceOutput+0x2a>
		rndis_tx_size > 0) return pdFALSE;
 800488e:	2300      	movs	r3, #0
 8004890:	e01e      	b.n	80048d0 <xNetworkInterfaceOutput+0x68>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004892:	b672      	cpsid	i

	__disable_irq();
	rndis_first_tx = true;
 8004894:	4b11      	ldr	r3, [pc, #68]	; (80048dc <xNetworkInterfaceOutput+0x74>)
 8004896:	2201      	movs	r2, #1
 8004898:	601a      	str	r2, [r3, #0]
	memcpy((void *) data_to_send, (void *) pxDescriptor->pucEthernetBuffer, pxDescriptor->xDataLength);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6999      	ldr	r1, [r3, #24]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	461a      	mov	r2, r3
 80048a4:	480e      	ldr	r0, [pc, #56]	; (80048e0 <xNetworkInterfaceOutput+0x78>)
 80048a6:	f00c f922 	bl	8010aee <memcpy>
	rndis_sended = 0;
 80048aa:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <xNetworkInterfaceOutput+0x7c>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
	rndis_tx_ptr = (uint8_t *)data_to_send;
 80048b0:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <xNetworkInterfaceOutput+0x80>)
 80048b2:	4a0b      	ldr	r2, [pc, #44]	; (80048e0 <xNetworkInterfaceOutput+0x78>)
 80048b4:	601a      	str	r2, [r3, #0]
	rndis_tx_size = pxDescriptor->xDataLength;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	461a      	mov	r2, r3
 80048bc:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <xNetworkInterfaceOutput+0x70>)
 80048be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80048c0:	b662      	cpsie	i
	//usbd_cdc_transfer(pDev);
	__enable_irq();
    /* Call the standard trace macro to log the send event. */
    iptraceNETWORK_INTERFACE_TRANSMIT();
	if( xReleaseAfterSend != pdFALSE ){
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <xNetworkInterfaceOutput+0x66>
        /* It is assumed SendData() copies the data out of the FreeRTOS+TCP Ethernet
        buffer.  The Ethernet buffer is therefore no longer needed, and must be
        freed for re-use. */
        vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f00b f9a7 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
    }
    return pdTRUE;
 80048ce:	2301      	movs	r3, #1
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	200002fc 	.word	0x200002fc
 80048dc:	20000004 	.word	0x20000004
 80048e0:	20004640 	.word	0x20004640
 80048e4:	20000300 	.word	0x20000300
 80048e8:	200002f8 	.word	0x200002f8

080048ec <rndis_rxproc>:

static void rndis_rxproc(const char *data, int size){
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
	memcpy((void *) rndis_rx_tcp_buffer, (void *) data, size);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4814      	ldr	r0, [pc, #80]	; (8004950 <rndis_rxproc+0x64>)
 80048fe:	f00c f8f6 	bl	8010aee <memcpy>
	rndis_tx_tcp_size = size;
 8004902:	4a14      	ldr	r2, [pc, #80]	; (8004954 <rndis_rxproc+0x68>)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	6013      	str	r3, [r2, #0]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]

	/* Ethernet RX-Complete callback function, elsewhere declared as weak. */
	ulISREvents |= EMAC_IF_RX_EVENT;
 800490c:	4b12      	ldr	r3, [pc, #72]	; (8004958 <rndis_rxproc+0x6c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	4a10      	ldr	r2, [pc, #64]	; (8004958 <rndis_rxproc+0x6c>)
 8004916:	6013      	str	r3, [r2, #0]
	if( xEMACTaskHandle != NULL )
 8004918:	4b10      	ldr	r3, [pc, #64]	; (800495c <rndis_rxproc+0x70>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d012      	beq.n	8004946 <rndis_rxproc+0x5a>
	{
		vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 8004920:	4b0e      	ldr	r3, [pc, #56]	; (800495c <rndis_rxproc+0x70>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f107 020c 	add.w	r2, r7, #12
 8004928:	4611      	mov	r1, r2
 800492a:	4618      	mov	r0, r3
 800492c:	f003 fd30 	bl	8008390 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d007      	beq.n	8004946 <rndis_rxproc+0x5a>
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <rndis_rxproc+0x74>)
 8004938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	f3bf 8f6f 	isb	sy
	}
}
 8004946:	bf00      	nop
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20004e10 	.word	0x20004e10
 8004954:	20000310 	.word	0x20000310
 8004958:	2000030c 	.word	0x2000030c
 800495c:	20000308 	.word	0x20000308
 8004960:	e000ed04 	.word	0xe000ed04

08004964 <prvEMACHandlerTask>:
static void prvEMACHandlerTask( void *pvParameters )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	/* Used to indicate that xSendEventStructToIPTask() is being called because
	of an Ethernet receive event. */
	IPStackEvent_t xRxEvent;
    for( ;; )
    {
        ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 800496c:	f04f 31ff 	mov.w	r1, #4294967295
 8004970:	2000      	movs	r0, #0
 8004972:	f003 fcc5 	bl	8008300 <ulTaskNotifyTake>
		xBytesReceived = rndis_tx_tcp_size;
 8004976:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <prvEMACHandlerTask+0x7c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	617b      	str	r3, [r7, #20]
		if( xBytesReceived > 0 ){
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f4      	beq.n	800496c <prvEMACHandlerTask+0x8>
			/* Allocate a network buffer descriptor that points to a buffer
			large enough to hold the received frame.  As this is the simple
			rather than efficient example the received data will just be copied
			into this buffer. */
			pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( xBytesReceived, 0 );
 8004982:	2100      	movs	r1, #0
 8004984:	6978      	ldr	r0, [r7, #20]
 8004986:	f00b f8d1 	bl	800fb2c <pxGetNetworkBufferWithDescriptor>
 800498a:	6138      	str	r0, [r7, #16]

			if( pxBufferDescriptor != NULL )
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0ec      	beq.n	800496c <prvEMACHandlerTask+0x8>
				is assumed ReceiveData() is a peripheral driver function that
				copies the received data into a buffer passed in as the function's
				parameter.  Remember! While is is a simple robust technique -
				it is not efficient.  An example that uses a zero copy technique
				is provided further down this page. */
				memcpy((void *) pxBufferDescriptor->pucEthernetBuffer, (void *) rndis_rx_tcp_buffer, xBytesReceived);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4912      	ldr	r1, [pc, #72]	; (80049e4 <prvEMACHandlerTask+0x80>)
 800499a:	4618      	mov	r0, r3
 800499c:	f00c f8a7 	bl	8010aee <memcpy>
				pxBufferDescriptor->xDataLength = xBytesReceived;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	61da      	str	r2, [r3, #28]

				/* See if the data contained in the received Ethernet frame needs
				to be processed.  NOTE! It is preferable to do this in
				the interrupt service routine itself, which would remove the need
				to unblock this task for packets that don't need processing. */
				if( eConsiderFrameForProcessing( pxBufferDescriptor->pucEthernetBuffer )
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f005 fd90 	bl	800a4d0 <eConsiderFrameForProcessing>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d110      	bne.n	80049d8 <prvEMACHandlerTask+0x74>
																	  == eProcessBuffer ){
					/* The event about to be sent to the TCP/IP is an Rx event. */
					xRxEvent.eEventType = eNetworkRxEvent;
 80049b6:	2301      	movs	r3, #1
 80049b8:	723b      	strb	r3, [r7, #8]

					/* pvData is used to point to the network buffer descriptor that
					now references the received data. */
					xRxEvent.pvData = ( void * ) pxBufferDescriptor;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	60fb      	str	r3, [r7, #12]

					/* Send the data to the TCP/IP stack. */
					if( xSendEventStructToIPTask( &xRxEvent, 0 ) == pdFALSE )
 80049be:	f107 0308 	add.w	r3, r7, #8
 80049c2:	2100      	movs	r1, #0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f005 fd39 	bl	800a43c <xSendEventStructToIPTask>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1cd      	bne.n	800496c <prvEMACHandlerTask+0x8>
					{
						/* The buffer could not be sent to the IP task so the buffer
						must be released. */
						vReleaseNetworkBufferAndDescriptor( pxBufferDescriptor );
 80049d0:	6938      	ldr	r0, [r7, #16]
 80049d2:	f00b f923 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
 80049d6:	e7c9      	b.n	800496c <prvEMACHandlerTask+0x8>
				}
				else
				{
					/* The Ethernet frame can be dropped, but the Ethernet buffer
					must be released. */
					vReleaseNetworkBufferAndDescriptor( pxBufferDescriptor );
 80049d8:	6938      	ldr	r0, [r7, #16]
 80049da:	f00b f91f 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
        ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 80049de:	e7c5      	b.n	800496c <prvEMACHandlerTask+0x8>
 80049e0:	20000310 	.word	0x20000310
 80049e4:	20004e10 	.word	0x20004e10

080049e8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	4613      	mov	r3, r2
 80049f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 80049fc:	2302      	movs	r3, #2
 80049fe:	e01a      	b.n	8004a36 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	79fa      	ldrb	r2, [r7, #7]
 8004a2c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f00b fcfa 	bl	8010428 <USBD_LL_Init>
  
  return USBD_OK; 
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d006      	beq.n	8004a60 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
 8004a5e:	e001      	b.n	8004a64 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8004a60:	2302      	movs	r3, #2
 8004a62:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b082      	sub	sp, #8
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f00b fd2e 	bl	80104dc <USBD_LL_Start>
  
  return USBD_OK;  
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004aac:	2302      	movs	r3, #2
 8004aae:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00c      	beq.n	8004ad4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	78fa      	ldrb	r2, [r7, #3]
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b082      	sub	sp, #8
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	4611      	mov	r1, r2
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	4798      	blx	r3
  return USBD_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b14:	6839      	ldr	r1, [r7, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fd99 	bl	800564e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d00b      	beq.n	8004b58 <USBD_LL_SetupStage+0x54>
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d011      	beq.n	8004b68 <USBD_LL_SetupStage+0x64>
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d117      	bne.n	8004b78 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b4e:	4619      	mov	r1, r3
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f9c7 	bl	8004ee4 <USBD_StdDevReq>
    break;
 8004b56:	e01a      	b.n	8004b8e <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fa0f 	bl	8004f84 <USBD_StdItfReq>
    break;
 8004b66:	e012      	b.n	8004b8e <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fa3a 	bl	8004fea <USBD_StdEPReq>
    break;
 8004b76:	e00a      	b.n	8004b8e <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004b7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	4619      	mov	r1, r3
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f00b fd4e 	bl	8010628 <USBD_LL_StallEP>
    break;
 8004b8c:	bf00      	nop
  }  
  return USBD_OK;  
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004ba6:	7afb      	ldrb	r3, [r7, #11]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d138      	bne.n	8004c1e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004bb2:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d142      	bne.n	8004c44 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d914      	bls.n	8004bf4 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	1ad2      	subs	r2, r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4293      	cmp	r3, r2
 8004be2:	bf28      	it	cs
 8004be4:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fe23 	bl	8005838 <USBD_CtlContinueRx>
 8004bf2:	e027      	b.n	8004c44 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d105      	bne.n	8004c16 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 fe20 	bl	800585c <USBD_CtlSendStatus>
 8004c1c:	e012      	b.n	8004c44 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00c      	beq.n	8004c44 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d107      	bne.n	8004c44 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	7afa      	ldrb	r2, [r7, #11]
 8004c3e:	4611      	mov	r1, r2
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	4798      	blx	r3
  }  
  return USBD_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b086      	sub	sp, #24
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	460b      	mov	r3, r1
 8004c58:	607a      	str	r2, [r7, #4]
 8004c5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8004c5c:	7afb      	ldrb	r3, [r7, #11]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d16c      	bne.n	8004d3c <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3314      	adds	r3, #20
 8004c66:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d157      	bne.n	8004d22 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d915      	bls.n	8004caa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	1ad2      	subs	r2, r2, r3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fd9e 	bl	80057d8 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f00b fdc8 	bl	8010838 <USBD_LL_PrepareReceive>
 8004ca8:	e03b      	b.n	8004d22 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	68d2      	ldr	r2, [r2, #12]
 8004cb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cb6:	fb02 f201 	mul.w	r2, r2, r1
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d11c      	bne.n	8004cfa <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d316      	bcc.n	8004cfa <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d20f      	bcs.n	8004cfa <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2100      	movs	r1, #0
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 fd7a 	bl	80057d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004cec:	2300      	movs	r3, #0
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f00b fda0 	bl	8010838 <USBD_LL_PrepareReceive>
 8004cf8:	e013      	b.n	8004d22 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d105      	bne.n	8004d1c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 fdb0 	bl	8005882 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d11a      	bne.n	8004d62 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f7ff feac 	bl	8004a8a <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8004d3a:	e012      	b.n	8004d62 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00c      	beq.n	8004d62 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d107      	bne.n	8004d62 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	7afa      	ldrb	r2, [r7, #11]
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	4798      	blx	r3
  }  
  return USBD_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004d74:	2340      	movs	r3, #64	; 0x40
 8004d76:	2200      	movs	r2, #0
 8004d78:	2100      	movs	r1, #0
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f00b fbe0 	bl	8010540 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2240      	movs	r2, #64	; 0x40
 8004d84:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004d88:	2340      	movs	r3, #64	; 0x40
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2180      	movs	r1, #128	; 0x80
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f00b fbd6 	bl	8010540 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2240      	movs	r2, #64	; 0x40
 8004d98:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d009      	beq.n	8004dc0 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6852      	ldr	r2, [r2, #4]
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	4611      	mov	r1, r2
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	4798      	blx	r3
 
  
  return USBD_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	78fa      	ldrb	r2, [r7, #3]
 8004dda:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2204      	movs	r2, #4
 8004e02:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d10b      	bne.n	8004e60 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	460b      	mov	r3, r1
 8004e74:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6852      	ldr	r2, [r2, #4]
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	4798      	blx	r3
   
  return USBD_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8004eee:	2300      	movs	r3, #0
 8004ef0:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	785b      	ldrb	r3, [r3, #1]
 8004ef6:	2b09      	cmp	r3, #9
 8004ef8:	d839      	bhi.n	8004f6e <USBD_StdDevReq+0x8a>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <USBD_StdDevReq+0x1c>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f51 	.word	0x08004f51
 8004f04:	08004f65 	.word	0x08004f65
 8004f08:	08004f6f 	.word	0x08004f6f
 8004f0c:	08004f5b 	.word	0x08004f5b
 8004f10:	08004f6f 	.word	0x08004f6f
 8004f14:	08004f33 	.word	0x08004f33
 8004f18:	08004f29 	.word	0x08004f29
 8004f1c:	08004f6f 	.word	0x08004f6f
 8004f20:	08004f47 	.word	0x08004f47
 8004f24:	08004f3d 	.word	0x08004f3d
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8004f28:	6839      	ldr	r1, [r7, #0]
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f936 	bl	800519c <USBD_GetDescriptor>
    break;
 8004f30:	e022      	b.n	8004f78 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8004f32:	6839      	ldr	r1, [r7, #0]
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fa25 	bl	8005384 <USBD_SetAddress>
    break;
 8004f3a:	e01d      	b.n	8004f78 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fa5e 	bl	8005400 <USBD_SetConfig>
    break;
 8004f44:	e018      	b.n	8004f78 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fae1 	bl	8005510 <USBD_GetConfig>
    break;
 8004f4e:	e013      	b.n	8004f78 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fb0e 	bl	8005574 <USBD_GetStatus>
    break;
 8004f58:	e00e      	b.n	8004f78 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8004f5a:	6839      	ldr	r1, [r7, #0]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fb33 	bl	80055c8 <USBD_SetFeature>
    break;
 8004f62:	e009      	b.n	8004f78 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8004f64:	6839      	ldr	r1, [r7, #0]
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fb49 	bl	80055fe <USBD_ClrFeature>
    break;
 8004f6c:	e004      	b.n	8004f78 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8004f6e:	6839      	ldr	r1, [r7, #0]
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fba9 	bl	80056c8 <USBD_CtlError>
    break;
 8004f76:	bf00      	nop
  }
  
  return ret;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop

08004f84 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d11b      	bne.n	8004fd4 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	889b      	ldrh	r3, [r3, #4]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d811      	bhi.n	8004fca <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	6839      	ldr	r1, [r7, #0]
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	88db      	ldrh	r3, [r3, #6]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d110      	bne.n	8004fde <USBD_StdItfReq+0x5a>
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10d      	bne.n	8004fde <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fc4a 	bl	800585c <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8004fc8:	e009      	b.n	8004fde <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8004fca:	6839      	ldr	r1, [r7, #0]
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fb7b 	bl	80056c8 <USBD_CtlError>
    break;
 8004fd2:	e004      	b.n	8004fde <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fb76 	bl	80056c8 <USBD_CtlError>
    break;
 8004fdc:	e000      	b.n	8004fe0 <USBD_StdItfReq+0x5c>
    break;
 8004fde:	bf00      	nop
  }
  return USBD_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	889b      	ldrh	r3, [r3, #4]
 8004ffc:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005006:	2b20      	cmp	r3, #32
 8005008:	d108      	bne.n	800501c <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	6839      	ldr	r1, [r7, #0]
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4798      	blx	r3
    
    return USBD_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	e0ba      	b.n	8005192 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	785b      	ldrb	r3, [r3, #1]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d039      	beq.n	8005098 <USBD_StdEPReq+0xae>
 8005024:	2b03      	cmp	r3, #3
 8005026:	d002      	beq.n	800502e <USBD_StdEPReq+0x44>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d06b      	beq.n	8005104 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 800502c:	e0b0      	b.n	8005190 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005034:	2b02      	cmp	r3, #2
 8005036:	d002      	beq.n	800503e <USBD_StdEPReq+0x54>
 8005038:	2b03      	cmp	r3, #3
 800503a:	d00c      	beq.n	8005056 <USBD_StdEPReq+0x6c>
 800503c:	e025      	b.n	800508a <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800503e:	7bbb      	ldrb	r3, [r7, #14]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d027      	beq.n	8005094 <USBD_StdEPReq+0xaa>
 8005044:	7bbb      	ldrb	r3, [r7, #14]
 8005046:	2b80      	cmp	r3, #128	; 0x80
 8005048:	d024      	beq.n	8005094 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 800504a:	7bbb      	ldrb	r3, [r7, #14]
 800504c:	4619      	mov	r1, r3
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f00b faea 	bl	8010628 <USBD_LL_StallEP>
      break;	
 8005054:	e01e      	b.n	8005094 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	885b      	ldrh	r3, [r3, #2]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800505e:	7bbb      	ldrb	r3, [r7, #14]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <USBD_StdEPReq+0x8a>
 8005064:	7bbb      	ldrb	r3, [r7, #14]
 8005066:	2b80      	cmp	r3, #128	; 0x80
 8005068:	d004      	beq.n	8005074 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 800506a:	7bbb      	ldrb	r3, [r7, #14]
 800506c:	4619      	mov	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f00b fada 	bl	8010628 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	6839      	ldr	r1, [r7, #0]
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fbea 	bl	800585c <USBD_CtlSendStatus>
      break;
 8005088:	e005      	b.n	8005096 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 800508a:	6839      	ldr	r1, [r7, #0]
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fb1b 	bl	80056c8 <USBD_CtlError>
      break;    
 8005092:	e000      	b.n	8005096 <USBD_StdEPReq+0xac>
      break;	
 8005094:	bf00      	nop
    break;
 8005096:	e07b      	b.n	8005190 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d002      	beq.n	80050a8 <USBD_StdEPReq+0xbe>
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d00c      	beq.n	80050c0 <USBD_StdEPReq+0xd6>
 80050a6:	e024      	b.n	80050f2 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80050a8:	7bbb      	ldrb	r3, [r7, #14]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d026      	beq.n	80050fc <USBD_StdEPReq+0x112>
 80050ae:	7bbb      	ldrb	r3, [r7, #14]
 80050b0:	2b80      	cmp	r3, #128	; 0x80
 80050b2:	d023      	beq.n	80050fc <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 80050b4:	7bbb      	ldrb	r3, [r7, #14]
 80050b6:	4619      	mov	r1, r3
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f00b fab5 	bl	8010628 <USBD_LL_StallEP>
      break;	
 80050be:	e01d      	b.n	80050fc <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	885b      	ldrh	r3, [r3, #2]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d11b      	bne.n	8005100 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 80050c8:	7bbb      	ldrb	r3, [r7, #14]
 80050ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00b      	beq.n	80050ea <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80050d2:	7bbb      	ldrb	r3, [r7, #14]
 80050d4:	4619      	mov	r1, r3
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f00b fadc 	bl	8010694 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	6839      	ldr	r1, [r7, #0]
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fbb6 	bl	800585c <USBD_CtlSendStatus>
      break;
 80050f0:	e006      	b.n	8005100 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 80050f2:	6839      	ldr	r1, [r7, #0]
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fae7 	bl	80056c8 <USBD_CtlError>
      break;    
 80050fa:	e002      	b.n	8005102 <USBD_StdEPReq+0x118>
      break;	
 80050fc:	bf00      	nop
 80050fe:	e047      	b.n	8005190 <USBD_StdEPReq+0x1a6>
      break;
 8005100:	bf00      	nop
    break;
 8005102:	e045      	b.n	8005190 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800510a:	2b02      	cmp	r3, #2
 800510c:	d002      	beq.n	8005114 <USBD_StdEPReq+0x12a>
 800510e:	2b03      	cmp	r3, #3
 8005110:	d00b      	beq.n	800512a <USBD_StdEPReq+0x140>
 8005112:	e036      	b.n	8005182 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8005114:	7bbb      	ldrb	r3, [r7, #14]
 8005116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800511a:	2b00      	cmp	r3, #0
 800511c:	d036      	beq.n	800518c <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 800511e:	7bbb      	ldrb	r3, [r7, #14]
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f00b fa80 	bl	8010628 <USBD_LL_StallEP>
      break;	
 8005128:	e030      	b.n	800518c <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800512a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800512e:	2b00      	cmp	r3, #0
 8005130:	da08      	bge.n	8005144 <USBD_StdEPReq+0x15a>
 8005132:	7bbb      	ldrb	r3, [r7, #14]
 8005134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005138:	3301      	adds	r3, #1
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	4413      	add	r3, r2
 8005140:	3304      	adds	r3, #4
 8005142:	e007      	b.n	8005154 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8005144:	7bbb      	ldrb	r3, [r7, #14]
 8005146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800514a:	3310      	adds	r3, #16
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	4413      	add	r3, r2
 8005152:	3304      	adds	r3, #4
 8005154:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005156:	7bbb      	ldrb	r3, [r7, #14]
 8005158:	4619      	mov	r1, r3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f00b fad0 	bl	8010700 <USBD_LL_IsStallEP>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2201      	movs	r2, #1
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	e002      	b.n	8005174 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8005174:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8005176:	2202      	movs	r2, #2
 8005178:	4619      	mov	r1, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fb10 	bl	80057a0 <USBD_CtlSendData>
      break;
 8005180:	e005      	b.n	800518e <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8005182:	6839      	ldr	r1, [r7, #0]
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fa9f 	bl	80056c8 <USBD_CtlError>
      break;
 800518a:	e000      	b.n	800518e <USBD_StdEPReq+0x1a4>
      break;	
 800518c:	bf00      	nop
    break;
 800518e:	bf00      	nop
  }
  return ret;
 8005190:	7bfb      	ldrb	r3, [r7, #15]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	885b      	ldrh	r3, [r3, #2]
 80051aa:	0a1b      	lsrs	r3, r3, #8
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3b01      	subs	r3, #1
 80051b0:	2b06      	cmp	r3, #6
 80051b2:	f200 80c9 	bhi.w	8005348 <USBD_GetDescriptor+0x1ac>
 80051b6:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <USBD_GetDescriptor+0x20>)
 80051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051bc:	080051d9 	.word	0x080051d9
 80051c0:	080051f1 	.word	0x080051f1
 80051c4:	08005231 	.word	0x08005231
 80051c8:	08005349 	.word	0x08005349
 80051cc:	08005349 	.word	0x08005349
 80051d0:	080052f5 	.word	0x080052f5
 80051d4:	0800531b 	.word	0x0800531b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	7c12      	ldrb	r2, [r2, #16]
 80051e4:	f107 010a 	add.w	r1, r7, #10
 80051e8:	4610      	mov	r0, r2
 80051ea:	4798      	blx	r3
 80051ec:	60f8      	str	r0, [r7, #12]
    break;
 80051ee:	e0b0      	b.n	8005352 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	7c1b      	ldrb	r3, [r3, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10d      	bne.n	8005214 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	f107 020a 	add.w	r2, r7, #10
 8005204:	4610      	mov	r0, r2
 8005206:	4798      	blx	r3
 8005208:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3301      	adds	r3, #1
 800520e:	2202      	movs	r2, #2
 8005210:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005212:	e09e      	b.n	8005352 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	f107 020a 	add.w	r2, r7, #10
 8005220:	4610      	mov	r0, r2
 8005222:	4798      	blx	r3
 8005224:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3301      	adds	r3, #1
 800522a:	2202      	movs	r2, #2
 800522c:	701a      	strb	r2, [r3, #0]
    break;
 800522e:	e090      	b.n	8005352 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	885b      	ldrh	r3, [r3, #2]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b05      	cmp	r3, #5
 8005238:	d856      	bhi.n	80052e8 <USBD_GetDescriptor+0x14c>
 800523a:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <USBD_GetDescriptor+0xa4>)
 800523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005240:	08005259 	.word	0x08005259
 8005244:	08005271 	.word	0x08005271
 8005248:	08005289 	.word	0x08005289
 800524c:	080052a1 	.word	0x080052a1
 8005250:	080052b9 	.word	0x080052b9
 8005254:	080052d1 	.word	0x080052d1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	7c12      	ldrb	r2, [r2, #16]
 8005264:	f107 010a 	add.w	r1, r7, #10
 8005268:	4610      	mov	r0, r2
 800526a:	4798      	blx	r3
 800526c:	60f8      	str	r0, [r7, #12]
      break;
 800526e:	e040      	b.n	80052f2 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	7c12      	ldrb	r2, [r2, #16]
 800527c:	f107 010a 	add.w	r1, r7, #10
 8005280:	4610      	mov	r0, r2
 8005282:	4798      	blx	r3
 8005284:	60f8      	str	r0, [r7, #12]
      break;
 8005286:	e034      	b.n	80052f2 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	7c12      	ldrb	r2, [r2, #16]
 8005294:	f107 010a 	add.w	r1, r7, #10
 8005298:	4610      	mov	r0, r2
 800529a:	4798      	blx	r3
 800529c:	60f8      	str	r0, [r7, #12]
      break;
 800529e:	e028      	b.n	80052f2 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	7c12      	ldrb	r2, [r2, #16]
 80052ac:	f107 010a 	add.w	r1, r7, #10
 80052b0:	4610      	mov	r0, r2
 80052b2:	4798      	blx	r3
 80052b4:	60f8      	str	r0, [r7, #12]
      break;
 80052b6:	e01c      	b.n	80052f2 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	7c12      	ldrb	r2, [r2, #16]
 80052c4:	f107 010a 	add.w	r1, r7, #10
 80052c8:	4610      	mov	r0, r2
 80052ca:	4798      	blx	r3
 80052cc:	60f8      	str	r0, [r7, #12]
      break;
 80052ce:	e010      	b.n	80052f2 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	7c12      	ldrb	r2, [r2, #16]
 80052dc:	f107 010a 	add.w	r1, r7, #10
 80052e0:	4610      	mov	r0, r2
 80052e2:	4798      	blx	r3
 80052e4:	60f8      	str	r0, [r7, #12]
      break;
 80052e6:	e004      	b.n	80052f2 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f9ec 	bl	80056c8 <USBD_CtlError>
      return;
 80052f0:	e044      	b.n	800537c <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 80052f2:	e02e      	b.n	8005352 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	7c1b      	ldrb	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d109      	bne.n	8005310 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005304:	f107 020a 	add.w	r2, r7, #10
 8005308:	4610      	mov	r0, r2
 800530a:	4798      	blx	r3
 800530c:	60f8      	str	r0, [r7, #12]
      break;
 800530e:	e020      	b.n	8005352 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f9d8 	bl	80056c8 <USBD_CtlError>
      return;
 8005318:	e030      	b.n	800537c <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	7c1b      	ldrb	r3, [r3, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10d      	bne.n	800533e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	f107 020a 	add.w	r2, r7, #10
 800532e:	4610      	mov	r0, r2
 8005330:	4798      	blx	r3
 8005332:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3301      	adds	r3, #1
 8005338:	2207      	movs	r2, #7
 800533a:	701a      	strb	r2, [r3, #0]
      break; 
 800533c:	e009      	b.n	8005352 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f9c1 	bl	80056c8 <USBD_CtlError>
      return;
 8005346:	e019      	b.n	800537c <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f9bc 	bl	80056c8 <USBD_CtlError>
    return;
 8005350:	e014      	b.n	800537c <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8005352:	897b      	ldrh	r3, [r7, #10]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d011      	beq.n	800537c <USBD_GetDescriptor+0x1e0>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	88db      	ldrh	r3, [r3, #6]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00d      	beq.n	800537c <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	88da      	ldrh	r2, [r3, #6]
 8005364:	897b      	ldrh	r3, [r7, #10]
 8005366:	4293      	cmp	r3, r2
 8005368:	bf28      	it	cs
 800536a:	4613      	movcs	r3, r2
 800536c:	b29b      	uxth	r3, r3
 800536e:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8005370:	897b      	ldrh	r3, [r7, #10]
 8005372:	461a      	mov	r2, r3
 8005374:	68f9      	ldr	r1, [r7, #12]
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fa12 	bl	80057a0 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop

08005384 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	889b      	ldrh	r3, [r3, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d12c      	bne.n	80053f0 <USBD_SetAddress+0x6c>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	88db      	ldrh	r3, [r3, #6]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d128      	bne.n	80053f0 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	885b      	ldrh	r3, [r3, #2]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053a8:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d104      	bne.n	80053be <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 80053b4:	6839      	ldr	r1, [r7, #0]
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f986 	bl	80056c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80053bc:	e01c      	b.n	80053f8 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	7bfa      	ldrb	r2, [r7, #15]
 80053c2:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f00b f9c4 	bl	8010758 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fa43 	bl	800585c <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d004      	beq.n	80053e6 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80053e4:	e008      	b.n	80053f8 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80053ee:	e003      	b.n	80053f8 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 80053f0:	6839      	ldr	r1, [r7, #0]
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f968 	bl	80056c8 <USBD_CtlError>
  } 
}
 80053f8:	bf00      	nop
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	885b      	ldrh	r3, [r3, #2]
 800540e:	b2da      	uxtb	r2, r3
 8005410:	4b3e      	ldr	r3, [pc, #248]	; (800550c <USBD_SetConfig+0x10c>)
 8005412:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005414:	4b3d      	ldr	r3, [pc, #244]	; (800550c <USBD_SetConfig+0x10c>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d904      	bls.n	8005426 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 800541c:	6839      	ldr	r1, [r7, #0]
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f952 	bl	80056c8 <USBD_CtlError>
 8005424:	e06f      	b.n	8005506 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800542c:	2b02      	cmp	r3, #2
 800542e:	d002      	beq.n	8005436 <USBD_SetConfig+0x36>
 8005430:	2b03      	cmp	r3, #3
 8005432:	d023      	beq.n	800547c <USBD_SetConfig+0x7c>
 8005434:	e062      	b.n	80054fc <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8005436:	4b35      	ldr	r3, [pc, #212]	; (800550c <USBD_SetConfig+0x10c>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01a      	beq.n	8005474 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800543e:	4b33      	ldr	r3, [pc, #204]	; (800550c <USBD_SetConfig+0x10c>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2203      	movs	r2, #3
 800544c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005450:	4b2e      	ldr	r3, [pc, #184]	; (800550c <USBD_SetConfig+0x10c>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	4619      	mov	r1, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff fb22 	bl	8004aa0 <USBD_SetClassConfig>
 800545c:	4603      	mov	r3, r0
 800545e:	2b02      	cmp	r3, #2
 8005460:	d104      	bne.n	800546c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8005462:	6839      	ldr	r1, [r7, #0]
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f92f 	bl	80056c8 <USBD_CtlError>
          return;
 800546a:	e04c      	b.n	8005506 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f9f5 	bl	800585c <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8005472:	e048      	b.n	8005506 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f9f1 	bl	800585c <USBD_CtlSendStatus>
      break;
 800547a:	e044      	b.n	8005506 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 800547c:	4b23      	ldr	r3, [pc, #140]	; (800550c <USBD_SetConfig+0x10c>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d112      	bne.n	80054aa <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800548c:	4b1f      	ldr	r3, [pc, #124]	; (800550c <USBD_SetConfig+0x10c>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8005496:	4b1d      	ldr	r3, [pc, #116]	; (800550c <USBD_SetConfig+0x10c>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff fb1e 	bl	8004ade <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f9da 	bl	800585c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80054a8:	e02d      	b.n	8005506 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 80054aa:	4b18      	ldr	r3, [pc, #96]	; (800550c <USBD_SetConfig+0x10c>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d01d      	beq.n	80054f4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	4619      	mov	r1, r3
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7ff fb0c 	bl	8004ade <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80054c6:	4b11      	ldr	r3, [pc, #68]	; (800550c <USBD_SetConfig+0x10c>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80054d0:	4b0e      	ldr	r3, [pc, #56]	; (800550c <USBD_SetConfig+0x10c>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	4619      	mov	r1, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7ff fae2 	bl	8004aa0 <USBD_SetClassConfig>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d104      	bne.n	80054ec <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f8ef 	bl	80056c8 <USBD_CtlError>
          return;
 80054ea:	e00c      	b.n	8005506 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f9b5 	bl	800585c <USBD_CtlSendStatus>
      break;
 80054f2:	e008      	b.n	8005506 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f9b1 	bl	800585c <USBD_CtlSendStatus>
      break;
 80054fa:	e004      	b.n	8005506 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f8e2 	bl	80056c8 <USBD_CtlError>
      break;
 8005504:	bf00      	nop
    }
  }
}
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000358 	.word	0x20000358

08005510 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	88db      	ldrh	r3, [r3, #6]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d004      	beq.n	800552c <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f8cf 	bl	80056c8 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800552a:	e01f      	b.n	800556c <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005532:	2b02      	cmp	r3, #2
 8005534:	d002      	beq.n	800553c <USBD_GetConfig+0x2c>
 8005536:	2b03      	cmp	r3, #3
 8005538:	d00b      	beq.n	8005552 <USBD_GetConfig+0x42>
 800553a:	e012      	b.n	8005562 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8005546:	2201      	movs	r2, #1
 8005548:	4619      	mov	r1, r3
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f928 	bl	80057a0 <USBD_CtlSendData>
      break;
 8005550:	e00c      	b.n	800556c <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8005556:	2201      	movs	r2, #1
 8005558:	4619      	mov	r1, r3
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f920 	bl	80057a0 <USBD_CtlSendData>
      break;
 8005560:	e004      	b.n	800556c <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8005562:	6839      	ldr	r1, [r7, #0]
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f8af 	bl	80056c8 <USBD_CtlError>
      break;
 800556a:	bf00      	nop
}
 800556c:	bf00      	nop
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005584:	3b02      	subs	r3, #2
 8005586:	2b01      	cmp	r3, #1
 8005588:	d815      	bhi.n	80055b6 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005596:	2b00      	cmp	r3, #0
 8005598:	d005      	beq.n	80055a6 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f043 0202 	orr.w	r2, r3, #2
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 80055aa:	2202      	movs	r2, #2
 80055ac:	4619      	mov	r1, r3
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f8f6 	bl	80057a0 <USBD_CtlSendData>
                      2);
    break;
 80055b4:	e004      	b.n	80055c0 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 80055b6:	6839      	ldr	r1, [r7, #0]
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f885 	bl	80056c8 <USBD_CtlError>
    break;
 80055be:	bf00      	nop
  }
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	885b      	ldrh	r3, [r3, #2]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d10d      	bne.n	80055f6 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	6839      	ldr	r1, [r7, #0]
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f933 	bl	800585c <USBD_CtlSendStatus>
  }

}
 80055f6:	bf00      	nop
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b082      	sub	sp, #8
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800560e:	3b02      	subs	r3, #2
 8005610:	2b01      	cmp	r3, #1
 8005612:	d812      	bhi.n	800563a <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	885b      	ldrh	r3, [r3, #2]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d113      	bne.n	8005644 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	6839      	ldr	r1, [r7, #0]
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f912 	bl	800585c <USBD_CtlSendStatus>
    }
    break;
 8005638:	e004      	b.n	8005644 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f843 	bl	80056c8 <USBD_CtlError>
    break;
 8005642:	e000      	b.n	8005646 <USBD_ClrFeature+0x48>
    break;
 8005644:	bf00      	nop
  }
}
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	781a      	ldrb	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	785a      	ldrb	r2, [r3, #1]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	3302      	adds	r3, #2
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	b29a      	uxth	r2, r3
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	3303      	adds	r3, #3
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	b29b      	uxth	r3, r3
 800567c:	4413      	add	r3, r2
 800567e:	b29a      	uxth	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	3304      	adds	r3, #4
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	b29a      	uxth	r2, r3
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	3305      	adds	r3, #5
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	b29b      	uxth	r3, r3
 8005694:	021b      	lsls	r3, r3, #8
 8005696:	b29b      	uxth	r3, r3
 8005698:	4413      	add	r3, r2
 800569a:	b29a      	uxth	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	3306      	adds	r3, #6
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	3307      	adds	r3, #7
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	4413      	add	r3, r2
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	80da      	strh	r2, [r3, #6]

}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 80056d2:	2180      	movs	r1, #128	; 0x80
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f00a ffa7 	bl	8010628 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80056da:	2100      	movs	r1, #0
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f00a ffa3 	bl	8010628 <USBD_LL_StallEP>
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b086      	sub	sp, #24
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d033      	beq.n	8005768 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 f835 	bl	8005770 <USBD_GetLen>
 8005706:	4603      	mov	r3, r0
 8005708:	3301      	adds	r3, #1
 800570a:	b29b      	uxth	r3, r3
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8005714:	7dfb      	ldrb	r3, [r7, #23]
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	75fa      	strb	r2, [r7, #23]
 800571a:	461a      	mov	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4413      	add	r3, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	8812      	ldrh	r2, [r2, #0]
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8005728:	7dfb      	ldrb	r3, [r7, #23]
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	75fa      	strb	r2, [r7, #23]
 800572e:	461a      	mov	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4413      	add	r3, r2
 8005734:	2203      	movs	r2, #3
 8005736:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8005738:	e012      	b.n	8005760 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 800573a:	7dfb      	ldrb	r3, [r7, #23]
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	75fa      	strb	r2, [r7, #23]
 8005740:	461a      	mov	r2, r3
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	441a      	add	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1c59      	adds	r1, r3, #1
 800574a:	60f9      	str	r1, [r7, #12]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8005750:	7dfb      	ldrb	r3, [r7, #23]
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	75fa      	strb	r2, [r7, #23]
 8005756:	461a      	mov	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4413      	add	r3, r2
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1e8      	bne.n	800573a <USBD_GetString+0x50>
    }
  } 
}
 8005768:	bf00      	nop
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8005778:	2300      	movs	r3, #0
 800577a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 800577c:	e005      	b.n	800578a <USBD_GetLen+0x1a>
    {
        len++;
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	3301      	adds	r3, #1
 8005782:	73fb      	strb	r3, [r7, #15]
        buf++;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3301      	adds	r3, #1
 8005788:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f5      	bne.n	800577e <USBD_GetLen+0xe>
    }

    return len;
 8005792:	7bfb      	ldrb	r3, [r7, #15]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	4613      	mov	r3, r2
 80057ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2202      	movs	r2, #2
 80057b2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80057b6:	88fa      	ldrh	r2, [r7, #6]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 80057bc:	88fa      	ldrh	r2, [r7, #6]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	2100      	movs	r1, #0
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f00a fffb 	bl	80107c4 <USBD_LL_Transmit>
  
  return USBD_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	4613      	mov	r3, r2
 80057e4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	2100      	movs	r1, #0
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f00a ffe9 	bl	80107c4 <USBD_LL_Transmit>
  
  return USBD_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	4613      	mov	r3, r2
 8005808:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2203      	movs	r2, #3
 800580e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8005812:	88fa      	ldrh	r2, [r7, #6]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	2100      	movs	r1, #0
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f00b f805 	bl	8010838 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	4613      	mov	r3, r2
 8005844:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	2100      	movs	r1, #0
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f00a fff3 	bl	8010838 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2204      	movs	r2, #4
 8005868:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800586c:	2300      	movs	r3, #0
 800586e:	2200      	movs	r2, #0
 8005870:	2100      	movs	r1, #0
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f00a ffa6 	bl	80107c4 <USBD_LL_Transmit>
  
  return USBD_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b082      	sub	sp, #8
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2205      	movs	r2, #5
 800588e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8005892:	2300      	movs	r3, #0
 8005894:	2200      	movs	r2, #0
 8005896:	2100      	movs	r1, #0
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f00a ffcd 	bl	8010838 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80058b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058ba:	2b84      	cmp	r3, #132	; 0x84
 80058bc:	d005      	beq.n	80058ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80058be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	3303      	adds	r3, #3
 80058c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80058ca:	68fb      	ldr	r3, [r7, #12]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80058dc:	f001 fe76 	bl	80075cc <vTaskStartScheduler>
  
  return osOK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80058e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058e8:	b087      	sub	sp, #28
 80058ea:	af02      	add	r7, sp, #8
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685c      	ldr	r4, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058fc:	b29e      	uxth	r6, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff ffcf 	bl	80058a8 <makeFreeRtosPriority>
 800590a:	4602      	mov	r2, r0
 800590c:	f107 030c 	add.w	r3, r7, #12
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	9200      	str	r2, [sp, #0]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	4632      	mov	r2, r6
 8005918:	4629      	mov	r1, r5
 800591a:	4620      	mov	r0, r4
 800591c:	f001 fc6a 	bl	80071f4 <xTaskCreate>
 8005920:	4603      	mov	r3, r0
 8005922:	2b01      	cmp	r3, #1
 8005924:	d001      	beq.n	800592a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8005926:	2300      	movs	r3, #0
 8005928:	e000      	b.n	800592c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800592a:	68fb      	ldr	r3, [r7, #12]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005934 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <osDelay+0x16>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	e000      	b.n	800594c <osDelay+0x18>
 800594a:	2301      	movs	r3, #1
 800594c:	4618      	mov	r0, r3
 800594e:	f001 fe09 	bl	8007564 <vTaskDelay>
  
  return osOK;
 8005952:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005960:	f002 fadc 	bl	8007f1c <xTaskGetSchedulerState>
 8005964:	4603      	mov	r3, r0
 8005966:	2b01      	cmp	r3, #1
 8005968:	d001      	beq.n	800596e <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800596a:	f000 fc5d 	bl	8006228 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800596e:	bf00      	nop
 8005970:	bd80      	pop	{r7, pc}

08005972 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005978:	2018      	movs	r0, #24
 800597a:	f000 fce1 	bl	8006340 <pvPortMalloc>
 800597e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	4618      	mov	r0, r3
 8005992:	f000 f9e0 	bl	8005d56 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005996:	687b      	ldr	r3, [r7, #4]
	}
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b090      	sub	sp, #64	; 0x40
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80059b6:	2300      	movs	r3, #0
 80059b8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d109      	bne.n	80059d4 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	623b      	str	r3, [r7, #32]
 80059d2:	e7fe      	b.n	80059d2 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d009      	beq.n	80059f2 <xEventGroupWaitBits+0x52>
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	e7fe      	b.n	80059f0 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d109      	bne.n	8005a0c <xEventGroupWaitBits+0x6c>
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	e7fe      	b.n	8005a0a <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a0c:	f002 fa86 	bl	8007f1c <xTaskGetSchedulerState>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d102      	bne.n	8005a1c <xEventGroupWaitBits+0x7c>
 8005a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <xEventGroupWaitBits+0x80>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e000      	b.n	8005a22 <xEventGroupWaitBits+0x82>
 8005a20:	2300      	movs	r3, #0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d109      	bne.n	8005a3a <xEventGroupWaitBits+0x9a>
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	e7fe      	b.n	8005a38 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8005a3a:	f001 fe0d 	bl	8007658 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a4a:	f000 f962 	bl	8005d12 <prvTestWaitCondition>
 8005a4e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00e      	beq.n	8005a74 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d028      	beq.n	8005ab6 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	401a      	ands	r2, r3
 8005a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	e020      	b.n	8005ab6 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d104      	bne.n	8005a84 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	633b      	str	r3, [r7, #48]	; 0x30
 8005a82:	e018      	b.n	8005ab6 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a90:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a9e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa2:	1d18      	adds	r0, r3, #4
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aac:	4619      	mov	r1, r3
 8005aae:	f001 ffc7 	bl	8007a40 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005ab6:	f001 fddd 	bl	8007674 <xTaskResumeAll>
 8005aba:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d031      	beq.n	8005b26 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d107      	bne.n	8005ad8 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8005ac8:	4b19      	ldr	r3, [pc, #100]	; (8005b30 <xEventGroupWaitBits+0x190>)
 8005aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005ad8:	f002 fbe6 	bl	80082a8 <uxTaskResetEventItemValue>
 8005adc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d11a      	bne.n	8005b1e <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8005ae8:	f000 fb10 	bl	800610c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005af8:	f000 f90b 	bl	8005d12 <prvTestWaitCondition>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d006      	beq.n	8005b16 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	401a      	ands	r2, r3
 8005b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b14:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005b16:	2301      	movs	r3, #1
 8005b18:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8005b1a:	f000 fb25 	bl	8006168 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b24:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3740      	adds	r7, #64	; 0x40
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	e000ed04 	.word	0xe000ed04

08005b34 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d109      	bne.n	8005b5c <xEventGroupClearBits+0x28>
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	e7fe      	b.n	8005b5a <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <xEventGroupClearBits+0x46>
 8005b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	60bb      	str	r3, [r7, #8]
 8005b78:	e7fe      	b.n	8005b78 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 8005b7a:	f000 fac7 	bl	800610c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	401a      	ands	r2, r3
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8005b92:	f000 fae9 	bl	8006168 <vPortExitCritical>

	return uxReturn;
 8005b96:	693b      	ldr	r3, [r7, #16]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08e      	sub	sp, #56	; 0x38
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005baa:	2300      	movs	r3, #0
 8005bac:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d109      	bne.n	8005bd0 <xEventGroupSetBits+0x30>
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	e7fe      	b.n	8005bce <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d009      	beq.n	8005bee <xEventGroupSetBits+0x4e>
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	e7fe      	b.n	8005bec <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005bfa:	f001 fd2d 	bl	8007658 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005c10:	e03c      	b.n	8005c8c <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005c28:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c30:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d108      	bne.n	8005c4e <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	4013      	ands	r3, r2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00b      	beq.n	8005c60 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c4c:	e008      	b.n	8005c60 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	401a      	ands	r2, r3
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d101      	bne.n	8005c60 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d010      	beq.n	8005c88 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c80:	4619      	mov	r1, r3
 8005c82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005c84:	f001 ff78 	bl	8007b78 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005c8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d1be      	bne.n	8005c12 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	43db      	mvns	r3, r3
 8005c9c:	401a      	ands	r2, r3
 8005c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005ca2:	f001 fce7 	bl	8007674 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca8:	681b      	ldr	r3, [r3, #0]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3738      	adds	r7, #56	; 0x38
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b086      	sub	sp, #24
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 8005cc4:	f001 fcc8 	bl	8007658 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8005cc8:	e016      	b.n	8005cf8 <vEventGroupDelete+0x46>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	3308      	adds	r3, #8
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d109      	bne.n	8005cea <vEventGroupDelete+0x38>
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	e7fe      	b.n	8005ce8 <vEventGroupDelete+0x36>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 ff40 	bl	8007b78 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1e4      	bne.n	8005cca <vEventGroupDelete+0x18>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
 8005d00:	6978      	ldr	r0, [r7, #20]
 8005d02:	f000 fbdf 	bl	80064c4 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 8005d06:	f001 fcb5 	bl	8007674 <xTaskResumeAll>
}
 8005d0a:	bf00      	nop
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005d12:	b480      	push	{r7}
 8005d14:	b087      	sub	sp, #28
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	60b9      	str	r1, [r7, #8]
 8005d1c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d107      	bne.n	8005d38 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005d32:	2301      	movs	r3, #1
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	e007      	b.n	8005d48 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	401a      	ands	r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d101      	bne.n	8005d48 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005d44:	2301      	movs	r3, #1
 8005d46:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005d48:	697b      	ldr	r3, [r7, #20]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f103 0208 	add.w	r2, r3, #8
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f103 0208 	add.w	r2, r3, #8
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f103 0208 	add.w	r2, r3, #8
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	601a      	str	r2, [r3, #0]
}
 8005dec:	bf00      	nop
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0e:	d103      	bne.n	8005e18 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	e00c      	b.n	8005e32 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3308      	adds	r3, #8
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	e002      	b.n	8005e26 <vListInsert+0x2e>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d9f6      	bls.n	8005e20 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	601a      	str	r2, [r3, #0]
}
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6892      	ldr	r2, [r2, #8]
 8005e80:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6852      	ldr	r2, [r2, #4]
 8005e8a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d103      	bne.n	8005e9e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	1e5a      	subs	r2, r3, #1
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3b04      	subs	r3, #4
 8005ed0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3b04      	subs	r3, #4
 8005ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f023 0201 	bic.w	r2, r3, #1
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3b04      	subs	r3, #4
 8005eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ef0:	4a0c      	ldr	r2, [pc, #48]	; (8005f24 <pxPortInitialiseStack+0x64>)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3b14      	subs	r3, #20
 8005efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3b04      	subs	r3, #4
 8005f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f06f 0202 	mvn.w	r2, #2
 8005f0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3b20      	subs	r3, #32
 8005f14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f16:	68fb      	ldr	r3, [r7, #12]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	08005f29 	.word	0x08005f29

08005f28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f32:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <prvTaskExitError+0x50>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3a:	d009      	beq.n	8005f50 <prvTaskExitError+0x28>
 8005f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f40:	f383 8811 	msr	BASEPRI, r3
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	e7fe      	b.n	8005f4e <prvTaskExitError+0x26>
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f62:	bf00      	nop
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0fc      	beq.n	8005f64 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f6a:	bf00      	nop
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	2000009c 	.word	0x2000009c
 8005f7c:	00000000 	.word	0x00000000

08005f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f80:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <pxCurrentTCBConst2>)
 8005f82:	6819      	ldr	r1, [r3, #0]
 8005f84:	6808      	ldr	r0, [r1, #0]
 8005f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8a:	f380 8809 	msr	PSP, r0
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f04f 0000 	mov.w	r0, #0
 8005f96:	f380 8811 	msr	BASEPRI, r0
 8005f9a:	4770      	bx	lr
 8005f9c:	f3af 8000 	nop.w

08005fa0 <pxCurrentTCBConst2>:
 8005fa0:	20003f78 	.word	0x20003f78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop

08005fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005fa8:	4808      	ldr	r0, [pc, #32]	; (8005fcc <prvPortStartFirstTask+0x24>)
 8005faa:	6800      	ldr	r0, [r0, #0]
 8005fac:	6800      	ldr	r0, [r0, #0]
 8005fae:	f380 8808 	msr	MSP, r0
 8005fb2:	f04f 0000 	mov.w	r0, #0
 8005fb6:	f380 8814 	msr	CONTROL, r0
 8005fba:	b662      	cpsie	i
 8005fbc:	b661      	cpsie	f
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	df00      	svc	0
 8005fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fca:	bf00      	nop
 8005fcc:	e000ed08 	.word	0xe000ed08

08005fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005fd6:	4b44      	ldr	r3, [pc, #272]	; (80060e8 <xPortStartScheduler+0x118>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a44      	ldr	r2, [pc, #272]	; (80060ec <xPortStartScheduler+0x11c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d109      	bne.n	8005ff4 <xPortStartScheduler+0x24>
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	e7fe      	b.n	8005ff2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ff4:	4b3c      	ldr	r3, [pc, #240]	; (80060e8 <xPortStartScheduler+0x118>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a3d      	ldr	r2, [pc, #244]	; (80060f0 <xPortStartScheduler+0x120>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d109      	bne.n	8006012 <xPortStartScheduler+0x42>
 8005ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	e7fe      	b.n	8006010 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006012:	4b38      	ldr	r3, [pc, #224]	; (80060f4 <xPortStartScheduler+0x124>)
 8006014:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	22ff      	movs	r2, #255	; 0xff
 8006022:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	b2db      	uxtb	r3, r3
 800602a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006034:	b2da      	uxtb	r2, r3
 8006036:	4b30      	ldr	r3, [pc, #192]	; (80060f8 <xPortStartScheduler+0x128>)
 8006038:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800603a:	4b30      	ldr	r3, [pc, #192]	; (80060fc <xPortStartScheduler+0x12c>)
 800603c:	2207      	movs	r2, #7
 800603e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006040:	e009      	b.n	8006056 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006042:	4b2e      	ldr	r3, [pc, #184]	; (80060fc <xPortStartScheduler+0x12c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3b01      	subs	r3, #1
 8006048:	4a2c      	ldr	r2, [pc, #176]	; (80060fc <xPortStartScheduler+0x12c>)
 800604a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	b2db      	uxtb	r3, r3
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	b2db      	uxtb	r3, r3
 8006054:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006056:	78fb      	ldrb	r3, [r7, #3]
 8006058:	b2db      	uxtb	r3, r3
 800605a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605e:	2b80      	cmp	r3, #128	; 0x80
 8006060:	d0ef      	beq.n	8006042 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006062:	4b26      	ldr	r3, [pc, #152]	; (80060fc <xPortStartScheduler+0x12c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f1c3 0307 	rsb	r3, r3, #7
 800606a:	2b04      	cmp	r3, #4
 800606c:	d009      	beq.n	8006082 <xPortStartScheduler+0xb2>
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	60bb      	str	r3, [r7, #8]
 8006080:	e7fe      	b.n	8006080 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006082:	4b1e      	ldr	r3, [pc, #120]	; (80060fc <xPortStartScheduler+0x12c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	021b      	lsls	r3, r3, #8
 8006088:	4a1c      	ldr	r2, [pc, #112]	; (80060fc <xPortStartScheduler+0x12c>)
 800608a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800608c:	4b1b      	ldr	r3, [pc, #108]	; (80060fc <xPortStartScheduler+0x12c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006094:	4a19      	ldr	r2, [pc, #100]	; (80060fc <xPortStartScheduler+0x12c>)
 8006096:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	b2da      	uxtb	r2, r3
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060a0:	4a17      	ldr	r2, [pc, #92]	; (8006100 <xPortStartScheduler+0x130>)
 80060a2:	4b17      	ldr	r3, [pc, #92]	; (8006100 <xPortStartScheduler+0x130>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060ac:	4a14      	ldr	r2, [pc, #80]	; (8006100 <xPortStartScheduler+0x130>)
 80060ae:	4b14      	ldr	r3, [pc, #80]	; (8006100 <xPortStartScheduler+0x130>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80060b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060b8:	f000 f8d6 	bl	8006268 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060bc:	4b11      	ldr	r3, [pc, #68]	; (8006104 <xPortStartScheduler+0x134>)
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060c2:	f000 f8f5 	bl	80062b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060c6:	4a10      	ldr	r2, [pc, #64]	; (8006108 <xPortStartScheduler+0x138>)
 80060c8:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <xPortStartScheduler+0x138>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060d2:	f7ff ff69 	bl	8005fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060d6:	f001 fc35 	bl	8007944 <vTaskSwitchContext>
	prvTaskExitError();
 80060da:	f7ff ff25 	bl	8005f28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	e000ed00 	.word	0xe000ed00
 80060ec:	410fc271 	.word	0x410fc271
 80060f0:	410fc270 	.word	0x410fc270
 80060f4:	e000e400 	.word	0xe000e400
 80060f8:	20000359 	.word	0x20000359
 80060fc:	2000035c 	.word	0x2000035c
 8006100:	e000ed20 	.word	0xe000ed20
 8006104:	2000009c 	.word	0x2000009c
 8006108:	e000ef34 	.word	0xe000ef34

0800610c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006124:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <vPortEnterCritical+0x54>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3301      	adds	r3, #1
 800612a:	4a0d      	ldr	r2, [pc, #52]	; (8006160 <vPortEnterCritical+0x54>)
 800612c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800612e:	4b0c      	ldr	r3, [pc, #48]	; (8006160 <vPortEnterCritical+0x54>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d10e      	bne.n	8006154 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006136:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <vPortEnterCritical+0x58>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d009      	beq.n	8006154 <vPortEnterCritical+0x48>
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	603b      	str	r3, [r7, #0]
 8006152:	e7fe      	b.n	8006152 <vPortEnterCritical+0x46>
	}
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	2000009c 	.word	0x2000009c
 8006164:	e000ed04 	.word	0xe000ed04

08006168 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800616e:	4b11      	ldr	r3, [pc, #68]	; (80061b4 <vPortExitCritical+0x4c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <vPortExitCritical+0x22>
 8006176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	607b      	str	r3, [r7, #4]
 8006188:	e7fe      	b.n	8006188 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800618a:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <vPortExitCritical+0x4c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3b01      	subs	r3, #1
 8006190:	4a08      	ldr	r2, [pc, #32]	; (80061b4 <vPortExitCritical+0x4c>)
 8006192:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006194:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <vPortExitCritical+0x4c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d104      	bne.n	80061a6 <vPortExitCritical+0x3e>
 800619c:	2300      	movs	r3, #0
 800619e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	2000009c 	.word	0x2000009c
	...

080061c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061c0:	f3ef 8009 	mrs	r0, PSP
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	4b15      	ldr	r3, [pc, #84]	; (8006220 <pxCurrentTCBConst>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	f01e 0f10 	tst.w	lr, #16
 80061d0:	bf08      	it	eq
 80061d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061da:	6010      	str	r0, [r2, #0]
 80061dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80061e4:	f380 8811 	msr	BASEPRI, r0
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f001 fba8 	bl	8007944 <vTaskSwitchContext>
 80061f4:	f04f 0000 	mov.w	r0, #0
 80061f8:	f380 8811 	msr	BASEPRI, r0
 80061fc:	bc09      	pop	{r0, r3}
 80061fe:	6819      	ldr	r1, [r3, #0]
 8006200:	6808      	ldr	r0, [r1, #0]
 8006202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006206:	f01e 0f10 	tst.w	lr, #16
 800620a:	bf08      	it	eq
 800620c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006210:	f380 8809 	msr	PSP, r0
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	f3af 8000 	nop.w

08006220 <pxCurrentTCBConst>:
 8006220:	20003f78 	.word	0x20003f78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop

08006228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006240:	f001 fac4 	bl	80077cc <xTaskIncrementTick>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800624a:	4b06      	ldr	r3, [pc, #24]	; (8006264 <xPortSysTickHandler+0x3c>)
 800624c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	2300      	movs	r3, #0
 8006254:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800625c:	bf00      	nop
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	e000ed04 	.word	0xe000ed04

08006268 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800626c:	4b0b      	ldr	r3, [pc, #44]	; (800629c <vPortSetupTimerInterrupt+0x34>)
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006272:	4b0b      	ldr	r3, [pc, #44]	; (80062a0 <vPortSetupTimerInterrupt+0x38>)
 8006274:	2200      	movs	r2, #0
 8006276:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006278:	4a0a      	ldr	r2, [pc, #40]	; (80062a4 <vPortSetupTimerInterrupt+0x3c>)
 800627a:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <vPortSetupTimerInterrupt+0x40>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	490b      	ldr	r1, [pc, #44]	; (80062ac <vPortSetupTimerInterrupt+0x44>)
 8006280:	fba1 1303 	umull	r1, r3, r1, r3
 8006284:	099b      	lsrs	r3, r3, #6
 8006286:	3b01      	subs	r3, #1
 8006288:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800628a:	4b04      	ldr	r3, [pc, #16]	; (800629c <vPortSetupTimerInterrupt+0x34>)
 800628c:	2207      	movs	r2, #7
 800628e:	601a      	str	r2, [r3, #0]
}
 8006290:	bf00      	nop
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	e000e010 	.word	0xe000e010
 80062a0:	e000e018 	.word	0xe000e018
 80062a4:	e000e014 	.word	0xe000e014
 80062a8:	200000c0 	.word	0x200000c0
 80062ac:	10624dd3 	.word	0x10624dd3

080062b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062c0 <vPortEnableVFP+0x10>
 80062b4:	6801      	ldr	r1, [r0, #0]
 80062b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062ba:	6001      	str	r1, [r0, #0]
 80062bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062be:	bf00      	nop
 80062c0:	e000ed88 	.word	0xe000ed88

080062c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062ca:	f3ef 8305 	mrs	r3, IPSR
 80062ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b0f      	cmp	r3, #15
 80062d4:	d913      	bls.n	80062fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062d6:	4a16      	ldr	r2, [pc, #88]	; (8006330 <vPortValidateInterruptPriority+0x6c>)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4413      	add	r3, r2
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062e0:	4b14      	ldr	r3, [pc, #80]	; (8006334 <vPortValidateInterruptPriority+0x70>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	7afa      	ldrb	r2, [r7, #11]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d209      	bcs.n	80062fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	607b      	str	r3, [r7, #4]
 80062fc:	e7fe      	b.n	80062fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062fe:	4b0e      	ldr	r3, [pc, #56]	; (8006338 <vPortValidateInterruptPriority+0x74>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006306:	4b0d      	ldr	r3, [pc, #52]	; (800633c <vPortValidateInterruptPriority+0x78>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d909      	bls.n	8006322 <vPortValidateInterruptPriority+0x5e>
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	e7fe      	b.n	8006320 <vPortValidateInterruptPriority+0x5c>
	}
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	e000e3f0 	.word	0xe000e3f0
 8006334:	20000359 	.word	0x20000359
 8006338:	e000ed0c 	.word	0xe000ed0c
 800633c:	2000035c 	.word	0x2000035c

08006340 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08a      	sub	sp, #40	; 0x28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006348:	2300      	movs	r3, #0
 800634a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800634c:	f001 f984 	bl	8007658 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006350:	4b57      	ldr	r3, [pc, #348]	; (80064b0 <pvPortMalloc+0x170>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006358:	f000 f90c 	bl	8006574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800635c:	4b55      	ldr	r3, [pc, #340]	; (80064b4 <pvPortMalloc+0x174>)
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4013      	ands	r3, r2
 8006364:	2b00      	cmp	r3, #0
 8006366:	f040 808c 	bne.w	8006482 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01c      	beq.n	80063aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006370:	2208      	movs	r2, #8
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4413      	add	r3, r2
 8006376:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	2b00      	cmp	r3, #0
 8006380:	d013      	beq.n	80063aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f023 0307 	bic.w	r3, r3, #7
 8006388:	3308      	adds	r3, #8
 800638a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <pvPortMalloc+0x6a>
 8006396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	e7fe      	b.n	80063a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d068      	beq.n	8006482 <pvPortMalloc+0x142>
 80063b0:	4b41      	ldr	r3, [pc, #260]	; (80064b8 <pvPortMalloc+0x178>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d863      	bhi.n	8006482 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063ba:	4b40      	ldr	r3, [pc, #256]	; (80064bc <pvPortMalloc+0x17c>)
 80063bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063be:	4b3f      	ldr	r3, [pc, #252]	; (80064bc <pvPortMalloc+0x17c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063c4:	e004      	b.n	80063d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d203      	bcs.n	80063e2 <pvPortMalloc+0xa2>
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f1      	bne.n	80063c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063e2:	4b33      	ldr	r3, [pc, #204]	; (80064b0 <pvPortMalloc+0x170>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d04a      	beq.n	8006482 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2208      	movs	r2, #8
 80063f2:	4413      	add	r3, r2
 80063f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	1ad2      	subs	r2, r2, r3
 8006406:	2308      	movs	r3, #8
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	429a      	cmp	r2, r3
 800640c:	d91e      	bls.n	800644c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800640e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4413      	add	r3, r2
 8006414:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	f003 0307 	and.w	r3, r3, #7
 800641c:	2b00      	cmp	r3, #0
 800641e:	d009      	beq.n	8006434 <pvPortMalloc+0xf4>
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	613b      	str	r3, [r7, #16]
 8006432:	e7fe      	b.n	8006432 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	1ad2      	subs	r2, r2, r3
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006446:	69b8      	ldr	r0, [r7, #24]
 8006448:	f000 f8f6 	bl	8006638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800644c:	4b1a      	ldr	r3, [pc, #104]	; (80064b8 <pvPortMalloc+0x178>)
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	4a18      	ldr	r2, [pc, #96]	; (80064b8 <pvPortMalloc+0x178>)
 8006458:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800645a:	4b17      	ldr	r3, [pc, #92]	; (80064b8 <pvPortMalloc+0x178>)
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	4b18      	ldr	r3, [pc, #96]	; (80064c0 <pvPortMalloc+0x180>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d203      	bcs.n	800646e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006466:	4b14      	ldr	r3, [pc, #80]	; (80064b8 <pvPortMalloc+0x178>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a15      	ldr	r2, [pc, #84]	; (80064c0 <pvPortMalloc+0x180>)
 800646c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <pvPortMalloc+0x174>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	431a      	orrs	r2, r3
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006482:	f001 f8f7 	bl	8007674 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	2b00      	cmp	r3, #0
 800648e:	d009      	beq.n	80064a4 <pvPortMalloc+0x164>
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e7fe      	b.n	80064a2 <pvPortMalloc+0x162>
	return pvReturn;
 80064a4:	69fb      	ldr	r3, [r7, #28]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3728      	adds	r7, #40	; 0x28
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20003f68 	.word	0x20003f68
 80064b4:	20003f74 	.word	0x20003f74
 80064b8:	20003f6c 	.word	0x20003f6c
 80064bc:	20003f60 	.word	0x20003f60
 80064c0:	20003f70 	.word	0x20003f70

080064c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d046      	beq.n	8006564 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064d6:	2308      	movs	r3, #8
 80064d8:	425b      	negs	r3, r3
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4413      	add	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	4b20      	ldr	r3, [pc, #128]	; (800656c <vPortFree+0xa8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4013      	ands	r3, r2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d109      	bne.n	8006506 <vPortFree+0x42>
 80064f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	e7fe      	b.n	8006504 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d009      	beq.n	8006522 <vPortFree+0x5e>
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	60bb      	str	r3, [r7, #8]
 8006520:	e7fe      	b.n	8006520 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	4b11      	ldr	r3, [pc, #68]	; (800656c <vPortFree+0xa8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4013      	ands	r3, r2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d019      	beq.n	8006564 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d115      	bne.n	8006564 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	4b0b      	ldr	r3, [pc, #44]	; (800656c <vPortFree+0xa8>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	43db      	mvns	r3, r3
 8006542:	401a      	ands	r2, r3
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006548:	f001 f886 	bl	8007658 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	4b07      	ldr	r3, [pc, #28]	; (8006570 <vPortFree+0xac>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4413      	add	r3, r2
 8006556:	4a06      	ldr	r2, [pc, #24]	; (8006570 <vPortFree+0xac>)
 8006558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800655a:	6938      	ldr	r0, [r7, #16]
 800655c:	f000 f86c 	bl	8006638 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006560:	f001 f888 	bl	8007674 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006564:	bf00      	nop
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20003f74 	.word	0x20003f74
 8006570:	20003f6c 	.word	0x20003f6c

08006574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800657a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800657e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006580:	4b27      	ldr	r3, [pc, #156]	; (8006620 <prvHeapInit+0xac>)
 8006582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00c      	beq.n	80065a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3307      	adds	r3, #7
 8006592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0307 	bic.w	r3, r3, #7
 800659a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	4a1f      	ldr	r2, [pc, #124]	; (8006620 <prvHeapInit+0xac>)
 80065a4:	4413      	add	r3, r2
 80065a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065ac:	4a1d      	ldr	r2, [pc, #116]	; (8006624 <prvHeapInit+0xb0>)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065b2:	4b1c      	ldr	r3, [pc, #112]	; (8006624 <prvHeapInit+0xb0>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	4413      	add	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065c0:	2208      	movs	r2, #8
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	1a9b      	subs	r3, r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0307 	bic.w	r3, r3, #7
 80065ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4a15      	ldr	r2, [pc, #84]	; (8006628 <prvHeapInit+0xb4>)
 80065d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <prvHeapInit+0xb4>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2200      	movs	r2, #0
 80065dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065de:	4b12      	ldr	r3, [pc, #72]	; (8006628 <prvHeapInit+0xb4>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	1ad2      	subs	r2, r2, r3
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065f4:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <prvHeapInit+0xb4>)
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	4a0a      	ldr	r2, [pc, #40]	; (800662c <prvHeapInit+0xb8>)
 8006602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	4a09      	ldr	r2, [pc, #36]	; (8006630 <prvHeapInit+0xbc>)
 800660a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800660c:	4b09      	ldr	r3, [pc, #36]	; (8006634 <prvHeapInit+0xc0>)
 800660e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006612:	601a      	str	r2, [r3, #0]
}
 8006614:	bf00      	nop
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	20000360 	.word	0x20000360
 8006624:	20003f60 	.word	0x20003f60
 8006628:	20003f68 	.word	0x20003f68
 800662c:	20003f70 	.word	0x20003f70
 8006630:	20003f6c 	.word	0x20003f6c
 8006634:	20003f74 	.word	0x20003f74

08006638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006640:	4b28      	ldr	r3, [pc, #160]	; (80066e4 <prvInsertBlockIntoFreeList+0xac>)
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	e002      	b.n	800664c <prvInsertBlockIntoFreeList+0x14>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	429a      	cmp	r2, r3
 8006654:	d3f7      	bcc.n	8006646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	441a      	add	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	429a      	cmp	r2, r3
 8006666:	d108      	bne.n	800667a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	441a      	add	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	441a      	add	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d118      	bne.n	80066c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4b15      	ldr	r3, [pc, #84]	; (80066e8 <prvInsertBlockIntoFreeList+0xb0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d00d      	beq.n	80066b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	441a      	add	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	601a      	str	r2, [r3, #0]
 80066b4:	e008      	b.n	80066c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066b6:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <prvInsertBlockIntoFreeList+0xb0>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	e003      	b.n	80066c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d002      	beq.n	80066d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066d6:	bf00      	nop
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	20003f60 	.word	0x20003f60
 80066e8:	20003f68 	.word	0x20003f68

080066ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d109      	bne.n	8006714 <xQueueGenericReset+0x28>
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	60bb      	str	r3, [r7, #8]
 8006712:	e7fe      	b.n	8006712 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006714:	f7ff fcfa 	bl	800610c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006720:	68f9      	ldr	r1, [r7, #12]
 8006722:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006724:	fb01 f303 	mul.w	r3, r1, r3
 8006728:	441a      	add	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006744:	3b01      	subs	r3, #1
 8006746:	68f9      	ldr	r1, [r7, #12]
 8006748:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800674a:	fb01 f303 	mul.w	r3, r1, r3
 800674e:	441a      	add	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	22ff      	movs	r2, #255	; 0xff
 8006758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	22ff      	movs	r2, #255	; 0xff
 8006760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d114      	bne.n	8006794 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01a      	beq.n	80067a8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3310      	adds	r3, #16
 8006776:	4618      	mov	r0, r3
 8006778:	f001 f99c 	bl	8007ab4 <xTaskRemoveFromEventList>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d012      	beq.n	80067a8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006782:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <xQueueGenericReset+0xcc>)
 8006784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	e009      	b.n	80067a8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3310      	adds	r3, #16
 8006798:	4618      	mov	r0, r3
 800679a:	f7ff fadc 	bl	8005d56 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3324      	adds	r3, #36	; 0x24
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff fad7 	bl	8005d56 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067a8:	f7ff fcde 	bl	8006168 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067ac:	2301      	movs	r3, #1
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	e000ed04 	.word	0xe000ed04

080067bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08a      	sub	sp, #40	; 0x28
 80067c0:	af02      	add	r7, sp, #8
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	4613      	mov	r3, r2
 80067c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d109      	bne.n	80067e4 <xQueueGenericCreate+0x28>
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	613b      	str	r3, [r7, #16]
 80067e2:	e7fe      	b.n	80067e2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d102      	bne.n	80067f0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	61fb      	str	r3, [r7, #28]
 80067ee:	e004      	b.n	80067fa <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	fb02 f303 	mul.w	r3, r2, r3
 80067f8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	3348      	adds	r3, #72	; 0x48
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff fd9e 	bl	8006340 <pvPortMalloc>
 8006804:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00b      	beq.n	8006824 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	3348      	adds	r3, #72	; 0x48
 8006810:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006812:	79fa      	ldrb	r2, [r7, #7]
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	4613      	mov	r3, r2
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 f805 	bl	800682e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006824:	69bb      	ldr	r3, [r7, #24]
	}
 8006826:	4618      	mov	r0, r3
 8006828:	3720      	adds	r7, #32
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	60b9      	str	r1, [r7, #8]
 8006838:	607a      	str	r2, [r7, #4]
 800683a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d103      	bne.n	800684a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	e002      	b.n	8006850 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800685c:	2101      	movs	r1, #1
 800685e:	69b8      	ldr	r0, [r7, #24]
 8006860:	f7ff ff44 	bl	80066ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006864:	bf00      	nop
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d109      	bne.n	8006890 <xQueueCreateCountingSemaphore+0x24>
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	e7fe      	b.n	800688e <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	429a      	cmp	r2, r3
 8006896:	d909      	bls.n	80068ac <xQueueCreateCountingSemaphore+0x40>
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	e7fe      	b.n	80068aa <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80068ac:	2202      	movs	r2, #2
 80068ae:	2100      	movs	r1, #0
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff ff83 	bl	80067bc <xQueueGenericCreate>
 80068b6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80068c4:	697b      	ldr	r3, [r7, #20]
	}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08e      	sub	sp, #56	; 0x38
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068de:	2300      	movs	r3, #0
 80068e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d109      	bne.n	8006900 <xQueueGenericSend+0x30>
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80068fe:	e7fe      	b.n	80068fe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d103      	bne.n	800690e <xQueueGenericSend+0x3e>
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <xQueueGenericSend+0x42>
 800690e:	2301      	movs	r3, #1
 8006910:	e000      	b.n	8006914 <xQueueGenericSend+0x44>
 8006912:	2300      	movs	r3, #0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d109      	bne.n	800692c <xQueueGenericSend+0x5c>
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
 800692a:	e7fe      	b.n	800692a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b02      	cmp	r3, #2
 8006930:	d103      	bne.n	800693a <xQueueGenericSend+0x6a>
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006936:	2b01      	cmp	r3, #1
 8006938:	d101      	bne.n	800693e <xQueueGenericSend+0x6e>
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <xQueueGenericSend+0x70>
 800693e:	2300      	movs	r3, #0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d109      	bne.n	8006958 <xQueueGenericSend+0x88>
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	623b      	str	r3, [r7, #32]
 8006956:	e7fe      	b.n	8006956 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006958:	f001 fae0 	bl	8007f1c <xTaskGetSchedulerState>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d102      	bne.n	8006968 <xQueueGenericSend+0x98>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <xQueueGenericSend+0x9c>
 8006968:	2301      	movs	r3, #1
 800696a:	e000      	b.n	800696e <xQueueGenericSend+0x9e>
 800696c:	2300      	movs	r3, #0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d109      	bne.n	8006986 <xQueueGenericSend+0xb6>
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	61fb      	str	r3, [r7, #28]
 8006984:	e7fe      	b.n	8006984 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006986:	f7ff fbc1 	bl	800610c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006992:	429a      	cmp	r2, r3
 8006994:	d302      	bcc.n	800699c <xQueueGenericSend+0xcc>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b02      	cmp	r3, #2
 800699a:	d129      	bne.n	80069f0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069a2:	f000 fac5 	bl	8006f30 <prvCopyDataToQueue>
 80069a6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d010      	beq.n	80069d2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	3324      	adds	r3, #36	; 0x24
 80069b4:	4618      	mov	r0, r3
 80069b6:	f001 f87d 	bl	8007ab4 <xTaskRemoveFromEventList>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d013      	beq.n	80069e8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069c0:	4b3f      	ldr	r3, [pc, #252]	; (8006ac0 <xQueueGenericSend+0x1f0>)
 80069c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	e00a      	b.n	80069e8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069d8:	4b39      	ldr	r3, [pc, #228]	; (8006ac0 <xQueueGenericSend+0x1f0>)
 80069da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069e8:	f7ff fbbe 	bl	8006168 <vPortExitCritical>
				return pdPASS;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e063      	b.n	8006ab8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d103      	bne.n	80069fe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069f6:	f7ff fbb7 	bl	8006168 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069fa:	2300      	movs	r3, #0
 80069fc:	e05c      	b.n	8006ab8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d106      	bne.n	8006a12 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a04:	f107 0314 	add.w	r3, r7, #20
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 f93b 	bl	8007c84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a12:	f7ff fba9 	bl	8006168 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a16:	f000 fe1f 	bl	8007658 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a1a:	f7ff fb77 	bl	800610c <vPortEnterCritical>
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a24:	b25b      	sxtb	r3, r3
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2a:	d103      	bne.n	8006a34 <xQueueGenericSend+0x164>
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a3a:	b25b      	sxtb	r3, r3
 8006a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a40:	d103      	bne.n	8006a4a <xQueueGenericSend+0x17a>
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a4a:	f7ff fb8d 	bl	8006168 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a4e:	1d3a      	adds	r2, r7, #4
 8006a50:	f107 0314 	add.w	r3, r7, #20
 8006a54:	4611      	mov	r1, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f001 f92a 	bl	8007cb0 <xTaskCheckForTimeOut>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d124      	bne.n	8006aac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a64:	f000 fb5c 	bl	8007120 <prvIsQueueFull>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d018      	beq.n	8006aa0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	3310      	adds	r3, #16
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	4611      	mov	r1, r2
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 ffbe 	bl	80079f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a7e:	f000 fae7 	bl	8007050 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a82:	f000 fdf7 	bl	8007674 <xTaskResumeAll>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f47f af7c 	bne.w	8006986 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006a8e:	4b0c      	ldr	r3, [pc, #48]	; (8006ac0 <xQueueGenericSend+0x1f0>)
 8006a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	e772      	b.n	8006986 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aa2:	f000 fad5 	bl	8007050 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aa6:	f000 fde5 	bl	8007674 <xTaskResumeAll>
 8006aaa:	e76c      	b.n	8006986 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aae:	f000 facf 	bl	8007050 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ab2:	f000 fddf 	bl	8007674 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ab6:	2300      	movs	r3, #0
		}
	}
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3738      	adds	r7, #56	; 0x38
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	e000ed04 	.word	0xe000ed04

08006ac4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08c      	sub	sp, #48	; 0x30
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d109      	bne.n	8006af2 <xQueueReceive+0x2e>
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	623b      	str	r3, [r7, #32]
 8006af0:	e7fe      	b.n	8006af0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d103      	bne.n	8006b00 <xQueueReceive+0x3c>
 8006af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <xQueueReceive+0x40>
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <xQueueReceive+0x42>
 8006b04:	2300      	movs	r3, #0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d109      	bne.n	8006b1e <xQueueReceive+0x5a>
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	61fb      	str	r3, [r7, #28]
 8006b1c:	e7fe      	b.n	8006b1c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b1e:	f001 f9fd 	bl	8007f1c <xTaskGetSchedulerState>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d102      	bne.n	8006b2e <xQueueReceive+0x6a>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <xQueueReceive+0x6e>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e000      	b.n	8006b34 <xQueueReceive+0x70>
 8006b32:	2300      	movs	r3, #0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d109      	bne.n	8006b4c <xQueueReceive+0x88>
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	61bb      	str	r3, [r7, #24]
 8006b4a:	e7fe      	b.n	8006b4a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b4c:	f7ff fade 	bl	800610c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01f      	beq.n	8006b9c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b5c:	68b9      	ldr	r1, [r7, #8]
 8006b5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b60:	f000 fa50 	bl	8007004 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	1e5a      	subs	r2, r3, #1
 8006b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00f      	beq.n	8006b94 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b76:	3310      	adds	r3, #16
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 ff9b 	bl	8007ab4 <xTaskRemoveFromEventList>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d007      	beq.n	8006b94 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b84:	4b3c      	ldr	r3, [pc, #240]	; (8006c78 <xQueueReceive+0x1b4>)
 8006b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b94:	f7ff fae8 	bl	8006168 <vPortExitCritical>
				return pdPASS;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e069      	b.n	8006c70 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d103      	bne.n	8006baa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ba2:	f7ff fae1 	bl	8006168 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e062      	b.n	8006c70 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d106      	bne.n	8006bbe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bb0:	f107 0310 	add.w	r3, r7, #16
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 f865 	bl	8007c84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bbe:	f7ff fad3 	bl	8006168 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bc2:	f000 fd49 	bl	8007658 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bc6:	f7ff faa1 	bl	800610c <vPortEnterCritical>
 8006bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bd0:	b25b      	sxtb	r3, r3
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd6:	d103      	bne.n	8006be0 <xQueueReceive+0x11c>
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006be6:	b25b      	sxtb	r3, r3
 8006be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bec:	d103      	bne.n	8006bf6 <xQueueReceive+0x132>
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bf6:	f7ff fab7 	bl	8006168 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bfa:	1d3a      	adds	r2, r7, #4
 8006bfc:	f107 0310 	add.w	r3, r7, #16
 8006c00:	4611      	mov	r1, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 f854 	bl	8007cb0 <xTaskCheckForTimeOut>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d123      	bne.n	8006c56 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c10:	f000 fa70 	bl	80070f4 <prvIsQueueEmpty>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d017      	beq.n	8006c4a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	3324      	adds	r3, #36	; 0x24
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	4611      	mov	r1, r2
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fee8 	bl	80079f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c2a:	f000 fa11 	bl	8007050 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c2e:	f000 fd21 	bl	8007674 <xTaskResumeAll>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d189      	bne.n	8006b4c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006c38:	4b0f      	ldr	r3, [pc, #60]	; (8006c78 <xQueueReceive+0x1b4>)
 8006c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	e780      	b.n	8006b4c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c4c:	f000 fa00 	bl	8007050 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c50:	f000 fd10 	bl	8007674 <xTaskResumeAll>
 8006c54:	e77a      	b.n	8006b4c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c58:	f000 f9fa 	bl	8007050 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c5c:	f000 fd0a 	bl	8007674 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c62:	f000 fa47 	bl	80070f4 <prvIsQueueEmpty>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f43f af6f 	beq.w	8006b4c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3730      	adds	r7, #48	; 0x30
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	e000ed04 	.word	0xe000ed04

08006c7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08e      	sub	sp, #56	; 0x38
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c86:	2300      	movs	r3, #0
 8006c88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d109      	bne.n	8006cac <xQueueSemaphoreTake+0x30>
 8006c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	623b      	str	r3, [r7, #32]
 8006caa:	e7fe      	b.n	8006caa <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d009      	beq.n	8006cc8 <xQueueSemaphoreTake+0x4c>
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	61fb      	str	r3, [r7, #28]
 8006cc6:	e7fe      	b.n	8006cc6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cc8:	f001 f928 	bl	8007f1c <xTaskGetSchedulerState>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d102      	bne.n	8006cd8 <xQueueSemaphoreTake+0x5c>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <xQueueSemaphoreTake+0x60>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <xQueueSemaphoreTake+0x62>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d109      	bne.n	8006cf6 <xQueueSemaphoreTake+0x7a>
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	61bb      	str	r3, [r7, #24]
 8006cf4:	e7fe      	b.n	8006cf4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cf6:	f7ff fa09 	bl	800610c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d024      	beq.n	8006d50 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d08:	1e5a      	subs	r2, r3, #1
 8006d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d104      	bne.n	8006d20 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006d16:	f001 fadf 	bl	80082d8 <pvTaskIncrementMutexHeldCount>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00f      	beq.n	8006d48 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2a:	3310      	adds	r3, #16
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 fec1 	bl	8007ab4 <xTaskRemoveFromEventList>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d007      	beq.n	8006d48 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d38:	4b53      	ldr	r3, [pc, #332]	; (8006e88 <xQueueSemaphoreTake+0x20c>)
 8006d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d48:	f7ff fa0e 	bl	8006168 <vPortExitCritical>
				return pdPASS;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e096      	b.n	8006e7e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d110      	bne.n	8006d78 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d009      	beq.n	8006d70 <xQueueSemaphoreTake+0xf4>
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	617b      	str	r3, [r7, #20]
 8006d6e:	e7fe      	b.n	8006d6e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006d70:	f7ff f9fa 	bl	8006168 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d74:	2300      	movs	r3, #0
 8006d76:	e082      	b.n	8006e7e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d106      	bne.n	8006d8c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d7e:	f107 030c 	add.w	r3, r7, #12
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 ff7e 	bl	8007c84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d8c:	f7ff f9ec 	bl	8006168 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d90:	f000 fc62 	bl	8007658 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d94:	f7ff f9ba 	bl	800610c <vPortEnterCritical>
 8006d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d9e:	b25b      	sxtb	r3, r3
 8006da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da4:	d103      	bne.n	8006dae <xQueueSemaphoreTake+0x132>
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006db4:	b25b      	sxtb	r3, r3
 8006db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dba:	d103      	bne.n	8006dc4 <xQueueSemaphoreTake+0x148>
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dc4:	f7ff f9d0 	bl	8006168 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dc8:	463a      	mov	r2, r7
 8006dca:	f107 030c 	add.w	r3, r7, #12
 8006dce:	4611      	mov	r1, r2
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 ff6d 	bl	8007cb0 <xTaskCheckForTimeOut>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d132      	bne.n	8006e42 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dde:	f000 f989 	bl	80070f4 <prvIsQueueEmpty>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d026      	beq.n	8006e36 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d109      	bne.n	8006e04 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006df0:	f7ff f98c 	bl	800610c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f001 f8ad 	bl	8007f58 <xTaskPriorityInherit>
 8006dfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006e00:	f7ff f9b2 	bl	8006168 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	3324      	adds	r3, #36	; 0x24
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 fdf3 	bl	80079f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e14:	f000 f91c 	bl	8007050 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e18:	f000 fc2c 	bl	8007674 <xTaskResumeAll>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f47f af69 	bne.w	8006cf6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006e24:	4b18      	ldr	r3, [pc, #96]	; (8006e88 <xQueueSemaphoreTake+0x20c>)
 8006e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	e75f      	b.n	8006cf6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e38:	f000 f90a 	bl	8007050 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e3c:	f000 fc1a 	bl	8007674 <xTaskResumeAll>
 8006e40:	e759      	b.n	8006cf6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006e42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e44:	f000 f904 	bl	8007050 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e48:	f000 fc14 	bl	8007674 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e4e:	f000 f951 	bl	80070f4 <prvIsQueueEmpty>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f43f af4e 	beq.w	8006cf6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00d      	beq.n	8006e7c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006e60:	f7ff f954 	bl	800610c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e66:	f000 f84b 	bl	8006f00 <prvGetDisinheritPriorityAfterTimeout>
 8006e6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 f97a 	bl	800816c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006e78:	f7ff f976 	bl	8006168 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3738      	adds	r7, #56	; 0x38
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	e000ed04 	.word	0xe000ed04

08006e8c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <uxQueueMessagesWaiting+0x22>
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	60bb      	str	r3, [r7, #8]
 8006eac:	e7fe      	b.n	8006eac <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8006eae:	f7ff f92d 	bl	800610c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006eb8:	f7ff f956 	bl	8006168 <vPortExitCritical>

	return uxReturn;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d109      	bne.n	8006eec <vQueueDelete+0x26>
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	60bb      	str	r3, [r7, #8]
 8006eea:	e7fe      	b.n	8006eea <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 f957 	bl	80071a0 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7ff fae6 	bl	80064c4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006ef8:	bf00      	nop
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d006      	beq.n	8006f1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f1c3 0307 	rsb	r3, r3, #7
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	e001      	b.n	8006f22 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006f22:	68fb      	ldr	r3, [r7, #12]
	}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10d      	bne.n	8006f6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d14d      	bne.n	8006ff2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f001 f882 	bl	8008064 <xTaskPriorityDisinherit>
 8006f60:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	605a      	str	r2, [r3, #4]
 8006f68:	e043      	b.n	8006ff2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d119      	bne.n	8006fa4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6898      	ldr	r0, [r3, #8]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	461a      	mov	r2, r3
 8006f7a:	68b9      	ldr	r1, [r7, #8]
 8006f7c:	f009 fdb7 	bl	8010aee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f88:	441a      	add	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d32b      	bcc.n	8006ff2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	609a      	str	r2, [r3, #8]
 8006fa2:	e026      	b.n	8006ff2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	68d8      	ldr	r0, [r3, #12]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fac:	461a      	mov	r2, r3
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	f009 fd9d 	bl	8010aee <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	68da      	ldr	r2, [r3, #12]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	425b      	negs	r3, r3
 8006fbe:	441a      	add	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	68da      	ldr	r2, [r3, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d207      	bcs.n	8006fe0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd8:	425b      	negs	r3, r3
 8006fda:	441a      	add	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d105      	bne.n	8006ff2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006ffa:	697b      	ldr	r3, [r7, #20]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007012:	2b00      	cmp	r3, #0
 8007014:	d018      	beq.n	8007048 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	441a      	add	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	429a      	cmp	r2, r3
 800702e:	d303      	bcc.n	8007038 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68d9      	ldr	r1, [r3, #12]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	461a      	mov	r2, r3
 8007042:	6838      	ldr	r0, [r7, #0]
 8007044:	f009 fd53 	bl	8010aee <memcpy>
	}
}
 8007048:	bf00      	nop
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007058:	f7ff f858 	bl	800610c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007062:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007064:	e011      	b.n	800708a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	2b00      	cmp	r3, #0
 800706c:	d012      	beq.n	8007094 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	3324      	adds	r3, #36	; 0x24
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fd1e 	bl	8007ab4 <xTaskRemoveFromEventList>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800707e:	f000 fe77 	bl	8007d70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	3b01      	subs	r3, #1
 8007086:	b2db      	uxtb	r3, r3
 8007088:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800708a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800708e:	2b00      	cmp	r3, #0
 8007090:	dce9      	bgt.n	8007066 <prvUnlockQueue+0x16>
 8007092:	e000      	b.n	8007096 <prvUnlockQueue+0x46>
					break;
 8007094:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	22ff      	movs	r2, #255	; 0xff
 800709a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800709e:	f7ff f863 	bl	8006168 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070a2:	f7ff f833 	bl	800610c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070ae:	e011      	b.n	80070d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d012      	beq.n	80070de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3310      	adds	r3, #16
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 fcf9 	bl	8007ab4 <xTaskRemoveFromEventList>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80070c8:	f000 fe52 	bl	8007d70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	dce9      	bgt.n	80070b0 <prvUnlockQueue+0x60>
 80070dc:	e000      	b.n	80070e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80070de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	22ff      	movs	r2, #255	; 0xff
 80070e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80070e8:	f7ff f83e 	bl	8006168 <vPortExitCritical>
}
 80070ec:	bf00      	nop
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070fc:	f7ff f806 	bl	800610c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	2b00      	cmp	r3, #0
 8007106:	d102      	bne.n	800710e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007108:	2301      	movs	r3, #1
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	e001      	b.n	8007112 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007112:	f7ff f829 	bl	8006168 <vPortExitCritical>

	return xReturn;
 8007116:	68fb      	ldr	r3, [r7, #12]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007128:	f7fe fff0 	bl	800610c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007134:	429a      	cmp	r2, r3
 8007136:	d102      	bne.n	800713e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007138:	2301      	movs	r3, #1
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	e001      	b.n	8007142 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007142:	f7ff f811 	bl	8006168 <vPortExitCritical>

	return xReturn;
 8007146:	68fb      	ldr	r3, [r7, #12]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800715a:	2300      	movs	r3, #0
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	e014      	b.n	800718a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007160:	4a0e      	ldr	r2, [pc, #56]	; (800719c <vQueueAddToRegistry+0x4c>)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10b      	bne.n	8007184 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800716c:	490b      	ldr	r1, [pc, #44]	; (800719c <vQueueAddToRegistry+0x4c>)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007176:	4a09      	ldr	r2, [pc, #36]	; (800719c <vQueueAddToRegistry+0x4c>)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	4413      	add	r3, r2
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007182:	e005      	b.n	8007190 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	3301      	adds	r3, #1
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b07      	cmp	r3, #7
 800718e:	d9e7      	bls.n	8007160 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007190:	bf00      	nop
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	20005434 	.word	0x20005434

080071a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	e016      	b.n	80071dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80071ae:	4a10      	ldr	r2, [pc, #64]	; (80071f0 <vQueueUnregisterQueue+0x50>)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	4413      	add	r3, r2
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d10b      	bne.n	80071d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80071be:	4a0c      	ldr	r2, [pc, #48]	; (80071f0 <vQueueUnregisterQueue+0x50>)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2100      	movs	r1, #0
 80071c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80071c8:	4a09      	ldr	r2, [pc, #36]	; (80071f0 <vQueueUnregisterQueue+0x50>)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	4413      	add	r3, r2
 80071d0:	2200      	movs	r2, #0
 80071d2:	605a      	str	r2, [r3, #4]
				break;
 80071d4:	e005      	b.n	80071e2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	3301      	adds	r3, #1
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2b07      	cmp	r3, #7
 80071e0:	d9e5      	bls.n	80071ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80071e2:	bf00      	nop
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	20005434 	.word	0x20005434

080071f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b08c      	sub	sp, #48	; 0x30
 80071f8:	af04      	add	r7, sp, #16
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	4613      	mov	r3, r2
 8007202:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007204:	88fb      	ldrh	r3, [r7, #6]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4618      	mov	r0, r3
 800720a:	f7ff f899 	bl	8006340 <pvPortMalloc>
 800720e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00e      	beq.n	8007234 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007216:	2054      	movs	r0, #84	; 0x54
 8007218:	f7ff f892 	bl	8006340 <pvPortMalloc>
 800721c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	631a      	str	r2, [r3, #48]	; 0x30
 800722a:	e005      	b.n	8007238 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800722c:	6978      	ldr	r0, [r7, #20]
 800722e:	f7ff f949 	bl	80064c4 <vPortFree>
 8007232:	e001      	b.n	8007238 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007234:	2300      	movs	r3, #0
 8007236:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d013      	beq.n	8007266 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800723e:	88fa      	ldrh	r2, [r7, #6]
 8007240:	2300      	movs	r3, #0
 8007242:	9303      	str	r3, [sp, #12]
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	9302      	str	r3, [sp, #8]
 8007248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	68b9      	ldr	r1, [r7, #8]
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 f80e 	bl	8007276 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800725a:	69f8      	ldr	r0, [r7, #28]
 800725c:	f000 f88a 	bl	8007374 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007260:	2301      	movs	r3, #1
 8007262:	61bb      	str	r3, [r7, #24]
 8007264:	e002      	b.n	800726c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007266:	f04f 33ff 	mov.w	r3, #4294967295
 800726a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800726c:	69bb      	ldr	r3, [r7, #24]
	}
 800726e:	4618      	mov	r0, r3
 8007270:	3720      	adds	r7, #32
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b088      	sub	sp, #32
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800728e:	3b01      	subs	r3, #1
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	f023 0307 	bic.w	r3, r3, #7
 800729c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d009      	beq.n	80072bc <prvInitialiseNewTask+0x46>
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	617b      	str	r3, [r7, #20]
 80072ba:	e7fe      	b.n	80072ba <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072bc:	2300      	movs	r3, #0
 80072be:	61fb      	str	r3, [r7, #28]
 80072c0:	e012      	b.n	80072e8 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	4413      	add	r3, r2
 80072c8:	7819      	ldrb	r1, [r3, #0]
 80072ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	4413      	add	r3, r2
 80072d0:	3334      	adds	r3, #52	; 0x34
 80072d2:	460a      	mov	r2, r1
 80072d4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	4413      	add	r3, r2
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d006      	beq.n	80072f0 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	3301      	adds	r3, #1
 80072e6:	61fb      	str	r3, [r7, #28]
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	2b0f      	cmp	r3, #15
 80072ec:	d9e9      	bls.n	80072c2 <prvInitialiseNewTask+0x4c>
 80072ee:	e000      	b.n	80072f2 <prvInitialiseNewTask+0x7c>
		{
			break;
 80072f0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	2b06      	cmp	r3, #6
 80072fe:	d901      	bls.n	8007304 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007300:	2306      	movs	r3, #6
 8007302:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007308:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800730e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	2200      	movs	r2, #0
 8007314:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	3304      	adds	r3, #4
 800731a:	4618      	mov	r0, r3
 800731c:	f7fe fd3b 	bl	8005d96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	3318      	adds	r3, #24
 8007324:	4618      	mov	r0, r3
 8007326:	f7fe fd36 	bl	8005d96 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800732e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	f1c3 0207 	rsb	r2, r3, #7
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800733e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	2200      	movs	r2, #0
 8007344:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	68f9      	ldr	r1, [r7, #12]
 8007352:	69b8      	ldr	r0, [r7, #24]
 8007354:	f7fe fdb4 	bl	8005ec0 <pxPortInitialiseStack>
 8007358:	4602      	mov	r2, r0
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007368:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800736a:	bf00      	nop
 800736c:	3720      	adds	r7, #32
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
	...

08007374 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800737c:	f7fe fec6 	bl	800610c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007380:	4b2a      	ldr	r3, [pc, #168]	; (800742c <prvAddNewTaskToReadyList+0xb8>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3301      	adds	r3, #1
 8007386:	4a29      	ldr	r2, [pc, #164]	; (800742c <prvAddNewTaskToReadyList+0xb8>)
 8007388:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800738a:	4b29      	ldr	r3, [pc, #164]	; (8007430 <prvAddNewTaskToReadyList+0xbc>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d109      	bne.n	80073a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007392:	4a27      	ldr	r2, [pc, #156]	; (8007430 <prvAddNewTaskToReadyList+0xbc>)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007398:	4b24      	ldr	r3, [pc, #144]	; (800742c <prvAddNewTaskToReadyList+0xb8>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d110      	bne.n	80073c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073a0:	f000 fd0a 	bl	8007db8 <prvInitialiseTaskLists>
 80073a4:	e00d      	b.n	80073c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073a6:	4b23      	ldr	r3, [pc, #140]	; (8007434 <prvAddNewTaskToReadyList+0xc0>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d109      	bne.n	80073c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073ae:	4b20      	ldr	r3, [pc, #128]	; (8007430 <prvAddNewTaskToReadyList+0xbc>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d802      	bhi.n	80073c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073bc:	4a1c      	ldr	r2, [pc, #112]	; (8007430 <prvAddNewTaskToReadyList+0xbc>)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073c2:	4b1d      	ldr	r3, [pc, #116]	; (8007438 <prvAddNewTaskToReadyList+0xc4>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3301      	adds	r3, #1
 80073c8:	4a1b      	ldr	r2, [pc, #108]	; (8007438 <prvAddNewTaskToReadyList+0xc4>)
 80073ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d0:	2201      	movs	r2, #1
 80073d2:	409a      	lsls	r2, r3
 80073d4:	4b19      	ldr	r3, [pc, #100]	; (800743c <prvAddNewTaskToReadyList+0xc8>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4313      	orrs	r3, r2
 80073da:	4a18      	ldr	r2, [pc, #96]	; (800743c <prvAddNewTaskToReadyList+0xc8>)
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e2:	4613      	mov	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4a15      	ldr	r2, [pc, #84]	; (8007440 <prvAddNewTaskToReadyList+0xcc>)
 80073ec:	441a      	add	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	3304      	adds	r3, #4
 80073f2:	4619      	mov	r1, r3
 80073f4:	4610      	mov	r0, r2
 80073f6:	f7fe fcdb 	bl	8005db0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073fa:	f7fe feb5 	bl	8006168 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073fe:	4b0d      	ldr	r3, [pc, #52]	; (8007434 <prvAddNewTaskToReadyList+0xc0>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00e      	beq.n	8007424 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007406:	4b0a      	ldr	r3, [pc, #40]	; (8007430 <prvAddNewTaskToReadyList+0xbc>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	429a      	cmp	r2, r3
 8007412:	d207      	bcs.n	8007424 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007414:	4b0b      	ldr	r3, [pc, #44]	; (8007444 <prvAddNewTaskToReadyList+0xd0>)
 8007416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007424:	bf00      	nop
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	20004078 	.word	0x20004078
 8007430:	20003f78 	.word	0x20003f78
 8007434:	20004084 	.word	0x20004084
 8007438:	20004094 	.word	0x20004094
 800743c:	20004080 	.word	0x20004080
 8007440:	20003f7c 	.word	0x20003f7c
 8007444:	e000ed04 	.word	0xe000ed04

08007448 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007450:	f7fe fe5c 	bl	800610c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d102      	bne.n	8007460 <vTaskDelete+0x18>
 800745a:	4b38      	ldr	r3, [pc, #224]	; (800753c <vTaskDelete+0xf4>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	e000      	b.n	8007462 <vTaskDelete+0x1a>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3304      	adds	r3, #4
 8007468:	4618      	mov	r0, r3
 800746a:	f7fe fcfe 	bl	8005e6a <uxListRemove>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d115      	bne.n	80074a0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007478:	4931      	ldr	r1, [pc, #196]	; (8007540 <vTaskDelete+0xf8>)
 800747a:	4613      	mov	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	440b      	add	r3, r1
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10a      	bne.n	80074a0 <vTaskDelete+0x58>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	2201      	movs	r2, #1
 8007490:	fa02 f303 	lsl.w	r3, r2, r3
 8007494:	43da      	mvns	r2, r3
 8007496:	4b2b      	ldr	r3, [pc, #172]	; (8007544 <vTaskDelete+0xfc>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4013      	ands	r3, r2
 800749c:	4a29      	ldr	r2, [pc, #164]	; (8007544 <vTaskDelete+0xfc>)
 800749e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d004      	beq.n	80074b2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3318      	adds	r3, #24
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fe fcdc 	bl	8005e6a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80074b2:	4b25      	ldr	r3, [pc, #148]	; (8007548 <vTaskDelete+0x100>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3301      	adds	r3, #1
 80074b8:	4a23      	ldr	r2, [pc, #140]	; (8007548 <vTaskDelete+0x100>)
 80074ba:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80074bc:	4b1f      	ldr	r3, [pc, #124]	; (800753c <vTaskDelete+0xf4>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d10b      	bne.n	80074de <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3304      	adds	r3, #4
 80074ca:	4619      	mov	r1, r3
 80074cc:	481f      	ldr	r0, [pc, #124]	; (800754c <vTaskDelete+0x104>)
 80074ce:	f7fe fc6f 	bl	8005db0 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80074d2:	4b1f      	ldr	r3, [pc, #124]	; (8007550 <vTaskDelete+0x108>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3301      	adds	r3, #1
 80074d8:	4a1d      	ldr	r2, [pc, #116]	; (8007550 <vTaskDelete+0x108>)
 80074da:	6013      	str	r3, [r2, #0]
 80074dc:	e009      	b.n	80074f2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80074de:	4b1d      	ldr	r3, [pc, #116]	; (8007554 <vTaskDelete+0x10c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	4a1b      	ldr	r2, [pc, #108]	; (8007554 <vTaskDelete+0x10c>)
 80074e6:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 fcd1 	bl	8007e90 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80074ee:	f000 fcdf 	bl	8007eb0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80074f2:	f7fe fe39 	bl	8006168 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80074f6:	4b18      	ldr	r3, [pc, #96]	; (8007558 <vTaskDelete+0x110>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d01a      	beq.n	8007534 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 80074fe:	4b0f      	ldr	r3, [pc, #60]	; (800753c <vTaskDelete+0xf4>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	429a      	cmp	r2, r3
 8007506:	d115      	bne.n	8007534 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007508:	4b14      	ldr	r3, [pc, #80]	; (800755c <vTaskDelete+0x114>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d009      	beq.n	8007524 <vTaskDelete+0xdc>
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	60bb      	str	r3, [r7, #8]
 8007522:	e7fe      	b.n	8007522 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8007524:	4b0e      	ldr	r3, [pc, #56]	; (8007560 <vTaskDelete+0x118>)
 8007526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007534:	bf00      	nop
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	20003f78 	.word	0x20003f78
 8007540:	20003f7c 	.word	0x20003f7c
 8007544:	20004080 	.word	0x20004080
 8007548:	20004094 	.word	0x20004094
 800754c:	2000404c 	.word	0x2000404c
 8007550:	20004060 	.word	0x20004060
 8007554:	20004078 	.word	0x20004078
 8007558:	20004084 	.word	0x20004084
 800755c:	200040a0 	.word	0x200040a0
 8007560:	e000ed04 	.word	0xe000ed04

08007564 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800756c:	2300      	movs	r3, #0
 800756e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d016      	beq.n	80075a4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007576:	4b13      	ldr	r3, [pc, #76]	; (80075c4 <vTaskDelay+0x60>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d009      	beq.n	8007592 <vTaskDelay+0x2e>
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	60bb      	str	r3, [r7, #8]
 8007590:	e7fe      	b.n	8007590 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007592:	f000 f861 	bl	8007658 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007596:	2100      	movs	r1, #0
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 ff89 	bl	80084b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800759e:	f000 f869 	bl	8007674 <xTaskResumeAll>
 80075a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d107      	bne.n	80075ba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80075aa:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <vTaskDelay+0x64>)
 80075ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075ba:	bf00      	nop
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	200040a0 	.word	0x200040a0
 80075c8:	e000ed04 	.word	0xe000ed04

080075cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80075d2:	4b1b      	ldr	r3, [pc, #108]	; (8007640 <vTaskStartScheduler+0x74>)
 80075d4:	9301      	str	r3, [sp, #4]
 80075d6:	2300      	movs	r3, #0
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	2300      	movs	r3, #0
 80075dc:	2280      	movs	r2, #128	; 0x80
 80075de:	4919      	ldr	r1, [pc, #100]	; (8007644 <vTaskStartScheduler+0x78>)
 80075e0:	4819      	ldr	r0, [pc, #100]	; (8007648 <vTaskStartScheduler+0x7c>)
 80075e2:	f7ff fe07 	bl	80071f4 <xTaskCreate>
 80075e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d115      	bne.n	800761a <vTaskStartScheduler+0x4e>
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007600:	4b12      	ldr	r3, [pc, #72]	; (800764c <vTaskStartScheduler+0x80>)
 8007602:	f04f 32ff 	mov.w	r2, #4294967295
 8007606:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007608:	4b11      	ldr	r3, [pc, #68]	; (8007650 <vTaskStartScheduler+0x84>)
 800760a:	2201      	movs	r2, #1
 800760c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800760e:	4b11      	ldr	r3, [pc, #68]	; (8007654 <vTaskStartScheduler+0x88>)
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007614:	f7fe fcdc 	bl	8005fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007618:	e00d      	b.n	8007636 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007620:	d109      	bne.n	8007636 <vTaskStartScheduler+0x6a>
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	607b      	str	r3, [r7, #4]
 8007634:	e7fe      	b.n	8007634 <vTaskStartScheduler+0x68>
}
 8007636:	bf00      	nop
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	2000409c 	.word	0x2000409c
 8007644:	08010de4 	.word	0x08010de4
 8007648:	08007d89 	.word	0x08007d89
 800764c:	20004098 	.word	0x20004098
 8007650:	20004084 	.word	0x20004084
 8007654:	2000407c 	.word	0x2000407c

08007658 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007658:	b480      	push	{r7}
 800765a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800765c:	4b04      	ldr	r3, [pc, #16]	; (8007670 <vTaskSuspendAll+0x18>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3301      	adds	r3, #1
 8007662:	4a03      	ldr	r2, [pc, #12]	; (8007670 <vTaskSuspendAll+0x18>)
 8007664:	6013      	str	r3, [r2, #0]
}
 8007666:	bf00      	nop
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	200040a0 	.word	0x200040a0

08007674 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800767e:	2300      	movs	r3, #0
 8007680:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007682:	4b41      	ldr	r3, [pc, #260]	; (8007788 <xTaskResumeAll+0x114>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d109      	bne.n	800769e <xTaskResumeAll+0x2a>
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	e7fe      	b.n	800769c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800769e:	f7fe fd35 	bl	800610c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076a2:	4b39      	ldr	r3, [pc, #228]	; (8007788 <xTaskResumeAll+0x114>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	4a37      	ldr	r2, [pc, #220]	; (8007788 <xTaskResumeAll+0x114>)
 80076aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076ac:	4b36      	ldr	r3, [pc, #216]	; (8007788 <xTaskResumeAll+0x114>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d161      	bne.n	8007778 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076b4:	4b35      	ldr	r3, [pc, #212]	; (800778c <xTaskResumeAll+0x118>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d05d      	beq.n	8007778 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076bc:	e02e      	b.n	800771c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80076be:	4b34      	ldr	r3, [pc, #208]	; (8007790 <xTaskResumeAll+0x11c>)
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3318      	adds	r3, #24
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fe fbcd 	bl	8005e6a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe fbc8 	bl	8005e6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	2201      	movs	r2, #1
 80076e0:	409a      	lsls	r2, r3
 80076e2:	4b2c      	ldr	r3, [pc, #176]	; (8007794 <xTaskResumeAll+0x120>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	4a2a      	ldr	r2, [pc, #168]	; (8007794 <xTaskResumeAll+0x120>)
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f0:	4613      	mov	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4a27      	ldr	r2, [pc, #156]	; (8007798 <xTaskResumeAll+0x124>)
 80076fa:	441a      	add	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3304      	adds	r3, #4
 8007700:	4619      	mov	r1, r3
 8007702:	4610      	mov	r0, r2
 8007704:	f7fe fb54 	bl	8005db0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770c:	4b23      	ldr	r3, [pc, #140]	; (800779c <xTaskResumeAll+0x128>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007712:	429a      	cmp	r2, r3
 8007714:	d302      	bcc.n	800771c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007716:	4b22      	ldr	r3, [pc, #136]	; (80077a0 <xTaskResumeAll+0x12c>)
 8007718:	2201      	movs	r2, #1
 800771a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800771c:	4b1c      	ldr	r3, [pc, #112]	; (8007790 <xTaskResumeAll+0x11c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1cc      	bne.n	80076be <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800772a:	f000 fbc1 	bl	8007eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800772e:	4b1d      	ldr	r3, [pc, #116]	; (80077a4 <xTaskResumeAll+0x130>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d010      	beq.n	800775c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800773a:	f000 f847 	bl	80077cc <xTaskIncrementTick>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007744:	4b16      	ldr	r3, [pc, #88]	; (80077a0 <xTaskResumeAll+0x12c>)
 8007746:	2201      	movs	r2, #1
 8007748:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3b01      	subs	r3, #1
 800774e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1f1      	bne.n	800773a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007756:	4b13      	ldr	r3, [pc, #76]	; (80077a4 <xTaskResumeAll+0x130>)
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800775c:	4b10      	ldr	r3, [pc, #64]	; (80077a0 <xTaskResumeAll+0x12c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d009      	beq.n	8007778 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007764:	2301      	movs	r3, #1
 8007766:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007768:	4b0f      	ldr	r3, [pc, #60]	; (80077a8 <xTaskResumeAll+0x134>)
 800776a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007778:	f7fe fcf6 	bl	8006168 <vPortExitCritical>

	return xAlreadyYielded;
 800777c:	68bb      	ldr	r3, [r7, #8]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	200040a0 	.word	0x200040a0
 800778c:	20004078 	.word	0x20004078
 8007790:	20004038 	.word	0x20004038
 8007794:	20004080 	.word	0x20004080
 8007798:	20003f7c 	.word	0x20003f7c
 800779c:	20003f78 	.word	0x20003f78
 80077a0:	2000408c 	.word	0x2000408c
 80077a4:	20004088 	.word	0x20004088
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80077b2:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <xTaskGetTickCount+0x1c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80077b8:	687b      	ldr	r3, [r7, #4]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	2000407c 	.word	0x2000407c

080077cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077d6:	4b50      	ldr	r3, [pc, #320]	; (8007918 <xTaskIncrementTick+0x14c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f040 808c 	bne.w	80078f8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077e0:	4b4e      	ldr	r3, [pc, #312]	; (800791c <xTaskIncrementTick+0x150>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3301      	adds	r3, #1
 80077e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077e8:	4a4c      	ldr	r2, [pc, #304]	; (800791c <xTaskIncrementTick+0x150>)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d11f      	bne.n	8007834 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80077f4:	4b4a      	ldr	r3, [pc, #296]	; (8007920 <xTaskIncrementTick+0x154>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d009      	beq.n	8007812 <xTaskIncrementTick+0x46>
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	e7fe      	b.n	8007810 <xTaskIncrementTick+0x44>
 8007812:	4b43      	ldr	r3, [pc, #268]	; (8007920 <xTaskIncrementTick+0x154>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	4b42      	ldr	r3, [pc, #264]	; (8007924 <xTaskIncrementTick+0x158>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a40      	ldr	r2, [pc, #256]	; (8007920 <xTaskIncrementTick+0x154>)
 800781e:	6013      	str	r3, [r2, #0]
 8007820:	4a40      	ldr	r2, [pc, #256]	; (8007924 <xTaskIncrementTick+0x158>)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	4b40      	ldr	r3, [pc, #256]	; (8007928 <xTaskIncrementTick+0x15c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3301      	adds	r3, #1
 800782c:	4a3e      	ldr	r2, [pc, #248]	; (8007928 <xTaskIncrementTick+0x15c>)
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	f000 fb3e 	bl	8007eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007834:	4b3d      	ldr	r3, [pc, #244]	; (800792c <xTaskIncrementTick+0x160>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	429a      	cmp	r2, r3
 800783c:	d34d      	bcc.n	80078da <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800783e:	4b38      	ldr	r3, [pc, #224]	; (8007920 <xTaskIncrementTick+0x154>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <xTaskIncrementTick+0x80>
 8007848:	2301      	movs	r3, #1
 800784a:	e000      	b.n	800784e <xTaskIncrementTick+0x82>
 800784c:	2300      	movs	r3, #0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d004      	beq.n	800785c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007852:	4b36      	ldr	r3, [pc, #216]	; (800792c <xTaskIncrementTick+0x160>)
 8007854:	f04f 32ff 	mov.w	r2, #4294967295
 8007858:	601a      	str	r2, [r3, #0]
					break;
 800785a:	e03e      	b.n	80078da <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800785c:	4b30      	ldr	r3, [pc, #192]	; (8007920 <xTaskIncrementTick+0x154>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	429a      	cmp	r2, r3
 8007872:	d203      	bcs.n	800787c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007874:	4a2d      	ldr	r2, [pc, #180]	; (800792c <xTaskIncrementTick+0x160>)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6013      	str	r3, [r2, #0]
						break;
 800787a:	e02e      	b.n	80078da <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	3304      	adds	r3, #4
 8007880:	4618      	mov	r0, r3
 8007882:	f7fe faf2 	bl	8005e6a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788a:	2b00      	cmp	r3, #0
 800788c:	d004      	beq.n	8007898 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	3318      	adds	r3, #24
 8007892:	4618      	mov	r0, r3
 8007894:	f7fe fae9 	bl	8005e6a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	2201      	movs	r2, #1
 800789e:	409a      	lsls	r2, r3
 80078a0:	4b23      	ldr	r3, [pc, #140]	; (8007930 <xTaskIncrementTick+0x164>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	4a22      	ldr	r2, [pc, #136]	; (8007930 <xTaskIncrementTick+0x164>)
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ae:	4613      	mov	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4a1f      	ldr	r2, [pc, #124]	; (8007934 <xTaskIncrementTick+0x168>)
 80078b8:	441a      	add	r2, r3
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	3304      	adds	r3, #4
 80078be:	4619      	mov	r1, r3
 80078c0:	4610      	mov	r0, r2
 80078c2:	f7fe fa75 	bl	8005db0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ca:	4b1b      	ldr	r3, [pc, #108]	; (8007938 <xTaskIncrementTick+0x16c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d3b4      	bcc.n	800783e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80078d4:	2301      	movs	r3, #1
 80078d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078d8:	e7b1      	b.n	800783e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078da:	4b17      	ldr	r3, [pc, #92]	; (8007938 <xTaskIncrementTick+0x16c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e0:	4914      	ldr	r1, [pc, #80]	; (8007934 <xTaskIncrementTick+0x168>)
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	440b      	add	r3, r1
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d907      	bls.n	8007902 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80078f2:	2301      	movs	r3, #1
 80078f4:	617b      	str	r3, [r7, #20]
 80078f6:	e004      	b.n	8007902 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80078f8:	4b10      	ldr	r3, [pc, #64]	; (800793c <xTaskIncrementTick+0x170>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3301      	adds	r3, #1
 80078fe:	4a0f      	ldr	r2, [pc, #60]	; (800793c <xTaskIncrementTick+0x170>)
 8007900:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007902:	4b0f      	ldr	r3, [pc, #60]	; (8007940 <xTaskIncrementTick+0x174>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800790a:	2301      	movs	r3, #1
 800790c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800790e:	697b      	ldr	r3, [r7, #20]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3718      	adds	r7, #24
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	200040a0 	.word	0x200040a0
 800791c:	2000407c 	.word	0x2000407c
 8007920:	20004030 	.word	0x20004030
 8007924:	20004034 	.word	0x20004034
 8007928:	20004090 	.word	0x20004090
 800792c:	20004098 	.word	0x20004098
 8007930:	20004080 	.word	0x20004080
 8007934:	20003f7c 	.word	0x20003f7c
 8007938:	20003f78 	.word	0x20003f78
 800793c:	20004088 	.word	0x20004088
 8007940:	2000408c 	.word	0x2000408c

08007944 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007944:	b480      	push	{r7}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800794a:	4b26      	ldr	r3, [pc, #152]	; (80079e4 <vTaskSwitchContext+0xa0>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007952:	4b25      	ldr	r3, [pc, #148]	; (80079e8 <vTaskSwitchContext+0xa4>)
 8007954:	2201      	movs	r2, #1
 8007956:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007958:	e03e      	b.n	80079d8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800795a:	4b23      	ldr	r3, [pc, #140]	; (80079e8 <vTaskSwitchContext+0xa4>)
 800795c:	2200      	movs	r2, #0
 800795e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007960:	4b22      	ldr	r3, [pc, #136]	; (80079ec <vTaskSwitchContext+0xa8>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	fab3 f383 	clz	r3, r3
 800796c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800796e:	7afb      	ldrb	r3, [r7, #11]
 8007970:	f1c3 031f 	rsb	r3, r3, #31
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	491e      	ldr	r1, [pc, #120]	; (80079f0 <vTaskSwitchContext+0xac>)
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	440b      	add	r3, r1
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d109      	bne.n	800799e <vTaskSwitchContext+0x5a>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	607b      	str	r3, [r7, #4]
 800799c:	e7fe      	b.n	800799c <vTaskSwitchContext+0x58>
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	4613      	mov	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4a11      	ldr	r2, [pc, #68]	; (80079f0 <vTaskSwitchContext+0xac>)
 80079aa:	4413      	add	r3, r2
 80079ac:	613b      	str	r3, [r7, #16]
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	605a      	str	r2, [r3, #4]
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	3308      	adds	r3, #8
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d104      	bne.n	80079ce <vTaskSwitchContext+0x8a>
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	605a      	str	r2, [r3, #4]
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	4a07      	ldr	r2, [pc, #28]	; (80079f4 <vTaskSwitchContext+0xb0>)
 80079d6:	6013      	str	r3, [r2, #0]
}
 80079d8:	bf00      	nop
 80079da:	371c      	adds	r7, #28
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	200040a0 	.word	0x200040a0
 80079e8:	2000408c 	.word	0x2000408c
 80079ec:	20004080 	.word	0x20004080
 80079f0:	20003f7c 	.word	0x20003f7c
 80079f4:	20003f78 	.word	0x20003f78

080079f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d109      	bne.n	8007a1c <vTaskPlaceOnEventList+0x24>
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	60fb      	str	r3, [r7, #12]
 8007a1a:	e7fe      	b.n	8007a1a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a1c:	4b07      	ldr	r3, [pc, #28]	; (8007a3c <vTaskPlaceOnEventList+0x44>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3318      	adds	r3, #24
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7fe f9e7 	bl	8005df8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	6838      	ldr	r0, [r7, #0]
 8007a2e:	f000 fd3f 	bl	80084b0 <prvAddCurrentTaskToDelayedList>
}
 8007a32:	bf00      	nop
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20003f78 	.word	0x20003f78

08007a40 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d109      	bne.n	8007a66 <vTaskPlaceOnUnorderedEventList+0x26>
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	e7fe      	b.n	8007a64 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007a66:	4b11      	ldr	r3, [pc, #68]	; (8007aac <vTaskPlaceOnUnorderedEventList+0x6c>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d109      	bne.n	8007a82 <vTaskPlaceOnUnorderedEventList+0x42>
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	613b      	str	r3, [r7, #16]
 8007a80:	e7fe      	b.n	8007a80 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007a82:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007a8c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a8e:	4b08      	ldr	r3, [pc, #32]	; (8007ab0 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3318      	adds	r3, #24
 8007a94:	4619      	mov	r1, r3
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f7fe f98a 	bl	8005db0 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fd06 	bl	80084b0 <prvAddCurrentTaskToDelayedList>
}
 8007aa4:	bf00      	nop
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	200040a0 	.word	0x200040a0
 8007ab0:	20003f78 	.word	0x20003f78

08007ab4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d109      	bne.n	8007ade <xTaskRemoveFromEventList+0x2a>
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	60fb      	str	r3, [r7, #12]
 8007adc:	e7fe      	b.n	8007adc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	3318      	adds	r3, #24
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fe f9c1 	bl	8005e6a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ae8:	4b1d      	ldr	r3, [pc, #116]	; (8007b60 <xTaskRemoveFromEventList+0xac>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d11c      	bne.n	8007b2a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	3304      	adds	r3, #4
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fe f9b8 	bl	8005e6a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	2201      	movs	r2, #1
 8007b00:	409a      	lsls	r2, r3
 8007b02:	4b18      	ldr	r3, [pc, #96]	; (8007b64 <xTaskRemoveFromEventList+0xb0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	4a16      	ldr	r2, [pc, #88]	; (8007b64 <xTaskRemoveFromEventList+0xb0>)
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b10:	4613      	mov	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4a13      	ldr	r2, [pc, #76]	; (8007b68 <xTaskRemoveFromEventList+0xb4>)
 8007b1a:	441a      	add	r2, r3
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	4619      	mov	r1, r3
 8007b22:	4610      	mov	r0, r2
 8007b24:	f7fe f944 	bl	8005db0 <vListInsertEnd>
 8007b28:	e005      	b.n	8007b36 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	3318      	adds	r3, #24
 8007b2e:	4619      	mov	r1, r3
 8007b30:	480e      	ldr	r0, [pc, #56]	; (8007b6c <xTaskRemoveFromEventList+0xb8>)
 8007b32:	f7fe f93d 	bl	8005db0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3a:	4b0d      	ldr	r3, [pc, #52]	; (8007b70 <xTaskRemoveFromEventList+0xbc>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d905      	bls.n	8007b50 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b44:	2301      	movs	r3, #1
 8007b46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b48:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <xTaskRemoveFromEventList+0xc0>)
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	e001      	b.n	8007b54 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007b50:	2300      	movs	r3, #0
 8007b52:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007b54:	697b      	ldr	r3, [r7, #20]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	200040a0 	.word	0x200040a0
 8007b64:	20004080 	.word	0x20004080
 8007b68:	20003f7c 	.word	0x20003f7c
 8007b6c:	20004038 	.word	0x20004038
 8007b70:	20003f78 	.word	0x20003f78
 8007b74:	2000408c 	.word	0x2000408c

08007b78 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007b82:	4b28      	ldr	r3, [pc, #160]	; (8007c24 <vTaskRemoveFromUnorderedEventList+0xac>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d109      	bne.n	8007b9e <vTaskRemoveFromUnorderedEventList+0x26>
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	613b      	str	r3, [r7, #16]
 8007b9c:	e7fe      	b.n	8007b9c <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d109      	bne.n	8007bc8 <vTaskRemoveFromUnorderedEventList+0x50>
 8007bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	e7fe      	b.n	8007bc6 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7fe f94e 	bl	8005e6a <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fe f949 	bl	8005e6a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	2201      	movs	r2, #1
 8007bde:	409a      	lsls	r2, r3
 8007be0:	4b11      	ldr	r3, [pc, #68]	; (8007c28 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	4a10      	ldr	r2, [pc, #64]	; (8007c28 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4a0d      	ldr	r2, [pc, #52]	; (8007c2c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007bf8:	441a      	add	r2, r3
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4610      	mov	r0, r2
 8007c02:	f7fe f8d5 	bl	8005db0 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0a:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d902      	bls.n	8007c1a <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007c14:	4b07      	ldr	r3, [pc, #28]	; (8007c34 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007c16:	2201      	movs	r2, #1
 8007c18:	601a      	str	r2, [r3, #0]
	}
}
 8007c1a:	bf00      	nop
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	200040a0 	.word	0x200040a0
 8007c28:	20004080 	.word	0x20004080
 8007c2c:	20003f7c 	.word	0x20003f7c
 8007c30:	20003f78 	.word	0x20003f78
 8007c34:	2000408c 	.word	0x2000408c

08007c38 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d109      	bne.n	8007c5a <vTaskSetTimeOutState+0x22>
 8007c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	60fb      	str	r3, [r7, #12]
 8007c58:	e7fe      	b.n	8007c58 <vTaskSetTimeOutState+0x20>
	taskENTER_CRITICAL();
 8007c5a:	f7fe fa57 	bl	800610c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c5e:	4b07      	ldr	r3, [pc, #28]	; (8007c7c <vTaskSetTimeOutState+0x44>)
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007c66:	4b06      	ldr	r3, [pc, #24]	; (8007c80 <vTaskSetTimeOutState+0x48>)
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007c6e:	f7fe fa7b 	bl	8006168 <vPortExitCritical>
}
 8007c72:	bf00      	nop
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20004090 	.word	0x20004090
 8007c80:	2000407c 	.word	0x2000407c

08007c84 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c8c:	4b06      	ldr	r3, [pc, #24]	; (8007ca8 <vTaskInternalSetTimeOutState+0x24>)
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c94:	4b05      	ldr	r3, [pc, #20]	; (8007cac <vTaskInternalSetTimeOutState+0x28>)
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	605a      	str	r2, [r3, #4]
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	20004090 	.word	0x20004090
 8007cac:	2000407c 	.word	0x2000407c

08007cb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d109      	bne.n	8007cd4 <xTaskCheckForTimeOut+0x24>
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	613b      	str	r3, [r7, #16]
 8007cd2:	e7fe      	b.n	8007cd2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d109      	bne.n	8007cee <xTaskCheckForTimeOut+0x3e>
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	e7fe      	b.n	8007cec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007cee:	f7fe fa0d 	bl	800610c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cf2:	4b1d      	ldr	r3, [pc, #116]	; (8007d68 <xTaskCheckForTimeOut+0xb8>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0a:	d102      	bne.n	8007d12 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	61fb      	str	r3, [r7, #28]
 8007d10:	e023      	b.n	8007d5a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	4b15      	ldr	r3, [pc, #84]	; (8007d6c <xTaskCheckForTimeOut+0xbc>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d007      	beq.n	8007d2e <xTaskCheckForTimeOut+0x7e>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d802      	bhi.n	8007d2e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	61fb      	str	r3, [r7, #28]
 8007d2c:	e015      	b.n	8007d5a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d90b      	bls.n	8007d50 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	1ad2      	subs	r2, r2, r3
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff ff9d 	bl	8007c84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61fb      	str	r3, [r7, #28]
 8007d4e:	e004      	b.n	8007d5a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d56:	2301      	movs	r3, #1
 8007d58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d5a:	f7fe fa05 	bl	8006168 <vPortExitCritical>

	return xReturn;
 8007d5e:	69fb      	ldr	r3, [r7, #28]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3720      	adds	r7, #32
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	2000407c 	.word	0x2000407c
 8007d6c:	20004090 	.word	0x20004090

08007d70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d70:	b480      	push	{r7}
 8007d72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d74:	4b03      	ldr	r3, [pc, #12]	; (8007d84 <vTaskMissedYield+0x14>)
 8007d76:	2201      	movs	r2, #1
 8007d78:	601a      	str	r2, [r3, #0]
}
 8007d7a:	bf00      	nop
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	2000408c 	.word	0x2000408c

08007d88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d90:	f000 f852 	bl	8007e38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d94:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <prvIdleTask+0x28>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d9f9      	bls.n	8007d90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d9c:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <prvIdleTask+0x2c>)
 8007d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007dac:	e7f0      	b.n	8007d90 <prvIdleTask+0x8>
 8007dae:	bf00      	nop
 8007db0:	20003f7c 	.word	0x20003f7c
 8007db4:	e000ed04 	.word	0xe000ed04

08007db8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	607b      	str	r3, [r7, #4]
 8007dc2:	e00c      	b.n	8007dde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4a12      	ldr	r2, [pc, #72]	; (8007e18 <prvInitialiseTaskLists+0x60>)
 8007dd0:	4413      	add	r3, r2
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fd ffbf 	bl	8005d56 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	607b      	str	r3, [r7, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b06      	cmp	r3, #6
 8007de2:	d9ef      	bls.n	8007dc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007de4:	480d      	ldr	r0, [pc, #52]	; (8007e1c <prvInitialiseTaskLists+0x64>)
 8007de6:	f7fd ffb6 	bl	8005d56 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dea:	480d      	ldr	r0, [pc, #52]	; (8007e20 <prvInitialiseTaskLists+0x68>)
 8007dec:	f7fd ffb3 	bl	8005d56 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007df0:	480c      	ldr	r0, [pc, #48]	; (8007e24 <prvInitialiseTaskLists+0x6c>)
 8007df2:	f7fd ffb0 	bl	8005d56 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007df6:	480c      	ldr	r0, [pc, #48]	; (8007e28 <prvInitialiseTaskLists+0x70>)
 8007df8:	f7fd ffad 	bl	8005d56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dfc:	480b      	ldr	r0, [pc, #44]	; (8007e2c <prvInitialiseTaskLists+0x74>)
 8007dfe:	f7fd ffaa 	bl	8005d56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e02:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <prvInitialiseTaskLists+0x78>)
 8007e04:	4a05      	ldr	r2, [pc, #20]	; (8007e1c <prvInitialiseTaskLists+0x64>)
 8007e06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e08:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <prvInitialiseTaskLists+0x7c>)
 8007e0a:	4a05      	ldr	r2, [pc, #20]	; (8007e20 <prvInitialiseTaskLists+0x68>)
 8007e0c:	601a      	str	r2, [r3, #0]
}
 8007e0e:	bf00      	nop
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20003f7c 	.word	0x20003f7c
 8007e1c:	20004008 	.word	0x20004008
 8007e20:	2000401c 	.word	0x2000401c
 8007e24:	20004038 	.word	0x20004038
 8007e28:	2000404c 	.word	0x2000404c
 8007e2c:	20004064 	.word	0x20004064
 8007e30:	20004030 	.word	0x20004030
 8007e34:	20004034 	.word	0x20004034

08007e38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e3e:	e019      	b.n	8007e74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e40:	f7fe f964 	bl	800610c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007e44:	4b0f      	ldr	r3, [pc, #60]	; (8007e84 <prvCheckTasksWaitingTermination+0x4c>)
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fe f80a 	bl	8005e6a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e56:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <prvCheckTasksWaitingTermination+0x50>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	4a0a      	ldr	r2, [pc, #40]	; (8007e88 <prvCheckTasksWaitingTermination+0x50>)
 8007e5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e60:	4b0a      	ldr	r3, [pc, #40]	; (8007e8c <prvCheckTasksWaitingTermination+0x54>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	4a09      	ldr	r2, [pc, #36]	; (8007e8c <prvCheckTasksWaitingTermination+0x54>)
 8007e68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e6a:	f7fe f97d 	bl	8006168 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f80e 	bl	8007e90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e74:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <prvCheckTasksWaitingTermination+0x54>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e1      	bne.n	8007e40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e7c:	bf00      	nop
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	2000404c 	.word	0x2000404c
 8007e88:	20004078 	.word	0x20004078
 8007e8c:	20004060 	.word	0x20004060

08007e90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fe fb11 	bl	80064c4 <vPortFree>
			vPortFree( pxTCB );
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7fe fb0e 	bl	80064c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ea8:	bf00      	nop
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eb6:	4b0f      	ldr	r3, [pc, #60]	; (8007ef4 <prvResetNextTaskUnblockTime+0x44>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d101      	bne.n	8007ec4 <prvResetNextTaskUnblockTime+0x14>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e000      	b.n	8007ec6 <prvResetNextTaskUnblockTime+0x16>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d004      	beq.n	8007ed4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007eca:	4b0b      	ldr	r3, [pc, #44]	; (8007ef8 <prvResetNextTaskUnblockTime+0x48>)
 8007ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ed2:	e008      	b.n	8007ee6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ed4:	4b07      	ldr	r3, [pc, #28]	; (8007ef4 <prvResetNextTaskUnblockTime+0x44>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	4a05      	ldr	r2, [pc, #20]	; (8007ef8 <prvResetNextTaskUnblockTime+0x48>)
 8007ee4:	6013      	str	r3, [r2, #0]
}
 8007ee6:	bf00      	nop
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	20004030 	.word	0x20004030
 8007ef8:	20004098 	.word	0x20004098

08007efc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007f02:	4b05      	ldr	r3, [pc, #20]	; (8007f18 <xTaskGetCurrentTaskHandle+0x1c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007f08:	687b      	ldr	r3, [r7, #4]
	}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	20003f78 	.word	0x20003f78

08007f1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f22:	4b0b      	ldr	r3, [pc, #44]	; (8007f50 <xTaskGetSchedulerState+0x34>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d102      	bne.n	8007f30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	607b      	str	r3, [r7, #4]
 8007f2e:	e008      	b.n	8007f42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f30:	4b08      	ldr	r3, [pc, #32]	; (8007f54 <xTaskGetSchedulerState+0x38>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d102      	bne.n	8007f3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	607b      	str	r3, [r7, #4]
 8007f3c:	e001      	b.n	8007f42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f42:	687b      	ldr	r3, [r7, #4]
	}
 8007f44:	4618      	mov	r0, r3
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	20004084 	.word	0x20004084
 8007f54:	200040a0 	.word	0x200040a0

08007f58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d06e      	beq.n	800804c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f72:	4b39      	ldr	r3, [pc, #228]	; (8008058 <xTaskPriorityInherit+0x100>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d25e      	bcs.n	800803a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	db06      	blt.n	8007f92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f84:	4b34      	ldr	r3, [pc, #208]	; (8008058 <xTaskPriorityInherit+0x100>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8a:	f1c3 0207 	rsb	r2, r3, #7
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	6959      	ldr	r1, [r3, #20]
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4a2e      	ldr	r2, [pc, #184]	; (800805c <xTaskPriorityInherit+0x104>)
 8007fa4:	4413      	add	r3, r2
 8007fa6:	4299      	cmp	r1, r3
 8007fa8:	d101      	bne.n	8007fae <xTaskPriorityInherit+0x56>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e000      	b.n	8007fb0 <xTaskPriorityInherit+0x58>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d03a      	beq.n	800802a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fd ff56 	bl	8005e6a <uxListRemove>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d115      	bne.n	8007ff0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc8:	4924      	ldr	r1, [pc, #144]	; (800805c <xTaskPriorityInherit+0x104>)
 8007fca:	4613      	mov	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	440b      	add	r3, r1
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <xTaskPriorityInherit+0x98>
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fde:	2201      	movs	r2, #1
 8007fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe4:	43da      	mvns	r2, r3
 8007fe6:	4b1e      	ldr	r3, [pc, #120]	; (8008060 <xTaskPriorityInherit+0x108>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4013      	ands	r3, r2
 8007fec:	4a1c      	ldr	r2, [pc, #112]	; (8008060 <xTaskPriorityInherit+0x108>)
 8007fee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ff0:	4b19      	ldr	r3, [pc, #100]	; (8008058 <xTaskPriorityInherit+0x100>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffe:	2201      	movs	r2, #1
 8008000:	409a      	lsls	r2, r3
 8008002:	4b17      	ldr	r3, [pc, #92]	; (8008060 <xTaskPriorityInherit+0x108>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4313      	orrs	r3, r2
 8008008:	4a15      	ldr	r2, [pc, #84]	; (8008060 <xTaskPriorityInherit+0x108>)
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008010:	4613      	mov	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4a10      	ldr	r2, [pc, #64]	; (800805c <xTaskPriorityInherit+0x104>)
 800801a:	441a      	add	r2, r3
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	3304      	adds	r3, #4
 8008020:	4619      	mov	r1, r3
 8008022:	4610      	mov	r0, r2
 8008024:	f7fd fec4 	bl	8005db0 <vListInsertEnd>
 8008028:	e004      	b.n	8008034 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800802a:	4b0b      	ldr	r3, [pc, #44]	; (8008058 <xTaskPriorityInherit+0x100>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008034:	2301      	movs	r3, #1
 8008036:	60fb      	str	r3, [r7, #12]
 8008038:	e008      	b.n	800804c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800803e:	4b06      	ldr	r3, [pc, #24]	; (8008058 <xTaskPriorityInherit+0x100>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	429a      	cmp	r2, r3
 8008046:	d201      	bcs.n	800804c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008048:	2301      	movs	r3, #1
 800804a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800804c:	68fb      	ldr	r3, [r7, #12]
	}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20003f78 	.word	0x20003f78
 800805c:	20003f7c 	.word	0x20003f7c
 8008060:	20004080 	.word	0x20004080

08008064 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008070:	2300      	movs	r3, #0
 8008072:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d06c      	beq.n	8008154 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800807a:	4b39      	ldr	r3, [pc, #228]	; (8008160 <xTaskPriorityDisinherit+0xfc>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	429a      	cmp	r2, r3
 8008082:	d009      	beq.n	8008098 <xTaskPriorityDisinherit+0x34>
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	e7fe      	b.n	8008096 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800809c:	2b00      	cmp	r3, #0
 800809e:	d109      	bne.n	80080b4 <xTaskPriorityDisinherit+0x50>
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	60bb      	str	r3, [r7, #8]
 80080b2:	e7fe      	b.n	80080b2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080b8:	1e5a      	subs	r2, r3, #1
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d044      	beq.n	8008154 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d140      	bne.n	8008154 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	3304      	adds	r3, #4
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fd fec7 	bl	8005e6a <uxListRemove>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d115      	bne.n	800810e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e6:	491f      	ldr	r1, [pc, #124]	; (8008164 <xTaskPriorityDisinherit+0x100>)
 80080e8:	4613      	mov	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	440b      	add	r3, r1
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10a      	bne.n	800810e <xTaskPriorityDisinherit+0xaa>
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fc:	2201      	movs	r2, #1
 80080fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008102:	43da      	mvns	r2, r3
 8008104:	4b18      	ldr	r3, [pc, #96]	; (8008168 <xTaskPriorityDisinherit+0x104>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4013      	ands	r3, r2
 800810a:	4a17      	ldr	r2, [pc, #92]	; (8008168 <xTaskPriorityDisinherit+0x104>)
 800810c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811a:	f1c3 0207 	rsb	r2, r3, #7
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008126:	2201      	movs	r2, #1
 8008128:	409a      	lsls	r2, r3
 800812a:	4b0f      	ldr	r3, [pc, #60]	; (8008168 <xTaskPriorityDisinherit+0x104>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4313      	orrs	r3, r2
 8008130:	4a0d      	ldr	r2, [pc, #52]	; (8008168 <xTaskPriorityDisinherit+0x104>)
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008138:	4613      	mov	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4a08      	ldr	r2, [pc, #32]	; (8008164 <xTaskPriorityDisinherit+0x100>)
 8008142:	441a      	add	r2, r3
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	3304      	adds	r3, #4
 8008148:	4619      	mov	r1, r3
 800814a:	4610      	mov	r0, r2
 800814c:	f7fd fe30 	bl	8005db0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008150:	2301      	movs	r3, #1
 8008152:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008154:	697b      	ldr	r3, [r7, #20]
	}
 8008156:	4618      	mov	r0, r3
 8008158:	3718      	adds	r7, #24
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	20003f78 	.word	0x20003f78
 8008164:	20003f7c 	.word	0x20003f7c
 8008168:	20004080 	.word	0x20004080

0800816c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800817a:	2301      	movs	r3, #1
 800817c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 8086 	beq.w	8008292 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800818a:	2b00      	cmp	r3, #0
 800818c:	d109      	bne.n	80081a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	e7fe      	b.n	80081a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d202      	bcs.n	80081b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	61fb      	str	r3, [r7, #28]
 80081b0:	e002      	b.n	80081b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d067      	beq.n	8008292 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d162      	bne.n	8008292 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80081cc:	4b33      	ldr	r3, [pc, #204]	; (800829c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d109      	bne.n	80081ea <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80081d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	60bb      	str	r3, [r7, #8]
 80081e8:	e7fe      	b.n	80081e8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ee:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	69fa      	ldr	r2, [r7, #28]
 80081f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	db04      	blt.n	8008208 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	f1c3 0207 	rsb	r2, r3, #7
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	6959      	ldr	r1, [r3, #20]
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	4613      	mov	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4a22      	ldr	r2, [pc, #136]	; (80082a0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008218:	4413      	add	r3, r2
 800821a:	4299      	cmp	r1, r3
 800821c:	d101      	bne.n	8008222 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800821e:	2301      	movs	r3, #1
 8008220:	e000      	b.n	8008224 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8008222:	2300      	movs	r3, #0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d034      	beq.n	8008292 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	3304      	adds	r3, #4
 800822c:	4618      	mov	r0, r3
 800822e:	f7fd fe1c 	bl	8005e6a <uxListRemove>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d115      	bne.n	8008264 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800823c:	4918      	ldr	r1, [pc, #96]	; (80082a0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800823e:	4613      	mov	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	440b      	add	r3, r1
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10a      	bne.n	8008264 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008252:	2201      	movs	r2, #1
 8008254:	fa02 f303 	lsl.w	r3, r2, r3
 8008258:	43da      	mvns	r2, r3
 800825a:	4b12      	ldr	r3, [pc, #72]	; (80082a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4013      	ands	r3, r2
 8008260:	4a10      	ldr	r2, [pc, #64]	; (80082a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008262:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008268:	2201      	movs	r2, #1
 800826a:	409a      	lsls	r2, r3
 800826c:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4313      	orrs	r3, r2
 8008272:	4a0c      	ldr	r2, [pc, #48]	; (80082a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800827a:	4613      	mov	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4a07      	ldr	r2, [pc, #28]	; (80082a0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008284:	441a      	add	r2, r3
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	3304      	adds	r3, #4
 800828a:	4619      	mov	r1, r3
 800828c:	4610      	mov	r0, r2
 800828e:	f7fd fd8f 	bl	8005db0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008292:	bf00      	nop
 8008294:	3720      	adds	r7, #32
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20003f78 	.word	0x20003f78
 80082a0:	20003f7c 	.word	0x20003f7c
 80082a4:	20004080 	.word	0x20004080

080082a8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80082ae:	4b09      	ldr	r3, [pc, #36]	; (80082d4 <uxTaskResetEventItemValue+0x2c>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b6:	4b07      	ldr	r3, [pc, #28]	; (80082d4 <uxTaskResetEventItemValue+0x2c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a06      	ldr	r2, [pc, #24]	; (80082d4 <uxTaskResetEventItemValue+0x2c>)
 80082bc:	6812      	ldr	r2, [r2, #0]
 80082be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80082c0:	f1c2 0207 	rsb	r2, r2, #7
 80082c4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80082c6:	687b      	ldr	r3, [r7, #4]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr
 80082d4:	20003f78 	.word	0x20003f78

080082d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80082d8:	b480      	push	{r7}
 80082da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80082dc:	4b07      	ldr	r3, [pc, #28]	; (80082fc <pvTaskIncrementMutexHeldCount+0x24>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d004      	beq.n	80082ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80082e4:	4b05      	ldr	r3, [pc, #20]	; (80082fc <pvTaskIncrementMutexHeldCount+0x24>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082ea:	3201      	adds	r2, #1
 80082ec:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80082ee:	4b03      	ldr	r3, [pc, #12]	; (80082fc <pvTaskIncrementMutexHeldCount+0x24>)
 80082f0:	681b      	ldr	r3, [r3, #0]
	}
 80082f2:	4618      	mov	r0, r3
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	20003f78 	.word	0x20003f78

08008300 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800830a:	f7fd feff 	bl	800610c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800830e:	4b1e      	ldr	r3, [pc, #120]	; (8008388 <ulTaskNotifyTake+0x88>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008314:	2b00      	cmp	r3, #0
 8008316:	d113      	bne.n	8008340 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008318:	4b1b      	ldr	r3, [pc, #108]	; (8008388 <ulTaskNotifyTake+0x88>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00b      	beq.n	8008340 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008328:	2101      	movs	r1, #1
 800832a:	6838      	ldr	r0, [r7, #0]
 800832c:	f000 f8c0 	bl	80084b0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008330:	4b16      	ldr	r3, [pc, #88]	; (800838c <ulTaskNotifyTake+0x8c>)
 8008332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008340:	f7fd ff12 	bl	8006168 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008344:	f7fd fee2 	bl	800610c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8008348:	4b0f      	ldr	r3, [pc, #60]	; (8008388 <ulTaskNotifyTake+0x88>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800834e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00c      	beq.n	8008370 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d004      	beq.n	8008366 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800835c:	4b0a      	ldr	r3, [pc, #40]	; (8008388 <ulTaskNotifyTake+0x88>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2200      	movs	r2, #0
 8008362:	64da      	str	r2, [r3, #76]	; 0x4c
 8008364:	e004      	b.n	8008370 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8008366:	4b08      	ldr	r3, [pc, #32]	; (8008388 <ulTaskNotifyTake+0x88>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	3a01      	subs	r2, #1
 800836e:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008370:	4b05      	ldr	r3, [pc, #20]	; (8008388 <ulTaskNotifyTake+0x88>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800837a:	f7fd fef5 	bl	8006168 <vPortExitCritical>

		return ulReturn;
 800837e:	68fb      	ldr	r3, [r7, #12]
	}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	20003f78 	.word	0x20003f78
 800838c:	e000ed04 	.word	0xe000ed04

08008390 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008390:	b580      	push	{r7, lr}
 8008392:	b08a      	sub	sp, #40	; 0x28
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d109      	bne.n	80083b4 <vTaskNotifyGiveFromISR+0x24>
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	61bb      	str	r3, [r7, #24]
 80083b2:	e7fe      	b.n	80083b2 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083b4:	f7fd ff86 	bl	80062c4 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 80083bc:	f3ef 8211 	mrs	r2, BASEPRI
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	617a      	str	r2, [r7, #20]
 80083d2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80083d4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083d6:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083de:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	2202      	movs	r2, #2
 80083e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80083f2:	7ffb      	ldrb	r3, [r7, #31]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d145      	bne.n	8008484 <vTaskNotifyGiveFromISR+0xf4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d009      	beq.n	8008414 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	60fb      	str	r3, [r7, #12]
 8008412:	e7fe      	b.n	8008412 <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008414:	4b20      	ldr	r3, [pc, #128]	; (8008498 <vTaskNotifyGiveFromISR+0x108>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d11c      	bne.n	8008456 <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	3304      	adds	r3, #4
 8008420:	4618      	mov	r0, r3
 8008422:	f7fd fd22 	bl	8005e6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842a:	2201      	movs	r2, #1
 800842c:	409a      	lsls	r2, r3
 800842e:	4b1b      	ldr	r3, [pc, #108]	; (800849c <vTaskNotifyGiveFromISR+0x10c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4313      	orrs	r3, r2
 8008434:	4a19      	ldr	r2, [pc, #100]	; (800849c <vTaskNotifyGiveFromISR+0x10c>)
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843c:	4613      	mov	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4a16      	ldr	r2, [pc, #88]	; (80084a0 <vTaskNotifyGiveFromISR+0x110>)
 8008446:	441a      	add	r2, r3
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	3304      	adds	r3, #4
 800844c:	4619      	mov	r1, r3
 800844e:	4610      	mov	r0, r2
 8008450:	f7fd fcae 	bl	8005db0 <vListInsertEnd>
 8008454:	e005      	b.n	8008462 <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	3318      	adds	r3, #24
 800845a:	4619      	mov	r1, r3
 800845c:	4811      	ldr	r0, [pc, #68]	; (80084a4 <vTaskNotifyGiveFromISR+0x114>)
 800845e:	f7fd fca7 	bl	8005db0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008466:	4b10      	ldr	r3, [pc, #64]	; (80084a8 <vTaskNotifyGiveFromISR+0x118>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846c:	429a      	cmp	r2, r3
 800846e:	d909      	bls.n	8008484 <vTaskNotifyGiveFromISR+0xf4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <vTaskNotifyGiveFromISR+0xee>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2201      	movs	r2, #1
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	e002      	b.n	8008484 <vTaskNotifyGiveFromISR+0xf4>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800847e:	4b0b      	ldr	r3, [pc, #44]	; (80084ac <vTaskNotifyGiveFromISR+0x11c>)
 8008480:	2201      	movs	r2, #1
 8008482:	601a      	str	r2, [r3, #0]
 8008484:	6a3b      	ldr	r3, [r7, #32]
 8008486:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800848e:	bf00      	nop
 8008490:	3728      	adds	r7, #40	; 0x28
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	200040a0 	.word	0x200040a0
 800849c:	20004080 	.word	0x20004080
 80084a0:	20003f7c 	.word	0x20003f7c
 80084a4:	20004038 	.word	0x20004038
 80084a8:	20003f78 	.word	0x20003f78
 80084ac:	2000408c 	.word	0x2000408c

080084b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084ba:	4b29      	ldr	r3, [pc, #164]	; (8008560 <prvAddCurrentTaskToDelayedList+0xb0>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084c0:	4b28      	ldr	r3, [pc, #160]	; (8008564 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3304      	adds	r3, #4
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fd fccf 	bl	8005e6a <uxListRemove>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10b      	bne.n	80084ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80084d2:	4b24      	ldr	r3, [pc, #144]	; (8008564 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	2201      	movs	r2, #1
 80084da:	fa02 f303 	lsl.w	r3, r2, r3
 80084de:	43da      	mvns	r2, r3
 80084e0:	4b21      	ldr	r3, [pc, #132]	; (8008568 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4013      	ands	r3, r2
 80084e6:	4a20      	ldr	r2, [pc, #128]	; (8008568 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f0:	d10a      	bne.n	8008508 <prvAddCurrentTaskToDelayedList+0x58>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d007      	beq.n	8008508 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084f8:	4b1a      	ldr	r3, [pc, #104]	; (8008564 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3304      	adds	r3, #4
 80084fe:	4619      	mov	r1, r3
 8008500:	481a      	ldr	r0, [pc, #104]	; (800856c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008502:	f7fd fc55 	bl	8005db0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008506:	e026      	b.n	8008556 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4413      	add	r3, r2
 800850e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008510:	4b14      	ldr	r3, [pc, #80]	; (8008564 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	429a      	cmp	r2, r3
 800851e:	d209      	bcs.n	8008534 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008520:	4b13      	ldr	r3, [pc, #76]	; (8008570 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	4b0f      	ldr	r3, [pc, #60]	; (8008564 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3304      	adds	r3, #4
 800852a:	4619      	mov	r1, r3
 800852c:	4610      	mov	r0, r2
 800852e:	f7fd fc63 	bl	8005df8 <vListInsert>
}
 8008532:	e010      	b.n	8008556 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008534:	4b0f      	ldr	r3, [pc, #60]	; (8008574 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	4b0a      	ldr	r3, [pc, #40]	; (8008564 <prvAddCurrentTaskToDelayedList+0xb4>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3304      	adds	r3, #4
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f7fd fc59 	bl	8005df8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008546:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	429a      	cmp	r2, r3
 800854e:	d202      	bcs.n	8008556 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008550:	4a09      	ldr	r2, [pc, #36]	; (8008578 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	6013      	str	r3, [r2, #0]
}
 8008556:	bf00      	nop
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	2000407c 	.word	0x2000407c
 8008564:	20003f78 	.word	0x20003f78
 8008568:	20004080 	.word	0x20004080
 800856c:	20004064 	.word	0x20004064
 8008570:	20004034 	.word	0x20004034
 8008574:	20004030 	.word	0x20004030
 8008578:	20004098 	.word	0x20004098

0800857c <eARPProcessPacket>:
};

/*-----------------------------------------------------------*/

eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8008584:	2300      	movs	r3, #0
 8008586:	73fb      	strb	r3, [r7, #15]
ARPHeader_t *pxARPHeader;

	pxARPHeader = &( pxARPFrame->xARPHeader );
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	330e      	adds	r3, #14
 800858c:	60bb      	str	r3, [r7, #8]

	traceARP_PACKET_RECEIVED();

	/* Don't do anything if the local IP address is zero because
	that means a DHCP request has not completed. */
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 800858e:	4b39      	ldr	r3, [pc, #228]	; (8008674 <eARPProcessPacket+0xf8>)
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d068      	beq.n	8008668 <eARPProcessPacket+0xec>
	{
		switch( pxARPHeader->usOperation )
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	88db      	ldrh	r3, [r3, #6]
 800859a:	b29b      	uxth	r3, r3
 800859c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085a0:	d003      	beq.n	80085aa <eARPProcessPacket+0x2e>
 80085a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085a6:	d053      	beq.n	8008650 <eARPProcessPacket+0xd4>
				#endif /* ipconfigARP_USE_CLASH_DETECTION */
				break;

			default :
				/* Invalid. */
				break;
 80085a8:	e05e      	b.n	8008668 <eARPProcessPacket+0xec>
				if( pxARPHeader->ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	699a      	ldr	r2, [r3, #24]
 80085ae:	4b31      	ldr	r3, [pc, #196]	; (8008674 <eARPProcessPacket+0xf8>)
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d157      	bne.n	8008666 <eARPProcessPacket+0xea>
					vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), pxARPHeader->ulSenderProtocolAddress );
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f103 0208 	add.w	r2, r3, #8
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80085c2:	4619      	mov	r1, r3
 80085c4:	4610      	mov	r0, r2
 80085c6:	f000 f859 	bl	800867c <vARPRefreshCacheEntry>
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2200      	movs	r2, #0
 80085ce:	719a      	strb	r2, [r3, #6]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f042 0202 	orr.w	r2, r2, #2
 80085d6:	71da      	strb	r2, [r3, #7]
					if( pxARPHeader->ulTargetProtocolAddress == pxARPHeader->ulSenderProtocolAddress )
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	699a      	ldr	r2, [r3, #24]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d117      	bne.n	8008616 <eARPProcessPacket+0x9a>
						memcpy( pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes, xBroadcastMACAddress.ucBytes, sizeof( xBroadcastMACAddress ) );
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3306      	adds	r3, #6
 80085ea:	4a23      	ldr	r2, [pc, #140]	; (8008678 <eARPProcessPacket+0xfc>)
 80085ec:	6811      	ldr	r1, [r2, #0]
 80085ee:	6019      	str	r1, [r3, #0]
 80085f0:	8892      	ldrh	r2, [r2, #4]
 80085f2:	809a      	strh	r2, [r3, #4]
						memset( pxARPHeader->xTargetHardwareAddress.ucBytes, '\0', sizeof( MACAddress_t ) );
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	3312      	adds	r3, #18
 80085f8:	2206      	movs	r2, #6
 80085fa:	2100      	movs	r1, #0
 80085fc:	4618      	mov	r0, r3
 80085fe:	f008 fa9b 	bl	8010b38 <memset>
						pxARPHeader->ulTargetProtocolAddress = 0UL;
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	2200      	movs	r2, #0
 8008606:	761a      	strb	r2, [r3, #24]
 8008608:	2200      	movs	r2, #0
 800860a:	765a      	strb	r2, [r3, #25]
 800860c:	2200      	movs	r2, #0
 800860e:	769a      	strb	r2, [r3, #26]
 8008610:	2200      	movs	r2, #0
 8008612:	76da      	strb	r2, [r3, #27]
 8008614:	e00d      	b.n	8008632 <eARPProcessPacket+0xb6>
						memcpy( pxARPHeader->xTargetHardwareAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, sizeof( MACAddress_t ) );
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	f103 0012 	add.w	r0, r3, #18
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	3308      	adds	r3, #8
 8008620:	2206      	movs	r2, #6
 8008622:	4619      	mov	r1, r3
 8008624:	f008 fa63 	bl	8010aee <memcpy>
						pxARPHeader->ulTargetProtocolAddress = pxARPHeader->ulSenderProtocolAddress;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	619a      	str	r2, [r3, #24]
					memcpy( pxARPHeader->xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	3308      	adds	r3, #8
 8008636:	2206      	movs	r2, #6
 8008638:	490e      	ldr	r1, [pc, #56]	; (8008674 <eARPProcessPacket+0xf8>)
 800863a:	4618      	mov	r0, r3
 800863c:	f008 fa57 	bl	8010aee <memcpy>
					pxARPHeader->ulSenderProtocolAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8008640:	4b0c      	ldr	r3, [pc, #48]	; (8008674 <eARPProcessPacket+0xf8>)
 8008642:	695a      	ldr	r2, [r3, #20]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f8c3 200e 	str.w	r2, [r3, #14]
					eReturn = eReturnEthernetFrame;
 800864a:	2302      	movs	r3, #2
 800864c:	73fb      	strb	r3, [r7, #15]
				break;
 800864e:	e00a      	b.n	8008666 <eARPProcessPacket+0xea>
				vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), pxARPHeader->ulSenderProtocolAddress );
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	f103 0208 	add.w	r2, r3, #8
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800865c:	4619      	mov	r1, r3
 800865e:	4610      	mov	r0, r2
 8008660:	f000 f80c 	bl	800867c <vARPRefreshCacheEntry>
				break;
 8008664:	e000      	b.n	8008668 <eARPProcessPacket+0xec>
				break;
 8008666:	bf00      	nop
		}
	}

	return eReturn;
 8008668:	7bfb      	ldrb	r3, [r7, #15]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	200000a0 	.word	0x200000a0
 8008678:	08010f84 	.word	0x08010f84

0800867c <vARPRefreshCacheEntry>:

#endif	/* ipconfigUSE_ARP_REMOVE_ENTRY != 0 */
/*-----------------------------------------------------------*/

void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress, const uint32_t ulIPAddress )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b088      	sub	sp, #32
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
BaseType_t x, xIpEntry = -1, xMacEntry = -1, xUseEntry = 0;
 8008686:	f04f 33ff 	mov.w	r3, #4294967295
 800868a:	61bb      	str	r3, [r7, #24]
 800868c:	f04f 33ff 	mov.w	r3, #4294967295
 8008690:	617b      	str	r3, [r7, #20]
 8008692:	2300      	movs	r3, #0
 8008694:	613b      	str	r3, [r7, #16]
uint8_t ucMinAgeFound = 0U;
 8008696:	2300      	movs	r3, #0
 8008698:	73fb      	strb	r3, [r7, #15]

	#if( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )
		/* Only process the IP address if it is on the local network.
		Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
		and netmask are still unknown. */
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 800869a:	4b71      	ldr	r3, [pc, #452]	; (8008860 <vARPRefreshCacheEntry+0x1e4>)
 800869c:	695a      	ldr	r2, [r3, #20]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	405a      	eors	r2, r3
 80086a2:	4b70      	ldr	r3, [pc, #448]	; (8008864 <vARPRefreshCacheEntry+0x1e8>)
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	4013      	ands	r3, r2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d004      	beq.n	80086b6 <vARPRefreshCacheEntry+0x3a>
			( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 80086ac:	4b6c      	ldr	r3, [pc, #432]	; (8008860 <vARPRefreshCacheEntry+0x1e4>)
 80086ae:	695b      	ldr	r3, [r3, #20]
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f040 80d2 	bne.w	800885a <vARPRefreshCacheEntry+0x1de>
		zero the the gateway address is the only option. */
		if( pdTRUE )
	#endif
	{
		/* Start with the maximum possible number. */
		ucMinAgeFound--;
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	73fb      	strb	r3, [r7, #15]

		/* For each entry in the ARP cache table. */
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80086bc:	2300      	movs	r3, #0
 80086be:	61fb      	str	r3, [r7, #28]
 80086c0:	e069      	b.n	8008796 <vARPRefreshCacheEntry+0x11a>
		{
			/* Does this line in the cache table hold an entry for the IP
			address	being queried? */
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 80086c2:	4969      	ldr	r1, [pc, #420]	; (8008868 <vARPRefreshCacheEntry+0x1ec>)
 80086c4:	69fa      	ldr	r2, [r7, #28]
 80086c6:	4613      	mov	r3, r2
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	4413      	add	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	440b      	add	r3, r1
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d12d      	bne.n	8008734 <vARPRefreshCacheEntry+0xb8>
			{
				if( pxMACAddress == NULL )
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d102      	bne.n	80086e4 <vARPRefreshCacheEntry+0x68>
				{
					/* In case the parameter pxMACAddress is NULL, an entry will be reserved to
					indicate that there is an outstanding ARP request, This entry will have
					"ucValid == pdFALSE". */
					xIpEntry = x;
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	61bb      	str	r3, [r7, #24]
					break;
 80086e2:	e05b      	b.n	800879c <vARPRefreshCacheEntry+0x120>
				}

				/* See if the MAC-address also matches. */
				if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 80086e4:	69fa      	ldr	r2, [r7, #28]
 80086e6:	4613      	mov	r3, r2
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	4413      	add	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4a5e      	ldr	r2, [pc, #376]	; (8008868 <vARPRefreshCacheEntry+0x1ec>)
 80086f0:	4413      	add	r3, r2
 80086f2:	3304      	adds	r3, #4
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	2206      	movs	r2, #6
 80086f8:	4618      	mov	r0, r3
 80086fa:	f008 f9e9 	bl	8010ad0 <memcmp>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d114      	bne.n	800872e <vARPRefreshCacheEntry+0xb2>
				{
					/* This function will be called for each received packet
					As this is by far the most common path the coding standard
					is relaxed in this case and a return is permitted as an
					optimisation. */
					xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8008704:	4958      	ldr	r1, [pc, #352]	; (8008868 <vARPRefreshCacheEntry+0x1ec>)
 8008706:	69fa      	ldr	r2, [r7, #28]
 8008708:	4613      	mov	r3, r2
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	440b      	add	r3, r1
 8008712:	330a      	adds	r3, #10
 8008714:	2296      	movs	r2, #150	; 0x96
 8008716:	701a      	strb	r2, [r3, #0]
					xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 8008718:	4953      	ldr	r1, [pc, #332]	; (8008868 <vARPRefreshCacheEntry+0x1ec>)
 800871a:	69fa      	ldr	r2, [r7, #28]
 800871c:	4613      	mov	r3, r2
 800871e:	005b      	lsls	r3, r3, #1
 8008720:	4413      	add	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	440b      	add	r3, r1
 8008726:	330b      	adds	r3, #11
 8008728:	2201      	movs	r2, #1
 800872a:	701a      	strb	r2, [r3, #0]
					return;
 800872c:	e095      	b.n	800885a <vARPRefreshCacheEntry+0x1de>
				/* Found an entry containing ulIPAddress, but the MAC address
				doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
				for an ARP reply.  Still want to see if there is match with the
				given MAC address.ucBytes.  If found, either of the two entries
				must be cleared. */
				xIpEntry = x;
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	61bb      	str	r3, [r7, #24]
 8008732:	e02d      	b.n	8008790 <vARPRefreshCacheEntry+0x114>
			}
			else if( ( pxMACAddress != NULL ) && ( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 ) )
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d012      	beq.n	8008760 <vARPRefreshCacheEntry+0xe4>
 800873a:	69fa      	ldr	r2, [r7, #28]
 800873c:	4613      	mov	r3, r2
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	4413      	add	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4a48      	ldr	r2, [pc, #288]	; (8008868 <vARPRefreshCacheEntry+0x1ec>)
 8008746:	4413      	add	r3, r2
 8008748:	3304      	adds	r3, #4
 800874a:	6879      	ldr	r1, [r7, #4]
 800874c:	2206      	movs	r2, #6
 800874e:	4618      	mov	r0, r3
 8008750:	f008 f9be 	bl	8010ad0 <memcmp>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d102      	bne.n	8008760 <vARPRefreshCacheEntry+0xe4>
				if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
				{
					xMacEntry = x;
				}
	#else
				xMacEntry = x;
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	617b      	str	r3, [r7, #20]
 800875e:	e017      	b.n	8008790 <vARPRefreshCacheEntry+0x114>
	#endif
			}
			/* _HT_
			Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8008760:	4941      	ldr	r1, [pc, #260]	; (8008868 <vARPRefreshCacheEntry+0x1ec>)
 8008762:	69fa      	ldr	r2, [r7, #28]
 8008764:	4613      	mov	r3, r2
 8008766:	005b      	lsls	r3, r3, #1
 8008768:	4413      	add	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	440b      	add	r3, r1
 800876e:	330a      	adds	r3, #10
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	7bfa      	ldrb	r2, [r7, #15]
 8008774:	429a      	cmp	r2, r3
 8008776:	d90b      	bls.n	8008790 <vARPRefreshCacheEntry+0x114>
			{
				/* As the table is traversed, remember the table row that
				contains the oldest entry (the lowest age count, as ages are
				decremented to zero) so the row can be re-used if this function
				needs to add an entry that does not already exist. */
				ucMinAgeFound = xARPCache[ x ].ucAge;
 8008778:	493b      	ldr	r1, [pc, #236]	; (8008868 <vARPRefreshCacheEntry+0x1ec>)
 800877a:	69fa      	ldr	r2, [r7, #28]
 800877c:	4613      	mov	r3, r2
 800877e:	005b      	lsls	r3, r3, #1
 8008780:	4413      	add	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	440b      	add	r3, r1
 8008786:	330a      	adds	r3, #10
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	73fb      	strb	r3, [r7, #15]
				xUseEntry = x;
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	613b      	str	r3, [r7, #16]
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	3301      	adds	r3, #1
 8008794:	61fb      	str	r3, [r7, #28]
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	2b05      	cmp	r3, #5
 800879a:	dd92      	ble.n	80086c2 <vARPRefreshCacheEntry+0x46>
			}
		}

		if( xMacEntry >= 0 )
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	db11      	blt.n	80087c6 <vARPRefreshCacheEntry+0x14a>
		{
			xUseEntry = xMacEntry;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	613b      	str	r3, [r7, #16]

			if( xIpEntry >= 0 )
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	db11      	blt.n	80087d0 <vARPRefreshCacheEntry+0x154>
			{
				/* Both the MAC address as well as the IP address were found in
				different locations: clear the entry which matches the
				IP-address */
				memset( &xARPCache[ xIpEntry ], '\0', sizeof( xARPCache[ xIpEntry ] ) );
 80087ac:	69ba      	ldr	r2, [r7, #24]
 80087ae:	4613      	mov	r3, r2
 80087b0:	005b      	lsls	r3, r3, #1
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4a2c      	ldr	r2, [pc, #176]	; (8008868 <vARPRefreshCacheEntry+0x1ec>)
 80087b8:	4413      	add	r3, r2
 80087ba:	220c      	movs	r2, #12
 80087bc:	2100      	movs	r1, #0
 80087be:	4618      	mov	r0, r3
 80087c0:	f008 f9ba 	bl	8010b38 <memset>
 80087c4:	e004      	b.n	80087d0 <vARPRefreshCacheEntry+0x154>
			}
		}
		else if( xIpEntry >= 0 )
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	db01      	blt.n	80087d0 <vARPRefreshCacheEntry+0x154>
		{
			/* An entry containing the IP-address was found, but it had a different MAC address */
			xUseEntry = xIpEntry;
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	613b      	str	r3, [r7, #16]
		}

		/* If the entry was not found, we use the oldest entry and set the IPaddress */
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 80087d0:	4925      	ldr	r1, [pc, #148]	; (8008868 <vARPRefreshCacheEntry+0x1ec>)
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	4613      	mov	r3, r2
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	440b      	add	r3, r1
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	601a      	str	r2, [r3, #0]

		if( pxMACAddress != NULL )
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d021      	beq.n	800882c <vARPRefreshCacheEntry+0x1b0>
		{
			memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	4613      	mov	r3, r2
 80087ec:	005b      	lsls	r3, r3, #1
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4a1d      	ldr	r2, [pc, #116]	; (8008868 <vARPRefreshCacheEntry+0x1ec>)
 80087f4:	4413      	add	r3, r2
 80087f6:	3304      	adds	r3, #4
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	2206      	movs	r2, #6
 80087fc:	4618      	mov	r0, r3
 80087fe:	f008 f976 	bl	8010aee <memcpy>

			iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, (*pxMACAddress) );
			/* And this entry does not need immediate attention */
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8008802:	4919      	ldr	r1, [pc, #100]	; (8008868 <vARPRefreshCacheEntry+0x1ec>)
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	4613      	mov	r3, r2
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	330a      	adds	r3, #10
 8008812:	2296      	movs	r2, #150	; 0x96
 8008814:	701a      	strb	r2, [r3, #0]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8008816:	4914      	ldr	r1, [pc, #80]	; (8008868 <vARPRefreshCacheEntry+0x1ec>)
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	4613      	mov	r3, r2
 800881c:	005b      	lsls	r3, r3, #1
 800881e:	4413      	add	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	440b      	add	r3, r1
 8008824:	330b      	adds	r3, #11
 8008826:	2201      	movs	r2, #1
 8008828:	701a      	strb	r2, [r3, #0]
 800882a:	e016      	b.n	800885a <vARPRefreshCacheEntry+0x1de>
		}
		else if( xIpEntry < 0 )
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	2b00      	cmp	r3, #0
 8008830:	da13      	bge.n	800885a <vARPRefreshCacheEntry+0x1de>
		{
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8008832:	490d      	ldr	r1, [pc, #52]	; (8008868 <vARPRefreshCacheEntry+0x1ec>)
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	4613      	mov	r3, r2
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	440b      	add	r3, r1
 8008840:	330a      	adds	r3, #10
 8008842:	2205      	movs	r2, #5
 8008844:	701a      	strb	r2, [r3, #0]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8008846:	4908      	ldr	r1, [pc, #32]	; (8008868 <vARPRefreshCacheEntry+0x1ec>)
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	4613      	mov	r3, r2
 800884c:	005b      	lsls	r3, r3, #1
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	440b      	add	r3, r1
 8008854:	330b      	adds	r3, #11
 8008856:	2200      	movs	r2, #0
 8008858:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800885a:	3720      	adds	r7, #32
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	200000a0 	.word	0x200000a0
 8008864:	20004194 	.word	0x20004194
 8008868:	200040a4 	.word	0x200040a4

0800886c <eARPGetCacheEntry>:
#endif /* ipconfigUSE_ARP_REVERSED_LOOKUP */

/*-----------------------------------------------------------*/

eARPLookupResult_t eARPGetCacheEntry( uint32_t *pulIPAddress, MACAddress_t * const pxMACAddress )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
eARPLookupResult_t eReturn;
uint32_t ulAddressToLookup;

#if( ipconfigUSE_LLMNR == 1 )
	if( *pulIPAddress == ipLLMNR_IP_ADDR )	/* Is in network byte order */
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a2a      	ldr	r2, [pc, #168]	; (8008924 <eARPGetCacheEntry+0xb8>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d108      	bne.n	8008892 <eARPGetCacheEntry+0x26>
	{
		/* The LLMNR IP-address has a fixed virtual MAC address */
		memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	4a29      	ldr	r2, [pc, #164]	; (8008928 <eARPGetCacheEntry+0xbc>)
 8008884:	6811      	ldr	r1, [r2, #0]
 8008886:	6019      	str	r1, [r3, #0]
 8008888:	8892      	ldrh	r2, [r2, #4]
 800888a:	809a      	strh	r2, [r3, #4]
		eReturn = eARPCacheHit;
 800888c:	2301      	movs	r3, #1
 800888e:	73fb      	strb	r3, [r7, #15]
 8008890:	e042      	b.n	8008918 <eARPGetCacheEntry+0xac>
	}
	else
#endif
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889a:	d005      	beq.n	80088a8 <eARPGetCacheEntry+0x3c>
		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 192.168.1.255? */
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	4b22      	ldr	r3, [pc, #136]	; (800892c <eARPGetCacheEntry+0xc0>)
 80088a2:	691b      	ldr	r3, [r3, #16]
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d108      	bne.n	80088ba <eARPGetCacheEntry+0x4e>
	{
		/* This is a broadcast so uses the broadcast MAC address. */
		memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	4a21      	ldr	r2, [pc, #132]	; (8008930 <eARPGetCacheEntry+0xc4>)
 80088ac:	6811      	ldr	r1, [r2, #0]
 80088ae:	6019      	str	r1, [r3, #0]
 80088b0:	8892      	ldrh	r2, [r2, #4]
 80088b2:	809a      	strh	r2, [r3, #4]
		eReturn = eARPCacheHit;
 80088b4:	2301      	movs	r3, #1
 80088b6:	73fb      	strb	r3, [r7, #15]
 80088b8:	e02e      	b.n	8008918 <eARPGetCacheEntry+0xac>
	}
	else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 80088ba:	4b1e      	ldr	r3, [pc, #120]	; (8008934 <eARPGetCacheEntry+0xc8>)
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d102      	bne.n	80088c8 <eARPGetCacheEntry+0x5c>
	{
		/* The IP address has not yet been assigned, so there is nothing that
		can be done. */
		eReturn = eCantSendPacket;
 80088c2:	2302      	movs	r3, #2
 80088c4:	73fb      	strb	r3, [r7, #15]
 80088c6:	e027      	b.n	8008918 <eARPGetCacheEntry+0xac>
	}
	else
	{
		eReturn = eARPCacheMiss;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73fb      	strb	r3, [r7, #15]

		if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	4b18      	ldr	r3, [pc, #96]	; (8008934 <eARPGetCacheEntry+0xc8>)
 80088d2:	695b      	ldr	r3, [r3, #20]
 80088d4:	405a      	eors	r2, r3
 80088d6:	4b15      	ldr	r3, [pc, #84]	; (800892c <eARPGetCacheEntry+0xc0>)
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	4013      	ands	r3, r2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d003      	beq.n	80088e8 <eARPGetCacheEntry+0x7c>
			else
#endif
			{
				/* The IP address is off the local network, so look up the
				hardware address of the router, if any. */
				ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 80088e0:	4b12      	ldr	r3, [pc, #72]	; (800892c <eARPGetCacheEntry+0xc0>)
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	60bb      	str	r3, [r7, #8]
 80088e6:	e002      	b.n	80088ee <eARPGetCacheEntry+0x82>
		}
		else
		{
			/* The IP address is on the local network, so lookup the requested
			IP address directly. */
			ulAddressToLookup = *pulIPAddress;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	60bb      	str	r3, [r7, #8]
		}

		if( eReturn == eARPCacheMiss )
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d111      	bne.n	8008918 <eARPGetCacheEntry+0xac>
		{
			if( ulAddressToLookup == 0UL )
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d102      	bne.n	8008900 <eARPGetCacheEntry+0x94>
			{
				/* The address is not on the local network, and there is not a
				router. */
				eReturn = eCantSendPacket;
 80088fa:	2302      	movs	r3, #2
 80088fc:	73fb      	strb	r3, [r7, #15]
 80088fe:	e00b      	b.n	8008918 <eARPGetCacheEntry+0xac>
			}
			else
			{
				eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	68b8      	ldr	r0, [r7, #8]
 8008904:	f000 f818 	bl	8008938 <prvCacheLookup>
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]

				if( eReturn == eARPCacheMiss )
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d102      	bne.n	8008918 <eARPGetCacheEntry+0xac>
				{
					/* It might be that the ARP has to go to the gateway. */
					*pulIPAddress = ulAddressToLookup;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

	return eReturn;
 8008918:	7bfb      	ldrb	r3, [r7, #15]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	fc0000e0 	.word	0xfc0000e0
 8008928:	08010f7c 	.word	0x08010f7c
 800892c:	20004194 	.word	0x20004194
 8008930:	08010f84 	.word	0x08010f84
 8008934:	200000a0 	.word	0x200000a0

08008938 <prvCacheLookup>:

/*-----------------------------------------------------------*/

static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup, MACAddress_t * const pxMACAddress )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
BaseType_t x;
eARPLookupResult_t eReturn = eARPCacheMiss;
 8008942:	2300      	movs	r3, #0
 8008944:	72fb      	strb	r3, [r7, #11]

	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8008946:	2300      	movs	r3, #0
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	e02b      	b.n	80089a4 <prvCacheLookup+0x6c>
	{
		/* Does this row in the ARP cache table hold an entry for the IP address
		being queried? */
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800894c:	4919      	ldr	r1, [pc, #100]	; (80089b4 <prvCacheLookup+0x7c>)
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	4613      	mov	r3, r2
 8008952:	005b      	lsls	r3, r3, #1
 8008954:	4413      	add	r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	440b      	add	r3, r1
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	429a      	cmp	r2, r3
 8008960:	d11d      	bne.n	800899e <prvCacheLookup+0x66>
		{
			/* A matching valid entry was found. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8008962:	4914      	ldr	r1, [pc, #80]	; (80089b4 <prvCacheLookup+0x7c>)
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	4613      	mov	r3, r2
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	440b      	add	r3, r1
 8008970:	330b      	adds	r3, #11
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d102      	bne.n	800897e <prvCacheLookup+0x46>
			{
				/* This entry is waiting an ARP reply, so is not valid. */
				eReturn = eCantSendPacket;
 8008978:	2302      	movs	r3, #2
 800897a:	72fb      	strb	r3, [r7, #11]
			{
				/* A valid entry was found. */
				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
				eReturn = eARPCacheHit;
			}
			break;
 800897c:	e015      	b.n	80089aa <prvCacheLookup+0x72>
				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800897e:	6838      	ldr	r0, [r7, #0]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	4613      	mov	r3, r2
 8008984:	005b      	lsls	r3, r3, #1
 8008986:	4413      	add	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4a0a      	ldr	r2, [pc, #40]	; (80089b4 <prvCacheLookup+0x7c>)
 800898c:	4413      	add	r3, r2
 800898e:	3304      	adds	r3, #4
 8008990:	2206      	movs	r2, #6
 8008992:	4619      	mov	r1, r3
 8008994:	f008 f8ab 	bl	8010aee <memcpy>
				eReturn = eARPCacheHit;
 8008998:	2301      	movs	r3, #1
 800899a:	72fb      	strb	r3, [r7, #11]
			break;
 800899c:	e005      	b.n	80089aa <prvCacheLookup+0x72>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3301      	adds	r3, #1
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2b05      	cmp	r3, #5
 80089a8:	ddd0      	ble.n	800894c <prvCacheLookup+0x14>
		}
	}

	return eReturn;
 80089aa:	7afb      	ldrb	r3, [r7, #11]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	200040a4 	.word	0x200040a4

080089b8 <vARPAgeCache>:
/*-----------------------------------------------------------*/

void vARPAgeCache( void )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
BaseType_t x;
TickType_t xTimeNow;

	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80089be:	2300      	movs	r3, #0
 80089c0:	607b      	str	r3, [r7, #4]
 80089c2:	e063      	b.n	8008a8c <vARPAgeCache+0xd4>
	{
		/* If the entry is valid (its age is greater than zero). */
		if( xARPCache[ x ].ucAge > 0U )
 80089c4:	4940      	ldr	r1, [pc, #256]	; (8008ac8 <vARPAgeCache+0x110>)
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	4613      	mov	r3, r2
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	4413      	add	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	440b      	add	r3, r1
 80089d2:	330a      	adds	r3, #10
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d055      	beq.n	8008a86 <vARPAgeCache+0xce>
		{
			/* Decrement the age value of the entry in this ARP cache table row.
			When the age reaches zero it is no longer considered valid. */
			( xARPCache[ x ].ucAge )--;
 80089da:	493b      	ldr	r1, [pc, #236]	; (8008ac8 <vARPAgeCache+0x110>)
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	4613      	mov	r3, r2
 80089e0:	005b      	lsls	r3, r3, #1
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	440b      	add	r3, r1
 80089e8:	330a      	adds	r3, #10
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	3b01      	subs	r3, #1
 80089ee:	b2d8      	uxtb	r0, r3
 80089f0:	4935      	ldr	r1, [pc, #212]	; (8008ac8 <vARPAgeCache+0x110>)
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	4613      	mov	r3, r2
 80089f6:	005b      	lsls	r3, r3, #1
 80089f8:	4413      	add	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	440b      	add	r3, r1
 80089fe:	330a      	adds	r3, #10
 8008a00:	4602      	mov	r2, r0
 8008a02:	701a      	strb	r2, [r3, #0]

			/* If the entry is not yet valid, then it is waiting an ARP
			reply, and the ARP request should be retransmitted. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8008a04:	4930      	ldr	r1, [pc, #192]	; (8008ac8 <vARPAgeCache+0x110>)
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	005b      	lsls	r3, r3, #1
 8008a0c:	4413      	add	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	440b      	add	r3, r1
 8008a12:	330b      	adds	r3, #11
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10b      	bne.n	8008a32 <vARPAgeCache+0x7a>
			{
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8008a1a:	492b      	ldr	r1, [pc, #172]	; (8008ac8 <vARPAgeCache+0x110>)
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	005b      	lsls	r3, r3, #1
 8008a22:	4413      	add	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	440b      	add	r3, r1
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 f85e 	bl	8008aec <FreeRTOS_OutputARPRequest>
 8008a30:	e015      	b.n	8008a5e <vARPAgeCache+0xa6>
			}
			else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8008a32:	4925      	ldr	r1, [pc, #148]	; (8008ac8 <vARPAgeCache+0x110>)
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	005b      	lsls	r3, r3, #1
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	440b      	add	r3, r1
 8008a40:	330a      	adds	r3, #10
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b03      	cmp	r3, #3
 8008a46:	d80a      	bhi.n	8008a5e <vARPAgeCache+0xa6>
			{
				/* This entry will get removed soon.  See if the MAC address is
				still valid to prevent this happening. */
				iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8008a48:	491f      	ldr	r1, [pc, #124]	; (8008ac8 <vARPAgeCache+0x110>)
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	4413      	add	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	440b      	add	r3, r1
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 f847 	bl	8008aec <FreeRTOS_OutputARPRequest>
			else
			{
				/* The age has just ticked down, with nothing to do. */
			}

			if( xARPCache[ x ].ucAge == 0u )
 8008a5e:	491a      	ldr	r1, [pc, #104]	; (8008ac8 <vARPAgeCache+0x110>)
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	4613      	mov	r3, r2
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	4413      	add	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	440b      	add	r3, r1
 8008a6c:	330a      	adds	r3, #10
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d108      	bne.n	8008a86 <vARPAgeCache+0xce>
			{
				/* The entry is no longer valid.  Wipe it out. */
				iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
				xARPCache[ x ].ulIPAddress = 0UL;
 8008a74:	4914      	ldr	r1, [pc, #80]	; (8008ac8 <vARPAgeCache+0x110>)
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	4413      	add	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	440b      	add	r3, r1
 8008a82:	2200      	movs	r2, #0
 8008a84:	601a      	str	r2, [r3, #0]
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	607b      	str	r3, [r7, #4]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b05      	cmp	r3, #5
 8008a90:	dd98      	ble.n	80089c4 <vARPAgeCache+0xc>
			}
		}
	}

	xTimeNow = xTaskGetTickCount ();
 8008a92:	f7fe fe8b 	bl	80077ac <xTaskGetTickCount>
 8008a96:	6038      	str	r0, [r7, #0]

	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8008a98:	4b0c      	ldr	r3, [pc, #48]	; (8008acc <vARPAgeCache+0x114>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d007      	beq.n	8008ab0 <vARPAgeCache+0xf8>
 8008aa0:	4b0a      	ldr	r3, [pc, #40]	; (8008acc <vARPAgeCache+0x114>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d907      	bls.n	8008ac0 <vARPAgeCache+0x108>
	{
		FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 8008ab0:	4b07      	ldr	r3, [pc, #28]	; (8008ad0 <vARPAgeCache+0x118>)
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 f819 	bl	8008aec <FreeRTOS_OutputARPRequest>
		xLastGratuitousARPTime = xTimeNow;
 8008aba:	4a04      	ldr	r2, [pc, #16]	; (8008acc <vARPAgeCache+0x114>)
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	6013      	str	r3, [r2, #0]
	}
}
 8008ac0:	bf00      	nop
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	200040a4 	.word	0x200040a4
 8008acc:	200040ec 	.word	0x200040ec
 8008ad0:	200000a0 	.word	0x200000a0

08008ad4 <vARPSendGratuitous>:
/*-----------------------------------------------------------*/

void vARPSendGratuitous( void )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	af00      	add	r7, sp, #0
	/* Setting xLastGratuitousARPTime to 0 will force a gratuitous ARP the next
	time vARPAgeCache() is called. */
	xLastGratuitousARPTime = ( TickType_t ) 0;
 8008ad8:	4b03      	ldr	r3, [pc, #12]	; (8008ae8 <vARPSendGratuitous+0x14>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	601a      	str	r2, [r3, #0]

	/* Let the IP-task call vARPAgeCache(). */
	xSendEventToIPTask( eARPTimerEvent );
 8008ade:	2002      	movs	r0, #2
 8008ae0:	f001 fc96 	bl	800a410 <xSendEventToIPTask>
}
 8008ae4:	bf00      	nop
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	200040ec 	.word	0x200040ec

08008aec <FreeRTOS_OutputARPRequest>:

/*-----------------------------------------------------------*/
void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
NetworkBufferDescriptor_t *pxNetworkBuffer;

	/* This is called from the context of the IP event task, so a block time
	must not be used. */
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0 );
 8008af4:	2100      	movs	r1, #0
 8008af6:	202a      	movs	r0, #42	; 0x2a
 8008af8:	f007 f818 	bl	800fb2c <pxGetNetworkBufferWithDescriptor>
 8008afc:	60f8      	str	r0, [r7, #12]

	if( pxNetworkBuffer != NULL )
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d009      	beq.n	8008b18 <FreeRTOS_OutputARPRequest+0x2c>
	{
		pxNetworkBuffer->ulIPAddress = ulIPAddress;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	615a      	str	r2, [r3, #20]
		vARPGenerateRequestPacket( pxNetworkBuffer );
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 f808 	bl	8008b20 <vARPGenerateRequestPacket>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
			}
		}
		#endif

		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8008b10:	2101      	movs	r1, #1
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f7fb fea8 	bl	8004868 <xNetworkInterfaceOutput>
	}
}
 8008b18:	bf00      	nop
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <vARPGenerateRequestPacket>:

void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
ARPPacket_t *pxARPPacket;

	pxARPPacket = ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	60fb      	str	r3, [r7, #12]
		xARPHeader.ucHardwareAddressLength;
		xARPHeader.ucProtocolAddressLength;
		xARPHeader.usOperation;
		xARPHeader.xTargetHardwareAddress;
	*/
	memcpy( ( void * ) &( pxARPPacket->xEthernetHeader ), ( void * ) xDefaultPartARPPacketHeader, sizeof( xDefaultPartARPPacketHeader ) );
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	4a1a      	ldr	r2, [pc, #104]	; (8008b9c <vARPGenerateRequestPacket+0x7c>)
 8008b32:	4614      	mov	r4, r2
 8008b34:	469e      	mov	lr, r3
 8008b36:	f104 0c20 	add.w	ip, r4, #32
 8008b3a:	4675      	mov	r5, lr
 8008b3c:	4626      	mov	r6, r4
 8008b3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008b40:	6028      	str	r0, [r5, #0]
 8008b42:	6069      	str	r1, [r5, #4]
 8008b44:	60aa      	str	r2, [r5, #8]
 8008b46:	60eb      	str	r3, [r5, #12]
 8008b48:	3410      	adds	r4, #16
 8008b4a:	f10e 0e10 	add.w	lr, lr, #16
 8008b4e:	4564      	cmp	r4, ip
 8008b50:	d1f3      	bne.n	8008b3a <vARPGenerateRequestPacket+0x1a>
 8008b52:	4673      	mov	r3, lr
 8008b54:	4622      	mov	r2, r4
 8008b56:	6810      	ldr	r0, [r2, #0]
 8008b58:	6018      	str	r0, [r3, #0]
 8008b5a:	8892      	ldrh	r2, [r2, #4]
 8008b5c:	809a      	strh	r2, [r3, #4]
	memcpy( ( void * ) pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3306      	adds	r3, #6
 8008b62:	2206      	movs	r2, #6
 8008b64:	490e      	ldr	r1, [pc, #56]	; (8008ba0 <vARPGenerateRequestPacket+0x80>)
 8008b66:	4618      	mov	r0, r3
 8008b68:	f007 ffc1 	bl	8010aee <memcpy>
	memcpy( ( void * ) pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	3316      	adds	r3, #22
 8008b70:	2206      	movs	r2, #6
 8008b72:	490b      	ldr	r1, [pc, #44]	; (8008ba0 <vARPGenerateRequestPacket+0x80>)
 8008b74:	4618      	mov	r0, r3
 8008b76:	f007 ffba 	bl	8010aee <memcpy>
	/* HT:endian: network to network */
	pxARPPacket->xARPHeader.ulSenderProtocolAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8008b7a:	4b09      	ldr	r3, [pc, #36]	; (8008ba0 <vARPGenerateRequestPacket+0x80>)
 8008b7c:	695a      	ldr	r2, [r3, #20]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	61da      	str	r2, [r3, #28]
	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	695a      	ldr	r2, [r3, #20]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	222a      	movs	r2, #42	; 0x2a
 8008b90:	61da      	str	r2, [r3, #28]

	iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
 8008b92:	bf00      	nop
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	08010f28 	.word	0x08010f28
 8008ba0:	200000a0 	.word	0x200000a0

08008ba4 <xIsDHCPSocket>:
static DHCPData_t xDHCPData;

/*-----------------------------------------------------------*/

BaseType_t xIsDHCPSocket( Socket_t xSocket )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	if( xDHCPData.xDHCPSocket == xSocket )
 8008bac:	4b08      	ldr	r3, [pc, #32]	; (8008bd0 <xIsDHCPSocket+0x2c>)
 8008bae:	6a1a      	ldr	r2, [r3, #32]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d102      	bne.n	8008bbc <xIsDHCPSocket+0x18>
	{
		xReturn = pdTRUE;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	60fb      	str	r3, [r7, #12]
 8008bba:	e001      	b.n	8008bc0 <xIsDHCPSocket+0x1c>
	}
	else
	{
		xReturn = pdFALSE;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	200040f0 	.word	0x200040f0

08008bd4 <vDHCPProcess>:
/*-----------------------------------------------------------*/

void vDHCPProcess( BaseType_t xReset )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
BaseType_t xGivingUp = pdFALSE;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	60fb      	str	r3, [r7, #12]
#if( ipconfigUSE_DHCP_HOOK != 0 )
	eDHCPCallbackAnswer_t eAnswer;
#endif	/* ipconfigUSE_DHCP_HOOK */

	/* Is DHCP starting over? */
	if( xReset != pdFALSE )
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d002      	beq.n	8008bec <vDHCPProcess+0x18>
	{
		xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 8008be6:	4b8d      	ldr	r3, [pc, #564]	; (8008e1c <vDHCPProcess+0x248>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	771a      	strb	r2, [r3, #28]
	}

	switch( xDHCPData.eDHCPState )
 8008bec:	4b8b      	ldr	r3, [pc, #556]	; (8008e1c <vDHCPProcess+0x248>)
 8008bee:	7f1b      	ldrb	r3, [r3, #28]
 8008bf0:	2b04      	cmp	r3, #4
 8008bf2:	f200 80e6 	bhi.w	8008dc2 <vDHCPProcess+0x1ee>
 8008bf6:	a201      	add	r2, pc, #4	; (adr r2, 8008bfc <vDHCPProcess+0x28>)
 8008bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfc:	08008c11 	.word	0x08008c11
 8008c00:	08008c49 	.word	0x08008c49
 8008c04:	08008cd7 	.word	0x08008cd7
 8008c08:	08008d8b 	.word	0x08008d8b
 8008c0c:	08008dbb 	.word	0x08008dbb
			if( eAnswer == eDHCPContinue )
		#endif	/* ipconfigUSE_DHCP_HOOK */
			{
				/* Initial state.  Create the DHCP socket, timer, etc. if they
				have not already been created. */
				prvInitialiseDHCP();
 8008c10:	f000 f956 	bl	8008ec0 <prvInitialiseDHCP>

				/* See if prvInitialiseDHCP() has creates a socket. */
				if( xDHCPData.xDHCPSocket == NULL )
 8008c14:	4b81      	ldr	r3, [pc, #516]	; (8008e1c <vDHCPProcess+0x248>)
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d102      	bne.n	8008c22 <vDHCPProcess+0x4e>
				{
					xGivingUp = pdTRUE;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	60fb      	str	r3, [r7, #12]
					break;
 8008c20:	e0d8      	b.n	8008dd4 <vDHCPProcess+0x200>
				}

				*ipLOCAL_IP_ADDRESS_POINTER = 0UL;
 8008c22:	4b7f      	ldr	r3, [pc, #508]	; (8008e20 <vDHCPProcess+0x24c>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	615a      	str	r2, [r3, #20]

				/* Send the first discover request. */
				if( xDHCPData.xDHCPSocket != NULL )
 8008c28:	4b7c      	ldr	r3, [pc, #496]	; (8008e1c <vDHCPProcess+0x248>)
 8008c2a:	6a1b      	ldr	r3, [r3, #32]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 80ca 	beq.w	8008dc6 <vDHCPProcess+0x1f2>
				{
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008c32:	f7fe fdbb 	bl	80077ac <xTaskGetTickCount>
 8008c36:	4602      	mov	r2, r0
 8008c38:	4b78      	ldr	r3, [pc, #480]	; (8008e1c <vDHCPProcess+0x248>)
 8008c3a:	611a      	str	r2, [r3, #16]
					prvSendDHCPDiscover( );
 8008c3c:	f000 fbd6 	bl	80093ec <prvSendDHCPDiscover>
					xDHCPData.eDHCPState = eWaitingOffer;
 8008c40:	4b76      	ldr	r3, [pc, #472]	; (8008e1c <vDHCPProcess+0x248>)
 8008c42:	2201      	movs	r2, #1
 8008c44:	771a      	strb	r2, [r3, #28]

				/* The user indicates that the DHCP process does not continue. */
				xGivingUp = pdTRUE;
			}
		#endif	/* ipconfigUSE_DHCP_HOOK */
			break;
 8008c46:	e0be      	b.n	8008dc6 <vDHCPProcess+0x1f2>

		case eWaitingOffer :

			xGivingUp = pdFALSE;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60fb      	str	r3, [r7, #12]

			/* Look for offers coming in. */
			if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_OFFER ) == pdPASS )
 8008c4c:	2002      	movs	r0, #2
 8008c4e:	f000 f95f 	bl	8008f10 <prvProcessDHCPReplies>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d10e      	bne.n	8008c76 <vDHCPProcess+0xa2>
				if( eAnswer == eDHCPContinue )
			#endif	/* ipconfigUSE_DHCP_HOOK */
				{
					/* An offer has been made, the user wants to continue,
					generate the request. */
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008c58:	f7fe fda8 	bl	80077ac <xTaskGetTickCount>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	4b6f      	ldr	r3, [pc, #444]	; (8008e1c <vDHCPProcess+0x248>)
 8008c60:	611a      	str	r2, [r3, #16]
					xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 8008c62:	4b6e      	ldr	r3, [pc, #440]	; (8008e1c <vDHCPProcess+0x248>)
 8008c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c68:	615a      	str	r2, [r3, #20]
					prvSendDHCPRequest( );
 8008c6a:	f000 fb8d 	bl	8009388 <prvSendDHCPRequest>
					xDHCPData.eDHCPState = eWaitingAcknowledge;
 8008c6e:	4b6b      	ldr	r3, [pc, #428]	; (8008e1c <vDHCPProcess+0x248>)
 8008c70:	2202      	movs	r2, #2
 8008c72:	771a      	strb	r2, [r3, #28]
					break;
 8008c74:	e0ae      	b.n	8008dd4 <vDHCPProcess+0x200>

				/* The user indicates that the DHCP process does not continue. */
				xGivingUp = pdTRUE;
			#endif	/* ipconfigUSE_DHCP_HOOK */
			}
			else if( ( xTaskGetTickCount() - xDHCPData.xDHCPTxTime ) > xDHCPData.xDHCPTxPeriod )
 8008c76:	f7fe fd99 	bl	80077ac <xTaskGetTickCount>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	4b67      	ldr	r3, [pc, #412]	; (8008e1c <vDHCPProcess+0x248>)
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	1ad2      	subs	r2, r2, r3
 8008c82:	4b66      	ldr	r3, [pc, #408]	; (8008e1c <vDHCPProcess+0x248>)
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	f240 809f 	bls.w	8008dca <vDHCPProcess+0x1f6>
			{
				/* It is time to send another Discover.  Increase the time
				period, and if it has not got to the point of giving up - send
				another discovery. */
				xDHCPData.xDHCPTxPeriod <<= 1;
 8008c8c:	4b63      	ldr	r3, [pc, #396]	; (8008e1c <vDHCPProcess+0x248>)
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	4a62      	ldr	r2, [pc, #392]	; (8008e1c <vDHCPProcess+0x248>)
 8008c94:	6153      	str	r3, [r2, #20]

				if( xDHCPData.xDHCPTxPeriod <= ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 8008c96:	4b61      	ldr	r3, [pc, #388]	; (8008e1c <vDHCPProcess+0x248>)
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	f247 5230 	movw	r2, #30000	; 0x7530
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d816      	bhi.n	8008cd0 <vDHCPProcess+0xfc>
				{
					xDHCPData.ulTransactionId++;
 8008ca2:	4b5e      	ldr	r3, [pc, #376]	; (8008e1c <vDHCPProcess+0x248>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	4a5c      	ldr	r2, [pc, #368]	; (8008e1c <vDHCPProcess+0x248>)
 8008caa:	6013      	str	r3, [r2, #0]
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008cac:	f7fe fd7e 	bl	80077ac <xTaskGetTickCount>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	4b5a      	ldr	r3, [pc, #360]	; (8008e1c <vDHCPProcess+0x248>)
 8008cb4:	611a      	str	r2, [r3, #16]
					xDHCPData.xUseBroadcast = !xDHCPData.xUseBroadcast;
 8008cb6:	4b59      	ldr	r3, [pc, #356]	; (8008e1c <vDHCPProcess+0x248>)
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	bf0c      	ite	eq
 8008cbe:	2301      	moveq	r3, #1
 8008cc0:	2300      	movne	r3, #0
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	4b55      	ldr	r3, [pc, #340]	; (8008e1c <vDHCPProcess+0x248>)
 8008cc8:	619a      	str	r2, [r3, #24]
					prvSendDHCPDiscover( );
 8008cca:	f000 fb8f 	bl	80093ec <prvSendDHCPDiscover>
						xGivingUp = pdTRUE;
					}
					#endif /* ipconfigDHCP_FALL_BACK_AUTO_IP */
				}
			}
			break;
 8008cce:	e07c      	b.n	8008dca <vDHCPProcess+0x1f6>
						xGivingUp = pdTRUE;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	60fb      	str	r3, [r7, #12]
			break;
 8008cd4:	e079      	b.n	8008dca <vDHCPProcess+0x1f6>

		case eWaitingAcknowledge :

			/* Look for acks coming in. */
			if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_ACK ) == pdPASS )
 8008cd6:	2005      	movs	r0, #5
 8008cd8:	f000 f91a 	bl	8008f10 <prvProcessDHCPReplies>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d132      	bne.n	8008d48 <vDHCPProcess+0x174>
			{
				FreeRTOS_debug_printf( ( "vDHCPProcess: acked %lxip\n", FreeRTOS_ntohl( xDHCPData.ulOfferedIPAddress ) ) );

				/* DHCP completed.  The IP address can now be used, and the
				timer set to the lease timeout time. */
				*ipLOCAL_IP_ADDRESS_POINTER = xDHCPData.ulOfferedIPAddress;
 8008ce2:	4b4e      	ldr	r3, [pc, #312]	; (8008e1c <vDHCPProcess+0x248>)
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	4a4e      	ldr	r2, [pc, #312]	; (8008e20 <vDHCPProcess+0x24c>)
 8008ce8:	6153      	str	r3, [r2, #20]

				/* Setting the 'local' broadcast address, something like
				'192.168.1.255'. */
				xNetworkAddressing.ulBroadcastAddress = ( xDHCPData.ulOfferedIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
 8008cea:	4b4c      	ldr	r3, [pc, #304]	; (8008e1c <vDHCPProcess+0x248>)
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	4b4d      	ldr	r3, [pc, #308]	; (8008e24 <vDHCPProcess+0x250>)
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	43db      	mvns	r3, r3
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	4a4b      	ldr	r2, [pc, #300]	; (8008e24 <vDHCPProcess+0x250>)
 8008cf8:	6113      	str	r3, [r2, #16]
				xDHCPData.eDHCPState = eLeasedAddress;
 8008cfa:	4b48      	ldr	r3, [pc, #288]	; (8008e1c <vDHCPProcess+0x248>)
 8008cfc:	2203      	movs	r2, #3
 8008cfe:	771a      	strb	r2, [r3, #28]
				iptraceDHCP_SUCCEDEED( xDHCPData.ulOfferedIPAddress );

				/* DHCP failed, the default configured IP-address will be used
				Now call vIPNetworkUpCalls() to send the network-up event and
				start the ARP timer. */
				vIPNetworkUpCalls( );
 8008d00:	f001 fc60 	bl	800a5c4 <vIPNetworkUpCalls>

				/* Close socket to ensure packets don't queue on it. */
				vSocketClose( xDHCPData.xDHCPSocket );
 8008d04:	4b45      	ldr	r3, [pc, #276]	; (8008e1c <vDHCPProcess+0x248>)
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f002 fb61 	bl	800b3d0 <vSocketClose>
				xDHCPData.xDHCPSocket = NULL;
 8008d0e:	4b43      	ldr	r3, [pc, #268]	; (8008e1c <vDHCPProcess+0x248>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	621a      	str	r2, [r3, #32]

				if( xDHCPData.ulLeaseTime == 0UL )
 8008d14:	4b41      	ldr	r3, [pc, #260]	; (8008e1c <vDHCPProcess+0x248>)
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d103      	bne.n	8008d24 <vDHCPProcess+0x150>
				{
					xDHCPData.ulLeaseTime = dhcpDEFAULT_LEASE_TIME;
 8008d1c:	4b3f      	ldr	r3, [pc, #252]	; (8008e1c <vDHCPProcess+0x248>)
 8008d1e:	4a42      	ldr	r2, [pc, #264]	; (8008e28 <vDHCPProcess+0x254>)
 8008d20:	60da      	str	r2, [r3, #12]
 8008d22:	e009      	b.n	8008d38 <vDHCPProcess+0x164>
				}
				else if( xDHCPData.ulLeaseTime < dhcpMINIMUM_LEASE_TIME )
 8008d24:	4b3d      	ldr	r3, [pc, #244]	; (8008e1c <vDHCPProcess+0x248>)
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d803      	bhi.n	8008d38 <vDHCPProcess+0x164>
				{
					xDHCPData.ulLeaseTime = dhcpMINIMUM_LEASE_TIME;
 8008d30:	4b3a      	ldr	r3, [pc, #232]	; (8008e1c <vDHCPProcess+0x248>)
 8008d32:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008d36:	60da      	str	r2, [r3, #12]
				{
					/* The lease time is already valid. */
				}

				/* Check for clashes. */
				vARPSendGratuitous();
 8008d38:	f7ff fecc 	bl	8008ad4 <vARPSendGratuitous>
				vIPReloadDHCPTimer( xDHCPData.ulLeaseTime );
 8008d3c:	4b37      	ldr	r3, [pc, #220]	; (8008e1c <vDHCPProcess+0x248>)
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 fe89 	bl	800aa58 <vIPReloadDHCPTimer>
						/* Give up, start again. */
						xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
					}
				}
			}
			break;
 8008d46:	e042      	b.n	8008dce <vDHCPProcess+0x1fa>
				if( ( xTaskGetTickCount() - xDHCPData.xDHCPTxTime ) > xDHCPData.xDHCPTxPeriod )
 8008d48:	f7fe fd30 	bl	80077ac <xTaskGetTickCount>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	4b33      	ldr	r3, [pc, #204]	; (8008e1c <vDHCPProcess+0x248>)
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	1ad2      	subs	r2, r2, r3
 8008d54:	4b31      	ldr	r3, [pc, #196]	; (8008e1c <vDHCPProcess+0x248>)
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d938      	bls.n	8008dce <vDHCPProcess+0x1fa>
					xDHCPData.xDHCPTxPeriod <<= 1;
 8008d5c:	4b2f      	ldr	r3, [pc, #188]	; (8008e1c <vDHCPProcess+0x248>)
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	4a2e      	ldr	r2, [pc, #184]	; (8008e1c <vDHCPProcess+0x248>)
 8008d64:	6153      	str	r3, [r2, #20]
					if( xDHCPData.xDHCPTxPeriod <= ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 8008d66:	4b2d      	ldr	r3, [pc, #180]	; (8008e1c <vDHCPProcess+0x248>)
 8008d68:	695b      	ldr	r3, [r3, #20]
 8008d6a:	f247 5230 	movw	r2, #30000	; 0x7530
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d807      	bhi.n	8008d82 <vDHCPProcess+0x1ae>
						xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008d72:	f7fe fd1b 	bl	80077ac <xTaskGetTickCount>
 8008d76:	4602      	mov	r2, r0
 8008d78:	4b28      	ldr	r3, [pc, #160]	; (8008e1c <vDHCPProcess+0x248>)
 8008d7a:	611a      	str	r2, [r3, #16]
						prvSendDHCPRequest( );
 8008d7c:	f000 fb04 	bl	8009388 <prvSendDHCPRequest>
			break;
 8008d80:	e025      	b.n	8008dce <vDHCPProcess+0x1fa>
						xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 8008d82:	4b26      	ldr	r3, [pc, #152]	; (8008e1c <vDHCPProcess+0x248>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	771a      	strb	r2, [r3, #28]
			break;
 8008d88:	e021      	b.n	8008dce <vDHCPProcess+0x1fa>
	#endif	/* ipconfigDHCP_FALL_BACK_AUTO_IP */

		case eLeasedAddress :

			/* Resend the request at the appropriate time to renew the lease. */
			prvCreateDHCPSocket();
 8008d8a:	f000 f84f 	bl	8008e2c <prvCreateDHCPSocket>

			if( xDHCPData.xDHCPSocket != NULL )
 8008d8e:	4b23      	ldr	r3, [pc, #140]	; (8008e1c <vDHCPProcess+0x248>)
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d01d      	beq.n	8008dd2 <vDHCPProcess+0x1fe>
			{
				xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008d96:	f7fe fd09 	bl	80077ac <xTaskGetTickCount>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	4b1f      	ldr	r3, [pc, #124]	; (8008e1c <vDHCPProcess+0x248>)
 8008d9e:	611a      	str	r2, [r3, #16]
				xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 8008da0:	4b1e      	ldr	r3, [pc, #120]	; (8008e1c <vDHCPProcess+0x248>)
 8008da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da6:	615a      	str	r2, [r3, #20]
				prvSendDHCPRequest( );
 8008da8:	f000 faee 	bl	8009388 <prvSendDHCPRequest>
				xDHCPData.eDHCPState = eWaitingAcknowledge;
 8008dac:	4b1b      	ldr	r3, [pc, #108]	; (8008e1c <vDHCPProcess+0x248>)
 8008dae:	2202      	movs	r2, #2
 8008db0:	771a      	strb	r2, [r3, #28]

				/* From now on, we should be called more often */
				vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 8008db2:	20fa      	movs	r0, #250	; 0xfa
 8008db4:	f001 fe50 	bl	800aa58 <vIPReloadDHCPTimer>
			}
			break;
 8008db8:	e00b      	b.n	8008dd2 <vDHCPProcess+0x1fe>

		case eNotUsingLeasedAddress:

			vIPSetDHCPTimerEnableState( pdFALSE );
 8008dba:	2000      	movs	r0, #0
 8008dbc:	f001 fe32 	bl	800aa24 <vIPSetDHCPTimerEnableState>
			break;
 8008dc0:	e008      	b.n	8008dd4 <vDHCPProcess+0x200>

		default:
			break;
 8008dc2:	bf00      	nop
 8008dc4:	e006      	b.n	8008dd4 <vDHCPProcess+0x200>
			break;
 8008dc6:	bf00      	nop
 8008dc8:	e004      	b.n	8008dd4 <vDHCPProcess+0x200>
			break;
 8008dca:	bf00      	nop
 8008dcc:	e002      	b.n	8008dd4 <vDHCPProcess+0x200>
			break;
 8008dce:	bf00      	nop
 8008dd0:	e000      	b.n	8008dd4 <vDHCPProcess+0x200>
			break;
 8008dd2:	bf00      	nop
	}

	if( xGivingUp != pdFALSE )
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d01b      	beq.n	8008e12 <vDHCPProcess+0x23e>
		/* xGivingUp became true either because of a time-out, or because
		xApplicationDHCPHook() returned another value than 'eDHCPContinue',
		meaning that the conversion is canceled from here. */

		/* Revert to static IP address. */
		taskENTER_CRITICAL();
 8008dda:	f7fd f997 	bl	800610c <vPortEnterCritical>
		{
			*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 8008dde:	4b11      	ldr	r3, [pc, #68]	; (8008e24 <vDHCPProcess+0x250>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a0f      	ldr	r2, [pc, #60]	; (8008e20 <vDHCPProcess+0x24c>)
 8008de4:	6153      	str	r3, [r2, #20]
			iptraceDHCP_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( xNetworkAddressing.ulDefaultIPAddress );
		}
		taskEXIT_CRITICAL();
 8008de6:	f7fd f9bf 	bl	8006168 <vPortExitCritical>

		xDHCPData.eDHCPState = eNotUsingLeasedAddress;
 8008dea:	4b0c      	ldr	r3, [pc, #48]	; (8008e1c <vDHCPProcess+0x248>)
 8008dec:	2204      	movs	r2, #4
 8008dee:	771a      	strb	r2, [r3, #28]
		vIPSetDHCPTimerEnableState( pdFALSE );
 8008df0:	2000      	movs	r0, #0
 8008df2:	f001 fe17 	bl	800aa24 <vIPSetDHCPTimerEnableState>

		/* DHCP failed, the default configured IP-address will be used.  Now
		call vIPNetworkUpCalls() to send the network-up event and start the ARP
		timer. */
		vIPNetworkUpCalls( );
 8008df6:	f001 fbe5 	bl	800a5c4 <vIPNetworkUpCalls>

		/* Test if socket was indeed created. */
		if( xDHCPData.xDHCPSocket != NULL )
 8008dfa:	4b08      	ldr	r3, [pc, #32]	; (8008e1c <vDHCPProcess+0x248>)
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d007      	beq.n	8008e12 <vDHCPProcess+0x23e>
		{
			/* Close socket to ensure packets don't queue on it. */
			vSocketClose( xDHCPData.xDHCPSocket );
 8008e02:	4b06      	ldr	r3, [pc, #24]	; (8008e1c <vDHCPProcess+0x248>)
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f002 fae2 	bl	800b3d0 <vSocketClose>
			xDHCPData.xDHCPSocket = NULL;
 8008e0c:	4b03      	ldr	r3, [pc, #12]	; (8008e1c <vDHCPProcess+0x248>)
 8008e0e:	2200      	movs	r2, #0
 8008e10:	621a      	str	r2, [r3, #32]
		}
	}
}
 8008e12:	bf00      	nop
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	200040f0 	.word	0x200040f0
 8008e20:	200000a0 	.word	0x200000a0
 8008e24:	20004194 	.word	0x20004194
 8008e28:	0a4cb800 	.word	0x0a4cb800

08008e2c <prvCreateDHCPSocket>:
/*-----------------------------------------------------------*/

static void prvCreateDHCPSocket( void )
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b086      	sub	sp, #24
 8008e30:	af02      	add	r7, sp, #8
struct freertos_sockaddr xAddress;
BaseType_t xReturn;
TickType_t xTimeoutTime = ( TickType_t ) 0;
 8008e32:	2300      	movs	r3, #0
 8008e34:	603b      	str	r3, [r7, #0]

	/* Create the socket, if it has not already been created. */
	if( xDHCPData.xDHCPSocket == NULL )
 8008e36:	4b21      	ldr	r3, [pc, #132]	; (8008ebc <prvCreateDHCPSocket+0x90>)
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d13a      	bne.n	8008eb4 <prvCreateDHCPSocket+0x88>
	{
		xDHCPData.xDHCPSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8008e3e:	2211      	movs	r2, #17
 8008e40:	2102      	movs	r1, #2
 8008e42:	2002      	movs	r0, #2
 8008e44:	f001 ffac 	bl	800ada0 <FreeRTOS_socket>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	4b1c      	ldr	r3, [pc, #112]	; (8008ebc <prvCreateDHCPSocket+0x90>)
 8008e4c:	621a      	str	r2, [r3, #32]
		if( xDHCPData.xDHCPSocket != FREERTOS_INVALID_SOCKET )
 8008e4e:	4b1b      	ldr	r3, [pc, #108]	; (8008ebc <prvCreateDHCPSocket+0x90>)
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e56:	d02a      	beq.n	8008eae <prvCreateDHCPSocket+0x82>
		{

			/* Ensure the Rx and Tx timeouts are zero as the DHCP executes in the
			context of the IP task. */
			FreeRTOS_setsockopt( xDHCPData.xDHCPSocket, 0, FREERTOS_SO_RCVTIMEO, ( void * ) &xTimeoutTime, sizeof( TickType_t ) );
 8008e58:	4b18      	ldr	r3, [pc, #96]	; (8008ebc <prvCreateDHCPSocket+0x90>)
 8008e5a:	6a18      	ldr	r0, [r3, #32]
 8008e5c:	463a      	mov	r2, r7
 8008e5e:	2304      	movs	r3, #4
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	4613      	mov	r3, r2
 8008e64:	2200      	movs	r2, #0
 8008e66:	2100      	movs	r1, #0
 8008e68:	f002 fb4a 	bl	800b500 <FreeRTOS_setsockopt>
			FreeRTOS_setsockopt( xDHCPData.xDHCPSocket, 0, FREERTOS_SO_SNDTIMEO, ( void * ) &xTimeoutTime, sizeof( TickType_t ) );
 8008e6c:	4b13      	ldr	r3, [pc, #76]	; (8008ebc <prvCreateDHCPSocket+0x90>)
 8008e6e:	6a18      	ldr	r0, [r3, #32]
 8008e70:	463a      	mov	r2, r7
 8008e72:	2304      	movs	r3, #4
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	4613      	mov	r3, r2
 8008e78:	2201      	movs	r2, #1
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	f002 fb40 	bl	800b500 <FreeRTOS_setsockopt>

			/* Bind to the standard DHCP client port. */
			xAddress.sin_port = ( uint16_t ) dhcpCLIENT_PORT;
 8008e80:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8008e84:	80fb      	strh	r3, [r7, #6]
			xReturn = vSocketBind( xDHCPData.xDHCPSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8008e86:	4b0d      	ldr	r3, [pc, #52]	; (8008ebc <prvCreateDHCPSocket+0x90>)
 8008e88:	6a18      	ldr	r0, [r3, #32]
 8008e8a:	1d39      	adds	r1, r7, #4
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	2208      	movs	r2, #8
 8008e90:	f002 f9e8 	bl	800b264 <vSocketBind>
 8008e94:	60f8      	str	r0, [r7, #12]
			if( xReturn != 0 )
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00b      	beq.n	8008eb4 <prvCreateDHCPSocket+0x88>
			{
				/* Binding failed, close the socket again. */
				vSocketClose( xDHCPData.xDHCPSocket );
 8008e9c:	4b07      	ldr	r3, [pc, #28]	; (8008ebc <prvCreateDHCPSocket+0x90>)
 8008e9e:	6a1b      	ldr	r3, [r3, #32]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f002 fa95 	bl	800b3d0 <vSocketClose>
				xDHCPData.xDHCPSocket = NULL;
 8008ea6:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <prvCreateDHCPSocket+0x90>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	621a      	str	r2, [r3, #32]
		{
			/* Change to NULL for easier testing. */
			xDHCPData.xDHCPSocket = NULL;
		}
	}
}
 8008eac:	e002      	b.n	8008eb4 <prvCreateDHCPSocket+0x88>
			xDHCPData.xDHCPSocket = NULL;
 8008eae:	4b03      	ldr	r3, [pc, #12]	; (8008ebc <prvCreateDHCPSocket+0x90>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	621a      	str	r2, [r3, #32]
}
 8008eb4:	bf00      	nop
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	200040f0 	.word	0x200040f0

08008ec0 <prvInitialiseDHCP>:
/*-----------------------------------------------------------*/

static void prvInitialiseDHCP( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	af00      	add	r7, sp, #0
	/* Initialise the parameters that will be set by the DHCP process. */
	if( xDHCPData.ulTransactionId == 0ul )
 8008ec4:	4b11      	ldr	r3, [pc, #68]	; (8008f0c <prvInitialiseDHCP+0x4c>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d105      	bne.n	8008ed8 <prvInitialiseDHCP+0x18>
	{
		xDHCPData.ulTransactionId = ipconfigRAND32();
 8008ecc:	f006 ff50 	bl	800fd70 <uxRand>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	4b0e      	ldr	r3, [pc, #56]	; (8008f0c <prvInitialiseDHCP+0x4c>)
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	e004      	b.n	8008ee2 <prvInitialiseDHCP+0x22>
	}
	else
	{
		xDHCPData.ulTransactionId++;
 8008ed8:	4b0c      	ldr	r3, [pc, #48]	; (8008f0c <prvInitialiseDHCP+0x4c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3301      	adds	r3, #1
 8008ede:	4a0b      	ldr	r2, [pc, #44]	; (8008f0c <prvInitialiseDHCP+0x4c>)
 8008ee0:	6013      	str	r3, [r2, #0]
	}

	xDHCPData.xUseBroadcast = 0;
 8008ee2:	4b0a      	ldr	r3, [pc, #40]	; (8008f0c <prvInitialiseDHCP+0x4c>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	619a      	str	r2, [r3, #24]
	xDHCPData.ulOfferedIPAddress = 0UL;
 8008ee8:	4b08      	ldr	r3, [pc, #32]	; (8008f0c <prvInitialiseDHCP+0x4c>)
 8008eea:	2200      	movs	r2, #0
 8008eec:	605a      	str	r2, [r3, #4]
	xDHCPData.ulDHCPServerAddress = 0UL;
 8008eee:	4b07      	ldr	r3, [pc, #28]	; (8008f0c <prvInitialiseDHCP+0x4c>)
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	609a      	str	r2, [r3, #8]
	xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 8008ef4:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <prvInitialiseDHCP+0x4c>)
 8008ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008efa:	615a      	str	r2, [r3, #20]

	/* Create the DHCP socket if it has not already been created. */
	prvCreateDHCPSocket();
 8008efc:	f7ff ff96 	bl	8008e2c <prvCreateDHCPSocket>
	FreeRTOS_debug_printf( ( "prvInitialiseDHCP: start after %lu ticks\n", dhcpINITIAL_TIMER_PERIOD ) );
	vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 8008f00:	20fa      	movs	r0, #250	; 0xfa
 8008f02:	f001 fda9 	bl	800aa58 <vIPReloadDHCPTimer>
}
 8008f06:	bf00      	nop
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200040f0 	.word	0x200040f0

08008f10 <prvProcessDHCPReplies>:
/*-----------------------------------------------------------*/

static BaseType_t prvProcessDHCPReplies( BaseType_t xExpectedMessageType )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b092      	sub	sp, #72	; 0x48
 8008f14:	af02      	add	r7, sp, #8
 8008f16:	6078      	str	r0, [r7, #4]
uint8_t *pucUDPPayload, *pucLastByte;
struct freertos_sockaddr xClient;
uint32_t xClientLength = sizeof( xClient );
 8008f18:	2308      	movs	r3, #8
 8008f1a:	613b      	str	r3, [r7, #16]
int32_t lBytes;
DHCPMessage_t *pxDHCPMessage;
uint8_t *pucByte, ucOptionCode, ucLength;
uint32_t ulProcessed, ulParameter;
BaseType_t xReturn = pdFALSE;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	637b      	str	r3, [r7, #52]	; 0x34
const uint32_t ulMandatoryOptions = 2ul; /* DHCP server address, and the correct DHCP message type must be present in the options. */
 8008f20:	2302      	movs	r3, #2
 8008f22:	633b      	str	r3, [r7, #48]	; 0x30

	lBytes = FreeRTOS_recvfrom( xDHCPData.xDHCPSocket, ( void * ) &pucUDPPayload, 0ul, FREERTOS_ZERO_COPY, &xClient, &xClientLength );
 8008f24:	4bb9      	ldr	r3, [pc, #740]	; (800920c <prvProcessDHCPReplies+0x2fc>)
 8008f26:	6a18      	ldr	r0, [r3, #32]
 8008f28:	f107 011c 	add.w	r1, r7, #28
 8008f2c:	f107 0310 	add.w	r3, r7, #16
 8008f30:	9301      	str	r3, [sp, #4]
 8008f32:	f107 0314 	add.w	r3, r7, #20
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	2301      	movs	r3, #1
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f001 ffca 	bl	800aed4 <FreeRTOS_recvfrom>
 8008f40:	62f8      	str	r0, [r7, #44]	; 0x2c

	if( lBytes > 0 )
 8008f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f340 815b 	ble.w	8009200 <prvProcessDHCPReplies+0x2f0>
	{
		/* Map a DHCP structure onto the received data. */
		pxDHCPMessage = ( DHCPMessage_t * ) ( pucUDPPayload );
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Sanity check. */
		if( ( pxDHCPMessage->ulDHCPCookie == ( uint32_t ) dhcpCOOKIE ) &&
 8008f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f50:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008f54:	4aae      	ldr	r2, [pc, #696]	; (8009210 <prvProcessDHCPReplies+0x300>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	f040 814e 	bne.w	80091f8 <prvProcessDHCPReplies+0x2e8>
			( pxDHCPMessage->ucOpcode == ( uint8_t ) dhcpREPLY_OPCODE ) &&
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	781b      	ldrb	r3, [r3, #0]
		if( ( pxDHCPMessage->ulDHCPCookie == ( uint32_t ) dhcpCOOKIE ) &&
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	f040 8149 	bne.w	80091f8 <prvProcessDHCPReplies+0x2e8>
			( pxDHCPMessage->ulTransactionID == FreeRTOS_htonl( xDHCPData.ulTransactionId ) ) )
 8008f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f68:	685a      	ldr	r2, [r3, #4]
 8008f6a:	4ba8      	ldr	r3, [pc, #672]	; (800920c <prvProcessDHCPReplies+0x2fc>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	0619      	lsls	r1, r3, #24
 8008f70:	4ba6      	ldr	r3, [pc, #664]	; (800920c <prvProcessDHCPReplies+0x2fc>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	021b      	lsls	r3, r3, #8
 8008f76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f7a:	4319      	orrs	r1, r3
 8008f7c:	4ba3      	ldr	r3, [pc, #652]	; (800920c <prvProcessDHCPReplies+0x2fc>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	0a1b      	lsrs	r3, r3, #8
 8008f82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008f86:	4319      	orrs	r1, r3
 8008f88:	4ba0      	ldr	r3, [pc, #640]	; (800920c <prvProcessDHCPReplies+0x2fc>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	0e1b      	lsrs	r3, r3, #24
 8008f8e:	430b      	orrs	r3, r1
			( pxDHCPMessage->ucOpcode == ( uint8_t ) dhcpREPLY_OPCODE ) &&
 8008f90:	429a      	cmp	r2, r3
 8008f92:	f040 8131 	bne.w	80091f8 <prvProcessDHCPReplies+0x2e8>
		{
			if( memcmp( ( void * ) &( pxDHCPMessage->ucClientHardwareAddress ), ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) ) == 0 )
 8008f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f98:	331c      	adds	r3, #28
 8008f9a:	2206      	movs	r2, #6
 8008f9c:	499d      	ldr	r1, [pc, #628]	; (8009214 <prvProcessDHCPReplies+0x304>)
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f007 fd96 	bl	8010ad0 <memcmp>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f040 8126 	bne.w	80091f8 <prvProcessDHCPReplies+0x2e8>
			{
				/* None of the essential options have been processed yet. */
				ulProcessed = 0ul;
 8008fac:	2300      	movs	r3, #0
 8008fae:	63bb      	str	r3, [r7, #56]	; 0x38

				/* Walk through the options until the dhcpOPTION_END_BYTE byte
				is found, taking care not to walk off the end of the options. */
				pucByte = &( pxDHCPMessage->ucFirstOptionByte );
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	33f0      	adds	r3, #240	; 0xf0
 8008fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
				pucLastByte = &( pucUDPPayload[ lBytes - dhcpMAX_OPTION_LENGTH_OF_INTEREST ] );
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fba:	3b02      	subs	r3, #2
 8008fbc:	4413      	add	r3, r2
 8008fbe:	627b      	str	r3, [r7, #36]	; 0x24

				while( pucByte < pucLastByte )
 8008fc0:	e107      	b.n	80091d2 <prvProcessDHCPReplies+0x2c2>
				{
					ucOptionCode = pucByte[ 0 ];
 8008fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					if( ucOptionCode == dhcpOPTION_END_BYTE )
 8008fca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fce:	2bff      	cmp	r3, #255	; 0xff
 8008fd0:	f000 8105 	beq.w	80091de <prvProcessDHCPReplies+0x2ce>
					{
						/* Ready, the last byte has been seen. */
						break;
					}
					if( ucOptionCode == dhcpZERO_PAD_OPTION_CODE )
 8008fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d103      	bne.n	8008fe4 <prvProcessDHCPReplies+0xd4>
					{
						/* The value zero is used as a pad byte,
						it is not followed by a length byte. */
						pucByte += 1;
 8008fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fde:	3301      	adds	r3, #1
 8008fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
						continue;
 8008fe2:	e0f6      	b.n	80091d2 <prvProcessDHCPReplies+0x2c2>
					}
					ucLength = pucByte[ 1 ];
 8008fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe6:	785b      	ldrb	r3, [r3, #1]
 8008fe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					pucByte += 2;
 8008fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fee:	3302      	adds	r3, #2
 8008ff0:	63fb      	str	r3, [r7, #60]	; 0x3c

					/* In most cases, a 4-byte network-endian parameter follows,
					just get it once here and use later */
					memcpy( ( void * ) &( ulParameter ), ( void * ) pucByte, ( size_t ) sizeof( ulParameter ) );
 8008ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	60fb      	str	r3, [r7, #12]

					switch( ucOptionCode )
 8008ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	2b35      	cmp	r3, #53	; 0x35
 8009000:	f200 80d3 	bhi.w	80091aa <prvProcessDHCPReplies+0x29a>
 8009004:	a201      	add	r2, pc, #4	; (adr r2, 800900c <prvProcessDHCPReplies+0xfc>)
 8009006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900a:	bf00      	nop
 800900c:	0800910f 	.word	0x0800910f
 8009010:	080091ab 	.word	0x080091ab
 8009014:	0800911f 	.word	0x0800911f
 8009018:	080091ab 	.word	0x080091ab
 800901c:	080091ab 	.word	0x080091ab
 8009020:	0800912f 	.word	0x0800912f
 8009024:	080091ab 	.word	0x080091ab
 8009028:	080091ab 	.word	0x080091ab
 800902c:	080091ab 	.word	0x080091ab
 8009030:	080091ab 	.word	0x080091ab
 8009034:	080091ab 	.word	0x080091ab
 8009038:	080091ab 	.word	0x080091ab
 800903c:	080091ab 	.word	0x080091ab
 8009040:	080091ab 	.word	0x080091ab
 8009044:	080091ab 	.word	0x080091ab
 8009048:	080091ab 	.word	0x080091ab
 800904c:	080091ab 	.word	0x080091ab
 8009050:	080091ab 	.word	0x080091ab
 8009054:	080091ab 	.word	0x080091ab
 8009058:	080091ab 	.word	0x080091ab
 800905c:	080091ab 	.word	0x080091ab
 8009060:	080091ab 	.word	0x080091ab
 8009064:	080091ab 	.word	0x080091ab
 8009068:	080091ab 	.word	0x080091ab
 800906c:	080091ab 	.word	0x080091ab
 8009070:	080091ab 	.word	0x080091ab
 8009074:	080091ab 	.word	0x080091ab
 8009078:	080091ab 	.word	0x080091ab
 800907c:	080091ab 	.word	0x080091ab
 8009080:	080091ab 	.word	0x080091ab
 8009084:	080091ab 	.word	0x080091ab
 8009088:	080091ab 	.word	0x080091ab
 800908c:	080091ab 	.word	0x080091ab
 8009090:	080091ab 	.word	0x080091ab
 8009094:	080091ab 	.word	0x080091ab
 8009098:	080091ab 	.word	0x080091ab
 800909c:	080091ab 	.word	0x080091ab
 80090a0:	080091ab 	.word	0x080091ab
 80090a4:	080091ab 	.word	0x080091ab
 80090a8:	080091ab 	.word	0x080091ab
 80090ac:	080091ab 	.word	0x080091ab
 80090b0:	080091ab 	.word	0x080091ab
 80090b4:	080091ab 	.word	0x080091ab
 80090b8:	080091ab 	.word	0x080091ab
 80090bc:	080091ab 	.word	0x080091ab
 80090c0:	080091ab 	.word	0x080091ab
 80090c4:	080091ab 	.word	0x080091ab
 80090c8:	080091ab 	.word	0x080091ab
 80090cc:	080091ab 	.word	0x080091ab
 80090d0:	080091ab 	.word	0x080091ab
 80090d4:	08009165 	.word	0x08009165
 80090d8:	080091ab 	.word	0x080091ab
 80090dc:	080090e5 	.word	0x080090e5
 80090e0:	08009137 	.word	0x08009137
					{
						case dhcpMESSAGE_TYPE_OPTION_CODE	:

							if( *pucByte == ( uint8_t ) xExpectedMessageType )
 80090e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e6:	781a      	ldrb	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d103      	bne.n	80090f8 <prvProcessDHCPReplies+0x1e8>
							{
								/* The message type is the message type the
								state machine is expecting. */
								ulProcessed++;
 80090f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f2:	3301      	adds	r3, #1
 80090f4:	63bb      	str	r3, [r7, #56]	; 0x38
							}
							else
							{
								/* Don't process other message types. */
							}
							break;
 80090f6:	e05a      	b.n	80091ae <prvProcessDHCPReplies+0x29e>
							else if( *pucByte == ( uint8_t ) dhcpMESSAGE_TYPE_NACK )
 80090f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	2b06      	cmp	r3, #6
 80090fe:	d156      	bne.n	80091ae <prvProcessDHCPReplies+0x29e>
								if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_ACK )
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b05      	cmp	r3, #5
 8009104:	d153      	bne.n	80091ae <prvProcessDHCPReplies+0x29e>
									xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 8009106:	4b41      	ldr	r3, [pc, #260]	; (800920c <prvProcessDHCPReplies+0x2fc>)
 8009108:	2200      	movs	r2, #0
 800910a:	771a      	strb	r2, [r3, #28]
							break;
 800910c:	e04f      	b.n	80091ae <prvProcessDHCPReplies+0x29e>

						case dhcpSUBNET_MASK_OPTION_CODE :

							if( ucLength == sizeof( uint32_t ) )
 800910e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009112:	2b04      	cmp	r3, #4
 8009114:	d14d      	bne.n	80091b2 <prvProcessDHCPReplies+0x2a2>
							{
								xNetworkAddressing.ulNetMask = ulParameter;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	4a3f      	ldr	r2, [pc, #252]	; (8009218 <prvProcessDHCPReplies+0x308>)
 800911a:	6053      	str	r3, [r2, #4]
							}
							break;
 800911c:	e049      	b.n	80091b2 <prvProcessDHCPReplies+0x2a2>

						case dhcpGATEWAY_OPTION_CODE :

							if( ucLength == sizeof( uint32_t ) )
 800911e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009122:	2b04      	cmp	r3, #4
 8009124:	d147      	bne.n	80091b6 <prvProcessDHCPReplies+0x2a6>
							{
								/* ulProcessed is not incremented in this case
								because the gateway is not essential. */
								xNetworkAddressing.ulGatewayAddress = ulParameter;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	4a3b      	ldr	r2, [pc, #236]	; (8009218 <prvProcessDHCPReplies+0x308>)
 800912a:	6093      	str	r3, [r2, #8]
							}
							break;
 800912c:	e043      	b.n	80091b6 <prvProcessDHCPReplies+0x2a6>
						case dhcpDNS_SERVER_OPTIONS_CODE :

							/* ulProcessed is not incremented in this case
							because the DNS server is not essential.  Only the
							first DNS server address is taken. */
							xNetworkAddressing.ulDNSServerAddress = ulParameter;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	4a39      	ldr	r2, [pc, #228]	; (8009218 <prvProcessDHCPReplies+0x308>)
 8009132:	60d3      	str	r3, [r2, #12]
							break;
 8009134:	e044      	b.n	80091c0 <prvProcessDHCPReplies+0x2b0>

						case dhcpSERVER_IP_ADDRESS_OPTION_CODE :

							if( ucLength == sizeof( uint32_t ) )
 8009136:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800913a:	2b04      	cmp	r3, #4
 800913c:	d13d      	bne.n	80091ba <prvProcessDHCPReplies+0x2aa>
							{
								if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_OFFER )
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b02      	cmp	r3, #2
 8009142:	d106      	bne.n	8009152 <prvProcessDHCPReplies+0x242>
								{
									/* Offers state the replying server. */
									ulProcessed++;
 8009144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009146:	3301      	adds	r3, #1
 8009148:	63bb      	str	r3, [r7, #56]	; 0x38
									xDHCPData.ulDHCPServerAddress = ulParameter;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	4a2f      	ldr	r2, [pc, #188]	; (800920c <prvProcessDHCPReplies+0x2fc>)
 800914e:	6093      	str	r3, [r2, #8]
									{
										ulProcessed++;
									}
								}
							}
							break;
 8009150:	e033      	b.n	80091ba <prvProcessDHCPReplies+0x2aa>
									if( xDHCPData.ulDHCPServerAddress == ulParameter )
 8009152:	4b2e      	ldr	r3, [pc, #184]	; (800920c <prvProcessDHCPReplies+0x2fc>)
 8009154:	689a      	ldr	r2, [r3, #8]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	429a      	cmp	r2, r3
 800915a:	d12e      	bne.n	80091ba <prvProcessDHCPReplies+0x2aa>
										ulProcessed++;
 800915c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915e:	3301      	adds	r3, #1
 8009160:	63bb      	str	r3, [r7, #56]	; 0x38
							break;
 8009162:	e02a      	b.n	80091ba <prvProcessDHCPReplies+0x2aa>

						case dhcpLEASE_TIME_OPTION_CODE :

							if( ucLength == sizeof( &( xDHCPData.ulLeaseTime ) ) )
 8009164:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009168:	2b04      	cmp	r3, #4
 800916a:	d128      	bne.n	80091be <prvProcessDHCPReplies+0x2ae>
							{
								/* ulProcessed is not incremented in this case
								because the lease time is not essential. */
								/* The DHCP parameter is in seconds, convert
								to host-endian format. */
								xDHCPData.ulLeaseTime = FreeRTOS_ntohl( ulParameter );
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	061a      	lsls	r2, r3, #24
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	021b      	lsls	r3, r3, #8
 8009174:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009178:	431a      	orrs	r2, r3
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	0a1b      	lsrs	r3, r3, #8
 800917e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009182:	431a      	orrs	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	0e1b      	lsrs	r3, r3, #24
 8009188:	4313      	orrs	r3, r2
 800918a:	4a20      	ldr	r2, [pc, #128]	; (800920c <prvProcessDHCPReplies+0x2fc>)
 800918c:	60d3      	str	r3, [r2, #12]

								/* Divide the lease time by two to ensure a
								renew request is sent before the lease actually
								expires. */
								xDHCPData.ulLeaseTime >>= 1UL;
 800918e:	4b1f      	ldr	r3, [pc, #124]	; (800920c <prvProcessDHCPReplies+0x2fc>)
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	085b      	lsrs	r3, r3, #1
 8009194:	4a1d      	ldr	r2, [pc, #116]	; (800920c <prvProcessDHCPReplies+0x2fc>)
 8009196:	60d3      	str	r3, [r2, #12]

								/* Multiply with configTICK_RATE_HZ to get clock
								ticks. */
								xDHCPData.ulLeaseTime = configTICK_RATE_HZ * xDHCPData.ulLeaseTime;
 8009198:	4b1c      	ldr	r3, [pc, #112]	; (800920c <prvProcessDHCPReplies+0x2fc>)
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091a0:	fb02 f303 	mul.w	r3, r2, r3
 80091a4:	4a19      	ldr	r2, [pc, #100]	; (800920c <prvProcessDHCPReplies+0x2fc>)
 80091a6:	60d3      	str	r3, [r2, #12]
							}
							break;
 80091a8:	e009      	b.n	80091be <prvProcessDHCPReplies+0x2ae>

						default :

							/* Not interested in this field. */

							break;
 80091aa:	bf00      	nop
 80091ac:	e008      	b.n	80091c0 <prvProcessDHCPReplies+0x2b0>
							break;
 80091ae:	bf00      	nop
 80091b0:	e006      	b.n	80091c0 <prvProcessDHCPReplies+0x2b0>
							break;
 80091b2:	bf00      	nop
 80091b4:	e004      	b.n	80091c0 <prvProcessDHCPReplies+0x2b0>
							break;
 80091b6:	bf00      	nop
 80091b8:	e002      	b.n	80091c0 <prvProcessDHCPReplies+0x2b0>
							break;
 80091ba:	bf00      	nop
 80091bc:	e000      	b.n	80091c0 <prvProcessDHCPReplies+0x2b0>
							break;
 80091be:	bf00      	nop
					}

					/* Jump over the data to find the next option code. */
					if( ucLength == 0u )
 80091c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00c      	beq.n	80091e2 <prvProcessDHCPReplies+0x2d2>
					{
						break;
					}
					else
					{
						pucByte += ucLength;
 80091c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80091cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091ce:	4413      	add	r3, r2
 80091d0:	63fb      	str	r3, [r7, #60]	; 0x3c
				while( pucByte < pucLastByte )
 80091d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	429a      	cmp	r2, r3
 80091d8:	f4ff aef3 	bcc.w	8008fc2 <prvProcessDHCPReplies+0xb2>
 80091dc:	e002      	b.n	80091e4 <prvProcessDHCPReplies+0x2d4>
						break;
 80091de:	bf00      	nop
 80091e0:	e000      	b.n	80091e4 <prvProcessDHCPReplies+0x2d4>
						break;
 80091e2:	bf00      	nop
					}
				}

				/* Were all the mandatory options received? */
				if( ulProcessed >= ulMandatoryOptions )
 80091e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d305      	bcc.n	80091f8 <prvProcessDHCPReplies+0x2e8>
				{
					/* HT:endian: used to be network order */
					xDHCPData.ulOfferedIPAddress = pxDHCPMessage->ulYourIPAddress_yiaddr;
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	4a06      	ldr	r2, [pc, #24]	; (800920c <prvProcessDHCPReplies+0x2fc>)
 80091f2:	6053      	str	r3, [r2, #4]
					FreeRTOS_printf( ( "vDHCPProcess: offer %lxip\n", FreeRTOS_ntohl( xDHCPData.ulOfferedIPAddress ) ) );
					xReturn = pdPASS;
 80091f4:	2301      	movs	r3, #1
 80091f6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}

		FreeRTOS_ReleaseUDPPayloadBuffer( ( void * ) pucUDPPayload );
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f001 f80e 	bl	800a21c <FreeRTOS_ReleaseUDPPayloadBuffer>
	}

	return xReturn;
 8009200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009202:	4618      	mov	r0, r3
 8009204:	3740      	adds	r7, #64	; 0x40
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	200040f0 	.word	0x200040f0
 8009210:	63538263 	.word	0x63538263
 8009214:	200000a0 	.word	0x200000a0
 8009218:	20004194 	.word	0x20004194

0800921c <prvCreatePartDHCPMessage>:
/*-----------------------------------------------------------*/

static uint8_t *prvCreatePartDHCPMessage( struct freertos_sockaddr *pxAddress, BaseType_t xOpcode, const uint8_t * const pucOptionsArray, size_t *pxOptionsArraySize )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08a      	sub	sp, #40	; 0x28
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	603b      	str	r3, [r7, #0]
DHCPMessage_t *pxDHCPMessage;
size_t xRequiredBufferSize = sizeof( DHCPMessage_t ) + *pxOptionsArraySize;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	33f1      	adds	r3, #241	; 0xf1
 8009230:	627b      	str	r3, [r7, #36]	; 0x24
uint8_t *pucUDPPayloadBuffer;

#if( ipconfigDHCP_REGISTER_HOSTNAME == 1 )
	const char *pucHostName = pcApplicationHostnameHook ();
 8009232:	f006 fd93 	bl	800fd5c <pcApplicationHostnameHook>
 8009236:	6238      	str	r0, [r7, #32]
	size_t xNameLength = strlen( pucHostName );
 8009238:	6a38      	ldr	r0, [r7, #32]
 800923a:	f7f6 ffd1 	bl	80001e0 <strlen>
 800923e:	61f8      	str	r0, [r7, #28]
	uint8_t *pucPtr;

	xRequiredBufferSize += ( 2 + xNameLength );
 8009240:	69fa      	ldr	r2, [r7, #28]
 8009242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009244:	4413      	add	r3, r2
 8009246:	3302      	adds	r3, #2
 8009248:	627b      	str	r3, [r7, #36]	; 0x24
	/* Get a buffer.  This uses a maximum delay, but the delay will be capped
	to ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS so the return value still needs to
	be test. */
	do
	{
	} while( ( pucUDPPayloadBuffer = ( uint8_t * ) FreeRTOS_GetUDPPayloadBuffer( xRequiredBufferSize, portMAX_DELAY ) ) == NULL );
 800924a:	f04f 31ff 	mov.w	r1, #4294967295
 800924e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009250:	f000 ff78 	bl	800a144 <FreeRTOS_GetUDPPayloadBuffer>
 8009254:	61b8      	str	r0, [r7, #24]
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d0f6      	beq.n	800924a <prvCreatePartDHCPMessage+0x2e>

	pxDHCPMessage = ( DHCPMessage_t * ) pucUDPPayloadBuffer;
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	617b      	str	r3, [r7, #20]

	/* Most fields need to be zero. */
	memset( ( void * ) pxDHCPMessage, 0x00, sizeof( DHCPMessage_t ) );
 8009260:	22f1      	movs	r2, #241	; 0xf1
 8009262:	2100      	movs	r1, #0
 8009264:	6978      	ldr	r0, [r7, #20]
 8009266:	f007 fc67 	bl	8010b38 <memset>

	/* Create the message. */
	pxDHCPMessage->ucOpcode = ( uint8_t ) xOpcode;
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	b2da      	uxtb	r2, r3
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	701a      	strb	r2, [r3, #0]
	pxDHCPMessage->ucAddressType = ( uint8_t ) dhcpADDRESS_TYPE_ETHERNET;
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	2201      	movs	r2, #1
 8009276:	705a      	strb	r2, [r3, #1]
	pxDHCPMessage->ucAddressLength = ( uint8_t ) dhcpETHERNET_ADDRESS_LENGTH;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	2206      	movs	r2, #6
 800927c:	709a      	strb	r2, [r3, #2]

	/* ulTransactionID doesn't really need a htonl() translation, but when DHCP
	times out, it is nicer to see an increasing number in this ID field */
	pxDHCPMessage->ulTransactionID = FreeRTOS_htonl( xDHCPData.ulTransactionId );
 800927e:	4b40      	ldr	r3, [pc, #256]	; (8009380 <prvCreatePartDHCPMessage+0x164>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	061a      	lsls	r2, r3, #24
 8009284:	4b3e      	ldr	r3, [pc, #248]	; (8009380 <prvCreatePartDHCPMessage+0x164>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	021b      	lsls	r3, r3, #8
 800928a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800928e:	431a      	orrs	r2, r3
 8009290:	4b3b      	ldr	r3, [pc, #236]	; (8009380 <prvCreatePartDHCPMessage+0x164>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	0a1b      	lsrs	r3, r3, #8
 8009296:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800929a:	431a      	orrs	r2, r3
 800929c:	4b38      	ldr	r3, [pc, #224]	; (8009380 <prvCreatePartDHCPMessage+0x164>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	0e1b      	lsrs	r3, r3, #24
 80092a2:	431a      	orrs	r2, r3
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	605a      	str	r2, [r3, #4]
	pxDHCPMessage->ulDHCPCookie = ( uint32_t ) dhcpCOOKIE;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80092b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80092b4:	2200      	movs	r2, #0
 80092b6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80092ba:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80092be:	2200      	movs	r2, #0
 80092c0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80092c4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80092c8:	2200      	movs	r2, #0
 80092ca:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80092ce:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
	if( xDHCPData.xUseBroadcast != pdFALSE )
 80092d2:	4b2b      	ldr	r3, [pc, #172]	; (8009380 <prvCreatePartDHCPMessage+0x164>)
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d007      	beq.n	80092ea <prvCreatePartDHCPMessage+0xce>
	{
		pxDHCPMessage->usFlags = ( uint16_t ) dhcpBROADCAST;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2200      	movs	r2, #0
 80092de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80092e2:	729a      	strb	r2, [r3, #10]
 80092e4:	2200      	movs	r2, #0
 80092e6:	72da      	strb	r2, [r3, #11]
 80092e8:	e004      	b.n	80092f4 <prvCreatePartDHCPMessage+0xd8>
	}
	else
	{
		pxDHCPMessage->usFlags = 0u;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	2200      	movs	r2, #0
 80092ee:	729a      	strb	r2, [r3, #10]
 80092f0:	2200      	movs	r2, #0
 80092f2:	72da      	strb	r2, [r3, #11]
	}

	memcpy( ( void * ) &( pxDHCPMessage->ucClientHardwareAddress[ 0 ] ), ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	331c      	adds	r3, #28
 80092f8:	2206      	movs	r2, #6
 80092fa:	4922      	ldr	r1, [pc, #136]	; (8009384 <prvCreatePartDHCPMessage+0x168>)
 80092fc:	4618      	mov	r0, r3
 80092fe:	f007 fbf6 	bl	8010aee <memcpy>

	/* Copy in the const part of the options options. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET ] ), ( void * ) pucOptionsArray, *pxOptionsArraySize );
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	461a      	mov	r2, r3
 800930e:	6879      	ldr	r1, [r7, #4]
 8009310:	f007 fbed 	bl	8010aee <memcpy>
	{
		/* With this option, the hostname can be registered as well which makes
		it easier to lookup a device in a router's list of DHCP clients. */

		/* Point to where the OPTION_END was stored to add data. */
		pucPtr = &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + ( *pxOptionsArraySize - 1 ) ] );
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	33ef      	adds	r3, #239	; 0xef
 800931a:	69ba      	ldr	r2, [r7, #24]
 800931c:	4413      	add	r3, r2
 800931e:	613b      	str	r3, [r7, #16]
		pucPtr[ 0 ] = dhcpDNS_HOSTNAME_OPTIONS_CODE;
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	220c      	movs	r2, #12
 8009324:	701a      	strb	r2, [r3, #0]
		pucPtr[ 1 ] = ( uint8_t ) xNameLength;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	3301      	adds	r3, #1
 800932a:	69fa      	ldr	r2, [r7, #28]
 800932c:	b2d2      	uxtb	r2, r2
 800932e:	701a      	strb	r2, [r3, #0]
		memcpy( ( void *) ( pucPtr + 2 ), pucHostName, xNameLength );
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	3302      	adds	r3, #2
 8009334:	69fa      	ldr	r2, [r7, #28]
 8009336:	6a39      	ldr	r1, [r7, #32]
 8009338:	4618      	mov	r0, r3
 800933a:	f007 fbd8 	bl	8010aee <memcpy>
		pucPtr[ 2 + xNameLength ] = dhcpOPTION_END_BYTE;
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	3302      	adds	r3, #2
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	4413      	add	r3, r2
 8009346:	22ff      	movs	r2, #255	; 0xff
 8009348:	701a      	strb	r2, [r3, #0]
		*pxOptionsArraySize += ( 2 + xNameLength );
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	4413      	add	r3, r2
 8009352:	1c9a      	adds	r2, r3, #2
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	601a      	str	r2, [r3, #0]
	}
	#endif

	/* Map in the client identifier. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpCLIENT_IDENTIFIER_OFFSET ] ),
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	33f5      	adds	r3, #245	; 0xf5
 800935c:	2206      	movs	r2, #6
 800935e:	4909      	ldr	r1, [pc, #36]	; (8009384 <prvCreatePartDHCPMessage+0x168>)
 8009360:	4618      	mov	r0, r3
 8009362:	f007 fbc4 	bl	8010aee <memcpy>
		( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );

	/* Set the addressing. */
	pxAddress->sin_addr = ipBROADCAST_IP_ADDRESS;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f04f 32ff 	mov.w	r2, #4294967295
 800936c:	605a      	str	r2, [r3, #4]
	pxAddress->sin_port = ( uint16_t ) dhcpSERVER_PORT;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f44f 4286 	mov.w	r2, #17152	; 0x4300
 8009374:	805a      	strh	r2, [r3, #2]

	return pucUDPPayloadBuffer;
 8009376:	69bb      	ldr	r3, [r7, #24]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3728      	adds	r7, #40	; 0x28
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	200040f0 	.word	0x200040f0
 8009384:	200000a0 	.word	0x200000a0

08009388 <prvSendDHCPRequest>:
/*-----------------------------------------------------------*/

static void prvSendDHCPRequest( void )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af02      	add	r7, sp, #8
	dhcpCLIENT_IDENTIFIER_OPTION_CODE, 6, 0, 0, 0, 0, 0, 0,			/* Client identifier. */
	dhcpREQUEST_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,				/* The IP address being requested. */
	dhcpSERVER_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,				/* The IP address of the DHCP server. */
	dhcpOPTION_END_BYTE
};
size_t xOptionsLength = sizeof( ucDHCPRequestOptions );
 800938e:	2318      	movs	r3, #24
 8009390:	603b      	str	r3, [r7, #0]

	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress, dhcpREQUEST_OPCODE, ucDHCPRequestOptions, &xOptionsLength );
 8009392:	463b      	mov	r3, r7
 8009394:	1d38      	adds	r0, r7, #4
 8009396:	4a13      	ldr	r2, [pc, #76]	; (80093e4 <prvSendDHCPRequest+0x5c>)
 8009398:	2101      	movs	r1, #1
 800939a:	f7ff ff3f 	bl	800921c <prvCreatePartDHCPMessage>
 800939e:	60f8      	str	r0, [r7, #12]

	/* Copy in the IP address being requested. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpREQUESTED_IP_ADDRESS_OFFSET ] ),
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	33fd      	adds	r3, #253	; 0xfd
 80093a4:	4a10      	ldr	r2, [pc, #64]	; (80093e8 <prvSendDHCPRequest+0x60>)
 80093a6:	6852      	ldr	r2, [r2, #4]
 80093a8:	601a      	str	r2, [r3, #0]
		( void * ) &( xDHCPData.ulOfferedIPAddress ), sizeof( xDHCPData.ulOfferedIPAddress ) );

	/* Copy in the address of the DHCP server being used. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpDHCP_SERVER_IP_ADDRESS_OFFSET ] ),
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f203 1303 	addw	r3, r3, #259	; 0x103
 80093b0:	4a0d      	ldr	r2, [pc, #52]	; (80093e8 <prvSendDHCPRequest+0x60>)
 80093b2:	6892      	ldr	r2, [r2, #8]
 80093b4:	601a      	str	r2, [r3, #0]
		( void * ) &( xDHCPData.ulDHCPServerAddress ), sizeof( xDHCPData.ulDHCPServerAddress ) );

	FreeRTOS_debug_printf( ( "vDHCPProcess: reply %lxip\n", FreeRTOS_ntohl( xDHCPData.ulOfferedIPAddress ) ) );
	iptraceSENDING_DHCP_REQUEST();

	if( FreeRTOS_sendto( xDHCPData.xDHCPSocket, pucUDPPayloadBuffer, ( sizeof( DHCPMessage_t ) + xOptionsLength ), FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
 80093b6:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <prvSendDHCPRequest+0x60>)
 80093b8:	6a18      	ldr	r0, [r3, #32]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	f103 02f1 	add.w	r2, r3, #241	; 0xf1
 80093c0:	2308      	movs	r3, #8
 80093c2:	9301      	str	r3, [sp, #4]
 80093c4:	1d3b      	adds	r3, r7, #4
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	2301      	movs	r3, #1
 80093ca:	68f9      	ldr	r1, [r7, #12]
 80093cc:	f001 fe4f 	bl	800b06e <FreeRTOS_sendto>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d102      	bne.n	80093dc <prvSendDHCPRequest+0x54>
	{
		/* The packet was not successfully queued for sending and must be
		returned to the stack. */
		FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f000 ff20 	bl	800a21c <FreeRTOS_ReleaseUDPPayloadBuffer>
	}
}
 80093dc:	bf00      	nop
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	08010f50 	.word	0x08010f50
 80093e8:	200040f0 	.word	0x200040f0

080093ec <prvSendDHCPDiscover>:
/*-----------------------------------------------------------*/

static void prvSendDHCPDiscover( void )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af02      	add	r7, sp, #8
	dhcpMESSAGE_TYPE_OPTION_CODE, 1, dhcpMESSAGE_TYPE_DISCOVER,					/* Message type option. */
	dhcpCLIENT_IDENTIFIER_OPTION_CODE, 6, 0, 0, 0, 0, 0, 0,						/* Client identifier. */
	dhcpPARAMETER_REQUEST_OPTION_CODE, 3, dhcpSUBNET_MASK_OPTION_CODE, dhcpGATEWAY_OPTION_CODE, dhcpDNS_SERVER_OPTIONS_CODE,	/* Parameter request option. */
	dhcpOPTION_END_BYTE
};
size_t xOptionsLength = sizeof( ucDHCPDiscoverOptions );
 80093f2:	2311      	movs	r3, #17
 80093f4:	603b      	str	r3, [r7, #0]

	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress, dhcpREQUEST_OPCODE, ucDHCPDiscoverOptions, &xOptionsLength );
 80093f6:	463b      	mov	r3, r7
 80093f8:	1d38      	adds	r0, r7, #4
 80093fa:	4a0e      	ldr	r2, [pc, #56]	; (8009434 <prvSendDHCPDiscover+0x48>)
 80093fc:	2101      	movs	r1, #1
 80093fe:	f7ff ff0d 	bl	800921c <prvCreatePartDHCPMessage>
 8009402:	60f8      	str	r0, [r7, #12]

	FreeRTOS_debug_printf( ( "vDHCPProcess: discover\n" ) );
	iptraceSENDING_DHCP_DISCOVER();

	if( FreeRTOS_sendto( xDHCPData.xDHCPSocket, pucUDPPayloadBuffer, ( sizeof( DHCPMessage_t ) + xOptionsLength ), FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
 8009404:	4b0c      	ldr	r3, [pc, #48]	; (8009438 <prvSendDHCPDiscover+0x4c>)
 8009406:	6a18      	ldr	r0, [r3, #32]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	f103 02f1 	add.w	r2, r3, #241	; 0xf1
 800940e:	2308      	movs	r3, #8
 8009410:	9301      	str	r3, [sp, #4]
 8009412:	1d3b      	adds	r3, r7, #4
 8009414:	9300      	str	r3, [sp, #0]
 8009416:	2301      	movs	r3, #1
 8009418:	68f9      	ldr	r1, [r7, #12]
 800941a:	f001 fe28 	bl	800b06e <FreeRTOS_sendto>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d102      	bne.n	800942a <prvSendDHCPDiscover+0x3e>
	{
		/* The packet was not successfully queued for sending and must be
		returned to the stack. */
		FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f000 fef9 	bl	800a21c <FreeRTOS_ReleaseUDPPayloadBuffer>
	}
}
 800942a:	bf00      	nop
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	08010f68 	.word	0x08010f68
 8009438:	200040f0 	.word	0x200040f0

0800943c <usChar2u16>:
			( ( ( uint32_t )apChr[3] ) );
}

static portINLINE uint16_t usChar2u16 (const uint8_t *apChr);
static portINLINE uint16_t usChar2u16 (const uint8_t *apChr)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
	return ( uint16_t )
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	b29b      	uxth	r3, r3
 800944a:	021b      	lsls	r3, r3, #8
 800944c:	b29a      	uxth	r2, r3
			  ( ( ( uint32_t )apChr[1] ) ) );
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3301      	adds	r3, #1
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	b29b      	uxth	r3, r3
	return ( uint16_t )
 8009456:	4313      	orrs	r3, r2
 8009458:	b29b      	uxth	r3, r3
}
 800945a:	4618      	mov	r0, r3
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
	...

08009468 <vDNSInitialise>:
	/*-----------------------------------------------------------*/

	/* Initialise the list of call-back structures. */
	void vDNSInitialise( void );
	void vDNSInitialise( void )
	{
 8009468:	b580      	push	{r7, lr}
 800946a:	af00      	add	r7, sp, #0
		vListInitialise( &xCallbackList );
 800946c:	4802      	ldr	r0, [pc, #8]	; (8009478 <vDNSInitialise+0x10>)
 800946e:	f7fc fc72 	bl	8005d56 <vListInitialise>
	}
 8009472:	bf00      	nop
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20004174 	.word	0x20004174

0800947c <vDNSCheckCallBack>:
	As soon as the list hase become empty, the DNS timer will be stopped
	In case pvSearchID is supplied, the user wants to cancel a DNS request
	*/
	void vDNSCheckCallBack( void *pvSearchID );
	void vDNSCheckCallBack( void *pvSearchID )
	{
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	const ListItem_t *pxIterator;
	const MiniListItem_t* xEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xCallbackList );
 8009484:	4b25      	ldr	r3, [pc, #148]	; (800951c <vDNSCheckCallBack+0xa0>)
 8009486:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8009488:	f7fe f8e6 	bl	8007658 <vTaskSuspendAll>
		{
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	617b      	str	r3, [r7, #20]
 8009492:	e031      	b.n	80094f8 <vDNSCheckCallBack+0x7c>
				 pxIterator != ( const ListItem_t * ) xEnd;
				  )
			{
				DNSCallback_t *pxCallback = ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	60fb      	str	r3, [r7, #12]
				/* Move to the next item because we might remove this item */
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	617b      	str	r3, [r7, #20]
				if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00d      	beq.n	80094c2 <vDNSCheckCallBack+0x46>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	691a      	ldr	r2, [r3, #16]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d108      	bne.n	80094c2 <vDNSCheckCallBack+0x46>
				{
					uxListRemove( &pxCallback->xListItem );
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	3314      	adds	r3, #20
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fc fcd8 	bl	8005e6a <uxListRemove>
					vPortFree( pxCallback );
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f7fd f802 	bl	80064c4 <vPortFree>
 80094c0:	e01a      	b.n	80094f8 <vDNSCheckCallBack+0x7c>
				}
				else if( xTaskCheckForTimeOut( &pxCallback->xTimeoutState, &pxCallback->xRemaningTime ) != pdFALSE )
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	3308      	adds	r3, #8
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	4611      	mov	r1, r2
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fe fbf0 	bl	8007cb0 <xTaskCheckForTimeOut>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d010      	beq.n	80094f8 <vDNSCheckCallBack+0x7c>
				{
					pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0 );
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	f102 0028 	add.w	r0, r2, #40	; 0x28
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	6911      	ldr	r1, [r2, #16]
 80094e4:	2200      	movs	r2, #0
 80094e6:	4798      	blx	r3
					uxListRemove( &pxCallback->xListItem );
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	3314      	adds	r3, #20
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fc fcbc 	bl	8005e6a <uxListRemove>
					vPortFree( ( void * ) pxCallback );
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f7fc ffe6 	bl	80064c4 <vPortFree>
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80094f8:	697a      	ldr	r2, [r7, #20]
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d1c9      	bne.n	8009494 <vDNSCheckCallBack+0x18>
				}
			}
		}
		xTaskResumeAll();
 8009500:	f7fe f8b8 	bl	8007674 <xTaskResumeAll>

		if( listLIST_IS_EMPTY( &xCallbackList ) )
 8009504:	4b06      	ldr	r3, [pc, #24]	; (8009520 <vDNSCheckCallBack+0xa4>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d102      	bne.n	8009512 <vDNSCheckCallBack+0x96>
		{
			vIPSetDnsTimerEnableState( pdFALSE );
 800950c:	2000      	movs	r0, #0
 800950e:	f001 fab1 	bl	800aa74 <vIPSetDnsTimerEnableState>
		}
	}
 8009512:	bf00      	nop
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	2000417c 	.word	0x2000417c
 8009520:	20004174 	.word	0x20004174

08009524 <vDNSDoCallback>:

	/* A DNS reply was received, see if there is any matching entry and
	call the handler. */
	static void vDNSDoCallback( TickType_t xIdentifier, const char *pcName, uint32_t ulIPAddress );
	static void vDNSDoCallback( TickType_t xIdentifier, const char *pcName, uint32_t ulIPAddress )
	{
 8009524:	b580      	push	{r7, lr}
 8009526:	b088      	sub	sp, #32
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
		const ListItem_t *pxIterator;
		const MiniListItem_t* xEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xCallbackList );
 8009530:	4b1a      	ldr	r3, [pc, #104]	; (800959c <vDNSDoCallback+0x78>)
 8009532:	61bb      	str	r3, [r7, #24]

		vTaskSuspendAll();
 8009534:	f7fe f890 	bl	8007658 <vTaskSuspendAll>
		{
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	61fb      	str	r3, [r7, #28]
 800953e:	e021      	b.n	8009584 <vDNSDoCallback+0x60>
				 pxIterator != ( const ListItem_t * ) xEnd;
				 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
			{
				if( listGET_LIST_ITEM_VALUE( pxIterator ) == xIdentifier )
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	429a      	cmp	r2, r3
 8009548:	d119      	bne.n	800957e <vDNSDoCallback+0x5a>
				{
					DNSCallback_t *pxCallback = ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	617b      	str	r3, [r7, #20]
					pxCallback->pCallbackFunction( pcName, pxCallback->pvSearchID, ulIPAddress );
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	697a      	ldr	r2, [r7, #20]
 8009556:	6911      	ldr	r1, [r2, #16]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	68b8      	ldr	r0, [r7, #8]
 800955c:	4798      	blx	r3
					uxListRemove( &pxCallback->xListItem );
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	3314      	adds	r3, #20
 8009562:	4618      	mov	r0, r3
 8009564:	f7fc fc81 	bl	8005e6a <uxListRemove>
					vPortFree( pxCallback );
 8009568:	6978      	ldr	r0, [r7, #20]
 800956a:	f7fc ffab 	bl	80064c4 <vPortFree>
					if( listLIST_IS_EMPTY( &xCallbackList ) )
 800956e:	4b0c      	ldr	r3, [pc, #48]	; (80095a0 <vDNSDoCallback+0x7c>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10b      	bne.n	800958e <vDNSDoCallback+0x6a>
					{
						vIPSetDnsTimerEnableState( pdFALSE );
 8009576:	2000      	movs	r0, #0
 8009578:	f001 fa7c 	bl	800aa74 <vIPSetDnsTimerEnableState>
					}
					break;
 800957c:	e007      	b.n	800958e <vDNSDoCallback+0x6a>
				 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	61fb      	str	r3, [r7, #28]
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	429a      	cmp	r2, r3
 800958a:	d1d9      	bne.n	8009540 <vDNSDoCallback+0x1c>
 800958c:	e000      	b.n	8009590 <vDNSDoCallback+0x6c>
					break;
 800958e:	bf00      	nop
				}
			}
		}
		xTaskResumeAll();
 8009590:	f7fe f870 	bl	8007674 <xTaskResumeAll>
	}
 8009594:	bf00      	nop
 8009596:	3720      	adds	r7, #32
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	2000417c 	.word	0x2000417c
 80095a0:	20004174 	.word	0x20004174

080095a4 <prvReadNameField>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DNS_CACHE == 1 )

	static uint8_t *prvReadNameField( uint8_t *pucByte, char *pcName, BaseType_t xLen )
	{
 80095a4:	b480      	push	{r7}
 80095a6:	b087      	sub	sp, #28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
	BaseType_t xNameLen = 0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	617b      	str	r3, [r7, #20]
		/* Determine if the name is the fully coded name, or an offset to the name
		elsewhere in the message. */
		if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80095bc:	2bc0      	cmp	r3, #192	; 0xc0
 80095be:	d12f      	bne.n	8009620 <prvReadNameField+0x7c>
		{
			/* Jump over the two byte offset. */
			pucByte += sizeof( uint16_t );
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	3302      	adds	r3, #2
 80095c4:	60fb      	str	r3, [r7, #12]
 80095c6:	e032      	b.n	800962e <prvReadNameField+0x8a>
		{
			/* pucByte points to the full name.  Walk over the string. */
			while( *pucByte != 0x00 )
			{
				BaseType_t xCount;
				if( xNameLen && xNameLen < xLen - 1 )
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00c      	beq.n	80095e8 <prvReadNameField+0x44>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	1e5a      	subs	r2, r3, #1
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	dd07      	ble.n	80095e8 <prvReadNameField+0x44>
					pcName[xNameLen++] = '.';
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	617a      	str	r2, [r7, #20]
 80095de:	461a      	mov	r2, r3
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	4413      	add	r3, r2
 80095e4:	222e      	movs	r2, #46	; 0x2e
 80095e6:	701a      	strb	r2, [r3, #0]
				for( xCount = *(pucByte++); xCount--; pucByte++ )
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	1c5a      	adds	r2, r3, #1
 80095ec:	60fa      	str	r2, [r7, #12]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	613b      	str	r3, [r7, #16]
 80095f2:	e010      	b.n	8009616 <prvReadNameField+0x72>
				{
					if( xNameLen < xLen - 1 )
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	1e5a      	subs	r2, r3, #1
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	dd08      	ble.n	8009610 <prvReadNameField+0x6c>
						pcName[xNameLen++] = *( ( char * ) pucByte );
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	1c5a      	adds	r2, r3, #1
 8009602:	617a      	str	r2, [r7, #20]
 8009604:	461a      	mov	r2, r3
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	4413      	add	r3, r2
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	7812      	ldrb	r2, [r2, #0]
 800960e:	701a      	strb	r2, [r3, #0]
				for( xCount = *(pucByte++); xCount--; pucByte++ )
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	3301      	adds	r3, #1
 8009614:	60fb      	str	r3, [r7, #12]
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	1e5a      	subs	r2, r3, #1
 800961a:	613a      	str	r2, [r7, #16]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1e9      	bne.n	80095f4 <prvReadNameField+0x50>
			while( *pucByte != 0x00 )
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1cf      	bne.n	80095c8 <prvReadNameField+0x24>
				}
			}

			pucByte++;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3301      	adds	r3, #1
 800962c:	60fb      	str	r3, [r7, #12]
		}

		return pucByte;
 800962e:	68fb      	ldr	r3, [r7, #12]
	}
 8009630:	4618      	mov	r0, r3
 8009632:	371c      	adds	r7, #28
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <prvSkipNameField>:
#endif	/* ipconfigUSE_DNS_CACHE == 1 */
/*-----------------------------------------------------------*/

static uint8_t *prvSkipNameField( uint8_t *pucByte )
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
	/* Determine if the name is the fully coded name, or an offset to the name
	elsewhere in the message. */
	if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800964c:	2bc0      	cmp	r3, #192	; 0xc0
 800964e:	d109      	bne.n	8009664 <prvSkipNameField+0x28>
	{
		/* Jump over the two byte offset. */
		pucByte += sizeof( uint16_t );
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3302      	adds	r3, #2
 8009654:	607b      	str	r3, [r7, #4]
 8009656:	e00c      	b.n	8009672 <prvSkipNameField+0x36>
		/* pucByte points to the full name.  Walk over the string. */
		while( *pucByte != 0x00 )
		{
			/* The number of bytes to jump for each name section is stored in the byte
			before the name section. */
			pucByte += ( *pucByte + 1 );
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	3301      	adds	r3, #1
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	4413      	add	r3, r2
 8009662:	607b      	str	r3, [r7, #4]
		while( *pucByte != 0x00 )
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1f5      	bne.n	8009658 <prvSkipNameField+0x1c>
		}

		pucByte++;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	3301      	adds	r3, #1
 8009670:	607b      	str	r3, [r7, #4]
	}

	return pucByte;
 8009672:	687b      	ldr	r3, [r7, #4]
}
 8009674:	4618      	mov	r0, r3
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <ulDNSHandlePacket>:
/*-----------------------------------------------------------*/

uint32_t ulDNSHandlePacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
uint8_t *pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + sizeof( UDPPacket_t );
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	332a      	adds	r3, #42	; 0x2a
 800968e:	60fb      	str	r3, [r7, #12]
DNSMessage_t *pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	60bb      	str	r3, [r7, #8]

	prvParseDNSReply( pucUDPPayloadBuffer, ( uint32_t ) pxDNSMessageHeader->usIdentifier );
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	881b      	ldrh	r3, [r3, #0]
 8009698:	b29b      	uxth	r3, r3
 800969a:	4619      	mov	r1, r3
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f000 f805 	bl	80096ac <prvParseDNSReply>

	/* The packet was not consumed. */
	return pdFAIL;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <prvParseDNSReply>:

#endif /* ipconfigUSE_NBNS */
/*-----------------------------------------------------------*/

static uint32_t prvParseDNSReply( uint8_t *pucUDPPayloadBuffer, TickType_t xIdentifier )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b0b2      	sub	sp, #200	; 0xc8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
DNSMessage_t *pxDNSMessageHeader;
uint32_t ulIPAddress = 0UL;
 80096b6:	2300      	movs	r3, #0
 80096b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#if( ipconfigUSE_LLMNR == 1 )
	char *pcRequestedName = NULL;
 80096bc:	2300      	movs	r3, #0
 80096be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
#endif
uint8_t *pucByte;
uint16_t x, usDataLength, usQuestions;
#if( ipconfigUSE_LLMNR == 1 )
	uint16_t usType = 0, usClass = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 80096c8:	2300      	movs	r3, #0
 80096ca:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
#endif
#if( ipconfigUSE_DNS_CACHE == 1 )
	char pcName[128] = ""; /*_RB_ What is the significance of 128?  Probably too big to go on the stack for a small MCU but don't know how else it could be made re-entrant.  Might be necessary. */
 80096ce:	2300      	movs	r3, #0
 80096d0:	60fb      	str	r3, [r7, #12]
 80096d2:	f107 0310 	add.w	r3, r7, #16
 80096d6:	227c      	movs	r2, #124	; 0x7c
 80096d8:	2100      	movs	r1, #0
 80096da:	4618      	mov	r0, r3
 80096dc:	f007 fa2c 	bl	8010b38 <memset>
#endif

	pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	if( pxDNSMessageHeader->usIdentifier == ( uint16_t ) xIdentifier )
 80096e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	429a      	cmp	r2, r3
 80096f4:	f040 8221 	bne.w	8009b3a <prvParseDNSReply+0x48e>
	{
		/* Start at the first byte after the header. */
		pucByte = pucUDPPayloadBuffer + sizeof( DNSMessage_t );
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	330c      	adds	r3, #12
 80096fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Skip any question records. */
		usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 8009700:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009704:	889b      	ldrh	r3, [r3, #4]
 8009706:	b29b      	uxth	r3, r3
 8009708:	021b      	lsls	r3, r3, #8
 800970a:	b21a      	sxth	r2, r3
 800970c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009710:	889b      	ldrh	r3, [r3, #4]
 8009712:	b29b      	uxth	r3, r3
 8009714:	0a1b      	lsrs	r3, r3, #8
 8009716:	b29b      	uxth	r3, r3
 8009718:	b21b      	sxth	r3, r3
 800971a:	4313      	orrs	r3, r2
 800971c:	b21b      	sxth	r3, r3
 800971e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		for( x = 0; x < usQuestions; x++ )
 8009722:	2300      	movs	r3, #0
 8009724:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8009728:	e036      	b.n	8009798 <prvParseDNSReply+0xec>
		{
			#if( ipconfigUSE_LLMNR == 1 )
			{
				if( x == 0 )
 800972a:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800972e:	2b00      	cmp	r3, #0
 8009730:	d103      	bne.n	800973a <prvParseDNSReply+0x8e>
				{
					pcRequestedName = ( char * ) pucByte;
 8009732:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009736:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
				}
			}
			#endif

#if( ipconfigUSE_DNS_CACHE == 1 )
			if( x == 0 )
 800973a:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10a      	bne.n	8009758 <prvParseDNSReply+0xac>
			{
				pucByte = prvReadNameField( pucByte, pcName, sizeof( pcName ) );
 8009742:	f107 030c 	add.w	r3, r7, #12
 8009746:	2280      	movs	r2, #128	; 0x80
 8009748:	4619      	mov	r1, r3
 800974a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800974e:	f7ff ff29 	bl	80095a4 <prvReadNameField>
 8009752:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 8009756:	e005      	b.n	8009764 <prvParseDNSReply+0xb8>
			}
			else
#endif /* ipconfigUSE_DNS_CACHE */
			{
				/* Skip the variable length pcName field. */
				pucByte = prvSkipNameField( pucByte );
 8009758:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800975c:	f7ff ff6e 	bl	800963c <prvSkipNameField>
 8009760:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
			}

			#if( ipconfigUSE_LLMNR == 1 )
			{
				/* usChar2u16 returns value in host endianness */
				usType = usChar2u16( pucByte );
 8009764:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8009768:	f7ff fe68 	bl	800943c <usChar2u16>
 800976c:	4603      	mov	r3, r0
 800976e:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
				usClass = usChar2u16( pucByte + 2 );
 8009772:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009776:	3302      	adds	r3, #2
 8009778:	4618      	mov	r0, r3
 800977a:	f7ff fe5f 	bl	800943c <usChar2u16>
 800977e:	4603      	mov	r3, r0
 8009780:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
			}
			#endif /* ipconfigUSE_LLMNR */

			/* Skip the type and class fields. */
			pucByte += sizeof( uint32_t );
 8009784:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009788:	3304      	adds	r3, #4
 800978a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		for( x = 0; x < usQuestions; x++ )
 800978e:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8009792:	3301      	adds	r3, #1
 8009794:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8009798:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800979c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d3c2      	bcc.n	800972a <prvParseDNSReply+0x7e>
		}

		/* Search through the answers records. */
		pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 80097a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097a8:	88db      	ldrh	r3, [r3, #6]
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	021b      	lsls	r3, r3, #8
 80097ae:	b21a      	sxth	r2, r3
 80097b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097b4:	88db      	ldrh	r3, [r3, #6]
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	0a1b      	lsrs	r3, r3, #8
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	b21b      	sxth	r3, r3
 80097be:	4313      	orrs	r3, r2
 80097c0:	b21b      	sxth	r3, r3
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097c8:	80da      	strh	r2, [r3, #6]

		if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 80097ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097ce:	885b      	ldrh	r3, [r3, #2]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	f403 6378 	and.w	r3, r3, #3968	; 0xf80
 80097d6:	2b80      	cmp	r3, #128	; 0x80
 80097d8:	d169      	bne.n	80098ae <prvParseDNSReply+0x202>
		{
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 80097da:	2300      	movs	r3, #0
 80097dc:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 80097e0:	e05c      	b.n	800989c <prvParseDNSReply+0x1f0>
			{
				pucByte = prvSkipNameField( pucByte );
 80097e2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80097e6:	f7ff ff29 	bl	800963c <prvSkipNameField>
 80097ea:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

				/* Is the type field that of an A record? */
				if( usChar2u16( pucByte ) == dnsTYPE_A_HOST )
 80097ee:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80097f2:	f7ff fe23 	bl	800943c <usChar2u16>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d129      	bne.n	8009850 <prvParseDNSReply+0x1a4>
				{
					/* This is the required record.  Skip the type, class, and
					time to live fields, plus the first byte of the data
					length. */
					pucByte += ( sizeof( uint32_t ) + sizeof( uint32_t ) + sizeof( uint8_t ) );
 80097fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009800:	3309      	adds	r3, #9
 8009802:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

					/* Sanity check the data length. */
					if( ( size_t ) *pucByte == sizeof( uint32_t ) )
 8009806:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	2b04      	cmp	r3, #4
 800980e:	f040 8193 	bne.w	8009b38 <prvParseDNSReply+0x48c>
					{
						/* Skip the second byte of the length. */
						pucByte++;
 8009812:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009816:	3301      	adds	r3, #1
 8009818:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

						/* Copy the IP address out of the record. */
						memcpy( ( void * ) &ulIPAddress, ( void * ) pucByte, sizeof( uint32_t ) );
 800981c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

						#if( ipconfigUSE_DNS_CACHE == 1 )
						{
							prvProcessDNSCache( pcName, &ulIPAddress, pdFALSE );
 8009826:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800982a:	f107 030c 	add.w	r3, r7, #12
 800982e:	2200      	movs	r2, #0
 8009830:	4618      	mov	r0, r3
 8009832:	f000 f9f7 	bl	8009c24 <prvProcessDNSCache>
						}
						#endif /* ipconfigUSE_DNS_CACHE */
						#if( ipconfigDNS_USE_CALLBACKS != 0 )
						{
							/* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
							vDNSDoCallback( ( TickType_t ) pxDNSMessageHeader->usIdentifier, pcName, ulIPAddress );
 8009836:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800983a:	881b      	ldrh	r3, [r3, #0]
 800983c:	b29b      	uxth	r3, r3
 800983e:	4618      	mov	r0, r3
 8009840:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009844:	f107 030c 	add.w	r3, r7, #12
 8009848:	4619      	mov	r1, r3
 800984a:	f7ff fe6b 	bl	8009524 <vDNSDoCallback>
						}
						#endif	/* ipconfigDNS_USE_CALLBACKS != 0 */
					}

					break;
 800984e:	e173      	b.n	8009b38 <prvParseDNSReply+0x48c>
				}
				else
				{
					/* Skip the type, class and time to live fields. */
					pucByte += ( sizeof( uint32_t ) + sizeof( uint32_t ) );
 8009850:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009854:	3308      	adds	r3, #8
 8009856:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

					/* Determine the length of the data in the field. */
					memcpy( ( void * ) &usDataLength, ( void * ) pucByte, sizeof( uint16_t ) );
 800985a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800985e:	881b      	ldrh	r3, [r3, #0]
 8009860:	b29b      	uxth	r3, r3
 8009862:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					usDataLength = FreeRTOS_ntohs( usDataLength );
 8009866:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800986a:	021b      	lsls	r3, r3, #8
 800986c:	b21a      	sxth	r2, r3
 800986e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009872:	0a1b      	lsrs	r3, r3, #8
 8009874:	b29b      	uxth	r3, r3
 8009876:	b21b      	sxth	r3, r3
 8009878:	4313      	orrs	r3, r2
 800987a:	b21b      	sxth	r3, r3
 800987c:	b29b      	uxth	r3, r3
 800987e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

					/* Jump over the data length bytes, and the data itself. */
					pucByte += usDataLength + sizeof( uint16_t );
 8009882:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009886:	3302      	adds	r3, #2
 8009888:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800988c:	4413      	add	r3, r2
 800988e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 8009892:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8009896:	3301      	adds	r3, #1
 8009898:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800989c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098a0:	88db      	ldrh	r3, [r3, #6]
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d39a      	bcc.n	80097e2 <prvParseDNSReply+0x136>
 80098ac:	e145      	b.n	8009b3a <prvParseDNSReply+0x48e>
				}
			}
		}
#if( ipconfigUSE_LLMNR == 1 )
		else if( usQuestions && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) )
 80098ae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 8141 	beq.w	8009b3a <prvParseDNSReply+0x48e>
 80098b8:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80098bc:	2b01      	cmp	r3, #1
 80098be:	f040 813c 	bne.w	8009b3a <prvParseDNSReply+0x48e>
 80098c2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	f040 8137 	bne.w	8009b3a <prvParseDNSReply+0x48e>
		{
			/* If this is not a reply to our DNS request, it might an LLMNR
			request. */
			if( xApplicationDNSQueryHook ( ( pcRequestedName + 1 ) ) )
 80098cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80098d0:	3301      	adds	r3, #1
 80098d2:	4618      	mov	r0, r3
 80098d4:	f006 fa56 	bl	800fd84 <xApplicationDNSQueryHook>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 812d 	beq.w	8009b3a <prvParseDNSReply+0x48e>
			{
			int16_t usLength;
			NetworkBufferDescriptor_t *pxNewBuffer = NULL;
 80098e0:	2300      	movs	r3, #0
 80098e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			NetworkBufferDescriptor_t *pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fc77 	bl	800a1da <pxUDPPayloadBuffer_to_NetworkBuffer>
 80098ec:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
			LLMNRAnswer_t *pxAnswer;

				if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 80098f0:	4b95      	ldr	r3, [pc, #596]	; (8009b48 <prvParseDNSReply+0x49c>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d144      	bne.n	8009982 <prvParseDNSReply+0x2d6>
 80098f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d040      	beq.n	8009982 <prvParseDNSReply+0x2d6>
				{
				BaseType_t xDataLength = pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) +
 8009900:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009904:	69db      	ldr	r3, [r3, #28]
					sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 8009906:	332a      	adds	r3, #42	; 0x2a
				BaseType_t xDataLength = pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) +
 8009908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

					/* The field xDataLength was set to the length of the UDP payload.
					The answer (reply) will be longer than the request, so the packet
					must be duplicaed into a bigger buffer */
					pxNetworkBuffer->xDataLength = xDataLength;
 800990c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009914:	61da      	str	r2, [r3, #28]
					pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, xDataLength + 16 );
 8009916:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800991a:	3310      	adds	r3, #16
 800991c:	4619      	mov	r1, r3
 800991e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009922:	f000 fc32 	bl	800a18a <pxDuplicateNetworkBufferWithDescriptor>
 8009926:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
					if( pxNewBuffer != NULL )
 800992a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d024      	beq.n	800997c <prvParseDNSReply+0x2d0>
					{
					BaseType_t xOffset1, xOffset2;

						xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 8009932:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
 800993e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

						pxNetworkBuffer = pxNewBuffer;
 800994a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800994e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
						pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + ipUDP_PAYLOAD_OFFSET_IPv4;
 8009952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	332a      	adds	r3, #42	; 0x2a
 800995a:	607b      	str	r3, [r7, #4]

						pucByte = pucUDPPayloadBuffer + xOffset1;
 800995c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	4413      	add	r3, r2
 8009964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						pcRequestedName = ( char * ) ( pucUDPPayloadBuffer + xOffset2 );
 8009968:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	4413      	add	r3, r2
 8009970:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
						pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800997a:	e002      	b.n	8009982 <prvParseDNSReply+0x2d6>

					}
					else
					{
						/* Just to indicate that the message may not be answered. */
						pxNetworkBuffer = NULL;
 800997c:	2300      	movs	r3, #0
 800997e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					}
				}
				if( pxNetworkBuffer != NULL )
 8009982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009986:	2b00      	cmp	r3, #0
 8009988:	f000 80d7 	beq.w	8009b3a <prvParseDNSReply+0x48e>
				{
					pxAnswer = (LLMNRAnswer_t *)pucByte;
 800998c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

					/* We leave 'usIdentifier' and 'usQuestions' untouched */
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE );	/* Set the response flag */
 8009994:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009998:	3302      	adds	r3, #2
 800999a:	2280      	movs	r2, #128	; 0x80
 800999c:	701a      	strb	r2, [r3, #0]
 800999e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80099a2:	3303      	adds	r3, #3
 80099a4:	2200      	movs	r2, #0
 80099a6:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );	/* Provide a single answer */
 80099a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80099ac:	3306      	adds	r3, #6
 80099ae:	2200      	movs	r2, #0
 80099b0:	701a      	strb	r2, [r3, #0]
 80099b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80099b6:	3307      	adds	r3, #7
 80099b8:	2201      	movs	r2, #1
 80099ba:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );	/* No authority */
 80099bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80099c0:	3308      	adds	r3, #8
 80099c2:	2200      	movs	r2, #0
 80099c4:	701a      	strb	r2, [r3, #0]
 80099c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80099ca:	3309      	adds	r3, #9
 80099cc:	2200      	movs	r2, #0
 80099ce:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );	/* No additional info */
 80099d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80099d4:	330a      	adds	r3, #10
 80099d6:	2200      	movs	r2, #0
 80099d8:	701a      	strb	r2, [r3, #0]
 80099da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80099de:	330b      	adds	r3, #11
 80099e0:	2200      	movs	r2, #0
 80099e2:	701a      	strb	r2, [r3, #0]

					pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 80099e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099e8:	22c0      	movs	r2, #192	; 0xc0
 80099ea:	701a      	strb	r2, [r3, #0]
					pxAnswer->ucNameOffset = ( uint8_t )( pcRequestedName - ( char * ) pucUDPPayloadBuffer );
 80099ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099fa:	705a      	strb	r2, [r3, #1]

					vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST );	/* Type A: host */
 80099fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a00:	3302      	adds	r3, #2
 8009a02:	2200      	movs	r2, #0
 8009a04:	701a      	strb	r2, [r3, #0]
 8009a06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a0a:	3303      	adds	r3, #3
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	701a      	strb	r2, [r3, #0]
					vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );	/* 1: Class IN */
 8009a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a14:	3304      	adds	r3, #4
 8009a16:	2200      	movs	r2, #0
 8009a18:	701a      	strb	r2, [r3, #0]
 8009a1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a1e:	3305      	adds	r3, #5
 8009a20:	2201      	movs	r2, #1
 8009a22:	701a      	strb	r2, [r3, #0]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8009a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a28:	3306      	adds	r3, #6
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	701a      	strb	r2, [r3, #0]
 8009a2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a32:	3307      	adds	r3, #7
 8009a34:	2204      	movs	r2, #4
 8009a36:	701a      	strb	r2, [r3, #0]
 8009a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a3c:	3308      	adds	r3, #8
 8009a3e:	2293      	movs	r2, #147	; 0x93
 8009a40:	701a      	strb	r2, [r3, #0]
 8009a42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a46:	3309      	adds	r3, #9
 8009a48:	22e0      	movs	r2, #224	; 0xe0
 8009a4a:	701a      	strb	r2, [r3, #0]
					vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 8009a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a50:	330a      	adds	r3, #10
 8009a52:	2200      	movs	r2, #0
 8009a54:	701a      	strb	r2, [r3, #0]
 8009a56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a5a:	330b      	adds	r3, #11
 8009a5c:	2204      	movs	r2, #4
 8009a5e:	701a      	strb	r2, [r3, #0]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 8009a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a64:	330c      	adds	r3, #12
 8009a66:	4a39      	ldr	r2, [pc, #228]	; (8009b4c <prvParseDNSReply+0x4a0>)
 8009a68:	6952      	ldr	r2, [r2, #20]
 8009a6a:	0611      	lsls	r1, r2, #24
 8009a6c:	4a37      	ldr	r2, [pc, #220]	; (8009b4c <prvParseDNSReply+0x4a0>)
 8009a6e:	6952      	ldr	r2, [r2, #20]
 8009a70:	0212      	lsls	r2, r2, #8
 8009a72:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8009a76:	4311      	orrs	r1, r2
 8009a78:	4a34      	ldr	r2, [pc, #208]	; (8009b4c <prvParseDNSReply+0x4a0>)
 8009a7a:	6952      	ldr	r2, [r2, #20]
 8009a7c:	0a12      	lsrs	r2, r2, #8
 8009a7e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8009a82:	4311      	orrs	r1, r2
 8009a84:	4a31      	ldr	r2, [pc, #196]	; (8009b4c <prvParseDNSReply+0x4a0>)
 8009a86:	6952      	ldr	r2, [r2, #20]
 8009a88:	0e12      	lsrs	r2, r2, #24
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	0e12      	lsrs	r2, r2, #24
 8009a8e:	b2d2      	uxtb	r2, r2
 8009a90:	701a      	strb	r2, [r3, #0]
 8009a92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a96:	330d      	adds	r3, #13
 8009a98:	4a2c      	ldr	r2, [pc, #176]	; (8009b4c <prvParseDNSReply+0x4a0>)
 8009a9a:	6952      	ldr	r2, [r2, #20]
 8009a9c:	0611      	lsls	r1, r2, #24
 8009a9e:	4a2b      	ldr	r2, [pc, #172]	; (8009b4c <prvParseDNSReply+0x4a0>)
 8009aa0:	6952      	ldr	r2, [r2, #20]
 8009aa2:	0212      	lsls	r2, r2, #8
 8009aa4:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8009aa8:	4311      	orrs	r1, r2
 8009aaa:	4a28      	ldr	r2, [pc, #160]	; (8009b4c <prvParseDNSReply+0x4a0>)
 8009aac:	6952      	ldr	r2, [r2, #20]
 8009aae:	0a12      	lsrs	r2, r2, #8
 8009ab0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8009ab4:	4311      	orrs	r1, r2
 8009ab6:	4a25      	ldr	r2, [pc, #148]	; (8009b4c <prvParseDNSReply+0x4a0>)
 8009ab8:	6952      	ldr	r2, [r2, #20]
 8009aba:	0e12      	lsrs	r2, r2, #24
 8009abc:	430a      	orrs	r2, r1
 8009abe:	0c12      	lsrs	r2, r2, #16
 8009ac0:	b2d2      	uxtb	r2, r2
 8009ac2:	701a      	strb	r2, [r3, #0]
 8009ac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ac8:	330e      	adds	r3, #14
 8009aca:	4a20      	ldr	r2, [pc, #128]	; (8009b4c <prvParseDNSReply+0x4a0>)
 8009acc:	6952      	ldr	r2, [r2, #20]
 8009ace:	0611      	lsls	r1, r2, #24
 8009ad0:	4a1e      	ldr	r2, [pc, #120]	; (8009b4c <prvParseDNSReply+0x4a0>)
 8009ad2:	6952      	ldr	r2, [r2, #20]
 8009ad4:	0212      	lsls	r2, r2, #8
 8009ad6:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8009ada:	4311      	orrs	r1, r2
 8009adc:	4a1b      	ldr	r2, [pc, #108]	; (8009b4c <prvParseDNSReply+0x4a0>)
 8009ade:	6952      	ldr	r2, [r2, #20]
 8009ae0:	0a12      	lsrs	r2, r2, #8
 8009ae2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8009ae6:	4311      	orrs	r1, r2
 8009ae8:	4a18      	ldr	r2, [pc, #96]	; (8009b4c <prvParseDNSReply+0x4a0>)
 8009aea:	6952      	ldr	r2, [r2, #20]
 8009aec:	0e12      	lsrs	r2, r2, #24
 8009aee:	430a      	orrs	r2, r1
 8009af0:	0a12      	lsrs	r2, r2, #8
 8009af2:	b2d2      	uxtb	r2, r2
 8009af4:	701a      	strb	r2, [r3, #0]
 8009af6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009afa:	330f      	adds	r3, #15
 8009afc:	4a13      	ldr	r2, [pc, #76]	; (8009b4c <prvParseDNSReply+0x4a0>)
 8009afe:	6952      	ldr	r2, [r2, #20]
 8009b00:	0e12      	lsrs	r2, r2, #24
 8009b02:	b2d2      	uxtb	r2, r2
 8009b04:	701a      	strb	r2, [r3, #0]

					usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucUDPPayloadBuffer ) );
 8009b06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	3310      	adds	r3, #16
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

					prvReplyDNSMessage( pxNetworkBuffer, usLength );
 8009b18:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009b22:	f000 f815 	bl	8009b50 <prvReplyDNSMessage>

					if( pxNewBuffer != NULL )
 8009b26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d005      	beq.n	8009b3a <prvParseDNSReply+0x48e>
					{
						vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8009b2e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8009b32:	f006 f873 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
 8009b36:	e000      	b.n	8009b3a <prvParseDNSReply+0x48e>
					break;
 8009b38:	bf00      	nop
			}
		}
#endif /* ipconfigUSE_LLMNR == 1 */
	}

	return ulIPAddress;
 8009b3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	37c8      	adds	r7, #200	; 0xc8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	08010f94 	.word	0x08010f94
 8009b4c:	200000a0 	.word	0x200000a0

08009b50 <prvReplyDNSMessage>:
/*-----------------------------------------------------------*/

#if( ( ipconfigUSE_NBNS == 1 ) || ( ipconfigUSE_LLMNR == 1 ) )

	static void prvReplyDNSMessage( NetworkBufferDescriptor_t *pxNetworkBuffer, BaseType_t lNetLength )
	{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
	UDPPacket_t *pxUDPPacket;
	IPHeader_t *pxIPHeader;
	UDPHeader_t *pxUDPHeader;

		pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	617b      	str	r3, [r7, #20]
		pxIPHeader = &pxUDPPacket->xIPHeader;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	330e      	adds	r3, #14
 8009b64:	613b      	str	r3, [r7, #16]
		pxUDPHeader = &pxUDPPacket->xUDPHeader;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	3322      	adds	r3, #34	; 0x22
 8009b6a:	60fb      	str	r3, [r7, #12]
		/* HT: started using defines like 'ipSIZE_OF_xxx' */
		pxIPHeader->usLength               = FreeRTOS_htons( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	331c      	adds	r3, #28
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	021b      	lsls	r3, r3, #8
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	331c      	adds	r3, #28
 8009b7c:	0a1b      	lsrs	r3, r3, #8
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	4313      	orrs	r3, r2
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	805a      	strh	r2, [r3, #2]
		/* HT:endian: should not be translated, copying from packet to packet */
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	68da      	ldr	r2, [r3, #12]
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress      = *ipLOCAL_IP_ADDRESS_POINTER;
 8009b90:	4b22      	ldr	r3, [pc, #136]	; (8009c1c <prvReplyDNSMessage+0xcc>)
 8009b92:	695a      	ldr	r2, [r3, #20]
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	60da      	str	r2, [r3, #12]
		pxIPHeader->ucTimeToLive           = ipconfigUDP_TIME_TO_LIVE;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	2280      	movs	r2, #128	; 0x80
 8009b9c:	721a      	strb	r2, [r3, #8]
		pxIPHeader->usIdentification       = FreeRTOS_htons( usPacketIdentifier );
 8009b9e:	4b20      	ldr	r3, [pc, #128]	; (8009c20 <prvReplyDNSMessage+0xd0>)
 8009ba0:	881b      	ldrh	r3, [r3, #0]
 8009ba2:	021b      	lsls	r3, r3, #8
 8009ba4:	b21a      	sxth	r2, r3
 8009ba6:	4b1e      	ldr	r3, [pc, #120]	; (8009c20 <prvReplyDNSMessage+0xd0>)
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	0a1b      	lsrs	r3, r3, #8
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	b21b      	sxth	r3, r3
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	b21b      	sxth	r3, r3
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	809a      	strh	r2, [r3, #4]
		usPacketIdentifier++;
 8009bba:	4b19      	ldr	r3, [pc, #100]	; (8009c20 <prvReplyDNSMessage+0xd0>)
 8009bbc:	881b      	ldrh	r3, [r3, #0]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	4b17      	ldr	r3, [pc, #92]	; (8009c20 <prvReplyDNSMessage+0xd0>)
 8009bc4:	801a      	strh	r2, [r3, #0]
		pxUDPHeader->usLength              = FreeRTOS_htons( lNetLength + ipSIZE_OF_UDP_HEADER );
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	3308      	adds	r3, #8
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	021b      	lsls	r3, r3, #8
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	3308      	adds	r3, #8
 8009bd6:	0a1b      	lsrs	r3, r3, #8
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	809a      	strh	r2, [r3, #4]
		vFlip_16( pxUDPPacket->xUDPHeader.usSourcePort, pxUDPPacket->xUDPHeader.usDestinationPort );
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8009be8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009bec:	021b      	lsls	r3, r3, #8
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	817b      	strh	r3, [r7, #10]
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	845a      	strh	r2, [r3, #34]	; 0x22
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	897a      	ldrh	r2, [r7, #10]
 8009c00:	849a      	strh	r2, [r3, #36]	; 0x24
			usGenerateProtocolChecksum( ( uint8_t* ) pxUDPPacket, pdTRUE );
		}
		#endif

		/* Important: tell NIC driver how many bytes must be sent */
		pxNetworkBuffer->xDataLength = ( size_t ) ( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER );
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	61da      	str	r2, [r3, #28]

		/* This function will fill in the eth addresses and send the packet */
		vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fee8 	bl	800a9e4 <vReturnEthernetFrame>
	}
 8009c14:	bf00      	nop
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	200000a0 	.word	0x200000a0
 8009c20:	20004190 	.word	0x20004190

08009c24 <prvProcessDNSCache>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DNS_CACHE == 1 )

	static void prvProcessDNSCache( const char *pcName, uint32_t *pulIP, BaseType_t xLookUp )
	{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b086      	sub	sp, #24
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
	BaseType_t x;
	BaseType_t xFound = pdFALSE;
 8009c30:	2300      	movs	r3, #0
 8009c32:	613b      	str	r3, [r7, #16]
	static BaseType_t xFreeEntry = 0;

		/* For each entry in the DNS cache table. */
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8009c34:	2300      	movs	r3, #0
 8009c36:	617b      	str	r3, [r7, #20]
 8009c38:	e038      	b.n	8009cac <prvProcessDNSCache+0x88>
		{
			if( xDNSCache[ x ].pcName[ 0 ] == 0 )
 8009c3a:	4939      	ldr	r1, [pc, #228]	; (8009d20 <prvProcessDNSCache+0xfc>)
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	005b      	lsls	r3, r3, #1
 8009c42:	4413      	add	r3, r2
 8009c44:	00db      	lsls	r3, r3, #3
 8009c46:	440b      	add	r3, r1
 8009c48:	3304      	adds	r3, #4
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d031      	beq.n	8009cb4 <prvProcessDNSCache+0x90>
			{
				break;
			}

			if( strncmp( xDNSCache[ x ].pcName, pcName, sizeof( xDNSCache[ x ].pcName ) ) == 0 )
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	4613      	mov	r3, r2
 8009c54:	005b      	lsls	r3, r3, #1
 8009c56:	4413      	add	r3, r2
 8009c58:	00db      	lsls	r3, r3, #3
 8009c5a:	4a31      	ldr	r2, [pc, #196]	; (8009d20 <prvProcessDNSCache+0xfc>)
 8009c5c:	4413      	add	r3, r2
 8009c5e:	3304      	adds	r3, #4
 8009c60:	2210      	movs	r2, #16
 8009c62:	68f9      	ldr	r1, [r7, #12]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f006 ffc7 	bl	8010bf8 <strncmp>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d11a      	bne.n	8009ca6 <prvProcessDNSCache+0x82>
			{
				/* Is this function called for a lookup or to add/update an IP address? */
				if( xLookUp != pdFALSE )
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00a      	beq.n	8009c8c <prvProcessDNSCache+0x68>
				{
					*pulIP = xDNSCache[ x ].ulIPAddress;
 8009c76:	492a      	ldr	r1, [pc, #168]	; (8009d20 <prvProcessDNSCache+0xfc>)
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	4413      	add	r3, r2
 8009c80:	00db      	lsls	r3, r3, #3
 8009c82:	440b      	add	r3, r1
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	e009      	b.n	8009ca0 <prvProcessDNSCache+0x7c>
				}
				else
				{
					xDNSCache[ x ].ulIPAddress = *pulIP;
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	6819      	ldr	r1, [r3, #0]
 8009c90:	4823      	ldr	r0, [pc, #140]	; (8009d20 <prvProcessDNSCache+0xfc>)
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	4613      	mov	r3, r2
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	4413      	add	r3, r2
 8009c9a:	00db      	lsls	r3, r3, #3
 8009c9c:	4403      	add	r3, r0
 8009c9e:	6019      	str	r1, [r3, #0]
				}

				xFound = pdTRUE;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	613b      	str	r3, [r7, #16]
				break;
 8009ca4:	e007      	b.n	8009cb6 <prvProcessDNSCache+0x92>
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	617b      	str	r3, [r7, #20]
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	ddc3      	ble.n	8009c3a <prvProcessDNSCache+0x16>
 8009cb2:	e000      	b.n	8009cb6 <prvProcessDNSCache+0x92>
				break;
 8009cb4:	bf00      	nop
			}
		}

		if( xFound == pdFALSE )
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d12b      	bne.n	8009d14 <prvProcessDNSCache+0xf0>
		{
			if( xLookUp != pdFALSE )
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <prvProcessDNSCache+0xa6>
			{
				*pulIP = 0;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	601a      	str	r2, [r3, #0]
 8009cc8:	e024      	b.n	8009d14 <prvProcessDNSCache+0xf0>
			}
			else
			{
				/* Called to add or update an item */
				strncpy( xDNSCache[ xFreeEntry ].pcName, pcName, sizeof( xDNSCache[ xFreeEntry ].pcName ) );
 8009cca:	4b16      	ldr	r3, [pc, #88]	; (8009d24 <prvProcessDNSCache+0x100>)
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	4413      	add	r3, r2
 8009cd4:	00db      	lsls	r3, r3, #3
 8009cd6:	4a12      	ldr	r2, [pc, #72]	; (8009d20 <prvProcessDNSCache+0xfc>)
 8009cd8:	4413      	add	r3, r2
 8009cda:	3304      	adds	r3, #4
 8009cdc:	2210      	movs	r2, #16
 8009cde:	68f9      	ldr	r1, [r7, #12]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f006 ff9b 	bl	8010c1c <strncpy>
				xDNSCache[ xFreeEntry ].ulIPAddress = *pulIP;
 8009ce6:	4b0f      	ldr	r3, [pc, #60]	; (8009d24 <prvProcessDNSCache+0x100>)
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	6819      	ldr	r1, [r3, #0]
 8009cee:	480c      	ldr	r0, [pc, #48]	; (8009d20 <prvProcessDNSCache+0xfc>)
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	005b      	lsls	r3, r3, #1
 8009cf4:	4413      	add	r3, r2
 8009cf6:	00db      	lsls	r3, r3, #3
 8009cf8:	4403      	add	r3, r0
 8009cfa:	6019      	str	r1, [r3, #0]

				xFreeEntry++;
 8009cfc:	4b09      	ldr	r3, [pc, #36]	; (8009d24 <prvProcessDNSCache+0x100>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3301      	adds	r3, #1
 8009d02:	4a08      	ldr	r2, [pc, #32]	; (8009d24 <prvProcessDNSCache+0x100>)
 8009d04:	6013      	str	r3, [r2, #0]
				if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8009d06:	4b07      	ldr	r3, [pc, #28]	; (8009d24 <prvProcessDNSCache+0x100>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2b04      	cmp	r3, #4
 8009d0c:	d102      	bne.n	8009d14 <prvProcessDNSCache+0xf0>
				{
					xFreeEntry = 0;
 8009d0e:	4b05      	ldr	r3, [pc, #20]	; (8009d24 <prvProcessDNSCache+0x100>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	601a      	str	r2, [r3, #0]
				}
			}
		}

		if( ( xLookUp == 0 ) || ( *pulIP != 0 ) )
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2b00      	cmp	r3, #0
		{
			FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", xLookUp ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
		}
	}
 8009d18:	bf00      	nop
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	20004114 	.word	0x20004114
 8009d24:	20004188 	.word	0x20004188

08009d28 <prvIPTask>:
#endif

/*-----------------------------------------------------------*/

static void prvIPTask( void *pvParameters )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b088      	sub	sp, #32
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]

	/* Generate a dummy message to say that the network connection has gone
	down.  This will cause this task to initialise the network interface.  After
	this it is the responsibility of the network interface hardware driver to
	send this message if a previously connected network is disconnected. */
	FreeRTOS_NetworkDown();
 8009d30:	f000 f9ec 	bl	800a10c <FreeRTOS_NetworkDown>

	#if( ipconfigUSE_TCP == 1 )
	{
		/* Initialise the TCP timer. */
		prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8009d34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009d38:	4850      	ldr	r0, [pc, #320]	; (8009e7c <prvIPTask+0x154>)
 8009d3a:	f000 f9a7 	bl	800a08c <prvIPTimerReload>
	}
	#endif

	/* Initialisation is complete and events can now be processed. */
	xIPTaskInitialised = pdTRUE;
 8009d3e:	4b50      	ldr	r3, [pc, #320]	; (8009e80 <prvIPTask+0x158>)
 8009d40:	2201      	movs	r2, #1
 8009d42:	601a      	str	r2, [r3, #0]
	{
		ipconfigWATCHDOG_TIMER();

		/* Check the ARP, DHCP and TCP timers to see if there is any periodic
		or timeout processing to perform. */
		prvCheckNetworkTimers();
 8009d44:	f000 f910 	bl	8009f68 <prvCheckNetworkTimers>

		/* Calculate the acceptable maximum sleep time. */
		xNextIPSleep = prvCalculateSleepTime();
 8009d48:	f000 f8c4 	bl	8009ed4 <prvCalculateSleepTime>
 8009d4c:	61f8      	str	r0, [r7, #28]

		/* Wait until there is something to do.  The event is initialised to "no
		event" in case the following call exits due to a time out rather than a
		message being received. */
		xReceivedEvent.eEventType = eNoEvent;
 8009d4e:	23ff      	movs	r3, #255	; 0xff
 8009d50:	743b      	strb	r3, [r7, #16]
		xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep );
 8009d52:	4b4c      	ldr	r3, [pc, #304]	; (8009e84 <prvIPTask+0x15c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f107 0110 	add.w	r1, r7, #16
 8009d5a:	69fa      	ldr	r2, [r7, #28]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fc feb1 	bl	8006ac4 <xQueueReceive>
		}
		#endif /* ipconfigCHECK_IP_QUEUE_SPACE */

		iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

		switch( xReceivedEvent.eEventType )
 8009d62:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8009d66:	2b0b      	cmp	r3, #11
 8009d68:	d87d      	bhi.n	8009e66 <prvIPTask+0x13e>
 8009d6a:	a201      	add	r2, pc, #4	; (adr r2, 8009d70 <prvIPTask+0x48>)
 8009d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d70:	08009da1 	.word	0x08009da1
 8009d74:	08009dad 	.word	0x08009dad
 8009d78:	08009db7 	.word	0x08009db7
 8009d7c:	08009e11 	.word	0x08009e11
 8009d80:	08009e1b 	.word	0x08009e1b
 8009d84:	08009e37 	.word	0x08009e37
 8009d88:	08009e43 	.word	0x08009e43
 8009d8c:	08009e67 	.word	0x08009e67
 8009d90:	08009dbd 	.word	0x08009dbd
 8009d94:	08009e07 	.word	0x08009e07
 8009d98:	08009e23 	.word	0x08009e23
 8009d9c:	08009e2d 	.word	0x08009e2d
		{
			case eNetworkDownEvent :
				/* Attempt to establish a connection. */
				xNetworkUp = pdFALSE;
 8009da0:	4b39      	ldr	r3, [pc, #228]	; (8009e88 <prvIPTask+0x160>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	601a      	str	r2, [r3, #0]
				prvProcessNetworkDownEvent();
 8009da6:	f000 fbe3 	bl	800a570 <prvProcessNetworkDownEvent>
				break;
 8009daa:	e05f      	b.n	8009e6c <prvIPTask+0x144>

			case eNetworkRxEvent:
				/* The network hardware driver has received a new packet.  A
				pointer to the received buffer is located in the pvData member
				of the received event structure. */
				prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 f884 	bl	8009ebc <prvHandleEthernetPacket>
				break;
 8009db4:	e05a      	b.n	8009e6c <prvIPTask+0x144>

			case eARPTimerEvent :
				/* The ARP timer has expired, process the ARP cache. */
				vARPAgeCache();
 8009db6:	f7fe fdff 	bl	80089b8 <vARPAgeCache>
				break;
 8009dba:	e057      	b.n	8009e6c <prvIPTask+0x144>
				/* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
				to a port. The port number is communicated in the socket field
				usLocalPort. vSocketBind() will actually bind the socket and the
				API will unblock as soon as the eSOCKET_BOUND event is
				triggered. */
				pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	61bb      	str	r3, [r7, #24]
				xAddress.sin_addr = 0u;	/* For the moment. */
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	60fb      	str	r3, [r7, #12]
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009dc8:	021b      	lsls	r3, r3, #8
 8009dca:	b21a      	sxth	r2, r3
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009dd0:	0a1b      	lsrs	r3, r3, #8
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	b21b      	sxth	r3, r3
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	b21b      	sxth	r3, r3
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	817b      	strh	r3, [r7, #10]
				pxSocket->usLocalPort = 0u;
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	2200      	movs	r2, #0
 8009de2:	849a      	strh	r2, [r3, #36]	; 0x24
				vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8009de4:	f107 0108 	add.w	r1, r7, #8
 8009de8:	2300      	movs	r3, #0
 8009dea:	2208      	movs	r2, #8
 8009dec:	69b8      	ldr	r0, [r7, #24]
 8009dee:	f001 fa39 	bl	800b264 <vSocketBind>

				/* Before 'eSocketBindEvent' was sent it was tested that
				( xEventGroup != NULL ) so it can be used now to wake up the
				user. */
				pxSocket->xEventBits |= eSOCKET_BOUND;
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f043 0210 	orr.w	r2, r3, #16
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	601a      	str	r2, [r3, #0]
				vSocketWakeUpUser( pxSocket );
 8009dfe:	69b8      	ldr	r0, [r7, #24]
 8009e00:	f001 fdbc 	bl	800b97c <vSocketWakeUpUser>
				break;
 8009e04:	e032      	b.n	8009e6c <prvIPTask+0x144>
			case eSocketCloseEvent :
				/* The user API FreeRTOS_closesocket() has sent a message to the
				IP-task to actually close a socket. This is handled in
				vSocketClose().  As the socket gets closed, there is no way to
				report back to the API, so the API won't wait for the result */
				vSocketClose( ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData ) );
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f001 fae1 	bl	800b3d0 <vSocketClose>
				break;
 8009e0e:	e02d      	b.n	8009e6c <prvIPTask+0x144>

			case eStackTxEvent :
				/* The network stack has generated a packet to send.  A
				pointer to the generated buffer is located in the pvData
				member of the received event structure. */
				vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f005 fcb2 	bl	800f77c <vProcessGeneratedUDPPacket>
				break;
 8009e18:	e028      	b.n	8009e6c <prvIPTask+0x144>

			case eDHCPEvent:
				/* The DHCP state machine needs processing. */
				#if( ipconfigUSE_DHCP == 1 )
				{
					vDHCPProcess( pdFALSE );
 8009e1a:	2000      	movs	r0, #0
 8009e1c:	f7fe feda 	bl	8008bd4 <vDHCPProcess>
				}
				#endif /* ipconfigUSE_DHCP */
				break;
 8009e20:	e024      	b.n	8009e6c <prvIPTask+0x144>
				/* FreeRTOS_select() has got unblocked by a socket event,
				vSocketSelect() will check which sockets actually have an event
				and update the socket field xSocketBits. */
				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
				{
					vSocketSelect( ( SocketSelect_t * ) ( xReceivedEvent.pvData ) );
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f001 ffc5 	bl	800bdb4 <vSocketSelect>
				}
				#endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
				break;
 8009e2a:	e01f      	b.n	8009e6c <prvIPTask+0x144>
			case eSocketSignalEvent :
				#if( ipconfigSUPPORT_SIGNALS != 0 )
				{
					/* Some task wants to signal the user of this socket in
					order to interrupt a call to recv() or a call to select(). */
					FreeRTOS_SignalSocket( ( Socket_t ) xReceivedEvent.pvData );
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f002 f8cc 	bl	800bfcc <FreeRTOS_SignalSocket>
				}
				#endif /* ipconfigSUPPORT_SIGNALS */
				break;
 8009e34:	e01a      	b.n	8009e6c <prvIPTask+0x144>
			case eTCPTimerEvent :
				#if( ipconfigUSE_TCP == 1 )
				{
					/* Simply mark the TCP timer as expired so it gets processed
					the next time prvCheckNetworkTimers() is called. */
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8009e36:	4a11      	ldr	r2, [pc, #68]	; (8009e7c <prvIPTask+0x154>)
 8009e38:	7813      	ldrb	r3, [r2, #0]
 8009e3a:	f043 0302 	orr.w	r3, r3, #2
 8009e3e:	7013      	strb	r3, [r2, #0]
				}
				#endif /* ipconfigUSE_TCP */
				break;
 8009e40:	e014      	b.n	8009e6c <prvIPTask+0x144>
				/* The API FreeRTOS_accept() was called, the IP-task will now
				check if the listening socket (communicated in pvData) actually
				received a new connection. */
				#if( ipconfigUSE_TCP == 1 )
				{
					pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	61bb      	str	r3, [r7, #24]

					if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8009e46:	69b8      	ldr	r0, [r7, #24]
 8009e48:	f004 fc96 	bl	800e778 <xTCPCheckNewClient>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00b      	beq.n	8009e6a <prvIPTask+0x142>
					{
						pxSocket->xEventBits |= eSOCKET_ACCEPT;
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f043 0204 	orr.w	r2, r3, #4
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	601a      	str	r2, [r3, #0]
						vSocketWakeUpUser( pxSocket );
 8009e5e:	69b8      	ldr	r0, [r7, #24]
 8009e60:	f001 fd8c 	bl	800b97c <vSocketWakeUpUser>
					}
				}
				#endif /* ipconfigUSE_TCP */
				break;
 8009e64:	e001      	b.n	8009e6a <prvIPTask+0x142>
				#endif /* ipconfigUSE_TCP */
				break;

			default :
				/* Should not get here. */
				break;
 8009e66:	bf00      	nop
 8009e68:	e000      	b.n	8009e6c <prvIPTask+0x144>
				break;
 8009e6a:	bf00      	nop
		}

		if( xNetworkDownEventPending != pdFALSE )
 8009e6c:	4b07      	ldr	r3, [pc, #28]	; (8009e8c <prvIPTask+0x164>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f43f af67 	beq.w	8009d44 <prvIPTask+0x1c>
		{
			/* A network down event could not be posted to the network event
			queue because the queue was full.  Try posting again. */
			FreeRTOS_NetworkDown();
 8009e76:	f000 f949 	bl	800a10c <FreeRTOS_NetworkDown>
		prvCheckNetworkTimers();
 8009e7a:	e763      	b.n	8009d44 <prvIPTask+0x1c>
 8009e7c:	200041f4 	.word	0x200041f4
 8009e80:	2000421c 	.word	0x2000421c
 8009e84:	2000418c 	.word	0x2000418c
 8009e88:	200041c8 	.word	0x200041c8
 8009e8c:	200041bc 	.word	0x200041bc

08009e90 <xIsCallingFromIPTask>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xIsCallingFromIPTask( void )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
BaseType_t xReturn;

	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 8009e96:	f7fe f831 	bl	8007efc <xTaskGetCurrentTaskHandle>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	4b06      	ldr	r3, [pc, #24]	; (8009eb8 <xIsCallingFromIPTask+0x28>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d102      	bne.n	8009eaa <xIsCallingFromIPTask+0x1a>
	{
		xReturn = pdTRUE;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	607b      	str	r3, [r7, #4]
 8009ea8:	e001      	b.n	8009eae <xIsCallingFromIPTask+0x1e>
	}
	else
	{
		xReturn = pdFALSE;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	607b      	str	r3, [r7, #4]
	}

	return xReturn;
 8009eae:	687b      	ldr	r3, [r7, #4]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	200041c0 	.word	0x200041c0

08009ebc <prvHandleEthernetPacket>:
/*-----------------------------------------------------------*/

static void prvHandleEthernetPacket( NetworkBufferDescriptor_t *pxBuffer )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
	#if( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
	{
		/* When ipconfigUSE_LINKED_RX_MESSAGES is not set to 0 then only one
		buffer will be sent at a time.  This is the default way for +TCP to pass
		messages from the MAC to the TCP/IP stack. */
		prvProcessEthernetPacket( pxBuffer );
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fb93 	bl	800a5f0 <prvProcessEthernetPacket>

		/* While there is another packet in the chain. */
		} while( pxBuffer != NULL );
	}
	#endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8009eca:	bf00      	nop
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
	...

08009ed4 <prvCalculateSleepTime>:
/*-----------------------------------------------------------*/

static TickType_t prvCalculateSleepTime( void )
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
TickType_t xMaximumSleepTime;

	/* Start with the maximum sleep time, then check this against the remaining
	time in any other timers that are active. */
	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 8009eda:	f242 7310 	movw	r3, #10000	; 0x2710
 8009ede:	607b      	str	r3, [r7, #4]

	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 8009ee0:	4b1d      	ldr	r3, [pc, #116]	; (8009f58 <prvCalculateSleepTime+0x84>)
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	f003 0301 	and.w	r3, r3, #1
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d007      	beq.n	8009efe <prvCalculateSleepTime+0x2a>
	{
		if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 8009eee:	4b1a      	ldr	r3, [pc, #104]	; (8009f58 <prvCalculateSleepTime+0x84>)
 8009ef0:	68da      	ldr	r2, [r3, #12]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d202      	bcs.n	8009efe <prvCalculateSleepTime+0x2a>
		{
			xMaximumSleepTime = xARPTimer.ulReloadTime;
 8009ef8:	4b17      	ldr	r3, [pc, #92]	; (8009f58 <prvCalculateSleepTime+0x84>)
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	607b      	str	r3, [r7, #4]
		}
	}

	#if( ipconfigUSE_DHCP == 1 )
	{
		if( xDHCPTimer.bActive != pdFALSE_UNSIGNED )
 8009efe:	4b17      	ldr	r3, [pc, #92]	; (8009f5c <prvCalculateSleepTime+0x88>)
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	f003 0301 	and.w	r3, r3, #1
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d007      	beq.n	8009f1c <prvCalculateSleepTime+0x48>
		{
			if( xDHCPTimer.ulRemainingTime < xMaximumSleepTime )
 8009f0c:	4b13      	ldr	r3, [pc, #76]	; (8009f5c <prvCalculateSleepTime+0x88>)
 8009f0e:	68da      	ldr	r2, [r3, #12]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d202      	bcs.n	8009f1c <prvCalculateSleepTime+0x48>
			{
				xMaximumSleepTime = xDHCPTimer.ulRemainingTime;
 8009f16:	4b11      	ldr	r3, [pc, #68]	; (8009f5c <prvCalculateSleepTime+0x88>)
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	607b      	str	r3, [r7, #4]
	}
	#endif /* ipconfigUSE_DHCP */

	#if( ipconfigUSE_TCP == 1 )
	{
		if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 8009f1c:	4b10      	ldr	r3, [pc, #64]	; (8009f60 <prvCalculateSleepTime+0x8c>)
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d202      	bcs.n	8009f2c <prvCalculateSleepTime+0x58>
		{
			xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 8009f26:	4b0e      	ldr	r3, [pc, #56]	; (8009f60 <prvCalculateSleepTime+0x8c>)
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	607b      	str	r3, [r7, #4]
	}
	#endif

	#if( ipconfigDNS_USE_CALLBACKS != 0 )
	{
		if( xDNSTimer.bActive != pdFALSE )
 8009f2c:	4b0d      	ldr	r3, [pc, #52]	; (8009f64 <prvCalculateSleepTime+0x90>)
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d007      	beq.n	8009f4a <prvCalculateSleepTime+0x76>
		{
			if( xDNSTimer.ulRemainingTime < xMaximumSleepTime )
 8009f3a:	4b0a      	ldr	r3, [pc, #40]	; (8009f64 <prvCalculateSleepTime+0x90>)
 8009f3c:	68da      	ldr	r2, [r3, #12]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d202      	bcs.n	8009f4a <prvCalculateSleepTime+0x76>
			{
				xMaximumSleepTime = xDNSTimer.ulRemainingTime;
 8009f44:	4b07      	ldr	r3, [pc, #28]	; (8009f64 <prvCalculateSleepTime+0x90>)
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	607b      	str	r3, [r7, #4]
			}
		}
	}
	#endif

	return xMaximumSleepTime;
 8009f4a:	687b      	ldr	r3, [r7, #4]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	200041cc 	.word	0x200041cc
 8009f5c:	200041e0 	.word	0x200041e0
 8009f60:	200041f4 	.word	0x200041f4
 8009f64:	20004208 	.word	0x20004208

08009f68 <prvCheckNetworkTimers>:
/*-----------------------------------------------------------*/

static void prvCheckNetworkTimers( void )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
	/* Is it time for ARP processing? */
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 8009f6e:	482d      	ldr	r0, [pc, #180]	; (800a024 <prvCheckNetworkTimers+0xbc>)
 8009f70:	f000 f89c 	bl	800a0ac <prvIPTimerCheck>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d002      	beq.n	8009f80 <prvCheckNetworkTimers+0x18>
	{
		xSendEventToIPTask( eARPTimerEvent );
 8009f7a:	2002      	movs	r0, #2
 8009f7c:	f000 fa48 	bl	800a410 <xSendEventToIPTask>
	}

	#if( ipconfigUSE_DHCP == 1 )
	{
		/* Is it time for DHCP processing? */
		if( prvIPTimerCheck( &xDHCPTimer ) != pdFALSE )
 8009f80:	4829      	ldr	r0, [pc, #164]	; (800a028 <prvCheckNetworkTimers+0xc0>)
 8009f82:	f000 f893 	bl	800a0ac <prvIPTimerCheck>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <prvCheckNetworkTimers+0x2a>
		{
			xSendEventToIPTask( eDHCPEvent );
 8009f8c:	2004      	movs	r0, #4
 8009f8e:	f000 fa3f 	bl	800a410 <xSendEventToIPTask>
	#if( ipconfigDNS_USE_CALLBACKS != 0 )
	{
	extern void vDNSCheckCallBack( void *pvSearchID );

		/* Is it time for DNS processing? */
		if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 8009f92:	4826      	ldr	r0, [pc, #152]	; (800a02c <prvCheckNetworkTimers+0xc4>)
 8009f94:	f000 f88a 	bl	800a0ac <prvIPTimerCheck>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d002      	beq.n	8009fa4 <prvCheckNetworkTimers+0x3c>
		{
			vDNSCheckCallBack( NULL );
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	f7ff fa6c 	bl	800947c <vDNSCheckCallBack>
	static TickType_t xStart = ( TickType_t ) 0;
	TickType_t xTimeNow, xNextTime;
	BaseType_t xCheckTCPSockets;
	extern uint32_t ulNextInitialSequenceNumber;

		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0u )
 8009fa4:	4b22      	ldr	r3, [pc, #136]	; (800a030 <prvCheckNetworkTimers+0xc8>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7fc ff6f 	bl	8006e8c <uxQueueMessagesWaiting>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d102      	bne.n	8009fba <prvCheckNetworkTimers+0x52>
		{
			xWillSleep = pdTRUE;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	60fb      	str	r3, [r7, #12]
 8009fb8:	e001      	b.n	8009fbe <prvCheckNetworkTimers+0x56>
		}
		else
		{
			xWillSleep = pdFALSE;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	60fb      	str	r3, [r7, #12]
		}

		xTimeNow = xTaskGetTickCount();
 8009fbe:	f7fd fbf5 	bl	80077ac <xTaskGetTickCount>
 8009fc2:	6078      	str	r0, [r7, #4]

		if( xStart != ( TickType_t ) 0 )
 8009fc4:	4b1b      	ldr	r3, [pc, #108]	; (800a034 <prvCheckNetworkTimers+0xcc>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d009      	beq.n	8009fe0 <prvCheckNetworkTimers+0x78>
		{
			/* It is advised to increment the Initial Sequence Number every 4
			microseconds which makes 250 times per ms.  This will make it harder
			for a third party to 'guess' our sequence number and 'take over'
			a TCP connection */
			ulNextInitialSequenceNumber += ipINITIAL_SEQUENCE_NUMBER_FACTOR * ( ( xTimeNow - xStart ) * portTICK_PERIOD_MS );
 8009fcc:	4b19      	ldr	r3, [pc, #100]	; (800a034 <prvCheckNetworkTimers+0xcc>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	021a      	lsls	r2, r3, #8
 8009fd6:	4b18      	ldr	r3, [pc, #96]	; (800a038 <prvCheckNetworkTimers+0xd0>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4413      	add	r3, r2
 8009fdc:	4a16      	ldr	r2, [pc, #88]	; (800a038 <prvCheckNetworkTimers+0xd0>)
 8009fde:	6013      	str	r3, [r2, #0]
		}

		xStart = xTimeNow;
 8009fe0:	4a14      	ldr	r2, [pc, #80]	; (800a034 <prvCheckNetworkTimers+0xcc>)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6013      	str	r3, [r2, #0]

		/* Sockets need to be checked if the TCP timer has expired. */
		xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 8009fe6:	4815      	ldr	r0, [pc, #84]	; (800a03c <prvCheckNetworkTimers+0xd4>)
 8009fe8:	f000 f860 	bl	800a0ac <prvIPTimerCheck>
 8009fec:	60b8      	str	r0, [r7, #8]

		/* Sockets will also be checked if there are TCP messages but the
		message queue is empty (indicated by xWillSleep being true). */
		if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 8009fee:	4b14      	ldr	r3, [pc, #80]	; (800a040 <prvCheckNetworkTimers+0xd8>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d004      	beq.n	800a000 <prvCheckNetworkTimers+0x98>
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <prvCheckNetworkTimers+0x98>
		{
			xCheckTCPSockets = pdTRUE;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	60bb      	str	r3, [r7, #8]
		}

		if( xCheckTCPSockets != pdFALSE )
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00a      	beq.n	800a01c <prvCheckNetworkTimers+0xb4>
		{
			/* Attend to the sockets, returning the period after which the
			check must be repeated. */
			xNextTime = xTCPTimerCheck( xWillSleep );
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f001 fcf4 	bl	800b9f4 <xTCPTimerCheck>
 800a00c:	6038      	str	r0, [r7, #0]
			prvIPTimerStart( &xTCPTimer, xNextTime );
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	480a      	ldr	r0, [pc, #40]	; (800a03c <prvCheckNetworkTimers+0xd4>)
 800a012:	f000 f817 	bl	800a044 <prvIPTimerStart>
			xProcessedTCPMessage = 0;
 800a016:	4b0a      	ldr	r3, [pc, #40]	; (800a040 <prvCheckNetworkTimers+0xd8>)
 800a018:	2200      	movs	r2, #0
 800a01a:	601a      	str	r2, [r3, #0]
		}
	}
	#endif /* ipconfigUSE_TCP == 1 */
}
 800a01c:	bf00      	nop
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	200041cc 	.word	0x200041cc
 800a028:	200041e0 	.word	0x200041e0
 800a02c:	20004208 	.word	0x20004208
 800a030:	2000418c 	.word	0x2000418c
 800a034:	20004220 	.word	0x20004220
 800a038:	20004230 	.word	0x20004230
 800a03c:	200041f4 	.word	0x200041f4
 800a040:	200041c4 	.word	0x200041c4

0800a044 <prvIPTimerStart>:
/*-----------------------------------------------------------*/

static void prvIPTimerStart( IPTimer_t *pxTimer, TickType_t xTime )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	3304      	adds	r3, #4
 800a052:	4618      	mov	r0, r3
 800a054:	f7fd fdf0 	bl	8007c38 <vTaskSetTimeOutState>
	pxTimer->ulRemainingTime = xTime;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	683a      	ldr	r2, [r7, #0]
 800a05c:	60da      	str	r2, [r3, #12]

	if( xTime == ( TickType_t ) 0 )
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d105      	bne.n	800a070 <prvIPTimerStart+0x2c>
	{
		pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	7813      	ldrb	r3, [r2, #0]
 800a068:	f043 0302 	orr.w	r3, r3, #2
 800a06c:	7013      	strb	r3, [r2, #0]
 800a06e:	e004      	b.n	800a07a <prvIPTimerStart+0x36>
	}
	else
	{
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	7813      	ldrb	r3, [r2, #0]
 800a074:	f36f 0341 	bfc	r3, #1, #1
 800a078:	7013      	strb	r3, [r2, #0]
	}

	pxTimer->bActive = pdTRUE_UNSIGNED;
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	7813      	ldrb	r3, [r2, #0]
 800a07e:	f043 0301 	orr.w	r3, r3, #1
 800a082:	7013      	strb	r3, [r2, #0]
}
 800a084:	bf00      	nop
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <prvIPTimerReload>:
/*-----------------------------------------------------------*/

static void prvIPTimerReload( IPTimer_t *pxTimer, TickType_t xTime )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
	pxTimer->ulReloadTime = xTime;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	611a      	str	r2, [r3, #16]
	prvIPTimerStart( pxTimer, xTime );
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f7ff ffd0 	bl	800a044 <prvIPTimerStart>
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <prvIPTimerCheck>:
/*-----------------------------------------------------------*/

static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	f003 0301 	and.w	r3, r3, #1
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d102      	bne.n	800a0c8 <prvIPTimerCheck+0x1c>
	{
		/* The timer is not enabled. */
		xReturn = pdFALSE;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	60fb      	str	r3, [r7, #12]
 800a0c6:	e01c      	b.n	800a102 <prvIPTimerCheck+0x56>
	}
	else
	{
		/* The timer might have set the bExpired flag already, if not, check the
		value of xTimeOut against ulRemainingTime. */
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	f003 0302 	and.w	r3, r3, #2
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10a      	bne.n	800a0ec <prvIPTimerCheck+0x40>
			( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE ) )
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	1d1a      	adds	r2, r3, #4
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	330c      	adds	r3, #12
 800a0de:	4619      	mov	r1, r3
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	f7fd fde5 	bl	8007cb0 <xTaskCheckForTimeOut>
 800a0e6:	4603      	mov	r3, r0
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d008      	beq.n	800a0fe <prvIPTimerCheck+0x52>
		{
			prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7ff ffa6 	bl	800a044 <prvIPTimerStart>
			xReturn = pdTRUE;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	60fb      	str	r3, [r7, #12]
 800a0fc:	e001      	b.n	800a102 <prvIPTimerCheck+0x56>
		}
		else
		{
			xReturn = pdFALSE;
 800a0fe:	2300      	movs	r3, #0
 800a100:	60fb      	str	r3, [r7, #12]
		}
	}

	return xReturn;
 800a102:	68fb      	ldr	r3, [r7, #12]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <FreeRTOS_NetworkDown>:
/*-----------------------------------------------------------*/

void FreeRTOS_NetworkDown( void )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
const TickType_t xDontBlock = ( TickType_t ) 0;
 800a112:	2300      	movs	r3, #0
 800a114:	607b      	str	r3, [r7, #4]

	/* Simply send the network task the appropriate event. */
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 800a116:	6879      	ldr	r1, [r7, #4]
 800a118:	4808      	ldr	r0, [pc, #32]	; (800a13c <FreeRTOS_NetworkDown+0x30>)
 800a11a:	f000 f98f 	bl	800a43c <xSendEventStructToIPTask>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b01      	cmp	r3, #1
 800a122:	d003      	beq.n	800a12c <FreeRTOS_NetworkDown+0x20>
	{
		/* Could not send the message, so it is still pending. */
		xNetworkDownEventPending = pdTRUE;
 800a124:	4b06      	ldr	r3, [pc, #24]	; (800a140 <FreeRTOS_NetworkDown+0x34>)
 800a126:	2201      	movs	r2, #1
 800a128:	601a      	str	r2, [r3, #0]
		/* Message was sent so it is not pending. */
		xNetworkDownEventPending = pdFALSE;
	}

	iptraceNETWORK_DOWN();
}
 800a12a:	e002      	b.n	800a132 <FreeRTOS_NetworkDown+0x26>
		xNetworkDownEventPending = pdFALSE;
 800a12c:	4b04      	ldr	r3, [pc, #16]	; (800a140 <FreeRTOS_NetworkDown+0x34>)
 800a12e:	2200      	movs	r2, #0
 800a130:	601a      	str	r2, [r3, #0]
}
 800a132:	bf00      	nop
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	08010f8c 	.word	0x08010f8c
 800a140:	200041bc 	.word	0x200041bc

0800a144 <FreeRTOS_GetUDPPayloadBuffer>:
	return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void *FreeRTOS_GetUDPPayloadBuffer( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
void *pvReturn;

	/* Cap the block time.  The reason for this is explained where
	ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined (assuming an official
	FreeRTOSIPConfig.h header file is being used). */
	if( xBlockTimeTicks > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	f241 3288 	movw	r2, #5000	; 0x1388
 800a154:	4293      	cmp	r3, r2
 800a156:	d902      	bls.n	800a15e <FreeRTOS_GetUDPPayloadBuffer+0x1a>
	{
		xBlockTimeTicks = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800a158:	f241 3388 	movw	r3, #5000	; 0x1388
 800a15c:	603b      	str	r3, [r7, #0]
	}

	/* Obtain a network buffer with the required amount of storage. */
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( UDPPacket_t ) + xRequestedSizeBytes, xBlockTimeTicks );
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	332a      	adds	r3, #42	; 0x2a
 800a162:	6839      	ldr	r1, [r7, #0]
 800a164:	4618      	mov	r0, r3
 800a166:	f005 fce1 	bl	800fb2c <pxGetNetworkBufferWithDescriptor>
 800a16a:	60b8      	str	r0, [r7, #8]

	if( pxNetworkBuffer != NULL )
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d004      	beq.n	800a17c <FreeRTOS_GetUDPPayloadBuffer+0x38>
	{
		/* Leave space for the UPD header. */
		pvReturn = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	332a      	adds	r3, #42	; 0x2a
 800a178:	60fb      	str	r3, [r7, #12]
 800a17a:	e001      	b.n	800a180 <FreeRTOS_GetUDPPayloadBuffer+0x3c>
	}
	else
	{
		pvReturn = NULL;
 800a17c:	2300      	movs	r3, #0
 800a17e:	60fb      	str	r3, [r7, #12]
	}

	return ( void * ) pvReturn;
 800a180:	68fb      	ldr	r3, [r7, #12]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <pxDuplicateNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxDuplicateNetworkBufferWithDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer,
	BaseType_t xNewLength )
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b084      	sub	sp, #16
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	6039      	str	r1, [r7, #0]
NetworkBufferDescriptor_t * pxNewBuffer;

	/* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
	The transmit routine wants to have ownership of the network buffer
	descriptor, because it will pass the buffer straight to DMA. */
	pxNewBuffer = pxGetNetworkBufferWithDescriptor( ( size_t ) xNewLength, ( TickType_t ) 0 );
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	2100      	movs	r1, #0
 800a198:	4618      	mov	r0, r3
 800a19a:	f005 fcc7 	bl	800fb2c <pxGetNetworkBufferWithDescriptor>
 800a19e:	60f8      	str	r0, [r7, #12]

	if( pxNewBuffer != NULL )
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d014      	beq.n	800a1d0 <pxDuplicateNetworkBufferWithDescriptor+0x46>
	{
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	695a      	ldr	r2, [r3, #20]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	615a      	str	r2, [r3, #20]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	8c1a      	ldrh	r2, [r3, #32]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	841a      	strh	r2, [r3, #32]
		pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	845a      	strh	r2, [r3, #34]	; 0x22
		memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6998      	ldr	r0, [r3, #24]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6999      	ldr	r1, [r3, #24]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	69db      	ldr	r3, [r3, #28]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	f006 fc8f 	bl	8010aee <memcpy>
	}

	return pxNewBuffer;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <pxUDPPayloadBuffer_to_NetworkBuffer>:

#endif /* ipconfigZERO_COPY_TX_DRIVER != 0 */
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxUDPPayloadBuffer_to_NetworkBuffer( void *pvBuffer )
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b085      	sub	sp, #20
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
uint8_t *pucBuffer;
NetworkBufferDescriptor_t *pxResult;

	if( pvBuffer == NULL )
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d102      	bne.n	800a1ee <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
	{
		pxResult = NULL;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	60fb      	str	r3, [r7, #12]
 800a1ec:	e00f      	b.n	800a20e <pxUDPPayloadBuffer_to_NetworkBuffer+0x34>
	}
	else
	{
		/* Obtain the network buffer from the zero copy pointer. */
		pucBuffer = ( uint8_t * ) pvBuffer;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	60bb      	str	r3, [r7, #8]

		/* The input here is a pointer to a payload buffer.  Subtract
		the total size of a UDP/IP header plus the size of the header in
		the network buffer, usually 8 + 2 bytes. */
		pucBuffer -= ( sizeof( UDPPacket_t ) + ipBUFFER_PADDING );
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	3b34      	subs	r3, #52	; 0x34
 800a1f6:	60bb      	str	r3, [r7, #8]

		/* Here a pointer was placed to the network descriptor,
		As a pointer is dereferenced, make sure it is well aligned */
		if( ( ( ( uint32_t ) pucBuffer ) & ( sizeof( pucBuffer ) - 1 ) ) == 0 )
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	f003 0303 	and.w	r3, r3, #3
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d103      	bne.n	800a20a <pxUDPPayloadBuffer_to_NetworkBuffer+0x30>
		{
			/* The following statement may trigger a:
			warning: cast increases required alignment of target type [-Wcast-align].
			It has been confirmed though that the alignment is suitable. */
			pxResult = * ( ( NetworkBufferDescriptor_t ** ) pucBuffer );
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	60fb      	str	r3, [r7, #12]
 800a208:	e001      	b.n	800a20e <pxUDPPayloadBuffer_to_NetworkBuffer+0x34>
		}
		else
		{
			pxResult = NULL;
 800a20a:	2300      	movs	r3, #0
 800a20c:	60fb      	str	r3, [r7, #12]
		}
	}

	return pxResult;
 800a20e:	68fb      	ldr	r3, [r7, #12]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3714      	adds	r7, #20
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <FreeRTOS_ReleaseUDPPayloadBuffer>:
/*-----------------------------------------------------------*/

void FreeRTOS_ReleaseUDPPayloadBuffer( void *pvBuffer )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
	vReleaseNetworkBufferAndDescriptor( pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer ) );
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f7ff ffd8 	bl	800a1da <pxUDPPayloadBuffer_to_NetworkBuffer>
 800a22a:	4603      	mov	r3, r0
 800a22c:	4618      	mov	r0, r3
 800a22e:	f005 fcf5 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
}
 800a232:	bf00      	nop
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
	...

0800a23c <FreeRTOS_IPInit>:
/*_RB_ Should we add an error or assert if the task priorities are set such that the servers won't function as expected? */
/*_HT_ There was a bug in FreeRTOS_TCP_IP.c that only occurred when the applications' priority was too high.
 As that bug has been repaired, there is not an urgent reason to warn.
 It is better though to use the advised priority scheme. */
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 800a23c:	b5b0      	push	{r4, r5, r7, lr}
 800a23e:	b08c      	sub	sp, #48	; 0x30
 800a240:	af02      	add	r7, sp, #8
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFALSE;
 800a24a:	2300      	movs	r3, #0
 800a24c:	627b      	str	r3, [r7, #36]	; 0x24

	/* This function should only be called once. */
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800a24e:	f000 fc2b 	bl	800aaa8 <xIPIsNetworkTaskReady>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d009      	beq.n	800a26c <FreeRTOS_IPInit+0x30>
	__asm volatile
 800a258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	623b      	str	r3, [r7, #32]
 800a26a:	e7fe      	b.n	800a26a <FreeRTOS_IPInit+0x2e>
	configASSERT( xNetworkEventQueue == NULL );
 800a26c:	4b60      	ldr	r3, [pc, #384]	; (800a3f0 <FreeRTOS_IPInit+0x1b4>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d009      	beq.n	800a288 <FreeRTOS_IPInit+0x4c>
 800a274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	61fb      	str	r3, [r7, #28]
 800a286:	e7fe      	b.n	800a286 <FreeRTOS_IPInit+0x4a>
	configASSERT( xIPTaskHandle == NULL );
 800a288:	4b5a      	ldr	r3, [pc, #360]	; (800a3f4 <FreeRTOS_IPInit+0x1b8>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d009      	beq.n	800a2a4 <FreeRTOS_IPInit+0x68>
 800a290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	61bb      	str	r3, [r7, #24]
 800a2a2:	e7fe      	b.n	800a2a2 <FreeRTOS_IPInit+0x66>
	configASSERT( sizeof( IPHeader_t ) == ipEXPECTED_IPHeader_t_SIZE );
	configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
	configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );

	/* Attempt to create the queue used to communicate with the IP task. */
	xNetworkEventQueue = xQueueCreate( ( UBaseType_t ) ipconfigEVENT_QUEUE_LENGTH, ( UBaseType_t ) sizeof( IPStackEvent_t ) );
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2108      	movs	r1, #8
 800a2a8:	201e      	movs	r0, #30
 800a2aa:	f7fc fa87 	bl	80067bc <xQueueGenericCreate>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	4b4f      	ldr	r3, [pc, #316]	; (800a3f0 <FreeRTOS_IPInit+0x1b4>)
 800a2b2:	601a      	str	r2, [r3, #0]
	configASSERT( xNetworkEventQueue );
 800a2b4:	4b4e      	ldr	r3, [pc, #312]	; (800a3f0 <FreeRTOS_IPInit+0x1b4>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d109      	bne.n	800a2d0 <FreeRTOS_IPInit+0x94>
 800a2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c0:	f383 8811 	msr	BASEPRI, r3
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	617b      	str	r3, [r7, #20]
 800a2ce:	e7fe      	b.n	800a2ce <FreeRTOS_IPInit+0x92>

	if( xNetworkEventQueue != NULL )
 800a2d0:	4b47      	ldr	r3, [pc, #284]	; (800a3f0 <FreeRTOS_IPInit+0x1b4>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f000 8086 	beq.w	800a3e6 <FreeRTOS_IPInit+0x1aa>
		#if ( configQUEUE_REGISTRY_SIZE > 0 )
		{
			/* A queue registry is normally used to assist a kernel aware
			debugger.  If one is in use then it will be helpful for the debugger
			to show information about the network event queue. */
			vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 800a2da:	4b45      	ldr	r3, [pc, #276]	; (800a3f0 <FreeRTOS_IPInit+0x1b4>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4946      	ldr	r1, [pc, #280]	; (800a3f8 <FreeRTOS_IPInit+0x1bc>)
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fc ff35 	bl	8007150 <vQueueAddToRegistry>
		}
		#endif /* configQUEUE_REGISTRY_SIZE */

		if( xNetworkBuffersInitialise() == pdPASS )
 800a2e6:	f005 fb93 	bl	800fa10 <xNetworkBuffersInitialise>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d172      	bne.n	800a3d6 <FreeRTOS_IPInit+0x19a>
		{
			/* Store the local IP and MAC address. */
			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	3303      	adds	r3, #3
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	061a      	lsls	r2, r3, #24
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3302      	adds	r3, #2
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	041b      	lsls	r3, r3, #16
 800a300:	431a      	orrs	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	3301      	adds	r3, #1
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	021b      	lsls	r3, r3, #8
 800a30a:	4313      	orrs	r3, r2
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	7812      	ldrb	r2, [r2, #0]
 800a310:	4313      	orrs	r3, r2
 800a312:	4a3a      	ldr	r2, [pc, #232]	; (800a3fc <FreeRTOS_IPInit+0x1c0>)
 800a314:	6013      	str	r3, [r2, #0]
			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	3303      	adds	r3, #3
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	061a      	lsls	r2, r3, #24
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	3302      	adds	r3, #2
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	041b      	lsls	r3, r3, #16
 800a326:	431a      	orrs	r2, r3
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	3301      	adds	r3, #1
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	021b      	lsls	r3, r3, #8
 800a330:	4313      	orrs	r3, r2
 800a332:	68ba      	ldr	r2, [r7, #8]
 800a334:	7812      	ldrb	r2, [r2, #0]
 800a336:	4313      	orrs	r3, r2
 800a338:	4a30      	ldr	r2, [pc, #192]	; (800a3fc <FreeRTOS_IPInit+0x1c0>)
 800a33a:	6053      	str	r3, [r2, #4]
			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	3303      	adds	r3, #3
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	061a      	lsls	r2, r3, #24
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	3302      	adds	r3, #2
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	041b      	lsls	r3, r3, #16
 800a34c:	431a      	orrs	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	3301      	adds	r3, #1
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	021b      	lsls	r3, r3, #8
 800a356:	4313      	orrs	r3, r2
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	7812      	ldrb	r2, [r2, #0]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	4a27      	ldr	r2, [pc, #156]	; (800a3fc <FreeRTOS_IPInit+0x1c0>)
 800a360:	6093      	str	r3, [r2, #8]
			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	3303      	adds	r3, #3
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	061a      	lsls	r2, r3, #24
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	3302      	adds	r3, #2
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	041b      	lsls	r3, r3, #16
 800a372:	431a      	orrs	r2, r3
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	3301      	adds	r3, #1
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	021b      	lsls	r3, r3, #8
 800a37c:	4313      	orrs	r3, r2
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	7812      	ldrb	r2, [r2, #0]
 800a382:	4313      	orrs	r3, r2
 800a384:	4a1d      	ldr	r2, [pc, #116]	; (800a3fc <FreeRTOS_IPInit+0x1c0>)
 800a386:	60d3      	str	r3, [r2, #12]
			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
 800a388:	4b1c      	ldr	r3, [pc, #112]	; (800a3fc <FreeRTOS_IPInit+0x1c0>)
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	4b1b      	ldr	r3, [pc, #108]	; (800a3fc <FreeRTOS_IPInit+0x1c0>)
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	43db      	mvns	r3, r3
 800a392:	4313      	orrs	r3, r2
 800a394:	4a19      	ldr	r2, [pc, #100]	; (800a3fc <FreeRTOS_IPInit+0x1c0>)
 800a396:	6113      	str	r3, [r2, #16]

			memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 800a398:	4a19      	ldr	r2, [pc, #100]	; (800a400 <FreeRTOS_IPInit+0x1c4>)
 800a39a:	4b18      	ldr	r3, [pc, #96]	; (800a3fc <FreeRTOS_IPInit+0x1c0>)
 800a39c:	4614      	mov	r4, r2
 800a39e:	461d      	mov	r5, r3
 800a3a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3a4:	682b      	ldr	r3, [r5, #0]
 800a3a6:	6023      	str	r3, [r4, #0]

			#if ipconfigUSE_DHCP == 1
			{
				/* The IP address is not set until DHCP completes. */
				*ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
 800a3a8:	4b16      	ldr	r3, [pc, #88]	; (800a404 <FreeRTOS_IPInit+0x1c8>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	615a      	str	r2, [r3, #20]
			}
			#endif /* ipconfigUSE_DHCP == 1 */

			/* The MAC address is stored in the start of the default packet
			header fragment, which is used when sending UDP packets. */
			memcpy( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800a3ae:	2206      	movs	r2, #6
 800a3b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3b2:	4814      	ldr	r0, [pc, #80]	; (800a404 <FreeRTOS_IPInit+0x1c8>)
 800a3b4:	f006 fb9b 	bl	8010aee <memcpy>

			/* Prepare the sockets interface. */
			vNetworkSocketsInit();
 800a3b8:	f000 fc4c 	bl	800ac54 <vNetworkSocketsInit>

			/* Create the task that processes Ethernet and stack events. */
			xReturn = xTaskCreate( prvIPTask, "IP-task", ( uint16_t ) ipconfigIP_TASK_STACK_SIZE_WORDS, NULL, ( UBaseType_t ) ipconfigIP_TASK_PRIORITY, &xIPTaskHandle );
 800a3bc:	4b0d      	ldr	r3, [pc, #52]	; (800a3f4 <FreeRTOS_IPInit+0x1b8>)
 800a3be:	9301      	str	r3, [sp, #4]
 800a3c0:	2305      	movs	r3, #5
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a3ca:	490f      	ldr	r1, [pc, #60]	; (800a408 <FreeRTOS_IPInit+0x1cc>)
 800a3cc:	480f      	ldr	r0, [pc, #60]	; (800a40c <FreeRTOS_IPInit+0x1d0>)
 800a3ce:	f7fc ff11 	bl	80071f4 <xTaskCreate>
 800a3d2:	6278      	str	r0, [r7, #36]	; 0x24
 800a3d4:	e007      	b.n	800a3e6 <FreeRTOS_IPInit+0x1aa>
		else
		{
			FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n") );

			/* Clean up. */
			vQueueDelete( xNetworkEventQueue );
 800a3d6:	4b06      	ldr	r3, [pc, #24]	; (800a3f0 <FreeRTOS_IPInit+0x1b4>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fc fd73 	bl	8006ec6 <vQueueDelete>
			xNetworkEventQueue = NULL;
 800a3e0:	4b03      	ldr	r3, [pc, #12]	; (800a3f0 <FreeRTOS_IPInit+0x1b4>)
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	601a      	str	r2, [r3, #0]
	else
	{
		FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n") );
	}

	return xReturn;
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3728      	adds	r7, #40	; 0x28
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bdb0      	pop	{r4, r5, r7, pc}
 800a3f0:	2000418c 	.word	0x2000418c
 800a3f4:	200041c0 	.word	0x200041c0
 800a3f8:	08010dec 	.word	0x08010dec
 800a3fc:	20004194 	.word	0x20004194
 800a400:	200041a8 	.word	0x200041a8
 800a404:	200000a0 	.word	0x200000a0
 800a408:	08010df4 	.word	0x08010df4
 800a40c:	08009d29 	.word	0x08009d29

0800a410 <xSendEventToIPTask>:

#endif /* ipconfigSUPPORT_OUTGOING_PINGS == 1 */
/*-----------------------------------------------------------*/

BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	4603      	mov	r3, r0
 800a418:	71fb      	strb	r3, [r7, #7]
IPStackEvent_t xEventMessage;
const TickType_t xDontBlock = ( TickType_t ) 0;
 800a41a:	2300      	movs	r3, #0
 800a41c:	617b      	str	r3, [r7, #20]

	xEventMessage.eEventType = eEvent;
 800a41e:	79fb      	ldrb	r3, [r7, #7]
 800a420:	733b      	strb	r3, [r7, #12]
	xEventMessage.pvData = ( void* )NULL;
 800a422:	2300      	movs	r3, #0
 800a424:	613b      	str	r3, [r7, #16]

	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 800a426:	f107 030c 	add.w	r3, r7, #12
 800a42a:	6979      	ldr	r1, [r7, #20]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f000 f805 	bl	800a43c <xSendEventStructToIPTask>
 800a432:	4603      	mov	r3, r0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <xSendEventStructToIPTask>:
/*-----------------------------------------------------------*/

BaseType_t xSendEventStructToIPTask( const IPStackEvent_t *pxEvent, TickType_t xTimeout )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
BaseType_t xReturn, xSendMessage;

	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 800a446:	f000 fb2f 	bl	800aaa8 <xIPIsNetworkTaskReady>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d107      	bne.n	800a460 <xSendEventStructToIPTask+0x24>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f993 3000 	ldrsb.w	r3, [r3]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d002      	beq.n	800a460 <xSendEventStructToIPTask+0x24>
	{
		/* Only allow eNetworkDownEvent events if the IP task is not ready
		yet.  Not going to attempt to send the message so the send failed. */
		xReturn = pdFAIL;
 800a45a:	2300      	movs	r3, #0
 800a45c:	60fb      	str	r3, [r7, #12]
 800a45e:	e02d      	b.n	800a4bc <xSendEventStructToIPTask+0x80>
	}
	else
	{
		xSendMessage = pdTRUE;
 800a460:	2301      	movs	r3, #1
 800a462:	60bb      	str	r3, [r7, #8]

		#if( ipconfigUSE_TCP == 1 )
		{
			if( pxEvent->eEventType == eTCPTimerEvent )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f993 3000 	ldrsb.w	r3, [r3]
 800a46a:	2b05      	cmp	r3, #5
 800a46c:	d10e      	bne.n	800a48c <xSendEventStructToIPTask+0x50>
			{
				/* TCP timer events are sent to wake the timer task when
				xTCPTimer has expired, but there is no point sending them if the
				IP task is already awake processing other message. */
				xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800a46e:	4a16      	ldr	r2, [pc, #88]	; (800a4c8 <xSendEventStructToIPTask+0x8c>)
 800a470:	7813      	ldrb	r3, [r2, #0]
 800a472:	f043 0302 	orr.w	r3, r3, #2
 800a476:	7013      	strb	r3, [r2, #0]

				if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0u )
 800a478:	4b14      	ldr	r3, [pc, #80]	; (800a4cc <xSendEventStructToIPTask+0x90>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fc fd05 	bl	8006e8c <uxQueueMessagesWaiting>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <xSendEventStructToIPTask+0x50>
				{
					/* Not actually going to send the message but this is not a
					failure as the message didn't need to be sent. */
					xSendMessage = pdFALSE;
 800a488:	2300      	movs	r3, #0
 800a48a:	60bb      	str	r3, [r7, #8]
				}
			}
		}
		#endif /* ipconfigUSE_TCP */

		if( xSendMessage != pdFALSE )
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d012      	beq.n	800a4b8 <xSendEventStructToIPTask+0x7c>
		{
			/* The IP task cannot block itself while waiting for itself to
			respond. */
			if( ( xIsCallingFromIPTask() == pdTRUE ) && ( xTimeout > ( TickType_t ) 0 ) )
 800a492:	f7ff fcfd 	bl	8009e90 <xIsCallingFromIPTask>
 800a496:	4603      	mov	r3, r0
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d104      	bne.n	800a4a6 <xSendEventStructToIPTask+0x6a>
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d001      	beq.n	800a4a6 <xSendEventStructToIPTask+0x6a>
			{
				xTimeout = ( TickType_t ) 0;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	603b      	str	r3, [r7, #0]
			}

			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, xTimeout );
 800a4a6:	4b09      	ldr	r3, [pc, #36]	; (800a4cc <xSendEventStructToIPTask+0x90>)
 800a4a8:	6818      	ldr	r0, [r3, #0]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	6879      	ldr	r1, [r7, #4]
 800a4b0:	f7fc fa0e 	bl	80068d0 <xQueueGenericSend>
 800a4b4:	60f8      	str	r0, [r7, #12]
 800a4b6:	e001      	b.n	800a4bc <xSendEventStructToIPTask+0x80>
		}
		else
		{
			/* It was not necessary to send the message to process the event so
			even though the message was not sent the call was successful. */
			xReturn = pdPASS;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	60fb      	str	r3, [r7, #12]
		}
	}

	return xReturn;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	200041f4 	.word	0x200041f4
 800a4cc:	2000418c 	.word	0x2000418c

0800a4d0 <eConsiderFrameForProcessing>:
/*-----------------------------------------------------------*/

eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
eFrameProcessingResult_t eReturn;
const EthernetHeader_t *pxEthernetHeader;

	pxEthernetHeader = ( const EthernetHeader_t * ) pucEthernetBuffer;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	613b      	str	r3, [r7, #16]

	if( memcmp( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) &( pxEthernetHeader->xDestinationAddress ), sizeof( MACAddress_t ) ) == 0 )
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	2206      	movs	r2, #6
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	4820      	ldr	r0, [pc, #128]	; (800a564 <eConsiderFrameForProcessing+0x94>)
 800a4e4:	f006 faf4 	bl	8010ad0 <memcmp>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d102      	bne.n	800a4f4 <eConsiderFrameForProcessing+0x24>
	{
		/* The packet was directed to this node directly - process it. */
		eReturn = eProcessBuffer;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	75fb      	strb	r3, [r7, #23]
 800a4f2:	e019      	b.n	800a528 <eConsiderFrameForProcessing+0x58>
	}
	else if( memcmp( ( void * ) xBroadcastMACAddress.ucBytes, ( void * ) pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	2206      	movs	r2, #6
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	481b      	ldr	r0, [pc, #108]	; (800a568 <eConsiderFrameForProcessing+0x98>)
 800a4fc:	f006 fae8 	bl	8010ad0 <memcmp>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d102      	bne.n	800a50c <eConsiderFrameForProcessing+0x3c>
	{
		/* The packet was a broadcast - process it. */
		eReturn = eProcessBuffer;
 800a506:	2301      	movs	r3, #1
 800a508:	75fb      	strb	r3, [r7, #23]
 800a50a:	e00d      	b.n	800a528 <eConsiderFrameForProcessing+0x58>
	}
	else
#if( ipconfigUSE_LLMNR == 1 )
	if( memcmp( ( void * ) xLLMNR_MacAdress.ucBytes, ( void * ) pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	2206      	movs	r2, #6
 800a510:	4619      	mov	r1, r3
 800a512:	4816      	ldr	r0, [pc, #88]	; (800a56c <eConsiderFrameForProcessing+0x9c>)
 800a514:	f006 fadc 	bl	8010ad0 <memcmp>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d102      	bne.n	800a524 <eConsiderFrameForProcessing+0x54>
	{
		/* The packet is a request for LLMNR - process it. */
		eReturn = eProcessBuffer;
 800a51e:	2301      	movs	r3, #1
 800a520:	75fb      	strb	r3, [r7, #23]
 800a522:	e001      	b.n	800a528 <eConsiderFrameForProcessing+0x58>
	else
#endif /* ipconfigUSE_LLMNR */
	{
		/* The packet was not a broadcast, or for this node, just release
		the buffer without taking any other action. */
		eReturn = eReleaseBuffer;
 800a524:	2300      	movs	r3, #0
 800a526:	75fb      	strb	r3, [r7, #23]

	#if( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
	{
	uint16_t usFrameType;

		if( eReturn == eProcessBuffer )
 800a528:	7dfb      	ldrb	r3, [r7, #23]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d115      	bne.n	800a55a <eConsiderFrameForProcessing+0x8a>
		{
			usFrameType = pxEthernetHeader->usFrameType;
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	7b1a      	ldrb	r2, [r3, #12]
 800a532:	7b5b      	ldrb	r3, [r3, #13]
 800a534:	021b      	lsls	r3, r3, #8
 800a536:	4313      	orrs	r3, r2
 800a538:	81fb      	strh	r3, [r7, #14]
			usFrameType = FreeRTOS_ntohs( usFrameType );
 800a53a:	89fb      	ldrh	r3, [r7, #14]
 800a53c:	021b      	lsls	r3, r3, #8
 800a53e:	b21a      	sxth	r2, r3
 800a540:	89fb      	ldrh	r3, [r7, #14]
 800a542:	0a1b      	lsrs	r3, r3, #8
 800a544:	b29b      	uxth	r3, r3
 800a546:	b21b      	sxth	r3, r3
 800a548:	4313      	orrs	r3, r2
 800a54a:	b21b      	sxth	r3, r3
 800a54c:	81fb      	strh	r3, [r7, #14]

			if( usFrameType <= 0x600U )
 800a54e:	89fb      	ldrh	r3, [r7, #14]
 800a550:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a554:	d801      	bhi.n	800a55a <eConsiderFrameForProcessing+0x8a>
			{
				/* Not an Ethernet II frame. */
				eReturn = eReleaseBuffer;
 800a556:	2300      	movs	r3, #0
 800a558:	75fb      	strb	r3, [r7, #23]
			}
		}
	}
	#endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

	return eReturn;
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3718      	adds	r7, #24
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	200000a0 	.word	0x200000a0
 800a568:	08010f84 	.word	0x08010f84
 800a56c:	08010f7c 	.word	0x08010f7c

0800a570 <prvProcessNetworkDownEvent>:
/*-----------------------------------------------------------*/

static void prvProcessNetworkDownEvent( void )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	af00      	add	r7, sp, #0
	/* Stop the ARP timer while there is no network. */
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 800a574:	4a11      	ldr	r2, [pc, #68]	; (800a5bc <prvProcessNetworkDownEvent+0x4c>)
 800a576:	7813      	ldrb	r3, [r2, #0]
 800a578:	f36f 0300 	bfc	r3, #0, #1
 800a57c:	7013      	strb	r3, [r2, #0]
		static BaseType_t xCallEventHook = pdFALSE;

		/* The first network down event is generated by the IP stack itself to
		initialise the network hardware, so do not call the network down event
		the first time through. */
		if( xCallEventHook == pdTRUE )
 800a57e:	4b10      	ldr	r3, [pc, #64]	; (800a5c0 <prvProcessNetworkDownEvent+0x50>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b01      	cmp	r3, #1
 800a584:	d102      	bne.n	800a58c <prvProcessNetworkDownEvent+0x1c>
		{
			vApplicationIPNetworkEventHook( eNetworkDown );
 800a586:	2001      	movs	r0, #1
 800a588:	f005 fbdc 	bl	800fd44 <vApplicationIPNetworkEventHook>
		}
		xCallEventHook = pdTRUE;
 800a58c:	4b0c      	ldr	r3, [pc, #48]	; (800a5c0 <prvProcessNetworkDownEvent+0x50>)
 800a58e:	2201      	movs	r2, #1
 800a590:	601a      	str	r2, [r3, #0]
	#endif

	/* The network has been disconnected (or is being initialised for the first
	time).  Perform whatever hardware processing is necessary to bring it up
	again, or wait for it to be available again.  This is hardware dependent. */
	if( xNetworkInterfaceInitialise() != pdPASS )
 800a592:	f7fa f951 	bl	8004838 <xNetworkInterfaceInitialise>
 800a596:	4603      	mov	r3, r0
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d006      	beq.n	800a5aa <prvProcessNetworkDownEvent+0x3a>
	{
		/* Ideally the network interface initialisation function will only
		return when the network is available.  In case this is not the case,
		wait a while before retrying the initialisation. */
		vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 800a59c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a5a0:	f7fc ffe0 	bl	8007564 <vTaskDelay>
		FreeRTOS_NetworkDown();
 800a5a4:	f7ff fdb2 	bl	800a10c <FreeRTOS_NetworkDown>
			/* Perform any necessary 'network up' processing. */
			vIPNetworkUpCalls();
		}
		#endif
	}
}
 800a5a8:	e005      	b.n	800a5b6 <prvProcessNetworkDownEvent+0x46>
			vDHCPProcess( pdTRUE );
 800a5aa:	2001      	movs	r0, #1
 800a5ac:	f7fe fb12 	bl	8008bd4 <vDHCPProcess>
			xSendEventToIPTask( eDHCPEvent );
 800a5b0:	2004      	movs	r0, #4
 800a5b2:	f7ff ff2d 	bl	800a410 <xSendEventToIPTask>
}
 800a5b6:	bf00      	nop
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	200041cc 	.word	0x200041cc
 800a5c0:	20004224 	.word	0x20004224

0800a5c4 <vIPNetworkUpCalls>:
/*-----------------------------------------------------------*/

void vIPNetworkUpCalls( void )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	af00      	add	r7, sp, #0
	xNetworkUp = pdTRUE;
 800a5c8:	4b07      	ldr	r3, [pc, #28]	; (800a5e8 <vIPNetworkUpCalls+0x24>)
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	601a      	str	r2, [r3, #0]

	#if( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
	{
		vApplicationIPNetworkEventHook( eNetworkUp );
 800a5ce:	2000      	movs	r0, #0
 800a5d0:	f005 fbb8 	bl	800fd44 <vApplicationIPNetworkEventHook>
	#if( ipconfigDNS_USE_CALLBACKS != 0 )
	{
		/* The following function is declared in FreeRTOS_DNS.c	and 'private' to
		this library */
		extern void vDNSInitialise( void );
		vDNSInitialise();
 800a5d4:	f7fe ff48 	bl	8009468 <vDNSInitialise>
	}
	#endif /* ipconfigDNS_USE_CALLBACKS != 0 */

	/* Set remaining time to 0 so it will become active immediately. */
	prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 800a5d8:	f242 7110 	movw	r1, #10000	; 0x2710
 800a5dc:	4803      	ldr	r0, [pc, #12]	; (800a5ec <vIPNetworkUpCalls+0x28>)
 800a5de:	f7ff fd55 	bl	800a08c <prvIPTimerReload>
}
 800a5e2:	bf00      	nop
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	200041c8 	.word	0x200041c8
 800a5ec:	200041cc 	.word	0x200041cc

0800a5f0 <prvProcessEthernetPacket>:
/*-----------------------------------------------------------*/

static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b086      	sub	sp, #24
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
EthernetHeader_t *pxEthernetHeader;
volatile eFrameProcessingResult_t eReturned; /* Volatile to prevent complier warnings when ipCONSIDER_FRAME_FOR_PROCESSING just sets it to eProcessBuffer. */

	configASSERT( pxNetworkBuffer );
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d109      	bne.n	800a612 <prvProcessEthernetPacket+0x22>
 800a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	613b      	str	r3, [r7, #16]
 800a610:	e7fe      	b.n	800a610 <prvProcessEthernetPacket+0x20>

	/* Interpret the Ethernet frame. */
	eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 800a612:	2301      	movs	r3, #1
 800a614:	73fb      	strb	r3, [r7, #15]
	pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	617b      	str	r3, [r7, #20]

	if( eReturned == eProcessBuffer )
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b01      	cmp	r3, #1
 800a622:	d11b      	bne.n	800a65c <prvProcessEthernetPacket+0x6c>
	{
		/* Interpret the received Ethernet packet. */
		switch( pxEthernetHeader->usFrameType )
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	899b      	ldrh	r3, [r3, #12]
 800a628:	b29b      	uxth	r3, r3
 800a62a:	2b08      	cmp	r3, #8
 800a62c:	d00a      	beq.n	800a644 <prvProcessEthernetPacket+0x54>
 800a62e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800a632:	d110      	bne.n	800a656 <prvProcessEthernetPacket+0x66>
		{
			case ipARP_FRAME_TYPE :
				/* The Ethernet frame contains an ARP packet. */
				eReturned = eARPProcessPacket( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fd ff9f 	bl	800857c <eARPProcessPacket>
 800a63e:	4603      	mov	r3, r0
 800a640:	73fb      	strb	r3, [r7, #15]
				break;
 800a642:	e00b      	b.n	800a65c <prvProcessEthernetPacket+0x6c>

			case ipIPv4_FRAME_TYPE :
				/* The Ethernet frame contains an IP packet. */
				eReturned = prvProcessIPPacket( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer );
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	699b      	ldr	r3, [r3, #24]
 800a648:	6879      	ldr	r1, [r7, #4]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 f866 	bl	800a71c <prvProcessIPPacket>
 800a650:	4603      	mov	r3, r0
 800a652:	73fb      	strb	r3, [r7, #15]
				break;
 800a654:	e002      	b.n	800a65c <prvProcessEthernetPacket+0x6c>

			default :
				/* No other packet types are handled.  Nothing to do. */
				eReturned = eReleaseBuffer;
 800a656:	2300      	movs	r3, #0
 800a658:	73fb      	strb	r3, [r7, #15]
				break;
 800a65a:	bf00      	nop
		}
	}

	/* Perform any actions that resulted from processing the Ethernet frame. */
	switch( eReturned )
 800a65c:	7bfb      	ldrb	r3, [r7, #15]
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	2b02      	cmp	r3, #2
 800a662:	d002      	beq.n	800a66a <prvProcessEthernetPacket+0x7a>
 800a664:	2b03      	cmp	r3, #3
 800a666:	d009      	beq.n	800a67c <prvProcessEthernetPacket+0x8c>
 800a668:	e004      	b.n	800a674 <prvProcessEthernetPacket+0x84>
	{
		case eReturnEthernetFrame :
			/* The Ethernet frame will have been updated (maybe it was
			an ARP request or a PING request?) and should be sent back to
			its source. */
			vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 800a66a:	2101      	movs	r1, #1
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f9b9 	bl	800a9e4 <vReturnEthernetFrame>
			/* parameter pdTRUE: the buffer must be released once
			the frame has been transmitted */
			break;
 800a672:	e004      	b.n	800a67e <prvProcessEthernetPacket+0x8e>

		default :
			/* The frame is not being used anywhere, and the
			NetworkBufferDescriptor_t structure containing the frame should
			just be	released back to the list of free buffers. */
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f005 fad1 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
			break;
 800a67a:	e000      	b.n	800a67e <prvProcessEthernetPacket+0x8e>
			break;
 800a67c:	bf00      	nop
	}
}
 800a67e:	bf00      	nop
 800a680:	3718      	adds	r7, #24
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
	...

0800a688 <prvAllowIPPacket>:
/*-----------------------------------------------------------*/

static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
	NetworkBufferDescriptor_t * const pxNetworkBuffer, UBaseType_t uxHeaderLength )
{
 800a688:	b480      	push	{r7}
 800a68a:	b089      	sub	sp, #36	; 0x24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
eFrameProcessingResult_t eReturn = eProcessBuffer;
 800a694:	2301      	movs	r3, #1
 800a696:	77fb      	strb	r3, [r7, #31]

#if( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
	const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	330e      	adds	r3, #14
 800a69c:	61bb      	str	r3, [r7, #24]
	#if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
	{
		/* In systems with a very small amount of RAM, it might be advantageous
		to have incoming messages checked earlier, by the network card driver.
		This method may decrease the usage of sparse network buffers. */
		uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	617b      	str	r3, [r7, #20]

			/* Ensure that the incoming packet is not fragmented (only outgoing
			packets can be fragmented) as these are the only handled IP frames
			currently. */
			if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	88db      	ldrh	r3, [r3, #6]
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	f64f 730f 	movw	r3, #65295	; 0xff0f
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d002      	beq.n	800a6bc <prvAllowIPPacket+0x34>
			{
				/* Can not handle, fragmented packet. */
				eReturn = eReleaseBuffer;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	77fb      	strb	r3, [r7, #31]
 800a6ba:	e022      	b.n	800a702 <prvAllowIPPacket+0x7a>
			}
			/* 0x45 means: IPv4 with an IP header of 5 x 4 = 20 bytes
			 * 0x47 means: IPv4 with an IP header of 7 x 4 = 28 bytes */
			else if( ( pxIPHeader->ucVersionHeaderLength < 0x45u ) || ( pxIPHeader->ucVersionHeaderLength > 0x4Fu ) )
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	2b44      	cmp	r3, #68	; 0x44
 800a6c2:	d903      	bls.n	800a6cc <prvAllowIPPacket+0x44>
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	2b4f      	cmp	r3, #79	; 0x4f
 800a6ca:	d902      	bls.n	800a6d2 <prvAllowIPPacket+0x4a>
			{
				/* Can not handle, unknown or invalid header version. */
				eReturn = eReleaseBuffer;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	77fb      	strb	r3, [r7, #31]
 800a6d0:	e017      	b.n	800a702 <prvAllowIPPacket+0x7a>
			}
				/* Is the packet for this IP address? */
			else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 800a6d2:	4b0f      	ldr	r3, [pc, #60]	; (800a710 <prvAllowIPPacket+0x88>)
 800a6d4:	695a      	ldr	r2, [r3, #20]
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d012      	beq.n	800a702 <prvAllowIPPacket+0x7a>
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e2:	d00e      	beq.n	800a702 <prvAllowIPPacket+0x7a>
				/* Is it the global broadcast address 255.255.255.255 ? */
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
				/* Is it a specific broadcast address 192.168.1.255 ? */
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800a6e4:	4b0b      	ldr	r3, [pc, #44]	; (800a714 <prvAllowIPPacket+0x8c>)
 800a6e6:	691a      	ldr	r2, [r3, #16]
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d009      	beq.n	800a702 <prvAllowIPPacket+0x7a>
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	4a09      	ldr	r2, [pc, #36]	; (800a718 <prvAllowIPPacket+0x90>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d005      	beq.n	800a702 <prvAllowIPPacket+0x7a>
			#if( ipconfigUSE_LLMNR == 1 )
				/* Is it the LLMNR multicast address? */
				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
			#endif
				/* Or (during DHCP negotiation) we have no IP-address yet? */
				( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
 800a6f6:	4b06      	ldr	r3, [pc, #24]	; (800a710 <prvAllowIPPacket+0x88>)
 800a6f8:	695b      	ldr	r3, [r3, #20]
				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <prvAllowIPPacket+0x7a>
			{
				/* Packet is not for this node, release it */
				eReturn = eReleaseBuffer;
 800a6fe:	2300      	movs	r3, #0
 800a700:	77fb      	strb	r3, [r7, #31]
		( void ) pxNetworkBuffer;
		( void ) uxHeaderLength;
	}
	#endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

	return eReturn;
 800a702:	7ffb      	ldrb	r3, [r7, #31]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3724      	adds	r7, #36	; 0x24
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr
 800a710:	200000a0 	.word	0x200000a0
 800a714:	20004194 	.word	0x20004194
 800a718:	fc0000e0 	.word	0xfc0000e0

0800a71c <prvProcessIPPacket>:
/*-----------------------------------------------------------*/

static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * const pxIPPacket, NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b08c      	sub	sp, #48	; 0x30
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
eFrameProcessingResult_t eReturn;
const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	330e      	adds	r3, #14
 800a72a:	62bb      	str	r3, [r7, #40]	; 0x28
UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0x0Fu ) << 2 );
 800a72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800a736:	627b      	str	r3, [r7, #36]	; 0x24
uint8_t ucProtocol;

	ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	7ddb      	ldrb	r3, [r3, #23]
 800a73c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	/* Check if the IP headers are acceptable and if it has our destination. */
	eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 800a740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff ff9f 	bl	800a688 <prvAllowIPPacket>
 800a74a:	4603      	mov	r3, r0
 800a74c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if( eReturn == eProcessBuffer )
 800a750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a754:	2b01      	cmp	r3, #1
 800a756:	f040 8082 	bne.w	800a85e <prvProcessIPPacket+0x142>
	{
		if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75c:	2b14      	cmp	r3, #20
 800a75e:	d91a      	bls.n	800a796 <prvProcessIPPacket+0x7a>
		{
			/* All structs of headers expect a IP header size of 20 bytes
			 * IP header options were included, we'll ignore them and cut them out
			 * Note: IP options are mostly use in Multi-cast protocols */
			const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800a760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a762:	3b14      	subs	r3, #20
 800a764:	61fb      	str	r3, [r7, #28]
			/* From: the previous start of UDP/ICMP/TCP data */
			uint8_t *pucSource = ( ( uint8_t * ) pxIPHeader ) + uxHeaderLength;
 800a766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76a:	4413      	add	r3, r2
 800a76c:	61bb      	str	r3, [r7, #24]
			/* To: the usual start of UDP/ICMP/TCP data at offset 20 from IP header */
			uint8_t *pucTarget = ( ( uint8_t * ) pxIPHeader ) + ipSIZE_OF_IPv4_HEADER;
 800a76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a770:	3314      	adds	r3, #20
 800a772:	617b      	str	r3, [r7, #20]
			/* How many: total length minus the options and the lower headers */
			const size_t  xMoveLen = pxNetworkBuffer->xDataLength - optlen - ipSIZE_OF_IPv4_HEADER - ipSIZE_OF_ETH_HEADER;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	69da      	ldr	r2, [r3, #28]
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	3b22      	subs	r3, #34	; 0x22
 800a77e:	613b      	str	r3, [r7, #16]

			memmove( pucTarget, pucSource, xMoveLen );
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	69b9      	ldr	r1, [r7, #24]
 800a784:	6978      	ldr	r0, [r7, #20]
 800a786:	f006 f9bd 	bl	8010b04 <memmove>
			pxNetworkBuffer->xDataLength -= optlen;
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	69da      	ldr	r2, [r3, #28]
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	1ad2      	subs	r2, r2, r3
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	61da      	str	r2, [r3, #28]
		}
		/* Add the IP and MAC addresses to the ARP table if they are not
		already there - otherwise refresh the age of the existing
		entry. */
		if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 800a796:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a79a:	2b11      	cmp	r3, #17
 800a79c:	d007      	beq.n	800a7ae <prvProcessIPPacket+0x92>
			 * For UDP packets, this will be done later in xProcessReceivedUDPPacket()
			 * as soon as know that the message will be handled by someone
			 * This will prevent that the ARP cache will get overwritten
			 * with the IP-address of useless broadcast packets
			 */
			vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	1d9a      	adds	r2, r3, #6
 800a7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	f7fd ff67 	bl	800867c <vARPRefreshCacheEntry>
		}
		switch( ucProtocol )
 800a7ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7b2:	2b06      	cmp	r3, #6
 800a7b4:	d041      	beq.n	800a83a <prvProcessIPPacket+0x11e>
 800a7b6:	2b11      	cmp	r3, #17
 800a7b8:	d012      	beq.n	800a7e0 <prvProcessIPPacket+0xc4>
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d000      	beq.n	800a7c0 <prvProcessIPPacket+0xa4>
				}
				break;
#endif
			default	:
				/* Not a supported frame type. */
				break;
 800a7be:	e04e      	b.n	800a85e <prvProcessIPPacket+0x142>
					ICMPPacket_t *pxICMPPacket = ( ICMPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	60fb      	str	r3, [r7, #12]
					if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800a7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c8:	691a      	ldr	r2, [r3, #16]
 800a7ca:	4b28      	ldr	r3, [pc, #160]	; (800a86c <prvProcessIPPacket+0x150>)
 800a7cc:	695b      	ldr	r3, [r3, #20]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d142      	bne.n	800a858 <prvProcessIPPacket+0x13c>
						eReturn = prvProcessICMPPacket( pxICMPPacket );
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 f8e8 	bl	800a9a8 <prvProcessICMPPacket>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800a7de:	e03b      	b.n	800a858 <prvProcessIPPacket+0x13c>
					UDPPacket_t *pxUDPPacket = ( UDPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	60bb      	str	r3, [r7, #8]
					pxNetworkBuffer->xDataLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - sizeof( UDPHeader_t );
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	021b      	lsls	r3, r3, #8
 800a7ee:	b21a      	sxth	r2, r3
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	0a1b      	lsrs	r3, r3, #8
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	b21b      	sxth	r3, r3
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	b21b      	sxth	r3, r3
 800a800:	b29b      	uxth	r3, r3
 800a802:	f1a3 0208 	sub.w	r2, r3, #8
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	61da      	str	r2, [r3, #28]
					pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a80e:	b29a      	uxth	r2, r3
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	841a      	strh	r2, [r3, #32]
					pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	615a      	str	r2, [r3, #20]
					if( xProcessReceivedUDPPacket( pxNetworkBuffer, pxUDPPacket->xUDPHeader.usDestinationPort ) == pdPASS )
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a822:	b29b      	uxth	r3, r3
 800a824:	4619      	mov	r1, r3
 800a826:	6838      	ldr	r0, [r7, #0]
 800a828:	f005 f85c 	bl	800f8e4 <xProcessReceivedUDPPacket>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d114      	bne.n	800a85c <prvProcessIPPacket+0x140>
						eReturn = eFrameConsumed;
 800a832:	2303      	movs	r3, #3
 800a834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800a838:	e010      	b.n	800a85c <prvProcessIPPacket+0x140>
					if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800a83a:	6838      	ldr	r0, [r7, #0]
 800a83c:	f003 fd5c 	bl	800e2f8 <xProcessReceivedTCPPacket>
 800a840:	4603      	mov	r3, r0
 800a842:	2b01      	cmp	r3, #1
 800a844:	d102      	bne.n	800a84c <prvProcessIPPacket+0x130>
						eReturn = eFrameConsumed;
 800a846:	2303      	movs	r3, #3
 800a848:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					xProcessedTCPMessage++;
 800a84c:	4b08      	ldr	r3, [pc, #32]	; (800a870 <prvProcessIPPacket+0x154>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	3301      	adds	r3, #1
 800a852:	4a07      	ldr	r2, [pc, #28]	; (800a870 <prvProcessIPPacket+0x154>)
 800a854:	6013      	str	r3, [r2, #0]
				break;
 800a856:	e002      	b.n	800a85e <prvProcessIPPacket+0x142>
				break;
 800a858:	bf00      	nop
 800a85a:	e000      	b.n	800a85e <prvProcessIPPacket+0x142>
				break;
 800a85c:	bf00      	nop
		}
	}

	return eReturn;
 800a85e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a862:	4618      	mov	r0, r3
 800a864:	3730      	adds	r7, #48	; 0x30
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	200000a0 	.word	0x200000a0
 800a870:	200041c4 	.word	0x200041c4

0800a874 <prvProcessICMPEchoReply>:
/*-----------------------------------------------------------*/

#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

	static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
	{
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
	ePingReplyStatus_t eStatus = eSuccess;
 800a87c:	2300      	movs	r3, #0
 800a87e:	75fb      	strb	r3, [r7, #23]
	uint16_t usDataLength, usCount;
	uint8_t *pucByte;

		/* Find the total length of the IP packet. */
		usDataLength = pxICMPPacket->xIPHeader.usLength;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	7c1a      	ldrb	r2, [r3, #16]
 800a884:	7c5b      	ldrb	r3, [r3, #17]
 800a886:	021b      	lsls	r3, r3, #8
 800a888:	4313      	orrs	r3, r2
 800a88a:	81fb      	strh	r3, [r7, #14]
		usDataLength = FreeRTOS_ntohs( usDataLength );
 800a88c:	89fb      	ldrh	r3, [r7, #14]
 800a88e:	021b      	lsls	r3, r3, #8
 800a890:	b21a      	sxth	r2, r3
 800a892:	89fb      	ldrh	r3, [r7, #14]
 800a894:	0a1b      	lsrs	r3, r3, #8
 800a896:	b29b      	uxth	r3, r3
 800a898:	b21b      	sxth	r3, r3
 800a89a:	4313      	orrs	r3, r2
 800a89c:	b21b      	sxth	r3, r3
 800a89e:	81fb      	strh	r3, [r7, #14]

		/* Remove the length of the IP headers to obtain the length of the ICMP
		message itself. */
		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 800a8a0:	89fb      	ldrh	r3, [r7, #14]
 800a8a2:	3b14      	subs	r3, #20
 800a8a4:	81fb      	strh	r3, [r7, #14]

		/* Remove the length of the ICMP header, to obtain the length of
		data contained in the ping. */
		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMP_HEADER );
 800a8a6:	89fb      	ldrh	r3, [r7, #14]
 800a8a8:	3b08      	subs	r3, #8
 800a8aa:	81fb      	strh	r3, [r7, #14]

		/* Checksum has already been checked before in prvProcessIPPacket */

		/* Find the first byte of the data within the ICMP packet. */
		pucByte = ( uint8_t * ) pxICMPPacket;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	613b      	str	r3, [r7, #16]
		pucByte += sizeof( ICMPPacket_t );
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	332a      	adds	r3, #42	; 0x2a
 800a8b4:	613b      	str	r3, [r7, #16]

		/* Check each byte. */
		for( usCount = 0; usCount < usDataLength; usCount++ )
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	82bb      	strh	r3, [r7, #20]
 800a8ba:	e00c      	b.n	800a8d6 <prvProcessICMPEchoReply+0x62>
		{
			if( *pucByte != ipECHO_DATA_FILL_BYTE )
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	2b78      	cmp	r3, #120	; 0x78
 800a8c2:	d002      	beq.n	800a8ca <prvProcessICMPEchoReply+0x56>
			{
				eStatus = eInvalidData;
 800a8c4:	2302      	movs	r3, #2
 800a8c6:	75fb      	strb	r3, [r7, #23]
				break;
 800a8c8:	e009      	b.n	800a8de <prvProcessICMPEchoReply+0x6a>
			}

			pucByte++;
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	613b      	str	r3, [r7, #16]
		for( usCount = 0; usCount < usDataLength; usCount++ )
 800a8d0:	8abb      	ldrh	r3, [r7, #20]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	82bb      	strh	r3, [r7, #20]
 800a8d6:	8aba      	ldrh	r2, [r7, #20]
 800a8d8:	89fb      	ldrh	r3, [r7, #14]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d3ee      	bcc.n	800a8bc <prvProcessICMPEchoReply+0x48>
		}

		/* Call back into the application to pass it the result. */
		vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	7dfb      	ldrb	r3, [r7, #23]
 800a8e6:	4611      	mov	r1, r2
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f005 fa1d 	bl	800fd28 <vApplicationPingReplyHook>
	}
 800a8ee:	bf00      	nop
 800a8f0:	3718      	adds	r7, #24
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
	...

0800a8f8 <prvProcessICMPEchoRequest>:
/*-----------------------------------------------------------*/

#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )

	static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket )
	{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b087      	sub	sp, #28
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
	ICMPHeader_t *pxICMPHeader;
	IPHeader_t *pxIPHeader;
	uint16_t usRequest;

		pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	3322      	adds	r3, #34	; 0x22
 800a904:	617b      	str	r3, [r7, #20]
		pxIPHeader = &( pxICMPPacket->xIPHeader );
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	330e      	adds	r3, #14
 800a90a:	613b      	str	r3, [r7, #16]

		/* The checksum can be checked here - but a ping reply should be
		returned even if the checksum is incorrect so the other end can
		tell that the ping was received - even if the ping reply contains
		invalid data. */
		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	2200      	movs	r2, #0
 800a910:	701a      	strb	r2, [r3, #0]
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	68da      	ldr	r2, [r3, #12]
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800a91a:	4b22      	ldr	r3, [pc, #136]	; (800a9a4 <prvProcessICMPEchoRequest+0xac>)
 800a91c:	695a      	ldr	r2, [r3, #20]
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	60da      	str	r2, [r3, #12]
		has been changed to ipICMP_ECHO_REPLY.  This is faster than calling
		usGenerateChecksum(). */

		/* due to compiler warning "integer operation result is out of range" */

		usRequest = ( uint16_t ) ( ( uint16_t )ipICMP_ECHO_REQUEST << 8 );
 800a922:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a926:	81fb      	strh	r3, [r7, #14]

		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFu - usRequest ) )
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	885b      	ldrh	r3, [r3, #2]
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	89fb      	ldrh	r3, [r7, #14]
 800a930:	43db      	mvns	r3, r3
 800a932:	b29b      	uxth	r3, r3
 800a934:	021b      	lsls	r3, r3, #8
 800a936:	b299      	uxth	r1, r3
 800a938:	89fb      	ldrh	r3, [r7, #14]
 800a93a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800a93e:	33ff      	adds	r3, #255	; 0xff
 800a940:	0a1b      	lsrs	r3, r3, #8
 800a942:	b29b      	uxth	r3, r3
 800a944:	430b      	orrs	r3, r1
 800a946:	b29b      	uxth	r3, r3
 800a948:	429a      	cmp	r2, r3
 800a94a:	d312      	bcc.n	800a972 <prvProcessICMPEchoRequest+0x7a>
		{
			pxICMPHeader->usChecksum = ( uint16_t )
				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	885b      	ldrh	r3, [r3, #2]
 800a950:	b29a      	uxth	r2, r3
					FreeRTOS_htons( usRequest + 1UL ) );
 800a952:	89fb      	ldrh	r3, [r7, #14]
 800a954:	3301      	adds	r3, #1
 800a956:	b29b      	uxth	r3, r3
 800a958:	021b      	lsls	r3, r3, #8
 800a95a:	b299      	uxth	r1, r3
 800a95c:	89fb      	ldrh	r3, [r7, #14]
 800a95e:	3301      	adds	r3, #1
 800a960:	0a1b      	lsrs	r3, r3, #8
 800a962:	b29b      	uxth	r3, r3
 800a964:	430b      	orrs	r3, r1
 800a966:	b29b      	uxth	r3, r3
			pxICMPHeader->usChecksum = ( uint16_t )
 800a968:	4413      	add	r3, r2
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	805a      	strh	r2, [r3, #2]
 800a970:	e010      	b.n	800a994 <prvProcessICMPEchoRequest+0x9c>
		}
		else
		{
			pxICMPHeader->usChecksum = ( uint16_t )
				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	885b      	ldrh	r3, [r3, #2]
 800a976:	b29a      	uxth	r2, r3
					FreeRTOS_htons( usRequest ) );
 800a978:	89fb      	ldrh	r3, [r7, #14]
 800a97a:	021b      	lsls	r3, r3, #8
 800a97c:	b219      	sxth	r1, r3
 800a97e:	89fb      	ldrh	r3, [r7, #14]
 800a980:	0a1b      	lsrs	r3, r3, #8
 800a982:	b29b      	uxth	r3, r3
 800a984:	b21b      	sxth	r3, r3
 800a986:	430b      	orrs	r3, r1
 800a988:	b21b      	sxth	r3, r3
 800a98a:	b29b      	uxth	r3, r3
			pxICMPHeader->usChecksum = ( uint16_t )
 800a98c:	4413      	add	r3, r2
 800a98e:	b29a      	uxth	r2, r3
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	805a      	strh	r2, [r3, #2]
		}
		return eReturnEthernetFrame;
 800a994:	2302      	movs	r3, #2
	}
 800a996:	4618      	mov	r0, r3
 800a998:	371c      	adds	r7, #28
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	200000a0 	.word	0x200000a0

0800a9a8 <prvProcessICMPPacket>:
/*-----------------------------------------------------------*/

#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

	static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket )
	{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
	eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	73fb      	strb	r3, [r7, #15]

		iptraceICMP_PACKET_RECEIVED();
		switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d008      	beq.n	800a9d0 <prvProcessICMPPacket+0x28>
 800a9be:	2b08      	cmp	r3, #8
 800a9c0:	d000      	beq.n	800a9c4 <prvProcessICMPPacket+0x1c>
				}
				#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
				break;

			default	:
				break;
 800a9c2:	e009      	b.n	800a9d8 <prvProcessICMPPacket+0x30>
					eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f7ff ff97 	bl	800a8f8 <prvProcessICMPEchoRequest>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	73fb      	strb	r3, [r7, #15]
				break;
 800a9ce:	e003      	b.n	800a9d8 <prvProcessICMPPacket+0x30>
					prvProcessICMPEchoReply( pxICMPPacket );
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7ff ff4f 	bl	800a874 <prvProcessICMPEchoReply>
				break;
 800a9d6:	bf00      	nop
		}

		return eReturn;
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
	}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
	...

0800a9e4 <vReturnEthernetFrame>:
	return FreeRTOS_htons( ( (uint16_t) xSum.u32 ) );
}
/*-----------------------------------------------------------*/

void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer, BaseType_t xReleaseAfterSend )
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
	}

	if( pxNetworkBuffer != NULL )
#endif
	{
		pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	699b      	ldr	r3, [r3, #24]
 800a9f2:	60fb      	str	r3, [r7, #12]

		/* Swap source and destination MAC addresses. */
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ), sizeof( pxEthernetHeader->xDestinationAddress ) );
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	3306      	adds	r3, #6
 800a9fa:	2206      	movs	r2, #6
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	f006 f876 	bl	8010aee <memcpy>
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	3306      	adds	r3, #6
 800aa06:	2206      	movs	r2, #6
 800aa08:	4905      	ldr	r1, [pc, #20]	; (800aa20 <vReturnEthernetFrame+0x3c>)
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f006 f86f 	bl	8010aee <memcpy>

		/* Send! */
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7f9 ff28 	bl	8004868 <xNetworkInterfaceOutput>
	}
}
 800aa18:	bf00      	nop
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	200000a0 	.word	0x200000a0

0800aa24 <vIPSetDHCPTimerEnableState>:
}
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DHCP == 1 )
	void vIPSetDHCPTimerEnableState( BaseType_t xEnableState )
	{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
		if( xEnableState != pdFALSE )
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d005      	beq.n	800aa3e <vIPSetDHCPTimerEnableState+0x1a>
		{
			xDHCPTimer.bActive = pdTRUE_UNSIGNED;
 800aa32:	4a08      	ldr	r2, [pc, #32]	; (800aa54 <vIPSetDHCPTimerEnableState+0x30>)
 800aa34:	7813      	ldrb	r3, [r2, #0]
 800aa36:	f043 0301 	orr.w	r3, r3, #1
 800aa3a:	7013      	strb	r3, [r2, #0]
		}
		else
		{
			xDHCPTimer.bActive = pdFALSE_UNSIGNED;
		}
	}
 800aa3c:	e004      	b.n	800aa48 <vIPSetDHCPTimerEnableState+0x24>
			xDHCPTimer.bActive = pdFALSE_UNSIGNED;
 800aa3e:	4a05      	ldr	r2, [pc, #20]	; (800aa54 <vIPSetDHCPTimerEnableState+0x30>)
 800aa40:	7813      	ldrb	r3, [r2, #0]
 800aa42:	f36f 0300 	bfc	r3, #0, #1
 800aa46:	7013      	strb	r3, [r2, #0]
	}
 800aa48:	bf00      	nop
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr
 800aa54:	200041e0 	.word	0x200041e0

0800aa58 <vIPReloadDHCPTimer>:
#endif /* ipconfigUSE_DHCP */
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DHCP == 1 )
	void vIPReloadDHCPTimer( uint32_t ulLeaseTime )
	{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
		prvIPTimerReload( &xDHCPTimer, ulLeaseTime );
 800aa60:	6879      	ldr	r1, [r7, #4]
 800aa62:	4803      	ldr	r0, [pc, #12]	; (800aa70 <vIPReloadDHCPTimer+0x18>)
 800aa64:	f7ff fb12 	bl	800a08c <prvIPTimerReload>
	}
 800aa68:	bf00      	nop
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	200041e0 	.word	0x200041e0

0800aa74 <vIPSetDnsTimerEnableState>:
#endif /* ipconfigUSE_DHCP */
/*-----------------------------------------------------------*/

#if( ipconfigDNS_USE_CALLBACKS == 1 )
	void vIPSetDnsTimerEnableState( BaseType_t xEnableState )
	{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
		if( xEnableState != 0 )
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d005      	beq.n	800aa8e <vIPSetDnsTimerEnableState+0x1a>
		{
			xDNSTimer.bActive = pdTRUE;
 800aa82:	4a08      	ldr	r2, [pc, #32]	; (800aaa4 <vIPSetDnsTimerEnableState+0x30>)
 800aa84:	7813      	ldrb	r3, [r2, #0]
 800aa86:	f043 0301 	orr.w	r3, r3, #1
 800aa8a:	7013      	strb	r3, [r2, #0]
		}
		else
		{
			xDNSTimer.bActive = pdFALSE;
		}
	}
 800aa8c:	e004      	b.n	800aa98 <vIPSetDnsTimerEnableState+0x24>
			xDNSTimer.bActive = pdFALSE;
 800aa8e:	4a05      	ldr	r2, [pc, #20]	; (800aaa4 <vIPSetDnsTimerEnableState+0x30>)
 800aa90:	7813      	ldrb	r3, [r2, #0]
 800aa92:	f36f 0300 	bfc	r3, #0, #1
 800aa96:	7013      	strb	r3, [r2, #0]
	}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	20004208 	.word	0x20004208

0800aaa8 <xIPIsNetworkTaskReady>:
	}
#endif /* ipconfigDNS_USE_CALLBACKS != 0 */
/*-----------------------------------------------------------*/

BaseType_t xIPIsNetworkTaskReady( void )
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	af00      	add	r7, sp, #0
	return xIPTaskInitialised;
 800aaac:	4b03      	ldr	r3, [pc, #12]	; (800aabc <xIPIsNetworkTaskReady+0x14>)
 800aaae:	681b      	ldr	r3, [r3, #0]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	2000421c 	.word	0x2000421c

0800aac0 <FreeRTOS_max_uint32>:
	static portINLINE BaseType_t  	FreeRTOS_min_BaseType  (BaseType_t  a, BaseType_t  b);
	static portINLINE UBaseType_t  	FreeRTOS_min_UBaseType (UBaseType_t  a, UBaseType_t  b);


	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return a >= b ? a : b; }
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	4293      	cmp	r3, r2
 800aad0:	bf38      	it	cc
 800aad2:	4613      	movcc	r3, r2
 800aad4:	4618      	mov	r0, r3
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <FreeRTOS_round_up>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d) { return d * ( ( a + d - 1u ) / d ); }
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	4413      	add	r3, r2
 800aaf0:	1e5a      	subs	r2, r3, #1
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	fb02 f303 	mul.w	r3, r2, r3
 800aafe:	4618      	mov	r0, r3
 800ab00:	370c      	adds	r7, #12
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <uxStreamBufferSpace>:
}
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper );
static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper )
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	b087      	sub	sp, #28
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	60f8      	str	r0, [r7, #12]
 800ab12:	60b9      	str	r1, [r7, #8]
 800ab14:	607a      	str	r2, [r7, #4]
/* Returns the space between uxLower and uxUpper, which equals to the distance minus 1 */
size_t uxCount;

	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	691a      	ldr	r2, [r3, #16]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	441a      	add	r2, r3
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	3b01      	subs	r3, #1
 800ab24:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	691a      	ldr	r2, [r3, #16]
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d804      	bhi.n	800ab3a <uxStreamBufferSpace+0x30>
	{
		uxCount -= pxBuffer->LENGTH;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	697a      	ldr	r2, [r7, #20]
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	617b      	str	r3, [r7, #20]
	}

	return uxCount;
 800ab3a:	697b      	ldr	r3, [r7, #20]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	371c      	adds	r7, #28
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <uxStreamBufferDistance>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper );
static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b087      	sub	sp, #28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
/* Returns the distance between uxLower and uxUpper */
size_t uxCount;

	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	691a      	ldr	r2, [r3, #16]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	441a      	add	r2, r3
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	691a      	ldr	r2, [r3, #16]
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d804      	bhi.n	800ab76 <uxStreamBufferDistance+0x2e>
	{
		uxCount -= pxBuffer->LENGTH;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	617b      	str	r3, [r7, #20]
	}

	return uxCount;
 800ab76:	697b      	ldr	r3, [r7, #20]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	371c      	adds	r7, #28
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <uxStreamBufferGetSpace>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can still be added to uxHead
before hitting on uxTail */
size_t uxHead = pxBuffer->uxHead;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	68f9      	ldr	r1, [r7, #12]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f7ff ffb4 	bl	800ab0a <uxStreamBufferSpace>
 800aba2:	4603      	mov	r3, r0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <uxStreamBufferFrontSpace>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
/* Distance between uxFront and uxTail
or the number of items which can still be added to uxFront,
before hitting on uxTail */

size_t uxFront = pxBuffer->uxFront;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	68f9      	ldr	r1, [r7, #12]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f7ff ffa0 	bl	800ab0a <uxStreamBufferSpace>
 800abca:	4603      	mov	r3, r0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <uxStreamBufferGetSize>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer )
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can be read from uxTail
before reaching uxHead */
size_t uxHead = pxBuffer->uxHead;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	68b9      	ldr	r1, [r7, #8]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f7ff ffab 	bl	800ab48 <uxStreamBufferDistance>
 800abf2:	4603      	mov	r3, r0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <prvValidSocket>:
static uint16_t usNextPortToUse[ socketPROTOCOL_COUNT ] = { 0 };

/*-----------------------------------------------------------*/

static BaseType_t prvValidSocket( FreeRTOS_Socket_t *pxSocket, BaseType_t xProtocol, BaseType_t xIsBound )
{
 800abfc:	b480      	push	{r7}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdTRUE;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	617b      	str	r3, [r7, #20]

	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d003      	beq.n	800ac1a <prvValidSocket+0x1e>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac18:	d102      	bne.n	800ac20 <prvValidSocket+0x24>
	{
		xReturn = pdFALSE;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	617b      	str	r3, [r7, #20]
 800ac1e:	e012      	b.n	800ac46 <prvValidSocket+0x4a>
	}
	else if( ( xIsBound != pdFALSE ) && ( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE ) )
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d006      	beq.n	800ac34 <prvValidSocket+0x38>
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	699b      	ldr	r3, [r3, #24]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d102      	bne.n	800ac34 <prvValidSocket+0x38>
	{
		/* The caller expects the socket to be bound, but it isn't. */
		xReturn = pdFALSE;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	617b      	str	r3, [r7, #20]
 800ac32:	e008      	b.n	800ac46 <prvValidSocket+0x4a>
	}
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d001      	beq.n	800ac46 <prvValidSocket+0x4a>
	{
		/* Socket has a wrong type (UDP != TCP). */
		xReturn = pdFALSE;
 800ac42:	2300      	movs	r3, #0
 800ac44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac46:	697b      	ldr	r3, [r7, #20]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	371c      	adds	r7, #28
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <vNetworkSocketsInit>:
/*-----------------------------------------------------------*/

void vNetworkSocketsInit( void )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
const uint32_t ulAutoPortRange = socketAUTO_PORT_ALLOCATION_MAX_NUMBER - socketAUTO_PORT_ALLOCATION_RESET_NUMBER;
 800ac5a:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 800ac5e:	607b      	str	r3, [r7, #4]
uint32_t ulRandomPort;

	vListInitialise( &xBoundUDPSocketsList );
 800ac60:	481b      	ldr	r0, [pc, #108]	; (800acd0 <vNetworkSocketsInit+0x7c>)
 800ac62:	f7fb f878 	bl	8005d56 <vListInitialise>

	/* Determine the first anonymous UDP port number to get assigned.  Give it
	a random value in order to avoid confusion about port numbers being used
	earlier, before rebooting the device.  Start with the first auto port
	number, then add a random offset up to a maximum of the range of numbers. */
	ulRandomPort = socketAUTO_PORT_ALLOCATION_START_NUMBER;
 800ac66:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800ac6a:	603b      	str	r3, [r7, #0]
	ulRandomPort += ( ipconfigRAND32() % ulAutoPortRange );
 800ac6c:	f005 f880 	bl	800fd70 <uxRand>
 800ac70:	4603      	mov	r3, r0
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac78:	6879      	ldr	r1, [r7, #4]
 800ac7a:	fb01 f202 	mul.w	r2, r1, r2
 800ac7e:	1a9b      	subs	r3, r3, r2
 800ac80:	683a      	ldr	r2, [r7, #0]
 800ac82:	4413      	add	r3, r2
 800ac84:	603b      	str	r3, [r7, #0]
	usNextPortToUse[ socketNEXT_UDP_PORT_NUMBER_INDEX ] = ( uint16_t ) ulRandomPort;
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	b29a      	uxth	r2, r3
 800ac8a:	4b12      	ldr	r3, [pc, #72]	; (800acd4 <vNetworkSocketsInit+0x80>)
 800ac8c:	801a      	strh	r2, [r3, #0]

	#if( ipconfigUSE_TCP == 1 )
	{
		extern uint32_t ulNextInitialSequenceNumber;

		ulNextInitialSequenceNumber = ipconfigRAND32();
 800ac8e:	f005 f86f 	bl	800fd70 <uxRand>
 800ac92:	4602      	mov	r2, r0
 800ac94:	4b10      	ldr	r3, [pc, #64]	; (800acd8 <vNetworkSocketsInit+0x84>)
 800ac96:	601a      	str	r2, [r3, #0]

		/* Determine the first anonymous TCP port number to get assigned. */
		ulRandomPort = socketAUTO_PORT_ALLOCATION_START_NUMBER;
 800ac98:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800ac9c:	603b      	str	r3, [r7, #0]
		ulRandomPort += ( ipconfigRAND32() % ulAutoPortRange );
 800ac9e:	f005 f867 	bl	800fd70 <uxRand>
 800aca2:	4603      	mov	r3, r0
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	fbb3 f2f2 	udiv	r2, r3, r2
 800acaa:	6879      	ldr	r1, [r7, #4]
 800acac:	fb01 f202 	mul.w	r2, r1, r2
 800acb0:	1a9b      	subs	r3, r3, r2
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	4413      	add	r3, r2
 800acb6:	603b      	str	r3, [r7, #0]
		usNextPortToUse[ socketNEXT_TCP_PORT_NUMBER_INDEX ] = ( uint16_t ) ulRandomPort;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	b29a      	uxth	r2, r3
 800acbc:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <vNetworkSocketsInit+0x80>)
 800acbe:	805a      	strh	r2, [r3, #2]

		vListInitialise( &xBoundTCPSocketsList );
 800acc0:	4806      	ldr	r0, [pc, #24]	; (800acdc <vNetworkSocketsInit+0x88>)
 800acc2:	f7fb f848 	bl	8005d56 <vListInitialise>
	}
	#endif  /* ipconfigUSE_TCP == 1 */
}
 800acc6:	bf00      	nop
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	20005488 	.word	0x20005488
 800acd4:	20004228 	.word	0x20004228
 800acd8:	20004230 	.word	0x20004230
 800acdc:	20005474 	.word	0x20005474

0800ace0 <prvDetermineSocketSize>:
/*-----------------------------------------------------------*/

static BaseType_t prvDetermineSocketSize( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol, size_t *pxSocketSize )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b088      	sub	sp, #32
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdPASS;
 800acee:	2301      	movs	r3, #1
 800acf0:	61fb      	str	r3, [r7, #28]
FreeRTOS_Socket_t *pxSocket;

	/* Asserts must not appear before it has been determined that the network
	task is ready - otherwise the asserts will fail. */
	if( xIPIsNetworkTaskReady() == pdFALSE )
 800acf2:	f7ff fed9 	bl	800aaa8 <xIPIsNetworkTaskReady>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d102      	bne.n	800ad02 <prvDetermineSocketSize+0x22>
	{
		xReturn = pdFAIL;
 800acfc:	2300      	movs	r3, #0
 800acfe:	61fb      	str	r3, [r7, #28]
 800ad00:	e045      	b.n	800ad8e <prvDetermineSocketSize+0xae>
	}
	else
	{
		/* Only Ethernet is currently supported. */
		configASSERT( xDomain == FREERTOS_AF_INET );
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2b02      	cmp	r3, #2
 800ad06:	d009      	beq.n	800ad1c <prvDetermineSocketSize+0x3c>
 800ad08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0c:	f383 8811 	msr	BASEPRI, r3
 800ad10:	f3bf 8f6f 	isb	sy
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	61bb      	str	r3, [r7, #24]
 800ad1a:	e7fe      	b.n	800ad1a <prvDetermineSocketSize+0x3a>

		/* Check if the UDP socket-list has been initialised. */
		configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800ad1c:	4b1e      	ldr	r3, [pc, #120]	; (800ad98 <prvDetermineSocketSize+0xb8>)
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad24:	d009      	beq.n	800ad3a <prvDetermineSocketSize+0x5a>
 800ad26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	617b      	str	r3, [r7, #20]
 800ad38:	e7fe      	b.n	800ad38 <prvDetermineSocketSize+0x58>
		#if( ipconfigUSE_TCP == 1 )
		{
			/* Check if the TCP socket-list has been initialised. */
			configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800ad3a:	4b18      	ldr	r3, [pc, #96]	; (800ad9c <prvDetermineSocketSize+0xbc>)
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad42:	d009      	beq.n	800ad58 <prvDetermineSocketSize+0x78>
 800ad44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad48:	f383 8811 	msr	BASEPRI, r3
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	613b      	str	r3, [r7, #16]
 800ad56:	e7fe      	b.n	800ad56 <prvDetermineSocketSize+0x76>
		}
		#endif  /* ipconfigUSE_TCP == 1 */

		if( xProtocol == FREERTOS_IPPROTO_UDP )
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b11      	cmp	r3, #17
 800ad5c:	d108      	bne.n	800ad70 <prvDetermineSocketSize+0x90>
		{
			if( xType != FREERTOS_SOCK_DGRAM )
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	d001      	beq.n	800ad68 <prvDetermineSocketSize+0x88>
			{
				xReturn = pdFAIL;
 800ad64:	2300      	movs	r3, #0
 800ad66:	61fb      	str	r3, [r7, #28]
			}
			/* In case a UDP socket is created, do not allocate space for TCP data. */
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	224c      	movs	r2, #76	; 0x4c
 800ad6c:	601a      	str	r2, [r3, #0]
 800ad6e:	e00e      	b.n	800ad8e <prvDetermineSocketSize+0xae>
		}
#if( ipconfigUSE_TCP == 1 )
		else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2b06      	cmp	r3, #6
 800ad74:	d109      	bne.n	800ad8a <prvDetermineSocketSize+0xaa>
		{
			if( xType != FREERTOS_SOCK_STREAM )
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d001      	beq.n	800ad80 <prvDetermineSocketSize+0xa0>
			{
				xReturn = pdFAIL;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	61fb      	str	r3, [r7, #28]
			}

			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800ad86:	601a      	str	r2, [r3, #0]
 800ad88:	e001      	b.n	800ad8e <prvDetermineSocketSize+0xae>
		}
#endif  /* ipconfigUSE_TCP == 1 */
		else
		{
			xReturn = pdFAIL;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	61fb      	str	r3, [r7, #28]
		}
	}
	/* In case configASSERT() is not used */
	( void )xDomain;
	return xReturn;
 800ad8e:	69fb      	ldr	r3, [r7, #28]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3720      	adds	r7, #32
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	20005488 	.word	0x20005488
 800ad9c:	20005474 	.word	0x20005474

0800ada0 <FreeRTOS_socket>:
/*-----------------------------------------------------------*/

/* FreeRTOS_socket() allocates and initiates a socket */
Socket_t FreeRTOS_socket( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b088      	sub	sp, #32
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
FreeRTOS_Socket_t *pxSocket;
size_t uxSocketSize;
EventGroupHandle_t xEventGroup;
Socket_t xReturn;

	if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
 800adac:	f107 0310 	add.w	r3, r7, #16
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	68b9      	ldr	r1, [r7, #8]
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f7ff ff93 	bl	800ace0 <prvDetermineSocketSize>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d103      	bne.n	800adc8 <FreeRTOS_socket+0x28>
	{
		xReturn = FREERTOS_INVALID_SOCKET;
 800adc0:	f04f 33ff 	mov.w	r3, #4294967295
 800adc4:	61bb      	str	r3, [r7, #24]
 800adc6:	e07d      	b.n	800aec4 <FreeRTOS_socket+0x124>
	{
		/* Allocate the structure that will hold the socket information.  The
		size depends on the type of socket: UDP sockets need less space.  A
		define 'pvPortMallocSocket' will used to allocate the necessary space.
		By default it points to the FreeRTOS function 'pvPortMalloc()'. */
		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fb fab8 	bl	8006340 <pvPortMalloc>
 800add0:	61f8      	str	r0, [r7, #28]

		if( pxSocket == NULL )
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d103      	bne.n	800ade0 <FreeRTOS_socket+0x40>
		{
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800add8:	f04f 33ff 	mov.w	r3, #4294967295
 800addc:	61fb      	str	r3, [r7, #28]
 800adde:	e06f      	b.n	800aec0 <FreeRTOS_socket+0x120>
			iptraceFAILED_TO_CREATE_SOCKET();
		}
		else if( ( xEventGroup = xEventGroupCreate() ) == NULL )
 800ade0:	f7fa fdc7 	bl	8005972 <xEventGroupCreate>
 800ade4:	6178      	str	r0, [r7, #20]
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d106      	bne.n	800adfa <FreeRTOS_socket+0x5a>
		{
			vPortFreeSocket( pxSocket );
 800adec:	69f8      	ldr	r0, [r7, #28]
 800adee:	f7fb fb69 	bl	80064c4 <vPortFree>
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800adf2:	f04f 33ff 	mov.w	r3, #4294967295
 800adf6:	61fb      	str	r3, [r7, #28]
 800adf8:	e062      	b.n	800aec0 <FreeRTOS_socket+0x120>
			iptraceFAILED_TO_CREATE_EVENT_GROUP();
		}
		else
		{
			/* Clear the entire space to avoid nulling individual entries */
			memset( pxSocket, '\0', uxSocketSize );
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	461a      	mov	r2, r3
 800adfe:	2100      	movs	r1, #0
 800ae00:	69f8      	ldr	r0, [r7, #28]
 800ae02:	f005 fe99 	bl	8010b38 <memset>

			pxSocket->xEventGroup = xEventGroup;
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	605a      	str	r2, [r3, #4]

			/* Initialise the socket's members.  The semaphore will be created
			if the socket is bound to an address, for now the pointer to the
			semaphore is just set to NULL to show it has not been created. */
			if( xProtocol == FREERTOS_IPPROTO_UDP )
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b11      	cmp	r3, #17
 800ae10:	d104      	bne.n	800ae1c <FreeRTOS_socket+0x7c>
			{
				vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	3338      	adds	r3, #56	; 0x38
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fa ff9d 	bl	8005d56 <vListInitialise>
					pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
				}
				#endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
			}

			vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	3308      	adds	r3, #8
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7fa ffb8 	bl	8005d96 <vListInitialiseItem>
			listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	69fa      	ldr	r2, [r7, #28]
 800ae2a:	615a      	str	r2, [r3, #20]

			pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae32:	61da      	str	r2, [r3, #28]
			pxSocket->xSendBlockTime    = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae3a:	621a      	str	r2, [r3, #32]
			pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	2202      	movs	r2, #2
 800ae40:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			pxSocket->ucProtocol        = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	b2da      	uxtb	r2, r3
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

			#if( ipconfigUSE_TCP == 1 )
			{
				if( xProtocol == FREERTOS_IPPROTO_TCP )
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2b06      	cmp	r3, #6
 800ae52:	d135      	bne.n	800aec0 <FreeRTOS_socket+0x120>
				{
					/* StreamSize is expressed in number of bytes */
					/* Round up buffer sizes to nearest multiple of MSS */
					pxSocket->u.xTCP.usInitMSS    = pxSocket->u.xTCP.usCurMSS = ipconfigTCP_MSS;
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800ae5a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	f241 121c 	movw	r2, #4380	; 0x111c
 800ae70:	66da      	str	r2, [r3, #108]	; 0x6c
					pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800ae72:	f240 51b4 	movw	r1, #1460	; 0x5b4
 800ae76:	f640 3068 	movw	r0, #2920	; 0xb68
 800ae7a:	f7ff fe31 	bl	800aae0 <FreeRTOS_round_up>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	671a      	str	r2, [r3, #112]	; 0x70
					/* Use half of the buffer size of the TCP windows */
					#if ( ipconfigUSE_TCP_WIN == 1 )
					{
						pxSocket->u.xTCP.uxRxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2 ) / ipconfigTCP_MSS );
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae88:	08db      	lsrs	r3, r3, #3
 800ae8a:	4a11      	ldr	r2, [pc, #68]	; (800aed0 <FreeRTOS_socket+0x130>)
 800ae8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae90:	099b      	lsrs	r3, r3, #6
 800ae92:	4619      	mov	r1, r3
 800ae94:	2001      	movs	r0, #1
 800ae96:	f7ff fe13 	bl	800aac0 <FreeRTOS_max_uint32>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2 ) / ipconfigTCP_MSS );
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aea6:	08db      	lsrs	r3, r3, #3
 800aea8:	4a09      	ldr	r2, [pc, #36]	; (800aed0 <FreeRTOS_socket+0x130>)
 800aeaa:	fba2 2303 	umull	r2, r3, r2, r3
 800aeae:	099b      	lsrs	r3, r3, #6
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	2001      	movs	r0, #1
 800aeb4:	f7ff fe04 	bl	800aac0 <FreeRTOS_max_uint32>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				}
			}
			#endif  /* ipconfigUSE_TCP == 1 */
		}

		xReturn = ( Socket_t ) pxSocket;
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	61bb      	str	r3, [r7, #24]
	}

	/* Remove compiler warnings in the case the configASSERT() is not defined. */
	( void ) xDomain;

	return xReturn;
 800aec4:	69bb      	ldr	r3, [r7, #24]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3720      	adds	r7, #32
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	2ce33e6d 	.word	0x2ce33e6d

0800aed4 <FreeRTOS_recvfrom>:
 * FreeRTOS_recvfrom: receive data from a bound socket
 * In this library, the function can only be used with connectionsless sockets
 * (UDP)
 */
int32_t FreeRTOS_recvfrom( Socket_t xSocket, void *pvBuffer, size_t xBufferLength, BaseType_t xFlags, struct freertos_sockaddr *pxSourceAddress, socklen_t *pxSourceAddressLength )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b090      	sub	sp, #64	; 0x40
 800aed8:	af02      	add	r7, sp, #8
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
 800aee0:	603b      	str	r3, [r7, #0]
BaseType_t lPacketCount = 0;
 800aee2:	2300      	movs	r3, #0
 800aee4:	637b      	str	r3, [r7, #52]	; 0x34
NetworkBufferDescriptor_t *pxNetworkBuffer;
FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	627b      	str	r3, [r7, #36]	; 0x24
TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 800aeea:	2300      	movs	r3, #0
 800aeec:	61fb      	str	r3, [r7, #28]
BaseType_t xTimed = pdFALSE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;
int32_t lReturn;
EventBits_t xEventBits = ( EventBits_t ) 0;
 800aef2:	2300      	movs	r3, #0
 800aef4:	62bb      	str	r3, [r7, #40]	; 0x28

	if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdTRUE ) == pdFALSE )
 800aef6:	2201      	movs	r2, #1
 800aef8:	2111      	movs	r1, #17
 800aefa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aefc:	f7ff fe7e 	bl	800abfc <prvValidSocket>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d102      	bne.n	800af0c <FreeRTOS_recvfrom+0x38>
	{
		return -pdFREERTOS_ERRNO_EINVAL;
 800af06:	f06f 0315 	mvn.w	r3, #21
 800af0a:	e0ac      	b.n	800b066 <FreeRTOS_recvfrom+0x192>
	}

	lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800af0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af10:	637b      	str	r3, [r7, #52]	; 0x34

	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the parameters. */
	( void ) pxSourceAddressLength;

	while( lPacketCount == 0 )
 800af12:	e04b      	b.n	800afac <FreeRTOS_recvfrom+0xd8>
	{
		if( xTimed == pdFALSE )
 800af14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af16:	2b00      	cmp	r3, #0
 800af18:	d11c      	bne.n	800af54 <FreeRTOS_recvfrom+0x80>
		{
			/* Check to see if the socket is non blocking on the first
			iteration.  */
			xRemainingTime = pxSocket->xReceiveBlockTime;
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	69db      	ldr	r3, [r3, #28]
 800af1e:	61fb      	str	r3, [r7, #28]

			if( xRemainingTime == ( TickType_t ) 0 )
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d10a      	bne.n	800af3c <FreeRTOS_recvfrom+0x68>
			{
				#if( ipconfigSUPPORT_SIGNALS != 0 )
				{
					/* Just check for the interrupt flag. */
					xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_INTR,
 800af26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af28:	6858      	ldr	r0, [r3, #4]
 800af2a:	2300      	movs	r3, #0
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	2300      	movs	r3, #0
 800af30:	2201      	movs	r2, #1
 800af32:	2140      	movs	r1, #64	; 0x40
 800af34:	f7fa fd34 	bl	80059a0 <xEventGroupWaitBits>
 800af38:	62b8      	str	r0, [r7, #40]	; 0x28
						pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, socketDONT_BLOCK );
				}
				#endif /* ipconfigSUPPORT_SIGNALS */
				break;
 800af3a:	e042      	b.n	800afc2 <FreeRTOS_recvfrom+0xee>
			}

			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	f003 0310 	and.w	r3, r3, #16
 800af42:	2b00      	cmp	r3, #0
 800af44:	d136      	bne.n	800afb4 <FreeRTOS_recvfrom+0xe0>
			{
				break;
			}

			/* To ensure this part only executes once. */
			xTimed = pdTRUE;
 800af46:	2301      	movs	r3, #1
 800af48:	633b      	str	r3, [r7, #48]	; 0x30

			/* Fetch the current time. */
			vTaskSetTimeOutState( &xTimeOut );
 800af4a:	f107 0314 	add.w	r3, r7, #20
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fc fe72 	bl	8007c38 <vTaskSetTimeOutState>
		}

		/* Wait for arrival of data.  While waiting, the IP-task may set the
		'eSOCKET_RECEIVE' bit in 'xEventGroup', if it receives data for this
		socket, thus unblocking this API call. */
		xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_RECEIVE | eSOCKET_INTR,
 800af54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af56:	6858      	ldr	r0, [r3, #4]
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	2300      	movs	r3, #0
 800af5e:	2201      	movs	r2, #1
 800af60:	2141      	movs	r1, #65	; 0x41
 800af62:	f7fa fd1d 	bl	80059a0 <xEventGroupWaitBits>
 800af66:	62b8      	str	r0, [r7, #40]	; 0x28
			pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

		#if( ipconfigSUPPORT_SIGNALS != 0 )
		{
			if( ( xEventBits & eSOCKET_INTR ) != 0 )
 800af68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00b      	beq.n	800af8a <FreeRTOS_recvfrom+0xb6>
			{
				if( ( xEventBits & eSOCKET_RECEIVE ) != 0 )
 800af72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af74:	f003 0301 	and.w	r3, r3, #1
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d01d      	beq.n	800afb8 <FreeRTOS_recvfrom+0xe4>
				{
					/* Shouldn't have cleared the eSOCKET_RECEIVE flag. */
					xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	2101      	movs	r1, #1
 800af82:	4618      	mov	r0, r3
 800af84:	f7fa fe0c 	bl	8005ba0 <xEventGroupSetBits>
				}
				break;
 800af88:	e016      	b.n	800afb8 <FreeRTOS_recvfrom+0xe4>
		{
			( void ) xEventBits;
		}
		#endif /* ipconfigSUPPORT_SIGNALS */

		lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800af8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8e:	637b      	str	r3, [r7, #52]	; 0x34

		if( lPacketCount != 0 )
 800af90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af92:	2b00      	cmp	r3, #0
 800af94:	d112      	bne.n	800afbc <FreeRTOS_recvfrom+0xe8>
		{
			break;
		}

		/* Has the timeout been reached ? */
		if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) )
 800af96:	f107 021c 	add.w	r2, r7, #28
 800af9a:	f107 0314 	add.w	r3, r7, #20
 800af9e:	4611      	mov	r1, r2
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fc fe85 	bl	8007cb0 <xTaskCheckForTimeOut>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d109      	bne.n	800afc0 <FreeRTOS_recvfrom+0xec>
	while( lPacketCount == 0 )
 800afac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d0b0      	beq.n	800af14 <FreeRTOS_recvfrom+0x40>
 800afb2:	e006      	b.n	800afc2 <FreeRTOS_recvfrom+0xee>
				break;
 800afb4:	bf00      	nop
 800afb6:	e004      	b.n	800afc2 <FreeRTOS_recvfrom+0xee>
				break;
 800afb8:	bf00      	nop
 800afba:	e002      	b.n	800afc2 <FreeRTOS_recvfrom+0xee>
			break;
 800afbc:	bf00      	nop
 800afbe:	e000      	b.n	800afc2 <FreeRTOS_recvfrom+0xee>
		{
			break;
 800afc0:	bf00      	nop
		}
	} /* while( lPacketCount == 0 ) */

	if( lPacketCount != 0 )
 800afc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d041      	beq.n	800b04c <FreeRTOS_recvfrom+0x178>
	{
		taskENTER_CRITICAL();
 800afc8:	f7fb f8a0 	bl	800610c <vPortEnterCritical>
		{
			/* The owner of the list item is the network buffer. */
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800afcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	623b      	str	r3, [r7, #32]

			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	f003 0304 	and.w	r3, r3, #4
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d103      	bne.n	800afe6 <FreeRTOS_recvfrom+0x112>
			{
				/* Remove the network buffer from the list of buffers waiting to
				be processed by the socket. */
				uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800afde:	6a3b      	ldr	r3, [r7, #32]
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fa ff42 	bl	8005e6a <uxListRemove>
			}
		}
		taskEXIT_CRITICAL();
 800afe6:	f7fb f8bf 	bl	8006168 <vPortExitCritical>

		/* The returned value is the data length, which may have been capped to
		the receive buffer size. */
		lReturn = ( int32_t ) pxNetworkBuffer->xDataLength;
 800afea:	6a3b      	ldr	r3, [r7, #32]
 800afec:	69db      	ldr	r3, [r3, #28]
 800afee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxSourceAddress != NULL )
 800aff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d007      	beq.n	800b006 <FreeRTOS_recvfrom+0x132>
		{
			pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
 800aff6:	6a3b      	ldr	r3, [r7, #32]
 800aff8:	8c1a      	ldrh	r2, [r3, #32]
 800affa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800affc:	805a      	strh	r2, [r3, #2]
			pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
 800affe:	6a3b      	ldr	r3, [r7, #32]
 800b000:	695a      	ldr	r2, [r3, #20]
 800b002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b004:	605a      	str	r2, [r3, #4]
		}

		if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	f003 0301 	and.w	r3, r3, #1
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d116      	bne.n	800b03e <FreeRTOS_recvfrom+0x16a>
		{
			/* The zero copy flag is not set.  Truncate the length if it won't
			fit in the provided buffer. */
			if( lReturn > ( int32_t ) xBufferLength )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b014:	429a      	cmp	r2, r3
 800b016:	dd01      	ble.n	800b01c <FreeRTOS_recvfrom+0x148>
			{
				iptraceRECVFROM_DISCARDING_BYTES( ( xBufferLength - lReturn ) );
				lReturn = ( int32_t )xBufferLength;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

			/* Copy the received data into the provided buffer, then release the
			network buffer. */
			memcpy( pvBuffer, ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ), ( size_t )lReturn );
 800b01c:	6a3b      	ldr	r3, [r7, #32]
 800b01e:	699b      	ldr	r3, [r3, #24]
 800b020:	332a      	adds	r3, #42	; 0x2a
 800b022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b024:	4619      	mov	r1, r3
 800b026:	68b8      	ldr	r0, [r7, #8]
 800b028:	f005 fd61 	bl	8010aee <memcpy>

			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	f003 0304 	and.w	r3, r3, #4
 800b032:	2b00      	cmp	r3, #0
 800b034:	d116      	bne.n	800b064 <FreeRTOS_recvfrom+0x190>
			{
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800b036:	6a38      	ldr	r0, [r7, #32]
 800b038:	f004 fdf0 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
 800b03c:	e012      	b.n	800b064 <FreeRTOS_recvfrom+0x190>
		{
			/* The zero copy flag was set.  pvBuffer is not a buffer into which
			the received data can be copied, but a pointer that must be set to
			point to the buffer in which the received data has already been
			placed. */
			*( ( void** ) pvBuffer ) = ( void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ) );
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	699b      	ldr	r3, [r3, #24]
 800b042:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	601a      	str	r2, [r3, #0]
 800b04a:	e00b      	b.n	800b064 <FreeRTOS_recvfrom+0x190>
		}

	}
#if( ipconfigSUPPORT_SIGNALS != 0 )
	else if( ( xEventBits & eSOCKET_INTR ) != 0 )
 800b04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b052:	2b00      	cmp	r3, #0
 800b054:	d003      	beq.n	800b05e <FreeRTOS_recvfrom+0x18a>
	{
		lReturn = -pdFREERTOS_ERRNO_EINTR;
 800b056:	f06f 0303 	mvn.w	r3, #3
 800b05a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b05c:	e002      	b.n	800b064 <FreeRTOS_recvfrom+0x190>
		iptraceRECVFROM_INTERRUPTED();
	}
#endif /* ipconfigSUPPORT_SIGNALS */
	else
	{
		lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800b05e:	f06f 030a 	mvn.w	r3, #10
 800b062:	62fb      	str	r3, [r7, #44]	; 0x2c
		iptraceRECVFROM_TIMEOUT();
	}

	return lReturn;
 800b064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b066:	4618      	mov	r0, r3
 800b068:	3738      	adds	r7, #56	; 0x38
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <FreeRTOS_sendto>:
/*-----------------------------------------------------------*/

int32_t FreeRTOS_sendto( Socket_t xSocket, const void *pvBuffer, size_t xTotalDataLength, BaseType_t xFlags, const struct freertos_sockaddr *pxDestinationAddress, socklen_t xDestinationAddressLength )
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b08e      	sub	sp, #56	; 0x38
 800b072:	af00      	add	r7, sp, #0
 800b074:	60f8      	str	r0, [r7, #12]
 800b076:	60b9      	str	r1, [r7, #8]
 800b078:	607a      	str	r2, [r7, #4]
 800b07a:	603b      	str	r3, [r7, #0]
NetworkBufferDescriptor_t *pxNetworkBuffer;
IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800b07c:	2303      	movs	r3, #3
 800b07e:	f887 3020 	strb.w	r3, [r7, #32]
 800b082:	2300      	movs	r3, #0
 800b084:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
TickType_t xTicksToWait;
int32_t lReturn = 0;
 800b086:	2300      	movs	r3, #0
 800b088:	633b      	str	r3, [r7, #48]	; 0x30
FreeRTOS_Socket_t *pxSocket;

	pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the
	parameters. */
	( void ) xDestinationAddressLength;
	configASSERT( pvBuffer );
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d109      	bne.n	800b0a8 <FreeRTOS_sendto+0x3a>
 800b094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0a6:	e7fe      	b.n	800b0a6 <FreeRTOS_sendto+0x38>

	if( xTotalDataLength <= ( size_t ) ipMAX_UDP_PAYLOAD_LENGTH )
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 800b0ae:	d875      	bhi.n	800b19c <FreeRTOS_sendto+0x12e>
	{
		/* If the socket is not already bound to an address, bind it now.
		Passing NULL as the address parameter tells FreeRTOS_bind() to select
		the address to bind to. */
		if( ( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE ) ||
 800b0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d107      	bne.n	800b0c8 <FreeRTOS_sendto+0x5a>
			( FreeRTOS_bind( xSocket, NULL, 0u ) == 0 ) )
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f000 f872 	bl	800b1a6 <FreeRTOS_bind>
 800b0c2:	4603      	mov	r3, r0
		if( ( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE ) ||
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d169      	bne.n	800b19c <FreeRTOS_sendto+0x12e>
		{
			xTicksToWait = pxSocket->xSendBlockTime;
 800b0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ca:	6a1b      	ldr	r3, [r3, #32]
 800b0cc:	617b      	str	r3, [r7, #20]
					xTicksToWait = ( TickType_t )0;
				}
			}
			#endif /* ipconfigUSE_CALLBACKS */

			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	f003 0310 	and.w	r3, r3, #16
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d001      	beq.n	800b0dc <FreeRTOS_sendto+0x6e>
			{
				xTicksToWait = ( TickType_t ) 0;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	617b      	str	r3, [r7, #20]
			}

			if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	f003 0301 	and.w	r3, r3, #1
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d125      	bne.n	800b132 <FreeRTOS_sendto+0xc4>
			{
				/* Zero copy is not set, so obtain a network buffer into
				which the payload will be copied. */
				vTaskSetTimeOutState( &xTimeOut );
 800b0e6:	f107 0318 	add.w	r3, r7, #24
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fc fda4 	bl	8007c38 <vTaskSetTimeOutState>

				/* Block until a buffer becomes available, or until a
				timeout has been reached */
				pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( xTotalDataLength + sizeof( UDPPacket_t ), xTicksToWait );
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	332a      	adds	r3, #42	; 0x2a
 800b0f4:	697a      	ldr	r2, [r7, #20]
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f004 fd17 	bl	800fb2c <pxGetNetworkBufferWithDescriptor>
 800b0fe:	6378      	str	r0, [r7, #52]	; 0x34

				if( pxNetworkBuffer != NULL )
 800b100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b102:	2b00      	cmp	r3, #0
 800b104:	d019      	beq.n	800b13a <FreeRTOS_sendto+0xcc>
				{
					memcpy( ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ), ( void * ) pvBuffer, xTotalDataLength );
 800b106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	332a      	adds	r3, #42	; 0x2a
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	68b9      	ldr	r1, [r7, #8]
 800b110:	4618      	mov	r0, r3
 800b112:	f005 fcec 	bl	8010aee <memcpy>

					if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800b116:	f107 0214 	add.w	r2, r7, #20
 800b11a:	f107 0318 	add.w	r3, r7, #24
 800b11e:	4611      	mov	r1, r2
 800b120:	4618      	mov	r0, r3
 800b122:	f7fc fdc5 	bl	8007cb0 <xTaskCheckForTimeOut>
 800b126:	4603      	mov	r3, r0
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d106      	bne.n	800b13a <FreeRTOS_sendto+0xcc>
					{
						/* The entire block time has been used up. */
						xTicksToWait = ( TickType_t ) 0;
 800b12c:	2300      	movs	r3, #0
 800b12e:	617b      	str	r3, [r7, #20]
 800b130:	e003      	b.n	800b13a <FreeRTOS_sendto+0xcc>
			else
			{
				/* When zero copy is used, pvBuffer is a pointer to the
				payload of a buffer that has already been obtained from the
				stack.  Obtain the network buffer pointer from the buffer. */
				pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( (void*)pvBuffer );
 800b132:	68b8      	ldr	r0, [r7, #8]
 800b134:	f7ff f851 	bl	800a1da <pxUDPPayloadBuffer_to_NetworkBuffer>
 800b138:	6378      	str	r0, [r7, #52]	; 0x34
			}

			if( pxNetworkBuffer != NULL )
 800b13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d02d      	beq.n	800b19c <FreeRTOS_sendto+0x12e>
			{
				pxNetworkBuffer->xDataLength = xTotalDataLength;
 800b140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	61da      	str	r2, [r3, #28]
				pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800b146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b148:	885a      	ldrh	r2, [r3, #2]
 800b14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b14c:	841a      	strh	r2, [r3, #32]
				pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800b14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b150:	689b      	ldr	r3, [r3, #8]
 800b152:	b29a      	uxth	r2, r3
 800b154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b156:	845a      	strh	r2, [r3, #34]	; 0x22
				pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
 800b158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b15a:	685a      	ldr	r2, [r3, #4]
 800b15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15e:	615a      	str	r2, [r3, #20]

				/* The socket options are passed to the IP layer in the
				space that will eventually get used by the Ethernet header. */
				pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800b160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b162:	699b      	ldr	r3, [r3, #24]
 800b164:	3306      	adds	r3, #6
 800b166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b168:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800b16c:	701a      	strb	r2, [r3, #0]

				/* Tell the networking task that the packet needs sending. */
				xStackTxEvent.pvData = pxNetworkBuffer;
 800b16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b170:	627b      	str	r3, [r7, #36]	; 0x24

				/* Ask the IP-task to send this packet */
				if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800b172:	697a      	ldr	r2, [r7, #20]
 800b174:	f107 0320 	add.w	r3, r7, #32
 800b178:	4611      	mov	r1, r2
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7ff f95e 	bl	800a43c <xSendEventStructToIPTask>
 800b180:	4603      	mov	r3, r0
 800b182:	2b01      	cmp	r3, #1
 800b184:	d102      	bne.n	800b18c <FreeRTOS_sendto+0x11e>
				{
					/* The packet was successfully sent to the IP task. */
					lReturn = ( int32_t ) xTotalDataLength;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	633b      	str	r3, [r7, #48]	; 0x30
 800b18a:	e007      	b.n	800b19c <FreeRTOS_sendto+0x12e>
				}
				else
				{
					/* If the buffer was allocated in this function, release
					it. */
					if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	f003 0301 	and.w	r3, r3, #1
 800b192:	2b00      	cmp	r3, #0
 800b194:	d102      	bne.n	800b19c <FreeRTOS_sendto+0x12e>
					{
						vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800b196:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b198:	f004 fd40 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
	{
		/* The data is longer than the available buffer space. */
		iptraceSENDTO_DATA_TOO_LONG();
	}

	return lReturn;
 800b19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
} /* Tested */
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3738      	adds	r7, #56	; 0x38
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <FreeRTOS_bind>:
 * be used for both UDP and TCP sockets.  The actual binding will be performed
 * by the IP-task to avoid mutual access to the bound-socket-lists
 * (xBoundUDPSocketsList or xBoundTCPSocketsList).
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket, struct freertos_sockaddr * pxAddress, socklen_t xAddressLength )
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b08a      	sub	sp, #40	; 0x28
 800b1aa:	af02      	add	r7, sp, #8
 800b1ac:	60f8      	str	r0, [r7, #12]
 800b1ae:	60b9      	str	r1, [r7, #8]
 800b1b0:	607a      	str	r2, [r7, #4]
IPStackEvent_t xBindEvent;
FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	61bb      	str	r3, [r7, #24]
BaseType_t xReturn = 0;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	61fb      	str	r3, [r7, #28]

	( void ) xAddressLength;

	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d003      	beq.n	800b1c8 <FreeRTOS_bind+0x22>
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1c6:	d103      	bne.n	800b1d0 <FreeRTOS_bind+0x2a>
	{
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b1c8:	f06f 0315 	mvn.w	r3, #21
 800b1cc:	61fb      	str	r3, [r7, #28]
 800b1ce:	e044      	b.n	800b25a <FreeRTOS_bind+0xb4>
	}
	/* Once a socket is bound to a port, it can not be bound to a different
	port number */
	else if( socketSOCKET_IS_BOUND( pxSocket) != pdFALSE )
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	699b      	ldr	r3, [r3, #24]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d001      	beq.n	800b1dc <FreeRTOS_bind+0x36>
 800b1d8:	2301      	movs	r3, #1
 800b1da:	e000      	b.n	800b1de <FreeRTOS_bind+0x38>
 800b1dc:	2300      	movs	r3, #0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d003      	beq.n	800b1ea <FreeRTOS_bind+0x44>
	{
		/* The socket is already bound. */
		FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b1e2:	f06f 0315 	mvn.w	r3, #21
 800b1e6:	61fb      	str	r3, [r7, #28]
 800b1e8:	e037      	b.n	800b25a <FreeRTOS_bind+0xb4>
	}
	else
	{
		/* Prepare a messages to the IP-task in order to perform the binding.
		The desired port number will be passed in usLocalPort. */
		xBindEvent.eEventType = eSocketBindEvent;
 800b1ea:	2308      	movs	r3, #8
 800b1ec:	743b      	strb	r3, [r7, #16]
		xBindEvent.pvData = ( void * ) xSocket;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	617b      	str	r3, [r7, #20]
		if( pxAddress != NULL )
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00e      	beq.n	800b216 <FreeRTOS_bind+0x70>
		{
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	885b      	ldrh	r3, [r3, #2]
 800b1fc:	021b      	lsls	r3, r3, #8
 800b1fe:	b21a      	sxth	r2, r3
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	885b      	ldrh	r3, [r3, #2]
 800b204:	0a1b      	lsrs	r3, r3, #8
 800b206:	b29b      	uxth	r3, r3
 800b208:	b21b      	sxth	r3, r3
 800b20a:	4313      	orrs	r3, r2
 800b20c:	b21b      	sxth	r3, r3
 800b20e:	b29a      	uxth	r2, r3
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	849a      	strh	r2, [r3, #36]	; 0x24
 800b214:	e002      	b.n	800b21c <FreeRTOS_bind+0x76>
		}
		else
		{
			/* Caller wants to bind to a random port number. */
			pxSocket->usLocalPort = 0u;
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	2200      	movs	r2, #0
 800b21a:	849a      	strh	r2, [r3, #36]	; 0x24
		}

		/* portMAX_DELAY is used as a the time-out parameter, as binding *must*
		succeed before the socket can be used.  _RB_ The use of an infinite
		block time needs be changed as it could result in the task hanging. */
		if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800b21c:	f107 0310 	add.w	r3, r7, #16
 800b220:	f04f 31ff 	mov.w	r1, #4294967295
 800b224:	4618      	mov	r0, r3
 800b226:	f7ff f909 	bl	800a43c <xSendEventStructToIPTask>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d103      	bne.n	800b238 <FreeRTOS_bind+0x92>
		{
			/* Failed to wake-up the IP-task, no use to wait for it */
			FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
			xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800b230:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b234:	61fb      	str	r3, [r7, #28]
 800b236:	e010      	b.n	800b25a <FreeRTOS_bind+0xb4>
		}
		else
		{
			/* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
			job. */
			xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	6858      	ldr	r0, [r3, #4]
 800b23c:	f04f 33ff 	mov.w	r3, #4294967295
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	2300      	movs	r3, #0
 800b244:	2201      	movs	r2, #1
 800b246:	2110      	movs	r1, #16
 800b248:	f7fa fbaa 	bl	80059a0 <xEventGroupWaitBits>
			if( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE )
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	699b      	ldr	r3, [r3, #24]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d102      	bne.n	800b25a <FreeRTOS_bind+0xb4>
			{
				xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b254:	f06f 0315 	mvn.w	r3, #21
 800b258:	61fb      	str	r3, [r7, #28]
			}
		}
	}

	return xReturn;
 800b25a:	69fb      	ldr	r3, [r7, #28]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3720      	adds	r7, #32
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <vSocketBind>:
 * vSocketBind(): internal version of bind() that should not be called directly.
 * 'xInternal' is used for TCP sockets only: it allows to have several
 * (connected) child sockets bound to the same server port.
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t *pxSocket, struct freertos_sockaddr * pxAddress, size_t uxAddressLength, BaseType_t xInternal )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b08c      	sub	sp, #48	; 0x30
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
 800b270:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800b272:	2300      	movs	r3, #0
 800b274:	62fb      	str	r3, [r7, #44]	; 0x2c
#if( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
	struct freertos_sockaddr xAddress;
#endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

#if( ipconfigUSE_TCP == 1 )
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b27c:	2b06      	cmp	r3, #6
 800b27e:	d102      	bne.n	800b286 <vSocketBind+0x22>
	{
		pxSocketList = &xBoundTCPSocketsList;
 800b280:	4b3e      	ldr	r3, [pc, #248]	; (800b37c <vSocketBind+0x118>)
 800b282:	62bb      	str	r3, [r7, #40]	; 0x28
 800b284:	e001      	b.n	800b28a <vSocketBind+0x26>
	}
	else
#endif  /* ipconfigUSE_TCP == 1 */
	{
		pxSocketList = &xBoundUDPSocketsList;
 800b286:	4b3e      	ldr	r3, [pc, #248]	; (800b380 <vSocketBind+0x11c>)
 800b288:	62bb      	str	r3, [r7, #40]	; 0x28

	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the parameters. */
	( void ) uxAddressLength;

	configASSERT( pxSocket );
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d109      	bne.n	800b2a4 <vSocketBind+0x40>
 800b290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b294:	f383 8811 	msr	BASEPRI, r3
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b2a2:	e7fe      	b.n	800b2a2 <vSocketBind+0x3e>
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2aa:	d109      	bne.n	800b2c0 <vSocketBind+0x5c>
 800b2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b0:	f383 8811 	msr	BASEPRI, r3
 800b2b4:	f3bf 8f6f 	isb	sy
 800b2b8:	f3bf 8f4f 	dsb	sy
 800b2bc:	623b      	str	r3, [r7, #32]
 800b2be:	e7fe      	b.n	800b2be <vSocketBind+0x5a>
		/* pxAddress will be NULL if sendto() was called on a socket without the
		socket being bound to an address.  In this case, automatically allocate
		an address to the socket.  There is a very tiny chance that the allocated
		port will already be in use - if that is the case, then the check below
		[pxListFindListItemWithValue()] will result in an error being returned. */
		if( pxAddress == NULL )
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d105      	bne.n	800b2d2 <vSocketBind+0x6e>
		{
			pxAddress = &xAddress;
 800b2c6:	f107 0314 	add.w	r3, r7, #20
 800b2ca:	60bb      	str	r3, [r7, #8]
			/* For now, put it to zero, will be assigned later */
			pxAddress->sin_port = 0u;
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	805a      	strh	r2, [r3, #2]
	}
	#endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

	/* Sockets must be bound before calling FreeRTOS_sendto() if
	ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
	configASSERT( pxAddress );
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d109      	bne.n	800b2ec <vSocketBind+0x88>
 800b2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	61fb      	str	r3, [r7, #28]
 800b2ea:	e7fe      	b.n	800b2ea <vSocketBind+0x86>

	if( pxAddress != NULL )
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d03c      	beq.n	800b36c <vSocketBind+0x108>
	{
		if( pxAddress->sin_port == 0u )
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	885b      	ldrh	r3, [r3, #2]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d109      	bne.n	800b30e <vSocketBind+0xaa>
		{
			pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b300:	4618      	mov	r0, r3
 800b302:	f000 fa9f 	bl	800b844 <prvGetPrivatePortNumber>
 800b306:	4603      	mov	r3, r0
 800b308:	461a      	mov	r2, r3
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	805a      	strh	r2, [r3, #2]
		confirmed that the socket was not yet bound to a port.  If it is called
		from the IP-task, no such check is necessary. */

		/* Check to ensure the port is not already in use.  If the bind is
		called internally, a port MAY be used by more than one socket. */
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d004      	beq.n	800b31e <vSocketBind+0xba>
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b31a:	2b06      	cmp	r3, #6
 800b31c:	d00c      	beq.n	800b338 <vSocketBind+0xd4>
			( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	885b      	ldrh	r3, [r3, #2]
 800b322:	4619      	mov	r1, r3
 800b324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b326:	f000 fad9 	bl	800b8dc <pxListFindListItemWithValue>
 800b32a:	4603      	mov	r3, r0
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d003      	beq.n	800b338 <vSocketBind+0xd4>
		{
			FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
				pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ? "TC" : "UD",
				FreeRTOS_ntohs( pxAddress->sin_port ) ) );
			xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800b330:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800b334:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b336:	e01c      	b.n	800b372 <vSocketBind+0x10e>
		}
		else
		{
			/* Allocate the port number to the socket.
			This macro will set 'xBoundSocketListItem->xItemValue' */
			socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	885b      	ldrh	r3, [r3, #2]
 800b33c:	461a      	mov	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	609a      	str	r2, [r3, #8]

			/* And also store it in a socket field 'usLocalPort' in host-byte-order,
			mostly used for logging and debugging purposes */
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	885b      	ldrh	r3, [r3, #2]
 800b346:	021b      	lsls	r3, r3, #8
 800b348:	b21a      	sxth	r2, r3
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	885b      	ldrh	r3, [r3, #2]
 800b34e:	0a1b      	lsrs	r3, r3, #8
 800b350:	b29b      	uxth	r3, r3
 800b352:	b21b      	sxth	r3, r3
 800b354:	4313      	orrs	r3, r2
 800b356:	b21b      	sxth	r3, r3
 800b358:	b29a      	uxth	r2, r3
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	849a      	strh	r2, [r3, #36]	; 0x24
					vTaskSuspendAll();
				}
				#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

				/* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
				vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3308      	adds	r3, #8
 800b362:	4619      	mov	r1, r3
 800b364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b366:	f7fa fd23 	bl	8005db0 <vListInsertEnd>
 800b36a:	e002      	b.n	800b372 <vSocketBind+0x10e>
			}
		}
	}
	else
	{
		xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800b36c:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800b370:	62fb      	str	r3, [r7, #44]	; 0x2c
	if( xReturn != 0 )
	{
		iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
	}

	return xReturn;
 800b372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
} /* Tested */
 800b374:	4618      	mov	r0, r3
 800b376:	3730      	adds	r7, #48	; 0x30
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	20005474 	.word	0x20005474
 800b380:	20005488 	.word	0x20005488

0800b384 <FreeRTOS_closesocket>:
 * In case of a TCP socket: the connection will not be closed automatically
 * Subsequent messages for the closed socket will be responded to with a RST
 * The IP-task will actually close the socket, after receiving a 'eSocketCloseEvent' message
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b086      	sub	sp, #24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
BaseType_t xResult;
#if( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 )
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * )xSocket;
#endif
IPStackEvent_t xCloseEvent;
xCloseEvent.eEventType = eSocketCloseEvent;
 800b38c:	2309      	movs	r3, #9
 800b38e:	733b      	strb	r3, [r7, #12]
xCloseEvent.pvData = ( void * ) xSocket;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	613b      	str	r3, [r7, #16]

	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d003      	beq.n	800b3a2 <FreeRTOS_closesocket+0x1e>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a0:	d102      	bne.n	800b3a8 <FreeRTOS_closesocket+0x24>
	{
		xResult = 0;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	617b      	str	r3, [r7, #20]
 800b3a6:	e00e      	b.n	800b3c6 <FreeRTOS_closesocket+0x42>
		packet handling. */

		/* Note when changing the time-out value below, it must be checked who is calling
		this function. If it is called by the IP-task, a deadlock could occur.
		The IP-task would only call it in case of a user call-back */
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 800b3a8:	f107 030c 	add.w	r3, r7, #12
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7ff f844 	bl	800a43c <xSendEventStructToIPTask>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d103      	bne.n	800b3c2 <FreeRTOS_closesocket+0x3e>
		{
			FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
			xResult = -1;
 800b3ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b3be:	617b      	str	r3, [r7, #20]
 800b3c0:	e001      	b.n	800b3c6 <FreeRTOS_closesocket+0x42>
		}
		else
		{
			xResult = 1;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	617b      	str	r3, [r7, #20]
		}
	}

	return xResult;
 800b3c6:	697b      	ldr	r3, [r7, #20]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3718      	adds	r7, #24
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <vSocketClose>:

/* This is the internal version of FreeRTOS_closesocket()
 * It will be called by the IPtask only to avoid problems with synchronicity
 */
void *vSocketClose( FreeRTOS_Socket_t *pxSocket )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
NetworkBufferDescriptor_t *pxNetworkBuffer;

	#if( ipconfigUSE_TCP == 1 )
	{
		/* For TCP: clean up a little more. */
		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b3de:	2b06      	cmp	r3, #6
 800b3e0:	d122      	bne.n	800b428 <vSocketClose+0x58>
		{
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d004      	beq.n	800b3f4 <vSocketClose+0x24>
				{
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f004 fc14 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
				}
				/* Free the resources which were claimed by the tcpWin member */
				vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	33dc      	adds	r3, #220	; 0xdc
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f003 fc1b 	bl	800ec34 <vTCPWindowDestroy>
			}
			#endif /* ipconfigUSE_TCP_WIN */

			/* Free the input and output streams */
			if( pxSocket->u.xTCP.rxStream != NULL )
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b402:	2b00      	cmp	r3, #0
 800b404:	d004      	beq.n	800b410 <vSocketClose+0x40>
			{
				vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fb f85a 	bl	80064c4 <vPortFree>
			}

			if( pxSocket->u.xTCP.txStream != NULL )
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b414:	2b00      	cmp	r3, #0
 800b416:	d004      	beq.n	800b422 <vSocketClose+0x52>
			{
				vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fb f851 	bl	80064c4 <vPortFree>
			}

			/* In case this is a child socket, make sure the child-count of the
			parent socket is decreased. */
			prvTCPSetSocketCount( pxSocket );
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 f834 	bl	800b490 <prvTCPSetSocketCount>
	}
	#endif  /* ipconfigUSE_TCP == 1 */

	/* Socket must be unbound first, to ensure no more packets are queued on
	it. */
	if( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE )
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	699b      	ldr	r3, [r3, #24]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d001      	beq.n	800b434 <vSocketClose+0x64>
 800b430:	2301      	movs	r3, #1
 800b432:	e000      	b.n	800b436 <vSocketClose+0x66>
 800b434:	2300      	movs	r3, #0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d004      	beq.n	800b444 <vSocketClose+0x74>
		{
			vTaskSuspendAll();
		}
		#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

		uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	3308      	adds	r3, #8
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fa fd13 	bl	8005e6a <uxListRemove>
		#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
	}

	/* Now the socket is not bound the list of waiting packets can be
	drained. */
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b44a:	2b11      	cmp	r3, #17
 800b44c:	d10f      	bne.n	800b46e <vSocketClose+0x9e>
	{
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800b44e:	e00a      	b.n	800b466 <vSocketClose+0x96>
		{
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	60fb      	str	r3, [r7, #12]
			uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fa fd05 	bl	8005e6a <uxListRemove>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f004 fbdb 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1f0      	bne.n	800b450 <vSocketClose+0x80>
		}
	}

	if( pxSocket->xEventGroup )
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d004      	beq.n	800b480 <vSocketClose+0xb0>
	{
		vEventGroupDelete( pxSocket->xEventGroup );
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fa fc19 	bl	8005cb2 <vEventGroupDelete>
		}
	}
	#endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

	/* Anf finally, after all resources have been freed, free the socket space */
	vPortFreeSocket( pxSocket );
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f7fb f81f 	bl	80064c4 <vPortFree>

	return 0;
 800b486:	2300      	movs	r3, #0
} /* Tested */
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <prvTCPSetSocketCount>:
	 * When a child socket gets closed, make sure to update the child-count of the
	 * parent.  When a listening parent socket is closed, make sure no child-sockets
	 * keep a pointer to it.
	 */
	static void prvTCPSetSocketCount( FreeRTOS_Socket_t *pxSocketToDelete )
	{
 800b490:	b480      	push	{r7}
 800b492:	b087      	sub	sp, #28
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
	const ListItem_t *pxIterator;
	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800b498:	4b18      	ldr	r3, [pc, #96]	; (800b4fc <prvTCPSetSocketCount+0x6c>)
 800b49a:	613b      	str	r3, [r7, #16]
	FreeRTOS_Socket_t *pxOtherSocket;
	uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b4a0:	81fb      	strh	r3, [r7, #14]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	617b      	str	r3, [r7, #20]
 800b4a8:	e01d      	b.n	800b4e6 <prvTCPSetSocketCount+0x56>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxOtherSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	60bb      	str	r3, [r7, #8]
			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d112      	bne.n	800b4e0 <prvTCPSetSocketCount+0x50>
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
 800b4be:	89fa      	ldrh	r2, [r7, #14]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d10d      	bne.n	800b4e0 <prvTCPSetSocketCount+0x50>
				( pxOtherSocket->u.xTCP.usChildCount ) )
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d008      	beq.n	800b4e0 <prvTCPSetSocketCount+0x50>
			{
				pxOtherSocket->u.xTCP.usChildCount--;
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	b29a      	uxth	r2, r3
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
				FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
					pxOtherSocket->usLocalPort,
					pxOtherSocket->u.xTCP.usChildCount,
					pxOtherSocket->u.xTCP.usBacklog,
					pxOtherSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );
				break;
 800b4de:	e006      	b.n	800b4ee <prvTCPSetSocketCount+0x5e>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	617b      	str	r3, [r7, #20]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d1dd      	bne.n	800b4aa <prvTCPSetSocketCount+0x1a>
			}
		}
	}
 800b4ee:	bf00      	nop
 800b4f0:	371c      	adds	r7, #28
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	2000547c 	.word	0x2000547c

0800b500 <FreeRTOS_setsockopt>:
#endif /* ipconfigUSE_TCP == 1 */

/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_setsockopt( Socket_t xSocket, int32_t lLevel, int32_t lOptionName, const void *pvOptionValue, size_t xOptionLength )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b08c      	sub	sp, #48	; 0x30
 800b504:	af02      	add	r7, sp, #8
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
 800b50c:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b50e:	f06f 0315 	mvn.w	r3, #21
 800b512:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t lOptionValue;
FreeRTOS_Socket_t *pxSocket;

	pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	623b      	str	r3, [r7, #32]
	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the parameters. */
	( void ) lLevel;
	( void ) xOptionLength;

	configASSERT( xSocket );
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d109      	bne.n	800b532 <FreeRTOS_setsockopt+0x32>
 800b51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	613b      	str	r3, [r7, #16]
 800b530:	e7fe      	b.n	800b530 <FreeRTOS_setsockopt+0x30>

	switch( lOptionName )
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2b0f      	cmp	r3, #15
 800b536:	f200 8171 	bhi.w	800b81c <FreeRTOS_setsockopt+0x31c>
 800b53a:	a201      	add	r2, pc, #4	; (adr r2, 800b540 <FreeRTOS_setsockopt+0x40>)
 800b53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b540:	0800b581 	.word	0x0800b581
 800b544:	0800b58f 	.word	0x0800b58f
 800b548:	0800b5bb 	.word	0x0800b5bb
 800b54c:	0800b81d 	.word	0x0800b81d
 800b550:	0800b5f1 	.word	0x0800b5f1
 800b554:	0800b5f1 	.word	0x0800b5f1
 800b558:	0800b81d 	.word	0x0800b81d
 800b55c:	0800b81d 	.word	0x0800b81d
 800b560:	0800b81d 	.word	0x0800b81d
 800b564:	0800b81d 	.word	0x0800b81d
 800b568:	0800b81d 	.word	0x0800b81d
 800b56c:	0800b6f3 	.word	0x0800b6f3
 800b570:	0800b72b 	.word	0x0800b72b
 800b574:	0800b64d 	.word	0x0800b64d
 800b578:	0800b761 	.word	0x0800b761
 800b57c:	0800b7cb 	.word	0x0800b7cb
	{
		case FREERTOS_SO_RCVTIMEO	:
			/* Receive time out. */
			pxSocket->xReceiveBlockTime = *( ( TickType_t * ) pvOptionValue );
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	6a3b      	ldr	r3, [r7, #32]
 800b586:	61da      	str	r2, [r3, #28]
			xReturn = 0;
 800b588:	2300      	movs	r3, #0
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800b58c:	e155      	b.n	800b83a <FreeRTOS_setsockopt+0x33a>

		case FREERTOS_SO_SNDTIMEO	:
			pxSocket->xSendBlockTime = *( ( TickType_t * ) pvOptionValue );
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	6a3b      	ldr	r3, [r7, #32]
 800b594:	621a      	str	r2, [r3, #32]
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800b596:	6a3b      	ldr	r3, [r7, #32]
 800b598:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b59c:	2b11      	cmp	r3, #17
 800b59e:	d109      	bne.n	800b5b4 <FreeRTOS_setsockopt+0xb4>
			{
				/* The send time out is capped for the reason stated in the
				comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
				in FreeRTOSIPConfig.h (assuming an official configuration file
				is being used. */
				if( pxSocket->xSendBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800b5a0:	6a3b      	ldr	r3, [r7, #32]
 800b5a2:	6a1b      	ldr	r3, [r3, #32]
 800b5a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d903      	bls.n	800b5b4 <FreeRTOS_setsockopt+0xb4>
				{
					pxSocket->xSendBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800b5ac:	6a3b      	ldr	r3, [r7, #32]
 800b5ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5b2:	621a      	str	r2, [r3, #32]
			{
				/* For TCP socket, it isn't necessary to limit the blocking time
				because	the FreeRTOS_send() function does not wait for a network
				buffer to become available. */
			}
			xReturn = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800b5b8:	e13f      	b.n	800b83a <FreeRTOS_setsockopt+0x33a>
				break;
		#endif /* ipconfigUDP_MAX_RX_PACKETS */

		case FREERTOS_SO_UDPCKSUM_OUT :
			/* Turn calculating of the UDP checksum on/off for this socket. */
			lOptionValue = ( BaseType_t ) pvOptionValue;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	61fb      	str	r3, [r7, #28]

			if( lOptionValue == 0 )
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d109      	bne.n	800b5d8 <FreeRTOS_setsockopt+0xd8>
			{
				pxSocket->ucSocketOptions &= ( uint8_t ) ~FREERTOS_SO_UDPCKSUM_OUT;
 800b5c4:	6a3b      	ldr	r3, [r7, #32]
 800b5c6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b5ca:	f023 0302 	bic.w	r3, r3, #2
 800b5ce:	b2da      	uxtb	r2, r3
 800b5d0:	6a3b      	ldr	r3, [r7, #32]
 800b5d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800b5d6:	e008      	b.n	800b5ea <FreeRTOS_setsockopt+0xea>
			}
			else
			{
				pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800b5d8:	6a3b      	ldr	r3, [r7, #32]
 800b5da:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b5de:	f043 0302 	orr.w	r3, r3, #2
 800b5e2:	b2da      	uxtb	r2, r3
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
 800b5e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			}
			xReturn = 0;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800b5ee:	e124      	b.n	800b83a <FreeRTOS_setsockopt+0x33a>
			case FREERTOS_SO_SNDBUF:	/* Set the size of the send buffer, in units of MSS (TCP only) */
			case FREERTOS_SO_RCVBUF:	/* Set the size of the receive buffer, in units of MSS (TCP only) */
				{
					uint32_t ulNewValue;

					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b5f0:	6a3b      	ldr	r3, [r7, #32]
 800b5f2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b5f6:	2b06      	cmp	r3, #6
 800b5f8:	f040 8114 	bne.w	800b824 <FreeRTOS_setsockopt+0x324>
						FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
							( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2b04      	cmp	r3, #4
 800b600:	d104      	bne.n	800b60c <FreeRTOS_setsockopt+0x10c>
 800b602:	6a3b      	ldr	r3, [r7, #32]
 800b604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b606:	2b00      	cmp	r3, #0
 800b608:	f040 8117 	bne.w	800b83a <FreeRTOS_setsockopt+0x33a>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b05      	cmp	r3, #5
 800b610:	d104      	bne.n	800b61c <FreeRTOS_setsockopt+0x11c>
						( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800b612:	6a3b      	ldr	r3, [r7, #32]
 800b614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b616:	2b00      	cmp	r3, #0
 800b618:	f040 810f 	bne.w	800b83a <FreeRTOS_setsockopt+0x33a>
						FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
							( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					ulNewValue = *( ( uint32_t * ) pvOptionValue );
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	61bb      	str	r3, [r7, #24]

					if( lOptionName == FREERTOS_SO_SNDBUF )
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2b04      	cmp	r3, #4
 800b626:	d10b      	bne.n	800b640 <FreeRTOS_setsockopt+0x140>
					{
						/* Round up to nearest MSS size */
						ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800b628:	6a3b      	ldr	r3, [r7, #32]
 800b62a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800b62e:	4619      	mov	r1, r3
 800b630:	69b8      	ldr	r0, [r7, #24]
 800b632:	f7ff fa55 	bl	800aae0 <FreeRTOS_round_up>
 800b636:	61b8      	str	r0, [r7, #24]
						pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800b638:	6a3b      	ldr	r3, [r7, #32]
 800b63a:	69ba      	ldr	r2, [r7, #24]
 800b63c:	671a      	str	r2, [r3, #112]	; 0x70
 800b63e:	e002      	b.n	800b646 <FreeRTOS_setsockopt+0x146>
					}
					else
					{
						pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800b640:	6a3b      	ldr	r3, [r7, #32]
 800b642:	69ba      	ldr	r2, [r7, #24]
 800b644:	66da      	str	r2, [r3, #108]	; 0x6c
					}
				}
				xReturn = 0;
 800b646:	2300      	movs	r3, #0
 800b648:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b64a:	e0f6      	b.n	800b83a <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_WIN_PROPERTIES:	/* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
				{
					WinProperties_t* pxProps;

					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b64c:	6a3b      	ldr	r3, [r7, #32]
 800b64e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b652:	2b06      	cmp	r3, #6
 800b654:	f040 80e8 	bne.w	800b828 <FreeRTOS_setsockopt+0x328>
					{
						FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( ( pxSocket->u.xTCP.txStream != NULL ) || ( pxSocket->u.xTCP.rxStream != NULL ) )
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f040 80ec 	bne.w	800b83a <FreeRTOS_setsockopt+0x33a>
 800b662:	6a3b      	ldr	r3, [r7, #32]
 800b664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b666:	2b00      	cmp	r3, #0
 800b668:	f040 80e7 	bne.w	800b83a <FreeRTOS_setsockopt+0x33a>
					{
						FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: buffer already created\n" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					pxProps = ( ( WinProperties_t * ) pvOptionValue );
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	617b      	str	r3, [r7, #20]
					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ), sizeof( pxProps->lTxBufSize ) );
 800b670:	697a      	ldr	r2, [r7, #20]
 800b672:	2304      	movs	r3, #4
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	4613      	mov	r3, r2
 800b678:	2204      	movs	r2, #4
 800b67a:	2100      	movs	r1, #0
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f7ff ff3f 	bl	800b500 <FreeRTOS_setsockopt>
					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ), sizeof( pxProps->lRxBufSize ) );
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	f103 0208 	add.w	r2, r3, #8
 800b688:	2304      	movs	r3, #4
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	4613      	mov	r3, r2
 800b68e:	2205      	movs	r2, #5
 800b690:	2100      	movs	r1, #0
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f7ff ff34 	bl	800b500 <FreeRTOS_setsockopt>
					#if( ipconfigUSE_TCP_WIN == 1 )
					{
						pxSocket->u.xTCP.uxRxWinSize = ( uint32_t )pxProps->lRxWinSize;	/* Fixed value: size of the TCP reception window */
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	461a      	mov	r2, r3
 800b69e:	6a3b      	ldr	r3, [r7, #32]
 800b6a0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize = ( uint32_t )pxProps->lTxWinSize;	/* Fixed value: size of the TCP transmit window */
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	6a3b      	ldr	r3, [r7, #32]
 800b6ac:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
					}
					#endif

					/* In case the socket has already initialised its tcpWin,
					adapt the window size parameters */
					if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800b6b0:	6a3b      	ldr	r3, [r7, #32]
 800b6b2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800b6b6:	f003 0301 	and.w	r3, r3, #1
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d015      	beq.n	800b6ec <FreeRTOS_setsockopt+0x1ec>
					{
						pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxRxWinSize * pxSocket->u.xTCP.usInitMSS;
 800b6c0:	6a3b      	ldr	r3, [r7, #32]
 800b6c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b6c6:	6a3a      	ldr	r2, [r7, #32]
 800b6c8:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800b6cc:	fb02 f203 	mul.w	r2, r2, r3
 800b6d0:	6a3b      	ldr	r3, [r7, #32]
 800b6d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
						pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxTxWinSize * pxSocket->u.xTCP.usInitMSS;
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b6dc:	6a3a      	ldr	r2, [r7, #32]
 800b6de:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800b6e2:	fb02 f203 	mul.w	r2, r2, r3
 800b6e6:	6a3b      	ldr	r3, [r7, #32]
 800b6e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
					}
				}

				xReturn = 0;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b6f0:	e0a3      	b.n	800b83a <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_REUSE_LISTEN_SOCKET:	/* If true, the server-socket will turn into a connected socket */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b6f2:	6a3b      	ldr	r3, [r7, #32]
 800b6f4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b6f8:	2b06      	cmp	r3, #6
 800b6fa:	f040 8097 	bne.w	800b82c <FreeRTOS_setsockopt+0x32c>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}
					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d007      	beq.n	800b716 <FreeRTOS_setsockopt+0x216>
					{
						pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800b706:	6a3a      	ldr	r2, [r7, #32]
 800b708:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b70c:	f043 0308 	orr.w	r3, r3, #8
 800b710:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800b714:	e006      	b.n	800b724 <FreeRTOS_setsockopt+0x224>
					}
					else
					{
						pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800b716:	6a3a      	ldr	r2, [r7, #32]
 800b718:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b71c:	f36f 03c3 	bfc	r3, #3, #1
 800b720:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
					}
				}
				xReturn = 0;
 800b724:	2300      	movs	r3, #0
 800b726:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b728:	e087      	b.n	800b83a <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_CLOSE_AFTER_SEND:		/* As soon as the last byte has been transmitted, finalise the connection */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b72a:	6a3b      	ldr	r3, [r7, #32]
 800b72c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b730:	2b06      	cmp	r3, #6
 800b732:	d17d      	bne.n	800b830 <FreeRTOS_setsockopt+0x330>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d007      	beq.n	800b74c <FreeRTOS_setsockopt+0x24c>
					{
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800b73c:	6a3a      	ldr	r2, [r7, #32]
 800b73e:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b742:	f043 0310 	orr.w	r3, r3, #16
 800b746:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800b74a:	e006      	b.n	800b75a <FreeRTOS_setsockopt+0x25a>
					}
					else
					{
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800b74c:	6a3a      	ldr	r2, [r7, #32]
 800b74e:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b752:	f36f 1304 	bfc	r3, #4, #1
 800b756:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
					}
				}
				xReturn = 0;
 800b75a:	2300      	movs	r3, #0
 800b75c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b75e:	e06c      	b.n	800b83a <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_SET_FULL_SIZE:		/* Refuse to send packets smaller than MSS  */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b760:	6a3b      	ldr	r3, [r7, #32]
 800b762:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b766:	2b06      	cmp	r3, #6
 800b768:	d164      	bne.n	800b834 <FreeRTOS_setsockopt+0x334>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d007      	beq.n	800b782 <FreeRTOS_setsockopt+0x282>
					{
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800b772:	6a3a      	ldr	r2, [r7, #32]
 800b774:	f892 30dc 	ldrb.w	r3, [r2, #220]	; 0xdc
 800b778:	f043 0302 	orr.w	r3, r3, #2
 800b77c:	f882 30dc 	strb.w	r3, [r2, #220]	; 0xdc
 800b780:	e006      	b.n	800b790 <FreeRTOS_setsockopt+0x290>
					}
					else
					{
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800b782:	6a3a      	ldr	r2, [r7, #32]
 800b784:	f892 30dc 	ldrb.w	r3, [r2, #220]	; 0xdc
 800b788:	f36f 0341 	bfc	r3, #1, #1
 800b78c:	f882 30dc 	strb.w	r3, [r2, #220]	; 0xdc
					}

					if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 800b790:	6a3b      	ldr	r3, [r7, #32]
 800b792:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800b796:	f003 0302 	and.w	r3, r3, #2
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d111      	bne.n	800b7c4 <FreeRTOS_setsockopt+0x2c4>
						( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800b7a0:	6a3b      	ldr	r3, [r7, #32]
 800b7a2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
					if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 800b7a6:	2b04      	cmp	r3, #4
 800b7a8:	d90c      	bls.n	800b7c4 <FreeRTOS_setsockopt+0x2c4>
						( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800b7aa:	6a38      	ldr	r0, [r7, #32]
 800b7ac:	f000 fabd 	bl	800bd2a <FreeRTOS_tx_size>
 800b7b0:	4603      	mov	r3, r0
						( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d006      	beq.n	800b7c4 <FreeRTOS_setsockopt+0x2c4>
					{
						pxSocket->u.xTCP.usTimeout = 1u; /* to set/clear bSendFullSize */
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
						xSendEventToIPTask( eTCPTimerEvent );
 800b7be:	2005      	movs	r0, #5
 800b7c0:	f7fe fe26 	bl	800a410 <xSendEventToIPTask>
					}
				}
				xReturn = 0;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b7c8:	e037      	b.n	800b83a <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_STOP_RX:		/* Refuse to receive more packts */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b7ca:	6a3b      	ldr	r3, [r7, #32]
 800b7cc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b7d0:	2b06      	cmp	r3, #6
 800b7d2:	d131      	bne.n	800b838 <FreeRTOS_setsockopt+0x338>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d007      	beq.n	800b7ec <FreeRTOS_setsockopt+0x2ec>
					{
						pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800b7dc:	6a3a      	ldr	r2, [r7, #32]
 800b7de:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800b7e2:	f043 0304 	orr.w	r3, r3, #4
 800b7e6:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
 800b7ea:	e006      	b.n	800b7fa <FreeRTOS_setsockopt+0x2fa>
					}
					else
					{
						pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800b7ec:	6a3a      	ldr	r2, [r7, #32]
 800b7ee:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800b7f2:	f36f 0382 	bfc	r3, #2, #1
 800b7f6:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
					}

					pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800b7fa:	6a3a      	ldr	r2, [r7, #32]
 800b7fc:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800b800:	f043 0301 	orr.w	r3, r3, #1
 800b804:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = 1u; /* to set/clear bRxStopped */
 800b808:	6a3b      	ldr	r3, [r7, #32]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
					xSendEventToIPTask( eTCPTimerEvent );
 800b810:	2005      	movs	r0, #5
 800b812:	f7fe fdfd 	bl	800a410 <xSendEventToIPTask>
				}
				xReturn = 0;
 800b816:	2300      	movs	r3, #0
 800b818:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b81a:	e00e      	b.n	800b83a <FreeRTOS_setsockopt+0x33a>

		#endif  /* ipconfigUSE_TCP == 1 */

		default :
			/* No other options are handled. */
			xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800b81c:	f06f 036c 	mvn.w	r3, #108	; 0x6c
 800b820:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800b822:	e00a      	b.n	800b83a <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b824:	bf00      	nop
 800b826:	e008      	b.n	800b83a <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b828:	bf00      	nop
 800b82a:	e006      	b.n	800b83a <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b82c:	bf00      	nop
 800b82e:	e004      	b.n	800b83a <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b830:	bf00      	nop
 800b832:	e002      	b.n	800b83a <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b834:	bf00      	nop
 800b836:	e000      	b.n	800b83a <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b838:	bf00      	nop
	}

	return xReturn;
 800b83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
} /* Tested */
 800b83c:	4618      	mov	r0, r3
 800b83e:	3728      	adds	r7, #40	; 0x28
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <prvGetPrivatePortNumber>:

/*-----------------------------------------------------------*/

/* Get a free private ('anonymous') port number */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
uint16_t usResult;
BaseType_t xIndex;
const List_t *pxList;

#if ipconfigUSE_TCP == 1
	if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b06      	cmp	r3, #6
 800b850:	d104      	bne.n	800b85c <prvGetPrivatePortNumber+0x18>
	{
		xIndex = socketNEXT_TCP_PORT_NUMBER_INDEX;
 800b852:	2301      	movs	r3, #1
 800b854:	617b      	str	r3, [r7, #20]
		pxList = &xBoundTCPSocketsList;
 800b856:	4b1e      	ldr	r3, [pc, #120]	; (800b8d0 <prvGetPrivatePortNumber+0x8c>)
 800b858:	613b      	str	r3, [r7, #16]
 800b85a:	e003      	b.n	800b864 <prvGetPrivatePortNumber+0x20>
	}
	else
#endif
	{
		xIndex = socketNEXT_UDP_PORT_NUMBER_INDEX;
 800b85c:	2300      	movs	r3, #0
 800b85e:	617b      	str	r3, [r7, #20]
		pxList = &xBoundUDPSocketsList;
 800b860:	4b1c      	ldr	r3, [pc, #112]	; (800b8d4 <prvGetPrivatePortNumber+0x90>)
 800b862:	613b      	str	r3, [r7, #16]
	/*_RB_ This needs to be randomised rather than sequential. */
	/* _HT_ Agreed, although many OS's use sequential port numbers, see
	https://www.cymru.com/jtk/misc/ephemeralports.html  */
	for ( ;; )
	{
		++( usNextPortToUse[ xIndex ] );
 800b864:	4a1c      	ldr	r2, [pc, #112]	; (800b8d8 <prvGetPrivatePortNumber+0x94>)
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b86c:	3301      	adds	r3, #1
 800b86e:	b299      	uxth	r1, r3
 800b870:	4a19      	ldr	r2, [pc, #100]	; (800b8d8 <prvGetPrivatePortNumber+0x94>)
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if( usNextPortToUse[ xIndex ] >= socketAUTO_PORT_ALLOCATION_MAX_NUMBER )
 800b878:	4a17      	ldr	r2, [pc, #92]	; (800b8d8 <prvGetPrivatePortNumber+0x94>)
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b880:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800b884:	d305      	bcc.n	800b892 <prvGetPrivatePortNumber+0x4e>
		{
			/* Don't go right back to the start of the dynamic/private port
			range numbers as any persistent sockets are likely to have been
			create first so the early port numbers may still be in use. */
			usNextPortToUse[ xIndex ] = socketAUTO_PORT_ALLOCATION_RESET_NUMBER;
 800b886:	4a14      	ldr	r2, [pc, #80]	; (800b8d8 <prvGetPrivatePortNumber+0x94>)
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	f44f 4141 	mov.w	r1, #49408	; 0xc100
 800b88e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		usResult = FreeRTOS_htons( usNextPortToUse[ xIndex ] );
 800b892:	4a11      	ldr	r2, [pc, #68]	; (800b8d8 <prvGetPrivatePortNumber+0x94>)
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b89a:	021b      	lsls	r3, r3, #8
 800b89c:	b21a      	sxth	r2, r3
 800b89e:	490e      	ldr	r1, [pc, #56]	; (800b8d8 <prvGetPrivatePortNumber+0x94>)
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b8a6:	0a1b      	lsrs	r3, r3, #8
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	b21b      	sxth	r3, r3
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	b21b      	sxth	r3, r3
 800b8b0:	81fb      	strh	r3, [r7, #14]

		if( pxListFindListItemWithValue( pxList, ( TickType_t ) usResult ) == NULL )
 800b8b2:	89fb      	ldrh	r3, [r7, #14]
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	6938      	ldr	r0, [r7, #16]
 800b8b8:	f000 f810 	bl	800b8dc <pxListFindListItemWithValue>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d000      	beq.n	800b8c4 <prvGetPrivatePortNumber+0x80>
		++( usNextPortToUse[ xIndex ] );
 800b8c2:	e7cf      	b.n	800b864 <prvGetPrivatePortNumber+0x20>
		{
			break;
 800b8c4:	bf00      	nop
		}
	}
	return usResult;
 800b8c6:	89fb      	ldrh	r3, [r7, #14]
} /* Tested */
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3718      	adds	r7, #24
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	20005474 	.word	0x20005474
 800b8d4:	20005488 	.word	0x20005488
 800b8d8:	20004228 	.word	0x20004228

0800b8dc <pxListFindListItemWithValue>:
/*-----------------------------------------------------------*/

/* pxListFindListItemWithValue: find a list item in a bound socket list
'xWantedItemValue' refers to a port number */
static const ListItem_t * pxListFindListItemWithValue( const List_t *pxList, TickType_t xWantedItemValue )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
const ListItem_t * pxResult = NULL;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	617b      	str	r3, [r7, #20]

	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800b8ea:	f7ff f8dd 	bl	800aaa8 <xIPIsNetworkTaskReady>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d018      	beq.n	800b926 <pxListFindListItemWithValue+0x4a>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d015      	beq.n	800b926 <pxListFindListItemWithValue+0x4a>
	{
		const ListItem_t *pxIterator;
		const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( pxList );
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	3308      	adds	r3, #8
 800b8fe:	60fb      	str	r3, [r7, #12]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	613b      	str	r3, [r7, #16]
 800b906:	e00a      	b.n	800b91e <pxListFindListItemWithValue+0x42>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d102      	bne.n	800b918 <pxListFindListItemWithValue+0x3c>
			{
				pxResult = pxIterator;
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	617b      	str	r3, [r7, #20]
				break;
 800b916:	e006      	b.n	800b926 <pxListFindListItemWithValue+0x4a>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	613b      	str	r3, [r7, #16]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800b91e:	693a      	ldr	r2, [r7, #16]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	429a      	cmp	r2, r3
 800b924:	d1f0      	bne.n	800b908 <pxListFindListItemWithValue+0x2c>
			}
		}
	}

	return pxResult;
 800b926:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800b928:	4618      	mov	r0, r3
 800b92a:	3718      	adds	r7, #24
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <pxUDPSocketLookup>:

/*-----------------------------------------------------------*/

FreeRTOS_Socket_t *pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
const ListItem_t *pxListItem;
FreeRTOS_Socket_t *pxSocket = NULL;
 800b938:	2300      	movs	r3, #0
 800b93a:	617b      	str	r3, [r7, #20]

	/* Looking up a socket is quite simple, find a match with the local port.

	See if there is a list item associated with the port number on the
	list of bound sockets. */
	pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800b93c:	6879      	ldr	r1, [r7, #4]
 800b93e:	480e      	ldr	r0, [pc, #56]	; (800b978 <pxUDPSocketLookup+0x48>)
 800b940:	f7ff ffcc 	bl	800b8dc <pxListFindListItemWithValue>
 800b944:	6138      	str	r0, [r7, #16]

	if( pxListItem != NULL )
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00f      	beq.n	800b96c <pxUDPSocketLookup+0x3c>
	{
		/* The owner of the list item is the socket itself. */
		pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem );
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	617b      	str	r3, [r7, #20]
		configASSERT( pxSocket != NULL );
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d109      	bne.n	800b96c <pxUDPSocketLookup+0x3c>
 800b958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95c:	f383 8811 	msr	BASEPRI, r3
 800b960:	f3bf 8f6f 	isb	sy
 800b964:	f3bf 8f4f 	dsb	sy
 800b968:	60fb      	str	r3, [r7, #12]
 800b96a:	e7fe      	b.n	800b96a <pxUDPSocketLookup+0x3a>
	}
	return pxSocket;
 800b96c:	697b      	ldr	r3, [r7, #20]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3718      	adds	r7, #24
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	20005488 	.word	0x20005488

0800b97c <vSocketWakeUpUser>:
}

/*-----------------------------------------------------------*/

void vSocketWakeUpUser( FreeRTOS_Socket_t *pxSocket )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
	}
	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		if( pxSocket->pxSocketSet != NULL )
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d015      	beq.n	800b9b8 <vSocketWakeUpUser+0x3c>
		{
			EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & eSELECT_ALL;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	0a1b      	lsrs	r3, r3, #8
 800b992:	f003 030f 	and.w	r3, r3, #15
 800b996:	60fb      	str	r3, [r7, #12]
			if( xSelectBits != 0ul )
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00c      	beq.n	800b9b8 <vSocketWakeUpUser+0x3c>
			{
				pxSocket->xSocketBits |= xSelectBits;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	431a      	orrs	r2, r3
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	631a      	str	r2, [r3, #48]	; 0x30
				xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	68f9      	ldr	r1, [r7, #12]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fa f8f4 	bl	8005ba0 <xEventGroupSetBits>
			}
		}

		pxSocket->xEventBits &= eSOCKET_ALL;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	601a      	str	r2, [r3, #0]
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0u ) )
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00b      	beq.n	800b9e4 <vSocketWakeUpUser+0x68>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d007      	beq.n	800b9e4 <vSocketWakeUpUser+0x68>
	{
		xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	685a      	ldr	r2, [r3, #4]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4619      	mov	r1, r3
 800b9de:	4610      	mov	r0, r2
 800b9e0:	f7fa f8de 	bl	8005ba0 <xEventGroupSetBits>
	}

	pxSocket->xEventBits = 0ul;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	601a      	str	r2, [r3, #0]
}
 800b9ea:	bf00      	nop
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
	...

0800b9f4 <xTCPTimerCheck>:
	 * - Send new data
	 * - Send a keep-alive packet
	 * - Check for timeout (in non-connected states only)
	 */
	TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
	{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b088      	sub	sp, #32
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket;
	TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800b9fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba00:	61fb      	str	r3, [r7, #28]
	TickType_t xNow = xTaskGetTickCount();
 800ba02:	f7fb fed3 	bl	80077ac <xTaskGetTickCount>
 800ba06:	6138      	str	r0, [r7, #16]
	static TickType_t xLastTime = 0u;
	TickType_t xDelta = xNow - xLastTime;
 800ba08:	4b30      	ldr	r3, [pc, #192]	; (800bacc <xTCPTimerCheck+0xd8>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	693a      	ldr	r2, [r7, #16]
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	61bb      	str	r3, [r7, #24]
	ListItem_t* pxEnd = ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
 800ba12:	4b2f      	ldr	r3, [pc, #188]	; (800bad0 <xTCPTimerCheck+0xdc>)
 800ba14:	60fb      	str	r3, [r7, #12]
	ListItem_t *pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800ba16:	4b2f      	ldr	r3, [pc, #188]	; (800bad4 <xTCPTimerCheck+0xe0>)
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	617b      	str	r3, [r7, #20]

		xLastTime = xNow;
 800ba1c:	4a2b      	ldr	r2, [pc, #172]	; (800bacc <xTCPTimerCheck+0xd8>)
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	6013      	str	r3, [r2, #0]

		if( xDelta == 0u )
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d148      	bne.n	800baba <xTCPTimerCheck+0xc6>
		{
			xDelta = 1u;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	61bb      	str	r3, [r7, #24]
		}

		while( pxIterator != pxEnd )
 800ba2c:	e045      	b.n	800baba <xTCPTimerCheck+0xc6>
		{
			pxSocket = ( FreeRTOS_Socket_t * )listGET_LIST_ITEM_OWNER( pxIterator );
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	60bb      	str	r3, [r7, #8]
			pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	617b      	str	r3, [r7, #20]

			/* Sockets with 'tmout == 0' do not need any regular attention. */
			if( pxSocket->u.xTCP.usTimeout == 0u )
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d100      	bne.n	800ba46 <xTCPTimerCheck+0x52>
			{
				continue;
 800ba44:	e039      	b.n	800baba <xTCPTimerCheck+0xc6>
			}

			if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d90a      	bls.n	800ba6a <xTCPTimerCheck+0x76>
			{
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ba68:	e00a      	b.n	800ba80 <xTCPTimerCheck+0x8c>
			}
			else
			{
				pxSocket->u.xTCP.usTimeout = 0u;
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

				/* Within this function, the socket might want to send a delayed
				ack or send out data or whatever it needs to do. */
				if( xTCPSocketCheck( pxSocket ) < 0 )
 800ba72:	68b8      	ldr	r0, [r7, #8]
 800ba74:	f000 fdfc 	bl	800c670 <xTCPSocketCheck>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	da00      	bge.n	800ba80 <xTCPTimerCheck+0x8c>
				{
					/* Continue because the socket was deleted. */
					continue;
 800ba7e:	e01c      	b.n	800baba <xTCPTimerCheck+0xc6>
			}

			/* In xEventBits the driver may indicate that the socket has
			important events for the user.  These are only done just before the
			IP-task goes to sleep. */
			if( pxSocket->xEventBits != 0u )
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d008      	beq.n	800ba9a <xTCPTimerCheck+0xa6>
			{
				if( xWillSleep != pdFALSE )
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d003      	beq.n	800ba96 <xTCPTimerCheck+0xa2>
				{
					/* The IP-task is about to go to sleep, so messages can be
					sent to the socket owners. */
					vSocketWakeUpUser( pxSocket );
 800ba8e:	68b8      	ldr	r0, [r7, #8]
 800ba90:	f7ff ff74 	bl	800b97c <vSocketWakeUpUser>
 800ba94:	e001      	b.n	800ba9a <xTCPTimerCheck+0xa6>
				}
				else
				{
					/* Or else make sure this will be called again to wake-up
					the sockets' owner. */
					xShortest = ( TickType_t ) 0;
 800ba96:	2300      	movs	r3, #0
 800ba98:	61fb      	str	r3, [r7, #28]
				}
			}

			if( ( pxSocket->u.xTCP.usTimeout != 0u ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d00a      	beq.n	800baba <xTCPTimerCheck+0xc6>
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800baaa:	461a      	mov	r2, r3
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d203      	bcs.n	800baba <xTCPTimerCheck+0xc6>
			{
				xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bab8:	61fb      	str	r3, [r7, #28]
		while( pxIterator != pxEnd )
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d1b5      	bne.n	800ba2e <xTCPTimerCheck+0x3a>
			}
		}

		return xShortest;
 800bac2:	69fb      	ldr	r3, [r7, #28]
	}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3720      	adds	r7, #32
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	2000422c 	.word	0x2000422c
 800bad0:	2000547c 	.word	0x2000547c
 800bad4:	20005474 	.word	0x20005474

0800bad8 <pxTCPSocketLookup>:
	 * looking up a socket is a little more complex:
	 * Both a local port, and a remote port and IP address are being used
	 * For a socket in listening mode, the remote port and IP address are both 0
	 */
	FreeRTOS_Socket_t *pxTCPSocketLookup( uint32_t ulLocalIP, UBaseType_t uxLocalPort, uint32_t ulRemoteIP, UBaseType_t uxRemotePort )
	{
 800bad8:	b480      	push	{r7}
 800bada:	b08b      	sub	sp, #44	; 0x2c
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
 800bae4:	603b      	str	r3, [r7, #0]
	ListItem_t *pxIterator;
	FreeRTOS_Socket_t *pxResult = NULL, *pxListenSocket = NULL;
 800bae6:	2300      	movs	r3, #0
 800bae8:	623b      	str	r3, [r7, #32]
 800baea:	2300      	movs	r3, #0
 800baec:	61fb      	str	r3, [r7, #28]
	MiniListItem_t *pxEnd = ( MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800baee:	4b1c      	ldr	r3, [pc, #112]	; (800bb60 <pxTCPSocketLookup+0x88>)
 800baf0:	61bb      	str	r3, [r7, #24]

		/* Parameter not yet supported. */
		( void ) ulLocalIP;

		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	627b      	str	r3, [r7, #36]	; 0x24
 800baf8:	e021      	b.n	800bb3e <pxTCPSocketLookup+0x66>
			 pxIterator != ( ListItem_t * ) pxEnd;
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800bafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	617b      	str	r3, [r7, #20]

			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d115      	bne.n	800bb38 <pxTCPSocketLookup+0x60>
			{
				if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d102      	bne.n	800bb1c <pxTCPSocketLookup+0x44>
				{
					/* If this is a socket listening to uxLocalPort, remember it
					in case there is no perfect match. */
					pxListenSocket = pxSocket;
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	61fb      	str	r3, [r7, #28]
 800bb1a:	e00d      	b.n	800bb38 <pxTCPSocketLookup+0x60>
				}
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d107      	bne.n	800bb38 <pxTCPSocketLookup+0x60>
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d102      	bne.n	800bb38 <pxTCPSocketLookup+0x60>
				{
					/* For sockets not in listening mode, find a match with
					xLocalPort, ulRemoteIP AND xRemotePort. */
					pxResult = pxSocket;
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	623b      	str	r3, [r7, #32]
					break;
 800bb36:	e006      	b.n	800bb46 <pxTCPSocketLookup+0x6e>
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 800bb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	627b      	str	r3, [r7, #36]	; 0x24
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800bb3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d1d9      	bne.n	800bafa <pxTCPSocketLookup+0x22>
				}
			}
		}
		if( pxResult == NULL )
 800bb46:	6a3b      	ldr	r3, [r7, #32]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d101      	bne.n	800bb50 <pxTCPSocketLookup+0x78>
		{
			/* An exact match was not found, maybe a listening socket was
			found. */
			pxResult = pxListenSocket;
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	623b      	str	r3, [r7, #32]
		}

		return pxResult;
 800bb50:	6a3b      	ldr	r3, [r7, #32]
	}
 800bb52:	4618      	mov	r0, r3
 800bb54:	372c      	adds	r7, #44	; 0x2c
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	2000547c 	.word	0x2000547c

0800bb64 <prvTCPCreateStream>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP == 1 )

	static StreamBuffer_t *prvTCPCreateStream ( FreeRTOS_Socket_t *pxSocket, BaseType_t xIsInputStream )
	{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
	size_t uxLength;
	size_t uxSize;

		/* Now that a stream is created, the maximum size is fixed before
		creation, it could still be changed with setsockopt(). */
		if( xIsInputStream != pdFALSE )
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d01c      	beq.n	800bbae <prvTCPCreateStream+0x4a>
		{
			uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb78:	617b      	str	r3, [r7, #20]

			if( pxSocket->u.xTCP.uxLittleSpace == 0ul )
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d107      	bne.n	800bb92 <prvTCPCreateStream+0x2e>
			{
				pxSocket->u.xTCP.uxLittleSpace  = ( 1ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why divide by 5?  Can this be changed to a #define? */
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb86:	4a25      	ldr	r2, [pc, #148]	; (800bc1c <prvTCPCreateStream+0xb8>)
 800bb88:	fba2 2303 	umull	r2, r3, r2, r3
 800bb8c:	089a      	lsrs	r2, r3, #2
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	665a      	str	r2, [r3, #100]	; 0x64
			}

			if( pxSocket->u.xTCP.uxEnoughSpace == 0ul )
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d10c      	bne.n	800bbb4 <prvTCPCreateStream+0x50>
			{
				pxSocket->u.xTCP.uxEnoughSpace = ( 4ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why multiply by 4?  Maybe sock80_PERCENT?*/
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	4a1e      	ldr	r2, [pc, #120]	; (800bc1c <prvTCPCreateStream+0xb8>)
 800bba2:	fba2 2303 	umull	r2, r3, r2, r3
 800bba6:	089a      	lsrs	r2, r3, #2
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	669a      	str	r2, [r3, #104]	; 0x68
 800bbac:	e002      	b.n	800bbb4 <prvTCPCreateStream+0x50>
			}
		}
		else
		{
			uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbb2:	617b      	str	r3, [r7, #20]
		}

		/* Add an extra 4 (or 8) bytes. */
		uxLength += sizeof( size_t );
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	3304      	adds	r3, #4
 800bbb8:	617b      	str	r3, [r7, #20]

		/* And make the length a multiple of sizeof( size_t ). */
		uxLength &= ~( sizeof( size_t ) - 1u );
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	f023 0303 	bic.w	r3, r3, #3
 800bbc0:	617b      	str	r3, [r7, #20]

		uxSize = sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) + uxLength;
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	3314      	adds	r3, #20
 800bbc6:	613b      	str	r3, [r7, #16]

		pxBuffer = ( StreamBuffer_t * )pvPortMallocLarge( uxSize );
 800bbc8:	6938      	ldr	r0, [r7, #16]
 800bbca:	f7fa fbb9 	bl	8006340 <pvPortMalloc>
 800bbce:	60f8      	str	r0, [r7, #12]

		if( pxBuffer == NULL )
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d10b      	bne.n	800bbee <prvTCPCreateStream+0x8a>
		{
			FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
			pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800bbdc:	f043 0308 	orr.w	r3, r3, #8
 800bbe0:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800bbe4:	2108      	movs	r1, #8
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f001 fa5f 	bl	800d0aa <vTCPStateChange>
 800bbec:	e011      	b.n	800bc12 <prvTCPCreateStream+0xae>
		}
		else
		{
			/* Clear the markers of the stream */
			memset( pxBuffer, '\0', sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800bbee:	2214      	movs	r2, #20
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f004 ffa0 	bl	8010b38 <memset>
			pxBuffer->LENGTH = ( size_t ) uxLength ;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	697a      	ldr	r2, [r7, #20]
 800bbfc:	611a      	str	r2, [r3, #16]
			if( xTCPWindowLoggingLevel != 0 )
			{
				FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %lu bytes (total %lu)\n", xIsInputStream ? 'R' : 'T', uxLength, uxSize ) );
			}

			if( xIsInputStream != 0 )
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d003      	beq.n	800bc0c <prvTCPCreateStream+0xa8>
			{
				pxSocket->u.xTCP.rxStream = pxBuffer;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	675a      	str	r2, [r3, #116]	; 0x74
 800bc0a:	e002      	b.n	800bc12 <prvTCPCreateStream+0xae>
			}
			else
			{
				pxSocket->u.xTCP.txStream = pxBuffer;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	679a      	str	r2, [r3, #120]	; 0x78
			}
		}

		return pxBuffer;
 800bc12:	68fb      	ldr	r3, [r7, #12]
	}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3718      	adds	r7, #24
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	cccccccd 	.word	0xcccccccd

0800bc20 <lTCPAddRxdata>:
	/*
	 * Add data to the RxStream.  When uxOffset > 0, data has come in out-of-order
	 * and will be put in front of the head so it can not be popped by the user.
	 */
	int32_t lTCPAddRxdata( FreeRTOS_Socket_t *pxSocket, size_t uxOffset, const uint8_t *pcData, uint32_t ulByteCount )
	{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b088      	sub	sp, #32
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	607a      	str	r2, [r7, #4]
 800bc2c:	603b      	str	r3, [r7, #0]
	StreamBuffer_t *pxStream = pxSocket->u.xTCP.rxStream;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc32:	61fb      	str	r3, [r7, #28]
		/* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
		if( pucData != NULL ) copy data the the buffer
		if( pucData == NULL ) no copying, just advance rxHead
		if( uxOffset != 0 ) Just store data which has come out-of-order
		if( uxOffset == 0 ) Also advance rxHead */
		if( pxStream == NULL )
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10a      	bne.n	800bc50 <lTCPAddRxdata+0x30>
		{
			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f7ff ff91 	bl	800bb64 <prvTCPCreateStream>
 800bc42:	61f8      	str	r0, [r7, #28]
			if( pxStream == NULL )
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d102      	bne.n	800bc50 <lTCPAddRxdata+0x30>
			{
				return -1;
 800bc4a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc4e:	e045      	b.n	800bcdc <lTCPAddRxdata+0xbc>
				pcData = NULL;
			}
		}
		#endif /* ipconfigUSE_CALLBACKS */

		xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	68b9      	ldr	r1, [r7, #8]
 800bc56:	69f8      	ldr	r0, [r7, #28]
 800bc58:	f000 fa97 	bl	800c18a <uxStreamBufferAdd>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	61bb      	str	r3, [r7, #24]
					pxStream->uxFront ) );
			}
		}
		#endif /* ipconfigHAS_DEBUG_PRINTF */

		if( uxOffset == 0u )
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d139      	bne.n	800bcda <lTCPAddRxdata+0xba>
					}
				} else
			#endif /* ipconfigUSE_CALLBACKS */
			{
				/* See if running out of space. */
				if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d11f      	bne.n	800bcb6 <lTCPAddRxdata+0x96>
				{
					size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7fe ff96 	bl	800abac <uxStreamBufferFrontSpace>
 800bc80:	6178      	str	r0, [r7, #20]
					if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace  )
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d314      	bcc.n	800bcb6 <lTCPAddRxdata+0x96>
					{
						pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800bc92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc96:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
						pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800bc9a:	68fa      	ldr	r2, [r7, #12]
 800bc9c:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800bca0:	f043 0301 	orr.w	r3, r3, #1
 800bca4:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

						/* bLowWater was reached, send the changed window size. */
						pxSocket->u.xTCP.usTimeout = 1u;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
						xSendEventToIPTask( eTCPTimerEvent );
 800bcb0:	2005      	movs	r0, #5
 800bcb2:	f7fe fbad 	bl	800a410 <xSendEventToIPTask>
					}
				}

				/* New incoming data is available, wake up the user.   User's
				semaphores will be set just before the IP-task goes asleep. */
				pxSocket->xEventBits |= eSOCKET_RECEIVE;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f043 0201 	orr.w	r2, r3, #1
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	601a      	str	r2, [r3, #0]

				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
				{
					if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc6:	f003 0301 	and.w	r3, r3, #1
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d005      	beq.n	800bcda <lTCPAddRxdata+0xba>
					{
						pxSocket->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	601a      	str	r2, [r3, #0]
				}
				#endif
			}
		}

		return xResult;
 800bcda:	69bb      	ldr	r3, [r7, #24]
	}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3720      	adds	r7, #32
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <FreeRTOS_tx_space>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP ==1 )

	BaseType_t FreeRTOS_tx_space( Socket_t xSocket )
	{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800bcf6:	2b06      	cmp	r3, #6
 800bcf8:	d003      	beq.n	800bd02 <FreeRTOS_tx_space+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bcfa:	f06f 0315 	mvn.w	r3, #21
 800bcfe:	60fb      	str	r3, [r7, #12]
 800bd00:	e00e      	b.n	800bd20 <FreeRTOS_tx_space+0x3c>
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d007      	beq.n	800bd1a <FreeRTOS_tx_space+0x36>
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSpace ( pxSocket->u.xTCP.txStream );
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fe ff38 	bl	800ab84 <uxStreamBufferGetSpace>
 800bd14:	4603      	mov	r3, r0
 800bd16:	60fb      	str	r3, [r7, #12]
 800bd18:	e002      	b.n	800bd20 <FreeRTOS_tx_space+0x3c>
			}
			else
			{
				xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd1e:	60fb      	str	r3, [r7, #12]
			}
		}

		return xReturn;
 800bd20:	68fb      	ldr	r3, [r7, #12]
	}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3710      	adds	r7, #16
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <FreeRTOS_tx_size>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP == 1 )

	BaseType_t FreeRTOS_tx_size( Socket_t xSocket )
	{
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b084      	sub	sp, #16
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800bd3c:	2b06      	cmp	r3, #6
 800bd3e:	d003      	beq.n	800bd48 <FreeRTOS_tx_size+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bd40:	f06f 0315 	mvn.w	r3, #21
 800bd44:	60fb      	str	r3, [r7, #12]
 800bd46:	e00d      	b.n	800bd64 <FreeRTOS_tx_size+0x3a>
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d007      	beq.n	800bd60 <FreeRTOS_tx_size+0x36>
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSize ( pxSocket->u.xTCP.txStream );
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fe ff3d 	bl	800abd4 <uxStreamBufferGetSize>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	60fb      	str	r3, [r7, #12]
 800bd5e:	e001      	b.n	800bd64 <FreeRTOS_tx_size+0x3a>
			}
			else
			{
				xReturn = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	60fb      	str	r3, [r7, #12]
			}
		}

		return xReturn;
 800bd64:	68fb      	ldr	r3, [r7, #12]
	}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <FreeRTOS_rx_size>:

	/*
	 * Returns the number of bytes which can be read.
	 */
	BaseType_t FreeRTOS_rx_size( Socket_t xSocket )
	{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b084      	sub	sp, #16
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800bd80:	2b06      	cmp	r3, #6
 800bd82:	d003      	beq.n	800bd8c <FreeRTOS_rx_size+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bd84:	f06f 0315 	mvn.w	r3, #21
 800bd88:	60fb      	str	r3, [r7, #12]
 800bd8a:	e00d      	b.n	800bda8 <FreeRTOS_rx_size+0x3a>
		}
		else if( pxSocket->u.xTCP.rxStream != NULL )
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d007      	beq.n	800bda4 <FreeRTOS_rx_size+0x36>
		{
			xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fe ff1b 	bl	800abd4 <uxStreamBufferGetSize>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	60fb      	str	r3, [r7, #12]
 800bda2:	e001      	b.n	800bda8 <FreeRTOS_rx_size+0x3a>
		}
		else
		{
			xReturn = 0;
 800bda4:	2300      	movs	r3, #0
 800bda6:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800bda8:	68fb      	ldr	r3, [r7, #12]
	}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
	...

0800bdb4 <vSocketSelect>:
/*-----------------------------------------------------------*/

#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )

	void vSocketSelect( SocketSelect_t *pxSocketSet )
	{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b08c      	sub	sp, #48	; 0x30
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
	BaseType_t xRound;
	EventBits_t xSocketBits, xBitsToClear;
	#if ipconfigUSE_TCP == 1
		BaseType_t xLastRound = 1;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	613b      	str	r3, [r7, #16]
	#else
		BaseType_t xLastRound = 0;
	#endif

		/* These flags will be switched on after checking the socket status. */
		EventBits_t xGroupBits = 0;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	627b      	str	r3, [r7, #36]	; 0x24
		pxSocketSet->pxSocket = NULL;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	609a      	str	r2, [r3, #8]

		for( xRound = 0; xRound <= xLastRound; xRound++ )
 800bdca:	2300      	movs	r3, #0
 800bdcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdce:	e0cc      	b.n	800bf6a <vSocketSelect+0x1b6>
		{
			const ListItem_t *pxIterator;
			const MiniListItem_t *pxEnd;
			if( xRound == 0 )
 800bdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d102      	bne.n	800bddc <vSocketSelect+0x28>
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundUDPSocketsList );
 800bdd6:	4b7b      	ldr	r3, [pc, #492]	; (800bfc4 <vSocketSelect+0x210>)
 800bdd8:	61fb      	str	r3, [r7, #28]
 800bdda:	e001      	b.n	800bde0 <vSocketSelect+0x2c>
			}
		#if ipconfigUSE_TCP == 1
			else
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800bddc:	4b7a      	ldr	r3, [pc, #488]	; (800bfc8 <vSocketSelect+0x214>)
 800bdde:	61fb      	str	r3, [r7, #28]
			}
		#endif /* ipconfigUSE_TCP == 1 */
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	623b      	str	r3, [r7, #32]
 800bde6:	e0b8      	b.n	800bf5a <vSocketSelect+0x1a6>
				 pxIterator != ( const ListItem_t * ) pxEnd;
				 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
			{
				FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800bde8:	6a3b      	ldr	r3, [r7, #32]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	60fb      	str	r3, [r7, #12]
				if( pxSocket->pxSocketSet != pxSocketSet )
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	f040 80ac 	bne.w	800bf52 <vSocketSelect+0x19e>
				{
					/* Socket does not belong to this select group. */
					continue;
				}
				xSocketBits = 0;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	62bb      	str	r3, [r7, #40]	; 0x28

				#if( ipconfigUSE_TCP == 1 )
					if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP )
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800be04:	2b06      	cmp	r3, #6
 800be06:	f040 808e 	bne.w	800bf26 <vSocketSelect+0x172>
					{
						/* Check if the socket has already been accepted by the
						owner.  If not, it is useless to return it from a
						select(). */
						BaseType_t bAccepted = pdFALSE;
 800be0a:	2300      	movs	r3, #0
 800be0c:	61bb      	str	r3, [r7, #24]

						if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be14:	f003 0304 	and.w	r3, r3, #4
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d109      	bne.n	800be32 <vSocketSelect+0x7e>
						{
							if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be24:	f003 0302 	and.w	r3, r3, #2
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d101      	bne.n	800be32 <vSocketSelect+0x7e>
							{
								bAccepted = pdTRUE;
 800be2e:	2301      	movs	r3, #1
 800be30:	61bb      	str	r3, [r7, #24]
							}
						}

						/* Is the set owner interested in READ events? */
						if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d023      	beq.n	800be86 <vSocketSelect+0xd2>
						{
							if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800be44:	2b01      	cmp	r3, #1
 800be46:	d111      	bne.n	800be6c <vSocketSelect+0xb8>
							{
								if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != 0 ) )
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d01a      	beq.n	800be86 <vSocketSelect+0xd2>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be58:	f003 0302 	and.w	r3, r3, #2
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d011      	beq.n	800be86 <vSocketSelect+0xd2>
								{
									xSocketBits |= eSELECT_READ;
 800be62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be64:	f043 0301 	orr.w	r3, r3, #1
 800be68:	62bb      	str	r3, [r7, #40]	; 0x28
 800be6a:	e00c      	b.n	800be86 <vSocketSelect+0xd2>
								}
							}
							else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d009      	beq.n	800be86 <vSocketSelect+0xd2>
 800be72:	68f8      	ldr	r0, [r7, #12]
 800be74:	f7ff ff7b 	bl	800bd6e <FreeRTOS_rx_size>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	dd03      	ble.n	800be86 <vSocketSelect+0xd2>
							{
								xSocketBits |= eSELECT_READ;
 800be7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be80:	f043 0301 	orr.w	r3, r3, #1
 800be84:	62bb      	str	r3, [r7, #40]	; 0x28
							}
						}
						/* Is the set owner interested in EXCEPTION events? */
						if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be8a:	f003 0304 	and.w	r3, r3, #4
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00d      	beq.n	800beae <vSocketSelect+0xfa>
						{
							if( ( pxSocket->u.xTCP.ucTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == eCLOSED ) )
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800be98:	2b08      	cmp	r3, #8
 800be9a:	d004      	beq.n	800bea6 <vSocketSelect+0xf2>
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d103      	bne.n	800beae <vSocketSelect+0xfa>
							{
								xSocketBits |= eSELECT_EXCEPT;
 800bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea8:	f043 0304 	orr.w	r3, r3, #4
 800beac:	62bb      	str	r3, [r7, #40]	; 0x28
							}
						}

						/* Is the set owner interested in WRITE events? */
						if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb2:	f003 0302 	and.w	r3, r3, #2
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d043      	beq.n	800bf42 <vSocketSelect+0x18e>
						{
							BaseType_t bMatch = pdFALSE;
 800beba:	2300      	movs	r3, #0
 800bebc:	617b      	str	r3, [r7, #20]

							if( bAccepted != 0 )
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d007      	beq.n	800bed4 <vSocketSelect+0x120>
							{
								if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f7ff ff0d 	bl	800bce4 <FreeRTOS_tx_space>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	dd01      	ble.n	800bed4 <vSocketSelect+0x120>
								{
									bMatch = pdTRUE;
 800bed0:	2301      	movs	r3, #1
 800bed2:	617b      	str	r3, [r7, #20]
								}
							}

							if( bMatch == pdFALSE )
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d11d      	bne.n	800bf16 <vSocketSelect+0x162>
							{
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bee0:	f003 0308 	and.w	r3, r3, #8
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d015      	beq.n	800bf16 <vSocketSelect+0x162>
									( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800bef0:	2b04      	cmp	r3, #4
 800bef2:	d910      	bls.n	800bf16 <vSocketSelect+0x162>
									( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800befa:	f003 0310 	and.w	r3, r3, #16
 800befe:	b2db      	uxtb	r3, r3
									( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d108      	bne.n	800bf16 <vSocketSelect+0x162>
								{
									pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800bf0a:	f043 0310 	orr.w	r3, r3, #16
 800bf0e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
									bMatch = pdTRUE;
 800bf12:	2301      	movs	r3, #1
 800bf14:	617b      	str	r3, [r7, #20]
								}
							}

							if( bMatch != pdFALSE )
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d012      	beq.n	800bf42 <vSocketSelect+0x18e>
							{
								xSocketBits |= eSELECT_WRITE;
 800bf1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1e:	f043 0302 	orr.w	r3, r3, #2
 800bf22:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf24:	e00d      	b.n	800bf42 <vSocketSelect+0x18e>
					}
					else
				#endif /* ipconfigUSE_TCP == 1 */
				{
					/* Select events for UDP are simpler. */
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2a:	f003 0301 	and.w	r3, r3, #1
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d007      	beq.n	800bf42 <vSocketSelect+0x18e>
						( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d003      	beq.n	800bf42 <vSocketSelect+0x18e>
					{
						xSocketBits |= eSELECT_READ;
 800bf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3c:	f043 0301 	orr.w	r3, r3, #1
 800bf40:	62bb      	str	r3, [r7, #40]	; 0x28
					/* The WRITE and EXCEPT bits are not used for UDP */
				}	/* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

				/* Each socket keeps its own event flags, which are looked-up
				by FreeRTOS_FD_ISSSET() */
				pxSocket->xSocketBits = xSocketBits;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf46:	631a      	str	r2, [r3, #48]	; 0x30

				/* The ORed value will be used to set the bits in the event
				group. */
				xGroupBits |= xSocketBits;
 800bf48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	627b      	str	r3, [r7, #36]	; 0x24
 800bf50:	e000      	b.n	800bf54 <vSocketSelect+0x1a0>
					continue;
 800bf52:	bf00      	nop
				 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800bf54:	6a3b      	ldr	r3, [r7, #32]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	623b      	str	r3, [r7, #32]
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800bf5a:	6a3a      	ldr	r2, [r7, #32]
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	f47f af42 	bne.w	800bde8 <vSocketSelect+0x34>
		for( xRound = 0; xRound <= xLastRound; xRound++ )
 800bf64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf66:	3301      	adds	r3, #1
 800bf68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	f77f af2e 	ble.w	800bdd0 <vSocketSelect+0x1c>

			}	/* for( pxIterator ... ) */
		}	/* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

		xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2100      	movs	r1, #0
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7f9 fdda 	bl	8005b34 <xEventGroupClearBits>
 800bf80:	60b8      	str	r0, [r7, #8]

		/* Now set the necessary bits. */
		xBitsToClear = ( xBitsToClear & ~xGroupBits ) & eSELECT_ALL;
 800bf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf84:	43da      	mvns	r2, r3
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	4013      	ands	r3, r2
 800bf8a:	f003 030f 	and.w	r3, r3, #15
 800bf8e:	60bb      	str	r3, [r7, #8]
		#if( ipconfigSUPPORT_SIGNALS != 0 )
		{
			/* Maybe the socketset was signalled, but don't
			clear the 'eSELECT_INTR' bit here, as it will be used
			and cleared in FreeRTOS_select(). */
			xBitsToClear &= ( EventBits_t ) ~eSELECT_INTR;
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	f023 0308 	bic.w	r3, r3, #8
 800bf96:	60bb      	str	r3, [r7, #8]
		}
		#endif /* ipconfigSUPPORT_SIGNALS */

		if( xBitsToClear != 0 )
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d005      	beq.n	800bfaa <vSocketSelect+0x1f6>
		{
			xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	68b9      	ldr	r1, [r7, #8]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7f9 fdc5 	bl	8005b34 <xEventGroupClearBits>
		}

		/* Now include eSELECT_CALL_IP to wakeup the caller. */
		xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | eSELECT_CALL_IP );
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb0:	f043 0310 	orr.w	r3, r3, #16
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	4610      	mov	r0, r2
 800bfb8:	f7f9 fdf2 	bl	8005ba0 <xEventGroupSetBits>
	}
 800bfbc:	bf00      	nop
 800bfbe:	3730      	adds	r7, #48	; 0x30
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	20005490 	.word	0x20005490
 800bfc8:	2000547c 	.word	0x2000547c

0800bfcc <FreeRTOS_SignalSocket>:

#if( ipconfigSUPPORT_SIGNALS != 0 )

	/* Send a signal to the task which reads from this socket. */
	BaseType_t FreeRTOS_SignalSocket( Socket_t xSocket )
	{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket == NULL )
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d103      	bne.n	800bfe6 <FreeRTOS_SignalSocket+0x1a>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bfde:	f06f 0315 	mvn.w	r3, #21
 800bfe2:	60fb      	str	r3, [r7, #12]
 800bfe4:	e022      	b.n	800c02c <FreeRTOS_SignalSocket+0x60>
		}
		else
	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
		if( ( pxSocket->pxSocketSet != NULL ) && ( pxSocket->pxSocketSet->xSelectGroup != NULL ) )
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00e      	beq.n	800c00c <FreeRTOS_SignalSocket+0x40>
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d009      	beq.n	800c00c <FreeRTOS_SignalSocket+0x40>
		{
			xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_INTR );
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2108      	movs	r1, #8
 800c000:	4618      	mov	r0, r3
 800c002:	f7f9 fdcd 	bl	8005ba0 <xEventGroupSetBits>
			xReturn = 0;
 800c006:	2300      	movs	r3, #0
 800c008:	60fb      	str	r3, [r7, #12]
 800c00a:	e00f      	b.n	800c02c <FreeRTOS_SignalSocket+0x60>
		}
		else
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */
		if( pxSocket->xEventGroup != NULL )
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d008      	beq.n	800c026 <FreeRTOS_SignalSocket+0x5a>
		{
			xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_INTR );
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	2140      	movs	r1, #64	; 0x40
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7f9 fdc0 	bl	8005ba0 <xEventGroupSetBits>
			xReturn = 0;
 800c020:	2300      	movs	r3, #0
 800c022:	60fb      	str	r3, [r7, #12]
 800c024:	e002      	b.n	800c02c <FreeRTOS_SignalSocket+0x60>
		}
		else
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800c026:	f06f 0315 	mvn.w	r3, #21
 800c02a:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800c02c:	68fb      	ldr	r3, [r7, #12]
	}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}

0800c036 <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800c036:	b480      	push	{r7}
 800c038:	b083      	sub	sp, #12
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
 800c03e:	6039      	str	r1, [r7, #0]
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	4293      	cmp	r3, r2
 800c046:	bf28      	it	cs
 800c048:	4613      	movcs	r3, r2
 800c04a:	4618      	mov	r0, r3
 800c04c:	370c      	adds	r7, #12
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr

0800c056 <uxStreamBufferSpace>:
{
 800c056:	b480      	push	{r7}
 800c058:	b087      	sub	sp, #28
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	60f8      	str	r0, [r7, #12]
 800c05e:	60b9      	str	r1, [r7, #8]
 800c060:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	691a      	ldr	r2, [r3, #16]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	441a      	add	r2, r3
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	1ad3      	subs	r3, r2, r3
 800c06e:	3b01      	subs	r3, #1
 800c070:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	691a      	ldr	r2, [r3, #16]
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d804      	bhi.n	800c086 <uxStreamBufferSpace+0x30>
		uxCount -= pxBuffer->LENGTH;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	691b      	ldr	r3, [r3, #16]
 800c080:	697a      	ldr	r2, [r7, #20]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	617b      	str	r3, [r7, #20]
	return uxCount;
 800c086:	697b      	ldr	r3, [r7, #20]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	371c      	adds	r7, #28
 800c08c:	46bd      	mov	sp, r7
 800c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c092:	4770      	bx	lr

0800c094 <uxStreamBufferDistance>:
{
 800c094:	b480      	push	{r7}
 800c096:	b087      	sub	sp, #28
 800c098:	af00      	add	r7, sp, #0
 800c09a:	60f8      	str	r0, [r7, #12]
 800c09c:	60b9      	str	r1, [r7, #8]
 800c09e:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	691a      	ldr	r2, [r3, #16]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	441a      	add	r2, r3
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	691a      	ldr	r2, [r3, #16]
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d804      	bhi.n	800c0c2 <uxStreamBufferDistance+0x2e>
		uxCount -= pxBuffer->LENGTH;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	691b      	ldr	r3, [r3, #16]
 800c0bc:	697a      	ldr	r2, [r7, #20]
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	617b      	str	r3, [r7, #20]
	return uxCount;
 800c0c2:	697b      	ldr	r3, [r7, #20]
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	371c      	adds	r7, #28
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <uxStreamBufferGetSpace>:
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800c0e4:	68ba      	ldr	r2, [r7, #8]
 800c0e6:	68f9      	ldr	r1, [r7, #12]
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f7ff ffb4 	bl	800c056 <uxStreamBufferSpace>
 800c0ee:	4603      	mov	r3, r0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <uxStreamBufferGetSize>:
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	68b9      	ldr	r1, [r7, #8]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f7ff ffbf 	bl	800c094 <uxStreamBufferDistance>
 800c116:	4603      	mov	r3, r0
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <xStreamBufferLessThenEqual>:
}
/*-----------------------------------------------------------*/

static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t *pxBuffer, const size_t uxLeft, const size_t uxRight );
static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t *pxBuffer, const size_t uxLeft, const size_t uxRight )
{
 800c120:	b480      	push	{r7}
 800c122:	b087      	sub	sp, #28
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
size_t uxTail = pxBuffer->uxTail;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	613b      	str	r3, [r7, #16]

	/* Returns true if ( uxLeft < uxRight ) */
	if( ( uxLeft < uxTail ) ^ ( uxRight < uxTail ) )
 800c132:	68ba      	ldr	r2, [r7, #8]
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	429a      	cmp	r2, r3
 800c138:	bf34      	ite	cc
 800c13a:	2301      	movcc	r3, #1
 800c13c:	2300      	movcs	r3, #0
 800c13e:	b2da      	uxtb	r2, r3
 800c140:	6879      	ldr	r1, [r7, #4]
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	4299      	cmp	r1, r3
 800c146:	bf34      	ite	cc
 800c148:	2301      	movcc	r3, #1
 800c14a:	2300      	movcs	r3, #0
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	4053      	eors	r3, r2
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b00      	cmp	r3, #0
 800c154:	d009      	beq.n	800c16a <xStreamBufferLessThenEqual+0x4a>
	{
		if( uxRight < uxTail )
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d202      	bcs.n	800c164 <xStreamBufferLessThenEqual+0x44>
		{
			xReturn = pdTRUE;
 800c15e:	2301      	movs	r3, #1
 800c160:	617b      	str	r3, [r7, #20]
 800c162:	e00b      	b.n	800c17c <xStreamBufferLessThenEqual+0x5c>
		}
		else
		{
			xReturn = pdFALSE;
 800c164:	2300      	movs	r3, #0
 800c166:	617b      	str	r3, [r7, #20]
 800c168:	e008      	b.n	800c17c <xStreamBufferLessThenEqual+0x5c>
		}
	}
	else
	{
		if( uxLeft <= uxRight )
 800c16a:	68ba      	ldr	r2, [r7, #8]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d802      	bhi.n	800c178 <xStreamBufferLessThenEqual+0x58>
		{
			xReturn = pdTRUE;
 800c172:	2301      	movs	r3, #1
 800c174:	617b      	str	r3, [r7, #20]
 800c176:	e001      	b.n	800c17c <xStreamBufferLessThenEqual+0x5c>
		}
		else
		{
			xReturn = pdFALSE;
 800c178:	2300      	movs	r3, #0
 800c17a:	617b      	str	r3, [r7, #20]
		}
	}
	return xReturn;
 800c17c:	697b      	ldr	r3, [r7, #20]
}
 800c17e:	4618      	mov	r0, r3
 800c180:	371c      	adds	r7, #28
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr

0800c18a <uxStreamBufferAdd>:
 * an offset from uxHead while uxHead will not be moved yet.  This possibility
 * will be used when TCP data is received while earlier data is still missing.
 * If 'pucData' equals NULL, the function is called to advance 'uxHead' only.
 */
size_t uxStreamBufferAdd( StreamBuffer_t *pxBuffer, size_t uxOffset, const uint8_t *pucData, size_t uxCount )
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b088      	sub	sp, #32
 800c18e:	af00      	add	r7, sp, #0
 800c190:	60f8      	str	r0, [r7, #12]
 800c192:	60b9      	str	r1, [r7, #8]
 800c194:	607a      	str	r2, [r7, #4]
 800c196:	603b      	str	r3, [r7, #0]
size_t uxSpace, uxNextHead, uxFirst;

	uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800c198:	68f8      	ldr	r0, [r7, #12]
 800c19a:	f7ff ff99 	bl	800c0d0 <uxStreamBufferGetSpace>
 800c19e:	61f8      	str	r0, [r7, #28]

	/* If uxOffset > 0, items can be placed in front of uxHead */
	if( uxSpace > uxOffset )
 800c1a0:	69fa      	ldr	r2, [r7, #28]
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d904      	bls.n	800c1b2 <uxStreamBufferAdd+0x28>
	{
		uxSpace -= uxOffset;
 800c1a8:	69fa      	ldr	r2, [r7, #28]
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	1ad3      	subs	r3, r2, r3
 800c1ae:	61fb      	str	r3, [r7, #28]
 800c1b0:	e001      	b.n	800c1b6 <uxStreamBufferAdd+0x2c>
	}
	else
	{
		uxSpace = 0u;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	61fb      	str	r3, [r7, #28]
	}

	/* The number of bytes that can be written is the minimum of the number of
	bytes requested and the number available. */
	uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );
 800c1b6:	6839      	ldr	r1, [r7, #0]
 800c1b8:	69f8      	ldr	r0, [r7, #28]
 800c1ba:	f7ff ff3c 	bl	800c036 <FreeRTOS_min_uint32>
 800c1be:	6038      	str	r0, [r7, #0]

	if( uxCount != 0u )
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d05a      	beq.n	800c27c <uxStreamBufferAdd+0xf2>
	{
		uxNextHead = pxBuffer->uxHead;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	61bb      	str	r3, [r7, #24]

		if( uxOffset != 0u )
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00d      	beq.n	800c1ee <uxStreamBufferAdd+0x64>
		{
			/* ( uxOffset > 0 ) means: write in front if the uxHead marker */
			uxNextHead += uxOffset;
 800c1d2:	69ba      	ldr	r2, [r7, #24]
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	61bb      	str	r3, [r7, #24]
			if( uxNextHead >= pxBuffer->LENGTH )
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	691a      	ldr	r2, [r3, #16]
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d804      	bhi.n	800c1ee <uxStreamBufferAdd+0x64>
			{
				uxNextHead -= pxBuffer->LENGTH;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	691b      	ldr	r3, [r3, #16]
 800c1e8:	69ba      	ldr	r2, [r7, #24]
 800c1ea:	1ad3      	subs	r3, r2, r3
 800c1ec:	61bb      	str	r3, [r7, #24]
			}
		}

		if( pucData != NULL )
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d022      	beq.n	800c23a <uxStreamBufferAdd+0xb0>
		{
			/* Calculate the number of bytes that can be added in the first
			write - which may be less than the total number of bytes that need
			to be added if the buffer will wrap back to the beginning. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	691a      	ldr	r2, [r3, #16]
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	1ad3      	subs	r3, r2, r3
 800c1fc:	6839      	ldr	r1, [r7, #0]
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7ff ff19 	bl	800c036 <FreeRTOS_min_uint32>
 800c204:	6178      	str	r0, [r7, #20]

			/* Write as many bytes as can be written in the first write. */
			memcpy( ( void* ) ( pxBuffer->ucArray + uxNextHead ), pucData, uxFirst );
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f103 0214 	add.w	r2, r3, #20
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	4413      	add	r3, r2
 800c210:	697a      	ldr	r2, [r7, #20]
 800c212:	6879      	ldr	r1, [r7, #4]
 800c214:	4618      	mov	r0, r3
 800c216:	f004 fc6a 	bl	8010aee <memcpy>

			/* If the number of bytes written was less than the number that
			could be written in the first write... */
			if( uxCount > uxFirst )
 800c21a:	683a      	ldr	r2, [r7, #0]
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d90b      	bls.n	800c23a <uxStreamBufferAdd+0xb0>
			{
				/* ...then write the remaining bytes to the start of the
				buffer. */
				memcpy( ( void * )pxBuffer->ucArray, pucData + uxFirst, uxCount - uxFirst );
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f103 0014 	add.w	r0, r3, #20
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	18d1      	adds	r1, r2, r3
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	1ad3      	subs	r3, r2, r3
 800c234:	461a      	mov	r2, r3
 800c236:	f004 fc5a 	bl	8010aee <memcpy>
			}
		}

		if( uxOffset == 0u )
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d110      	bne.n	800c262 <uxStreamBufferAdd+0xd8>
		{
			/* ( uxOffset == 0 ) means: write at uxHead position */
			uxNextHead += uxCount;
 800c240:	69ba      	ldr	r2, [r7, #24]
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	4413      	add	r3, r2
 800c246:	61bb      	str	r3, [r7, #24]
			if( uxNextHead >= pxBuffer->LENGTH )
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	691a      	ldr	r2, [r3, #16]
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d804      	bhi.n	800c25c <uxStreamBufferAdd+0xd2>
			{
				uxNextHead -= pxBuffer->LENGTH;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	691b      	ldr	r3, [r3, #16]
 800c256:	69ba      	ldr	r2, [r7, #24]
 800c258:	1ad3      	subs	r3, r2, r3
 800c25a:	61bb      	str	r3, [r7, #24]
			}
			pxBuffer->uxHead = uxNextHead;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	69ba      	ldr	r2, [r7, #24]
 800c260:	609a      	str	r2, [r3, #8]
		}

		if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	69ba      	ldr	r2, [r7, #24]
 800c268:	4619      	mov	r1, r3
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f7ff ff58 	bl	800c120 <xStreamBufferLessThenEqual>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d002      	beq.n	800c27c <uxStreamBufferAdd+0xf2>
		{
			/* Advance the front pointer */
			pxBuffer->uxFront = uxNextHead;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	69ba      	ldr	r2, [r7, #24]
 800c27a:	60da      	str	r2, [r3, #12]
		}
	}

	return uxCount;
 800c27c:	683b      	ldr	r3, [r7, #0]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3720      	adds	r7, #32
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <uxStreamBufferGet>:
 * If 'pucData' equals NULL, the function is called to advance 'lTail' only.
 * if 'xPeek' is pdTRUE, or if 'uxOffset' is non-zero, the 'lTail' pointer will
 * not be advanced.
 */
size_t uxStreamBufferGet( StreamBuffer_t *pxBuffer, size_t uxOffset, uint8_t *pucData, size_t uxMaxCount, BaseType_t xPeek )
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b088      	sub	sp, #32
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	60f8      	str	r0, [r7, #12]
 800c28e:	60b9      	str	r1, [r7, #8]
 800c290:	607a      	str	r2, [r7, #4]
 800c292:	603b      	str	r3, [r7, #0]
size_t uxSize, uxCount, uxFirst, uxNextTail;

	/* How much data is available? */
	uxSize = uxStreamBufferGetSize( pxBuffer );
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f7ff ff2f 	bl	800c0f8 <uxStreamBufferGetSize>
 800c29a:	61f8      	str	r0, [r7, #28]

	if( uxSize > uxOffset )
 800c29c:	69fa      	ldr	r2, [r7, #28]
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d904      	bls.n	800c2ae <uxStreamBufferGet+0x28>
	{
		uxSize -= uxOffset;
 800c2a4:	69fa      	ldr	r2, [r7, #28]
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	1ad3      	subs	r3, r2, r3
 800c2aa:	61fb      	str	r3, [r7, #28]
 800c2ac:	e001      	b.n	800c2b2 <uxStreamBufferGet+0x2c>
	}
	else
	{
		uxSize = 0u;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	61fb      	str	r3, [r7, #28]
	}

	/* Use the minimum of the wanted bytes and the available bytes. */
	uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	69f8      	ldr	r0, [r7, #28]
 800c2b6:	f7ff febe 	bl	800c036 <FreeRTOS_min_uint32>
 800c2ba:	6178      	str	r0, [r7, #20]

	if( uxCount > 0u )
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d050      	beq.n	800c364 <uxStreamBufferGet+0xde>
	{
		uxNextTail = pxBuffer->uxTail;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	61bb      	str	r3, [r7, #24]

		if( uxOffset != 0u )
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00d      	beq.n	800c2ea <uxStreamBufferGet+0x64>
		{
			uxNextTail += uxOffset;
 800c2ce:	69ba      	ldr	r2, [r7, #24]
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	61bb      	str	r3, [r7, #24]
			if( uxNextTail >= pxBuffer->LENGTH )
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	691a      	ldr	r2, [r3, #16]
 800c2da:	69bb      	ldr	r3, [r7, #24]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d804      	bhi.n	800c2ea <uxStreamBufferGet+0x64>
			{
				uxNextTail -= pxBuffer->LENGTH;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	691b      	ldr	r3, [r3, #16]
 800c2e4:	69ba      	ldr	r2, [r7, #24]
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	61bb      	str	r3, [r7, #24]
			}
		}

		if( pucData != NULL )
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d022      	beq.n	800c336 <uxStreamBufferGet+0xb0>
		{
			/* Calculate the number of bytes that can be read - which may be
			less than the number wanted if the data wraps around to the start of
			the buffer. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	691a      	ldr	r2, [r3, #16]
 800c2f4:	69bb      	ldr	r3, [r7, #24]
 800c2f6:	1ad3      	subs	r3, r2, r3
 800c2f8:	6979      	ldr	r1, [r7, #20]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7ff fe9b 	bl	800c036 <FreeRTOS_min_uint32>
 800c300:	6138      	str	r0, [r7, #16]

			/* Obtain the number of bytes it is possible to obtain in the first
			read. */
			memcpy( pucData, pxBuffer->ucArray + uxNextTail, uxFirst );
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f103 0214 	add.w	r2, r3, #20
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	4413      	add	r3, r2
 800c30c:	693a      	ldr	r2, [r7, #16]
 800c30e:	4619      	mov	r1, r3
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f004 fbec 	bl	8010aee <memcpy>

			/* If the total number of wanted bytes is greater than the number
			that could be read in the first read... */
			if( uxCount > uxFirst )
 800c316:	697a      	ldr	r2, [r7, #20]
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d90b      	bls.n	800c336 <uxStreamBufferGet+0xb0>
			{
				/*...then read the remaining bytes from the start of the buffer. */
				memcpy( pucData + uxFirst, pxBuffer->ucArray, uxCount - uxFirst );
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	18d0      	adds	r0, r2, r3
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f103 0114 	add.w	r1, r3, #20
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	461a      	mov	r2, r3
 800c332:	f004 fbdc 	bl	8010aee <memcpy>
			}
		}

		if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 800c336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d113      	bne.n	800c364 <uxStreamBufferGet+0xde>
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d110      	bne.n	800c364 <uxStreamBufferGet+0xde>
		{
			/* Move the tail pointer to effecively remove the data read from
			the buffer. */
			uxNextTail += uxCount;
 800c342:	69ba      	ldr	r2, [r7, #24]
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	4413      	add	r3, r2
 800c348:	61bb      	str	r3, [r7, #24]

			if( uxNextTail >= pxBuffer->LENGTH )
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	691a      	ldr	r2, [r3, #16]
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	429a      	cmp	r2, r3
 800c352:	d804      	bhi.n	800c35e <uxStreamBufferGet+0xd8>
			{
				uxNextTail -= pxBuffer->LENGTH;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	691b      	ldr	r3, [r3, #16]
 800c358:	69ba      	ldr	r2, [r7, #24]
 800c35a:	1ad3      	subs	r3, r2, r3
 800c35c:	61bb      	str	r3, [r7, #24]
			}

			pxBuffer->uxTail = uxNextTail;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	69ba      	ldr	r2, [r7, #24]
 800c362:	601a      	str	r2, [r3, #0]
		}
	}

	return uxCount;
 800c364:	697b      	ldr	r3, [r7, #20]
}
 800c366:	4618      	mov	r0, r3
 800c368:	3720      	adds	r7, #32
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <FreeRTOS_max_int32>:
	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
 800c36e:	b480      	push	{r7}
 800c370:	b083      	sub	sp, #12
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
 800c376:	6039      	str	r1, [r7, #0]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	4293      	cmp	r3, r2
 800c37e:	bfb8      	it	lt
 800c380:	4613      	movlt	r3, r2
 800c382:	4618      	mov	r0, r3
 800c384:	370c      	adds	r7, #12
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <FreeRTOS_min_int32>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 800c38e:	b480      	push	{r7}
 800c390:	b083      	sub	sp, #12
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
 800c396:	6039      	str	r1, [r7, #0]
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	4293      	cmp	r3, r2
 800c39e:	bfa8      	it	ge
 800c3a0:	4613      	movge	r3, r2
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	370c      	adds	r7, #12
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800c3ae:	b480      	push	{r7}
 800c3b0:	b083      	sub	sp, #12
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
 800c3b6:	6039      	str	r1, [r7, #0]
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	bf28      	it	cs
 800c3c0:	4613      	movcs	r3, r2
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <uxStreamBufferSpace>:
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b087      	sub	sp, #28
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	60f8      	str	r0, [r7, #12]
 800c3d6:	60b9      	str	r1, [r7, #8]
 800c3d8:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	691a      	ldr	r2, [r3, #16]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	441a      	add	r2, r3
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	1ad3      	subs	r3, r2, r3
 800c3e6:	3b01      	subs	r3, #1
 800c3e8:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	691a      	ldr	r2, [r3, #16]
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d804      	bhi.n	800c3fe <uxStreamBufferSpace+0x30>
		uxCount -= pxBuffer->LENGTH;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	691b      	ldr	r3, [r3, #16]
 800c3f8:	697a      	ldr	r2, [r7, #20]
 800c3fa:	1ad3      	subs	r3, r2, r3
 800c3fc:	617b      	str	r3, [r7, #20]
	return uxCount;
 800c3fe:	697b      	ldr	r3, [r7, #20]
}
 800c400:	4618      	mov	r0, r3
 800c402:	371c      	adds	r7, #28
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <uxStreamBufferDistance>:
{
 800c40c:	b480      	push	{r7}
 800c40e:	b087      	sub	sp, #28
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	691a      	ldr	r2, [r3, #16]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	441a      	add	r2, r3
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	1ad3      	subs	r3, r2, r3
 800c424:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	691a      	ldr	r2, [r3, #16]
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d804      	bhi.n	800c43a <uxStreamBufferDistance+0x2e>
		uxCount -= pxBuffer->LENGTH;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	691b      	ldr	r3, [r3, #16]
 800c434:	697a      	ldr	r2, [r7, #20]
 800c436:	1ad3      	subs	r3, r2, r3
 800c438:	617b      	str	r3, [r7, #20]
	return uxCount;
 800c43a:	697b      	ldr	r3, [r7, #20]
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	371c      	adds	r7, #28
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <uxStreamBufferGetSpace>:
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800c45c:	68ba      	ldr	r2, [r7, #8]
 800c45e:	68f9      	ldr	r1, [r7, #12]
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f7ff ffb4 	bl	800c3ce <uxStreamBufferSpace>
 800c466:	4603      	mov	r3, r0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <uxStreamBufferFrontSpace>:
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
size_t uxFront = pxBuffer->uxFront;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800c484:	68ba      	ldr	r2, [r7, #8]
 800c486:	68f9      	ldr	r1, [r7, #12]
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f7ff ffa0 	bl	800c3ce <uxStreamBufferSpace>
 800c48e:	4603      	mov	r3, r0
}
 800c490:	4618      	mov	r0, r3
 800c492:	3710      	adds	r7, #16
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <uxStreamBufferMidSpace>:
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	60fb      	str	r3, [r7, #12]
size_t uxMid = pxBuffer->uxMid;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	68b9      	ldr	r1, [r7, #8]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f7ff ffab 	bl	800c40c <uxStreamBufferDistance>
 800c4b6:	4603      	mov	r3, r0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <vStreamBufferMoveMid>:
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f7ff ffe4 	bl	800c498 <uxStreamBufferMidSpace>
 800c4d0:	60f8      	str	r0, [r7, #12]
	if( uxCount > uxSize )
 800c4d2:	683a      	ldr	r2, [r7, #0]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d901      	bls.n	800c4de <vStreamBufferMoveMid+0x1e>
		uxCount = uxSize;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	603b      	str	r3, [r7, #0]
	pxBuffer->uxMid += uxCount;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	685a      	ldr	r2, [r3, #4]
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	441a      	add	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	605a      	str	r2, [r3, #4]
	if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	685a      	ldr	r2, [r3, #4]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	691b      	ldr	r3, [r3, #16]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d306      	bcc.n	800c504 <vStreamBufferMoveMid+0x44>
		pxBuffer->uxMid -= pxBuffer->LENGTH;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	685a      	ldr	r2, [r3, #4]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	691b      	ldr	r3, [r3, #16]
 800c4fe:	1ad2      	subs	r2, r2, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	605a      	str	r2, [r3, #4]
}
 800c504:	bf00      	nop
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <ulChar2u32>:
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	061a      	lsls	r2, r3, #24
			( ( ( uint32_t )apChr[1] ) << 16) |
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	3301      	adds	r3, #1
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	041b      	lsls	r3, r3, #16
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 800c522:	431a      	orrs	r2, r3
			( ( ( uint32_t )apChr[2] ) << 8) |
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	3302      	adds	r3, #2
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	021b      	lsls	r3, r3, #8
			( ( ( uint32_t )apChr[1] ) << 16) |
 800c52c:	4313      	orrs	r3, r2
			( ( ( uint32_t )apChr[3] ) );
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	3203      	adds	r2, #3
 800c532:	7812      	ldrb	r2, [r2, #0]
			( ( ( uint32_t )apChr[2] ) << 8) |
 800c534:	4313      	orrs	r3, r2
}
 800c536:	4618      	mov	r0, r3
 800c538:	370c      	adds	r7, #12
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr

0800c542 <usChar2u16>:
{
 800c542:	b480      	push	{r7}
 800c544:	b083      	sub	sp, #12
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	b29b      	uxth	r3, r3
 800c550:	021b      	lsls	r3, r3, #8
 800c552:	b29a      	uxth	r2, r3
			  ( ( ( uint32_t )apChr[1] ) ) );
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	3301      	adds	r3, #1
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	b29b      	uxth	r3, r3
	return ( uint16_t )
 800c55c:	4313      	orrs	r3, r2
 800c55e:	b29b      	uxth	r3, r3
}
 800c560:	4618      	mov	r0, r3
 800c562:	370c      	adds	r7, #12
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <prvTCPSocketIsActive>:

/* prvTCPSocketIsActive() returns true if the socket must be checked.
 * Non-active sockets are waiting for user action, either connect()
 * or close(). */
static BaseType_t prvTCPSocketIsActive( UBaseType_t uxStatus )
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
	switch( uxStatus )
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2b0b      	cmp	r3, #11
 800c578:	d81c      	bhi.n	800c5b4 <prvTCPSocketIsActive+0x48>
 800c57a:	a201      	add	r2, pc, #4	; (adr r2, 800c580 <prvTCPSocketIsActive+0x14>)
 800c57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c580:	0800c5b1 	.word	0x0800c5b1
 800c584:	0800c5b5 	.word	0x0800c5b5
 800c588:	0800c5b5 	.word	0x0800c5b5
 800c58c:	0800c5b5 	.word	0x0800c5b5
 800c590:	0800c5b5 	.word	0x0800c5b5
 800c594:	0800c5b5 	.word	0x0800c5b5
 800c598:	0800c5b5 	.word	0x0800c5b5
 800c59c:	0800c5b1 	.word	0x0800c5b1
 800c5a0:	0800c5b1 	.word	0x0800c5b1
 800c5a4:	0800c5b1 	.word	0x0800c5b1
 800c5a8:	0800c5b5 	.word	0x0800c5b5
 800c5ac:	0800c5b1 	.word	0x0800c5b1
	case eCLOSED:
	case eCLOSE_WAIT:
	case eFIN_WAIT_2:
	case eCLOSING:
	case eTIME_WAIT:
		return pdFALSE;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	e000      	b.n	800c5b6 <prvTCPSocketIsActive+0x4a>
	default:
		return pdTRUE;
 800c5b4:	2301      	movs	r3, #1
	}
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	370c      	adds	r7, #12
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop

0800c5c4 <prvTCPStatusAgeCheck>:
/*-----------------------------------------------------------*/

#if( ipconfigTCP_HANG_PROTECTION == 1 )

	static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t *pxSocket )
	{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
	BaseType_t xResult;
		switch( pxSocket->u.xTCP.ucTCPState )
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c5d2:	2b08      	cmp	r3, #8
 800c5d4:	d81a      	bhi.n	800c60c <prvTCPStatusAgeCheck+0x48>
 800c5d6:	a201      	add	r2, pc, #4	; (adr r2, 800c5dc <prvTCPStatusAgeCheck+0x18>)
 800c5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5dc:	0800c607 	.word	0x0800c607
 800c5e0:	0800c607 	.word	0x0800c607
 800c5e4:	0800c60d 	.word	0x0800c60d
 800c5e8:	0800c60d 	.word	0x0800c60d
 800c5ec:	0800c60d 	.word	0x0800c60d
 800c5f0:	0800c601 	.word	0x0800c601
 800c5f4:	0800c60d 	.word	0x0800c60d
 800c5f8:	0800c60d 	.word	0x0800c60d
 800c5fc:	0800c607 	.word	0x0800c607
		{
		case eESTABLISHED:
			/* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
			state ESTABLISHED can be protected using keep-alive messages. */
			xResult = pdFALSE;
 800c600:	2300      	movs	r3, #0
 800c602:	60fb      	str	r3, [r7, #12]
			break;
 800c604:	e005      	b.n	800c612 <prvTCPStatusAgeCheck+0x4e>
		case eCLOSED:
		case eTCP_LISTEN:
		case eCLOSE_WAIT:
			/* These 3 states may last for ever, up to the owner. */
			xResult = pdFALSE;
 800c606:	2300      	movs	r3, #0
 800c608:	60fb      	str	r3, [r7, #12]
			break;
 800c60a:	e002      	b.n	800c612 <prvTCPStatusAgeCheck+0x4e>
		default:
			/* All other (non-connected) states will get anti-hanging
			protection. */
			xResult = pdTRUE;
 800c60c:	2301      	movs	r3, #1
 800c60e:	60fb      	str	r3, [r7, #12]
			break;
 800c610:	bf00      	nop
		}
		if( xResult != pdFALSE )
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d025      	beq.n	800c664 <prvTCPStatusAgeCheck+0xa0>
		{
			/* How much time has past since the last active moment which is
			defined as A) a state change or B) a packet has arrived. */
			TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastActTime;
 800c618:	f7fb f8c8 	bl	80077ac <xTaskGetTickCount>
 800c61c:	4602      	mov	r2, r0
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c622:	1ad3      	subs	r3, r2, r3
 800c624:	60bb      	str	r3, [r7, #8]

			/* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
			if( xAge > ( ipconfigTCP_HANG_PROTECTION_TIME * configTICK_RATE_HZ ) )
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	f247 5230 	movw	r2, #30000	; 0x7530
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d919      	bls.n	800c664 <prvTCPStatusAgeCheck+0xa0>
						FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) ) );
				}
				#endif /* ipconfigHAS_DEBUG_PRINTF */

				/* Move to eCLOSE_WAIT, user may close the socket. */
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c630:	2108      	movs	r1, #8
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fd39 	bl	800d0aa <vTCPStateChange>

				/* When 'bPassQueued' true, this socket is an orphan until it
				gets connected. */
				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c63e:	f003 0304 	and.w	r3, r3, #4
 800c642:	b2db      	uxtb	r3, r3
 800c644:	2b00      	cmp	r3, #0
 800c646:	d00d      	beq.n	800c664 <prvTCPStatusAgeCheck+0xa0>
				{
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c64e:	f003 0308 	and.w	r3, r3, #8
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b00      	cmp	r3, #0
 800c656:	d102      	bne.n	800c65e <prvTCPStatusAgeCheck+0x9a>
					{
						/* As it did not get connected, and the user can never
						accept() it anymore, it will be deleted now.  Called from
						the IP-task, so it's safe to call the internal Close
						function: vSocketClose(). */
						vSocketClose( pxSocket );
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f7fe feb9 	bl	800b3d0 <vSocketClose>
					}
					/* Return a negative value to tell to inform the caller
					xTCPTimerCheck()
					that the socket got closed and may not be accessed anymore. */
					xResult = -1;
 800c65e:	f04f 33ff 	mov.w	r3, #4294967295
 800c662:	60fb      	str	r3, [r7, #12]
				}
			}
		}
		return xResult;
 800c664:	68fb      	ldr	r3, [r7, #12]
	}
 800c666:	4618      	mov	r0, r3
 800c668:	3710      	adds	r7, #16
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop

0800c670 <xTCPSocketCheck>:
 *		prvTCPSendRepeated()			// Send at most 8 messages on a row
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t *pxSocket )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
BaseType_t xResult = 0;
 800c678:	2300      	movs	r3, #0
 800c67a:	60fb      	str	r3, [r7, #12]
BaseType_t xReady = pdFALSE;
 800c67c:	2300      	movs	r3, #0
 800c67e:	60bb      	str	r3, [r7, #8]

	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c686:	2b04      	cmp	r3, #4
 800c688:	d906      	bls.n	800c698 <xTCPSocketCheck+0x28>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d002      	beq.n	800c698 <xTCPSocketCheck+0x28>
	{
		/* The API FreeRTOS_send() might have added data to the TX stream.  Add
		this data to the windowing system to it can be transmitted. */
		prvTCPAddTxData( pxSocket );
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f001 f82a 	bl	800d6ec <prvTCPAddTxData>
	}

	#if ipconfigUSE_TCP_WIN == 1
	{
		if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d02a      	beq.n	800c6f6 <xTCPSocketCheck+0x86>
		{
			/* The first task of this regular socket check is to send-out delayed
			ACK's. */
			if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c6a6:	f003 0320 	and.w	r3, r3, #32
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d116      	bne.n	800c6de <xTCPSocketCheck+0x6e>
			{
				/* Earlier data was received but not yet acknowledged.  This
				function is called when the TCP timer for the socket expires, the
				ACK may be sent now. */
				if( pxSocket->u.xTCP.ucTCPState != eCLOSED )
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d009      	beq.n	800c6ce <xTCPSocketCheck+0x5e>
				{
					if( xTCPWindowLoggingLevel > 1 && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800c6ba:	4b1d      	ldr	r3, [pc, #116]	; (800c730 <xTCPSocketCheck+0xc0>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b01      	cmp	r3, #1
							pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
							pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber   - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber,
							ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) );
					}

					prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	2228      	movs	r2, #40	; 0x28
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 f8bb 	bl	800c844 <prvTCPReturnPacket>
						clear the pointer to it. */
						pxSocket->u.xTCP.pxAckMessage = NULL;
					}
					#endif /* ipconfigZERO_COPY_TX_DRIVER */
				}
				if( prvTCPNextTimeout( pxSocket ) > 1 )
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 ff8e 	bl	800d5f0 <prvTCPNextTimeout>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d901      	bls.n	800c6de <xTCPSocketCheck+0x6e>
				{
					/* Tell the code below that this function is ready. */
					xReady = pdTRUE;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	60bb      	str	r3, [r7, #8]
				/* The user wants to perform an active shutdown(), skip sending
				the	delayed	ACK.  The function prvTCPSendPacket() will send the
				FIN	along with the ACK's. */
			}

			if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d007      	beq.n	800c6f6 <xTCPSocketCheck+0x86>
			{
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f003 fa96 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
				pxSocket->u.xTCP.pxAckMessage = NULL;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	67da      	str	r2, [r3, #124]	; 0x7c
			}
		}
	}
	#endif /* ipconfigUSE_TCP_WIN */

	if( xReady == pdFALSE )
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d113      	bne.n	800c724 <xTCPSocketCheck+0xb4>
	{
		/* The second task of this regular socket check is sending out data. */
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c702:	2b04      	cmp	r3, #4
 800c704:	d804      	bhi.n	800c710 <xTCPSocketCheck+0xa0>
			( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) )
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 800c70c:	2b02      	cmp	r3, #2
 800c70e:	d102      	bne.n	800c716 <xTCPSocketCheck+0xa6>
		{
			prvTCPSendPacket( pxSocket );
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 f80f 	bl	800c734 <prvTCPSendPacket>
		}

		/* Set the time-out for the next wakeup for this socket. */
		prvTCPNextTimeout( pxSocket );
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 ff6a 	bl	800d5f0 <prvTCPNextTimeout>

		#if( ipconfigTCP_HANG_PROTECTION == 1 )
		{
			/* In all (non-connected) states in which keep-alive messages can not be sent
			the anti-hang protocol will close sockets that are 'hanging'. */
			xResult = prvTCPStatusAgeCheck( pxSocket );
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f7ff ff51 	bl	800c5c4 <prvTCPStatusAgeCheck>
 800c722:	60f8      	str	r0, [r7, #12]
		}
		#endif
	}

	return xResult;
 800c724:	68fb      	ldr	r3, [r7, #12]
}
 800c726:	4618      	mov	r0, r3
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	2000424c 	.word	0x2000424c

0800c734 <prvTCPSendPacket>:
/*
 * prvTCPSendPacket() will be called when the socket time-out has been reached.
 * It is only called by xTCPSocketCheck().
 */
static int32_t prvTCPSendPacket( FreeRTOS_Socket_t *pxSocket )
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b086      	sub	sp, #24
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
int32_t lResult = 0;
 800c73c:	2300      	movs	r3, #0
 800c73e:	617b      	str	r3, [r7, #20]
UBaseType_t uxOptionsLength;
TCPPacket_t *pxTCPPacket;
NetworkBufferDescriptor_t *pxNetworkBuffer;

	if( pxSocket->u.xTCP.ucTCPState != eCONNECT_SYN )
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c746:	2b02      	cmp	r3, #2
 800c748:	d010      	beq.n	800c76c <prvTCPSendPacket+0x38>
	{
		/* The connection is in s state other than SYN. */
		pxNetworkBuffer = NULL;
 800c74a:	2300      	movs	r3, #0
 800c74c:	60bb      	str	r3, [r7, #8]

		/* prvTCPSendRepeated() will only create a network buffer if necessary,
		i.e. when data must be sent to the peer. */
		lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800c74e:	f107 0308 	add.w	r3, r7, #8
 800c752:	4619      	mov	r1, r3
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 f848 	bl	800c7ea <prvTCPSendRepeated>
 800c75a:	6178      	str	r0, [r7, #20]

		if( pxNetworkBuffer != NULL )
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d03e      	beq.n	800c7e0 <prvTCPSendPacket+0xac>
		{
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	4618      	mov	r0, r3
 800c766:	f003 fa59 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
 800c76a:	e039      	b.n	800c7e0 <prvTCPSendPacket+0xac>
		}
	}
	else
	{
		if( pxSocket->u.xTCP.ucRepCount >= 3u )
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c772:	2b02      	cmp	r3, #2
 800c774:	d904      	bls.n	800c780 <prvTCPSendPacket+0x4c>
			to most 3 times.  When there is no response, the socket get the
			status 'eCLOSE_WAIT'. */
			FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
				pxSocket->u.xTCP.ulRemoteIP,		/* IP address of remote machine. */
				pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c776:	2108      	movs	r1, #8
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 fc96 	bl	800d0aa <vTCPStateChange>
 800c77e:	e02f      	b.n	800c7e0 <prvTCPSendPacket+0xac>
		}
		else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c786:	f003 0308 	and.w	r3, r3, #8
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d105      	bne.n	800c79c <prvTCPSendPacket+0x68>
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 fa29 	bl	800cbe8 <prvTCPPrepareConnect>
 800c796:	4603      	mov	r3, r0
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d121      	bne.n	800c7e0 <prvTCPSendPacket+0xac>
		{
			/* Or else, if the connection has been prepared, or can be prepared
			now, proceed to send the packet with the SYN flag.
			prvTCPPrepareConnect() prepares 'xPacket' and returns pdTRUE if
			the Ethernet address of the peer or the gateway is found. */
			pxTCPPacket = ( TCPPacket_t * )pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	3382      	adds	r3, #130	; 0x82
 800c7a0:	613b      	str	r3, [r7, #16]
			#endif

			/* About to send a SYN packet.  Call prvSetSynAckOptions() to set
			the proper options: The size of MSS and whether SACK's are
			allowed. */
			uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPPacket );
 800c7a2:	6939      	ldr	r1, [r7, #16]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 fc08 	bl	800cfba <prvSetSynAckOptions>
 800c7aa:	60f8      	str	r0, [r7, #12]

			/* Return the number of bytes to be sent. */
			lResult = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	3328      	adds	r3, #40	; 0x28
 800c7b0:	617b      	str	r3, [r7, #20]

			/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
			uxOptionsLength is always a multiple of 4.  The complete expression
			would be:
			ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
			pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	3314      	adds	r3, #20
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	b2da      	uxtb	r2, r3
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

			/* Repeat Count is used for a connecting socket, to limit the number
			of tries. */
			pxSocket->u.xTCP.ucRepCount++;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	b2da      	uxtb	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

			/* Send the SYN message to make a connection.  The messages is
			stored in the socket field 'xPacket'.  It will be wrapped in a
			pseudo network buffer descriptor before it will be sent. */
			prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 800c7d4:	697a      	ldr	r2, [r7, #20]
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	2100      	movs	r1, #0
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 f832 	bl	800c844 <prvTCPReturnPacket>
		}
	}

	/* Return the total number of bytes sent. */
	return lResult;
 800c7e0:	697b      	ldr	r3, [r7, #20]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3718      	adds	r7, #24
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <prvTCPSendRepeated>:
/*
 * prvTCPSendRepeated will try to send a series of messages, as long as there is
 * data to be sent and as long as the transmit window isn't full.
 */
static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer )
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b086      	sub	sp, #24
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	6039      	str	r1, [r7, #0]
UBaseType_t uxIndex;
int32_t lResult = 0;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	613b      	str	r3, [r7, #16]
UBaseType_t uxOptionsLength = 0u;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	60fb      	str	r3, [r7, #12]
int32_t xSendLength;

	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	617b      	str	r3, [r7, #20]
 800c800:	e016      	b.n	800c830 <prvTCPSendRepeated+0x46>
	{
		/* prvTCPPrepareSend() might allocate a network buffer if there is data
		to be sent. */
		xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	6839      	ldr	r1, [r7, #0]
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 fd8a 	bl	800d320 <prvTCPPrepareSend>
 800c80c:	60b8      	str	r0, [r7, #8]
		if( xSendLength <= 0 )
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	2b00      	cmp	r3, #0
 800c812:	dd11      	ble.n	800c838 <prvTCPSendRepeated+0x4e>
		{
			break;
		}

		/* And return the packet to the peer. */
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	6819      	ldr	r1, [r3, #0]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	2300      	movs	r3, #0
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 f811 	bl	800c844 <prvTCPReturnPacket>
		{
			*ppxNetworkBuffer = NULL;
		}
		#endif /* ipconfigZERO_COPY_TX_DRIVER */

		lResult += xSendLength;
 800c822:	693a      	ldr	r2, [r7, #16]
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	4413      	add	r3, r2
 800c828:	613b      	str	r3, [r7, #16]
	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	3301      	adds	r3, #1
 800c82e:	617b      	str	r3, [r7, #20]
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	2b07      	cmp	r3, #7
 800c834:	d9e5      	bls.n	800c802 <prvTCPSendRepeated+0x18>
 800c836:	e000      	b.n	800c83a <prvTCPSendRepeated+0x50>
			break;
 800c838:	bf00      	nop
	}

	/* Return the total number of bytes sent. */
	return lResult;
 800c83a:	693b      	ldr	r3, [r7, #16]
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3718      	adds	r7, #24
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <prvTCPReturnPacket>:
 * which may either point to a real network buffer or to a TCP socket field
 * called 'xTCP.xPacket'.   A temporary xNetworkBuffer will be used to pass
 * the data to the NIC.
 */
static void prvTCPReturnPacket( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulLen, BaseType_t xReleaseAfterSend )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b098      	sub	sp, #96	; 0x60
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
 800c850:	603b      	str	r3, [r7, #0]
uint32_t ulFrontSpace, ulSpace, ulSourceAddress, ulWinSize;
TCPWindow_t *pxTCPWindow;
NetworkBufferDescriptor_t xTempBuffer;
/* For sending, a pseudo network buffer will be used, as explained above. */

	if( pxNetworkBuffer == NULL )
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d109      	bne.n	800c86c <prvTCPReturnPacket+0x28>
	{
		pxNetworkBuffer = &xTempBuffer;
 800c858:	f107 0310 	add.w	r3, r7, #16
 800c85c:	60bb      	str	r3, [r7, #8]
		#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
		{
			xTempBuffer.pxNextBuffer = NULL;
		}
		#endif
		xTempBuffer.pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3382      	adds	r3, #130	; 0x82
 800c862:	62bb      	str	r3, [r7, #40]	; 0x28
		xTempBuffer.xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800c864:	2346      	movs	r3, #70	; 0x46
 800c866:	62fb      	str	r3, [r7, #44]	; 0x2c
		xReleaseAfterSend = pdFALSE;
 800c868:	2300      	movs	r3, #0
 800c86a:	603b      	str	r3, [r7, #0]
			xReleaseAfterSend = pdTRUE;
		}
	}
	#endif /* ipconfigZERO_COPY_TX_DRIVER */

	if( pxNetworkBuffer != NULL )
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f000 818a 	beq.w	800cb88 <prvTCPReturnPacket+0x344>
	{
		pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	699b      	ldr	r3, [r3, #24]
 800c878:	64fb      	str	r3, [r7, #76]	; 0x4c
		pxIPHeader = &pxTCPPacket->xIPHeader;
 800c87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c87c:	330e      	adds	r3, #14
 800c87e:	64bb      	str	r3, [r7, #72]	; 0x48
		pxEthernetHeader = &pxTCPPacket->xEthernetHeader;
 800c880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c882:	647b      	str	r3, [r7, #68]	; 0x44

		/* Fill the packet, using hton translations. */
		if( pxSocket != NULL )
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2b00      	cmp	r3, #0
 800c888:	f000 80ed 	beq.w	800ca66 <prvTCPReturnPacket+0x222>
		{
			/* Calculate the space in the RX buffer in order to advertise the
			size of this socket's reception window. */
			pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	33dc      	adds	r3, #220	; 0xdc
 800c890:	643b      	str	r3, [r7, #64]	; 0x40

			if( pxSocket->u.xTCP.rxStream != NULL )
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c896:	2b00      	cmp	r3, #0
 800c898:	d006      	beq.n	800c8a8 <prvTCPReturnPacket+0x64>
			{
				/* An RX stream was created already, see how much space is
				available. */
				ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7ff fde6 	bl	800c470 <uxStreamBufferFrontSpace>
 800c8a4:	65f8      	str	r0, [r7, #92]	; 0x5c
 800c8a6:	e002      	b.n	800c8ae <prvTCPReturnPacket+0x6a>
			}
			else
			{
				/* No RX stream has been created, the full stream size is
				available. */
				ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8ac:	65fb      	str	r3, [r7, #92]	; 0x5c
			}

			/* Take the minimum of the RX buffer space and the RX window size. */
			ulSpace = FreeRTOS_min_uint32( pxSocket->u.xTCP.ulRxCurWinSize, pxTCPWindow->xSize.ulRxWindowLength );
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800c8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	4610      	mov	r0, r2
 800c8bc:	f7ff fd77 	bl	800c3ae <FreeRTOS_min_uint32>
 800c8c0:	65b8      	str	r0, [r7, #88]	; 0x58

			if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d107      	bne.n	800c8e2 <prvTCPReturnPacket+0x9e>
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8d8:	f003 0304 	and.w	r3, r3, #4
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d001      	beq.n	800c8e6 <prvTCPReturnPacket+0xa2>
			{
				/* The low-water mark was reached, meaning there was little
				space left.  The socket will wait until the application has read
				or flushed the incoming data, and 'zero-window' will be
				advertised. */
				ulSpace = 0u;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	65bb      	str	r3, [r7, #88]	; 0x58
			}

			/* If possible, advertise an RX window size of at least 1 MSS, otherwise
			the peer might start 'zero window probing', i.e. sending small packets
			(1, 2, 4, 8... bytes). */
			if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d90a      	bls.n	800c90a <prvTCPReturnPacket+0xc6>
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d803      	bhi.n	800c90a <prvTCPReturnPacket+0xc6>
			{
				ulSpace = pxSocket->u.xTCP.usCurMSS;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c908:	65bb      	str	r3, [r7, #88]	; 0x58
			}

			/* Avoid overflow of the 16-bit win field. */
			ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c910:	461a      	mov	r2, r3
 800c912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c914:	40d3      	lsrs	r3, r2
 800c916:	653b      	str	r3, [r7, #80]	; 0x50
			if( ulWinSize > 0xfffcUL )
 800c918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c91a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800c91e:	4293      	cmp	r3, r2
 800c920:	d902      	bls.n	800c928 <prvTCPReturnPacket+0xe4>
			{
				ulWinSize = 0xfffcUL;
 800c922:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800c926:	653b      	str	r3, [r7, #80]	; 0x50
			}

			pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800c928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	021b      	lsls	r3, r3, #8
 800c92e:	b21a      	sxth	r2, r3
 800c930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c932:	b29b      	uxth	r3, r3
 800c934:	0a1b      	lsrs	r3, r3, #8
 800c936:	b29b      	uxth	r3, r3
 800c938:	b21b      	sxth	r3, r3
 800c93a:	4313      	orrs	r3, r2
 800c93c:	b21b      	sxth	r3, r3
 800c93e:	b29a      	uxth	r2, r3
 800c940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c942:	861a      	strh	r2, [r3, #48]	; 0x30
				}
			}
			#endif /* ipconfigHAS_DEBUG_PRINTF != 0 */

			/* The new window size has been advertised, switch off the flag. */
			pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c94a:	f36f 0300 	bfc	r3, #0, #1
 800c94e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

			/* Later on, when deciding to delay an ACK, a precise estimate is needed
			of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
			highest sequence number minus 1 that the socket will accept. */
			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800c952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c954:	691a      	ldr	r2, [r3, #16]
 800c956:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c958:	441a      	add	r2, r3
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	645a      	str	r2, [r3, #68]	; 0x44

			#if( ipconfigTCP_KEEP_ALIVE == 1 )
				if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c964:	f003 0302 	and.w	r3, r3, #2
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d02f      	beq.n	800c9ce <prvTCPReturnPacket+0x18a>
				{
					/* Sending a keep-alive packet, send the current sequence number
					minus 1, which will	be recognised as a keep-alive packet an
					responded to by acknowledging the last byte. */
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800c96e:	68fa      	ldr	r2, [r7, #12]
 800c970:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c974:	f36f 0341 	bfc	r3, #1, #1
 800c978:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c982:	f043 0304 	orr.w	r3, r3, #4
 800c986:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

					pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c990:	1e5a      	subs	r2, r3, #1
 800c992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c994:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800c998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c99a:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c99e:	061a      	lsls	r2, r3, #24
 800c9a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9a2:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c9a6:	021b      	lsls	r3, r3, #8
 800c9a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9ac:	431a      	orrs	r2, r3
 800c9ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9b0:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c9b4:	0a1b      	lsrs	r3, r3, #8
 800c9b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c9ba:	431a      	orrs	r2, r3
 800c9bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9be:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c9c2:	0e1b      	lsrs	r3, r3, #24
 800c9c4:	431a      	orrs	r2, r3
 800c9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9c8:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800c9cc:	e034      	b.n	800ca38 <prvTCPReturnPacket+0x1f4>
				}
				else
			#endif
			{
				pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c9d4:	061a      	lsls	r2, r3, #24
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c9dc:	021b      	lsls	r3, r3, #8
 800c9de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9e2:	431a      	orrs	r2, r3
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c9ea:	0a1b      	lsrs	r3, r3, #8
 800c9ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c9f0:	431a      	orrs	r2, r3
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c9f8:	0e1b      	lsrs	r3, r3, #24
 800c9fa:	431a      	orrs	r2, r3
 800c9fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9fe:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

				if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u )
 800ca02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca04:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca08:	f003 0301 	and.w	r3, r3, #1
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d013      	beq.n	800ca38 <prvTCPReturnPacket+0x1f4>
				{
					/* Suppress FIN in case this packet carries earlier data to be
					retransmitted. */
					uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	3b28      	subs	r3, #40	; 0x28
 800ca14:	63fb      	str	r3, [r7, #60]	; 0x3c
					if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 800ca16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca1c:	441a      	add	r2, r3
 800ca1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d008      	beq.n	800ca38 <prvTCPReturnPacket+0x1f4>
					{
						pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_FIN );
 800ca26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca2c:	f023 0301 	bic.w	r3, r3, #1
 800ca30:	b2da      	uxtb	r2, r3
 800ca32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca34:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
					}
				}
			}

			/* Tell which sequence number is expected next time */
			pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 800ca38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca3a:	691b      	ldr	r3, [r3, #16]
 800ca3c:	061a      	lsls	r2, r3, #24
 800ca3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	021b      	lsls	r3, r3, #8
 800ca44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ca48:	431a      	orrs	r2, r3
 800ca4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca4c:	691b      	ldr	r3, [r3, #16]
 800ca4e:	0a1b      	lsrs	r3, r3, #8
 800ca50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ca54:	431a      	orrs	r2, r3
 800ca56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca58:	691b      	ldr	r3, [r3, #16]
 800ca5a:	0e1b      	lsrs	r3, r3, #24
 800ca5c:	431a      	orrs	r2, r3
 800ca5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca60:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 800ca64:	e00d      	b.n	800ca82 <prvTCPReturnPacket+0x23e>
		}
		else
		{
			/* Sending data without a socket, probably replying with a RST flag
			Just swap the two sequence numbers. */
			vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 800ca66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca68:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ca6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca70:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 800ca74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca76:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800ca7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca7e:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
		}

		pxIPHeader->ucTimeToLive           = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800ca82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca84:	2280      	movs	r2, #128	; 0x80
 800ca86:	721a      	strb	r2, [r3, #8]
		pxIPHeader->usLength               = FreeRTOS_htons( ulLen );
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	021b      	lsls	r3, r3, #8
 800ca8e:	b29a      	uxth	r2, r3
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	0a1b      	lsrs	r3, r3, #8
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	4313      	orrs	r3, r2
 800ca98:	b29a      	uxth	r2, r3
 800ca9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca9c:	805a      	strh	r2, [r3, #2]
		if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d003      	beq.n	800caac <prvTCPReturnPacket+0x268>
 800caa4:	4b3a      	ldr	r3, [pc, #232]	; (800cb90 <prvTCPReturnPacket+0x34c>)
 800caa6:	695b      	ldr	r3, [r3, #20]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d103      	bne.n	800cab4 <prvTCPReturnPacket+0x270>
		{
			/* When pxSocket is NULL, this function is called by prvTCPSendReset()
			and the IP-addresses must be swapped.
			Also swap the IP-addresses in case the IP-tack doesn't have an
			IP-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ). */
			ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 800caac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caae:	691b      	ldr	r3, [r3, #16]
 800cab0:	657b      	str	r3, [r7, #84]	; 0x54
 800cab2:	e002      	b.n	800caba <prvTCPReturnPacket+0x276>
		}
		else
		{
			ulSourceAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800cab4:	4b36      	ldr	r3, [pc, #216]	; (800cb90 <prvTCPReturnPacket+0x34c>)
 800cab6:	695b      	ldr	r3, [r3, #20]
 800cab8:	657b      	str	r3, [r7, #84]	; 0x54
		}
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800caba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cabc:	68da      	ldr	r2, [r3, #12]
 800cabe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cac0:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 800cac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cac4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cac6:	60da      	str	r2, [r3, #12]
		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800cac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caca:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800cace:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800cad2:	021b      	lsls	r3, r3, #8
 800cad4:	4313      	orrs	r3, r2
 800cad6:	86fb      	strh	r3, [r7, #54]	; 0x36
 800cad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cada:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cadc:	b29a      	uxth	r2, r3
 800cade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cae0:	845a      	strh	r2, [r3, #34]	; 0x22
 800cae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cae4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cae6:	849a      	strh	r2, [r3, #36]	; 0x24

		/* Just an increasing number. */
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800cae8:	4b2a      	ldr	r3, [pc, #168]	; (800cb94 <prvTCPReturnPacket+0x350>)
 800caea:	881b      	ldrh	r3, [r3, #0]
 800caec:	021b      	lsls	r3, r3, #8
 800caee:	b21a      	sxth	r2, r3
 800caf0:	4b28      	ldr	r3, [pc, #160]	; (800cb94 <prvTCPReturnPacket+0x350>)
 800caf2:	881b      	ldrh	r3, [r3, #0]
 800caf4:	0a1b      	lsrs	r3, r3, #8
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	b21b      	sxth	r3, r3
 800cafa:	4313      	orrs	r3, r2
 800cafc:	b21b      	sxth	r3, r3
 800cafe:	b29a      	uxth	r2, r3
 800cb00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb02:	809a      	strh	r2, [r3, #4]
		usPacketIdentifier++;
 800cb04:	4b23      	ldr	r3, [pc, #140]	; (800cb94 <prvTCPReturnPacket+0x350>)
 800cb06:	881b      	ldrh	r3, [r3, #0]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	b29a      	uxth	r2, r3
 800cb0c:	4b21      	ldr	r3, [pc, #132]	; (800cb94 <prvTCPReturnPacket+0x350>)
 800cb0e:	801a      	strh	r2, [r3, #0]
		pxIPHeader->usFragmentOffset = 0u;
 800cb10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb12:	2200      	movs	r2, #0
 800cb14:	719a      	strb	r2, [r3, #6]
 800cb16:	2200      	movs	r2, #0
 800cb18:	71da      	strb	r2, [r3, #7]
	#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
		pxNetworkBuffer->pxNextBuffer = NULL;
	#endif

		/* Important: tell NIC driver how many bytes must be sent. */
		pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f103 020e 	add.w	r2, r3, #14
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	61da      	str	r2, [r3, #28]

		/* Fill in the destination MAC addresses. */
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ),
 800cb24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cb26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb28:	3306      	adds	r3, #6
 800cb2a:	2206      	movs	r2, #6
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	f003 ffde 	bl	8010aee <memcpy>
			sizeof( pxEthernetHeader->xDestinationAddress ) );

		/* The source MAC addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800cb32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb34:	3306      	adds	r3, #6
 800cb36:	2206      	movs	r2, #6
 800cb38:	4915      	ldr	r1, [pc, #84]	; (800cb90 <prvTCPReturnPacket+0x34c>)
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f003 ffd7 	bl	8010aee <memcpy>
			}
		}
		#endif

		/* Send! */
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800cb40:	6839      	ldr	r1, [r7, #0]
 800cb42:	68b8      	ldr	r0, [r7, #8]
 800cb44:	f7f7 fe90 	bl	8004868 <xNetworkInterfaceOutput>

		if( xReleaseAfterSend == pdFALSE )
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d11c      	bne.n	800cb88 <prvTCPReturnPacket+0x344>
		{
			/* Swap-back some fields, as pxBuffer probably points to a socket field
			containing the packet header. */
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort);
 800cb4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb50:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800cb54:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800cb58:	021b      	lsls	r3, r3, #8
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800cb5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb66:	845a      	strh	r2, [r3, #34]	; 0x22
 800cb68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800cb6c:	849a      	strh	r2, [r3, #36]	; 0x24
			pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 800cb6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb70:	f8d3 201e 	ldr.w	r2, [r3, #30]
 800cb74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb76:	f8c3 201a 	str.w	r2, [r3, #26]
			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800cb7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb7c:	3306      	adds	r3, #6
 800cb7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb80:	2206      	movs	r2, #6
 800cb82:	4618      	mov	r0, r3
 800cb84:	f003 ffb3 	bl	8010aee <memcpy>
		else
		{
			/* Nothing to do: the buffer has been passed to DMA and will be released after use */
		}
	} /* if( pxNetworkBuffer != NULL ) */
}
 800cb88:	bf00      	nop
 800cb8a:	3760      	adds	r7, #96	; 0x60
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	200000a0 	.word	0x200000a0
 800cb94:	20004190 	.word	0x20004190

0800cb98 <prvTCPCreateWindow>:
 * random starting value, are being synchronised.  The sliding window manager
 * (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 * Size (MSS) in use.
 */
static void prvTCPCreateWindow( FreeRTOS_Socket_t *pxSocket )
{
 800cb98:	b5b0      	push	{r4, r5, r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af02      	add	r7, sp, #8
 800cb9e:	6078      	str	r0, [r7, #4]
		FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %lu Water %lu <= %lu <= %lu\n",
			pxSocket->u.xTCP.uxRxWinSize * ipconfigTCP_MSS,
			pxSocket->u.xTCP.uxLittleSpace ,
			pxSocket->u.xTCP.uxEnoughSpace,
			pxSocket->u.xTCP.uxRxStreamSize ) );
	vTCPWindowCreate(
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
		&pxSocket->u.xTCP.xTCPWindow,
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cbac:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800cbb0:	fb02 f103 	mul.w	r1, r2, r3
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cbba:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800cbbe:	fb02 f403 	mul.w	r4, r2, r3
	vTCPWindowCreate(
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8d3 50ec 	ldr.w	r5, [r3, #236]	; 0xec
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
		( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
	vTCPWindowCreate(
 800cbd4:	9201      	str	r2, [sp, #4]
 800cbd6:	9300      	str	r3, [sp, #0]
 800cbd8:	462b      	mov	r3, r5
 800cbda:	4622      	mov	r2, r4
 800cbdc:	f002 f85c 	bl	800ec98 <vTCPWindowCreate>
}
 800cbe0:	bf00      	nop
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bdb0      	pop	{r4, r5, r7, pc}

0800cbe8 <prvTCPPrepareConnect>:
 * the Ethernet address of the target will be found using ARP.  In case the
 * target IP address is not within the netmask, the hardware address of the
 * gateway will be used.
 */
static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t *pxSocket )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b08a      	sub	sp, #40	; 0x28
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
TCPPacket_t *pxTCPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulRemoteIP;
MACAddress_t xEthAddress;
BaseType_t xReturn = pdTRUE;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	627b      	str	r3, [r7, #36]	; 0x24
		/* Only necessary for nicer logging. */
		memset( xEthAddress.ucBytes, '\0', sizeof( xEthAddress.ucBytes ) );
	}
	#endif /* ipconfigHAS_PRINTF != 0 */

	ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbf8:	061a      	lsls	r2, r3, #24
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbfe:	021b      	lsls	r3, r3, #8
 800cc00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cc04:	431a      	orrs	r2, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc0a:	0a1b      	lsrs	r3, r3, #8
 800cc0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cc10:	431a      	orrs	r2, r3
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc16:	0e1b      	lsrs	r3, r3, #24
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	617b      	str	r3, [r7, #20]

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 800cc1c:	f107 020c 	add.w	r2, r7, #12
 800cc20:	f107 0314 	add.w	r3, r7, #20
 800cc24:	4611      	mov	r1, r2
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7fb fe20 	bl	800886c <eARPGetCacheEntry>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	switch( eReturned )
 800cc32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d00e      	beq.n	800cc58 <prvTCPPrepareConnect+0x70>
		break;				/* We can now prepare the SYN packet. */
	case eARPCacheMiss:		/* An ARP table lookup did not find a valid entry. */
	case eCantSendPacket:	/* There is no IP address, or an ARP is still in progress. */
	default:
		/* Count the number of times it couldn't find the ARP address. */
		pxSocket->u.xTCP.ucRepCount++;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cc40:	3301      	adds	r3, #1
 800cc42:	b2da      	uxtb	r2, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			xEthAddress.ucBytes[ 3 ],
			xEthAddress.ucBytes[ 4 ],
			xEthAddress.ucBytes[ 5 ] ) );

		/* And issue a (new) ARP request */
		FreeRTOS_OutputARPRequest( ulRemoteIP );
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7fb ff4d 	bl	8008aec <FreeRTOS_OutputARPRequest>

		xReturn = pdFALSE;
 800cc52:	2300      	movs	r3, #0
 800cc54:	627b      	str	r3, [r7, #36]	; 0x24
 800cc56:	e000      	b.n	800cc5a <prvTCPPrepareConnect+0x72>
		break;				/* We can now prepare the SYN packet. */
 800cc58:	bf00      	nop
	}

	if( xReturn != pdFALSE )
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	f000 8091 	beq.w	800cd84 <prvTCPPrepareConnect+0x19c>
	{
		/* The MAC-address of the peer (or gateway) has been found,
		now prepare the initial TCP packet and some fields in the socket. */
		pxTCPPacket = ( TCPPacket_t * )pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	3382      	adds	r3, #130	; 0x82
 800cc66:	61fb      	str	r3, [r7, #28]
		pxIPHeader = &pxTCPPacket->xIPHeader;
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	330e      	adds	r3, #14
 800cc6c:	61bb      	str	r3, [r7, #24]

		/* reset the retry counter to zero. */
		pxSocket->u.xTCP.ucRepCount = 0u;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

		/* And remember that the connect/SYN data are prepared. */
		pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cc7c:	f043 0308 	orr.w	r3, r3, #8
 800cc80:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

		/* Now that the Ethernet address is known, the initial packet can be
		prepared. */
		memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, '\0', sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	3382      	adds	r3, #130	; 0x82
 800cc88:	2246      	movs	r2, #70	; 0x46
 800cc8a:	2100      	movs	r1, #0
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f003 ff53 	bl	8010b38 <memset>

		/* Write the Ethernet address in Source, because it will be swapped by
		prvTCPReturnPacket(). */
		memcpy( &pxTCPPacket->xEthernetHeader.xSourceAddress, &xEthAddress, sizeof( xEthAddress ) );
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	3306      	adds	r3, #6
 800cc96:	461a      	mov	r2, r3
 800cc98:	f107 030c 	add.w	r3, r7, #12
 800cc9c:	6818      	ldr	r0, [r3, #0]
 800cc9e:	6010      	str	r0, [r2, #0]
 800cca0:	889b      	ldrh	r3, [r3, #4]
 800cca2:	8093      	strh	r3, [r2, #4]

		/* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
		pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	2200      	movs	r2, #0
 800cca8:	f042 0208 	orr.w	r2, r2, #8
 800ccac:	731a      	strb	r2, [r3, #12]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	735a      	strb	r2, [r3, #13]

		pxIPHeader->ucVersionHeaderLength = 0x45u;
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	2245      	movs	r2, #69	; 0x45
 800ccb6:	701a      	strb	r2, [r3, #0]
		pxIPHeader->usLength = FreeRTOS_htons( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	709a      	strb	r2, [r3, #2]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800ccc4:	70da      	strb	r2, [r3, #3]
		pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	2280      	movs	r2, #128	; 0x80
 800ccca:	721a      	strb	r2, [r3, #8]

		pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	2206      	movs	r2, #6
 800ccd0:	725a      	strb	r2, [r3, #9]

		/* Addresses and ports will be stored swapped because prvTCPReturnPacket
		will swap them back while replying. */
		pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800ccd2:	4b2f      	ldr	r3, [pc, #188]	; (800cd90 <prvTCPPrepareConnect+0x1a8>)
 800ccd4:	695a      	ldr	r2, [r3, #20]
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccde:	061a      	lsls	r2, r3, #24
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce4:	021b      	lsls	r3, r3, #8
 800cce6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ccea:	431a      	orrs	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf0:	0a1b      	lsrs	r3, r3, #8
 800ccf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ccf6:	431a      	orrs	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccfc:	0e1b      	lsrs	r3, r3, #24
 800ccfe:	431a      	orrs	r2, r3
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	60da      	str	r2, [r3, #12]

		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cd08:	021b      	lsls	r3, r3, #8
 800cd0a:	b21a      	sxth	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cd10:	0a1b      	lsrs	r3, r3, #8
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	b21b      	sxth	r3, r3
 800cd16:	4313      	orrs	r3, r2
 800cd18:	b21b      	sxth	r3, r3
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	845a      	strh	r2, [r3, #34]	; 0x22
		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cd24:	021b      	lsls	r3, r3, #8
 800cd26:	b21a      	sxth	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cd2c:	0a1b      	lsrs	r3, r3, #8
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	b21b      	sxth	r3, r3
 800cd32:	4313      	orrs	r3, r2
 800cd34:	b21b      	sxth	r3, r3
 800cd36:	b29a      	uxth	r2, r3
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	849a      	strh	r2, [r3, #36]	; 0x24

		/* We are actively connecting, so the peer's Initial Sequence Number (ISN)
		isn't known yet. */
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0ul;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		/* Start with ISN (Initial Sequence Number). */
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulNextInitialSequenceNumber;
 800cd44:	4b13      	ldr	r3, [pc, #76]	; (800cd94 <prvTCPPrepareConnect+0x1ac>)
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

		/* And increment it with 268 for the next new connection, which is
		recommended value. */
		ulNextInitialSequenceNumber += 0x102UL;
 800cd4e:	4b11      	ldr	r3, [pc, #68]	; (800cd94 <prvTCPPrepareConnect+0x1ac>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800cd56:	4a0f      	ldr	r2, [pc, #60]	; (800cd94 <prvTCPPrepareConnect+0x1ac>)
 800cd58:	6013      	str	r3, [r2, #0]

		/* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
		the high nibble of the TCP offset field. */
		pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50u;
 800cd5a:	69fb      	ldr	r3, [r7, #28]
 800cd5c:	2250      	movs	r2, #80	; 0x50
 800cd5e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		/* Only set the SYN flag. */
		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_SYN;
 800cd62:	69fb      	ldr	r3, [r7, #28]
 800cd64:	2202      	movs	r2, #2
 800cd66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		/* Set the values of usInitMSS / usCurMSS for this socket. */
		prvSocketSetMSS( pxSocket );
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f001 fa88 	bl	800e280 <prvSocketSetMSS>

		/* For now this is also the advertised window size. */
		pxSocket->u.xTCP.ulRxCurWinSize = pxSocket->u.xTCP.usInitMSS;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800cd76:	461a      	mov	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

		/* The initial sequence numbers at our side are known.  Later
		vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
		first wait for a SYN+ACK reply. */
		prvTCPCreateWindow( pxSocket );
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7ff ff0a 	bl	800cb98 <prvTCPCreateWindow>
	}

	return xReturn;
 800cd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3728      	adds	r7, #40	; 0x28
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	200000a0 	.word	0x200000a0
 800cd94:	20004230 	.word	0x20004230

0800cd98 <prvCheckOptions>:
 * Parse the TCP option(s) received, if present.  It has already been verified
 * that: ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that the TP header
 * is longer than the usual 20 (5 x 4) bytes.
 */
static void prvCheckOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b08e      	sub	sp, #56	; 0x38
 800cd9c:	af02      	add	r7, sp, #8
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
const unsigned char *pucPtr;
const unsigned char *pucLast;
TCPWindow_t *pxTCPWindow;
UBaseType_t uxNewMSS;

	pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	699b      	ldr	r3, [r3, #24]
 800cda6:	627b      	str	r3, [r7, #36]	; 0x24
	pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800cda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdaa:	3322      	adds	r3, #34	; 0x22
 800cdac:	623b      	str	r3, [r7, #32]

	/* A character pointer to iterate through the option data */
	pucPtr = pxTCPHeader->ucOptdata;
 800cdae:	6a3b      	ldr	r3, [r7, #32]
 800cdb0:	3314      	adds	r3, #20
 800cdb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	pucLast = pucPtr + (((pxTCPHeader->ucTCPOffset >> 4) - 5) << 2);
 800cdb4:	6a3b      	ldr	r3, [r7, #32]
 800cdb6:	7b1b      	ldrb	r3, [r3, #12]
 800cdb8:	091b      	lsrs	r3, r3, #4
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	3b05      	subs	r3, #5
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc4:	4413      	add	r3, r2
 800cdc6:	61fb      	str	r3, [r7, #28]
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	33dc      	adds	r3, #220	; 0xdc
 800cdcc:	61bb      	str	r3, [r7, #24]

	/* The comparison with pucLast is only necessary in case the option data are
	corrupted, we don't like to run into invalid memory and crash. */
	while( pucPtr < pucLast )
 800cdce:	e0c7      	b.n	800cf60 <prvCheckOptions+0x1c8>
	{
		if( pucPtr[ 0 ] == TCP_OPT_END )
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 80c9 	beq.w	800cf6c <prvCheckOptions+0x1d4>
		{
			/* End of options. */
			return;
		}
		if( pucPtr[ 0 ] == TCP_OPT_NOOP)
 800cdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d103      	bne.n	800cdea <prvCheckOptions+0x52>
		{
			pucPtr++;
 800cde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde4:	3301      	adds	r3, #1
 800cde6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cde8:	e0ba      	b.n	800cf60 <prvCheckOptions+0x1c8>

			/* NOP option, inserted to make the length a multiple of 4. */
		}
#if( ipconfigUSE_TCP_WIN != 0 )
		else if( ( pucPtr[ 0 ] == TCP_OPT_WSOPT ) && ( pucPtr[ 1 ] == TCP_OPT_WSOPT_LEN ) )
 800cdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	d114      	bne.n	800ce1c <prvCheckOptions+0x84>
 800cdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	2b03      	cmp	r3, #3
 800cdfa:	d10f      	bne.n	800ce1c <prvCheckOptions+0x84>
		{
			pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 800cdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfe:	789a      	ldrb	r2, [r3, #2]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
			pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800ce0c:	f043 0310 	orr.w	r3, r3, #16
 800ce10:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			pucPtr += TCP_OPT_WSOPT_LEN;
 800ce14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce16:	3303      	adds	r3, #3
 800ce18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce1a:	e0a1      	b.n	800cf60 <prvCheckOptions+0x1c8>
		}
#endif	/* ipconfigUSE_TCP_WIN */
		else if( ( pucPtr[ 0 ] == TCP_OPT_MSS ) && ( pucPtr[ 1 ] == TCP_OPT_MSS_LEN ) )
 800ce1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	2b02      	cmp	r3, #2
 800ce22:	d14a      	bne.n	800ceba <prvCheckOptions+0x122>
 800ce24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce26:	3301      	adds	r3, #1
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	2b04      	cmp	r3, #4
 800ce2c:	d145      	bne.n	800ceba <prvCheckOptions+0x122>
		{
			/* An MSS option with the correct option length.  FreeRTOS_htons()
			is not needed here because usChar2u16() already returns a host
			endian number. */
			uxNewMSS = usChar2u16( pucPtr + 2 );
 800ce2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce30:	3302      	adds	r3, #2
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7ff fb85 	bl	800c542 <usChar2u16>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	617b      	str	r3, [r7, #20]
			if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
			{
				FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
			}

			if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800ce42:	461a      	mov	r2, r3
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d933      	bls.n	800ceb2 <prvCheckOptions+0x11a>
			{
				/* our MSS was bigger than the MSS of the other party: adapt it. */
				pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800ce50:	f043 0301 	orr.w	r3, r3, #1
 800ce54:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
				if( ( pxTCPWindow != NULL ) && ( pxSocket->u.xTCP.usCurMSS > uxNewMSS ) )
 800ce58:	69bb      	ldr	r3, [r7, #24]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00b      	beq.n	800ce76 <prvCheckOptions+0xde>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ce64:	461a      	mov	r2, r3
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d904      	bls.n	800ce76 <prvCheckOptions+0xde>
				{
					/* The peer advertises a smaller MSS than this socket was
					using.  Use that as well. */
					FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
					pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	b29a      	uxth	r2, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				}
				pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	685a      	ldr	r2, [r3, #4]
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce80:	697a      	ldr	r2, [r7, #20]
 800ce82:	fb02 f203 	mul.w	r2, r2, r3
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	605a      	str	r2, [r3, #4]
				pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	b29a      	uxth	r2, r3
 800ce8e:	69bb      	ldr	r3, [r7, #24]
 800ce90:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
				pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	69bb      	ldr	r3, [r7, #24]
 800ce9a:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
				pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	b29a      	uxth	r2, r3
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			#if( ipconfigUSE_TCP_WIN != 1 )
				/* Without scaled windows, MSS is the only interesting option. */
				break;
			#else
				/* Or else we continue to check another option: selective ACK. */
				pucPtr += TCP_OPT_MSS_LEN;
 800ceb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb4:	3304      	adds	r3, #4
 800ceb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ceb8:	e052      	b.n	800cf60 <prvCheckOptions+0x1c8>
		}
		else
		{
			/* All other options have a length field, so that we easily
			can skip past them. */
			int len = ( int )pucPtr[ 1 ];
 800ceba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebc:	3301      	adds	r3, #1
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	62bb      	str	r3, [r7, #40]	; 0x28
			if( len == 0 )
 800cec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d053      	beq.n	800cf70 <prvCheckOptions+0x1d8>
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				/* Selective ACK: the peer has received a packet but it is missing earlier
				packets.  At least this packet does not need retransmission anymore
				ulTCPWindowTxSack( ) takes care of this administration. */
				if( pucPtr[0] == TCP_OPT_SACK_A )
 800cec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	2b05      	cmp	r3, #5
 800cece:	d143      	bne.n	800cf58 <prvCheckOptions+0x1c0>
				{
					len -= 2;
 800ced0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced2:	3b02      	subs	r3, #2
 800ced4:	62bb      	str	r3, [r7, #40]	; 0x28
					pucPtr += 2;
 800ced6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced8:	3302      	adds	r3, #2
 800ceda:	62fb      	str	r3, [r7, #44]	; 0x2c

					while( len >= 8 )
 800cedc:	e039      	b.n	800cf52 <prvCheckOptions+0x1ba>
					{
					uint32_t ulFirst = ulChar2u32( pucPtr );
 800cede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cee0:	f7ff fb14 	bl	800c50c <ulChar2u32>
 800cee4:	6138      	str	r0, [r7, #16]
					uint32_t ulLast  = ulChar2u32( pucPtr + 4 );
 800cee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee8:	3304      	adds	r3, #4
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7ff fb0e 	bl	800c50c <ulChar2u32>
 800cef0:	60f8      	str	r0, [r7, #12]
					uint32_t ulCount = ulTCPWindowTxSack( &pxSocket->u.xTCP.xTCPWindow, ulFirst, ulLast );
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	33dc      	adds	r3, #220	; 0xdc
 800cef6:	68fa      	ldr	r2, [r7, #12]
 800cef8:	6939      	ldr	r1, [r7, #16]
 800cefa:	4618      	mov	r0, r3
 800cefc:	f002 fc1a 	bl	800f734 <ulTCPWindowTxSack>
 800cf00:	60b8      	str	r0, [r7, #8]
						/* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
						starting from the head position.
						Advance the tail pointer in txStream. */
						if( ( pxSocket->u.xTCP.txStream  != NULL ) && ( ulCount > 0 ) )
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d01d      	beq.n	800cf46 <prvCheckOptions+0x1ae>
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d01a      	beq.n	800cf46 <prvCheckOptions+0x1ae>
						{
							/* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
							uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cf14:	2300      	movs	r3, #0
 800cf16:	9300      	str	r3, [sp, #0]
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	2100      	movs	r1, #0
 800cf1e:	f7ff f9b2 	bl	800c286 <uxStreamBufferGet>
							pxSocket->xEventBits |= eSOCKET_SEND;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f043 0202 	orr.w	r2, r3, #2
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	601a      	str	r2, [r3, #0]

							#if ipconfigSUPPORT_SELECT_FUNCTION == 1
							{
								if( pxSocket->xSelectBits & eSELECT_WRITE )
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf32:	f003 0302 	and.w	r3, r3, #2
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d005      	beq.n	800cf46 <prvCheckOptions+0x1ae>
								{
									/* The field 'xEventBits' is used to store regular socket events (at most 8),
									as well as 'select events', which will be left-shifted */
									pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	601a      	str	r2, [r3, #0]
									pxSocket->u.xTCP.pxHandleSent( (Socket_t *)pxSocket, ulCount );
								}
							}
							#endif /* ipconfigUSE_CALLBACKS == 1  */
						}
						pucPtr += 8;
 800cf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf48:	3308      	adds	r3, #8
 800cf4a:	62fb      	str	r3, [r7, #44]	; 0x2c
						len -= 8;
 800cf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4e:	3b08      	subs	r3, #8
 800cf50:	62bb      	str	r3, [r7, #40]	; 0x28
					while( len >= 8 )
 800cf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf54:	2b07      	cmp	r3, #7
 800cf56:	dcc2      	bgt.n	800cede <prvCheckOptions+0x146>
					}
				#endif	/* ipconfigUSE_TCP_TIMESTAMPS == 1 */
			}
			#endif	/* ipconfigUSE_TCP_WIN == 1 */

			pucPtr += len;
 800cf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf5c:	4413      	add	r3, r2
 800cf5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while( pucPtr < pucLast )
 800cf60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf62:	69fb      	ldr	r3, [r7, #28]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	f4ff af33 	bcc.w	800cdd0 <prvCheckOptions+0x38>
 800cf6a:	e002      	b.n	800cf72 <prvCheckOptions+0x1da>
			return;
 800cf6c:	bf00      	nop
 800cf6e:	e000      	b.n	800cf72 <prvCheckOptions+0x1da>
				break;
 800cf70:	bf00      	nop
		}
	}
}
 800cf72:	3730      	adds	r7, #48	; 0x30
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <prvWinScaleFactor>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN != 0 )

	static uint8_t prvWinScaleFactor( FreeRTOS_Socket_t *pxSocket )
	{
 800cf78:	b480      	push	{r7}
 800cf7a:	b085      	sub	sp, #20
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
	size_t uxWinSize;
	uint8_t ucFactor;

		/* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800cf8c:	fb02 f303 	mul.w	r3, r2, r3
 800cf90:	60fb      	str	r3, [r7, #12]
		ucFactor = 0u;
 800cf92:	2300      	movs	r3, #0
 800cf94:	72fb      	strb	r3, [r7, #11]
		while( uxWinSize > 0xfffful )
 800cf96:	e005      	b.n	800cfa4 <prvWinScaleFactor+0x2c>
		{
			/* Divide by two and increase the binary factor by 1. */
			uxWinSize >>= 1;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	085b      	lsrs	r3, r3, #1
 800cf9c:	60fb      	str	r3, [r7, #12]
			ucFactor++;
 800cf9e:	7afb      	ldrb	r3, [r7, #11]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	72fb      	strb	r3, [r7, #11]
		while( uxWinSize > 0xfffful )
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfaa:	d2f5      	bcs.n	800cf98 <prvWinScaleFactor+0x20>
		FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %lu MSS %lu Factor %u\n",
			pxSocket->u.xTCP.uxRxWinSize,
			pxSocket->u.xTCP.usInitMSS,
			ucFactor ) );

		return ucFactor;
 800cfac:	7afb      	ldrb	r3, [r7, #11]
	}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3714      	adds	r7, #20
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr

0800cfba <prvSetSynAckOptions>:
 * When opening a TCP connection, while SYN's are being sent, the  parties may
 * communicate what MSS (Maximum Segment Size) they intend to use.   MSS is the
 * nett size of the payload, always smaller than MTU.
*/
static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t *pxSocket, TCPPacket_t * pxTCPPacket )
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b086      	sub	sp, #24
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
 800cfc2:	6039      	str	r1, [r7, #0]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	3322      	adds	r3, #34	; 0x22
 800cfc8:	617b      	str	r3, [r7, #20]
uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800cfd0:	827b      	strh	r3, [r7, #18]
	UBaseType_t uxOptionsLength;
#endif

	/* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) TCP_OPT_MSS;
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	2202      	movs	r2, #2
 800cfd6:	751a      	strb	r2, [r3, #20]
	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	2204      	movs	r2, #4
 800cfdc:	755a      	strb	r2, [r3, #21]
	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800cfde:	8a7b      	ldrh	r3, [r7, #18]
 800cfe0:	0a1b      	lsrs	r3, r3, #8
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	b2da      	uxtb	r2, r3
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	759a      	strb	r2, [r3, #22]
	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
 800cfea:	8a7b      	ldrh	r3, [r7, #18]
 800cfec:	b2da      	uxtb	r2, r3
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	75da      	strb	r2, [r3, #23]

	#if( ipconfigUSE_TCP_WIN != 0 )
	{
		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f7ff ffc0 	bl	800cf78 <prvWinScaleFactor>
 800cff8:	4603      	mov	r3, r0
 800cffa:	461a      	mov	r2, r3
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	2201      	movs	r2, #1
 800d006:	761a      	strb	r2, [r3, #24]
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	2203      	movs	r2, #3
 800d00c:	765a      	strb	r2, [r3, #25]
		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	2203      	movs	r2, #3
 800d012:	769a      	strb	r2, [r3, #26]
		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	76da      	strb	r2, [r3, #27]
		uxOptionsLength = 8u;
 800d01e:	2308      	movs	r3, #8
 800d020:	60fb      	str	r3, [r7, #12]
				uxOptionsLength += 2u;
			}
			else
		#endif
		{
			pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_NOOP;
 800d022:	697a      	ldr	r2, [r7, #20]
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	4413      	add	r3, r2
 800d028:	3314      	adds	r3, #20
 800d02a:	2201      	movs	r2, #1
 800d02c:	701a      	strb	r2, [r3, #0]
			pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	3301      	adds	r3, #1
 800d032:	697a      	ldr	r2, [r7, #20]
 800d034:	4413      	add	r3, r2
 800d036:	2201      	movs	r2, #1
 800d038:	751a      	strb	r2, [r3, #20]
			pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	3302      	adds	r3, #2
 800d03e:	697a      	ldr	r2, [r7, #20]
 800d040:	4413      	add	r3, r2
 800d042:	2204      	movs	r2, #4
 800d044:	751a      	strb	r2, [r3, #20]
			pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	3303      	adds	r3, #3
 800d04a:	697a      	ldr	r2, [r7, #20]
 800d04c:	4413      	add	r3, r2
 800d04e:	2202      	movs	r2, #2
 800d050:	751a      	strb	r2, [r3, #20]
			uxOptionsLength += 4u;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	3304      	adds	r3, #4
 800d056:	60fb      	str	r3, [r7, #12]
		}
		return uxOptionsLength; /* bytes, not words. */
 800d058:	68fb      	ldr	r3, [r7, #12]
	}
	#endif	/* ipconfigUSE_TCP_WIN == 0 */
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3718      	adds	r7, #24
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <prvTCPTouchSocket>:
 * For anti-hanging protection and TCP keep-alive messages.  Called in two
 * places: after receiving a packet and after a state change.  The socket's
 * alive timer may be reset.
 */
static void prvTCPTouchSocket( FreeRTOS_Socket_t *pxSocket )
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b082      	sub	sp, #8
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
	#if( ipconfigTCP_HANG_PROTECTION == 1 )
	{
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 800d06a:	f7fa fb9f 	bl	80077ac <xTaskGetTickCount>
 800d06e:	4602      	mov	r2, r0
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif

	#if( ipconfigTCP_KEEP_ALIVE == 1 )
	{
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d07a:	f36f 0382 	bfc	r3, #2, #1
 800d07e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d088:	f36f 0341 	bfc	r3, #1, #1
 800d08c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 800d098:	f7fa fb88 	bl	80077ac <xTaskGetTickCount>
 800d09c:	4602      	mov	r2, r0
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	( void ) pxSocket;
}
 800d0a2:	bf00      	nop
 800d0a4:	3708      	adds	r7, #8
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <vTCPStateChange>:
 * resetting the alive timer, calling the user's OnConnect handler to notify
 * that a socket has got (dis)connected, and setting bit to unblock a call to
 * FreeRTOS_select()
 */
void vTCPStateChange( FreeRTOS_Socket_t *pxSocket, enum eTCP_STATE eTCPState )
{
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b086      	sub	sp, #24
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	70fb      	strb	r3, [r7, #3]
FreeRTOS_Socket_t *xParent = NULL;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	617b      	str	r3, [r7, #20]
BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connected ? */
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d0c0:	2b04      	cmp	r3, #4
 800d0c2:	d906      	bls.n	800d0d2 <vTCPStateChange+0x28>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d0ca:	2b08      	cmp	r3, #8
 800d0cc:	d001      	beq.n	800d0d2 <vTCPStateChange+0x28>
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e000      	b.n	800d0d4 <vTCPStateChange+0x2a>
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	613b      	str	r3, [r7, #16]
BaseType_t bAfter  = ( BaseType_t ) NOW_CONNECTED( eTCPState );						/* Is it connected now ? */
 800d0d6:	78fb      	ldrb	r3, [r7, #3]
 800d0d8:	2b04      	cmp	r3, #4
 800d0da:	d904      	bls.n	800d0e6 <vTCPStateChange+0x3c>
 800d0dc:	78fb      	ldrb	r3, [r7, #3]
 800d0de:	2b08      	cmp	r3, #8
 800d0e0:	d001      	beq.n	800d0e6 <vTCPStateChange+0x3c>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e000      	b.n	800d0e8 <vTCPStateChange+0x3e>
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	60fb      	str	r3, [r7, #12]
#if( ipconfigUSE_CALLBACKS == 1 )
	FreeRTOS_Socket_t *xConnected = NULL;
#endif

	/* Has the connected status changed? */
	if( bBefore != bAfter )
 800d0ea:	693a      	ldr	r2, [r7, #16]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	f000 8087 	beq.w	800d202 <vTCPStateChange+0x158>
	{
		/* Is the socket connected now ? */
		if( bAfter != pdFALSE )
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d063      	beq.n	800d1c2 <vTCPStateChange+0x118>
		{
			/* if bPassQueued is true, this socket is an orphan until it gets connected. */
			if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d100:	f003 0304 	and.w	r3, r3, #4
 800d104:	b2db      	uxtb	r3, r3
 800d106:	2b00      	cmp	r3, #0
 800d108:	d048      	beq.n	800d19c <vTCPStateChange+0xf2>
			{
				/* Now that it is connected, find it's parent. */
				if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d110:	f003 0308 	and.w	r3, r3, #8
 800d114:	b2db      	uxtb	r3, r3
 800d116:	2b00      	cmp	r3, #0
 800d118:	d002      	beq.n	800d120 <vTCPStateChange+0x76>
				{
					xParent = pxSocket;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	617b      	str	r3, [r7, #20]
 800d11e:	e00f      	b.n	800d140 <vTCPStateChange+0x96>
				}
				else
				{
					xParent = pxSocket->u.xTCP.pxPeerSocket;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d124:	617b      	str	r3, [r7, #20]
					configASSERT( xParent != NULL );
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d109      	bne.n	800d140 <vTCPStateChange+0x96>
 800d12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d130:	f383 8811 	msr	BASEPRI, r3
 800d134:	f3bf 8f6f 	isb	sy
 800d138:	f3bf 8f4f 	dsb	sy
 800d13c:	60bb      	str	r3, [r7, #8]
 800d13e:	e7fe      	b.n	800d13e <vTCPStateChange+0x94>
				}
				if( xParent != NULL )
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d018      	beq.n	800d178 <vTCPStateChange+0xce>
				{
					if( xParent->u.xTCP.pxPeerSocket == NULL )
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d102      	bne.n	800d154 <vTCPStateChange+0xaa>
					{
						xParent->u.xTCP.pxPeerSocket = pxSocket;
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	687a      	ldr	r2, [r7, #4]
 800d152:	655a      	str	r2, [r3, #84]	; 0x54
					}

					xParent->xEventBits |= eSOCKET_ACCEPT;
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f043 0204 	orr.w	r2, r3, #4
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	601a      	str	r2, [r3, #0]

					#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
					{
						/* Library support FreeRTOS_select().  Receiving a new
						connection is being translated as a READ event. */
						if( ( xParent->xSelectBits & eSELECT_READ ) != 0 )
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d164:	f003 0301 	and.w	r3, r3, #1
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d005      	beq.n	800d178 <vTCPStateChange+0xce>
						{
							xParent->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	601a      	str	r2, [r3, #0]
					#endif
				}

				/* Don't need to access the parent socket anymore, so the
				reference 'pxPeerSocket' may be cleared. */
				pxSocket->u.xTCP.pxPeerSocket = NULL;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	655a      	str	r2, [r3, #84]	; 0x54
				pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d184:	f36f 0382 	bfc	r3, #2, #1
 800d188:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

				/* When true, this socket may be returned in a call to accept(). */
				pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d192:	f043 0302 	orr.w	r3, r3, #2
 800d196:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800d19a:	e024      	b.n	800d1e6 <vTCPStateChange+0x13c>
			}
			else
			{
				pxSocket->xEventBits |= eSOCKET_CONNECT;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f043 0208 	orr.w	r2, r3, #8
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	601a      	str	r2, [r3, #0]

				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
				{
					if( pxSocket->xSelectBits & eSELECT_WRITE )
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ac:	f003 0302 	and.w	r3, r3, #2
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d018      	beq.n	800d1e6 <vTCPStateChange+0x13c>
					{
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	601a      	str	r2, [r3, #0]
 800d1c0:	e011      	b.n	800d1e6 <vTCPStateChange+0x13c>
			}
		}
		else  /* bAfter == pdFALSE, connection is closed. */
		{
			/* Notify/wake-up the socket-owner by setting a semaphore. */
			pxSocket->xEventBits |= eSOCKET_CLOSED;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f043 0220 	orr.w	r2, r3, #32
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	601a      	str	r2, [r3, #0]

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d2:	f003 0304 	and.w	r3, r3, #4
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d005      	beq.n	800d1e6 <vTCPStateChange+0x13c>
				{
					pxSocket->xEventBits |= ( eSELECT_EXCEPT << SOCKET_EVENT_BIT_COUNT );
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	601a      	str	r2, [r3, #0]
				xConnected = pxSocket;
			}
		}
		#endif /* ipconfigUSE_CALLBACKS */

		if( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE )
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7ff f9bd 	bl	800c56c <prvTCPSocketIsActive>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d122      	bne.n	800d23e <vTCPStateChange+0x194>
		{
			/* Now the socket isn't in an active state anymore so it
			won't need further attention of the IP-task.
			Setting time-out to zero means that the socket won't get checked during
			timer events. */
			pxSocket->u.xTCP.usTimeout = 0u;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d200:	e01d      	b.n	800d23e <vTCPStateChange+0x194>
		}
	}
	else
	{
		if( eTCPState == eCLOSED )
 800d202:	78fb      	ldrb	r3, [r7, #3]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d11a      	bne.n	800d23e <vTCPStateChange+0x194>
		{
			/* Socket goes to status eCLOSED because of a RST.
			When nobody owns the socket yet, delete it. */
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d20e:	f003 0304 	and.w	r3, r3, #4
 800d212:	b2db      	uxtb	r3, r3
 800d214:	2b00      	cmp	r3, #0
 800d216:	d107      	bne.n	800d228 <vTCPStateChange+0x17e>
				( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d21e:	f003 0302 	and.w	r3, r3, #2
 800d222:	b2db      	uxtb	r3, r3
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800d224:	2b00      	cmp	r3, #0
 800d226:	d00a      	beq.n	800d23e <vTCPStateChange+0x194>
			{
				FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );
				if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d22e:	f003 0308 	and.w	r3, r3, #8
 800d232:	b2db      	uxtb	r3, r3
 800d234:	2b00      	cmp	r3, #0
 800d236:	d102      	bne.n	800d23e <vTCPStateChange+0x194>
				{
					FreeRTOS_closesocket( pxSocket );
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f7fe f8a3 	bl	800b384 <FreeRTOS_closesocket>
			}
		}
	}

	/* Fill in the new state. */
	pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	78fa      	ldrb	r2, [r7, #3]
 800d242:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* touch the alive timers because moving to another state. */
	prvTCPTouchSocket( pxSocket );
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7ff ff0b 	bl	800d062 <prvTCPTouchSocket>
			/* The 'connected' state has changed, call the OnConnect handler of the parent. */
			xConnected->u.xTCP.pxHandleConnected( ( Socket_t * ) xConnected, bAfter );
		}
	}
	#endif
	if( xParent != NULL )
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d002      	beq.n	800d258 <vTCPStateChange+0x1ae>
	{
		vSocketWakeUpUser( xParent );
 800d252:	6978      	ldr	r0, [r7, #20]
 800d254:	f7fe fb92 	bl	800b97c <vSocketWakeUpUser>
	}
}
 800d258:	bf00      	nop
 800d25a:	3718      	adds	r7, #24
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <prvTCPBufferResize>:
/*-----------------------------------------------------------*/

static NetworkBufferDescriptor_t *prvTCPBufferResize( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer,
	int32_t lDataLen, UBaseType_t uxOptionsLength )
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b088      	sub	sp, #32
 800d264:	af00      	add	r7, sp, #0
 800d266:	60f8      	str	r0, [r7, #12]
 800d268:	60b9      	str	r1, [r7, #8]
 800d26a:	607a      	str	r2, [r7, #4]
 800d26c:	603b      	str	r3, [r7, #0]
NetworkBufferDescriptor_t *pxReturn;
int32_t lNeeded;
BaseType_t xResize;

	if( xBufferAllocFixedSize != pdFALSE )
 800d26e:	4b2b      	ldr	r3, [pc, #172]	; (800d31c <prvTCPBufferResize+0xbc>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d00a      	beq.n	800d28c <prvTCPBufferResize+0x2c>
	{
		/* Network buffers are created with a fixed size and can hold the largest
		MTU. */
		lNeeded = ( int32_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 800d276:	f240 53f2 	movw	r3, #1522	; 0x5f2
 800d27a:	61bb      	str	r3, [r7, #24]
		/* and therefore, the buffer won't be too small.
		Only ask for a new network buffer in case none was supplied. */
		xResize = ( pxNetworkBuffer == NULL );
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	bf0c      	ite	eq
 800d282:	2301      	moveq	r3, #1
 800d284:	2300      	movne	r3, #0
 800d286:	b2db      	uxtb	r3, r3
 800d288:	617b      	str	r3, [r7, #20]
 800d28a:	e014      	b.n	800d2b6 <prvTCPBufferResize+0x56>
	else
	{
		/* Network buffers are created with a variable size. See if it must
		grow. */
		lNeeded = FreeRTOS_max_int32( ( int32_t ) sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ),
			( int32_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen );
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	4413      	add	r3, r2
 800d292:	3336      	adds	r3, #54	; 0x36
		lNeeded = FreeRTOS_max_int32( ( int32_t ) sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ),
 800d294:	4619      	mov	r1, r3
 800d296:	2046      	movs	r0, #70	; 0x46
 800d298:	f7ff f869 	bl	800c36e <FreeRTOS_max_int32>
 800d29c:	61b8      	str	r0, [r7, #24]
		/* In case we were called from a TCP timer event, a buffer must be
		created.  Otherwise, test 'xDataLength' of the provided buffer. */
		xResize = ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < (size_t)lNeeded );
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d004      	beq.n	800d2ae <prvTCPBufferResize+0x4e>
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	69da      	ldr	r2, [r3, #28]
 800d2a8:	69bb      	ldr	r3, [r7, #24]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d201      	bcs.n	800d2b2 <prvTCPBufferResize+0x52>
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e000      	b.n	800d2b4 <prvTCPBufferResize+0x54>
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	617b      	str	r3, [r7, #20]
	}

	if( xResize != pdFALSE )
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d021      	beq.n	800d300 <prvTCPBufferResize+0xa0>
	{
		/* The caller didn't provide a network buffer or the provided buffer is
		too small.  As we must send-out a data packet, a buffer will be created
		here. */
		pxReturn = pxGetNetworkBufferWithDescriptor( ( uint32_t ) lNeeded, 0u );
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	2100      	movs	r1, #0
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f002 fc33 	bl	800fb2c <pxGetNetworkBufferWithDescriptor>
 800d2c6:	61f8      	str	r0, [r7, #28]

		if( pxReturn != NULL )
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d021      	beq.n	800d312 <prvTCPBufferResize+0xb2>
		{
			/* Copy the existing data to the new created buffer. */
			if( pxNetworkBuffer )
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d00c      	beq.n	800d2ee <prvTCPBufferResize+0x8e>
			{
				/* Either from the previous buffer... */
				memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800d2d4:	69fb      	ldr	r3, [r7, #28]
 800d2d6:	6998      	ldr	r0, [r3, #24]
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	6999      	ldr	r1, [r3, #24]
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	69db      	ldr	r3, [r3, #28]
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	f003 fc04 	bl	8010aee <memcpy>

				/* ...and release it. */
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800d2e6:	68b8      	ldr	r0, [r7, #8]
 800d2e8:	f002 fc98 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
 800d2ec:	e011      	b.n	800d312 <prvTCPBufferResize+0xb2>
			}
			else
			{
				/* Or from the socket field 'xTCP.xPacket'. */
				memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800d2ee:	69fb      	ldr	r3, [r7, #28]
 800d2f0:	6998      	ldr	r0, [r3, #24]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	3382      	adds	r3, #130	; 0x82
 800d2f6:	2246      	movs	r2, #70	; 0x46
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	f003 fbf8 	bl	8010aee <memcpy>
 800d2fe:	e008      	b.n	800d312 <prvTCPBufferResize+0xb2>
		}
	}
	else
	{
		/* xResize is false, the network buffer provided was big enough. */
		pxReturn = pxNetworkBuffer;
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	61fb      	str	r3, [r7, #28]

		/* Thanks to Andrey Ivanov from swissEmbedded for reporting that the
		xDataLength member must get the correct length too! */
		pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	4413      	add	r3, r2
 800d30a:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	61da      	str	r2, [r3, #28]
	}

	return pxReturn;
 800d312:	69fb      	ldr	r3, [r7, #28]
}
 800d314:	4618      	mov	r0, r3
 800d316:	3720      	adds	r7, #32
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	08010f94 	.word	0x08010f94

0800d320 <prvTCPPrepareSend>:

/*
 * Prepare an outgoing message, in case anything has to be sent.
 */
static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer, UBaseType_t uxOptionsLength )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b092      	sub	sp, #72	; 0x48
 800d324:	af02      	add	r7, sp, #8
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
uint32_t ulDataGot, ulDistance;
TCPWindow_t *pxTCPWindow;
NetworkBufferDescriptor_t *pxNewBuffer;
int32_t lStreamPos;

	if( ( *ppxNetworkBuffer ) != NULL )
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d004      	beq.n	800d33e <prvTCPPrepareSend+0x1e>
	{
		/* A network buffer descriptor was already supplied */
		pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	699b      	ldr	r3, [r3, #24]
 800d33a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d33c:	e002      	b.n	800d344 <prvTCPPrepareSend+0x24>
	}
	else
	{
		/* For now let it point to the last packet header */
		pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	3382      	adds	r3, #130	; 0x82
 800d342:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
 800d344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d346:	637b      	str	r3, [r7, #52]	; 0x34
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	33dc      	adds	r3, #220	; 0xdc
 800d34c:	62fb      	str	r3, [r7, #44]	; 0x2c
	lDataLen = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	63fb      	str	r3, [r7, #60]	; 0x3c
	lStreamPos = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	613b      	str	r3, [r7, #16]
	pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_ACK;
 800d356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d358:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d35c:	f043 0310 	orr.w	r3, r3, #16
 800d360:	b2da      	uxtb	r2, r3
 800d362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d364:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	if( pxSocket->u.xTCP.txStream != NULL )
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d078      	beq.n	800d462 <prvTCPPrepareSend+0x142>
	{
		/* ulTCPWindowTxGet will return the amount of data which may be sent
		along with the position in the txStream.
		Why check for MSS > 1 ?
		Because some TCP-stacks (like uIP) use it for flow-control. */
		if( pxSocket->u.xTCP.usCurMSS > 1u )
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d376:	2b01      	cmp	r3, #1
 800d378:	d90a      	bls.n	800d390 <prvTCPPrepareSend+0x70>
		{
			lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d380:	f107 0210 	add.w	r2, r7, #16
 800d384:	4619      	mov	r1, r3
 800d386:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d388:	f001 ffc8 	bl	800f31c <ulTCPWindowTxGet>
 800d38c:	4603      	mov	r3, r0
 800d38e:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		if( lDataLen > 0 )
 800d390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d392:	2b00      	cmp	r3, #0
 800d394:	dd65      	ble.n	800d462 <prvTCPPrepareSend+0x142>
		{
			/* Check if the current network buffer is big enough, if not,
			resize it. */
			pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	6819      	ldr	r1, [r3, #0]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d39e:	68f8      	ldr	r0, [r7, #12]
 800d3a0:	f7ff ff5e 	bl	800d260 <prvTCPBufferResize>
 800d3a4:	62b8      	str	r0, [r7, #40]	; 0x28

			if( pxNewBuffer != NULL )
 800d3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d057      	beq.n	800d45c <prvTCPPrepareSend+0x13c>
			{
				*ppxNetworkBuffer = pxNewBuffer;
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3b0:	601a      	str	r2, [r3, #0]
				pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 800d3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b4:	699b      	ldr	r3, [r3, #24]
 800d3b6:	63bb      	str	r3, [r7, #56]	; 0x38
				pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
 800d3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ba:	637b      	str	r3, [r7, #52]	; 0x34

				pucSendData = pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	3336      	adds	r3, #54	; 0x36
 800d3c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3c2:	4413      	add	r3, r2
 800d3c4:	627b      	str	r3, [r7, #36]	; 0x24

				/* Translate the position in txStream to an offset from the tail
				marker. */
				uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	693a      	ldr	r2, [r7, #16]
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	f7ff f81a 	bl	800c40c <uxStreamBufferDistance>
 800d3d8:	6238      	str	r0, [r7, #32]

				/* Here data is copied from the txStream in 'peek' mode.  Only
				when the packets are acked, the tail marker will be updated. */
				ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d3de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	9300      	str	r3, [sp, #0]
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3e8:	6a39      	ldr	r1, [r7, #32]
 800d3ea:	f7fe ff4c 	bl	800c286 <uxStreamBufferGet>
 800d3ee:	61f8      	str	r0, [r7, #28]
				}
				#endif

				/* If the owner of the socket requests a closure, add the FIN
				flag to the last packet. */
				if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d030      	beq.n	800d462 <prvTCPPrepareSend+0x142>
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d40a:	b2db      	uxtb	r3, r3
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d128      	bne.n	800d462 <prvTCPPrepareSend+0x142>
				{
					ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	4619      	mov	r1, r3
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d41c:	689b      	ldr	r3, [r3, #8]
 800d41e:	461a      	mov	r2, r3
 800d420:	f7fe fff4 	bl	800c40c <uxStreamBufferDistance>
 800d424:	61b8      	str	r0, [r7, #24]

					if( ulDistance == ulDataGot )
 800d426:	69ba      	ldr	r2, [r7, #24]
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d119      	bne.n	800d462 <prvTCPPrepareSend+0x142>
						}
						#endif
						/* Although the socket sends a FIN, it will stay in
						ESTABLISHED until all current data has been received or
						delivered. */
						pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 800d42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d430:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d434:	f043 0301 	orr.w	r3, r3, #1
 800d438:	b2da      	uxtb	r2, r3
 800d43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d43c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800d440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d446:	441a      	add	r2, r3
 800d448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44a:	625a      	str	r2, [r3, #36]	; 0x24
						pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d44c:	68fa      	ldr	r2, [r7, #12]
 800d44e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d456:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800d45a:	e002      	b.n	800d462 <prvTCPPrepareSend+0x142>
					}
				}
			}
			else
			{
				lDataLen = -1;
 800d45c:	f04f 33ff 	mov.w	r3, #4294967295
 800d460:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
	}

	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) )
 800d462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d464:	2b00      	cmp	r3, #0
 800d466:	db7e      	blt.n	800d566 <prvTCPPrepareSend+0x246>
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d46e:	2b05      	cmp	r3, #5
 800d470:	d179      	bne.n	800d566 <prvTCPPrepareSend+0x246>
	{
		/* See if the socket owner wants to shutdown this connection. */
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d478:	f003 0320 	and.w	r3, r3, #32
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d02b      	beq.n	800d4da <prvTCPPrepareSend+0x1ba>
			( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 800d482:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d484:	f001 fe92 	bl	800f1ac <xTCPWindowTxDone>
 800d488:	4603      	mov	r3, r0
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d025      	beq.n	800d4da <prvTCPPrepareSend+0x1ba>
		{
			pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 800d48e:	68fa      	ldr	r2, [r7, #12]
 800d490:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d494:	f36f 1345 	bfc	r3, #5, #1
 800d498:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 800d49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d49e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d4a2:	f043 0301 	orr.w	r3, r3, #1
 800d4a6:	b2da      	uxtb	r2, r3
 800d4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d4ae:	68fa      	ldr	r2, [r7, #12]
 800d4b0:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d4b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4b8:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800d4bc:	68fa      	ldr	r2, [r7, #12]
 800d4be:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d4c2:	f043 0301 	orr.w	r3, r3, #1
 800d4c6:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4cc:	6a1a      	ldr	r2, [r3, #32]
 800d4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d0:	625a      	str	r2, [r3, #36]	; 0x24
			vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800d4d2:	2106      	movs	r1, #6
 800d4d4:	68f8      	ldr	r0, [r7, #12]
 800d4d6:	f7ff fde8 	bl	800d0aa <vTCPStateChange>
		}

		#if( ipconfigTCP_KEEP_ALIVE != 0 )
		{
			if( pxSocket->u.xTCP.ucKeepRepCount > 3u )
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d4e0:	2b03      	cmp	r3, #3
 800d4e2:	d906      	bls.n	800d4f2 <prvTCPPrepareSend+0x1d2>
			{
				FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
					pxSocket->u.xTCP.ulRemoteIP,			/* IP address of remote machine. */
					pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d4e4:	2108      	movs	r1, #8
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f7ff fddf 	bl	800d0aa <vTCPStateChange>
				lDataLen = -1;
 800d4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800d4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 800d4f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d136      	bne.n	800d566 <prvTCPPrepareSend+0x246>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4fe:	f003 0301 	and.w	r3, r3, #1
 800d502:	b2db      	uxtb	r3, r3
 800d504:	2b00      	cmp	r3, #0
 800d506:	d12e      	bne.n	800d566 <prvTCPPrepareSend+0x246>
			{
				/* If there is no data to be sent, and no window-update message,
				we might want to send a keep-alive message. */
				TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastAliveTime;
 800d508:	f7fa f950 	bl	80077ac <xTaskGetTickCount>
 800d50c:	4602      	mov	r2, r0
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d512:	1ad3      	subs	r3, r2, r3
 800d514:	617b      	str	r3, [r7, #20]
				TickType_t xMax;
				xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * configTICK_RATE_HZ );
 800d516:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d51a:	633b      	str	r3, [r7, #48]	; 0x30
				if( pxSocket->u.xTCP.ucKeepRepCount )
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d522:	2b00      	cmp	r3, #0
 800d524:	d002      	beq.n	800d52c <prvTCPPrepareSend+0x20c>
				{
					xMax = ( 3u * configTICK_RATE_HZ );
 800d526:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d52a:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if( xAge > xMax )
 800d52c:	697a      	ldr	r2, [r7, #20]
 800d52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d530:	429a      	cmp	r2, r3
 800d532:	d918      	bls.n	800d566 <prvTCPPrepareSend+0x246>
				{
					pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 800d534:	f7fa f93a 	bl	80077ac <xTaskGetTickCount>
 800d538:	4602      	mov	r2, r0
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	65da      	str	r2, [r3, #92]	; 0x5c
					if( xTCPWindowLoggingLevel )
						FreeRTOS_debug_printf( ( "keep-alive: %lxip:%u count %u\n",
							pxSocket->u.xTCP.ulRemoteIP,
							pxSocket->u.xTCP.usRemotePort,
							pxSocket->u.xTCP.ucKeepRepCount ) );
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d544:	f043 0302 	orr.w	r3, r3, #2
 800d548:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500 ) );
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800d552:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
					pxSocket->u.xTCP.ucKeepRepCount++;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d55c:	3301      	adds	r3, #1
 800d55e:	b2da      	uxtb	r2, r3
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		#endif /* ipconfigTCP_KEEP_ALIVE */
	}

	/* Anything to send, a change of the advertised window size, or maybe send a
	keep-alive message? */
	if( ( lDataLen > 0 ) ||
 800d566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d568:	2b00      	cmp	r3, #0
 800d56a:	dc0f      	bgt.n	800d58c <prvTCPPrepareSend+0x26c>
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d572:	f003 0301 	and.w	r3, r3, #1
 800d576:	b2db      	uxtb	r3, r3
	if( ( lDataLen > 0 ) ||
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d107      	bne.n	800d58c <prvTCPPrepareSend+0x26c>
		( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d582:	f003 0302 	and.w	r3, r3, #2
 800d586:	b2db      	uxtb	r3, r3
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d02b      	beq.n	800d5e4 <prvTCPPrepareSend+0x2c4>
	{
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
 800d58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d58e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d592:	f023 0308 	bic.w	r3, r3, #8
 800d596:	b2da      	uxtb	r2, r3
 800d598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d59a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	3314      	adds	r3, #20
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
 800d5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d5b6:	f043 0310 	orr.w	r3, r3, #16
 800d5ba:	b2da      	uxtb	r2, r3
 800d5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		if( lDataLen != 0l )
 800d5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d008      	beq.n	800d5da <prvTCPPrepareSend+0x2ba>
		{
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_PSH;
 800d5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d5ce:	f043 0308 	orr.w	r3, r3, #8
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				}
			}
		}
		#endif

		lDataLen += ( int32_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800d5da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	4413      	add	r3, r2
 800d5e0:	3328      	adds	r3, #40	; 0x28
 800d5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	return lDataLen;
 800d5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3740      	adds	r7, #64	; 0x40
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
	...

0800d5f0 <prvTCPNextTimeout>:

/*
 * Calculate after how much time this socket needs to be checked again.
 */
static TickType_t prvTCPNextTimeout ( FreeRTOS_Socket_t *pxSocket )
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
TickType_t ulDelayMs = ( TickType_t ) 20000;
 800d5f8:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d5fc:	60bb      	str	r3, [r7, #8]

	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d604:	2b02      	cmp	r3, #2
 800d606:	d135      	bne.n	800d674 <prvTCPNextTimeout+0x84>
	{
		/* The socket is actively connecting to a peer. */
		if( pxSocket->u.xTCP.bits.bConnPrepared )
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d60e:	f003 0308 	and.w	r3, r3, #8
 800d612:	b2db      	uxtb	r3, r3
 800d614:	2b00      	cmp	r3, #0
 800d616:	d012      	beq.n	800d63e <prvTCPNextTimeout+0x4e>
		{
			/* Ethernet address has been found, use progressive timeout for
			active connect(). */
			if( pxSocket->u.xTCP.ucRepCount < 3u )
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d61e:	2b02      	cmp	r3, #2
 800d620:	d809      	bhi.n	800d636 <prvTCPNextTimeout+0x46>
			{
				ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1u ) );
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d628:	3b01      	subs	r3, #1
 800d62a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800d62e:	fa02 f303 	lsl.w	r3, r2, r3
 800d632:	60bb      	str	r3, [r7, #8]
 800d634:	e006      	b.n	800d644 <prvTCPNextTimeout+0x54>
			}
			else
			{
				ulDelayMs = 11000UL;
 800d636:	f642 23f8 	movw	r3, #11000	; 0x2af8
 800d63a:	60bb      	str	r3, [r7, #8]
 800d63c:	e002      	b.n	800d644 <prvTCPNextTimeout+0x54>
			}
		}
		else
		{
			/* Still in the ARP phase: check every half second. */
			ulDelayMs = 500UL;
 800d63e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d642:	60bb      	str	r3, [r7, #8]
		}

		FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
			pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort,
			pxSocket->u.xTCP.ucRepCount, ulDelayMs ) );
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d64a:	fb02 f303 	mul.w	r3, r2, r3
 800d64e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d652:	d30a      	bcc.n	800d66a <prvTCPNextTimeout+0x7a>
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d65a:	fb02 f303 	mul.w	r3, r2, r3
 800d65e:	4a22      	ldr	r2, [pc, #136]	; (800d6e8 <prvTCPNextTimeout+0xf8>)
 800d660:	fba2 2303 	umull	r2, r3, r2, r3
 800d664:	099b      	lsrs	r3, r3, #6
 800d666:	b29a      	uxth	r2, r3
 800d668:	e000      	b.n	800d66c <prvTCPNextTimeout+0x7c>
 800d66a:	2201      	movs	r2, #1
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d672:	e032      	b.n	800d6da <prvTCPNextTimeout+0xea>
	}
	else if( pxSocket->u.xTCP.usTimeout == 0u )
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d12d      	bne.n	800d6da <prvTCPNextTimeout+0xea>
	{
		/* Let the sliding window mechanism decide what time-out is appropriate. */
		BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d68a:	f107 0208 	add.w	r2, r7, #8
 800d68e:	4619      	mov	r1, r3
 800d690:	f001 fde4 	bl	800f25c <xTCPWindowTxHasData>
 800d694:	60f8      	str	r0, [r7, #12]
		if( ulDelayMs == 0u )
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d107      	bne.n	800d6ac <prvTCPNextTimeout+0xbc>
		{
			ulDelayMs = xResult ? 1UL : 20000UL;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d001      	beq.n	800d6a6 <prvTCPNextTimeout+0xb6>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e001      	b.n	800d6aa <prvTCPNextTimeout+0xba>
 800d6a6:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d6aa:	60bb      	str	r3, [r7, #8]
		}
		else
		{
			/* ulDelayMs contains the time to wait before a re-transmission. */
		}
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d6b2:	fb02 f303 	mul.w	r3, r2, r3
 800d6b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6ba:	d30a      	bcc.n	800d6d2 <prvTCPNextTimeout+0xe2>
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d6c2:	fb02 f303 	mul.w	r3, r2, r3
 800d6c6:	4a08      	ldr	r2, [pc, #32]	; (800d6e8 <prvTCPNextTimeout+0xf8>)
 800d6c8:	fba2 2303 	umull	r2, r3, r2, r3
 800d6cc:	099b      	lsrs	r3, r3, #6
 800d6ce:	b29a      	uxth	r2, r3
 800d6d0:	e000      	b.n	800d6d4 <prvTCPNextTimeout+0xe4>
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		/* field '.usTimeout' has already been set (by the
		keep-alive/delayed-ACK mechanism). */
	}

	/* Return the number of clock ticks before the timer expires. */
	return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3710      	adds	r7, #16
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	10624dd3 	.word	0x10624dd3

0800d6ec <prvTCPAddTxData>:
/*-----------------------------------------------------------*/

static void prvTCPAddTxData( FreeRTOS_Socket_t *pxSocket )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
	the sliding window.

	uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It contains new
	Tx data which has not been passed to the sliding window yet.  The oldest
	data not-yet-confirmed can be found at rxTail. */
	lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fe fecd 	bl	800c498 <uxStreamBufferMidSpace>
 800d6fe:	4603      	mov	r3, r0
 800d700:	60fb      	str	r3, [r7, #12]

	if( lLength > 0 )
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2b00      	cmp	r3, #0
 800d706:	dd17      	ble.n	800d738 <prvTCPAddTxData+0x4c>
		window manager, so it can start transmitting them.

		Hand over the new data to the sliding window handler.  It will be
		split-up in chunks of 1460 bytes each (or less, depending on
		ipconfigTCP_MSS). */
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800d70e:	68f9      	ldr	r1, [r7, #12]
								( uint32_t ) lLength,
								( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d714:	685b      	ldr	r3, [r3, #4]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800d716:	461a      	mov	r2, r3
								( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d71c:	691b      	ldr	r3, [r3, #16]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800d71e:	f001 fc91 	bl	800f044 <lTCPWindowTxAdd>
 800d722:	60b8      	str	r0, [r7, #8]

		/* Move the rxMid pointer forward up to rxHead. */
		if( lCount > 0 )
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	2b00      	cmp	r3, #0
 800d728:	dd06      	ble.n	800d738 <prvTCPAddTxData+0x4c>
		{
			vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d72e:	68ba      	ldr	r2, [r7, #8]
 800d730:	4611      	mov	r1, r2
 800d732:	4618      	mov	r0, r3
 800d734:	f7fe fec4 	bl	800c4c0 <vStreamBufferMoveMid>
		}
	}
}
 800d738:	bf00      	nop
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <prvTCPHandleFin>:
 * Or when the socket has sent a FIN flag to the peer
 * Before being called, it has been checked that both reception and transmission
 * are complete.
 */
static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b088      	sub	sp, #32
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	699b      	ldr	r3, [r3, #24]
 800d74e:	61bb      	str	r3, [r7, #24]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	3322      	adds	r3, #34	; 0x22
 800d754:	617b      	str	r3, [r7, #20]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	7b5b      	ldrb	r3, [r3, #13]
 800d75a:	74fb      	strb	r3, [r7, #19]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	33dc      	adds	r3, #220	; 0xdc
 800d760:	60fb      	str	r3, [r7, #12]
BaseType_t xSendLength = 0;
 800d762:	2300      	movs	r3, #0
 800d764:	61fb      	str	r3, [r7, #28]
uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	061a      	lsls	r2, r3, #24
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	021b      	lsls	r3, r3, #8
 800d772:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d776:	431a      	orrs	r2, r3
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	0a1b      	lsrs	r3, r3, #8
 800d77e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d782:	431a      	orrs	r2, r3
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	0e1b      	lsrs	r3, r3, #24
 800d78a:	4313      	orrs	r3, r2
 800d78c:	60bb      	str	r3, [r7, #8]

	if( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u )
 800d78e:	7cfb      	ldrb	r3, [r7, #19]
 800d790:	f003 0301 	and.w	r3, r3, #1
 800d794:	2b00      	cmp	r3, #0
 800d796:	d004      	beq.n	800d7a2 <prvTCPHandleFin+0x62>
	{
		pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1u;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	695b      	ldr	r3, [r3, #20]
 800d79c:	1c5a      	adds	r2, r3, #1
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	611a      	str	r2, [r3, #16]
	}
	if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d10b      	bne.n	800d7ca <prvTCPHandleFin+0x8a>
	{
		/* We haven't yet replied with a FIN, do so now. */
		pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	6a1a      	ldr	r2, [r3, #32]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	625a      	str	r2, [r3, #36]	; 0x24
		pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d7c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7c4:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800d7c8:	e00c      	b.n	800d7e4 <prvTCPHandleFin+0xa4>
	}
	else
	{
		/* We did send a FIN already, see if it's ACK'd. */
		if( ulAckNr == pxTCPWindow->tx.ulFINSequenceNumber + 1u )
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ce:	1c5a      	adds	r2, r3, #1
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d106      	bne.n	800d7e4 <prvTCPHandleFin+0xa4>
		{
			pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d7dc:	f043 0301 	orr.w	r3, r3, #1
 800d7e0:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
		}
	}

	if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d7ea:	f003 0301 	and.w	r3, r3, #1
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d10b      	bne.n	800d80c <prvTCPHandleFin+0xcc>
	{
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	621a      	str	r2, [r3, #32]
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_FIN;
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	2211      	movs	r2, #17
 800d800:	735a      	strb	r2, [r3, #13]

		/* And wait for the final ACK. */
		vTCPStateChange( pxSocket, eLAST_ACK );
 800d802:	210a      	movs	r1, #10
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f7ff fc50 	bl	800d0aa <vTCPStateChange>
 800d80a:	e023      	b.n	800d854 <prvTCPHandleFin+0x114>
	}
	else
	{
		/* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1u;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d810:	1c5a      	adds	r2, r3, #1
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	621a      	str	r2, [r3, #32]
		if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d81c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d820:	b2db      	uxtb	r3, r3
 800d822:	2b00      	cmp	r3, #0
 800d824:	d103      	bne.n	800d82e <prvTCPHandleFin+0xee>
		{
			/* We have sent out a FIN but the peer hasn't replied with a FIN
			yet. Do nothing for the moment. */
			pxTCPHeader->ucTCPFlags = 0u;
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	2200      	movs	r2, #0
 800d82a:	735a      	strb	r2, [r3, #13]
 800d82c:	e012      	b.n	800d854 <prvTCPHandleFin+0x114>
		}
		else
		{
			if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d834:	f003 0302 	and.w	r3, r3, #2
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d103      	bne.n	800d846 <prvTCPHandleFin+0x106>
			{
				/* This is the third of the three-way hand shake: the last
				ACK. */
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	2210      	movs	r2, #16
 800d842:	735a      	strb	r2, [r3, #13]
 800d844:	e002      	b.n	800d84c <prvTCPHandleFin+0x10c>
			}
			else
			{
				/* The other party started the closure, so we just wait for the
				last ACK. */
				pxTCPHeader->ucTCPFlags = 0u;
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	2200      	movs	r2, #0
 800d84a:	735a      	strb	r2, [r3, #13]
			}

			/* And wait for the user to close this socket. */
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d84c:	2108      	movs	r1, #8
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f7ff fc2b 	bl	800d0aa <vTCPStateChange>
		}
	}

	pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	6a1a      	ldr	r2, [r3, #32]
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	62da      	str	r2, [r3, #44]	; 0x2c

	if( pxTCPHeader->ucTCPFlags != 0u )
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	7b5b      	ldrb	r3, [r3, #13]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d004      	beq.n	800d86e <prvTCPHandleFin+0x12e>
	{
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d86a:	3328      	adds	r3, #40	; 0x28
 800d86c:	61fb      	str	r3, [r7, #28]
	}

	pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d874:	3314      	adds	r3, #20
 800d876:	b2db      	uxtb	r3, r3
 800d878:	009b      	lsls	r3, r3, #2
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	731a      	strb	r2, [r3, #12]
			pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
			pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
			pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
	}

	return xSendLength;
 800d880:	69fb      	ldr	r3, [r7, #28]
}
 800d882:	4618      	mov	r0, r3
 800d884:	3720      	adds	r7, #32
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}

0800d88a <prvCheckRxData>:
 *
 * The first thing that will be done is find the TCP payload data
 * and check the length of this data.
 */
static BaseType_t prvCheckRxData( NetworkBufferDescriptor_t *pxNetworkBuffer, uint8_t **ppucRecvData )
{
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b088      	sub	sp, #32
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
 800d892:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	699b      	ldr	r3, [r3, #24]
 800d898:	61bb      	str	r3, [r7, #24]
TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	3322      	adds	r3, #34	; 0x22
 800d89e:	617b      	str	r3, [r7, #20]
	node.

	The size of the TCP header is given in a multiple of 4-byte words (single
	byte, needs no ntoh() translation).  A shift-right 2: is the same as
	(offset >> 4) * 4. */
    lTCPHeaderLength = ( BaseType_t ) ( ( pxTCPHeader->ucTCPOffset & VALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2 );
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	7b1b      	ldrb	r3, [r3, #12]
 800d8a4:	089b      	lsrs	r3, r3, #2
 800d8a6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800d8aa:	613b      	str	r3, [r7, #16]

	/* Let pucRecvData point to the first byte received. */
	*ppucRecvData = pxNetworkBuffer->pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + lTCPHeaderLength;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	699a      	ldr	r2, [r3, #24]
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	3322      	adds	r3, #34	; 0x22
 800d8b4:	441a      	add	r2, r3
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	601a      	str	r2, [r3, #0]

	/* Calculate lReceiveLength - the length of the TCP data received.  This is
	equal to the total packet length minus:
	( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
	lReceiveLength = ( ( int32_t ) pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	69db      	ldr	r3, [r3, #28]
 800d8be:	3b0e      	subs	r3, #14
 800d8c0:	61fb      	str	r3, [r7, #28]
	lLength =  ( int32_t )FreeRTOS_htons( pxTCPPacket->xIPHeader.usLength );
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	8a1b      	ldrh	r3, [r3, #16]
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	021b      	lsls	r3, r3, #8
 800d8ca:	b21a      	sxth	r2, r3
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	8a1b      	ldrh	r3, [r3, #16]
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	0a1b      	lsrs	r3, r3, #8
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	b21b      	sxth	r3, r3
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	b21b      	sxth	r3, r3
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	60fb      	str	r3, [r7, #12]

	if( lReceiveLength > lLength )
 800d8e0:	69fa      	ldr	r2, [r7, #28]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	dd01      	ble.n	800d8ec <prvCheckRxData+0x62>
	{
		/* More bytes were received than the reported length, often because of
		padding bytes at the end. */
		lReceiveLength = lLength;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	61fb      	str	r3, [r7, #28]
	}

	/* Subtract the size of the TCP and IP headers and the actual data size is
	known. */
	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER ) )
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	f103 0214 	add.w	r2, r3, #20
 800d8f2:	69fb      	ldr	r3, [r7, #28]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	da05      	bge.n	800d904 <prvCheckRxData+0x7a>
	{
		lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER );
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	3314      	adds	r3, #20
 800d8fc:	69fa      	ldr	r2, [r7, #28]
 800d8fe:	1ad3      	subs	r3, r2, r3
 800d900:	61fb      	str	r3, [r7, #28]
 800d902:	e001      	b.n	800d908 <prvCheckRxData+0x7e>
	}
	else
	{
		lReceiveLength = 0;
 800d904:	2300      	movs	r3, #0
 800d906:	61fb      	str	r3, [r7, #28]
	This field communicates the current value of the urgent pointer as a
	positive offset from the sequence number in this segment.  The urgent
	pointer points to the sequence number of the octet following the urgent
	data.  This field is only be interpreted in segments with the URG control
	bit set. */
	if( ( pxTCPHeader->ucTCPFlags & ipTCP_FLAG_URG ) != 0u )
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	7b5b      	ldrb	r3, [r3, #13]
 800d90c:	f003 0320 	and.w	r3, r3, #32
 800d910:	2b00      	cmp	r3, #0
 800d912:	d01c      	beq.n	800d94e <prvCheckRxData+0xc4>
	{
		/* Although we ignore the urgent data, we have to skip it. */
		lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	8a5b      	ldrh	r3, [r3, #18]
 800d918:	b29b      	uxth	r3, r3
 800d91a:	021b      	lsls	r3, r3, #8
 800d91c:	b21a      	sxth	r2, r3
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	8a5b      	ldrh	r3, [r3, #18]
 800d922:	b29b      	uxth	r3, r3
 800d924:	0a1b      	lsrs	r3, r3, #8
 800d926:	b29b      	uxth	r3, r3
 800d928:	b21b      	sxth	r3, r3
 800d92a:	4313      	orrs	r3, r2
 800d92c:	b21b      	sxth	r3, r3
 800d92e:	b29b      	uxth	r3, r3
 800d930:	60bb      	str	r3, [r7, #8]
		*ppucRecvData += lUrgentLength;
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	441a      	add	r2, r3
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	601a      	str	r2, [r3, #0]
		lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 800d93e:	68b9      	ldr	r1, [r7, #8]
 800d940:	69f8      	ldr	r0, [r7, #28]
 800d942:	f7fe fd24 	bl	800c38e <FreeRTOS_min_int32>
 800d946:	4602      	mov	r2, r0
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	1a9b      	subs	r3, r3, r2
 800d94c:	61fb      	str	r3, [r7, #28]
	}

	return ( BaseType_t ) lReceiveLength;
 800d94e:	69fb      	ldr	r3, [r7, #28]
}
 800d950:	4618      	mov	r0, r3
 800d952:	3720      	adds	r7, #32
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <prvStoreRxData>:
 * The second thing is to do is check if the payload data may be accepted
 * If so, they will be added to the reception queue.
 */
static BaseType_t prvStoreRxData( FreeRTOS_Socket_t *pxSocket, uint8_t *pucRecvData,
	NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulReceiveLength )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b08c      	sub	sp, #48	; 0x30
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	607a      	str	r2, [r7, #4]
 800d964:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	699b      	ldr	r3, [r3, #24]
 800d96a:	627b      	str	r3, [r7, #36]	; 0x24
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800d96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96e:	3322      	adds	r3, #34	; 0x22
 800d970:	623b      	str	r3, [r7, #32]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	33dc      	adds	r3, #220	; 0xdc
 800d976:	61fb      	str	r3, [r7, #28]
uint32_t ulSequenceNumber, ulSpace;
int32_t lOffset, lStored;
BaseType_t xResult = 0;
 800d978:	2300      	movs	r3, #0
 800d97a:	62bb      	str	r3, [r7, #40]	; 0x28

	ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800d97c:	6a3b      	ldr	r3, [r7, #32]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	061a      	lsls	r2, r3, #24
 800d982:	6a3b      	ldr	r3, [r7, #32]
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	021b      	lsls	r3, r3, #8
 800d988:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d98c:	431a      	orrs	r2, r3
 800d98e:	6a3b      	ldr	r3, [r7, #32]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	0a1b      	lsrs	r3, r3, #8
 800d994:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d998:	431a      	orrs	r2, r3
 800d99a:	6a3b      	ldr	r3, [r7, #32]
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	0e1b      	lsrs	r3, r3, #24
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	61bb      	str	r3, [r7, #24]

	if( ( ulReceiveLength > 0u ) && ( pxSocket->u.xTCP.ucTCPState >= eSYN_RECEIVED ) )
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d03f      	beq.n	800da2a <prvStoreRxData+0xd2>
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d9b0:	2b03      	cmp	r3, #3
 800d9b2:	d93a      	bls.n	800da2a <prvStoreRxData+0xd2>

		If it can't be "accept"ed it may have to be stored and send a selective
		ack (SACK) option to confirm it.  In that case, xTCPWindowRxStore() will be
		called later to store an out-of-order packet (in case lOffset is
		negative). */
		if ( pxSocket->u.xTCP.rxStream )
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d006      	beq.n	800d9ca <prvStoreRxData+0x72>
		{
			ulSpace = ( uint32_t )uxStreamBufferGetSpace ( pxSocket->u.xTCP.rxStream );
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7fe fd41 	bl	800c448 <uxStreamBufferGetSpace>
 800d9c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d9c8:	e002      	b.n	800d9d0 <prvStoreRxData+0x78>
		}
		else
		{
			ulSpace = ( uint32_t )pxSocket->u.xTCP.uxRxStreamSize;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 800d9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d2:	683a      	ldr	r2, [r7, #0]
 800d9d4:	69b9      	ldr	r1, [r7, #24]
 800d9d6:	69f8      	ldr	r0, [r7, #28]
 800d9d8:	f001 fa3c 	bl	800ee54 <lTCPWindowRxCheck>
 800d9dc:	6178      	str	r0, [r7, #20]

		if( lOffset >= 0 )
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	db10      	blt.n	800da06 <prvStoreRxData+0xae>
		{
			/* New data has arrived and may be made available to the user.  See
			if the head marker in rxStream may be advanced,	only if lOffset == 0.
			In case the low-water mark is reached, bLowWater will be set
			"low-water" here stands for "little space". */
			lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 800d9e4:	6979      	ldr	r1, [r7, #20]
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	68ba      	ldr	r2, [r7, #8]
 800d9ea:	68f8      	ldr	r0, [r7, #12]
 800d9ec:	f7fe f918 	bl	800bc20 <lTCPAddRxdata>
 800d9f0:	6138      	str	r0, [r7, #16]

			if( lStored != ( int32_t ) ulReceiveLength )
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	693a      	ldr	r2, [r7, #16]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d005      	beq.n	800da06 <prvStoreRxData+0xae>
				FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes??\n", lStored, ulReceiveLength ) );

				/* Received data could not be stored.  The socket's flag
				bMallocError has been set.  The socket now has the status
				eCLOSE_WAIT and a RST packet will be sent back. */
				prvTCPSendReset( pxNetworkBuffer );
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 fc24 	bl	800e248 <prvTCPSendReset>
				xResult = -1;
 800da00:	f04f 33ff 	mov.w	r3, #4294967295
 800da04:	62bb      	str	r3, [r7, #40]	; 0x28
		#if( ipconfigUSE_TCP_WIN == 1 )
		{
			/* Now lTCPAddRxdata() will move the rxHead pointer forward
			so data becomes available to the user immediately
			In case the low-water mark is reached, bLowWater will be set. */
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800da06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d113      	bne.n	800da34 <prvStoreRxData+0xdc>
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00f      	beq.n	800da34 <prvStoreRxData+0xdc>
			{
				lTCPAddRxdata( pxSocket, 0ul, NULL, pxTCPWindow->ulUserDataLength );
 800da14:	69fb      	ldr	r3, [r7, #28]
 800da16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da18:	2200      	movs	r2, #0
 800da1a:	2100      	movs	r1, #0
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f7fe f8ff 	bl	800bc20 <lTCPAddRxdata>
				pxTCPWindow->ulUserDataLength = 0;
 800da22:	69fb      	ldr	r3, [r7, #28]
 800da24:	2200      	movs	r2, #0
 800da26:	631a      	str	r2, [r3, #48]	; 0x30
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800da28:	e004      	b.n	800da34 <prvStoreRxData+0xdc>
		}
		#endif /* ipconfigUSE_TCP_WIN */
	}
	else
	{
		pxTCPWindow->ucOptionLength = 0u;
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800da32:	e000      	b.n	800da36 <prvStoreRxData+0xde>
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800da34:	bf00      	nop
	}

	return xResult;
 800da36:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3730      	adds	r7, #48	; 0x30
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <prvSetOptions>:
/*-----------------------------------------------------------*/

/* Set the TCP options (if any) for the outgoing packet. */
static UBaseType_t prvSetOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b086      	sub	sp, #24
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	699b      	ldr	r3, [r3, #24]
 800da4e:	613b      	str	r3, [r7, #16]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	3322      	adds	r3, #34	; 0x22
 800da54:	60fb      	str	r3, [r7, #12]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	33dc      	adds	r3, #220	; 0xdc
 800da5a:	60bb      	str	r3, [r7, #8]
UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da62:	617b      	str	r3, [r7, #20]

	#if(	ipconfigUSE_TCP_WIN == 1 )
		if( uxOptionsLength != 0u )
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d011      	beq.n	800da8e <prvSetOptions+0x4e>
					pxSocket->usLocalPort,
					pxSocket->u.xTCP.usRemotePort,
					uxOptionsLength,
					FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 1 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
					FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 2 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ) );
			memcpy( pxTCPHeader->ucOptdata, pxTCPWindow->ulOptionsData, ( size_t ) uxOptionsLength );
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f103 0014 	add.w	r0, r3, #20
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	3380      	adds	r3, #128	; 0x80
 800da74:	697a      	ldr	r2, [r7, #20]
 800da76:	4619      	mov	r1, r3
 800da78:	f003 f839 	bl	8010aee <memcpy>

			/* The header length divided by 4, goes into the higher nibble,
			effectively a shift-left 2. */
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	3314      	adds	r3, #20
 800da82:	b2db      	uxtb	r3, r3
 800da84:	009b      	lsls	r3, r3, #2
 800da86:	b2da      	uxtb	r2, r3
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	731a      	strb	r2, [r3, #12]
 800da8c:	e031      	b.n	800daf2 <prvSetOptions+0xb2>
		}
		else
	#endif	/* ipconfigUSE_TCP_WIN */
	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800da94:	2b04      	cmp	r3, #4
 800da96:	d92c      	bls.n	800daf2 <prvSetOptions+0xb2>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da9e:	f003 0301 	and.w	r3, r3, #1
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d024      	beq.n	800daf2 <prvSetOptions+0xb2>
	{
		/* TCP options must be sent because the MSS has changed. */
		pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800daae:	f36f 0300 	bfc	r3, #0, #1
 800dab2:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		if( xTCPWindowLoggingLevel >= 0 )
		{
			FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
		}

		pxTCPHeader->ucOptdata[ 0 ] = TCP_OPT_MSS;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2202      	movs	r2, #2
 800daba:	751a      	strb	r2, [r3, #20]
		pxTCPHeader->ucOptdata[ 1 ] = TCP_OPT_MSS_LEN;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2204      	movs	r2, #4
 800dac0:	755a      	strb	r2, [r3, #21]
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dac8:	0a1b      	lsrs	r3, r3, #8
 800daca:	b29b      	uxth	r3, r3
 800dacc:	b2da      	uxtb	r2, r3
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	759a      	strb	r2, [r3, #22]
		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffu );
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	75da      	strb	r2, [r3, #23]
		uxOptionsLength = 4u;
 800dade:	2304      	movs	r3, #4
 800dae0:	617b      	str	r3, [r7, #20]
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	3314      	adds	r3, #20
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	009b      	lsls	r3, r3, #2
 800daec:	b2da      	uxtb	r2, r3
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	731a      	strb	r2, [r3, #12]
			uxOptionsLength += prvTCPSetTimeStamp( xOptionsLength, pxSocket, pxTCPHeader );
		}
	}
	#endif	/* ipconfigUSE_TCP_TIMESTAMPS == 1 */

	return uxOptionsLength;
 800daf2:	697b      	ldr	r3, [r7, #20]
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3718      	adds	r7, #24
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <prvHandleSynReceived>:
 * Called from the states: eSYN_RECEIVED and eCONNECT_SYN
 * If the flags received are correct, the socket will move to eESTABLISHED.
 */
static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b08c      	sub	sp, #48	; 0x30
 800db00:	af00      	add	r7, sp, #0
 800db02:	60f8      	str	r0, [r7, #12]
 800db04:	60b9      	str	r1, [r7, #8]
 800db06:	607a      	str	r2, [r7, #4]
 800db08:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	699b      	ldr	r3, [r3, #24]
 800db10:	627b      	str	r3, [r7, #36]	; 0x24
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800db12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db14:	3322      	adds	r3, #34	; 0x22
 800db16:	623b      	str	r3, [r7, #32]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	33dc      	adds	r3, #220	; 0xdc
 800db1c:	61fb      	str	r3, [r7, #28]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800db1e:	6a3b      	ldr	r3, [r7, #32]
 800db20:	7b5b      	ldrb	r3, [r3, #13]
 800db22:	76fb      	strb	r3, [r7, #27]
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800db24:	6a3b      	ldr	r3, [r7, #32]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	061a      	lsls	r2, r3, #24
 800db2a:	6a3b      	ldr	r3, [r7, #32]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	021b      	lsls	r3, r3, #8
 800db30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db34:	431a      	orrs	r2, r3
 800db36:	6a3b      	ldr	r3, [r7, #32]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	0a1b      	lsrs	r3, r3, #8
 800db3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800db40:	431a      	orrs	r2, r3
 800db42:	6a3b      	ldr	r3, [r7, #32]
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	0e1b      	lsrs	r3, r3, #24
 800db48:	4313      	orrs	r3, r2
 800db4a:	617b      	str	r3, [r7, #20]
BaseType_t xSendLength = 0;
 800db4c:	2300      	movs	r3, #0
 800db4e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Either expect a ACK or a SYN+ACK. */
	uint16_t usExpect = ( uint16_t ) ipTCP_FLAG_ACK;
 800db50:	2310      	movs	r3, #16
 800db52:	857b      	strh	r3, [r7, #42]	; 0x2a
	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800db5a:	2b02      	cmp	r3, #2
 800db5c:	d103      	bne.n	800db66 <prvHandleSynReceived+0x6a>
	{
		usExpect |= ( uint16_t ) ipTCP_FLAG_SYN;
 800db5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800db60:	f043 0302 	orr.w	r3, r3, #2
 800db64:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	if( ( ucTCPFlags & 0x17u ) != usExpect )
 800db66:	7efb      	ldrb	r3, [r7, #27]
 800db68:	f003 0217 	and.w	r2, r3, #23
 800db6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800db6e:	429a      	cmp	r2, r3
 800db70:	d016      	beq.n	800dba0 <prvHandleSynReceived+0xa4>
		/* eSYN_RECEIVED: flags 0010 expected, not 0002. */
		/* eSYN_RECEIVED: flags ACK  expected, not SYN. */
		FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
			pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ? "eSYN_RECEIVED" : "eCONNECT_SYN",
			usExpect, ucTCPFlags ) );
		vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800db72:	2108      	movs	r1, #8
 800db74:	68f8      	ldr	r0, [r7, #12]
 800db76:	f7ff fa98 	bl	800d0aa <vTCPStateChange>
		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
 800db7a:	6a3b      	ldr	r3, [r7, #32]
 800db7c:	7b5b      	ldrb	r3, [r3, #13]
 800db7e:	f043 0304 	orr.w	r3, r3, #4
 800db82:	b2da      	uxtb	r2, r3
 800db84:	6a3b      	ldr	r3, [r7, #32]
 800db86:	735a      	strb	r2, [r3, #13]
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	3328      	adds	r3, #40	; 0x28
 800db8c:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	b2db      	uxtb	r3, r3
 800db92:	3314      	adds	r3, #20
 800db94:	b2db      	uxtb	r3, r3
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	b2da      	uxtb	r2, r3
 800db9a:	6a3b      	ldr	r3, [r7, #32]
 800db9c:	731a      	strb	r2, [r3, #12]
 800db9e:	e069      	b.n	800dc74 <prvHandleSynReceived+0x178>
	}
	else
	{
		pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800dba4:	69fb      	ldr	r3, [r7, #28]
 800dba6:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

		if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dbba:	2b02      	cmp	r3, #2
 800dbbc:	d125      	bne.n	800dc0a <prvHandleSynReceived+0x10e>
		{
			TCPPacket_t *pxLastTCPPacket = ( TCPPacket_t * ) ( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	3382      	adds	r3, #130	; 0x82
 800dbc2:	613b      	str	r3, [r7, #16]

			/* Clear the SYN flag in lastPacket. */
			pxLastTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK;
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	2210      	movs	r2, #16
 800dbc8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

			/* This socket was the one connecting actively so now perofmr the
			synchronisation. */
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
				ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usCurMSS );
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800dbde:	6979      	ldr	r1, [r7, #20]
 800dbe0:	f001 f892 	bl	800ed08 <vTCPWindowInit>
			pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	1c5a      	adds	r2, r3, #1
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	619a      	str	r2, [r3, #24]
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	699a      	ldr	r2, [r3, #24]
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	611a      	str	r2, [r3, #16]
			pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	6a1b      	ldr	r3, [r3, #32]
 800dbf8:	1c5a      	adds	r2, r3, #1
 800dbfa:	69fb      	ldr	r3, [r7, #28]
 800dbfc:	621a      	str	r2, [r3, #32]
			pxTCPWindow->ulNextTxSequenceNumber++;
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc02:	1c5a      	adds	r2, r3, #1
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	635a      	str	r2, [r3, #52]	; 0x34
 800dc08:	e005      	b.n	800dc16 <prvHandleSynReceived+0x11a>
		}
		else if( ulReceiveLength == 0u )
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d102      	bne.n	800dc16 <prvHandleSynReceived+0x11a>
		{
			pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	697a      	ldr	r2, [r7, #20]
 800dc14:	611a      	str	r2, [r3, #16]
		}

		/* The SYN+ACK has been confirmed, increase the next sequence number by
		1. */
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u;
 800dc16:	69fb      	ldr	r3, [r7, #28]
 800dc18:	69db      	ldr	r3, [r3, #28]
 800dc1a:	1c5a      	adds	r2, r3, #1
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	62da      	str	r2, [r3, #44]	; 0x2c
				pxSocket->u.xTCP.usRemotePort,
				( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
		}
		#endif /* ipconfigUSE_TCP_WIN */

		if( ( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0u ) )
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dc26:	2b02      	cmp	r3, #2
 800dc28:	d002      	beq.n	800dc30 <prvHandleSynReceived+0x134>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d00d      	beq.n	800dc4c <prvHandleSynReceived+0x150>
		{
			pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800dc30:	6a3b      	ldr	r3, [r7, #32]
 800dc32:	2210      	movs	r2, #16
 800dc34:	735a      	strb	r2, [r3, #13]
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	3328      	adds	r3, #40	; 0x28
 800dc3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	3314      	adds	r3, #20
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	b2da      	uxtb	r2, r3
 800dc48:	6a3b      	ldr	r3, [r7, #32]
 800dc4a:	731a      	strb	r2, [r3, #12]
		}

		if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc52:	f003 0310 	and.w	r3, r3, #16
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d107      	bne.n	800dc6c <prvHandleSynReceived+0x170>
		{
			/* The other party did not send a scaling factor.
			A shifting factor in this side must be canceled. */
			pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2200      	movs	r2, #0
 800dc68:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		}
		/* This was the third step of connecting: SYN, SYN+ACK, ACK	so now the
		connection is established. */
		vTCPStateChange( pxSocket, eESTABLISHED );
 800dc6c:	2105      	movs	r1, #5
 800dc6e:	68f8      	ldr	r0, [r7, #12]
 800dc70:	f7ff fa1b 	bl	800d0aa <vTCPStateChange>
	}

	return xSendLength;
 800dc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3730      	adds	r7, #48	; 0x30
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <prvHandleEstablished>:
 * the code will check if it may be accepted, i.e. if all expected data has been
 * completely received.
 */
static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
{
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b092      	sub	sp, #72	; 0x48
 800dc82:	af02      	add	r7, sp, #8
 800dc84:	60f8      	str	r0, [r7, #12]
 800dc86:	60b9      	str	r1, [r7, #8]
 800dc88:	607a      	str	r2, [r7, #4]
 800dc8a:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	699b      	ldr	r3, [r3, #24]
 800dc92:	637b      	str	r3, [r7, #52]	; 0x34
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800dc94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc96:	3322      	adds	r3, #34	; 0x22
 800dc98:	633b      	str	r3, [r7, #48]	; 0x30
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	33dc      	adds	r3, #220	; 0xdc
 800dc9e:	62fb      	str	r3, [r7, #44]	; 0x2c
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800dca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca2:	7b5b      	ldrb	r3, [r3, #13]
 800dca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
 800dca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	061a      	lsls	r2, r3, #24
 800dcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	021b      	lsls	r3, r3, #8
 800dcb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dcb8:	431a      	orrs	r2, r3
 800dcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	0a1b      	lsrs	r3, r3, #8
 800dcc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dcc4:	431a      	orrs	r2, r3
 800dcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	0e1b      	lsrs	r3, r3, #24
 800dccc:	4313      	orrs	r3, r2
 800dcce:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	63bb      	str	r3, [r7, #56]	; 0x38
int32_t lDistance, lSendResult;

	/* Remember the window size the peer is advertising. */
	pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800dcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcda:	89db      	ldrh	r3, [r3, #14]
 800dcdc:	b29b      	uxth	r3, r3
 800dcde:	021b      	lsls	r3, r3, #8
 800dce0:	b21a      	sxth	r2, r3
 800dce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce4:	89db      	ldrh	r3, [r3, #14]
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	0a1b      	lsrs	r3, r3, #8
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	b21b      	sxth	r3, r3
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	b21b      	sxth	r3, r3
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	pxSocket->u.xTCP.ulWindowSize =
		( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800dd08:	fa03 f202 	lsl.w	r2, r3, r2
	pxSocket->u.xTCP.ulWindowSize =
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	if( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_ACK ) != 0u )
 800dd12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd16:	f003 0310 	and.w	r3, r3, #16
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d040      	beq.n	800dda0 <prvHandleEstablished+0x122>
	{
		ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulAckNr ) );
 800dd1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd20:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800dd24:	061a      	lsls	r2, r3, #24
 800dd26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd28:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800dd2c:	021b      	lsls	r3, r3, #8
 800dd2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd32:	431a      	orrs	r2, r3
 800dd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd36:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800dd3a:	0a1b      	lsrs	r3, r3, #8
 800dd3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dd40:	431a      	orrs	r2, r3
 800dd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd44:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800dd48:	0e1b      	lsrs	r3, r3, #24
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd50:	f001 fcd2 	bl	800f6f8 <ulTCPWindowTxAck>
 800dd54:	6238      	str	r0, [r7, #32]

		/* ulTCPWindowTxAck() returns the number of bytes which have been acked,
		starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
		txStream. */
		if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0u ) )
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d020      	beq.n	800dda0 <prvHandleEstablished+0x122>
 800dd5e:	6a3b      	ldr	r3, [r7, #32]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d01d      	beq.n	800dda0 <prvHandleEstablished+0x122>
		{
			/* Just advancing the tail index, 'ulCount' bytes have been
			confirmed, and because there is new space in the txStream, the
			user/owner should be woken up. */
			/* _HT_ : only in case the socket's waiting? */
			if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0u, NULL, ( size_t ) ulCount, pdFALSE ) != 0u )
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800dd68:	2300      	movs	r3, #0
 800dd6a:	9300      	str	r3, [sp, #0]
 800dd6c:	6a3b      	ldr	r3, [r7, #32]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	2100      	movs	r1, #0
 800dd72:	f7fe fa88 	bl	800c286 <uxStreamBufferGet>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d011      	beq.n	800dda0 <prvHandleEstablished+0x122>
			{
				pxSocket->xEventBits |= eSOCKET_SEND;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f043 0202 	orr.w	r2, r3, #2
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	601a      	str	r2, [r3, #0]

				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
				{
					if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd8c:	f003 0302 	and.w	r3, r3, #2
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d005      	beq.n	800dda0 <prvHandleEstablished+0x122>
					{
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	601a      	str	r2, [r3, #0]
		}
	}

	/* If this socket has a stream for transmission, add the data to the
	outgoing segment(s). */
	if( pxSocket->u.xTCP.txStream != NULL )
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d002      	beq.n	800ddae <prvHandleEstablished+0x130>
	{
		prvTCPAddTxData( pxSocket );
 800dda8:	68f8      	ldr	r0, [r7, #12]
 800ddaa:	f7ff fc9f 	bl	800d6ec <prvTCPAddTxData>
	}

	pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800ddae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb0:	6a1a      	ldr	r2, [r3, #32]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u ) )
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddbe:	f003 0320 	and.w	r3, r3, #32
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d105      	bne.n	800ddd4 <prvHandleEstablished+0x156>
 800ddc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ddcc:	f003 0301 	and.w	r3, r3, #1
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d037      	beq.n	800de44 <prvHandleEstablished+0x1c6>
	{
		/* Peer is requesting to stop, see if we're really finished. */
		xMayClose = pdTRUE;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Checks are only necessary if we haven't sent a FIN yet. */
		if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d11c      	bne.n	800de22 <prvHandleEstablished+0x1a4>
		{
			/* xTCPWindowTxDone returns true when all Tx queues are empty. */
			bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 800dde8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ddea:	f000 fe9b 	bl	800eb24 <xTCPWindowRxEmpty>
 800ddee:	61f8      	str	r0, [r7, #28]
			bTxDone     = xTCPWindowTxDone( pxTCPWindow );
 800ddf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ddf2:	f001 f9db 	bl	800f1ac <xTCPWindowTxDone>
 800ddf6:	61b8      	str	r0, [r7, #24]

			if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d002      	beq.n	800de04 <prvHandleEstablished+0x186>
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d102      	bne.n	800de0a <prvHandleEstablished+0x18c>
				/* Refusing FIN: Rx incomp 1 optlen 4 tx done 1. */
				FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
					pxSocket->usLocalPort,
					pxSocket->u.xTCP.usRemotePort,
					bRxComplete, bTxDone ) );
				xMayClose = pdFALSE;
 800de04:	2300      	movs	r3, #0
 800de06:	63bb      	str	r3, [r7, #56]	; 0x38
 800de08:	e00b      	b.n	800de22 <prvHandleEstablished+0x1a4>
			}
			else
			{
				lDistance = ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800de0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	441a      	add	r2, r3
 800de10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de12:	691b      	ldr	r3, [r3, #16]
 800de14:	1ad3      	subs	r3, r2, r3
 800de16:	617b      	str	r3, [r7, #20]

				if( lDistance > 1 )
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	2b01      	cmp	r3, #1
 800de1c:	dd01      	ble.n	800de22 <prvHandleEstablished+0x1a4>
				{
					FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
						lDistance, pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
						pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );

					xMayClose = pdFALSE;
 800de1e:	2300      	movs	r3, #0
 800de20:	63bb      	str	r3, [r7, #56]	; 0x38
			FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
				xMayClose, ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber, ulReceiveLength,
				pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) );
		}

		if( xMayClose != pdFALSE )
 800de22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de24:	2b00      	cmp	r3, #0
 800de26:	d00d      	beq.n	800de44 <prvHandleEstablished+0x1c6>
		{
			pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800de28:	68fa      	ldr	r2, [r7, #12]
 800de2a:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800de2e:	f043 0320 	orr.w	r3, r3, #32
 800de32:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4619      	mov	r1, r3
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f7ff fc7f 	bl	800d740 <prvTCPHandleFin>
 800de42:	63f8      	str	r0, [r7, #60]	; 0x3c
		}
	}

	if( xMayClose == pdFALSE )
 800de44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de46:	2b00      	cmp	r3, #0
 800de48:	d12a      	bne.n	800dea0 <prvHandleEstablished+0x222>
	{
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800de4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4c:	2210      	movs	r2, #16
 800de4e:	735a      	strb	r2, [r3, #13]

		if( ulReceiveLength != 0u )
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d016      	beq.n	800de84 <prvHandleEstablished+0x206>
		{
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	3328      	adds	r3, #40	; 0x28
 800de5a:	63fb      	str	r3, [r7, #60]	; 0x3c
			/* TCP-offsett equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	3314      	adds	r3, #20
 800de62:	b2db      	uxtb	r3, r3
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	b2da      	uxtb	r2, r3
 800de68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6a:	731a      	strb	r2, [r3, #12]

			if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de76:	b2db      	uxtb	r3, r3
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d003      	beq.n	800de84 <prvHandleEstablished+0x206>
			{
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800de7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de82:	621a      	str	r2, [r3, #32]
		/* Now get data to be transmitted. */
		/* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
		can not	send-out both TCP options and also a full packet. Sending
		options (SACK) is always more urgent than sending data, which can be
		sent later. */
		if( uxOptionsLength == 0u )
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d10a      	bne.n	800dea0 <prvHandleEstablished+0x222>
		{
			/* prvTCPPrepareSend might allocate a bigger network buffer, if
			necessary. */
			lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800de8a:	683a      	ldr	r2, [r7, #0]
 800de8c:	68b9      	ldr	r1, [r7, #8]
 800de8e:	68f8      	ldr	r0, [r7, #12]
 800de90:	f7ff fa46 	bl	800d320 <prvTCPPrepareSend>
 800de94:	6138      	str	r0, [r7, #16]
			if( lSendResult > 0 )
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	dd01      	ble.n	800dea0 <prvHandleEstablished+0x222>
			{
				xSendLength = ( BaseType_t ) lSendResult;
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
	}

	return xSendLength;
 800dea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3740      	adds	r7, #64	; 0x40
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
	...

0800deac <prvSendData>:
 * ipconfigUSE_TCP_WIN is defined, and if only an ACK must be sent, it will be
 * checked if it would better be postponed for efficiency.
 */
static BaseType_t prvSendData( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, BaseType_t xSendLength )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b08a      	sub	sp, #40	; 0x28
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	607a      	str	r2, [r7, #4]
 800deb8:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	699b      	ldr	r3, [r3, #24]
 800dec0:	623b      	str	r3, [r7, #32]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800dec2:	6a3b      	ldr	r3, [r7, #32]
 800dec4:	3322      	adds	r3, #34	; 0x22
 800dec6:	61fb      	str	r3, [r7, #28]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	33dc      	adds	r3, #220	; 0xdc
 800decc:	61bb      	str	r3, [r7, #24]
		const int32_t lMinLength = 0;
	#else
		int32_t lMinLength;
	#endif
#endif
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	685a      	ldr	r2, [r3, #4]
									 ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	6919      	ldr	r1, [r3, #16]
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	699b      	ldr	r3, [r3, #24]
 800deda:	1acb      	subs	r3, r1, r3
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 800dedc:	441a      	add	r2, r3
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	/* Free space in rxStream. */
	if( pxSocket->u.xTCP.rxStream != NULL )
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d006      	beq.n	800defa <prvSendData+0x4e>
	{
		ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800def0:	4618      	mov	r0, r3
 800def2:	f7fe fabd 	bl	800c470 <uxStreamBufferFrontSpace>
 800def6:	6278      	str	r0, [r7, #36]	; 0x24
 800def8:	e002      	b.n	800df00 <prvSendData+0x54>
	}
	else
	{
		ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800defe:	627b      	str	r3, [r7, #36]	; 0x24
	}

	pxSocket->u.xTCP.ulRxCurWinSize = FreeRTOS_min_uint32( ulFrontSpace, pxSocket->u.xTCP.ulRxCurWinSize );
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800df06:	4619      	mov	r1, r3
 800df08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df0a:	f7fe fa50 	bl	800c3ae <FreeRTOS_min_uint32>
 800df0e:	4602      	mov	r2, r0
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	/* Set the time-out field, so that we'll be called by the IP-task in case no
	next message will be received. */
	lRxSpace = (int32_t)( pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	691b      	ldr	r3, [r3, #16]
 800df1e:	1ad3      	subs	r3, r2, r3
 800df20:	617b      	str	r3, [r7, #20]
	#if ipconfigUSE_TCP_WIN == 1
	{

		#if( ipconfigTCP_ACK_EARLIER_PACKET != 0 )
		{
			lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800df28:	005b      	lsls	r3, r3, #1
 800df2a:	613b      	str	r3, [r7, #16]
		}
		#endif /* ipconfigTCP_ACK_EARLIER_PACKET */

		/* In case we're receiving data continuously, we might postpone sending
		an ACK to gain performance. */
		if( ( ulReceiveLength > 0 ) &&							/* Data was sent to this socket. */
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d04f      	beq.n	800dfd2 <prvSendData+0x126>
 800df32:	697a      	ldr	r2, [r7, #20]
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	429a      	cmp	r2, r3
 800df38:	db4b      	blt.n	800dfd2 <prvSendData+0x126>
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df44:	b2db      	uxtb	r3, r3
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
 800df46:	2b00      	cmp	r3, #0
 800df48:	d143      	bne.n	800dfd2 <prvSendData+0x126>
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	2b28      	cmp	r3, #40	; 0x28
 800df4e:	d140      	bne.n	800dfd2 <prvSendData+0x126>
			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
 800df56:	2b05      	cmp	r3, #5
 800df58:	d13b      	bne.n	800dfd2 <prvSendData+0x126>
			( pxTCPHeader->ucTCPFlags == ipTCP_FLAG_ACK ) )		/* There are no other flags than an ACK. */
 800df5a:	69fb      	ldr	r3, [r7, #28]
 800df5c:	7b5b      	ldrb	r3, [r3, #13]
			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 800df5e:	2b10      	cmp	r3, #16
 800df60:	d137      	bne.n	800dfd2 <prvSendData+0x126>
		{
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d00c      	beq.n	800df88 <prvSendData+0xdc>
			{
				/* There was still a delayed in queue, delete it. */
				if( pxSocket->u.xTCP.pxAckMessage != 0 )
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df72:	2b00      	cmp	r3, #0
 800df74:	d004      	beq.n	800df80 <prvSendData+0xd4>
				{
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df7a:	4618      	mov	r0, r3
 800df7c:	f001 fe4e 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
				}

				pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	67da      	str	r2, [r3, #124]	; 0x7c
			}
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800df8e:	461a      	mov	r2, r3
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	429a      	cmp	r2, r3
 800df94:	d807      	bhi.n	800dfa6 <prvSendData+0xfa>
				( lRxSpace < ( int32_t ) ( 2U * pxSocket->u.xTCP.usCurMSS ) ) )	/* There are less than 2 x MSS space in the Rx buffer. */
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800df9c:	005b      	lsls	r3, r3, #1
 800df9e:	461a      	mov	r2, r3
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	dd04      	ble.n	800dfb0 <prvSendData+0x104>
			{
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_SHORT_DELAY_MS );
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2202      	movs	r2, #2
 800dfaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dfae:	e003      	b.n	800dfb8 <prvSendData+0x10c>
			else
			{
				/* Normally a delayed ACK should wait 200 ms for a next incoming
				packet.  Only wait 20 ms here to gain performance.  A slow ACK
				for full-size message. */
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_LONGER_DELAY_MS );
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2214      	movs	r2, #20
 800dfb4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			}

			if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE ) )
 800dfb8:	4b1a      	ldr	r3, [pc, #104]	; (800e024 <prvSendData+0x178>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	dd02      	ble.n	800dfc6 <prvSendData+0x11a>
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dfc4:	2b17      	cmp	r3, #23
					pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
					xSendLength,
					pxSocket->u.xTCP.usTimeout, lRxSpace ) );
			}

			*ppxNetworkBuffer = NULL;
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	601a      	str	r2, [r3, #0]
			xSendLength = 0;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	603b      	str	r3, [r7, #0]
 800dfd0:	e011      	b.n	800dff6 <prvSendData+0x14a>
		}
		else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d00d      	beq.n	800dff6 <prvSendData+0x14a>
		{
			/* As an ACK is not being delayed, remove any earlier delayed ACK
			message. */
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d004      	beq.n	800dff0 <prvSendData+0x144>
			{
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfea:	4618      	mov	r0, r3
 800dfec:	f001 fe16 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
			}

			pxSocket->u.xTCP.pxAckMessage = NULL;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2200      	movs	r2, #0
 800dff4:	67da      	str	r2, [r3, #124]	; 0x7c
		( void ) pxTCPHeader;
		( void ) lRxSpace;
	}
	#endif /* ipconfigUSE_TCP_WIN */

	if( xSendLength != 0 )
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d00d      	beq.n	800e018 <prvSendData+0x16c>
	{
		if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE ) )
 800dffc:	4b09      	ldr	r3, [pc, #36]	; (800e024 <prvSendData+0x178>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2b01      	cmp	r3, #1
 800e002:	dd02      	ble.n	800e00a <prvSendData+0x15e>
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e008:	2b17      	cmp	r3, #23
				xSendLength ) );
		}

		/* Set the parameter 'xReleaseAfterSend' to the value of
		ipconfigZERO_COPY_TX_DRIVER. */
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	6819      	ldr	r1, [r3, #0]
 800e00e:	683a      	ldr	r2, [r7, #0]
 800e010:	2300      	movs	r3, #0
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	f7fe fc16 	bl	800c844 <prvTCPReturnPacket>
			*ppxNetworkBuffer = NULL;
		}
		#endif
	}

	return xSendLength;
 800e018:	683b      	ldr	r3, [r7, #0]
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3728      	adds	r7, #40	; 0x28
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	2000424c 	.word	0x2000424c

0800e028 <prvTCPHandleState>:
 *
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer )
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b08c      	sub	sp, #48	; 0x30
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	699b      	ldr	r3, [r3, #24]
 800e038:	62bb      	str	r3, [r7, #40]	; 0x28
TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
 800e03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03c:	3322      	adds	r3, #34	; 0x22
 800e03e:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t xSendLength = 0;
 800e040:	2300      	movs	r3, #0
 800e042:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t ulReceiveLength;	/* Number of bytes contained in the TCP message. */
uint8_t *pucRecvData;
uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
 800e044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	061a      	lsls	r2, r3, #24
 800e04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	021b      	lsls	r3, r3, #8
 800e050:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e054:	431a      	orrs	r2, r3
 800e056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	0a1b      	lsrs	r3, r3, #8
 800e05c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e060:	431a      	orrs	r2, r3
 800e062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	0e1b      	lsrs	r3, r3, #24
 800e068:	4313      	orrs	r3, r2
 800e06a:	623b      	str	r3, [r7, #32]
	/* xOptionsLength: the size of the options to be sent (always a multiple of
	4 bytes)
	1. in the SYN phase, we shall communicate the MSS
	2. in case of a SACK, Selective ACK, ack a segment which comes in
	out-of-order. */
UBaseType_t uxOptionsLength = 0u;
 800e06c:	2300      	movs	r3, #0
 800e06e:	61fb      	str	r3, [r7, #28]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e072:	7b5b      	ldrb	r3, [r3, #13]
 800e074:	76fb      	strb	r3, [r7, #27]
TCPWindow_t *pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	33dc      	adds	r3, #220	; 0xdc
 800e07a:	617b      	str	r3, [r7, #20]

	/* First get the length and the position of the received data, if any.
	pucRecvData will point to the first byte of the TCP payload. */
	ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f107 020c 	add.w	r2, r7, #12
 800e084:	4611      	mov	r1, r2
 800e086:	4618      	mov	r0, r3
 800e088:	f7ff fbff 	bl	800d88a <prvCheckRxData>
 800e08c:	4603      	mov	r3, r0
 800e08e:	613b      	str	r3, [r7, #16]

	if( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED )
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e096:	2b04      	cmp	r3, #4
 800e098:	d90c      	bls.n	800e0b4 <prvTCPHandleState+0x8c>
	{
		if ( pxTCPWindow->rx.ulCurrentSequenceNumber == ulSequenceNumber + 1u )
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	691a      	ldr	r2, [r3, #16]
 800e09e:	6a3b      	ldr	r3, [r7, #32]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d106      	bne.n	800e0b4 <prvTCPHandleState+0x8c>
		{
			/* This is most probably a keep-alive message from peer.  Setting
			'bWinChange' doesn't cause a window-size-change, the flag is used
			here to force sending an immediate ACK. */
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e0ac:	f043 0301 	orr.w	r3, r3, #1
 800e0b0:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		}
	}

	/* Keep track of the highest sequence number that might be expected within
	this connection. */
	if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0 )
 800e0b4:	6a3a      	ldr	r2, [r7, #32]
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	441a      	add	r2, r3
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	699b      	ldr	r3, [r3, #24]
 800e0be:	1ad3      	subs	r3, r2, r3
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	dd04      	ble.n	800e0ce <prvTCPHandleState+0xa6>
	{
		pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800e0c4:	6a3a      	ldr	r2, [r7, #32]
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	441a      	add	r2, r3
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	619a      	str	r2, [r3, #24]
	}

	/* Storing data may result in a fatal error if malloc() fails. */
	if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 800e0ce:	68f9      	ldr	r1, [r7, #12]
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	681a      	ldr	r2, [r3, #0]
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f7ff fc3e 	bl	800d958 <prvStoreRxData>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	da03      	bge.n	800e0ea <prvTCPHandleState+0xc2>
	{
		xSendLength = -1;
 800e0e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0e8:	e09e      	b.n	800e228 <prvTCPHandleState+0x200>
	}
	else
	{
		uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f7ff fca5 	bl	800da40 <prvSetOptions>
 800e0f6:	61f8      	str	r0, [r7, #28]

		if( ( pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) )
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e0fe:	2b04      	cmp	r3, #4
 800e100:	d108      	bne.n	800e114 <prvTCPHandleState+0xec>
 800e102:	7efb      	ldrb	r3, [r7, #27]
 800e104:	f003 031f 	and.w	r3, r3, #31
 800e108:	2b02      	cmp	r3, #2
 800e10a:	d103      	bne.n	800e114 <prvTCPHandleState+0xec>

			/* In eSYN_RECEIVED a simple ACK is expected, but apparently the
			'SYN+ACK' didn't arrive.  Step back to the previous state in which
			a first incoming SYN is handled.  The SYN was counted already so
			decrease it first. */
			vTCPStateChange( pxSocket, eSYN_FIRST );
 800e10c:	2103      	movs	r1, #3
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f7fe ffcb 	bl	800d0aa <vTCPStateChange>
		}

		if( ( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800e114:	7efb      	ldrb	r3, [r7, #27]
 800e116:	f003 0301 	and.w	r3, r3, #1
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d022      	beq.n	800e164 <prvTCPHandleState+0x13c>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e124:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d11a      	bne.n	800e164 <prvTCPHandleState+0x13c>
		{
			/* It's the first time a FIN has been received, remember its
			sequence number. */
			pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800e12e:	6a3a      	ldr	r2, [r7, #32]
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	441a      	add	r2, r3
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	615a      	str	r2, [r3, #20]
			pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e13e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e142:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

			/* Was peer the first one to send a FIN? */
			if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e14c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e150:	b2db      	uxtb	r3, r3
 800e152:	2b00      	cmp	r3, #0
 800e154:	d106      	bne.n	800e164 <prvTCPHandleState+0x13c>
			{
				/* If so, don't send the-last-ACK. */
				pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800e15c:	f043 0302 	orr.w	r3, r3, #2
 800e160:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			}
		}

		switch (pxSocket->u.xTCP.ucTCPState)
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e16a:	2b0b      	cmp	r3, #11
 800e16c:	d85b      	bhi.n	800e226 <prvTCPHandleState+0x1fe>
 800e16e:	a201      	add	r2, pc, #4	; (adr r2, 800e174 <prvTCPHandleState+0x14c>)
 800e170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e174:	0800e227 	.word	0x0800e227
 800e178:	0800e227 	.word	0x0800e227
 800e17c:	0800e1f7 	.word	0x0800e1f7
 800e180:	0800e1a5 	.word	0x0800e1a5
 800e184:	0800e1f7 	.word	0x0800e1f7
 800e188:	0800e207 	.word	0x0800e207
 800e18c:	0800e217 	.word	0x0800e217
 800e190:	0800e217 	.word	0x0800e217
 800e194:	0800e227 	.word	0x0800e227
 800e198:	0800e227 	.word	0x0800e227
 800e19c:	0800e217 	.word	0x0800e217
 800e1a0:	0800e227 	.word	0x0800e227
							socket. */
			{
				/* A new socket has been created, reply with a SYN+ACK.
				Acknowledge with seq+1 because the SYN is seen as pseudo data
				with len = 1. */
				uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPPacket );
 800e1a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f7fe ff07 	bl	800cfba <prvSetSynAckOptions>
 800e1ac:	61f8      	str	r0, [r7, #28]
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_SYN | ipTCP_FLAG_ACK;
 800e1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b0:	2212      	movs	r2, #18
 800e1b2:	735a      	strb	r2, [r3, #13]

				xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	3328      	adds	r3, #40	; 0x28
 800e1b8:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
				xOptionsLength is a multiple of 4.  The complete expression is:
				ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + xOptionsLength ) / 4 ) << 4 */
				pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	3314      	adds	r3, #20
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	b2da      	uxtb	r2, r3
 800e1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c8:	731a      	strb	r2, [r3, #12]
				vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800e1ca:	2104      	movs	r1, #4
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f7fe ff6c 	bl	800d0aa <vTCPStateChange>

				pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 800e1d2:	6a3b      	ldr	r3, [r7, #32]
 800e1d4:	1c5a      	adds	r2, r3, #1
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	619a      	str	r2, [r3, #24]
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	699a      	ldr	r2, [r3, #24]
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	611a      	str	r2, [r3, #16]
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u; /* because we send a TCP_SYN. */
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	69db      	ldr	r3, [r3, #28]
 800e1e6:	1c5a      	adds	r2, r3, #1
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	635a      	str	r2, [r3, #52]	; 0x34
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	621a      	str	r2, [r3, #32]
			}
			break;
 800e1f4:	e018      	b.n	800e228 <prvTCPHandleState+0x200>
		case eCONNECT_SYN:	/* (client) also called SYN_SENT: we've just send a
							SYN, expect	a SYN+ACK and send a ACK now. */
			/* Fall through */
		case eSYN_RECEIVED:	/* (server) we've had a SYN, replied with SYN+SCK
							expect a ACK and do nothing. */
			xSendLength = prvHandleSynReceived( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800e1f6:	69fb      	ldr	r3, [r7, #28]
 800e1f8:	693a      	ldr	r2, [r7, #16]
 800e1fa:	6839      	ldr	r1, [r7, #0]
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7ff fc7d 	bl	800dafc <prvHandleSynReceived>
 800e202:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800e204:	e010      	b.n	800e228 <prvTCPHandleState+0x200>
		case eESTABLISHED:	/* (server + client) an open connection, data
							received can be	delivered to the user. The normal
							state for the data transfer phase of the connection
							The closing states are also handled here with the
							use of some flags. */
			xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	693a      	ldr	r2, [r7, #16]
 800e20a:	6839      	ldr	r1, [r7, #0]
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f7ff fd36 	bl	800dc7e <prvHandleEstablished>
 800e212:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800e214:	e008      	b.n	800e228 <prvTCPHandleState+0x200>
			/* Fall through */
		case eFIN_WAIT_1:	/* (server + client) waiting for a connection termination request from the remote TCP,
							 * or an acknowledgement of the connection termination request previously sent. */
			/* Fall through */
		case eFIN_WAIT_2:	/* (server + client) waiting for a connection termination request from the remote TCP. */
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4619      	mov	r1, r3
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f7ff fa8f 	bl	800d740 <prvTCPHandleFin>
 800e222:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800e224:	e000      	b.n	800e228 <prvTCPHandleState+0x200>
							a MSL (maximum segment lifetime).]  These states are
							implemented implicitly by settings flags like
							'bFinSent', 'bFinRecv', and 'bFinAcked'. */
			break;
		default:
			break;
 800e226:	bf00      	nop
		}
	}

	if( xSendLength > 0 )
 800e228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	dd06      	ble.n	800e23c <prvTCPHandleState+0x214>
	{
		xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 800e22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e230:	693a      	ldr	r2, [r7, #16]
 800e232:	6839      	ldr	r1, [r7, #0]
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f7ff fe39 	bl	800deac <prvSendData>
 800e23a:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	return xSendLength;
 800e23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3730      	adds	r7, #48	; 0x30
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop

0800e248 <prvTCPSendReset>:
/*-----------------------------------------------------------*/

static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
	#if( ipconfigIGNORE_UNKNOWN_PACKETS == 0 )
	{
	TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	699b      	ldr	r3, [r3, #24]
 800e254:	60fb      	str	r3, [r7, #12]
	const BaseType_t xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + 0u );	/* Plus 0 options. */
 800e256:	2328      	movs	r3, #40	; 0x28
 800e258:	60bb      	str	r3, [r7, #8]

		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_RST;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2214      	movs	r2, #20
 800e25e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER + 0u ) << 2;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2250      	movs	r2, #80	; 0x50
 800e266:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		prvTCPReturnPacket( NULL, pxNetworkBuffer, ( uint32_t ) xSendLength, pdFALSE );
 800e26a:	68ba      	ldr	r2, [r7, #8]
 800e26c:	2300      	movs	r3, #0
 800e26e:	6879      	ldr	r1, [r7, #4]
 800e270:	2000      	movs	r0, #0
 800e272:	f7fe fae7 	bl	800c844 <prvTCPReturnPacket>

	/* Remove compiler warnings if ipconfigIGNORE_UNKNOWN_PACKETS == 1. */
	( void ) pxNetworkBuffer;

	/* The packet was not consumed. */
	return pdFAIL;
 800e276:	2300      	movs	r3, #0
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3710      	adds	r7, #16
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <prvSocketSetMSS>:
/*-----------------------------------------------------------*/

static void prvSocketSetMSS( FreeRTOS_Socket_t *pxSocket )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
uint32_t ulMSS = ipconfigTCP_MSS;
 800e288:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800e28c:	60fb      	str	r3, [r7, #12]

	if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0ul )
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e292:	061a      	lsls	r2, r3, #24
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e298:	021b      	lsls	r3, r3, #8
 800e29a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e29e:	431a      	orrs	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2a4:	0a1b      	lsrs	r3, r3, #8
 800e2a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e2aa:	431a      	orrs	r2, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2b0:	0e1b      	lsrs	r3, r3, #24
 800e2b2:	431a      	orrs	r2, r3
 800e2b4:	4b0e      	ldr	r3, [pc, #56]	; (800e2f0 <prvSocketSetMSS+0x70>)
 800e2b6:	695b      	ldr	r3, [r3, #20]
 800e2b8:	405a      	eors	r2, r3
 800e2ba:	4b0e      	ldr	r3, [pc, #56]	; (800e2f4 <prvSocketSetMSS+0x74>)
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	4013      	ands	r3, r2
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d005      	beq.n	800e2d0 <prvSocketSetMSS+0x50>
	{
		/* Data for this peer will pass through a router, and maybe through
		the internet.  Limit the MSS to 1400 bytes or less. */
		ulMSS = FreeRTOS_min_uint32( ( uint32_t ) REDUCED_MSS_THROUGH_INTERNET, ulMSS );
 800e2c4:	68f9      	ldr	r1, [r7, #12]
 800e2c6:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800e2ca:	f7fe f870 	bl	800c3ae <FreeRTOS_min_uint32>
 800e2ce:	60f8      	str	r0, [r7, #12]
	}

	FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );

	pxSocket->u.xTCP.usInitMSS = pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	b29a      	uxth	r2, r3
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800e2e6:	bf00      	nop
 800e2e8:	3710      	adds	r7, #16
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	200000a0 	.word	0x200000a0
 800e2f4:	20004194 	.word	0x20004194

0800e2f8 <xProcessReceivedTCPPacket>:
 *		prvTCPSendRepeated()
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC
*/
BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b08c      	sub	sp, #48	; 0x30
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
FreeRTOS_Socket_t *pxSocket;
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	699b      	ldr	r3, [r3, #24]
 800e304:	627b      	str	r3, [r7, #36]	; 0x24
uint16_t ucTCPFlags = pxTCPPacket->xTCPHeader.ucTCPFlags;
 800e306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e308:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e30c:	847b      	strh	r3, [r7, #34]	; 0x22
uint32_t ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 800e30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e310:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e314:	061a      	lsls	r2, r3, #24
 800e316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e318:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e31c:	021b      	lsls	r3, r3, #8
 800e31e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e322:	431a      	orrs	r2, r3
 800e324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e326:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e32a:	0a1b      	lsrs	r3, r3, #8
 800e32c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e330:	431a      	orrs	r2, r3
 800e332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e334:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e338:	0e1b      	lsrs	r3, r3, #24
 800e33a:	4313      	orrs	r3, r2
 800e33c:	61fb      	str	r3, [r7, #28]
uint16_t xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 800e33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e340:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e342:	b29b      	uxth	r3, r3
 800e344:	021b      	lsls	r3, r3, #8
 800e346:	b21a      	sxth	r2, r3
 800e348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	0a1b      	lsrs	r3, r3, #8
 800e350:	b29b      	uxth	r3, r3
 800e352:	b21b      	sxth	r3, r3
 800e354:	4313      	orrs	r3, r2
 800e356:	b21b      	sxth	r3, r3
 800e358:	837b      	strh	r3, [r7, #26]
uint32_t ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800e35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e360:	061a      	lsls	r2, r3, #24
 800e362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e364:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e368:	021b      	lsls	r3, r3, #8
 800e36a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e36e:	431a      	orrs	r2, r3
 800e370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e372:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e376:	0a1b      	lsrs	r3, r3, #8
 800e378:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e37c:	431a      	orrs	r2, r3
 800e37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e380:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e384:	0e1b      	lsrs	r3, r3, #24
 800e386:	4313      	orrs	r3, r2
 800e388:	617b      	str	r3, [r7, #20]
uint16_t xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800e38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e38e:	b29b      	uxth	r3, r3
 800e390:	021b      	lsls	r3, r3, #8
 800e392:	b21a      	sxth	r2, r3
 800e394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e396:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e398:	b29b      	uxth	r3, r3
 800e39a:	0a1b      	lsrs	r3, r3, #8
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	b21b      	sxth	r3, r3
 800e3a0:	4313      	orrs	r3, r2
 800e3a2:	b21b      	sxth	r3, r3
 800e3a4:	827b      	strh	r3, [r7, #18]
BaseType_t xResult = pdPASS;
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Find the destination socket, and if not found: return a socket listing to
	the destination PORT. */
	pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 800e3aa:	8b79      	ldrh	r1, [r7, #26]
 800e3ac:	8a7b      	ldrh	r3, [r7, #18]
 800e3ae:	697a      	ldr	r2, [r7, #20]
 800e3b0:	69f8      	ldr	r0, [r7, #28]
 800e3b2:	f7fd fb91 	bl	800bad8 <pxTCPSocketLookup>
 800e3b6:	62f8      	str	r0, [r7, #44]	; 0x2c

	if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE ) )
 800e3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d008      	beq.n	800e3d0 <xProcessReceivedTCPPacket+0xd8>
 800e3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7fe f8d1 	bl	800c56c <prvTCPSocketIsActive>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d110      	bne.n	800e3f2 <xProcessReceivedTCPPacket+0xfa>
		the other party will get a ECONN error.  There are two exceptions:
		1) A packet that already has the RST flag set.
		2) A packet that only has the ACK flag set.
		A packet with only the ACK flag set might be the last ACK in
	 	a three-way hand-shake that closes a connection. */
		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
 800e3d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3d2:	f003 031f 	and.w	r3, r3, #31
 800e3d6:	2b10      	cmp	r3, #16
 800e3d8:	d008      	beq.n	800e3ec <xProcessReceivedTCPPacket+0xf4>
			( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u ) )
 800e3da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3dc:	f003 0304 	and.w	r3, r3, #4
		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d103      	bne.n	800e3ec <xProcessReceivedTCPPacket+0xf4>
		{
			prvTCPSendReset( pxNetworkBuffer );
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7ff ff2e 	bl	800e248 <prvTCPSendReset>
		}

		/* The packet can't be handled. */
		xResult = pdFAIL;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3f0:	e04d      	b.n	800e48e <xProcessReceivedTCPPacket+0x196>
	}
	else
	{
		pxSocket->u.xTCP.ucRepCount = 0u;
 800e3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

		if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800e3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e400:	2b01      	cmp	r3, #1
 800e402:	d11c      	bne.n	800e43e <xProcessReceivedTCPPacket+0x146>
		{
			/* The matching socket is in a listening state.  Test if the peer
			has set the SYN flag. */
			if( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_SYN )
 800e404:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e406:	f003 031f 	and.w	r3, r3, #31
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	d00b      	beq.n	800e426 <xProcessReceivedTCPPacket+0x12e>
				FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
					prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
				}
				#endif /* ipconfigHAS_DEBUG_PRINTF */

				if( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u )
 800e40e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e410:	f003 0304 	and.w	r3, r3, #4
 800e414:	2b00      	cmp	r3, #0
 800e416:	d103      	bne.n	800e420 <xProcessReceivedTCPPacket+0x128>
				{
					prvTCPSendReset( pxNetworkBuffer );
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7ff ff14 	bl	800e248 <prvTCPSendReset>
				}
				xResult = pdFAIL;
 800e420:	2300      	movs	r3, #0
 800e422:	62bb      	str	r3, [r7, #40]	; 0x28
 800e424:	e033      	b.n	800e48e <xProcessReceivedTCPPacket+0x196>
			else
			{
				/* prvHandleListen() will either return a newly created socket
				(if bReuseSocket is false), otherwise it returns the current
				socket which will later get connected. */
				pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	4619      	mov	r1, r3
 800e42a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e42c:	f000 f87e 	bl	800e52c <prvHandleListen>
 800e430:	62f8      	str	r0, [r7, #44]	; 0x2c

				if( pxSocket == NULL )
 800e432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e434:	2b00      	cmp	r3, #0
 800e436:	d12a      	bne.n	800e48e <xProcessReceivedTCPPacket+0x196>
				{
					xResult = pdFAIL;
 800e438:	2300      	movs	r3, #0
 800e43a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e43c:	e027      	b.n	800e48e <xProcessReceivedTCPPacket+0x196>
		}	/* if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN ). */
		else
		{
			/* This is not a socket in listening mode. Check for the RST
			flag. */
			if( ( ucTCPFlags & ipTCP_FLAG_RST ) != 0u )
 800e43e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e440:	f003 0304 	and.w	r3, r3, #4
 800e444:	2b00      	cmp	r3, #0
 800e446:	d006      	beq.n	800e456 <xProcessReceivedTCPPacket+0x15e>
			{
				/* The target socket is not in a listening state, any RST packet
				will cause the socket to be closed. */
				FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );
				vTCPStateChange( pxSocket, eCLOSED );
 800e448:	2100      	movs	r1, #0
 800e44a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e44c:	f7fe fe2d 	bl	800d0aa <vTCPStateChange>

				/* The packet cannot be handled. */
				xResult = pdFAIL;
 800e450:	2300      	movs	r3, #0
 800e452:	62bb      	str	r3, [r7, #40]	; 0x28
 800e454:	e01b      	b.n	800e48e <xProcessReceivedTCPPacket+0x196>
			}
			else if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) )
 800e456:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e458:	f003 031f 	and.w	r3, r3, #31
 800e45c:	2b02      	cmp	r3, #2
 800e45e:	d107      	bne.n	800e470 <xProcessReceivedTCPPacket+0x178>
 800e460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e462:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e466:	2b04      	cmp	r3, #4
 800e468:	d902      	bls.n	800e470 <xProcessReceivedTCPPacket+0x178>
			{
				/* SYN flag while this socket is already connected. */
				FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );

				/* The packet cannot be handled. */
				xResult = pdFAIL;
 800e46a:	2300      	movs	r3, #0
 800e46c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e46e:	e00e      	b.n	800e48e <xProcessReceivedTCPPacket+0x196>
			else
			{
				/* Update the copy of the TCP header only (skipping eth and IP
				headers).  It might be used later on, whenever data must be sent
				to the peer. */
				const BaseType_t lOffset = ( BaseType_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER );
 800e470:	2322      	movs	r3, #34	; 0x22
 800e472:	60fb      	str	r3, [r7, #12]
				memcpy( pxSocket->u.xTCP.xPacket.u.ucLastPacket + lOffset, pxNetworkBuffer->pucEthernetBuffer + lOffset, ipSIZE_OF_TCP_HEADER );
 800e474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e476:	f103 0282 	add.w	r2, r3, #130	; 0x82
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	18d0      	adds	r0, r2, r3
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	699a      	ldr	r2, [r3, #24]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	4413      	add	r3, r2
 800e486:	2214      	movs	r2, #20
 800e488:	4619      	mov	r1, r3
 800e48a:	f002 fb30 	bl	8010aee <memcpy>
			}
		}
	}

	if( xResult != pdFAIL )
 800e48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e490:	2b00      	cmp	r3, #0
 800e492:	d046      	beq.n	800e522 <xProcessReceivedTCPPacket+0x22a>
	{
		/* Touch the alive timers because we received a message	for this
		socket. */
		prvTCPTouchSocket( pxSocket );
 800e494:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e496:	f7fe fde4 	bl	800d062 <prvTCPTouchSocket>
		/* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
		then we MUST assume an MSS size of 536 bytes for backward compatibility. */

		/* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
		the number 5 (words) in the higher niblle of the TCP-offset byte. */
		if( ( pxTCPPacket->xTCPHeader.ucTCPOffset & TCP_OFFSET_LENGTH_BITS ) > TCP_OFFSET_STANDARD_LENGTH )
 800e49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e4a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e4a4:	2b50      	cmp	r3, #80	; 0x50
 800e4a6:	d904      	bls.n	800e4b2 <xProcessReceivedTCPPacket+0x1ba>
		{
			prvCheckOptions( pxSocket, pxNetworkBuffer );
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4ae:	f7fe fc73 	bl	800cd98 <prvCheckOptions>
		}


		#if( ipconfigUSE_TCP_WIN == 1 )
		{
			pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usWindow );
 800e4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	021b      	lsls	r3, r3, #8
 800e4ba:	b21a      	sxth	r2, r3
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4be:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	0a1b      	lsrs	r3, r3, #8
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	b21b      	sxth	r3, r3
 800e4c8:	4313      	orrs	r3, r2
 800e4ca:	b21b      	sxth	r3, r3
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			pxSocket->u.xTCP.ulWindowSize =
				( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800e4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e4dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4de:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800e4e2:	fa03 f202 	lsl.w	r2, r3, r2
			pxSocket->u.xTCP.ulWindowSize =
 800e4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		}
		#endif

		/* In prvTCPHandleState() the incoming messages will be handled
		depending on the current state of the connection. */
		if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 800e4ec:	1d3b      	adds	r3, r7, #4
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4f2:	f7ff fd99 	bl	800e028 <prvTCPHandleState>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	dd04      	ble.n	800e506 <xProcessReceivedTCPPacket+0x20e>
		{
			/* prvTCPHandleState() has sent a message, see if there are more to
			be transmitted. */
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800e4fc:	1d3b      	adds	r3, r7, #4
 800e4fe:	4619      	mov	r1, r3
 800e500:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e502:	f7fe f972 	bl	800c7ea <prvTCPSendRepeated>
			}
			#endif /* ipconfigUSE_TCP_WIN */
		}

		if( pxNetworkBuffer != NULL )
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d005      	beq.n	800e518 <xProcessReceivedTCPPacket+0x220>
		{
			/* We must check if the buffer is unequal to NULL, because the
			socket might keep a reference to it in case a delayed ACK must be
			sent. */
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	4618      	mov	r0, r3
 800e510:	f001 fb84 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
			pxNetworkBuffer = NULL;
 800e514:	2300      	movs	r3, #0
 800e516:	607b      	str	r3, [r7, #4]
		}

		/* And finally, calculate when this socket wants to be woken up. */
		prvTCPNextTimeout ( pxSocket );
 800e518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e51a:	f7ff f869 	bl	800d5f0 <prvTCPNextTimeout>
		/* Return pdPASS to tell that the network buffer is 'consumed'. */
		xResult = pdPASS;
 800e51e:	2301      	movs	r3, #1
 800e520:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* pdPASS being returned means the buffer has been consumed. */
	return xResult;
 800e522:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800e524:	4618      	mov	r0, r3
 800e526:	3730      	adds	r7, #48	; 0x30
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <prvHandleListen>:
/*-----------------------------------------------------------*/

static FreeRTOS_Socket_t *prvHandleListen( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b086      	sub	sp, #24
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	699b      	ldr	r3, [r3, #24]
 800e53a:	613b      	str	r3, [r7, #16]
FreeRTOS_Socket_t *pxReturn;

	/* A pure SYN (without ACK) has come in, create a new socket to answer
	it. */
	if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e542:	f003 0308 	and.w	r3, r3, #8
 800e546:	b2db      	uxtb	r3, r3
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d00c      	beq.n	800e566 <prvHandleListen+0x3a>
	{
		/* The flag bReuseSocket indicates that the same instance of the
		listening socket should be used for the connection. */
		pxReturn = pxSocket;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	617b      	str	r3, [r7, #20]
		pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800e556:	f043 0304 	orr.w	r3, r3, #4
 800e55a:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	655a      	str	r2, [r3, #84]	; 0x54
 800e564:	e027      	b.n	800e5b6 <prvHandleListen+0x8a>
	}
	else
	{
		/* The socket does not have the bReuseSocket flag set meaning create a
		new socket when a connection comes in. */
		pxReturn = NULL;
 800e566:	2300      	movs	r3, #0
 800e568:	617b      	str	r3, [r7, #20]

		if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e576:	429a      	cmp	r2, r3
 800e578:	d303      	bcc.n	800e582 <prvHandleListen+0x56>
			FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
				pxSocket->usLocalPort,
				pxSocket->u.xTCP.usChildCount,
				pxSocket->u.xTCP.usBacklog,
				pxSocket->u.xTCP.usChildCount == 1 ? "" : "ren" ) );
			prvTCPSendReset( pxNetworkBuffer );
 800e57a:	6838      	ldr	r0, [r7, #0]
 800e57c:	f7ff fe64 	bl	800e248 <prvTCPSendReset>
 800e580:	e019      	b.n	800e5b6 <prvHandleListen+0x8a>
		}
		else
		{
			FreeRTOS_Socket_t *pxNewSocket = (FreeRTOS_Socket_t *)
 800e582:	2206      	movs	r2, #6
 800e584:	2101      	movs	r1, #1
 800e586:	2002      	movs	r0, #2
 800e588:	f7fc fc0a 	bl	800ada0 <FreeRTOS_socket>
 800e58c:	60f8      	str	r0, [r7, #12]
				FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );

			if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d003      	beq.n	800e59c <prvHandleListen+0x70>
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e59a:	d103      	bne.n	800e5a4 <prvHandleListen+0x78>
			{
				FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
				prvTCPSendReset( pxNetworkBuffer );
 800e59c:	6838      	ldr	r0, [r7, #0]
 800e59e:	f7ff fe53 	bl	800e248 <prvTCPSendReset>
 800e5a2:	e008      	b.n	800e5b6 <prvHandleListen+0x8a>
			}
			else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 800e5a4:	6879      	ldr	r1, [r7, #4]
 800e5a6:	68f8      	ldr	r0, [r7, #12]
 800e5a8:	f000 f870 	bl	800e68c <prvTCPSocketCopy>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d001      	beq.n	800e5b6 <prvHandleListen+0x8a>
			{
				/* The socket will be connected immediately, no time for the
				owner to setsockopt's, therefore copy properties of the server
				socket to the new socket.  Only the binding might fail (due to
				lack of resources). */
				pxReturn = pxNewSocket;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	617b      	str	r3, [r7, #20]
			}
		}
	}

	if( pxReturn != NULL )
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d060      	beq.n	800e67e <prvHandleListen+0x152>
	{
		pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e5c0:	b29b      	uxth	r3, r3
 800e5c2:	021b      	lsls	r3, r3, #8
 800e5c4:	b21a      	sxth	r2, r3
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	0a1b      	lsrs	r3, r3, #8
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	b21b      	sxth	r3, r3
 800e5d2:	4313      	orrs	r3, r2
 800e5d4:	b21b      	sxth	r3, r3
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	879a      	strh	r2, [r3, #60]	; 0x3c
		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e5e2:	061a      	lsls	r2, r3, #24
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e5ea:	021b      	lsls	r3, r3, #8
 800e5ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e5f0:	431a      	orrs	r2, r3
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e5f8:	0a1b      	lsrs	r3, r3, #8
 800e5fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e5fe:	431a      	orrs	r2, r3
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e606:	0e1b      	lsrs	r3, r3, #24
 800e608:	431a      	orrs	r2, r3
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	639a      	str	r2, [r3, #56]	; 0x38
		pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulNextInitialSequenceNumber;
 800e60e:	4b1e      	ldr	r3, [pc, #120]	; (800e688 <prvHandleListen+0x15c>)
 800e610:	681a      	ldr	r2, [r3, #0]
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

		/* Here is the SYN action. */
		pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800e61e:	061a      	lsls	r2, r3, #24
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800e626:	021b      	lsls	r3, r3, #8
 800e628:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e62c:	431a      	orrs	r2, r3
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800e634:	0a1b      	lsrs	r3, r3, #8
 800e636:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e63a:	431a      	orrs	r2, r3
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800e642:	0e1b      	lsrs	r3, r3, #24
 800e644:	431a      	orrs	r2, r3
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
		prvSocketSetMSS( pxReturn );
 800e64c:	6978      	ldr	r0, [r7, #20]
 800e64e:	f7ff fe17 	bl	800e280 <prvSocketSetMSS>

		prvTCPCreateWindow( pxReturn );
 800e652:	6978      	ldr	r0, [r7, #20]
 800e654:	f7fe faa0 	bl	800cb98 <prvTCPCreateWindow>

		/* It is recommended to increase the ISS for each new connection with a value of 0x102. */
		ulNextInitialSequenceNumber += INITIAL_SEQUENCE_NUMBER_INCREMENT;
 800e658:	4b0b      	ldr	r3, [pc, #44]	; (800e688 <prvHandleListen+0x15c>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800e660:	4a09      	ldr	r2, [pc, #36]	; (800e688 <prvHandleListen+0x15c>)
 800e662:	6013      	str	r3, [r2, #0]

		vTCPStateChange( pxReturn, eSYN_FIRST );
 800e664:	2103      	movs	r1, #3
 800e666:	6978      	ldr	r0, [r7, #20]
 800e668:	f7fe fd1f 	bl	800d0aa <vTCPStateChange>

		/* Make a copy of the header up to the TCP header.  It is needed later
		on, whenever data must be sent to the peer. */
		memcpy( pxReturn->u.xTCP.xPacket.u.ucLastPacket, pxNetworkBuffer->pucEthernetBuffer, sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	f103 0082 	add.w	r0, r3, #130	; 0x82
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	699b      	ldr	r3, [r3, #24]
 800e676:	2246      	movs	r2, #70	; 0x46
 800e678:	4619      	mov	r1, r3
 800e67a:	f002 fa38 	bl	8010aee <memcpy>
	}
	return pxReturn;
 800e67e:	697b      	ldr	r3, [r7, #20]
}
 800e680:	4618      	mov	r0, r3
 800e682:	3718      	adds	r7, #24
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	20004230 	.word	0x20004230

0800e68c <prvTCPSocketCopy>:

/*
 * Duplicates a socket after a listening socket receives a connection.
 */
static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t *pxNewSocket, FreeRTOS_Socket_t *pxSocket )
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	6039      	str	r1, [r7, #0]
struct freertos_sockaddr xAddress;

	pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	69da      	ldr	r2, [r3, #28]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	61da      	str	r2, [r3, #28]
	pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	6a1a      	ldr	r2, [r3, #32]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	621a      	str	r2, [r3, #32]
	pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	66da      	str	r2, [r3, #108]	; 0x6c
	pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	671a      	str	r2, [r3, #112]	; 0x70
	pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	665a      	str	r2, [r3, #100]	; 0x64
	pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	669a      	str	r2, [r3, #104]	; 0x68
	pxNewSocket->u.xTCP.uxRxWinSize  = pxSocket->u.xTCP.uxRxWinSize;
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	pxNewSocket->u.xTCP.uxTxWinSize  = pxSocket->u.xTCP.uxTxWinSize;
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		/* Child socket of listening sockets will inherit the Socket Set
		Otherwise the owner has no chance of including it into the set. */
		if( pxSocket->pxSocketSet )
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d009      	beq.n	800e706 <prvTCPSocketCopy+0x7a>
		{
			pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	629a      	str	r2, [r3, #40]	; 0x28
			pxNewSocket->xSelectBits = pxSocket->xSelectBits | eSELECT_READ | eSELECT_EXCEPT;
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6fe:	f043 0205 	orr.w	r2, r3, #5
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	/* And bind it to the same local port as its parent. */
	xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 800e706:	4b1b      	ldr	r3, [pc, #108]	; (800e774 <prvTCPSocketCopy+0xe8>)
 800e708:	695b      	ldr	r3, [r3, #20]
 800e70a:	60fb      	str	r3, [r7, #12]
	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e710:	021b      	lsls	r3, r3, #8
 800e712:	b21a      	sxth	r2, r3
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e718:	0a1b      	lsrs	r3, r3, #8
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	b21b      	sxth	r3, r3
 800e71e:	4313      	orrs	r3, r2
 800e720:	b21b      	sxth	r3, r3
 800e722:	b29b      	uxth	r3, r3
 800e724:	817b      	strh	r3, [r7, #10]
		orphan temporarily.  Once this socket is really connected, the owner of
		the server socket will be notified. */

		/* When bPassQueued is true, the socket is an orphan until it gets
		connected. */
		pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800e72c:	f043 0304 	orr.w	r3, r3, #4
 800e730:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	683a      	ldr	r2, [r7, #0]
 800e738:	655a      	str	r2, [r3, #84]	; 0x54
			pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
		}
	}
	#endif

	pxSocket->u.xTCP.usChildCount++;
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e740:	3301      	adds	r3, #1
 800e742:	b29a      	uxth	r2, r3
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		pxSocket->u.xTCP.usChildCount,
		pxSocket->u.xTCP.usBacklog,
		pxSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );

	/* Now bind the child socket to the same port as the listening socket. */
	if( vSocketBind ( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800e74a:	f107 0108 	add.w	r1, r7, #8
 800e74e:	2301      	movs	r3, #1
 800e750:	2208      	movs	r2, #8
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f7fc fd86 	bl	800b264 <vSocketBind>
 800e758:	4603      	mov	r3, r0
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d004      	beq.n	800e768 <prvTCPSocketCopy+0xdc>
	{
		FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
		vSocketClose( pxNewSocket );
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7fc fe36 	bl	800b3d0 <vSocketClose>
		return pdFALSE;
 800e764:	2300      	movs	r3, #0
 800e766:	e000      	b.n	800e76a <prvTCPSocketCopy+0xde>
	}

	return pdTRUE;
 800e768:	2301      	movs	r3, #1
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3710      	adds	r7, #16
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	200000a0 	.word	0x200000a0

0800e778 <xTCPCheckNewClient>:
/*
 * In the API accept(), the user asks is there is a new client?  As API's can
 * not walk through the xBoundTCPSocketsList the IP-task will do this.
 */
BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t *pxSocket )
{
 800e778:	b480      	push	{r7}
 800e77a:	b087      	sub	sp, #28
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e784:	021b      	lsls	r3, r3, #8
 800e786:	b21a      	sxth	r2, r3
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e78c:	0a1b      	lsrs	r3, r3, #8
 800e78e:	b29b      	uxth	r3, r3
 800e790:	b21b      	sxth	r3, r3
 800e792:	4313      	orrs	r3, r2
 800e794:	b21b      	sxth	r3, r3
 800e796:	b29b      	uxth	r3, r3
 800e798:	60fb      	str	r3, [r7, #12]
ListItem_t *pxIterator;
FreeRTOS_Socket_t *pxFound;
BaseType_t xResult = pdFALSE;
 800e79a:	2300      	movs	r3, #0
 800e79c:	613b      	str	r3, [r7, #16]

	/* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
	who has access. */
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800e79e:	4b16      	ldr	r3, [pc, #88]	; (800e7f8 <xTCPCheckNewClient+0x80>)
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	617b      	str	r3, [r7, #20]
 800e7a4:	e01d      	b.n	800e7e2 <xTCPCheckNewClient+0x6a>
		pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
	{
		if( listGET_LIST_ITEM_VALUE( pxIterator ) == xLocalPort )
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d115      	bne.n	800e7dc <xTCPCheckNewClient+0x64>
		{
			pxFound = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	60bb      	str	r3, [r7, #8]
			if( ( pxFound->ucProtocol == FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e7bc:	2b06      	cmp	r3, #6
 800e7be:	d10d      	bne.n	800e7dc <xTCPCheckNewClient+0x64>
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e7c6:	f003 0302 	and.w	r3, r3, #2
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d005      	beq.n	800e7dc <xTCPCheckNewClient+0x64>
			{
				pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	68ba      	ldr	r2, [r7, #8]
 800e7d4:	655a      	str	r2, [r3, #84]	; 0x54
				FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
				xResult = pdTRUE;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	613b      	str	r3, [r7, #16]
				break;
 800e7da:	e006      	b.n	800e7ea <xTCPCheckNewClient+0x72>
		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	617b      	str	r3, [r7, #20]
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	4a05      	ldr	r2, [pc, #20]	; (800e7fc <xTCPCheckNewClient+0x84>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d1dd      	bne.n	800e7a6 <xTCPCheckNewClient+0x2e>
			}
		}
	}
	return xResult;
 800e7ea:	693b      	ldr	r3, [r7, #16]
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	371c      	adds	r7, #28
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr
 800e7f8:	20005474 	.word	0x20005474
 800e7fc:	2000547c 	.word	0x2000547c

0800e800 <FreeRTOS_min_int32>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 800e800:	b480      	push	{r7}
 800e802:	b083      	sub	sp, #12
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	4293      	cmp	r3, r2
 800e810:	bfa8      	it	ge
 800e812:	4613      	movge	r3, r2
 800e814:	4618      	mov	r0, r3
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	4293      	cmp	r3, r2
 800e830:	bf28      	it	cs
 800e832:	4613      	movcs	r3, r2
 800e834:	4618      	mov	r0, r3
 800e836:	370c      	adds	r7, #12
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr

0800e840 <xSequenceLessThanOrEqual>:

#if( ipconfigUSE_TCP_WIN == 1 )
	/* Some 32-bit arithmetic: comparing sequence numbers */
	static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a, uint32_t b )
	{
 800e840:	b480      	push	{r7}
 800e842:	b083      	sub	sp, #12
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
		/* Test if a <= b
		Return true if the unsigned subtraction of (b-a) doesn't generate an
		arithmetic overflow. */
		return ( ( b - a ) & 0x80000000UL ) == 0UL;
 800e84a:	683a      	ldr	r2, [r7, #0]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	1ad3      	subs	r3, r2, r3
 800e850:	43db      	mvns	r3, r3
 800e852:	0fdb      	lsrs	r3, r3, #31
 800e854:	b2db      	uxtb	r3, r3
	}
 800e856:	4618      	mov	r0, r3
 800e858:	370c      	adds	r7, #12
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr

0800e862 <xSequenceLessThan>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE BaseType_t xSequenceLessThan( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceLessThan( uint32_t a, uint32_t b )
	{
 800e862:	b480      	push	{r7}
 800e864:	b083      	sub	sp, #12
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
 800e86a:	6039      	str	r1, [r7, #0]
		/* Test if a < b */
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 800e86c:	683a      	ldr	r2, [r7, #0]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	1ad3      	subs	r3, r2, r3
 800e872:	3b01      	subs	r3, #1
 800e874:	43db      	mvns	r3, r3
 800e876:	0fdb      	lsrs	r3, r3, #31
 800e878:	b2db      	uxtb	r3, r3
	}
 800e87a:	4618      	mov	r0, r3
 800e87c:	370c      	adds	r7, #12
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr

0800e886 <xSequenceGreaterThan>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a, uint32_t b )
	{
 800e886:	b480      	push	{r7}
 800e888:	b083      	sub	sp, #12
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	6078      	str	r0, [r7, #4]
 800e88e:	6039      	str	r1, [r7, #0]
		/* Test if a > b */
		return ( ( a - b - 1UL ) & 0x80000000UL ) == 0UL;
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	1ad3      	subs	r3, r2, r3
 800e896:	3b01      	subs	r3, #1
 800e898:	43db      	mvns	r3, r3
 800e89a:	0fdb      	lsrs	r3, r3, #31
 800e89c:	b2db      	uxtb	r3, r3
	}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	370c      	adds	r7, #12
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr

0800e8aa <xSequenceGreaterThanOrEqual>:
#endif /* ipconfigUSE_TCP_WIN */

/*-----------------------------------------------------------*/
static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a, uint32_t b );
static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a, uint32_t b )
{
 800e8aa:	b480      	push	{r7}
 800e8ac:	b083      	sub	sp, #12
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]
 800e8b2:	6039      	str	r1, [r7, #0]
	/* Test if a >= b */
	return ( ( a - b ) & 0x80000000UL ) == 0UL;
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	1ad3      	subs	r3, r2, r3
 800e8ba:	43db      	mvns	r3, r3
 800e8bc:	0fdb      	lsrs	r3, r3, #31
 800e8be:	b2db      	uxtb	r3, r3
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	370c      	adds	r7, #12
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr

0800e8cc <vListInsertFifo>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE void vListInsertFifo( List_t * const pxList, ListItem_t * const pxNewListItem );
	static portINLINE void vListInsertFifo( List_t * const pxList, ListItem_t * const pxNewListItem )
	{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	6039      	str	r1, [r7, #0]
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	3308      	adds	r3, #8
 800e8da:	461a      	mov	r2, r3
 800e8dc:	6839      	ldr	r1, [r7, #0]
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 f81f 	bl	800e922 <vListInsertGeneric>
	}
 800e8e4:	bf00      	nop
 800e8e6:	3708      	adds	r7, #8
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <vTCPTimerSet>:
#endif
/*-----------------------------------------------------------*/

static portINLINE void vTCPTimerSet( TCPTimer_t *pxTimer );
static portINLINE void vTCPTimerSet( TCPTimer_t *pxTimer )
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
	pxTimer->ulBorn = xTaskGetTickCount ( );
 800e8f4:	f7f8 ff5a 	bl	80077ac <xTaskGetTickCount>
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	601a      	str	r2, [r3, #0]
}
 800e8fe:	bf00      	nop
 800e900:	3708      	adds	r7, #8
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}

0800e906 <ulTimerGetAge>:
/*-----------------------------------------------------------*/

static portINLINE uint32_t ulTimerGetAge( TCPTimer_t *pxTimer );
static portINLINE uint32_t ulTimerGetAge( TCPTimer_t *pxTimer )
{
 800e906:	b580      	push	{r7, lr}
 800e908:	b082      	sub	sp, #8
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 800e90e:	f7f8 ff4d 	bl	80077ac <xTaskGetTickCount>
 800e912:	4602      	mov	r2, r0
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	1ad3      	subs	r3, r2, r3
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3708      	adds	r7, #8
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <vListInsertGeneric>:
preceded by a prototype. Later this prototype will be located in list.h? */

extern void vListInsertGeneric( List_t * const pxList, ListItem_t * const pxNewListItem, MiniListItem_t * const pxWhere );

void vListInsertGeneric( List_t * const pxList, ListItem_t * const pxNewListItem, MiniListItem_t * const pxWhere )
{
 800e922:	b480      	push	{r7}
 800e924:	b085      	sub	sp, #20
 800e926:	af00      	add	r7, sp, #0
 800e928:	60f8      	str	r0, [r7, #12]
 800e92a:	60b9      	str	r1, [r7, #8]
 800e92c:	607a      	str	r2, [r7, #4]
	/* Insert a new list item into pxList, it does not sort the list,
	but it puts the item just before xListEnd, so it will be the last item
	returned by listGET_HEAD_ENTRY() */
	pxNewListItem->pxNext = (struct xLIST_ITEM * configLIST_VOLATILE)pxWhere;
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	689a      	ldr	r2, [r3, #8]
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	609a      	str	r2, [r3, #8]
	pxWhere->pxPrevious->pxNext = pxNewListItem;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	68ba      	ldr	r2, [r7, #8]
 800e942:	605a      	str	r2, [r3, #4]
	pxWhere->pxPrevious = pxNewListItem;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	68ba      	ldr	r2, [r7, #8]
 800e948:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	68fa      	ldr	r2, [r7, #12]
 800e94e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	1c5a      	adds	r2, r3, #1
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	601a      	str	r2, [r3, #0]
}
 800e95a:	bf00      	nop
 800e95c:	3714      	adds	r7, #20
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr
	...

0800e968 <prvCreateSectors>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvCreateSectors( void )
	{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
	BaseType_t xIndex, xReturn;

		/* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

		vListInitialise( &xSegmentList );
 800e96e:	4824      	ldr	r0, [pc, #144]	; (800ea00 <prvCreateSectors+0x98>)
 800e970:	f7f7 f9f1 	bl	8005d56 <vListInitialise>
		xTCPSegments = ( TCPSegment_t * ) pvPortMallocLarge( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800e974:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e978:	f7f7 fce2 	bl	8006340 <pvPortMalloc>
 800e97c:	4602      	mov	r2, r0
 800e97e:	4b21      	ldr	r3, [pc, #132]	; (800ea04 <prvCreateSectors+0x9c>)
 800e980:	601a      	str	r2, [r3, #0]

		if( xTCPSegments == NULL )
 800e982:	4b20      	ldr	r3, [pc, #128]	; (800ea04 <prvCreateSectors+0x9c>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d102      	bne.n	800e990 <prvCreateSectors+0x28>
		{
			FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %lu failed\n",
				ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );

			xReturn = pdFAIL;
 800e98a:	2300      	movs	r3, #0
 800e98c:	603b      	str	r3, [r7, #0]
 800e98e:	e032      	b.n	800e9f6 <prvCreateSectors+0x8e>
		}
		else
		{
			/* Clear the allocated space. */
			memset( xTCPSegments, '\0', ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800e990:	4b1c      	ldr	r3, [pc, #112]	; (800ea04 <prvCreateSectors+0x9c>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e998:	2100      	movs	r1, #0
 800e99a:	4618      	mov	r0, r3
 800e99c:	f002 f8cc 	bl	8010b38 <memset>

			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	607b      	str	r3, [r7, #4]
 800e9a4:	e022      	b.n	800e9ec <prvCreateSectors+0x84>
			{
				/* Could call vListInitialiseItem here but all data has been
				nulled already.  Set the owner to a segment descriptor. */
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xListItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 800e9a6:	4b17      	ldr	r3, [pc, #92]	; (800ea04 <prvCreateSectors+0x9c>)
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	019b      	lsls	r3, r3, #6
 800e9ae:	4413      	add	r3, r2
 800e9b0:	4a14      	ldr	r2, [pc, #80]	; (800ea04 <prvCreateSectors+0x9c>)
 800e9b2:	6811      	ldr	r1, [r2, #0]
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	0192      	lsls	r2, r2, #6
 800e9b8:	440a      	add	r2, r1
 800e9ba:	639a      	str	r2, [r3, #56]	; 0x38
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 800e9bc:	4b11      	ldr	r3, [pc, #68]	; (800ea04 <prvCreateSectors+0x9c>)
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	019b      	lsls	r3, r3, #6
 800e9c4:	4413      	add	r3, r2
 800e9c6:	4a0f      	ldr	r2, [pc, #60]	; (800ea04 <prvCreateSectors+0x9c>)
 800e9c8:	6811      	ldr	r1, [r2, #0]
 800e9ca:	687a      	ldr	r2, [r7, #4]
 800e9cc:	0192      	lsls	r2, r2, #6
 800e9ce:	440a      	add	r2, r1
 800e9d0:	625a      	str	r2, [r3, #36]	; 0x24

				/* And add it to the pool of available segments */
				vListInsertFifo( &xSegmentList, &( xTCPSegments[xIndex].xListItem ) );
 800e9d2:	4b0c      	ldr	r3, [pc, #48]	; (800ea04 <prvCreateSectors+0x9c>)
 800e9d4:	681a      	ldr	r2, [r3, #0]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	019b      	lsls	r3, r3, #6
 800e9da:	4413      	add	r3, r2
 800e9dc:	332c      	adds	r3, #44	; 0x2c
 800e9de:	4619      	mov	r1, r3
 800e9e0:	4807      	ldr	r0, [pc, #28]	; (800ea00 <prvCreateSectors+0x98>)
 800e9e2:	f7ff ff73 	bl	800e8cc <vListInsertFifo>
			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	3301      	adds	r3, #1
 800e9ea:	607b      	str	r3, [r7, #4]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2b3f      	cmp	r3, #63	; 0x3f
 800e9f0:	ddd9      	ble.n	800e9a6 <prvCreateSectors+0x3e>
			}

			xReturn = pdPASS;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	603b      	str	r3, [r7, #0]
		}

		return xReturn;
 800e9f6:	683b      	ldr	r3, [r7, #0]
	}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3708      	adds	r7, #8
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}
 800ea00:	20004238 	.word	0x20004238
 800ea04:	20004234 	.word	0x20004234

0800ea08 <xTCPWindowRxFind>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxFind( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 800ea08:	b480      	push	{r7}
 800ea0a:	b087      	sub	sp, #28
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
	const ListItem_t *pxIterator;
	const MiniListItem_t* pxEnd;
	TCPSegment_t *pxSegment, *pxReturn = NULL;
 800ea12:	2300      	movs	r3, #0
 800ea14:	613b      	str	r3, [r7, #16]

		/* Find a segment with a given sequence number in the list of received
		segments. */

		pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xRxSegments );
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	33ac      	adds	r3, #172	; 0xac
 800ea1a:	60fb      	str	r3, [r7, #12]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	617b      	str	r3, [r7, #20]
 800ea22:	e00d      	b.n	800ea40 <xTCPWindowRxFind+0x38>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	60bb      	str	r3, [r7, #8]

			if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	681a      	ldr	r2, [r3, #0]
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d102      	bne.n	800ea3a <xTCPWindowRxFind+0x32>
			{
				pxReturn = pxSegment;
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	613b      	str	r3, [r7, #16]
				break;
 800ea38:	e006      	b.n	800ea48 <xTCPWindowRxFind+0x40>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	617b      	str	r3, [r7, #20]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800ea40:	697a      	ldr	r2, [r7, #20]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d1ed      	bne.n	800ea24 <xTCPWindowRxFind+0x1c>
			}
		}

		return pxReturn;
 800ea48:	693b      	ldr	r3, [r7, #16]
	}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	371c      	adds	r7, #28
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr
	...

0800ea58 <xTCPWindowNew>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowNew( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, int32_t lCount, BaseType_t xIsForRx )
	{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b088      	sub	sp, #32
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	60f8      	str	r0, [r7, #12]
 800ea60:	60b9      	str	r1, [r7, #8]
 800ea62:	607a      	str	r2, [r7, #4]
 800ea64:	603b      	str	r3, [r7, #0]
	TCPSegment_t *pxSegment;
	ListItem_t * pxItem;

		/* Allocate a new segment.  The socket will borrow all segments from a
		common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
		if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 800ea66:	4b2e      	ldr	r3, [pc, #184]	; (800eb20 <xTCPWindowNew+0xc8>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d101      	bne.n	800ea72 <xTCPWindowNew+0x1a>
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e000      	b.n	800ea74 <xTCPWindowNew+0x1c>
 800ea72:	2300      	movs	r3, #0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d002      	beq.n	800ea7e <xTCPWindowNew+0x26>
		{
			/* If the TCP-stack runs out of segments, you might consider
			increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
			FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", xIsForRx ? 'R' : 'T' ) );
			pxSegment = NULL;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	61fb      	str	r3, [r7, #28]
 800ea7c:	e04a      	b.n	800eb14 <xTCPWindowNew+0xbc>
		}
		else
		{
			/* Pop the item at the head of the list.  Semaphore protection is
			not required as only the IP task will call these functions.  */
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 800ea7e:	4b28      	ldr	r3, [pc, #160]	; (800eb20 <xTCPWindowNew+0xc8>)
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	61bb      	str	r3, [r7, #24]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	68db      	ldr	r3, [r3, #12]
 800ea88:	61fb      	str	r3, [r7, #28]

			configASSERT( pxItem != NULL );
 800ea8a:	69bb      	ldr	r3, [r7, #24]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d109      	bne.n	800eaa4 <xTCPWindowNew+0x4c>
 800ea90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea94:	f383 8811 	msr	BASEPRI, r3
 800ea98:	f3bf 8f6f 	isb	sy
 800ea9c:	f3bf 8f4f 	dsb	sy
 800eaa0:	617b      	str	r3, [r7, #20]
 800eaa2:	e7fe      	b.n	800eaa2 <xTCPWindowNew+0x4a>
			configASSERT( pxSegment != NULL );
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d109      	bne.n	800eabe <xTCPWindowNew+0x66>
 800eaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaae:	f383 8811 	msr	BASEPRI, r3
 800eab2:	f3bf 8f6f 	isb	sy
 800eab6:	f3bf 8f4f 	dsb	sy
 800eaba:	613b      	str	r3, [r7, #16]
 800eabc:	e7fe      	b.n	800eabc <xTCPWindowNew+0x64>

			/* Remove the item from xSegmentList. */
			uxListRemove( pxItem );
 800eabe:	69b8      	ldr	r0, [r7, #24]
 800eac0:	f7f7 f9d3 	bl	8005e6a <uxListRemove>

			/* Add it to either the connections' Rx or Tx queue. */
			vListInsertFifo( xIsForRx ? &pxWindow->xRxSegments : &pxWindow->xTxSegments, pxItem );
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d002      	beq.n	800ead0 <xTCPWindowNew+0x78>
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	33a4      	adds	r3, #164	; 0xa4
 800eace:	e001      	b.n	800ead4 <xTCPWindowNew+0x7c>
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	3390      	adds	r3, #144	; 0x90
 800ead4:	69b9      	ldr	r1, [r7, #24]
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7ff fef8 	bl	800e8cc <vListInsertFifo>

			/* And set the segment's timer to zero */
			vTCPTimerSet( &pxSegment->xTransmitTimer );
 800eadc:	69fb      	ldr	r3, [r7, #28]
 800eade:	3310      	adds	r3, #16
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7ff ff03 	bl	800e8ec <vTCPTimerSet>

			pxSegment->u.ulFlags = 0;
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	2200      	movs	r2, #0
 800eaea:	615a      	str	r2, [r3, #20]
			pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 );
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	bf14      	ite	ne
 800eaf2:	2301      	movne	r3, #1
 800eaf4:	2300      	moveq	r3, #0
 800eaf6:	b2d9      	uxtb	r1, r3
 800eaf8:	69fa      	ldr	r2, [r7, #28]
 800eafa:	7d93      	ldrb	r3, [r2, #22]
 800eafc:	f361 0382 	bfi	r3, r1, #2, #1
 800eb00:	7593      	strb	r3, [r2, #22]
			pxSegment->lMaxLength = lCount;
 800eb02:	69fb      	ldr	r3, [r7, #28]
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	605a      	str	r2, [r3, #4]
			pxSegment->lDataLength = lCount;
 800eb08:	69fb      	ldr	r3, [r7, #28]
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	609a      	str	r2, [r3, #8]
			pxSegment->ulSequenceNumber = ulSequenceNumber;
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	68ba      	ldr	r2, [r7, #8]
 800eb12:	601a      	str	r2, [r3, #0]
				}
			}
			#endif /* ipconfigHAS_DEBUG_PRINTF */
		}

		return pxSegment;
 800eb14:	69fb      	ldr	r3, [r7, #28]
	}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3720      	adds	r7, #32
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	20004238 	.word	0x20004238

0800eb24 <xTCPWindowRxEmpty>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowRxEmpty( TCPWindow_t *pxWindow )
	{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
		/* When the peer has a close request (FIN flag), the driver will check
		if there are missing packets in the Rx-queue.  It will accept the
		closure of the connection if both conditions are true:
		  - the Rx-queue is empty
		  - the highest Rx sequence number has been ACK'ed */
		if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d002      	beq.n	800eb3c <xTCPWindowRxEmpty+0x18>
		{
			/* Rx data has been stored while earlier packets were missing. */
			xReturn = pdFALSE;
 800eb36:	2300      	movs	r3, #0
 800eb38:	60fb      	str	r3, [r7, #12]
 800eb3a:	e00f      	b.n	800eb5c <xTCPWindowRxEmpty+0x38>
		}
		else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	691a      	ldr	r2, [r3, #16]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	699b      	ldr	r3, [r3, #24]
 800eb44:	4619      	mov	r1, r3
 800eb46:	4610      	mov	r0, r2
 800eb48:	f7ff feaf 	bl	800e8aa <xSequenceGreaterThanOrEqual>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d002      	beq.n	800eb58 <xTCPWindowRxEmpty+0x34>
		{
			/* No Rx packets are being stored and the highest sequence number
			that has been received has been ACKed. */
			xReturn = pdTRUE;
 800eb52:	2301      	movs	r3, #1
 800eb54:	60fb      	str	r3, [r7, #12]
 800eb56:	e001      	b.n	800eb5c <xTCPWindowRxEmpty+0x38>
		else
		{
			FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
				( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
				( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
			xReturn = pdFALSE;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
	}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3710      	adds	r7, #16
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <xTCPWindowGetHead>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowGetHead( List_t *pxList )
	{
 800eb66:	b580      	push	{r7, lr}
 800eb68:	b084      	sub	sp, #16
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
	TCPSegment_t *pxSegment;
	ListItem_t * pxItem;

		/* Detaches and returns the head of a queue. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d101      	bne.n	800eb7a <xTCPWindowGetHead+0x14>
 800eb76:	2301      	movs	r3, #1
 800eb78:	e000      	b.n	800eb7c <xTCPWindowGetHead+0x16>
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d002      	beq.n	800eb86 <xTCPWindowGetHead+0x20>
		{
			pxSegment = NULL;
 800eb80:	2300      	movs	r3, #0
 800eb82:	60fb      	str	r3, [r7, #12]
 800eb84:	e008      	b.n	800eb98 <xTCPWindowGetHead+0x32>
		}
		else
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	60bb      	str	r3, [r7, #8]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	68db      	ldr	r3, [r3, #12]
 800eb90:	60fb      	str	r3, [r7, #12]

			uxListRemove( pxItem );
 800eb92:	68b8      	ldr	r0, [r7, #8]
 800eb94:	f7f7 f969 	bl	8005e6a <uxListRemove>
		}

		return pxSegment;
 800eb98:	68fb      	ldr	r3, [r7, #12]
	}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3710      	adds	r7, #16
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}

0800eba2 <xTCPWindowPeekHead>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowPeekHead( List_t *pxList )
	{
 800eba2:	b480      	push	{r7}
 800eba4:	b085      	sub	sp, #20
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	6078      	str	r0, [r7, #4]
	ListItem_t *pxItem;
	TCPSegment_t *pxReturn;

		/* Returns the head of a queue but it won't be detached. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d101      	bne.n	800ebb6 <xTCPWindowPeekHead+0x14>
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	e000      	b.n	800ebb8 <xTCPWindowPeekHead+0x16>
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d002      	beq.n	800ebc2 <xTCPWindowPeekHead+0x20>
		{
			pxReturn = NULL;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	60fb      	str	r3, [r7, #12]
 800ebc0:	e005      	b.n	800ebce <xTCPWindowPeekHead+0x2c>
		}
		else
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	68db      	ldr	r3, [r3, #12]
 800ebc6:	60bb      	str	r3, [r7, #8]
			pxReturn = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	60fb      	str	r3, [r7, #12]
		}

		return pxReturn;
 800ebce:	68fb      	ldr	r3, [r7, #12]
	}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3714      	adds	r7, #20
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr

0800ebdc <vTCPWindowFree>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static void vTCPWindowFree( TCPSegment_t *pxSegment )
	{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
		/*  Free entry pxSegment because it's not used any more.  The ownership
		will be passed back to the segment pool.

		Unlink it from one of the queues, if any. */
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d004      	beq.n	800ebf6 <vTCPWindowFree+0x1a>
		{
			uxListRemove( &( pxSegment->xQueueItem ) );
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	3318      	adds	r3, #24
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7f7 f93a 	bl	8005e6a <uxListRemove>
		}

		pxSegment->ulSequenceNumber = 0u;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	601a      	str	r2, [r3, #0]
		pxSegment->lDataLength = 0l;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	609a      	str	r2, [r3, #8]
		pxSegment->u.ulFlags = 0u;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2200      	movs	r2, #0
 800ec06:	615a      	str	r2, [r3, #20]

		/* Take it out of xRxSegments/xTxSegments */
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xListItem ) ) != NULL )
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d004      	beq.n	800ec1a <vTCPWindowFree+0x3e>
		{
			uxListRemove( &( pxSegment->xListItem ) );
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	332c      	adds	r3, #44	; 0x2c
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7f7 f928 	bl	8005e6a <uxListRemove>
		}

		/* Return it to xSegmentList */
		vListInsertFifo( &xSegmentList, &( pxSegment->xListItem ) );
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	332c      	adds	r3, #44	; 0x2c
 800ec1e:	4619      	mov	r1, r3
 800ec20:	4803      	ldr	r0, [pc, #12]	; (800ec30 <vTCPWindowFree+0x54>)
 800ec22:	f7ff fe53 	bl	800e8cc <vListInsertFifo>
	}
 800ec26:	bf00      	nop
 800ec28:	3708      	adds	r7, #8
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	20004238 	.word	0x20004238

0800ec34 <vTCPWindowDestroy>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	void vTCPWindowDestroy( TCPWindow_t *pxWindow )
	{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b086      	sub	sp, #24
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]

		/*  Destroy a window.  A TCP window doesn't serve any more.  Return all
		owned segments to the pool.  In order to save code, it will make 2 rounds,
		one to remove the segments from xRxSegments, and a second round to clear
		xTxSegments*/
		for( xRound = 0; xRound < 2; xRound++ )
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	613b      	str	r3, [r7, #16]
 800ec40:	e022      	b.n	800ec88 <vTCPWindowDestroy+0x54>
		{
			if( xRound != 0 )
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d003      	beq.n	800ec50 <vTCPWindowDestroy+0x1c>
			{
				pxSegments = &( pxWindow->xRxSegments );
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	33a4      	adds	r3, #164	; 0xa4
 800ec4c:	617b      	str	r3, [r7, #20]
 800ec4e:	e002      	b.n	800ec56 <vTCPWindowDestroy+0x22>
			}
			else
			{
				pxSegments = &( pxWindow->xTxSegments );
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	3390      	adds	r3, #144	; 0x90
 800ec54:	617b      	str	r3, [r7, #20]
			}

			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	689b      	ldr	r3, [r3, #8]
 800ec5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec5e:	d101      	bne.n	800ec64 <vTCPWindowDestroy+0x30>
 800ec60:	2301      	movs	r3, #1
 800ec62:	e000      	b.n	800ec66 <vTCPWindowDestroy+0x32>
 800ec64:	2300      	movs	r3, #0
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d00b      	beq.n	800ec82 <vTCPWindowDestroy+0x4e>
			{
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800ec6a:	e006      	b.n	800ec7a <vTCPWindowDestroy+0x46>
				{
					pxSegment = ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments );
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	68db      	ldr	r3, [r3, #12]
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	60fb      	str	r3, [r7, #12]
					vTCPWindowFree( pxSegment );
 800ec74:	68f8      	ldr	r0, [r7, #12]
 800ec76:	f7ff ffb1 	bl	800ebdc <vTCPWindowFree>
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d1f4      	bne.n	800ec6c <vTCPWindowDestroy+0x38>
		for( xRound = 0; xRound < 2; xRound++ )
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	3301      	adds	r3, #1
 800ec86:	613b      	str	r3, [r7, #16]
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	ddd9      	ble.n	800ec42 <vTCPWindowDestroy+0xe>
				}
			}
		}
	}
 800ec8e:	bf00      	nop
 800ec90:	3718      	adds	r7, #24
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
	...

0800ec98 <vTCPWindowCreate>:
#endif /* ipconfigUSE_TCP_WIN == 1 */
/*-----------------------------------------------------------*/

void vTCPWindowCreate( TCPWindow_t *pxWindow, uint32_t ulRxWindowLength,
	uint32_t ulTxWindowLength, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	607a      	str	r2, [r7, #4]
 800eca4:	603b      	str	r3, [r7, #0]
	/* Create and initialize a window. */

	#if( ipconfigUSE_TCP_WIN == 1 )
	{
		if( xTCPSegments == NULL )
 800eca6:	4b17      	ldr	r3, [pc, #92]	; (800ed04 <vTCPWindowCreate+0x6c>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d101      	bne.n	800ecb2 <vTCPWindowCreate+0x1a>
		{
			prvCreateSectors();
 800ecae:	f7ff fe5b 	bl	800e968 <prvCreateSectors>
		}

		vListInitialise( &pxWindow->xTxSegments );
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	3390      	adds	r3, #144	; 0x90
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7f7 f84d 	bl	8005d56 <vListInitialise>
		vListInitialise( &pxWindow->xRxSegments );
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	33a4      	adds	r3, #164	; 0xa4
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7f7 f848 	bl	8005d56 <vListInitialise>

		vListInitialise( &pxWindow->xPriorityQueue );			/* Priority queue: segments which must be sent immediately */
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	3340      	adds	r3, #64	; 0x40
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7f7 f843 	bl	8005d56 <vListInitialise>
		vListInitialise( &pxWindow->xTxQueue   );			/* Transmit queue: segments queued for transmission */
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	3354      	adds	r3, #84	; 0x54
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7f7 f83e 	bl	8005d56 <vListInitialise>
		vListInitialise( &pxWindow->xWaitQueue );			/* Waiting queue:  outstanding segments */
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	3368      	adds	r3, #104	; 0x68
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7f7 f839 	bl	8005d56 <vListInitialise>
	{
		FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
			ulRxWindowLength, ulTxWindowLength ) );
	}

	pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	68ba      	ldr	r2, [r7, #8]
 800ece8:	605a      	str	r2, [r3, #4]
	pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	609a      	str	r2, [r3, #8]

	vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	69ba      	ldr	r2, [r7, #24]
 800ecf4:	6839      	ldr	r1, [r7, #0]
 800ecf6:	68f8      	ldr	r0, [r7, #12]
 800ecf8:	f000 f806 	bl	800ed08 <vTCPWindowInit>
}
 800ecfc:	bf00      	nop
 800ecfe:	3710      	adds	r7, #16
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	20004234 	.word	0x20004234

0800ed08 <vTCPWindowInit>:
/*-----------------------------------------------------------*/

void vTCPWindowInit( TCPWindow_t *pxWindow, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS )
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b087      	sub	sp, #28
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	607a      	str	r2, [r7, #4]
 800ed14:	603b      	str	r3, [r7, #0]
const int32_t l500ms = 500;
 800ed16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ed1a:	617b      	str	r3, [r7, #20]

	pxWindow->u.ulFlags = 0ul;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	601a      	str	r2, [r3, #0]
	pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 800ed22:	68fa      	ldr	r2, [r7, #12]
 800ed24:	7813      	ldrb	r3, [r2, #0]
 800ed26:	f043 0301 	orr.w	r3, r3, #1
 800ed2a:	7013      	strb	r3, [r2, #0]

	if( ulMSS != 0ul )
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d024      	beq.n	800ed7c <vTCPWindowInit+0x74>
	{
		if( pxWindow->usMSSInit != 0u )
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d004      	beq.n	800ed46 <vTCPWindowInit+0x3e>
		{
			pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	b29a      	uxth	r2, r3
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		}

		if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0u ) )
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d804      	bhi.n	800ed5e <vTCPWindowInit+0x56>
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d10e      	bne.n	800ed7c <vTCPWindowInit+0x74>
		{
			pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	685a      	ldr	r2, [r3, #4]
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed68:	683a      	ldr	r2, [r7, #0]
 800ed6a:	fb02 f203 	mul.w	r2, r2, r3
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	605a      	str	r2, [r3, #4]
			pxWindow->usMSS = ( uint16_t ) ulMSS;
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	b29a      	uxth	r2, r3
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
	}
	#endif /* ipconfigUSE_TCP_WIN == 1 */

	/*Start with a timeout of 2 * 500 ms (1 sec). */
	pxWindow->lSRTT = l500ms;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	697a      	ldr	r2, [r7, #20]
 800ed80:	639a      	str	r2, [r3, #56]	; 0x38

	/* Just for logging, to print relative sequence numbers. */
	pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	68ba      	ldr	r2, [r7, #8]
 800ed86:	60da      	str	r2, [r3, #12]

	/* The segment asked for in the next transmission. */
	pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	68ba      	ldr	r2, [r7, #8]
 800ed8c:	611a      	str	r2, [r3, #16]

	/* The right-hand side of the receive window. */
	pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	68ba      	ldr	r2, [r7, #8]
 800ed92:	619a      	str	r2, [r3, #24]

	pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	687a      	ldr	r2, [r7, #4]
 800ed98:	61da      	str	r2, [r3, #28]

	/* The segment asked for in next transmission. */
	pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	621a      	str	r2, [r3, #32]

	/* The sequence number given to the next outgoing byte to be added is
	maintained by lTCPWindowTxAdd(). */
	pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	635a      	str	r2, [r3, #52]	; 0x34

	/* The right-hand side of the transmit window. */
	pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	687a      	ldr	r2, [r7, #4]
 800edaa:	629a      	str	r2, [r3, #40]	; 0x28
	pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	687a      	ldr	r2, [r7, #4]
 800edb0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800edb2:	bf00      	nop
 800edb4:	371c      	adds	r7, #28
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr

0800edbe <xTCPWindowRxConfirm>:
 *=============================================================================*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxConfirm( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength )
	{
 800edbe:	b580      	push	{r7, lr}
 800edc0:	b08a      	sub	sp, #40	; 0x28
 800edc2:	af00      	add	r7, sp, #0
 800edc4:	60f8      	str	r0, [r7, #12]
 800edc6:	60b9      	str	r1, [r7, #8]
 800edc8:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxBest = NULL;
 800edca:	2300      	movs	r3, #0
 800edcc:	627b      	str	r3, [r7, #36]	; 0x24
	const ListItem_t *pxIterator;
	uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	4413      	add	r3, r2
 800edd4:	61fb      	str	r3, [r7, #28]
	const MiniListItem_t* pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &pxWindow->xRxSegments );
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	33ac      	adds	r3, #172	; 0xac
 800edda:	61bb      	str	r3, [r7, #24]
		and (ulSequenceNumber+ulLength).  Normally none will be found, because
		the next RX segment should have a sequence number equal to
		'(ulSequenceNumber+ulLength)'. */

		/* Iterate through all RX segments that are stored: */
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	623b      	str	r3, [r7, #32]
 800ede2:	e027      	b.n	800ee34 <xTCPWindowRxConfirm+0x76>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800ede4:	6a3b      	ldr	r3, [r7, #32]
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	617b      	str	r3, [r7, #20]
			/* And see if there is a segment for which:
			'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
			If there are more matching segments, the one with the lowest sequence number
			shall be taken */
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	68b9      	ldr	r1, [r7, #8]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7ff fd5a 	bl	800e8aa <xSequenceGreaterThanOrEqual>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d018      	beq.n	800ee2e <xTCPWindowRxConfirm+0x70>
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	69f9      	ldr	r1, [r7, #28]
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7ff fd2d 	bl	800e862 <xSequenceLessThan>
 800ee08:	4603      	mov	r3, r0
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d00f      	beq.n	800ee2e <xTCPWindowRxConfirm+0x70>
			{
				if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 800ee0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d00a      	beq.n	800ee2a <xTCPWindowRxConfirm+0x6c>
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	4619      	mov	r1, r3
 800ee1e:	4610      	mov	r0, r2
 800ee20:	f7ff fd1f 	bl	800e862 <xSequenceLessThan>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d001      	beq.n	800ee2e <xTCPWindowRxConfirm+0x70>
				{
					pxBest = pxSegment;
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	627b      	str	r3, [r7, #36]	; 0x24
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800ee2e:	6a3b      	ldr	r3, [r7, #32]
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	623b      	str	r3, [r7, #32]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800ee34:	6a3a      	ldr	r2, [r7, #32]
 800ee36:	69bb      	ldr	r3, [r7, #24]
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d1d3      	bne.n	800ede4 <xTCPWindowRxConfirm+0x26>
				}
			}
		}

		if( ( pxBest != NULL ) &&
 800ee3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d003      	beq.n	800ee4a <xTCPWindowRxConfirm+0x8c>
			( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 800ee42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee44:	681a      	ldr	r2, [r3, #0]
		if( ( pxBest != NULL ) &&
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	429a      	cmp	r2, r3
				pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
				pxBest->lDataLength,
				pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) );
		}

		return pxBest;
 800ee4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3728      	adds	r7, #40	; 0x28
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <lTCPWindowRxCheck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	int32_t lTCPWindowRxCheck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength, uint32_t ulSpace )
	{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b08a      	sub	sp, #40	; 0x28
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	60b9      	str	r1, [r7, #8]
 800ee5e:	607a      	str	r2, [r7, #4]
 800ee60:	603b      	str	r3, [r7, #0]
		or there is not enough space.

		As a side-effect, pxWindow->ulUserDataLength will get set to non-zero,
		if more Rx data may be passed to the user after this packet. */

		ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	691b      	ldr	r3, [r3, #16]
 800ee66:	627b      	str	r3, [r7, #36]	; 0x24

		/* For Selective Ack (SACK), used when out-of-sequence data come in. */
		pxWindow->ucOptionLength = 0u;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Non-zero if TCP-windows contains data which must be popped. */
		pxWindow->ulUserDataLength = 0ul;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2200      	movs	r2, #0
 800ee74:	631a      	str	r2, [r3, #48]	; 0x30

		if( ulCurrentSequenceNumber == ulSequenceNumber )
 800ee76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d145      	bne.n	800ef0a <lTCPWindowRxCheck+0xb6>
		{
			/* This is the packet with the lowest sequence number we're waiting
			for.  It can be passed directly to the rx stream. */
			if( ulLength > ulSpace )
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d903      	bls.n	800ee8e <lTCPWindowRxCheck+0x3a>
			{
				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
				lReturn = -1;
 800ee86:	f04f 33ff 	mov.w	r3, #4294967295
 800ee8a:	61fb      	str	r3, [r7, #28]
 800ee8c:	e0b9      	b.n	800f002 <lTCPWindowRxCheck+0x1ae>
			}
			else
			{
				ulCurrentSequenceNumber += ulLength;
 800ee8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	4413      	add	r3, r2
 800ee94:	627b      	str	r3, [r7, #36]	; 0x24

				if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0 )
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d02e      	beq.n	800eefe <lTCPWindowRxCheck+0xaa>
				{
					ulSavedSequenceNumber = ulCurrentSequenceNumber;
 800eea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea2:	61bb      	str	r3, [r7, #24]

					/* See if (part of) this segment has been stored already,
					but this rarely happens. */
					pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	68b9      	ldr	r1, [r7, #8]
 800eea8:	68f8      	ldr	r0, [r7, #12]
 800eeaa:	f7ff ff88 	bl	800edbe <xTCPWindowRxConfirm>
 800eeae:	6178      	str	r0, [r7, #20]
					if( pxFound != NULL )
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d012      	beq.n	800eedc <lTCPWindowRxCheck+0x88>
					{
						ulCurrentSequenceNumber = pxFound->ulSequenceNumber + ( ( uint32_t ) pxFound->lDataLength );
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	697a      	ldr	r2, [r7, #20]
 800eebc:	6892      	ldr	r2, [r2, #8]
 800eebe:	4413      	add	r3, r2
 800eec0:	627b      	str	r3, [r7, #36]	; 0x24

						/* Remove it because it will be passed to user directly. */
						vTCPWindowFree( pxFound );
 800eec2:	6978      	ldr	r0, [r7, #20]
 800eec4:	f7ff fe8a 	bl	800ebdc <vTCPWindowFree>
					}

					/*  Check for following segments that are already in the
					queue and increment ulCurrentSequenceNumber. */
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
 800eec8:	e008      	b.n	800eedc <lTCPWindowRxCheck+0x88>
					{
						ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	689b      	ldr	r3, [r3, #8]
 800eece:	461a      	mov	r2, r3
 800eed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed2:	4413      	add	r3, r2
 800eed4:	627b      	str	r3, [r7, #36]	; 0x24

						/* As all packet below this one have been passed to the
						user it can be discarded. */
						vTCPWindowFree( pxFound );
 800eed6:	6978      	ldr	r0, [r7, #20]
 800eed8:	f7ff fe80 	bl	800ebdc <vTCPWindowFree>
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
 800eedc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eede:	68f8      	ldr	r0, [r7, #12]
 800eee0:	f7ff fd92 	bl	800ea08 <xTCPWindowRxFind>
 800eee4:	6178      	str	r0, [r7, #20]
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d1ee      	bne.n	800eeca <lTCPWindowRxCheck+0x76>
					}

					if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 800eeec:	69ba      	ldr	r2, [r7, #24]
 800eeee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d004      	beq.n	800eefe <lTCPWindowRxCheck+0xaa>
					{
						/*  After the current data-package, there is more data
						to be popped. */
						pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 800eef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eef6:	69bb      	ldr	r3, [r7, #24]
 800eef8:	1ad2      	subs	r2, r2, r3
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	631a      	str	r2, [r3, #48]	; 0x30
								listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
						}
					}
				}

				pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef02:	611a      	str	r2, [r3, #16]

				/* Packet was expected, may be passed directly to the socket
				buffer or application.  Store the packet at offset 0. */
				lReturn = 0;
 800ef04:	2300      	movs	r3, #0
 800ef06:	61fb      	str	r3, [r7, #28]
 800ef08:	e07b      	b.n	800f002 <lTCPWindowRxCheck+0x1ae>
			}
		}
		else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	1c5a      	adds	r2, r3, #1
 800ef0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d103      	bne.n	800ef1c <lTCPWindowRxCheck+0xc8>
		{
			/* Looks like a TCP keep-alive message.  Do not accept/store Rx data
			ulUserDataLength = 0. Not packet out-of-sync.  Just reply to it. */
			lReturn = -1;
 800ef14:	f04f 33ff 	mov.w	r3, #4294967295
 800ef18:	61fb      	str	r3, [r7, #28]
 800ef1a:	e072      	b.n	800f002 <lTCPWindowRxCheck+0x1ae>
			/* The packet is not the one expected.  See if it falls within the Rx
			window so it can be stored. */

			/*  An "out-of-sequence" segment was received, must have missed one.
			Prepare a SACK (Selective ACK). */
			ulLast = ulSequenceNumber + ulLength;
 800ef1c:	68ba      	ldr	r2, [r7, #8]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4413      	add	r3, r2
 800ef22:	623b      	str	r3, [r7, #32]
			lDistance = ( int32_t ) ( ulLast - ulCurrentSequenceNumber );
 800ef24:	6a3a      	ldr	r2, [r7, #32]
 800ef26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef28:	1ad3      	subs	r3, r2, r3
 800ef2a:	613b      	str	r3, [r7, #16]

			if( lDistance <= 0 )
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	dc03      	bgt.n	800ef3a <lTCPWindowRxCheck+0xe6>
			{
				/* An earlier has been received, must be a retransmission of a
				packet that has been accepted already.  No need to send out a
				Selective ACK (SACK). */
				lReturn = -1;
 800ef32:	f04f 33ff 	mov.w	r3, #4294967295
 800ef36:	61fb      	str	r3, [r7, #28]
 800ef38:	e063      	b.n	800f002 <lTCPWindowRxCheck+0x1ae>
			}
			else if( lDistance > ( int32_t ) ulSpace )
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	693a      	ldr	r2, [r7, #16]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	dd09      	ble.n	800ef56 <lTCPWindowRxCheck+0x102>
			{
				/* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
				sequence number of this packet is too far ahead, ignore it. */
				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
				lReturn = -1;
 800ef42:	f04f 33ff 	mov.w	r3, #4294967295
 800ef46:	61fb      	str	r3, [r7, #28]
 800ef48:	e05b      	b.n	800f002 <lTCPWindowRxCheck+0x1ae>
				 * This is useful because subsequent packets will be SACK'd with
				 * single one message
				 */
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
				{
					ulLast += ( uint32_t ) pxFound->lDataLength;
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	461a      	mov	r2, r3
 800ef50:	6a3b      	ldr	r3, [r7, #32]
 800ef52:	4413      	add	r3, r2
 800ef54:	623b      	str	r3, [r7, #32]
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
 800ef56:	6a39      	ldr	r1, [r7, #32]
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f7ff fd55 	bl	800ea08 <xTCPWindowRxFind>
 800ef5e:	6178      	str	r0, [r7, #20]
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d1f1      	bne.n	800ef4a <lTCPWindowRxCheck+0xf6>
						ulLast - pxWindow->rx.ulFirstSequenceNumber ) );
				}

				/* Now prepare the SACK message.
				Code OPTION_CODE_SINGLE_SACK already in network byte order. */
				pxWindow->ulOptionsData[0] = OPTION_CODE_SINGLE_SACK;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	4a28      	ldr	r2, [pc, #160]	; (800f00c <lTCPWindowRxCheck+0x1b8>)
 800ef6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				/* First sequence number that we received. */
				pxWindow->ulOptionsData[1] = FreeRTOS_htonl( ulSequenceNumber );
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	061a      	lsls	r2, r3, #24
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	021b      	lsls	r3, r3, #8
 800ef76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ef7a:	431a      	orrs	r2, r3
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	0a1b      	lsrs	r3, r3, #8
 800ef80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ef84:	431a      	orrs	r2, r3
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	0e1b      	lsrs	r3, r3, #24
 800ef8a:	431a      	orrs	r2, r3
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

				/* Last + 1 */
				pxWindow->ulOptionsData[2] = FreeRTOS_htonl( ulLast );
 800ef92:	6a3b      	ldr	r3, [r7, #32]
 800ef94:	061a      	lsls	r2, r3, #24
 800ef96:	6a3b      	ldr	r3, [r7, #32]
 800ef98:	021b      	lsls	r3, r3, #8
 800ef9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ef9e:	431a      	orrs	r2, r3
 800efa0:	6a3b      	ldr	r3, [r7, #32]
 800efa2:	0a1b      	lsrs	r3, r3, #8
 800efa4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800efa8:	431a      	orrs	r2, r3
 800efaa:	6a3b      	ldr	r3, [r7, #32]
 800efac:	0e1b      	lsrs	r3, r3, #24
 800efae:	431a      	orrs	r2, r3
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				/* Which make 12 (3*4) option bytes. */
				pxWindow->ucOptionLength = 3 * sizeof( pxWindow->ulOptionsData[ 0 ] );
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	220c      	movs	r2, #12
 800efba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 800efbe:	68b9      	ldr	r1, [r7, #8]
 800efc0:	68f8      	ldr	r0, [r7, #12]
 800efc2:	f7ff fd21 	bl	800ea08 <xTCPWindowRxFind>
 800efc6:	6178      	str	r0, [r7, #20]

				if( pxFound != NULL )
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d003      	beq.n	800efd6 <lTCPWindowRxCheck+0x182>
				{
					/* This out-of-sequence packet has been received for a
					second time.  It is already stored but do send a SACK
					again. */
					lReturn = -1;
 800efce:	f04f 33ff 	mov.w	r3, #4294967295
 800efd2:	61fb      	str	r3, [r7, #28]
 800efd4:	e015      	b.n	800f002 <lTCPWindowRxCheck+0x1ae>
				}
				else
				{
					pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	2301      	movs	r3, #1
 800efda:	68b9      	ldr	r1, [r7, #8]
 800efdc:	68f8      	ldr	r0, [r7, #12]
 800efde:	f7ff fd3b 	bl	800ea58 <xTCPWindowNew>
 800efe2:	6178      	str	r0, [r7, #20]

					if( pxFound == NULL )
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d107      	bne.n	800effa <lTCPWindowRxCheck+0x1a6>
					{
						/* Can not send a SACK, because the segment cannot be
						stored. */
						pxWindow->ucOptionLength = 0u;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2200      	movs	r2, #0
 800efee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

						/* Needs to be stored but there is no segment
						available. */
						lReturn = -1;
 800eff2:	f04f 33ff 	mov.w	r3, #4294967295
 800eff6:	61fb      	str	r3, [r7, #28]
 800eff8:	e003      	b.n	800f002 <lTCPWindowRxCheck+0x1ae>
							FreeRTOS_flush_logging( );
						}

						/* Return a positive value.  The packet may be accepted
						and stored but an earlier packet is still missing. */
						lReturn = ( int32_t ) ( ulSequenceNumber - ulCurrentSequenceNumber );
 800effa:	68ba      	ldr	r2, [r7, #8]
 800effc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effe:	1ad3      	subs	r3, r2, r3
 800f000:	61fb      	str	r3, [r7, #28]
					}
				}
			}
		}

		return lReturn;
 800f002:	69fb      	ldr	r3, [r7, #28]
	}
 800f004:	4618      	mov	r0, r3
 800f006:	3728      	adds	r7, #40	; 0x28
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	0a050101 	.word	0x0a050101

0800f010 <lTCPIncrementTxPosition>:
 *=============================================================================*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static int32_t lTCPIncrementTxPosition( int32_t lPosition, int32_t lMax, int32_t lCount )
	{
 800f010:	b480      	push	{r7}
 800f012:	b085      	sub	sp, #20
 800f014:	af00      	add	r7, sp, #0
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	60b9      	str	r1, [r7, #8]
 800f01a:	607a      	str	r2, [r7, #4]
		/* +TCP stores data in circular buffers.  Calculate the next position to
		store. */
		lPosition += lCount;
 800f01c:	68fa      	ldr	r2, [r7, #12]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	4413      	add	r3, r2
 800f022:	60fb      	str	r3, [r7, #12]
		if( lPosition >= lMax )
 800f024:	68fa      	ldr	r2, [r7, #12]
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	429a      	cmp	r2, r3
 800f02a:	db03      	blt.n	800f034 <lTCPIncrementTxPosition+0x24>
		{
			lPosition -= lMax;
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	1ad3      	subs	r3, r2, r3
 800f032:	60fb      	str	r3, [r7, #12]
		}

		return lPosition;
 800f034:	68fb      	ldr	r3, [r7, #12]
	}
 800f036:	4618      	mov	r0, r3
 800f038:	3714      	adds	r7, #20
 800f03a:	46bd      	mov	sp, r7
 800f03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f040:	4770      	bx	lr
	...

0800f044 <lTCPWindowTxAdd>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	int32_t lTCPWindowTxAdd( TCPWindow_t *pxWindow, uint32_t ulLength, int32_t lPosition, int32_t lMax )
	{
 800f044:	b580      	push	{r7, lr}
 800f046:	b088      	sub	sp, #32
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	607a      	str	r2, [r7, #4]
 800f050:	603b      	str	r3, [r7, #0]
	int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	61fb      	str	r3, [r7, #28]
	int32_t lDone = 0;
 800f056:	2300      	movs	r3, #0
 800f058:	61bb      	str	r3, [r7, #24]
	TCPSegment_t *pxSegment = pxWindow->pxHeadSegment;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f05e:	617b      	str	r3, [r7, #20]

		/* Puts a message in the Tx-window (after buffer size has been
		verified). */
		if( pxSegment != NULL )
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	2b00      	cmp	r3, #0
 800f064:	f000 8096 	beq.w	800f194 <lTCPWindowTxAdd+0x150>
		{
			if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	689a      	ldr	r2, [r3, #8]
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	429a      	cmp	r2, r3
 800f072:	f280 808f 	bge.w	800f194 <lTCPWindowTxAdd+0x150>
			{
				if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	7d9b      	ldrb	r3, [r3, #22]
 800f07a:	f003 0301 	and.w	r3, r3, #1
 800f07e:	b2db      	uxtb	r3, r3
 800f080:	2b00      	cmp	r3, #0
 800f082:	f040 8087 	bne.w	800f194 <lTCPWindowTxAdd+0x150>
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	f000 8082 	beq.w	800f194 <lTCPWindowTxAdd+0x150>
				{
					/* Adding data to a segment that was already in the TX queue.  It
					will be filled-up to a maximum of MSS (maximum segment size). */
					lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	685a      	ldr	r2, [r3, #4]
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	689b      	ldr	r3, [r3, #8]
 800f098:	1ad3      	subs	r3, r2, r3
 800f09a:	4619      	mov	r1, r3
 800f09c:	69f8      	ldr	r0, [r7, #28]
 800f09e:	f7ff fbaf 	bl	800e800 <FreeRTOS_min_int32>
 800f0a2:	6138      	str	r0, [r7, #16]

					pxSegment->lDataLength += lToWrite;
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	689a      	ldr	r2, [r3, #8]
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	441a      	add	r2, r3
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	609a      	str	r2, [r3, #8]

					if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	689a      	ldr	r2, [r3, #8]
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	db02      	blt.n	800f0c2 <lTCPWindowTxAdd+0x7e>
					{
						/* This segment is full, don't add more bytes. */
						pxWindow->pxHeadSegment = NULL;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	67da      	str	r2, [r3, #124]	; 0x7c
					}

					lBytesLeft -= lToWrite;
 800f0c2:	69fa      	ldr	r2, [r7, #28]
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	1ad3      	subs	r3, r2, r3
 800f0c8:	61fb      	str	r3, [r7, #28]

					/* ulNextTxSequenceNumber is the sequence number of the next byte to
					be stored for transmission. */
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	441a      	add	r2, r3
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	635a      	str	r2, [r3, #52]	; 0x34

					/* Increased the return value. */
					lDone += lToWrite;
 800f0d6:	69ba      	ldr	r2, [r7, #24]
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	4413      	add	r3, r2
 800f0dc:	61bb      	str	r3, [r7, #24]

					/* Some detailed logging, for those who're interested. */
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 ) )
 800f0de:	4b32      	ldr	r3, [pc, #200]	; (800f1a8 <lTCPWindowTxAdd+0x164>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2b01      	cmp	r3, #1
						FreeRTOS_flush_logging( );
					}

					/* Calculate the next position in the circular data buffer, knowing
					its maximum length 'lMax'. */
					lPosition = lTCPIncrementTxPosition( lPosition, lMax, lToWrite );
 800f0e4:	693a      	ldr	r2, [r7, #16]
 800f0e6:	6839      	ldr	r1, [r7, #0]
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f7ff ff91 	bl	800f010 <lTCPIncrementTxPosition>
 800f0ee:	6078      	str	r0, [r7, #4]
				}
			}
		}

		while( lBytesLeft > 0 )
 800f0f0:	e050      	b.n	800f194 <lTCPWindowTxAdd+0x150>
		{
			/* The current transmission segment is full, create new segments as
			needed. */
			pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, pxWindow->usMSS );
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	2300      	movs	r3, #0
 800f100:	68f8      	ldr	r0, [r7, #12]
 800f102:	f7ff fca9 	bl	800ea58 <xTCPWindowNew>
 800f106:	6178      	str	r0, [r7, #20]

			if( pxSegment != NULL )
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d046      	beq.n	800f19c <lTCPWindowTxAdd+0x158>
			{
				/* Store as many as needed, but no more than the maximum
				(MSS). */
				lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	4619      	mov	r1, r3
 800f114:	69f8      	ldr	r0, [r7, #28]
 800f116:	f7ff fb73 	bl	800e800 <FreeRTOS_min_int32>
 800f11a:	6138      	str	r0, [r7, #16]

				pxSegment->lDataLength = lToWrite;
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	693a      	ldr	r2, [r7, #16]
 800f120:	609a      	str	r2, [r3, #8]
				pxSegment->lStreamPos = lPosition;
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	60da      	str	r2, [r3, #12]
				lBytesLeft -= lToWrite;
 800f128:	69fa      	ldr	r2, [r7, #28]
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	1ad3      	subs	r3, r2, r3
 800f12e:	61fb      	str	r3, [r7, #28]
				lPosition = lTCPIncrementTxPosition( lPosition, lMax, lToWrite );
 800f130:	693a      	ldr	r2, [r7, #16]
 800f132:	6839      	ldr	r1, [r7, #0]
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f7ff ff6b 	bl	800f010 <lTCPIncrementTxPosition>
 800f13a:	6078      	str	r0, [r7, #4]
				pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	441a      	add	r2, r3
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	635a      	str	r2, [r3, #52]	; 0x34
				lDone += lToWrite;
 800f148:	69ba      	ldr	r2, [r7, #24]
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	4413      	add	r3, r2
 800f14e:	61bb      	str	r3, [r7, #24]

				/* Link this segment in the Tx-Queue. */
				vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	3318      	adds	r3, #24
 800f15a:	4619      	mov	r1, r3
 800f15c:	4610      	mov	r0, r2
 800f15e:	f7ff fbb5 	bl	800e8cc <vListInsertFifo>

				/* Let 'pxHeadSegment' point to this segment if there is still
				space. */
				if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	689a      	ldr	r2, [r3, #8]
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	da03      	bge.n	800f176 <lTCPWindowTxAdd+0x132>
				{
					pxWindow->pxHeadSegment = pxSegment;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	697a      	ldr	r2, [r7, #20]
 800f172:	67da      	str	r2, [r3, #124]	; 0x7c
 800f174:	e002      	b.n	800f17c <lTCPWindowTxAdd+0x138>
				}
				else
				{
					pxWindow->pxHeadSegment = NULL;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	2200      	movs	r2, #0
 800f17a:	67da      	str	r2, [r3, #124]	; 0x7c
				}

				if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 )
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f182:	2b17      	cmp	r3, #23
 800f184:	d006      	beq.n	800f194 <lTCPWindowTxAdd+0x150>
				{
					if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800f186:	4b08      	ldr	r3, [pc, #32]	; (800f1a8 <lTCPWindowTxAdd+0x164>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2b02      	cmp	r3, #2
 800f18c:	dc02      	bgt.n	800f194 <lTCPWindowTxAdd+0x150>
						( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 800f18e:	4b06      	ldr	r3, [pc, #24]	; (800f1a8 <lTCPWindowTxAdd+0x164>)
 800f190:	681b      	ldr	r3, [r3, #0]
					if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800f192:	2b01      	cmp	r3, #1
		while( lBytesLeft > 0 )
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	2b00      	cmp	r3, #0
 800f198:	dcab      	bgt.n	800f0f2 <lTCPWindowTxAdd+0xae>
 800f19a:	e000      	b.n	800f19e <lTCPWindowTxAdd+0x15a>
				No more data can be sent at the moment. */
				if( lDone != 0 )
				{
					FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
				}
				break;
 800f19c:	bf00      	nop
			}
		}

		return lDone;
 800f19e:	69bb      	ldr	r3, [r7, #24]
	}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3720      	adds	r7, #32
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	2000424c 	.word	0x2000424c

0800f1ac <xTCPWindowTxDone>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowTxDone( TCPWindow_t *pxWindow )
	{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
		return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments) );
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	bf0c      	ite	eq
 800f1be:	2301      	moveq	r3, #1
 800f1c0:	2300      	movne	r3, #0
 800f1c2:	b2db      	uxtb	r3, r3
	}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	370c      	adds	r7, #12
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr

0800f1d0 <prvTCPWindowTxHasSpace>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t *pxWindow, uint32_t ulWindowSize )
	{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b086      	sub	sp, #24
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	6039      	str	r1, [r7, #0]
	TCPSegment_t *pxSegment;

		/* This function will look if there is new transmission data.  It will
		return true if there is data to be sent. */

		pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	3354      	adds	r3, #84	; 0x54
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7ff fcdf 	bl	800eba2 <xTCPWindowPeekHead>
 800f1e4:	60f8      	str	r0, [r7, #12]

		if( pxSegment == NULL )
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d102      	bne.n	800f1f2 <prvTCPWindowTxHasSpace+0x22>
		{
			xHasSpace = pdFALSE;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	613b      	str	r3, [r7, #16]
 800f1f0:	e02f      	b.n	800f252 <prvTCPWindowTxHasSpace+0x82>
		}
		else
		{
			/* How much data is outstanding, i.e. how much data has been sent
			but not yet acknowledged ? */
			if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6a1b      	ldr	r3, [r3, #32]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d306      	bcc.n	800f20c <prvTCPWindowTxHasSpace+0x3c>
			{
				ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6a1b      	ldr	r3, [r3, #32]
 800f206:	1ad3      	subs	r3, r2, r3
 800f208:	617b      	str	r3, [r7, #20]
 800f20a:	e001      	b.n	800f210 <prvTCPWindowTxHasSpace+0x40>
			}
			else
			{
				ulTxOutstanding = 0UL;
 800f20c:	2300      	movs	r3, #0
 800f20e:	617b      	str	r3, [r7, #20]
			}

			/* Subtract this from the peer's space. */
			ulWindowSize -= FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 800f210:	6979      	ldr	r1, [r7, #20]
 800f212:	6838      	ldr	r0, [r7, #0]
 800f214:	f7ff fb04 	bl	800e820 <FreeRTOS_min_uint32>
 800f218:	4602      	mov	r2, r0
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	1a9b      	subs	r3, r3, r2
 800f21e:	603b      	str	r3, [r7, #0]

			/* See if the next segment may be sent. */
			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	689b      	ldr	r3, [r3, #8]
 800f224:	461a      	mov	r2, r3
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d802      	bhi.n	800f232 <prvTCPWindowTxHasSpace+0x62>
			{
				xHasSpace = pdTRUE;
 800f22c:	2301      	movs	r3, #1
 800f22e:	613b      	str	r3, [r7, #16]
 800f230:	e001      	b.n	800f236 <prvTCPWindowTxHasSpace+0x66>
			}
			else
			{
				xHasSpace = pdFALSE;
 800f232:	2300      	movs	r3, #0
 800f234:	613b      	str	r3, [r7, #16]

			/* If 'xHasSpace', it looks like the peer has at least space for 1
			more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
			limitation of the transmission window (in case of many resends it
			may be decreased). */
			if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) )
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d00a      	beq.n	800f252 <prvTCPWindowTxHasSpace+0x82>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	689a      	ldr	r2, [r3, #8]
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	4619      	mov	r1, r3
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	440b      	add	r3, r1
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d201      	bcs.n	800f252 <prvTCPWindowTxHasSpace+0x82>
			{
				xHasSpace = pdFALSE;
 800f24e:	2300      	movs	r3, #0
 800f250:	613b      	str	r3, [r7, #16]
			}
		}

		return xHasSpace;
 800f252:	693b      	ldr	r3, [r7, #16]
	}
 800f254:	4618      	mov	r0, r3
 800f256:	3718      	adds	r7, #24
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <xTCPWindowTxHasData>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowTxHasData( TCPWindow_t *pxWindow, uint32_t ulWindowSize, TickType_t *pulDelay )
	{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b088      	sub	sp, #32
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxSegment;
	BaseType_t xReturn;
	TickType_t ulAge, ulMaxAge;

		*pulDelay = 0u;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	601a      	str	r2, [r3, #0]

		if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f272:	2b00      	cmp	r3, #0
 800f274:	d002      	beq.n	800f27c <xTCPWindowTxHasData+0x20>
		{
			/* No need to look at retransmissions or new transmission as long as
			there are priority segments.  *pulDelay equals zero, meaning it must
			be sent out immediately. */
			xReturn = pdTRUE;
 800f276:	2301      	movs	r3, #1
 800f278:	61fb      	str	r3, [r7, #28]
 800f27a:	e04a      	b.n	800f312 <xTCPWindowTxHasData+0xb6>
		}
		else
		{
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	3368      	adds	r3, #104	; 0x68
 800f280:	4618      	mov	r0, r3
 800f282:	f7ff fc8e 	bl	800eba2 <xTCPWindowPeekHead>
 800f286:	61b8      	str	r0, [r7, #24]

			if( pxSegment != NULL )
 800f288:	69bb      	ldr	r3, [r7, #24]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d019      	beq.n	800f2c2 <xTCPWindowTxHasData+0x66>
			{
				/* There is an outstanding segment, see if it is time to resend
				it. */
				ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	3310      	adds	r3, #16
 800f292:	4618      	mov	r0, r3
 800f294:	f7ff fb37 	bl	800e906 <ulTimerGetAge>
 800f298:	6178      	str	r0, [r7, #20]

				/* After a packet has been sent for the first time, it will wait
				'1 * lSRTT' ms for an ACK. A second time it will wait '2 * lSRTT' ms,
				each time doubling the time-out */
				ulMaxAge = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f29e:	461a      	mov	r2, r3
 800f2a0:	69bb      	ldr	r3, [r7, #24]
 800f2a2:	7d1b      	ldrb	r3, [r3, #20]
 800f2a4:	fa02 f303 	lsl.w	r3, r2, r3
 800f2a8:	613b      	str	r3, [r7, #16]

				if( ulMaxAge > ulAge )
 800f2aa:	693a      	ldr	r2, [r7, #16]
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d904      	bls.n	800f2bc <xTCPWindowTxHasData+0x60>
				{
					/* A segment must be sent after this amount of msecs */
					*pulDelay = ulMaxAge - ulAge;
 800f2b2:	693a      	ldr	r2, [r7, #16]
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	1ad2      	subs	r2, r2, r3
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	601a      	str	r2, [r3, #0]
				}

				xReturn = pdTRUE;
 800f2bc:	2301      	movs	r3, #1
 800f2be:	61fb      	str	r3, [r7, #28]
 800f2c0:	e027      	b.n	800f312 <xTCPWindowTxHasData+0xb6>
			}
			else
			{
				/* No priority segment, no outstanding data, see if there is new
				transmission data. */
				pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	3354      	adds	r3, #84	; 0x54
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7ff fc6b 	bl	800eba2 <xTCPWindowPeekHead>
 800f2cc:	61b8      	str	r0, [r7, #24]

				/* See if it fits in the peer's reception window. */
				if( pxSegment == NULL )
 800f2ce:	69bb      	ldr	r3, [r7, #24]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d102      	bne.n	800f2da <xTCPWindowTxHasData+0x7e>
				{
					xReturn = pdFALSE;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	61fb      	str	r3, [r7, #28]
 800f2d8:	e01b      	b.n	800f312 <xTCPWindowTxHasData+0xb6>
				}
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800f2da:	68b9      	ldr	r1, [r7, #8]
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	f7ff ff77 	bl	800f1d0 <prvTCPWindowTxHasSpace>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d102      	bne.n	800f2ee <xTCPWindowTxHasData+0x92>
				{
					/* Too many outstanding messages. */
					xReturn = pdFALSE;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	61fb      	str	r3, [r7, #28]
 800f2ec:	e011      	b.n	800f312 <xTCPWindowTxHasData+0xb6>
				}
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	f003 0302 	and.w	r3, r3, #2
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d008      	beq.n	800f30e <xTCPWindowTxHasData+0xb2>
 800f2fc:	69bb      	ldr	r3, [r7, #24]
 800f2fe:	689a      	ldr	r2, [r3, #8]
 800f300:	69bb      	ldr	r3, [r7, #24]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	429a      	cmp	r2, r3
 800f306:	da02      	bge.n	800f30e <xTCPWindowTxHasData+0xb2>
				{
					/* 'bSendFullSize' is a special optimisation.  If true, the
					driver will only sent completely filled packets (of MSS
					bytes). */
					xReturn = pdFALSE;
 800f308:	2300      	movs	r3, #0
 800f30a:	61fb      	str	r3, [r7, #28]
 800f30c:	e001      	b.n	800f312 <xTCPWindowTxHasData+0xb6>
				}
				else
				{
					xReturn = pdTRUE;
 800f30e:	2301      	movs	r3, #1
 800f310:	61fb      	str	r3, [r7, #28]
				}
			}
		}

		return xReturn;
 800f312:	69fb      	ldr	r3, [r7, #28]
	}
 800f314:	4618      	mov	r0, r3
 800f316:	3720      	adds	r7, #32
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <ulTCPWindowTxGet>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxGet( TCPWindow_t *pxWindow, uint32_t ulWindowSize, int32_t *plPosition )
	{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b088      	sub	sp, #32
 800f320:	af00      	add	r7, sp, #0
 800f322:	60f8      	str	r0, [r7, #12]
 800f324:	60b9      	str	r1, [r7, #8]
 800f326:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxSegment;
	uint32_t ulMaxTime;
	uint32_t ulReturn  = ~0UL;
 800f328:	f04f 33ff 	mov.w	r3, #4294967295
 800f32c:	61bb      	str	r3, [r7, #24]

		/* Fetches data to be sent-out now.

		Priority messages: segments with a resend need no check current sliding
		window size. */
		pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	3340      	adds	r3, #64	; 0x40
 800f332:	4618      	mov	r0, r3
 800f334:	f7ff fc17 	bl	800eb66 <xTCPWindowGetHead>
 800f338:	61f8      	str	r0, [r7, #28]
		pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	62da      	str	r2, [r3, #44]	; 0x2c

		if( pxSegment == NULL )
 800f342:	69fb      	ldr	r3, [r7, #28]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d16e      	bne.n	800f426 <ulTCPWindowTxGet+0x10a>
		{
			/* Waiting messages: outstanding messages with a running timer
			neither check peer's reception window size because these packets
			have been sent earlier. */
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	3368      	adds	r3, #104	; 0x68
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7ff fc28 	bl	800eba2 <xTCPWindowPeekHead>
 800f352:	61f8      	str	r0, [r7, #28]

			if( pxSegment != NULL )
 800f354:	69fb      	ldr	r3, [r7, #28]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d01f      	beq.n	800f39a <ulTCPWindowTxGet+0x7e>
			{
				/* Do check the timing. */
				ulMaxTime = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f35e:	461a      	mov	r2, r3
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	7d1b      	ldrb	r3, [r3, #20]
 800f364:	fa02 f303 	lsl.w	r3, r2, r3
 800f368:	617b      	str	r3, [r7, #20]

				if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 800f36a:	69fb      	ldr	r3, [r7, #28]
 800f36c:	3310      	adds	r3, #16
 800f36e:	4618      	mov	r0, r3
 800f370:	f7ff fac9 	bl	800e906 <ulTimerGetAge>
 800f374:	4602      	mov	r2, r0
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d90c      	bls.n	800f396 <ulTCPWindowTxGet+0x7a>
				{
					/* A normal (non-fast) retransmission.  Move it from the
					head of the waiting queue. */
					pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	3368      	adds	r3, #104	; 0x68
 800f380:	4618      	mov	r0, r3
 800f382:	f7ff fbf0 	bl	800eb66 <xTCPWindowGetHead>
 800f386:	61f8      	str	r0, [r7, #28]
					pxSegment->u.bits.ucDupAckCount = pdFALSE_UNSIGNED;
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	2200      	movs	r2, #0
 800f38c:	755a      	strb	r2, [r3, #21]

					/* Some detailed logging. */
					if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 ) )
 800f38e:	4b4c      	ldr	r3, [pc, #304]	; (800f4c0 <ulTCPWindowTxGet+0x1a4>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	e001      	b.n	800f39a <ulTCPWindowTxGet+0x7e>
						FreeRTOS_flush_logging( );
					}
				}
				else
				{
					pxSegment = NULL;
 800f396:	2300      	movs	r3, #0
 800f398:	61fb      	str	r3, [r7, #28]
				}
			}

			if( pxSegment == NULL )
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d142      	bne.n	800f426 <ulTCPWindowTxGet+0x10a>
			{
				/* New messages: sent-out for the first time.  Check current
				sliding window size of peer. */
				pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	3354      	adds	r3, #84	; 0x54
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7ff fbfc 	bl	800eba2 <xTCPWindowPeekHead>
 800f3aa:	61f8      	str	r0, [r7, #28]

				if( pxSegment == NULL )
 800f3ac:	69fb      	ldr	r3, [r7, #28]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d102      	bne.n	800f3b8 <ulTCPWindowTxGet+0x9c>
				{
					/* No segments queued. */
					ulReturn = 0UL;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	61bb      	str	r3, [r7, #24]
 800f3b6:	e036      	b.n	800f426 <ulTCPWindowTxGet+0x10a>
				}
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	f003 0302 	and.w	r3, r3, #2
 800f3c0:	b2db      	uxtb	r3, r3
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d008      	beq.n	800f3d8 <ulTCPWindowTxGet+0xbc>
 800f3c6:	69fb      	ldr	r3, [r7, #28]
 800f3c8:	689a      	ldr	r2, [r3, #8]
 800f3ca:	69fb      	ldr	r3, [r7, #28]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	da02      	bge.n	800f3d8 <ulTCPWindowTxGet+0xbc>
				{
					/* A segment has been queued but the driver waits until it
					has a full size of MSS. */
					ulReturn = 0;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	61bb      	str	r3, [r7, #24]
 800f3d6:	e026      	b.n	800f426 <ulTCPWindowTxGet+0x10a>
				}
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800f3d8:	68b9      	ldr	r1, [r7, #8]
 800f3da:	68f8      	ldr	r0, [r7, #12]
 800f3dc:	f7ff fef8 	bl	800f1d0 <prvTCPWindowTxHasSpace>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d102      	bne.n	800f3ec <ulTCPWindowTxGet+0xd0>
				{
					/* Peer has no more space at this moment. */
					ulReturn = 0;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	61bb      	str	r3, [r7, #24]
 800f3ea:	e01c      	b.n	800f426 <ulTCPWindowTxGet+0x10a>
				}
				else
				{
					/* Move it out of the Tx queue. */
					pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	3354      	adds	r3, #84	; 0x54
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7ff fbb8 	bl	800eb66 <xTCPWindowGetHead>
 800f3f6:	61f8      	str	r0, [r7, #28]

					/* Don't let pxHeadSegment point to this segment any more,
					so no more data will be added. */
					if( pxWindow->pxHeadSegment == pxSegment )
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f3fc:	69fb      	ldr	r3, [r7, #28]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d102      	bne.n	800f408 <ulTCPWindowTxGet+0xec>
					{
						pxWindow->pxHeadSegment = NULL;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2200      	movs	r2, #0
 800f406:	67da      	str	r2, [r3, #124]	; 0x7c
					}

					/* pxWindow->tx.highest registers the highest sequence
					number in our transmission window. */
					pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	69fa      	ldr	r2, [r7, #28]
 800f40e:	6892      	ldr	r2, [r2, #8]
 800f410:	441a      	add	r2, r3
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	629a      	str	r2, [r3, #40]	; 0x28

					/* ...and more detailed logging */
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 800f416:	4b2a      	ldr	r3, [pc, #168]	; (800f4c0 <ulTCPWindowTxGet+0x1a4>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2b01      	cmp	r3, #1
 800f41c:	dd03      	ble.n	800f426 <ulTCPWindowTxGet+0x10a>
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f424:	2b17      	cmp	r3, #23
				FreeRTOS_flush_logging( );
			}
		}

		/* See if it has already been determined to return 0. */
		if( ulReturn != 0UL )
 800f426:	69bb      	ldr	r3, [r7, #24]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d043      	beq.n	800f4b4 <ulTCPWindowTxGet+0x198>
		{
			configASSERT( listLIST_ITEM_CONTAINER( &(pxSegment->xQueueItem ) ) == NULL );
 800f42c:	69fb      	ldr	r3, [r7, #28]
 800f42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f430:	2b00      	cmp	r3, #0
 800f432:	d009      	beq.n	800f448 <ulTCPWindowTxGet+0x12c>
 800f434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f438:	f383 8811 	msr	BASEPRI, r3
 800f43c:	f3bf 8f6f 	isb	sy
 800f440:	f3bf 8f4f 	dsb	sy
 800f444:	613b      	str	r3, [r7, #16]
 800f446:	e7fe      	b.n	800f446 <ulTCPWindowTxGet+0x12a>

			/* Now that the segment will be transmitted, add it to the tail of
			the waiting queue. */
			vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f44e:	69fb      	ldr	r3, [r7, #28]
 800f450:	3318      	adds	r3, #24
 800f452:	4619      	mov	r1, r3
 800f454:	4610      	mov	r0, r2
 800f456:	f7ff fa39 	bl	800e8cc <vListInsertFifo>

			/* And mark it as outstanding. */
			pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 800f45a:	69fa      	ldr	r2, [r7, #28]
 800f45c:	7d93      	ldrb	r3, [r2, #22]
 800f45e:	f043 0301 	orr.w	r3, r3, #1
 800f462:	7593      	strb	r3, [r2, #22]

			/* Administer the transmit count, needed for fast
			retransmissions. */
			( pxSegment->u.bits.ucTransmitCount )++;
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	7d1b      	ldrb	r3, [r3, #20]
 800f468:	3301      	adds	r3, #1
 800f46a:	b2da      	uxtb	r2, r3
 800f46c:	69fb      	ldr	r3, [r7, #28]
 800f46e:	751a      	strb	r2, [r3, #20]

			/* If there have been several retransmissions (4), decrease the
			size of the transmission window to at most 2 times MSS. */
			if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	7d1b      	ldrb	r3, [r3, #20]
 800f474:	2b04      	cmp	r3, #4
 800f476:	d10d      	bne.n	800f494 <ulTCPWindowTxGet+0x178>
			{
				if( pxWindow->xSize.ulTxWindowLength > ( 2U * pxWindow->usMSS ) )
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	689a      	ldr	r2, [r3, #8]
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f482:	005b      	lsls	r3, r3, #1
 800f484:	429a      	cmp	r2, r3
 800f486:	d905      	bls.n	800f494 <ulTCPWindowTxGet+0x178>
				{
					FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
						pxWindow->usPeerPortNumber, pxWindow->usOurPortNumber,
						pxWindow->xSize.ulTxWindowLength, 2 * pxWindow->usMSS ) );
					pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f48e:	005a      	lsls	r2, r3, #1
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	609a      	str	r2, [r3, #8]
				}
			}

			/* Clear the transmit timer. */
			vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	3310      	adds	r3, #16
 800f498:	4618      	mov	r0, r3
 800f49a:	f7ff fa27 	bl	800e8ec <vTCPTimerSet>

			pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 800f49e:	69fb      	ldr	r3, [r7, #28]
 800f4a0:	681a      	ldr	r2, [r3, #0]
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	62da      	str	r2, [r3, #44]	; 0x2c

			/* Inform the caller where to find the data within the queue. */
			*plPosition = pxSegment->lStreamPos;
 800f4a6:	69fb      	ldr	r3, [r7, #28]
 800f4a8:	68da      	ldr	r2, [r3, #12]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	601a      	str	r2, [r3, #0]

			/* And return the length of the data segment */
			ulReturn = ( uint32_t ) pxSegment->lDataLength;
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	689b      	ldr	r3, [r3, #8]
 800f4b2:	61bb      	str	r3, [r7, #24]
		}

		return ulReturn;
 800f4b4:	69bb      	ldr	r3, [r7, #24]
	}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3720      	adds	r7, #32
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	2000424c 	.word	0x2000424c

0800f4c4 <prvTCPWindowTxCheckAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b08c      	sub	sp, #48	; 0x30
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	60b9      	str	r1, [r7, #8]
 800f4ce:	607a      	str	r2, [r7, #4]
	uint32_t ulBytesConfirmed = 0u;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	62bb      	str	r3, [r7, #40]	; 0x28
	const ListItem_t *pxIterator;
	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xTxSegments );
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	3398      	adds	r3, #152	; 0x98
 800f4dc:	61fb      	str	r3, [r7, #28]

		 A Smoothed RTT will increase quickly, but it is conservative when
		 becoming smaller. */

		for(
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	685b      	ldr	r3, [r3, #4]
 800f4e2:	627b      	str	r3, [r7, #36]	; 0x24
		for(
 800f4e4:	e09b      	b.n	800f61e <prvTCPWindowTxCheckAck+0x15a>
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
			)
		{
			xDoUnlink = pdFALSE;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	623b      	str	r3, [r7, #32]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800f4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ec:	68db      	ldr	r3, [r3, #12]
 800f4ee:	61bb      	str	r3, [r7, #24]

			/* Move to the next item because the current item might get
			removed. */
			pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800f4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Continue if this segment does not fall within the ACK'd range. */
			if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 800f4f6:	69bb      	ldr	r3, [r7, #24]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4fe:	f7ff f9c2 	bl	800e886 <xSequenceGreaterThan>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	d000      	beq.n	800f50a <prvTCPWindowTxCheckAck+0x46>
			{
				continue;
 800f508:	e089      	b.n	800f61e <prvTCPWindowTxCheckAck+0x15a>
			}

			/* Is it ready? */
			if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 800f50a:	69bb      	ldr	r3, [r7, #24]
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f510:	429a      	cmp	r2, r3
 800f512:	f040 8091 	bne.w	800f638 <prvTCPWindowTxCheckAck+0x174>
			{
				break;
			}

			ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 800f516:	69bb      	ldr	r3, [r7, #24]
 800f518:	689b      	ldr	r3, [r3, #8]
 800f51a:	617b      	str	r3, [r7, #20]

			if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800f51c:	69bb      	ldr	r3, [r7, #24]
 800f51e:	7d9b      	ldrb	r3, [r3, #22]
 800f520:	f003 0302 	and.w	r3, r3, #2
 800f524:	b2db      	uxtb	r3, r3
 800f526:	2b00      	cmp	r3, #0
 800f528:	d14d      	bne.n	800f5c6 <prvTCPWindowTxCheckAck+0x102>
			{
				if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t )ulDataLength, ulLast ) != pdFALSE )
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	4413      	add	r3, r2
 800f532:	6879      	ldr	r1, [r7, #4]
 800f534:	4618      	mov	r0, r3
 800f536:	f7ff f9a6 	bl	800e886 <xSequenceGreaterThan>
 800f53a:	4603      	mov	r3, r0
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d17d      	bne.n	800f63c <prvTCPWindowTxCheckAck+0x178>
					#endif /* ipconfigHAS_DEBUG_PRINTF */
					break;
				}

				/* This segment is fully ACK'd, set the flag. */
				pxSegment->u.bits.bAcked = pdTRUE_UNSIGNED;
 800f540:	69ba      	ldr	r2, [r7, #24]
 800f542:	7d93      	ldrb	r3, [r2, #22]
 800f544:	f043 0302 	orr.w	r3, r3, #2
 800f548:	7593      	strb	r3, [r2, #22]

				/* Calculate the RTT only if the segment was sent-out for the
				first time and if this is the last ACK'd segment in a range. */
				if( ( pxSegment->u.bits.ucTransmitCount == 1 ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 800f54a:	69bb      	ldr	r3, [r7, #24]
 800f54c:	7d1b      	ldrb	r3, [r3, #20]
 800f54e:	2b01      	cmp	r3, #1
 800f550:	d137      	bne.n	800f5c2 <prvTCPWindowTxCheckAck+0xfe>
 800f552:	69bb      	ldr	r3, [r7, #24]
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	441a      	add	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d130      	bne.n	800f5c2 <prvTCPWindowTxCheckAck+0xfe>
				{
					int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 800f560:	69bb      	ldr	r3, [r7, #24]
 800f562:	3310      	adds	r3, #16
 800f564:	4618      	mov	r0, r3
 800f566:	f7ff f9ce 	bl	800e906 <ulTimerGetAge>
 800f56a:	4603      	mov	r3, r0
 800f56c:	613b      	str	r3, [r7, #16]

					if( pxWindow->lSRTT >= mS )
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	429a      	cmp	r2, r3
 800f576:	db0e      	blt.n	800f596 <prvTCPWindowTxCheckAck+0xd2>
					{
						/* RTT becomes smaller: adapt slowly. */
						pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f57c:	4613      	mov	r3, r2
 800f57e:	00db      	lsls	r3, r3, #3
 800f580:	1a9a      	subs	r2, r3, r2
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	4413      	add	r3, r2
 800f586:	2b00      	cmp	r3, #0
 800f588:	da00      	bge.n	800f58c <prvTCPWindowTxCheckAck+0xc8>
 800f58a:	3307      	adds	r3, #7
 800f58c:	10db      	asrs	r3, r3, #3
 800f58e:	461a      	mov	r2, r3
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	639a      	str	r2, [r3, #56]	; 0x38
 800f594:	e00e      	b.n	800f5b4 <prvTCPWindowTxCheckAck+0xf0>
					}
					else
					{
						/* RTT becomes larger: adapt quicker */
						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f59a:	4613      	mov	r3, r2
 800f59c:	005b      	lsls	r3, r3, #1
 800f59e:	441a      	add	r2, r3
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	4413      	add	r3, r2
 800f5a4:	005b      	lsls	r3, r3, #1
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	da00      	bge.n	800f5ac <prvTCPWindowTxCheckAck+0xe8>
 800f5aa:	3307      	adds	r3, #7
 800f5ac:	10db      	asrs	r3, r3, #3
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	639a      	str	r2, [r3, #56]	; 0x38
					}

					/* Cap to the minimum of 50ms. */
					if( pxWindow->lSRTT < winSRTT_CAP_mS )
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5b8:	2b31      	cmp	r3, #49	; 0x31
 800f5ba:	dc02      	bgt.n	800f5c2 <prvTCPWindowTxCheckAck+0xfe>
					{
						pxWindow->lSRTT = winSRTT_CAP_mS;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	2232      	movs	r2, #50	; 0x32
 800f5c0:	639a      	str	r2, [r3, #56]	; 0x38
					}
				}

				/* Unlink it from the 3 queues, but do not destroy it (yet). */
				xDoUnlink = pdTRUE;
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	623b      	str	r3, [r7, #32]
			}

			/* pxSegment->u.bits.bAcked is now true.  Is it located at the left
			side of the transmission queue?  If so, it may be freed. */
			if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	6a1a      	ldr	r2, [r3, #32]
 800f5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d116      	bne.n	800f5fe <prvTCPWindowTxCheckAck+0x13a>
			{
				if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 800f5d0:	4b1d      	ldr	r3, [pc, #116]	; (800f648 <prvTCPWindowTxCheckAck+0x184>)
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	dd03      	ble.n	800f5e0 <prvTCPWindowTxCheckAck+0x11c>
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f5de:	2b17      	cmp	r3, #23
						ulLast - pxWindow->tx.ulFirstSequenceNumber,
						pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
				}

				/* Increase the left-hand value of the transmission window. */
				pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	6a1a      	ldr	r2, [r3, #32]
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	441a      	add	r2, r3
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	621a      	str	r2, [r3, #32]

				/* This function will return the number of bytes that the tail
				of txStream may be advanced. */
				ulBytesConfirmed += ulDataLength;
 800f5ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* All segments below tx.ulCurrentSequenceNumber may be freed. */
				vTCPWindowFree( pxSegment );
 800f5f4:	69b8      	ldr	r0, [r7, #24]
 800f5f6:	f7ff faf1 	bl	800ebdc <vTCPWindowFree>

				/* No need to unlink it any more. */
				xDoUnlink = pdFALSE;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	623b      	str	r3, [r7, #32]
			}

			if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 800f5fe:	6a3b      	ldr	r3, [r7, #32]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d008      	beq.n	800f616 <prvTCPWindowTxCheckAck+0x152>
 800f604:	69bb      	ldr	r3, [r7, #24]
 800f606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d004      	beq.n	800f616 <prvTCPWindowTxCheckAck+0x152>
			{
				/* Remove item from its queues. */
				uxListRemove( &pxSegment->xQueueItem );
 800f60c:	69bb      	ldr	r3, [r7, #24]
 800f60e:	3318      	adds	r3, #24
 800f610:	4618      	mov	r0, r3
 800f612:	f7f6 fc2a 	bl	8005e6a <uxListRemove>
			}

			ulSequenceNumber += ulDataLength;
 800f616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	4413      	add	r3, r2
 800f61c:	62bb      	str	r3, [r7, #40]	; 0x28
		for(
 800f61e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f620:	69fb      	ldr	r3, [r7, #28]
 800f622:	429a      	cmp	r2, r3
 800f624:	d00b      	beq.n	800f63e <prvTCPWindowTxCheckAck+0x17a>
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
 800f626:	6879      	ldr	r1, [r7, #4]
 800f628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f62a:	f7ff f91a 	bl	800e862 <xSequenceLessThan>
 800f62e:	4603      	mov	r3, r0
 800f630:	2b00      	cmp	r3, #0
 800f632:	f47f af58 	bne.w	800f4e6 <prvTCPWindowTxCheckAck+0x22>
 800f636:	e002      	b.n	800f63e <prvTCPWindowTxCheckAck+0x17a>
				break;
 800f638:	bf00      	nop
 800f63a:	e000      	b.n	800f63e <prvTCPWindowTxCheckAck+0x17a>
					break;
 800f63c:	bf00      	nop
		}

		return ulBytesConfirmed;
 800f63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f640:	4618      	mov	r0, r3
 800f642:	3730      	adds	r7, #48	; 0x30
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}
 800f648:	2000424c 	.word	0x2000424c

0800f64c <prvTCPWindowFastRetransmit>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t *pxWindow, uint32_t ulFirst )
	{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b086      	sub	sp, #24
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
 800f654:	6039      	str	r1, [r7, #0]
	const ListItem_t *pxIterator;
	const MiniListItem_t* pxEnd;
	TCPSegment_t *pxSegment;
	uint32_t ulCount = 0UL;
 800f656:	2300      	movs	r3, #0
 800f658:	613b      	str	r3, [r7, #16]

		/* A higher Tx block has been acknowledged.  Now iterate through the
		 xWaitQueue to find a possible condition for a FAST retransmission. */

		pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	3370      	adds	r3, #112	; 0x70
 800f65e:	60fb      	str	r3, [r7, #12]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	617b      	str	r3, [r7, #20]
 800f666:	e03b      	b.n	800f6e0 <prvTCPWindowFastRetransmit+0x94>
			 pxIterator != ( const ListItem_t * ) pxEnd; )
		{
			/* Get the owner, which is a TCP segment. */
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	60bb      	str	r3, [r7, #8]

			/* Hop to the next item before the current gets unlinked. */
			pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	617b      	str	r3, [r7, #20]

			/* Fast retransmission:
			When 3 packets with a higher sequence number have been acknowledged
			by the peer, it is very unlikely a current packet will ever arrive.
			It will be retransmitted far before the RTO. */
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	7d9b      	ldrb	r3, [r3, #22]
 800f678:	f003 0302 	and.w	r3, r3, #2
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d12e      	bne.n	800f6e0 <prvTCPWindowFastRetransmit+0x94>
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	6839      	ldr	r1, [r7, #0]
 800f688:	4618      	mov	r0, r3
 800f68a:	f7ff f8ea 	bl	800e862 <xSequenceLessThan>
 800f68e:	4603      	mov	r3, r0
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 800f690:	2b00      	cmp	r3, #0
 800f692:	d025      	beq.n	800f6e0 <prvTCPWindowFastRetransmit+0x94>
				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	7d5b      	ldrb	r3, [r3, #21]
 800f698:	3301      	adds	r3, #1
 800f69a:	b2da      	uxtb	r2, r3
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	755a      	strb	r2, [r3, #21]
				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	7d5b      	ldrb	r3, [r3, #21]
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 800f6a4:	2b03      	cmp	r3, #3
 800f6a6:	d11b      	bne.n	800f6e0 <prvTCPWindowFastRetransmit+0x94>
			{
				pxSegment->u.bits.ucTransmitCount = pdFALSE_UNSIGNED;
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	751a      	strb	r2, [r3, #20]

				/* Not clearing 'ucDupAckCount' yet as more SACK's might come in
				which might lead to a second fast rexmit. */
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 800f6ae:	4b11      	ldr	r3, [pc, #68]	; (800f6f4 <prvTCPWindowFastRetransmit+0xa8>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	db03      	blt.n	800f6be <prvTCPWindowFastRetransmit+0x72>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f6bc:	2b17      	cmp	r3, #23
						ulFirst - pxWindow->tx.ulFirstSequenceNumber ) );
					FreeRTOS_flush_logging( );
				}

				/* Remove it from xWaitQueue. */
				uxListRemove( &pxSegment->xQueueItem );
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	3318      	adds	r3, #24
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7f6 fbd1 	bl	8005e6a <uxListRemove>

				/* Add this segment to the priority queue so it gets
				retransmitted immediately. */
				vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	3318      	adds	r3, #24
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	4610      	mov	r0, r2
 800f6d6:	f7ff f8f9 	bl	800e8cc <vListInsertFifo>
				ulCount++;
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	3301      	adds	r3, #1
 800f6de:	613b      	str	r3, [r7, #16]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f6e0:	697a      	ldr	r2, [r7, #20]
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d1bf      	bne.n	800f668 <prvTCPWindowFastRetransmit+0x1c>
			}
		}

		return ulCount;
 800f6e8:	693b      	ldr	r3, [r7, #16]
	}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3718      	adds	r7, #24
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	2000424c 	.word	0x2000424c

0800f6f8 <ulTCPWindowTxAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxAck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b084      	sub	sp, #16
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	6039      	str	r1, [r7, #0]
	uint32_t ulFirstSequence, ulReturn;

		/* Receive a normal ACK. */

		ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6a1b      	ldr	r3, [r3, #32]
 800f706:	60bb      	str	r3, [r7, #8]

		if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 800f708:	68b9      	ldr	r1, [r7, #8]
 800f70a:	6838      	ldr	r0, [r7, #0]
 800f70c:	f7ff f898 	bl	800e840 <xSequenceLessThanOrEqual>
 800f710:	4603      	mov	r3, r0
 800f712:	2b00      	cmp	r3, #0
 800f714:	d002      	beq.n	800f71c <ulTCPWindowTxAck+0x24>
		{
			ulReturn = 0UL;
 800f716:	2300      	movs	r3, #0
 800f718:	60fb      	str	r3, [r7, #12]
 800f71a:	e005      	b.n	800f728 <ulTCPWindowTxAck+0x30>
		}
		else
		{
			ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 800f71c:	683a      	ldr	r2, [r7, #0]
 800f71e:	68b9      	ldr	r1, [r7, #8]
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f7ff fecf 	bl	800f4c4 <prvTCPWindowTxCheckAck>
 800f726:	60f8      	str	r0, [r7, #12]
		}

		return ulReturn;
 800f728:	68fb      	ldr	r3, [r7, #12]
	}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3710      	adds	r7, #16
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
	...

0800f734 <ulTCPWindowTxSack>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxSack( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 800f734:	b580      	push	{r7, lr}
 800f736:	b086      	sub	sp, #24
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	607a      	str	r2, [r7, #4]
	uint32_t ulAckCount = 0UL;
 800f740:	2300      	movs	r3, #0
 800f742:	617b      	str	r3, [r7, #20]
	uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	6a1b      	ldr	r3, [r3, #32]
 800f748:	613b      	str	r3, [r7, #16]

		/* Receive a SACK option. */
		ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 800f74a:	687a      	ldr	r2, [r7, #4]
 800f74c:	68b9      	ldr	r1, [r7, #8]
 800f74e:	68f8      	ldr	r0, [r7, #12]
 800f750:	f7ff feb8 	bl	800f4c4 <prvTCPWindowTxCheckAck>
 800f754:	6178      	str	r0, [r7, #20]
		prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 800f756:	68b9      	ldr	r1, [r7, #8]
 800f758:	68f8      	ldr	r0, [r7, #12]
 800f75a:	f7ff ff77 	bl	800f64c <prvTCPWindowFastRetransmit>

		if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 800f75e:	4b06      	ldr	r3, [pc, #24]	; (800f778 <ulTCPWindowTxSack+0x44>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	2b00      	cmp	r3, #0
 800f764:	dd03      	ble.n	800f76e <ulTCPWindowTxSack+0x3a>
 800f766:	6939      	ldr	r1, [r7, #16]
 800f768:	68b8      	ldr	r0, [r7, #8]
 800f76a:	f7ff f88c 	bl	800e886 <xSequenceGreaterThan>
				ulLast - pxWindow->tx.ulFirstSequenceNumber,
				pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
			FreeRTOS_flush_logging( );
		}

		return ulAckCount;
 800f76e:	697b      	ldr	r3, [r7, #20]
	}
 800f770:	4618      	mov	r0, r3
 800f772:	3718      	adds	r7, #24
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	2000424c 	.word	0x2000424c

0800f77c <vProcessGeneratedUDPPacket>:
	}
};
/*-----------------------------------------------------------*/

void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800f77c:	b5b0      	push	{r4, r5, r7, lr}
 800f77e:	b088      	sub	sp, #32
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
UDPPacket_t *pxUDPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	695b      	ldr	r3, [r3, #20]
 800f788:	60fb      	str	r3, [r7, #12]

	/* Map the UDP packet onto the start of the frame. */
	pxUDPPacket = ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	699b      	ldr	r3, [r3, #24]
 800f78e:	61bb      	str	r3, [r7, #24]

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 800f790:	69ba      	ldr	r2, [r7, #24]
 800f792:	f107 030c 	add.w	r3, r7, #12
 800f796:	4611      	mov	r1, r2
 800f798:	4618      	mov	r0, r3
 800f79a:	f7f9 f867 	bl	800886c <eARPGetCacheEntry>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	77fb      	strb	r3, [r7, #31]

	if( eReturned != eCantSendPacket )
 800f7a2:	7ffb      	ldrb	r3, [r7, #31]
 800f7a4:	2b02      	cmp	r3, #2
 800f7a6:	f000 8089 	beq.w	800f8bc <vProcessGeneratedUDPPacket+0x140>
	{
		if( eReturned == eARPCacheHit )
 800f7aa:	7ffb      	ldrb	r3, [r7, #31]
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	d174      	bne.n	800f89a <vProcessGeneratedUDPPacket+0x11e>
				uint8_t ucSocketOptions;
			#endif
			iptraceSENDING_UDP_PACKET( pxNetworkBuffer->ulIPAddress );

			/* Create short cuts to the data within the packet. */
			pxIPHeader = &( pxUDPPacket->xIPHeader );
 800f7b0:	69bb      	ldr	r3, [r7, #24]
 800f7b2:	330e      	adds	r3, #14
 800f7b4:	617b      	str	r3, [r7, #20]

		#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
			/* Is it possible that the packet is not actually a UDP packet
			after all, but an ICMP packet. */
			if( pxNetworkBuffer->usPort != ipPACKET_CONTAINS_ICMP_DATA )
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	8c1b      	ldrh	r3, [r3, #32]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d026      	beq.n	800f80c <vProcessGeneratedUDPPacket+0x90>
		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
			{
			UDPHeader_t *pxUDPHeader;

				pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 800f7be:	69bb      	ldr	r3, [r7, #24]
 800f7c0:	3322      	adds	r3, #34	; 0x22
 800f7c2:	613b      	str	r3, [r7, #16]

				pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	8c1a      	ldrh	r2, [r3, #32]
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	805a      	strh	r2, [r3, #2]
				pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800f7d0:	693b      	ldr	r3, [r7, #16]
 800f7d2:	801a      	strh	r2, [r3, #0]
				pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) );
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	69db      	ldr	r3, [r3, #28]
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	3308      	adds	r3, #8
 800f7dc:	b29a      	uxth	r2, r3
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	809a      	strh	r2, [r3, #4]
				pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	889b      	ldrh	r3, [r3, #4]
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	021b      	lsls	r3, r3, #8
 800f7ea:	b21a      	sxth	r2, r3
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	889b      	ldrh	r3, [r3, #4]
 800f7f0:	b29b      	uxth	r3, r3
 800f7f2:	0a1b      	lsrs	r3, r3, #8
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	b21b      	sxth	r3, r3
 800f7f8:	4313      	orrs	r3, r2
 800f7fa:	b21b      	sxth	r3, r3
 800f7fc:	b29a      	uxth	r2, r3
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	809a      	strh	r2, [r3, #4]
				pxUDPHeader->usChecksum = 0u;
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	2200      	movs	r2, #0
 800f806:	719a      	strb	r2, [r3, #6]
 800f808:	2200      	movs	r2, #0
 800f80a:	71da      	strb	r2, [r3, #7]
			*/
			/* Save options now, as they will be overwritten by memcpy */
			#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
				ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
			#endif
			memcpy( ( void *) &( pxUDPPacket->xEthernetHeader.xSourceAddress ), ( void * ) xDefaultPartUDPPacketHeader.ucBytes, sizeof( xDefaultPartUDPPacketHeader ) );
 800f80c:	69bb      	ldr	r3, [r7, #24]
 800f80e:	3306      	adds	r3, #6
 800f810:	4a32      	ldr	r2, [pc, #200]	; (800f8dc <vProcessGeneratedUDPPacket+0x160>)
 800f812:	461d      	mov	r5, r3
 800f814:	4614      	mov	r4, r2
 800f816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f818:	6028      	str	r0, [r5, #0]
 800f81a:	6069      	str	r1, [r5, #4]
 800f81c:	60aa      	str	r2, [r5, #8]
 800f81e:	60eb      	str	r3, [r5, #12]
 800f820:	cc03      	ldmia	r4!, {r0, r1}
 800f822:	6128      	str	r0, [r5, #16]
 800f824:	6169      	str	r1, [r5, #20]

		#if ipconfigSUPPORT_OUTGOING_PINGS == 1
			if( pxNetworkBuffer->usPort == ipPACKET_CONTAINS_ICMP_DATA )
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	8c1b      	ldrh	r3, [r3, #32]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d10a      	bne.n	800f844 <vProcessGeneratedUDPPacket+0xc8>
			{
				pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	2201      	movs	r2, #1
 800f832:	725a      	strb	r2, [r3, #9]
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) );
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	69db      	ldr	r3, [r3, #28]
 800f838:	b29b      	uxth	r3, r3
 800f83a:	3314      	adds	r3, #20
 800f83c:	b29a      	uxth	r2, r3
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	805a      	strh	r2, [r3, #2]
 800f842:	e006      	b.n	800f852 <vProcessGeneratedUDPPacket+0xd6>
			}
			else
		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
			{
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	69db      	ldr	r3, [r3, #28]
 800f848:	b29b      	uxth	r3, r3
 800f84a:	331c      	adds	r3, #28
 800f84c:	b29a      	uxth	r2, r3
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	805a      	strh	r2, [r3, #2]
			}

			/* The total transmit size adds on the Ethernet header. */
			pxNetworkBuffer->xDataLength = pxIPHeader->usLength + sizeof( EthernetHeader_t );
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	885b      	ldrh	r3, [r3, #2]
 800f856:	b29b      	uxth	r3, r3
 800f858:	f103 020e 	add.w	r2, r3, #14
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	61da      	str	r2, [r3, #28]
			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	885b      	ldrh	r3, [r3, #2]
 800f864:	b29b      	uxth	r3, r3
 800f866:	021b      	lsls	r3, r3, #8
 800f868:	b21a      	sxth	r2, r3
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	885b      	ldrh	r3, [r3, #2]
 800f86e:	b29b      	uxth	r3, r3
 800f870:	0a1b      	lsrs	r3, r3, #8
 800f872:	b29b      	uxth	r3, r3
 800f874:	b21b      	sxth	r3, r3
 800f876:	4313      	orrs	r3, r2
 800f878:	b21b      	sxth	r3, r3
 800f87a:	b29a      	uxth	r2, r3
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	805a      	strh	r2, [r3, #2]
			/* HT:endian: changed back to network endian */
			pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	695a      	ldr	r2, [r3, #20]
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	611a      	str	r2, [r3, #16]

			#if( ipconfigUSE_LLMNR == 1 )
			{
				/* LLMNR messages are typically used on a LAN and they're
				 * not supposed to cross routers */
				if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	695b      	ldr	r3, [r3, #20]
 800f88c:	4a14      	ldr	r2, [pc, #80]	; (800f8e0 <vProcessGeneratedUDPPacket+0x164>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	d114      	bne.n	800f8bc <vProcessGeneratedUDPPacket+0x140>
				{
					pxIPHeader->ucTimeToLive = 0x01;
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	2201      	movs	r2, #1
 800f896:	721a      	strb	r2, [r3, #8]
 800f898:	e010      	b.n	800f8bc <vProcessGeneratedUDPPacket+0x140>
					pxUDPPacket->xUDPHeader.usChecksum = 0u;
				}
			}
			#endif
		}
		else if( eReturned == eARPCacheMiss )
 800f89a:	7ffb      	ldrb	r3, [r7, #31]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d10b      	bne.n	800f8b8 <vProcessGeneratedUDPPacket+0x13c>
		{
			/* Add an entry to the ARP table with a null hardware address.
			This allows the ARP timer to know that an ARP reply is
			outstanding, and perform retransmissions if necessary. */
			vARPRefreshCacheEntry( NULL, ulIPAddress );
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	2000      	movs	r0, #0
 800f8a6:	f7f8 fee9 	bl	800867c <vARPRefreshCacheEntry>

			/* Generate an ARP for the required IP address. */
			iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->ulIPAddress );
			pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800f8aa:	68fa      	ldr	r2, [r7, #12]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	615a      	str	r2, [r3, #20]
			vARPGenerateRequestPacket( pxNetworkBuffer );
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f7f9 f935 	bl	8008b20 <vARPGenerateRequestPacket>
 800f8b6:	e001      	b.n	800f8bc <vProcessGeneratedUDPPacket+0x140>
		}
		else
		{
			/* The lookup indicated that an ARP request has already been
			sent out for the queried IP address. */
			eReturned = eCantSendPacket;
 800f8b8:	2302      	movs	r3, #2
 800f8ba:	77fb      	strb	r3, [r7, #31]
		}
	}

	if( eReturned != eCantSendPacket )
 800f8bc:	7ffb      	ldrb	r3, [r7, #31]
 800f8be:	2b02      	cmp	r3, #2
 800f8c0:	d004      	beq.n	800f8cc <vProcessGeneratedUDPPacket+0x150>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
			}
		}
		#endif

		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800f8c2:	2101      	movs	r1, #1
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f7f4 ffcf 	bl	8004868 <xNetworkInterfaceOutput>
	{
		/* The packet can't be sent (DHCP not completed?).  Just drop the
		packet. */
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
	}
}
 800f8ca:	e002      	b.n	800f8d2 <vProcessGeneratedUDPPacket+0x156>
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f000 f9a5 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
}
 800f8d2:	bf00      	nop
 800f8d4:	3720      	adds	r7, #32
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bdb0      	pop	{r4, r5, r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	200000a0 	.word	0x200000a0
 800f8e0:	fc0000e0 	.word	0xfc0000e0

0800f8e4 <xProcessReceivedUDPPacket>:
/*-----------------------------------------------------------*/

BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer, uint16_t usPort )
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b086      	sub	sp, #24
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	460b      	mov	r3, r1
 800f8ee:	807b      	strh	r3, [r7, #2]
BaseType_t xReturn = pdPASS;
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	617b      	str	r3, [r7, #20]
FreeRTOS_Socket_t *pxSocket;

UDPPacket_t *pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	699b      	ldr	r3, [r3, #24]
 800f8f8:	613b      	str	r3, [r7, #16]

	pxSocket = pxUDPSocketLookup( usPort );
 800f8fa:	887b      	ldrh	r3, [r7, #2]
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7fc f817 	bl	800b930 <pxUDPSocketLookup>
 800f902:	60f8      	str	r0, [r7, #12]

	if( pxSocket )
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d042      	beq.n	800f990 <xProcessReceivedUDPPacket+0xac>
	{

		/* When refreshing the ARP cache with received UDP packets we must be
		careful;  hundreds of broadcast messages may pass and if we're not
		handling them, no use to fill the ARP cache with those IP addresses. */
		vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	1d9a      	adds	r2, r3, #6
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f914:	4619      	mov	r1, r3
 800f916:	4610      	mov	r0, r2
 800f918:	f7f8 feb0 	bl	800867c <vARPRefreshCacheEntry>
				}
			}
		}
		#endif

		if( xReturn == pdPASS )
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	2b01      	cmp	r3, #1
 800f920:	d171      	bne.n	800fa06 <xProcessReceivedUDPPacket+0x122>
		{
			vTaskSuspendAll();
 800f922:	f7f7 fe99 	bl	8007658 <vTaskSuspendAll>
			{
				if( xReturn == pdPASS )
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	2b01      	cmp	r3, #1
 800f92a:	d10a      	bne.n	800f942 <xProcessReceivedUDPPacket+0x5e>
				{
					taskENTER_CRITICAL();
 800f92c:	f7f6 fbee 	bl	800610c <vPortEnterCritical>
					{
						/* Add the network packet to the list of packets to be
						processed by the socket. */
						vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	3338      	adds	r3, #56	; 0x38
 800f934:	687a      	ldr	r2, [r7, #4]
 800f936:	4611      	mov	r1, r2
 800f938:	4618      	mov	r0, r3
 800f93a:	f7f6 fa39 	bl	8005db0 <vListInsertEnd>
					}
					taskEXIT_CRITICAL();
 800f93e:	f7f6 fc13 	bl	8006168 <vPortExitCritical>
				}
			}
			xTaskResumeAll();
 800f942:	f7f7 fe97 	bl	8007674 <xTaskResumeAll>

			/* Set the socket's receive event */
			if( pxSocket->xEventGroup != NULL )
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d005      	beq.n	800f95a <xProcessReceivedUDPPacket+0x76>
			{
				xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	685b      	ldr	r3, [r3, #4]
 800f952:	2101      	movs	r1, #1
 800f954:	4618      	mov	r0, r3
 800f956:	f7f6 f923 	bl	8005ba0 <xEventGroupSetBits>
			}

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) )
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d00c      	beq.n	800f97c <xProcessReceivedUDPPacket+0x98>
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f966:	f003 0301 	and.w	r3, r3, #1
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d006      	beq.n	800f97c <xProcessReceivedUDPPacket+0x98>
				{
					xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_READ );
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	2101      	movs	r1, #1
 800f976:	4618      	mov	r0, r3
 800f978:	f7f6 f912 	bl	8005ba0 <xEventGroupSetBits>
			}
			#endif

			#if( ipconfigUSE_DHCP == 1 )
			{
				if( xIsDHCPSocket( pxSocket ) )
 800f97c:	68f8      	ldr	r0, [r7, #12]
 800f97e:	f7f9 f911 	bl	8008ba4 <xIsDHCPSocket>
 800f982:	4603      	mov	r3, r0
 800f984:	2b00      	cmp	r3, #0
 800f986:	d03e      	beq.n	800fa06 <xProcessReceivedUDPPacket+0x122>
				{
					xSendEventToIPTask( eDHCPEvent );
 800f988:	2004      	movs	r0, #4
 800f98a:	f7fa fd41 	bl	800a410 <xSendEventToIPTask>
 800f98e:	e03a      	b.n	800fa06 <xProcessReceivedUDPPacket+0x122>
		#if( ipconfigUSE_DNS == 1 )
			/* a DNS reply, check for the source port.  Although the DNS client
			does open a UDP socket to send a messages, this socket will be
			closed after a short timeout.  Messages that come late (after the
			socket is closed) will be treated here. */
			if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ipDNS_PORT )
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f994:	b29b      	uxth	r3, r3
 800f996:	021b      	lsls	r3, r3, #8
 800f998:	b21a      	sxth	r2, r3
 800f99a:	693b      	ldr	r3, [r7, #16]
 800f99c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f99e:	b29b      	uxth	r3, r3
 800f9a0:	0a1b      	lsrs	r3, r3, #8
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	b21b      	sxth	r3, r3
 800f9a6:	4313      	orrs	r3, r2
 800f9a8:	b21b      	sxth	r3, r3
 800f9aa:	2b35      	cmp	r3, #53	; 0x35
 800f9ac:	d10e      	bne.n	800f9cc <xProcessReceivedUDPPacket+0xe8>
			{
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	1d9a      	adds	r2, r3, #6
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	4610      	mov	r0, r2
 800f9bc:	f7f8 fe5e 	bl	800867c <vARPRefreshCacheEntry>
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f7f9 fe5d 	bl	8009680 <ulDNSHandlePacket>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	617b      	str	r3, [r7, #20]
 800f9ca:	e01c      	b.n	800fa06 <xProcessReceivedUDPPacket+0x122>
			else
		#endif

		#if( ipconfigUSE_LLMNR == 1 )
			/* a LLMNR request, check for the destination port. */
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 800f9cc:	887b      	ldrh	r3, [r7, #2]
 800f9ce:	f64e 3214 	movw	r2, #60180	; 0xeb14
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	d006      	beq.n	800f9e4 <xProcessReceivedUDPPacket+0x100>
				( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 800f9d6:	693b      	ldr	r3, [r7, #16]
 800f9d8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f9da:	b29b      	uxth	r3, r3
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 800f9dc:	f64e 3214 	movw	r2, #60180	; 0xeb14
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d10e      	bne.n	800fa02 <xProcessReceivedUDPPacket+0x11e>
			{
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	1d9a      	adds	r2, r3, #6
 800f9e8:	693b      	ldr	r3, [r7, #16]
 800f9ea:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	4610      	mov	r0, r2
 800f9f2:	f7f8 fe43 	bl	800867c <vARPRefreshCacheEntry>
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f7f9 fe42 	bl	8009680 <ulDNSHandlePacket>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	617b      	str	r3, [r7, #20]
 800fa00:	e001      	b.n	800fa06 <xProcessReceivedUDPPacket+0x122>
				xReturn = ( BaseType_t )ulNBNSHandlePacket( pxNetworkBuffer );
			}
			else
		#endif /* ipconfigUSE_NBNS */
		{
			xReturn = pdFAIL;
 800fa02:	2300      	movs	r3, #0
 800fa04:	617b      	str	r3, [r7, #20]
		}
	}

	return xReturn;
 800fa06:	697b      	ldr	r3, [r7, #20]
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3718      	adds	r7, #24
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
BaseType_t xReturn, x;

	/* Only initialise the buffers and their associated kernel objects if they
	have not been initialised before. */
	if( xNetworkBufferSemaphore == NULL )
 800fa16:	4b37      	ldr	r3, [pc, #220]	; (800faf4 <xNetworkBuffersInitialise+0xe4>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d15c      	bne.n	800fad8 <xNetworkBuffersInitialise+0xc8>
	{
		xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 800fa1e:	2119      	movs	r1, #25
 800fa20:	2019      	movs	r0, #25
 800fa22:	f7f6 ff23 	bl	800686c <xQueueCreateCountingSemaphore>
 800fa26:	4602      	mov	r2, r0
 800fa28:	4b32      	ldr	r3, [pc, #200]	; (800faf4 <xNetworkBuffersInitialise+0xe4>)
 800fa2a:	601a      	str	r2, [r3, #0]
		configASSERT( xNetworkBufferSemaphore );
 800fa2c:	4b31      	ldr	r3, [pc, #196]	; (800faf4 <xNetworkBuffersInitialise+0xe4>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d109      	bne.n	800fa48 <xNetworkBuffersInitialise+0x38>
 800fa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa38:	f383 8811 	msr	BASEPRI, r3
 800fa3c:	f3bf 8f6f 	isb	sy
 800fa40:	f3bf 8f4f 	dsb	sy
 800fa44:	607b      	str	r3, [r7, #4]
 800fa46:	e7fe      	b.n	800fa46 <xNetworkBuffersInitialise+0x36>
		#if ( configQUEUE_REGISTRY_SIZE > 0 )
		{
			vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 800fa48:	4b2a      	ldr	r3, [pc, #168]	; (800faf4 <xNetworkBuffersInitialise+0xe4>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	492a      	ldr	r1, [pc, #168]	; (800faf8 <xNetworkBuffersInitialise+0xe8>)
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7f7 fb7e 	bl	8007150 <vQueueAddToRegistry>
			vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
			vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
		}
		#endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

		if( xNetworkBufferSemaphore != NULL )
 800fa54:	4b27      	ldr	r3, [pc, #156]	; (800faf4 <xNetworkBuffersInitialise+0xe4>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d03d      	beq.n	800fad8 <xNetworkBuffersInitialise+0xc8>
		{
			vListInitialise( &xFreeBuffersList );
 800fa5c:	4827      	ldr	r0, [pc, #156]	; (800fafc <xNetworkBuffersInitialise+0xec>)
 800fa5e:	f7f6 f97a 	bl	8005d56 <vListInitialise>

			/* Initialise all the network buffers.  No storage is allocated to
			the buffers yet. */
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 800fa62:	2300      	movs	r3, #0
 800fa64:	60bb      	str	r3, [r7, #8]
 800fa66:	e031      	b.n	800facc <xNetworkBuffersInitialise+0xbc>
			{
				/* Initialise and set the owner of the buffer list items. */
				xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 800fa68:	4925      	ldr	r1, [pc, #148]	; (800fb00 <xNetworkBuffersInitialise+0xf0>)
 800fa6a:	68ba      	ldr	r2, [r7, #8]
 800fa6c:	4613      	mov	r3, r2
 800fa6e:	00db      	lsls	r3, r3, #3
 800fa70:	4413      	add	r3, r2
 800fa72:	009b      	lsls	r3, r3, #2
 800fa74:	440b      	add	r3, r1
 800fa76:	3318      	adds	r3, #24
 800fa78:	2200      	movs	r2, #0
 800fa7a:	601a      	str	r2, [r3, #0]
				vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	4613      	mov	r3, r2
 800fa80:	00db      	lsls	r3, r3, #3
 800fa82:	4413      	add	r3, r2
 800fa84:	009b      	lsls	r3, r3, #2
 800fa86:	4a1e      	ldr	r2, [pc, #120]	; (800fb00 <xNetworkBuffersInitialise+0xf0>)
 800fa88:	4413      	add	r3, r2
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7f6 f983 	bl	8005d96 <vListInitialiseItem>
				listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 800fa90:	68ba      	ldr	r2, [r7, #8]
 800fa92:	4613      	mov	r3, r2
 800fa94:	00db      	lsls	r3, r3, #3
 800fa96:	4413      	add	r3, r2
 800fa98:	009b      	lsls	r3, r3, #2
 800fa9a:	4a19      	ldr	r2, [pc, #100]	; (800fb00 <xNetworkBuffersInitialise+0xf0>)
 800fa9c:	1899      	adds	r1, r3, r2
 800fa9e:	4818      	ldr	r0, [pc, #96]	; (800fb00 <xNetworkBuffersInitialise+0xf0>)
 800faa0:	68ba      	ldr	r2, [r7, #8]
 800faa2:	4613      	mov	r3, r2
 800faa4:	00db      	lsls	r3, r3, #3
 800faa6:	4413      	add	r3, r2
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	4403      	add	r3, r0
 800faac:	330c      	adds	r3, #12
 800faae:	6019      	str	r1, [r3, #0]

				/* Currently, all buffers are available for use. */
				vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 800fab0:	68ba      	ldr	r2, [r7, #8]
 800fab2:	4613      	mov	r3, r2
 800fab4:	00db      	lsls	r3, r3, #3
 800fab6:	4413      	add	r3, r2
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	4a11      	ldr	r2, [pc, #68]	; (800fb00 <xNetworkBuffersInitialise+0xf0>)
 800fabc:	4413      	add	r3, r2
 800fabe:	4619      	mov	r1, r3
 800fac0:	480e      	ldr	r0, [pc, #56]	; (800fafc <xNetworkBuffersInitialise+0xec>)
 800fac2:	f7f6 f999 	bl	8005df8 <vListInsert>
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	3301      	adds	r3, #1
 800faca:	60bb      	str	r3, [r7, #8]
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	2b18      	cmp	r3, #24
 800fad0:	ddca      	ble.n	800fa68 <xNetworkBuffersInitialise+0x58>
			}

			uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 800fad2:	4b0c      	ldr	r3, [pc, #48]	; (800fb04 <xNetworkBuffersInitialise+0xf4>)
 800fad4:	2219      	movs	r2, #25
 800fad6:	601a      	str	r2, [r3, #0]
		}
	}

	if( xNetworkBufferSemaphore == NULL )
 800fad8:	4b06      	ldr	r3, [pc, #24]	; (800faf4 <xNetworkBuffersInitialise+0xe4>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d102      	bne.n	800fae6 <xNetworkBuffersInitialise+0xd6>
	{
		xReturn = pdFAIL;
 800fae0:	2300      	movs	r3, #0
 800fae2:	60fb      	str	r3, [r7, #12]
 800fae4:	e001      	b.n	800faea <xNetworkBuffersInitialise+0xda>
	}
	else
	{
		xReturn = pdPASS;
 800fae6:	2301      	movs	r3, #1
 800fae8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800faea:	68fb      	ldr	r3, [r7, #12]
}
 800faec:	4618      	mov	r0, r3
 800faee:	3710      	adds	r7, #16
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}
 800faf4:	200045ec 	.word	0x200045ec
 800faf8:	08010dfc 	.word	0x08010dfc
 800fafc:	20004250 	.word	0x20004250
 800fb00:	20004268 	.word	0x20004268
 800fb04:	20004264 	.word	0x20004264

0800fb08 <vReleaseNetworkBuffer>:
	return pucEthernetBuffer;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBuffer( uint8_t *pucEthernetBuffer )
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
	/* There is space before the Ethernet buffer in which a pointer to the
	network buffer that references this Ethernet buffer is stored.  Remove the
	space before freeing the buffer. */
	if( pucEthernetBuffer != NULL )
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d005      	beq.n	800fb22 <vReleaseNetworkBuffer+0x1a>
	{
		pucEthernetBuffer -= ipBUFFER_PADDING;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	3b0a      	subs	r3, #10
 800fb1a:	607b      	str	r3, [r7, #4]
		vPortFree( ( void * ) pucEthernetBuffer );
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f7f6 fcd1 	bl	80064c4 <vPortFree>
	}
}
 800fb22:	bf00      	nop
 800fb24:	3708      	adds	r7, #8
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
	...

0800fb2c <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b086      	sub	sp, #24
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]
NetworkBufferDescriptor_t *pxReturn = NULL;
 800fb36:	2300      	movs	r3, #0
 800fb38:	617b      	str	r3, [r7, #20]
size_t uxCount;

	if( ( xRequestedSizeBytes != 0u ) && ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d004      	beq.n	800fb4a <pxGetNetworkBufferWithDescriptor+0x1e>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2b45      	cmp	r3, #69	; 0x45
 800fb44:	d801      	bhi.n	800fb4a <pxGetNetworkBufferWithDescriptor+0x1e>
	{
		/* ARP packets can replace application packets, so the storage must be
		at least large enough to hold an ARP. */
		xRequestedSizeBytes = baMINIMAL_BUFFER_SIZE;
 800fb46:	2346      	movs	r3, #70	; 0x46
 800fb48:	607b      	str	r3, [r7, #4]
	}
	xRequestedSizeBytes += 2u;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	3302      	adds	r3, #2
 800fb4e:	607b      	str	r3, [r7, #4]
	if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1u ) ) != 0u )
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f003 0303 	and.w	r3, r3, #3
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d004      	beq.n	800fb64 <pxGetNetworkBufferWithDescriptor+0x38>
	{
		xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1u ) ) + 1u;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f043 0303 	orr.w	r3, r3, #3
 800fb60:	3301      	adds	r3, #1
 800fb62:	607b      	str	r3, [r7, #4]
	}

	/* If there is a semaphore available, there is a network buffer available. */
	if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 800fb64:	4b2a      	ldr	r3, [pc, #168]	; (800fc10 <pxGetNetworkBufferWithDescriptor+0xe4>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	6839      	ldr	r1, [r7, #0]
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7f7 f886 	bl	8006c7c <xQueueSemaphoreTake>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b01      	cmp	r3, #1
 800fb74:	d146      	bne.n	800fc04 <pxGetNetworkBufferWithDescriptor+0xd8>
	{
		/* Protect the structure as it is accessed from tasks and interrupts. */
		taskENTER_CRITICAL();
 800fb76:	f7f6 fac9 	bl	800610c <vPortEnterCritical>
		{
			pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 800fb7a:	4b26      	ldr	r3, [pc, #152]	; (800fc14 <pxGetNetworkBufferWithDescriptor+0xe8>)
 800fb7c:	68db      	ldr	r3, [r3, #12]
 800fb7e:	68db      	ldr	r3, [r3, #12]
 800fb80:	617b      	str	r3, [r7, #20]
			uxListRemove( &( pxReturn->xBufferListItem ) );
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7f6 f970 	bl	8005e6a <uxListRemove>
		}
		taskEXIT_CRITICAL();
 800fb8a:	f7f6 faed 	bl	8006168 <vPortExitCritical>

		/* Reading UBaseType_t, no critical section needed. */
		uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 800fb8e:	4b21      	ldr	r3, [pc, #132]	; (800fc14 <pxGetNetworkBufferWithDescriptor+0xe8>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	613b      	str	r3, [r7, #16]

		if( uxMinimumFreeNetworkBuffers > uxCount )
 800fb94:	4b20      	ldr	r3, [pc, #128]	; (800fc18 <pxGetNetworkBufferWithDescriptor+0xec>)
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d902      	bls.n	800fba4 <pxGetNetworkBufferWithDescriptor+0x78>
		{
			uxMinimumFreeNetworkBuffers = uxCount;
 800fb9e:	4a1e      	ldr	r2, [pc, #120]	; (800fc18 <pxGetNetworkBufferWithDescriptor+0xec>)
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	6013      	str	r3, [r2, #0]
		}

		/* Allocate storage of exactly the requested size to the buffer. */
		configASSERT( pxReturn->pucEthernetBuffer == NULL );
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	699b      	ldr	r3, [r3, #24]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d009      	beq.n	800fbc0 <pxGetNetworkBufferWithDescriptor+0x94>
 800fbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb0:	f383 8811 	msr	BASEPRI, r3
 800fbb4:	f3bf 8f6f 	isb	sy
 800fbb8:	f3bf 8f4f 	dsb	sy
 800fbbc:	60fb      	str	r3, [r7, #12]
 800fbbe:	e7fe      	b.n	800fbbe <pxGetNetworkBufferWithDescriptor+0x92>
		if( xRequestedSizeBytes > 0 )
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d01e      	beq.n	800fc04 <pxGetNetworkBufferWithDescriptor+0xd8>
		{
			/* Extra space is obtained so a pointer to the network buffer can
			be stored at the beginning of the buffer. */
			pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	330a      	adds	r3, #10
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7f6 fbb8 	bl	8006340 <pvPortMalloc>
 800fbd0:	4602      	mov	r2, r0
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	619a      	str	r2, [r3, #24]

			if( pxReturn->pucEthernetBuffer == NULL )
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	699b      	ldr	r3, [r3, #24]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d105      	bne.n	800fbea <pxGetNetworkBufferWithDescriptor+0xbe>
			{
				/* The attempt to allocate storage for the buffer payload failed,
				so the network buffer structure cannot be used and must be
				released. */
				vReleaseNetworkBufferAndDescriptor( pxReturn );
 800fbde:	6978      	ldr	r0, [r7, #20]
 800fbe0:	f000 f81c 	bl	800fc1c <vReleaseNetworkBufferAndDescriptor>
				pxReturn = NULL;
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	617b      	str	r3, [r7, #20]
 800fbe8:	e00c      	b.n	800fc04 <pxGetNetworkBufferWithDescriptor+0xd8>
			{
				/* Store a pointer to the network buffer structure in the
				buffer storage area, then move the buffer pointer on past the
				stored pointer so the pointer value is not overwritten by the
				application when the buffer is used. */
				*( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	699b      	ldr	r3, [r3, #24]
 800fbee:	697a      	ldr	r2, [r7, #20]
 800fbf0:	601a      	str	r2, [r3, #0]
				pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	699b      	ldr	r3, [r3, #24]
 800fbf6:	f103 020a 	add.w	r2, r3, #10
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	619a      	str	r2, [r3, #24]

				/* Store the actual size of the allocated buffer, which may be
				greater than the original requested size. */
				pxReturn->xDataLength = xRequestedSizeBytes;
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	687a      	ldr	r2, [r7, #4]
 800fc02:	61da      	str	r2, [r3, #28]
	else
	{
		iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
	}

	return pxReturn;
 800fc04:	697b      	ldr	r3, [r7, #20]
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3718      	adds	r7, #24
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	200045ec 	.word	0x200045ec
 800fc14:	20004250 	.word	0x20004250
 800fc18:	20004264 	.word	0x20004264

0800fc1c <vReleaseNetworkBufferAndDescriptor>:
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b084      	sub	sp, #16
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
	/* Ensure the buffer is returned to the list of free buffers before the
	counting semaphore is 'given' to say a buffer is available.  Release the
	storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
	IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
	MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
	vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	699b      	ldr	r3, [r3, #24]
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7ff ff6d 	bl	800fb08 <vReleaseNetworkBuffer>
	pxNetworkBuffer->pucEthernetBuffer = NULL;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2200      	movs	r2, #0
 800fc32:	619a      	str	r2, [r3, #24]

	taskENTER_CRITICAL();
 800fc34:	f7f6 fa6a 	bl	800610c <vPortEnterCritical>
	{
		xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	691b      	ldr	r3, [r3, #16]
 800fc3c:	4a0f      	ldr	r2, [pc, #60]	; (800fc7c <vReleaseNetworkBufferAndDescriptor+0x60>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	bf0c      	ite	eq
 800fc42:	2301      	moveq	r3, #1
 800fc44:	2300      	movne	r3, #0
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	60fb      	str	r3, [r7, #12]

		if( xListItemAlreadyInFreeList == pdFALSE )
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d104      	bne.n	800fc5a <vReleaseNetworkBufferAndDescriptor+0x3e>
		{
			vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	4619      	mov	r1, r3
 800fc54:	4809      	ldr	r0, [pc, #36]	; (800fc7c <vReleaseNetworkBufferAndDescriptor+0x60>)
 800fc56:	f7f6 f8ab 	bl	8005db0 <vListInsertEnd>
		}
	}
	taskEXIT_CRITICAL();
 800fc5a:	f7f6 fa85 	bl	8006168 <vPortExitCritical>

	if( xListItemAlreadyInFreeList == pdFALSE )
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d106      	bne.n	800fc72 <vReleaseNetworkBufferAndDescriptor+0x56>
	{
		xSemaphoreGive( xNetworkBufferSemaphore );
 800fc64:	4b06      	ldr	r3, [pc, #24]	; (800fc80 <vReleaseNetworkBufferAndDescriptor+0x64>)
 800fc66:	6818      	ldr	r0, [r3, #0]
 800fc68:	2300      	movs	r3, #0
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	2100      	movs	r1, #0
 800fc6e:	f7f6 fe2f 	bl	80068d0 <xQueueGenericSend>
	}

	iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
}
 800fc72:	bf00      	nop
 800fc74:	3710      	adds	r7, #16
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
 800fc7a:	bf00      	nop
 800fc7c:	20004250 	.word	0x20004250
 800fc80:	200045ec 	.word	0x200045ec

0800fc84 <main>:
static void MX_GPIO_Init(void);
void StartDefaultTask(void const * argument);
static void ipInitHandlerTask(void const * argument);

int main(void)
{
 800fc84:	b5b0      	push	{r4, r5, r7, lr}
 800fc86:	b088      	sub	sp, #32
 800fc88:	af02      	add	r7, sp, #8
  HAL_Init();
 800fc8a:	f7f0 fc39 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 800fc8e:	f000 f89d 	bl	800fdcc <SystemClock_Config>
  MX_GPIO_Init();
 800fc92:	f000 f90f 	bl	800feb4 <MX_GPIO_Init>

  /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
  are created in the vApplicationIPNetworkEventHook() hook function
  below.  The hook function is called when the network connects. */

  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800fc96:	4b0e      	ldr	r3, [pc, #56]	; (800fcd0 <main+0x4c>)
 800fc98:	1d3c      	adds	r4, r7, #4
 800fc9a:	461d      	mov	r5, r3
 800fc9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fca0:	682b      	ldr	r3, [r5, #0]
 800fca2:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800fca4:	1d3b      	adds	r3, r7, #4
 800fca6:	2100      	movs	r1, #0
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7f5 fe1c 	bl	80058e6 <osThreadCreate>
 800fcae:	4602      	mov	r2, r0
 800fcb0:	4b08      	ldr	r3, [pc, #32]	; (800fcd4 <main+0x50>)
 800fcb2:	601a      	str	r2, [r3, #0]
  xTaskCreate( ipInitHandlerTask, "IPINIT",  configIPINIT_TASK_STACK_SIZE , NULL, configMAX_PRIORITIES - 1, &xipInitTaskHandle );
 800fcb4:	4b08      	ldr	r3, [pc, #32]	; (800fcd8 <main+0x54>)
 800fcb6:	9301      	str	r3, [sp, #4]
 800fcb8:	2306      	movs	r3, #6
 800fcba:	9300      	str	r3, [sp, #0]
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fcc2:	4906      	ldr	r1, [pc, #24]	; (800fcdc <main+0x58>)
 800fcc4:	4806      	ldr	r0, [pc, #24]	; (800fce0 <main+0x5c>)
 800fcc6:	f7f7 fa95 	bl	80071f4 <xTaskCreate>

  osKernelStart();
 800fcca:	f7f5 fe05 	bl	80058d8 <osKernelStart>
  
  while (1)
 800fcce:	e7fe      	b.n	800fcce <main+0x4a>
 800fcd0:	08010e1c 	.word	0x08010e1c
 800fcd4:	2000549c 	.word	0x2000549c
 800fcd8:	20005428 	.word	0x20005428
 800fcdc:	08010e08 	.word	0x08010e08
 800fce0:	0800fce5 	.word	0x0800fce5

0800fce4 <ipInitHandlerTask>:

  }
}

static void ipInitHandlerTask(void const * argument)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b084      	sub	sp, #16
 800fce8:	af02      	add	r7, sp, #8
 800fcea:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
    ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 800fcec:	f04f 31ff 	mov.w	r1, #4294967295
 800fcf0:	2000      	movs	r0, #0
 800fcf2:	f7f8 fb05 	bl	8008300 <ulTaskNotifyTake>
	FreeRTOS_IPInit( ucIPAddress,
 800fcf6:	4b07      	ldr	r3, [pc, #28]	; (800fd14 <ipInitHandlerTask+0x30>)
 800fcf8:	9300      	str	r3, [sp, #0]
 800fcfa:	4b07      	ldr	r3, [pc, #28]	; (800fd18 <ipInitHandlerTask+0x34>)
 800fcfc:	4a07      	ldr	r2, [pc, #28]	; (800fd1c <ipInitHandlerTask+0x38>)
 800fcfe:	4908      	ldr	r1, [pc, #32]	; (800fd20 <ipInitHandlerTask+0x3c>)
 800fd00:	4808      	ldr	r0, [pc, #32]	; (800fd24 <ipInitHandlerTask+0x40>)
 800fd02:	f7fa fa9b 	bl	800a23c <FreeRTOS_IPInit>
				   ucNetMask,
				   ucGatewayAddress,
				   ucDNSServerAddress,
				   ucMACAddress );
	vTaskDelete( NULL );
 800fd06:	2000      	movs	r0, #0
 800fd08:	f7f7 fb9e 	bl	8007448 <vTaskDelete>
}
 800fd0c:	bf00      	nop
 800fd0e:	3708      	adds	r7, #8
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}
 800fd14:	200000b8 	.word	0x200000b8
 800fd18:	08010fa4 	.word	0x08010fa4
 800fd1c:	08010fa0 	.word	0x08010fa0
 800fd20:	08010f9c 	.word	0x08010f9c
 800fd24:	08010f98 	.word	0x08010f98

0800fd28 <vApplicationPingReplyHook>:

/*-----------------------------------------------------------*/

void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	4603      	mov	r3, r0
 800fd30:	460a      	mov	r2, r1
 800fd32:	71fb      	strb	r3, [r7, #7]
 800fd34:	4613      	mov	r3, r2
 800fd36:	80bb      	strh	r3, [r7, #4]
}
 800fd38:	bf00      	nop
 800fd3a:	370c      	adds	r7, #12
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr

0800fd44 <vApplicationIPNetworkEventHook>:


/* Called by FreeRTOS+TCP when the network connects or disconnects.  Disconnect
events are only received if implemented in the MAC driver. */
void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 800fd44:	b480      	push	{r7}
 800fd46:	b083      	sub	sp, #12
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	71fb      	strb	r3, [r7, #7]

}
 800fd4e:	bf00      	nop
 800fd50:	370c      	adds	r7, #12
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr
	...

0800fd5c <pcApplicationHostnameHook>:

const char *pcApplicationHostnameHook( void )
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	af00      	add	r7, sp, #0
	/* Assign the name "rtosdemo" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return mainHOST_NAME;
 800fd60:	4b02      	ldr	r3, [pc, #8]	; (800fd6c <pcApplicationHostnameHook+0x10>)
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr
 800fd6c:	08010e30 	.word	0x08010e30

0800fd70 <uxRand>:

UBaseType_t uxRand( void )
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	af00      	add	r7, sp, #0
	return( ( int ) ( rand() >> 16UL ) & 0x7fffUL );
 800fd74:	f000 fee8 	bl	8010b48 <rand>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	141b      	asrs	r3, r3, #16
 800fd7c:	f3c3 030e 	ubfx	r3, r3, #0, #15
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	bd80      	pop	{r7, pc}

0800fd84 <xApplicationDNSQueryHook>:



BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 800fd8c:	f7ff ffe6 	bl	800fd5c <pcApplicationHostnameHook>
 800fd90:	4603      	mov	r3, r0
 800fd92:	4619      	mov	r1, r3
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f000 ff11 	bl	8010bbc <strcasecmp>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d102      	bne.n	800fda6 <xApplicationDNSQueryHook+0x22>
	{
		xReturn = pdPASS;
 800fda0:	2301      	movs	r3, #1
 800fda2:	60fb      	str	r3, [r7, #12]
 800fda4:	e00b      	b.n	800fdbe <xApplicationDNSQueryHook+0x3a>
	}
	else if( strcasecmp( pcName, mainDEVICE_NICK_NAME ) == 0 )
 800fda6:	4908      	ldr	r1, [pc, #32]	; (800fdc8 <xApplicationDNSQueryHook+0x44>)
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f000 ff07 	bl	8010bbc <strcasecmp>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d102      	bne.n	800fdba <xApplicationDNSQueryHook+0x36>
	{
		xReturn = pdPASS;
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	60fb      	str	r3, [r7, #12]
 800fdb8:	e001      	b.n	800fdbe <xApplicationDNSQueryHook+0x3a>
	}
	else
	{
		xReturn = pdFAIL;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3710      	adds	r7, #16
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	08010e3c 	.word	0x08010e3c

0800fdcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b094      	sub	sp, #80	; 0x50
 800fdd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	60bb      	str	r3, [r7, #8]
 800fdd6:	4a33      	ldr	r2, [pc, #204]	; (800fea4 <SystemClock_Config+0xd8>)
 800fdd8:	4b32      	ldr	r3, [pc, #200]	; (800fea4 <SystemClock_Config+0xd8>)
 800fdda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fde0:	6413      	str	r3, [r2, #64]	; 0x40
 800fde2:	4b30      	ldr	r3, [pc, #192]	; (800fea4 <SystemClock_Config+0xd8>)
 800fde4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fde6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fdea:	60bb      	str	r3, [r7, #8]
 800fdec:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800fdee:	2300      	movs	r3, #0
 800fdf0:	607b      	str	r3, [r7, #4]
 800fdf2:	4a2d      	ldr	r2, [pc, #180]	; (800fea8 <SystemClock_Config+0xdc>)
 800fdf4:	4b2c      	ldr	r3, [pc, #176]	; (800fea8 <SystemClock_Config+0xdc>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fdfc:	6013      	str	r3, [r2, #0]
 800fdfe:	4b2a      	ldr	r3, [pc, #168]	; (800fea8 <SystemClock_Config+0xdc>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fe06:	607b      	str	r3, [r7, #4]
 800fe08:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800fe0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fe12:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800fe14:	2302      	movs	r3, #2
 800fe16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800fe18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fe1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800fe1e:	2304      	movs	r3, #4
 800fe20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800fe22:	2360      	movs	r3, #96	; 0x60
 800fe24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800fe26:	2306      	movs	r3, #6
 800fe28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800fe2a:	2304      	movs	r3, #4
 800fe2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800fe2e:	f107 0320 	add.w	r3, r7, #32
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7f1 ff2a 	bl	8001c8c <HAL_RCC_OscConfig>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d003      	beq.n	800fe46 <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800fe3e:	21d3      	movs	r1, #211	; 0xd3
 800fe40:	481a      	ldr	r0, [pc, #104]	; (800feac <SystemClock_Config+0xe0>)
 800fe42:	f000 f881 	bl	800ff48 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800fe46:	230f      	movs	r3, #15
 800fe48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800fe4a:	2302      	movs	r3, #2
 800fe4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800fe52:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800fe56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800fe5c:	f107 030c 	add.w	r3, r7, #12
 800fe60:	2101      	movs	r1, #1
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7f2 f954 	bl	8002110 <HAL_RCC_ClockConfig>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d003      	beq.n	800fe76 <SystemClock_Config+0xaa>
  {
    _Error_Handler(__FILE__, __LINE__);
 800fe6e:	21e1      	movs	r1, #225	; 0xe1
 800fe70:	480e      	ldr	r0, [pc, #56]	; (800feac <SystemClock_Config+0xe0>)
 800fe72:	f000 f869 	bl	800ff48 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800fe76:	f7f2 fb05 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 800fe7a:	4602      	mov	r2, r0
 800fe7c:	4b0c      	ldr	r3, [pc, #48]	; (800feb0 <SystemClock_Config+0xe4>)
 800fe7e:	fba3 2302 	umull	r2, r3, r3, r2
 800fe82:	099b      	lsrs	r3, r3, #6
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7f0 fc9e 	bl	80007c6 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800fe8a:	2004      	movs	r0, #4
 800fe8c:	f7f0 fca8 	bl	80007e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800fe90:	2200      	movs	r2, #0
 800fe92:	210f      	movs	r1, #15
 800fe94:	f04f 30ff 	mov.w	r0, #4294967295
 800fe98:	f7f0 fc6b 	bl	8000772 <HAL_NVIC_SetPriority>
}
 800fe9c:	bf00      	nop
 800fe9e:	3750      	adds	r7, #80	; 0x50
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	40023800 	.word	0x40023800
 800fea8:	40007000 	.word	0x40007000
 800feac:	08010e44 	.word	0x08010e44
 800feb0:	10624dd3 	.word	0x10624dd3

0800feb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800feb4:	b480      	push	{r7}
 800feb6:	b083      	sub	sp, #12
 800feb8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800feba:	2300      	movs	r3, #0
 800febc:	607b      	str	r3, [r7, #4]
 800febe:	4a10      	ldr	r2, [pc, #64]	; (800ff00 <MX_GPIO_Init+0x4c>)
 800fec0:	4b0f      	ldr	r3, [pc, #60]	; (800ff00 <MX_GPIO_Init+0x4c>)
 800fec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fec8:	6313      	str	r3, [r2, #48]	; 0x30
 800feca:	4b0d      	ldr	r3, [pc, #52]	; (800ff00 <MX_GPIO_Init+0x4c>)
 800fecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fed2:	607b      	str	r3, [r7, #4]
 800fed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fed6:	2300      	movs	r3, #0
 800fed8:	603b      	str	r3, [r7, #0]
 800feda:	4a09      	ldr	r2, [pc, #36]	; (800ff00 <MX_GPIO_Init+0x4c>)
 800fedc:	4b08      	ldr	r3, [pc, #32]	; (800ff00 <MX_GPIO_Init+0x4c>)
 800fede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fee0:	f043 0301 	orr.w	r3, r3, #1
 800fee4:	6313      	str	r3, [r2, #48]	; 0x30
 800fee6:	4b06      	ldr	r3, [pc, #24]	; (800ff00 <MX_GPIO_Init+0x4c>)
 800fee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feea:	f003 0301 	and.w	r3, r3, #1
 800feee:	603b      	str	r3, [r7, #0]
 800fef0:	683b      	ldr	r3, [r7, #0]

}
 800fef2:	bf00      	nop
 800fef4:	370c      	adds	r7, #12
 800fef6:	46bd      	mov	sp, r7
 800fef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefc:	4770      	bx	lr
 800fefe:	bf00      	nop
 800ff00:	40023800 	.word	0x40023800

0800ff04 <StartDefaultTask>:
/* USER CODE END 4 */

/* StartDefaultTask function */

void StartDefaultTask(void const * argument)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800ff0c:	f000 f936 	bl	801017c <MX_USB_DEVICE_Init>
  osDelay(2000);
 800ff10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ff14:	f7f5 fd0e 	bl	8005934 <osDelay>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800ff18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ff1c:	f7f5 fd0a 	bl	8005934 <osDelay>
 800ff20:	e7fa      	b.n	800ff18 <StartDefaultTask+0x14>
	...

0800ff24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	4a04      	ldr	r2, [pc, #16]	; (800ff44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d101      	bne.n	800ff3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800ff36:	f7f0 fb05 	bl	8000544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800ff3a:	bf00      	nop
 800ff3c:	3708      	adds	r7, #8
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	40010000 	.word	0x40010000

0800ff48 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800ff48:	b480      	push	{r7}
 800ff4a:	b083      	sub	sp, #12
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
 800ff50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800ff52:	e7fe      	b.n	800ff52 <_Error_Handler+0xa>

0800ff54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b082      	sub	sp, #8
 800ff58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	607b      	str	r3, [r7, #4]
 800ff5e:	4a25      	ldr	r2, [pc, #148]	; (800fff4 <HAL_MspInit+0xa0>)
 800ff60:	4b24      	ldr	r3, [pc, #144]	; (800fff4 <HAL_MspInit+0xa0>)
 800ff62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ff68:	6453      	str	r3, [r2, #68]	; 0x44
 800ff6a:	4b22      	ldr	r3, [pc, #136]	; (800fff4 <HAL_MspInit+0xa0>)
 800ff6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff72:	607b      	str	r3, [r7, #4]
 800ff74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ff76:	2300      	movs	r3, #0
 800ff78:	603b      	str	r3, [r7, #0]
 800ff7a:	4a1e      	ldr	r2, [pc, #120]	; (800fff4 <HAL_MspInit+0xa0>)
 800ff7c:	4b1d      	ldr	r3, [pc, #116]	; (800fff4 <HAL_MspInit+0xa0>)
 800ff7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff84:	6413      	str	r3, [r2, #64]	; 0x40
 800ff86:	4b1b      	ldr	r3, [pc, #108]	; (800fff4 <HAL_MspInit+0xa0>)
 800ff88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ff8e:	603b      	str	r3, [r7, #0]
 800ff90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ff92:	2003      	movs	r0, #3
 800ff94:	f7f0 fbe2 	bl	800075c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800ff98:	2200      	movs	r2, #0
 800ff9a:	2100      	movs	r1, #0
 800ff9c:	f06f 000b 	mvn.w	r0, #11
 800ffa0:	f7f0 fbe7 	bl	8000772 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	2100      	movs	r1, #0
 800ffa8:	f06f 000a 	mvn.w	r0, #10
 800ffac:	f7f0 fbe1 	bl	8000772 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	2100      	movs	r1, #0
 800ffb4:	f06f 0009 	mvn.w	r0, #9
 800ffb8:	f7f0 fbdb 	bl	8000772 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	2100      	movs	r1, #0
 800ffc0:	f06f 0004 	mvn.w	r0, #4
 800ffc4:	f7f0 fbd5 	bl	8000772 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800ffc8:	2200      	movs	r2, #0
 800ffca:	2100      	movs	r1, #0
 800ffcc:	f06f 0003 	mvn.w	r0, #3
 800ffd0:	f7f0 fbcf 	bl	8000772 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	210f      	movs	r1, #15
 800ffd8:	f06f 0001 	mvn.w	r0, #1
 800ffdc:	f7f0 fbc9 	bl	8000772 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	210f      	movs	r1, #15
 800ffe4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffe8:	f7f0 fbc3 	bl	8000772 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ffec:	bf00      	nop
 800ffee:	3708      	adds	r7, #8
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	40023800 	.word	0x40023800

0800fff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b08c      	sub	sp, #48	; 0x30
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8010000:	2300      	movs	r3, #0
 8010002:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8010004:	2300      	movs	r3, #0
 8010006:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8010008:	2200      	movs	r2, #0
 801000a:	6879      	ldr	r1, [r7, #4]
 801000c:	2019      	movs	r0, #25
 801000e:	f7f0 fbb0 	bl	8000772 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8010012:	2019      	movs	r0, #25
 8010014:	f7f0 fbc9 	bl	80007aa <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8010018:	2300      	movs	r3, #0
 801001a:	60fb      	str	r3, [r7, #12]
 801001c:	4a1e      	ldr	r2, [pc, #120]	; (8010098 <HAL_InitTick+0xa0>)
 801001e:	4b1e      	ldr	r3, [pc, #120]	; (8010098 <HAL_InitTick+0xa0>)
 8010020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010022:	f043 0301 	orr.w	r3, r3, #1
 8010026:	6453      	str	r3, [r2, #68]	; 0x44
 8010028:	4b1b      	ldr	r3, [pc, #108]	; (8010098 <HAL_InitTick+0xa0>)
 801002a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801002c:	f003 0301 	and.w	r3, r3, #1
 8010030:	60fb      	str	r3, [r7, #12]
 8010032:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010034:	f107 0210 	add.w	r2, r7, #16
 8010038:	f107 0314 	add.w	r3, r7, #20
 801003c:	4611      	mov	r1, r2
 801003e:	4618      	mov	r0, r3
 8010040:	f7f2 fa40 	bl	80024c4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8010044:	f7f2 fa2a 	bl	800249c <HAL_RCC_GetPCLK2Freq>
 8010048:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801004a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801004c:	4a13      	ldr	r2, [pc, #76]	; (801009c <HAL_InitTick+0xa4>)
 801004e:	fba2 2303 	umull	r2, r3, r2, r3
 8010052:	0c9b      	lsrs	r3, r3, #18
 8010054:	3b01      	subs	r3, #1
 8010056:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8010058:	4b11      	ldr	r3, [pc, #68]	; (80100a0 <HAL_InitTick+0xa8>)
 801005a:	4a12      	ldr	r2, [pc, #72]	; (80100a4 <HAL_InitTick+0xac>)
 801005c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 801005e:	4b10      	ldr	r3, [pc, #64]	; (80100a0 <HAL_InitTick+0xa8>)
 8010060:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010064:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8010066:	4a0e      	ldr	r2, [pc, #56]	; (80100a0 <HAL_InitTick+0xa8>)
 8010068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801006a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 801006c:	4b0c      	ldr	r3, [pc, #48]	; (80100a0 <HAL_InitTick+0xa8>)
 801006e:	2200      	movs	r2, #0
 8010070:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010072:	4b0b      	ldr	r3, [pc, #44]	; (80100a0 <HAL_InitTick+0xa8>)
 8010074:	2200      	movs	r2, #0
 8010076:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8010078:	4809      	ldr	r0, [pc, #36]	; (80100a0 <HAL_InitTick+0xa8>)
 801007a:	f7f2 fa55 	bl	8002528 <HAL_TIM_Base_Init>
 801007e:	4603      	mov	r3, r0
 8010080:	2b00      	cmp	r3, #0
 8010082:	d104      	bne.n	801008e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8010084:	4806      	ldr	r0, [pc, #24]	; (80100a0 <HAL_InitTick+0xa8>)
 8010086:	f7f2 fa84 	bl	8002592 <HAL_TIM_Base_Start_IT>
 801008a:	4603      	mov	r3, r0
 801008c:	e000      	b.n	8010090 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 801008e:	2301      	movs	r3, #1
}
 8010090:	4618      	mov	r0, r3
 8010092:	3730      	adds	r7, #48	; 0x30
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}
 8010098:	40023800 	.word	0x40023800
 801009c:	431bde83 	.word	0x431bde83
 80100a0:	200054a0 	.word	0x200054a0
 80100a4:	40010000 	.word	0x40010000

080100a8 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80100a8:	b480      	push	{r7}
 80100aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80100ac:	bf00      	nop
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr

080100b6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80100b6:	b480      	push	{r7}
 80100b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80100ba:	e7fe      	b.n	80100ba <HardFault_Handler+0x4>

080100bc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80100bc:	b480      	push	{r7}
 80100be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80100c0:	e7fe      	b.n	80100c0 <MemManage_Handler+0x4>

080100c2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80100c2:	b480      	push	{r7}
 80100c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80100c6:	e7fe      	b.n	80100c6 <BusFault_Handler+0x4>

080100c8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80100c8:	b480      	push	{r7}
 80100ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80100cc:	e7fe      	b.n	80100cc <UsageFault_Handler+0x4>

080100ce <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80100ce:	b480      	push	{r7}
 80100d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80100d2:	bf00      	nop
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr

080100dc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80100e0:	f7f5 fc3c 	bl	800595c <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80100e4:	bf00      	nop
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80100ec:	4802      	ldr	r0, [pc, #8]	; (80100f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80100ee:	f7f2 fa6b 	bl	80025c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80100f2:	bf00      	nop
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	200054a0 	.word	0x200054a0

080100fc <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8010100:	4802      	ldr	r0, [pc, #8]	; (801010c <OTG_FS_IRQHandler+0x10>)
 8010102:	f7f0 fe35 	bl	8000d70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8010106:	bf00      	nop
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop
 801010c:	20005700 	.word	0x20005700

08010110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010110:	b480      	push	{r7}
 8010112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010114:	4a16      	ldr	r2, [pc, #88]	; (8010170 <SystemInit+0x60>)
 8010116:	4b16      	ldr	r3, [pc, #88]	; (8010170 <SystemInit+0x60>)
 8010118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801011c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8010124:	4a13      	ldr	r2, [pc, #76]	; (8010174 <SystemInit+0x64>)
 8010126:	4b13      	ldr	r3, [pc, #76]	; (8010174 <SystemInit+0x64>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f043 0301 	orr.w	r3, r3, #1
 801012e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010130:	4b10      	ldr	r3, [pc, #64]	; (8010174 <SystemInit+0x64>)
 8010132:	2200      	movs	r2, #0
 8010134:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010136:	4a0f      	ldr	r2, [pc, #60]	; (8010174 <SystemInit+0x64>)
 8010138:	4b0e      	ldr	r3, [pc, #56]	; (8010174 <SystemInit+0x64>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8010140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010144:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010146:	4b0b      	ldr	r3, [pc, #44]	; (8010174 <SystemInit+0x64>)
 8010148:	4a0b      	ldr	r2, [pc, #44]	; (8010178 <SystemInit+0x68>)
 801014a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801014c:	4a09      	ldr	r2, [pc, #36]	; (8010174 <SystemInit+0x64>)
 801014e:	4b09      	ldr	r3, [pc, #36]	; (8010174 <SystemInit+0x64>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010156:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010158:	4b06      	ldr	r3, [pc, #24]	; (8010174 <SystemInit+0x64>)
 801015a:	2200      	movs	r2, #0
 801015c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801015e:	4b04      	ldr	r3, [pc, #16]	; (8010170 <SystemInit+0x60>)
 8010160:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010164:	609a      	str	r2, [r3, #8]
#endif
}
 8010166:	bf00      	nop
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr
 8010170:	e000ed00 	.word	0xe000ed00
 8010174:	40023800 	.word	0x40023800
 8010178:	24003010 	.word	0x24003010

0801017c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8010180:	2200      	movs	r2, #0
 8010182:	4906      	ldr	r1, [pc, #24]	; (801019c <MX_USB_DEVICE_Init+0x20>)
 8010184:	4806      	ldr	r0, [pc, #24]	; (80101a0 <MX_USB_DEVICE_Init+0x24>)
 8010186:	f7f4 fc2f 	bl	80049e8 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 801018a:	4906      	ldr	r1, [pc, #24]	; (80101a4 <MX_USB_DEVICE_Init+0x28>)
 801018c:	4804      	ldr	r0, [pc, #16]	; (80101a0 <MX_USB_DEVICE_Init+0x24>)
 801018e:	f7f4 fc56 	bl	8004a3e <USBD_RegisterClass>

  //USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);

  USBD_Start(&hUsbDeviceFS);
 8010192:	4803      	ldr	r0, [pc, #12]	; (80101a0 <MX_USB_DEVICE_Init+0x24>)
 8010194:	f7f4 fc6d 	bl	8004a72 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010198:	bf00      	nop
 801019a:	bd80      	pop	{r7, pc}
 801019c:	200000c4 	.word	0x200000c4
 80101a0:	200054dc 	.word	0x200054dc
 80101a4:	20000008 	.word	0x20000008

080101a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b088      	sub	sp, #32
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80101b8:	d139      	bne.n	801022e <HAL_PCD_MspInit+0x86>
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80101ba:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80101be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101c0:	2302      	movs	r3, #2
 80101c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101c4:	2300      	movs	r3, #0
 80101c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80101c8:	2303      	movs	r3, #3
 80101ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80101cc:	230a      	movs	r3, #10
 80101ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80101d0:	f107 030c 	add.w	r3, r7, #12
 80101d4:	4619      	mov	r1, r3
 80101d6:	4818      	ldr	r0, [pc, #96]	; (8010238 <HAL_PCD_MspInit+0x90>)
 80101d8:	f7f0 fb1e 	bl	8000818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80101dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80101e2:	2300      	movs	r3, #0
 80101e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101e6:	2300      	movs	r3, #0
 80101e8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80101ea:	f107 030c 	add.w	r3, r7, #12
 80101ee:	4619      	mov	r1, r3
 80101f0:	4811      	ldr	r0, [pc, #68]	; (8010238 <HAL_PCD_MspInit+0x90>)
 80101f2:	f7f0 fb11 	bl	8000818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80101f6:	4a11      	ldr	r2, [pc, #68]	; (801023c <HAL_PCD_MspInit+0x94>)
 80101f8:	4b10      	ldr	r3, [pc, #64]	; (801023c <HAL_PCD_MspInit+0x94>)
 80101fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010200:	6353      	str	r3, [r2, #52]	; 0x34
 8010202:	2300      	movs	r3, #0
 8010204:	60bb      	str	r3, [r7, #8]
 8010206:	4a0d      	ldr	r2, [pc, #52]	; (801023c <HAL_PCD_MspInit+0x94>)
 8010208:	4b0c      	ldr	r3, [pc, #48]	; (801023c <HAL_PCD_MspInit+0x94>)
 801020a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801020c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010210:	6453      	str	r3, [r2, #68]	; 0x44
 8010212:	4b0a      	ldr	r3, [pc, #40]	; (801023c <HAL_PCD_MspInit+0x94>)
 8010214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801021a:	60bb      	str	r3, [r7, #8]
 801021c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801021e:	2200      	movs	r2, #0
 8010220:	2105      	movs	r1, #5
 8010222:	2043      	movs	r0, #67	; 0x43
 8010224:	f7f0 faa5 	bl	8000772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010228:	2043      	movs	r0, #67	; 0x43
 801022a:	f7f0 fabe 	bl	80007aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801022e:	bf00      	nop
 8010230:	3720      	adds	r7, #32
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	40020000 	.word	0x40020000
 801023c:	40023800 	.word	0x40023800

08010240 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8010254:	4619      	mov	r1, r3
 8010256:	4610      	mov	r0, r2
 8010258:	f7f4 fc54 	bl	8004b04 <USBD_LL_SetupStage>
}
 801025c:	bf00      	nop
 801025e:	3708      	adds	r7, #8
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}

08010264 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	460b      	mov	r3, r1
 801026e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 8010276:	78fa      	ldrb	r2, [r7, #3]
 8010278:	6879      	ldr	r1, [r7, #4]
 801027a:	4613      	mov	r3, r2
 801027c:	00db      	lsls	r3, r3, #3
 801027e:	1a9b      	subs	r3, r3, r2
 8010280:	009b      	lsls	r3, r3, #2
 8010282:	440b      	add	r3, r1
 8010284:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8010288:	681a      	ldr	r2, [r3, #0]
 801028a:	78fb      	ldrb	r3, [r7, #3]
 801028c:	4619      	mov	r1, r3
 801028e:	f7f4 fc83 	bl	8004b98 <USBD_LL_DataOutStage>
}
 8010292:	bf00      	nop
 8010294:	3708      	adds	r7, #8
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}

0801029a <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 801029a:	b580      	push	{r7, lr}
 801029c:	b082      	sub	sp, #8
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
 80102a2:	460b      	mov	r3, r1
 80102a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 80102ac:	78fa      	ldrb	r2, [r7, #3]
 80102ae:	6879      	ldr	r1, [r7, #4]
 80102b0:	4613      	mov	r3, r2
 80102b2:	00db      	lsls	r3, r3, #3
 80102b4:	1a9b      	subs	r3, r3, r2
 80102b6:	009b      	lsls	r3, r3, #2
 80102b8:	440b      	add	r3, r1
 80102ba:	3344      	adds	r3, #68	; 0x44
 80102bc:	681a      	ldr	r2, [r3, #0]
 80102be:	78fb      	ldrb	r3, [r7, #3]
 80102c0:	4619      	mov	r1, r3
 80102c2:	f7f4 fcc4 	bl	8004c4e <USBD_LL_DataInStage>
}
 80102c6:	bf00      	nop
 80102c8:	3708      	adds	r7, #8
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}

080102ce <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80102ce:	b580      	push	{r7, lr}
 80102d0:	b082      	sub	sp, #8
 80102d2:	af00      	add	r7, sp, #0
 80102d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80102dc:	4618      	mov	r0, r3
 80102de:	f7f4 fdaa 	bl	8004e36 <USBD_LL_SOF>
}
 80102e2:	bf00      	nop
 80102e4:	3708      	adds	r7, #8
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}

080102ea <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80102ea:	b580      	push	{r7, lr}
 80102ec:	b084      	sub	sp, #16
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80102f2:	2301      	movs	r3, #1
 80102f4:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	68db      	ldr	r3, [r3, #12]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d002      	beq.n	8010304 <HAL_PCD_ResetCallback+0x1a>
 80102fe:	2b02      	cmp	r3, #2
 8010300:	d003      	beq.n	801030a <HAL_PCD_ResetCallback+0x20>
 8010302:	e005      	b.n	8010310 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8010304:	2300      	movs	r3, #0
 8010306:	73fb      	strb	r3, [r7, #15]
    break;
 8010308:	e005      	b.n	8010316 <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 801030a:	2301      	movs	r3, #1
 801030c:	73fb      	strb	r3, [r7, #15]
    break;
 801030e:	e002      	b.n	8010316 <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 8010310:	2301      	movs	r3, #1
 8010312:	73fb      	strb	r3, [r7, #15]
    break;    
 8010314:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 801031c:	7bfa      	ldrb	r2, [r7, #15]
 801031e:	4611      	mov	r1, r2
 8010320:	4618      	mov	r0, r3
 8010322:	f7f4 fd52 	bl	8004dca <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 801032c:	4618      	mov	r0, r3
 801032e:	f7f4 fd1d 	bl	8004d6c <USBD_LL_Reset>
}
 8010332:	bf00      	nop
 8010334:	3710      	adds	r7, #16
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
	...

0801033c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 801034a:	4618      	mov	r0, r3
 801034c:	f7f4 fd4d 	bl	8004dea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010358:	461a      	mov	r2, r3
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	f043 0301 	orr.w	r3, r3, #1
 8010368:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6a1b      	ldr	r3, [r3, #32]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d005      	beq.n	801037e <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010372:	4a05      	ldr	r2, [pc, #20]	; (8010388 <HAL_PCD_SuspendCallback+0x4c>)
 8010374:	4b04      	ldr	r3, [pc, #16]	; (8010388 <HAL_PCD_SuspendCallback+0x4c>)
 8010376:	691b      	ldr	r3, [r3, #16]
 8010378:	f043 0306 	orr.w	r3, r3, #6
 801037c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801037e:	bf00      	nop
 8010380:	3708      	adds	r7, #8
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	e000ed00 	.word	0xe000ed00

0801038c <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b082      	sub	sp, #8
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 801039a:	4618      	mov	r0, r3
 801039c:	f7f4 fd3a 	bl	8004e14 <USBD_LL_Resume>
}
 80103a0:	bf00      	nop
 80103a2:	3708      	adds	r7, #8
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}

080103a8 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	460b      	mov	r3, r1
 80103b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80103ba:	78fa      	ldrb	r2, [r7, #3]
 80103bc:	4611      	mov	r1, r2
 80103be:	4618      	mov	r0, r3
 80103c0:	f7f4 fd60 	bl	8004e84 <USBD_LL_IsoOUTIncomplete>
}
 80103c4:	bf00      	nop
 80103c6:	3708      	adds	r7, #8
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	460b      	mov	r3, r1
 80103d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80103de:	78fa      	ldrb	r2, [r7, #3]
 80103e0:	4611      	mov	r1, r2
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7f4 fd41 	bl	8004e6a <USBD_LL_IsoINIncomplete>
}
 80103e8:	bf00      	nop
 80103ea:	3708      	adds	r7, #8
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80103fe:	4618      	mov	r0, r3
 8010400:	f7f4 fd4d 	bl	8004e9e <USBD_LL_DevConnected>
}
 8010404:	bf00      	nop
 8010406:	3708      	adds	r7, #8
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}

0801040c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 801041a:	4618      	mov	r0, r3
 801041c:	f7f4 fd4a 	bl	8004eb4 <USBD_LL_DevDisconnected>
}
 8010420:	bf00      	nop
 8010422:	3708      	adds	r7, #8
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d147      	bne.n	80104c8 <USBD_LL_Init+0xa0>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010438:	4a26      	ldr	r2, [pc, #152]	; (80104d4 <USBD_LL_Init+0xac>)
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	4a24      	ldr	r2, [pc, #144]	; (80104d4 <USBD_LL_Init+0xac>)
 8010444:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010448:	4b22      	ldr	r3, [pc, #136]	; (80104d4 <USBD_LL_Init+0xac>)
 801044a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801044e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 5;
 8010450:	4b20      	ldr	r3, [pc, #128]	; (80104d4 <USBD_LL_Init+0xac>)
 8010452:	2205      	movs	r2, #5
 8010454:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010456:	4b1f      	ldr	r3, [pc, #124]	; (80104d4 <USBD_LL_Init+0xac>)
 8010458:	2202      	movs	r2, #2
 801045a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801045c:	4b1d      	ldr	r3, [pc, #116]	; (80104d4 <USBD_LL_Init+0xac>)
 801045e:	2200      	movs	r2, #0
 8010460:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8010462:	4b1c      	ldr	r3, [pc, #112]	; (80104d4 <USBD_LL_Init+0xac>)
 8010464:	2200      	movs	r2, #0
 8010466:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010468:	4b1a      	ldr	r3, [pc, #104]	; (80104d4 <USBD_LL_Init+0xac>)
 801046a:	2202      	movs	r2, #2
 801046c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801046e:	4b19      	ldr	r3, [pc, #100]	; (80104d4 <USBD_LL_Init+0xac>)
 8010470:	2201      	movs	r2, #1
 8010472:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010474:	4b17      	ldr	r3, [pc, #92]	; (80104d4 <USBD_LL_Init+0xac>)
 8010476:	2200      	movs	r2, #0
 8010478:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801047a:	4b16      	ldr	r3, [pc, #88]	; (80104d4 <USBD_LL_Init+0xac>)
 801047c:	2200      	movs	r2, #0
 801047e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8010480:	4b14      	ldr	r3, [pc, #80]	; (80104d4 <USBD_LL_Init+0xac>)
 8010482:	2201      	movs	r2, #1
 8010484:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010486:	4b13      	ldr	r3, [pc, #76]	; (80104d4 <USBD_LL_Init+0xac>)
 8010488:	2200      	movs	r2, #0
 801048a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801048c:	4811      	ldr	r0, [pc, #68]	; (80104d4 <USBD_LL_Init+0xac>)
 801048e:	f7f0 fb45 	bl	8000b1c <HAL_PCD_Init>
 8010492:	4603      	mov	r3, r0
 8010494:	2b00      	cmp	r3, #0
 8010496:	d004      	beq.n	80104a2 <USBD_LL_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8010498:	f240 1153 	movw	r1, #339	; 0x153
 801049c:	480e      	ldr	r0, [pc, #56]	; (80104d8 <USBD_LL_Init+0xb0>)
 801049e:	f7ff fd53 	bl	800ff48 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80104a2:	2180      	movs	r1, #128	; 0x80
 80104a4:	480b      	ldr	r0, [pc, #44]	; (80104d4 <USBD_LL_Init+0xac>)
 80104a6:	f7f1 fbdf 	bl	8001c68 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80104aa:	2240      	movs	r2, #64	; 0x40
 80104ac:	2100      	movs	r1, #0
 80104ae:	4809      	ldr	r0, [pc, #36]	; (80104d4 <USBD_LL_Init+0xac>)
 80104b0:	f7f1 fb8f 	bl	8001bd2 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80104b4:	2280      	movs	r2, #128	; 0x80
 80104b6:	2101      	movs	r1, #1
 80104b8:	4806      	ldr	r0, [pc, #24]	; (80104d4 <USBD_LL_Init+0xac>)
 80104ba:	f7f1 fb8a 	bl	8001bd2 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 0x40);
 80104be:	2240      	movs	r2, #64	; 0x40
 80104c0:	2102      	movs	r1, #2
 80104c2:	4804      	ldr	r0, [pc, #16]	; (80104d4 <USBD_LL_Init+0xac>)
 80104c4:	f7f1 fb85 	bl	8001bd2 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80104c8:	2300      	movs	r3, #0
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3708      	adds	r7, #8
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	20005700 	.word	0x20005700
 80104d8:	08010e54 	.word	0x08010e54

080104dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104e4:	2300      	movs	r3, #0
 80104e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104e8:	2300      	movs	r3, #0
 80104ea:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7f0 fc19 	bl	8000d2a <HAL_PCD_Start>
 80104f8:	4603      	mov	r3, r0
 80104fa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80104fc:	7bbb      	ldrb	r3, [r7, #14]
 80104fe:	2b03      	cmp	r3, #3
 8010500:	d816      	bhi.n	8010530 <USBD_LL_Start+0x54>
 8010502:	a201      	add	r2, pc, #4	; (adr r2, 8010508 <USBD_LL_Start+0x2c>)
 8010504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010508:	08010519 	.word	0x08010519
 801050c:	0801051f 	.word	0x0801051f
 8010510:	08010525 	.word	0x08010525
 8010514:	0801052b 	.word	0x0801052b
    case HAL_OK :
      usb_status = USBD_OK;
 8010518:	2300      	movs	r3, #0
 801051a:	73fb      	strb	r3, [r7, #15]
    break;
 801051c:	e00b      	b.n	8010536 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801051e:	2302      	movs	r3, #2
 8010520:	73fb      	strb	r3, [r7, #15]
    break;
 8010522:	e008      	b.n	8010536 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010524:	2301      	movs	r3, #1
 8010526:	73fb      	strb	r3, [r7, #15]
    break;
 8010528:	e005      	b.n	8010536 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801052a:	2302      	movs	r3, #2
 801052c:	73fb      	strb	r3, [r7, #15]
    break;
 801052e:	e002      	b.n	8010536 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8010530:	2302      	movs	r3, #2
 8010532:	73fb      	strb	r3, [r7, #15]
    break;
 8010534:	bf00      	nop
  }
  return usb_status;
 8010536:	7bfb      	ldrb	r3, [r7, #15]
}
 8010538:	4618      	mov	r0, r3
 801053a:	3710      	adds	r7, #16
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}

08010540 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b084      	sub	sp, #16
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	4608      	mov	r0, r1
 801054a:	4611      	mov	r1, r2
 801054c:	461a      	mov	r2, r3
 801054e:	4603      	mov	r3, r0
 8010550:	70fb      	strb	r3, [r7, #3]
 8010552:	460b      	mov	r3, r1
 8010554:	70bb      	strb	r3, [r7, #2]
 8010556:	4613      	mov	r3, r2
 8010558:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801055a:	2300      	movs	r3, #0
 801055c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801055e:	2300      	movs	r3, #0
 8010560:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8010568:	78bb      	ldrb	r3, [r7, #2]
 801056a:	883a      	ldrh	r2, [r7, #0]
 801056c:	78f9      	ldrb	r1, [r7, #3]
 801056e:	f7f1 f8aa 	bl	80016c6 <HAL_PCD_EP_Open>
 8010572:	4603      	mov	r3, r0
 8010574:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010576:	7bbb      	ldrb	r3, [r7, #14]
 8010578:	2b03      	cmp	r3, #3
 801057a:	d817      	bhi.n	80105ac <USBD_LL_OpenEP+0x6c>
 801057c:	a201      	add	r2, pc, #4	; (adr r2, 8010584 <USBD_LL_OpenEP+0x44>)
 801057e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010582:	bf00      	nop
 8010584:	08010595 	.word	0x08010595
 8010588:	0801059b 	.word	0x0801059b
 801058c:	080105a1 	.word	0x080105a1
 8010590:	080105a7 	.word	0x080105a7
    case HAL_OK :
      usb_status = USBD_OK;
 8010594:	2300      	movs	r3, #0
 8010596:	73fb      	strb	r3, [r7, #15]
    break;
 8010598:	e00b      	b.n	80105b2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801059a:	2302      	movs	r3, #2
 801059c:	73fb      	strb	r3, [r7, #15]
    break;
 801059e:	e008      	b.n	80105b2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80105a0:	2301      	movs	r3, #1
 80105a2:	73fb      	strb	r3, [r7, #15]
    break;
 80105a4:	e005      	b.n	80105b2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80105a6:	2302      	movs	r3, #2
 80105a8:	73fb      	strb	r3, [r7, #15]
    break;
 80105aa:	e002      	b.n	80105b2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80105ac:	2302      	movs	r3, #2
 80105ae:	73fb      	strb	r3, [r7, #15]
    break;
 80105b0:	bf00      	nop
  }
  return usb_status;
 80105b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	3710      	adds	r7, #16
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	460b      	mov	r3, r1
 80105c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105c8:	2300      	movs	r3, #0
 80105ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105cc:	2300      	movs	r3, #0
 80105ce:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80105d6:	78fa      	ldrb	r2, [r7, #3]
 80105d8:	4611      	mov	r1, r2
 80105da:	4618      	mov	r0, r3
 80105dc:	f7f1 f8db 	bl	8001796 <HAL_PCD_EP_Close>
 80105e0:	4603      	mov	r3, r0
 80105e2:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 80105e4:	7bbb      	ldrb	r3, [r7, #14]
 80105e6:	2b03      	cmp	r3, #3
 80105e8:	d816      	bhi.n	8010618 <USBD_LL_CloseEP+0x5c>
 80105ea:	a201      	add	r2, pc, #4	; (adr r2, 80105f0 <USBD_LL_CloseEP+0x34>)
 80105ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105f0:	08010601 	.word	0x08010601
 80105f4:	08010607 	.word	0x08010607
 80105f8:	0801060d 	.word	0x0801060d
 80105fc:	08010613 	.word	0x08010613
    case HAL_OK :
      usb_status = USBD_OK;
 8010600:	2300      	movs	r3, #0
 8010602:	73fb      	strb	r3, [r7, #15]
    break;
 8010604:	e00b      	b.n	801061e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010606:	2302      	movs	r3, #2
 8010608:	73fb      	strb	r3, [r7, #15]
    break;
 801060a:	e008      	b.n	801061e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801060c:	2301      	movs	r3, #1
 801060e:	73fb      	strb	r3, [r7, #15]
    break;
 8010610:	e005      	b.n	801061e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010612:	2302      	movs	r3, #2
 8010614:	73fb      	strb	r3, [r7, #15]
    break;
 8010616:	e002      	b.n	801061e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010618:	2302      	movs	r3, #2
 801061a:	73fb      	strb	r3, [r7, #15]
    break;
 801061c:	bf00      	nop
  }
  return usb_status;  
 801061e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010620:	4618      	mov	r0, r3
 8010622:	3710      	adds	r7, #16
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b084      	sub	sp, #16
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	460b      	mov	r3, r1
 8010632:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010634:	2300      	movs	r3, #0
 8010636:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010638:	2300      	movs	r3, #0
 801063a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010642:	78fa      	ldrb	r2, [r7, #3]
 8010644:	4611      	mov	r1, r2
 8010646:	4618      	mov	r0, r3
 8010648:	f7f1 f99b 	bl	8001982 <HAL_PCD_EP_SetStall>
 801064c:	4603      	mov	r3, r0
 801064e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010650:	7bbb      	ldrb	r3, [r7, #14]
 8010652:	2b03      	cmp	r3, #3
 8010654:	d816      	bhi.n	8010684 <USBD_LL_StallEP+0x5c>
 8010656:	a201      	add	r2, pc, #4	; (adr r2, 801065c <USBD_LL_StallEP+0x34>)
 8010658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801065c:	0801066d 	.word	0x0801066d
 8010660:	08010673 	.word	0x08010673
 8010664:	08010679 	.word	0x08010679
 8010668:	0801067f 	.word	0x0801067f
    case HAL_OK :
      usb_status = USBD_OK;
 801066c:	2300      	movs	r3, #0
 801066e:	73fb      	strb	r3, [r7, #15]
    break;
 8010670:	e00b      	b.n	801068a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010672:	2302      	movs	r3, #2
 8010674:	73fb      	strb	r3, [r7, #15]
    break;
 8010676:	e008      	b.n	801068a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010678:	2301      	movs	r3, #1
 801067a:	73fb      	strb	r3, [r7, #15]
    break;
 801067c:	e005      	b.n	801068a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801067e:	2302      	movs	r3, #2
 8010680:	73fb      	strb	r3, [r7, #15]
    break;
 8010682:	e002      	b.n	801068a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010684:	2302      	movs	r3, #2
 8010686:	73fb      	strb	r3, [r7, #15]
    break;
 8010688:	bf00      	nop
  }
  return usb_status;  
 801068a:	7bfb      	ldrb	r3, [r7, #15]
}
 801068c:	4618      	mov	r0, r3
 801068e:	3710      	adds	r7, #16
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}

08010694 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b084      	sub	sp, #16
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	460b      	mov	r3, r1
 801069e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106a0:	2300      	movs	r3, #0
 80106a2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106a4:	2300      	movs	r3, #0
 80106a6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80106ae:	78fa      	ldrb	r2, [r7, #3]
 80106b0:	4611      	mov	r1, r2
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7f1 f9c0 	bl	8001a38 <HAL_PCD_EP_ClrStall>
 80106b8:	4603      	mov	r3, r0
 80106ba:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80106bc:	7bbb      	ldrb	r3, [r7, #14]
 80106be:	2b03      	cmp	r3, #3
 80106c0:	d816      	bhi.n	80106f0 <USBD_LL_ClearStallEP+0x5c>
 80106c2:	a201      	add	r2, pc, #4	; (adr r2, 80106c8 <USBD_LL_ClearStallEP+0x34>)
 80106c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106c8:	080106d9 	.word	0x080106d9
 80106cc:	080106df 	.word	0x080106df
 80106d0:	080106e5 	.word	0x080106e5
 80106d4:	080106eb 	.word	0x080106eb
    case HAL_OK :
      usb_status = USBD_OK;
 80106d8:	2300      	movs	r3, #0
 80106da:	73fb      	strb	r3, [r7, #15]
    break;
 80106dc:	e00b      	b.n	80106f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80106de:	2302      	movs	r3, #2
 80106e0:	73fb      	strb	r3, [r7, #15]
    break;
 80106e2:	e008      	b.n	80106f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80106e4:	2301      	movs	r3, #1
 80106e6:	73fb      	strb	r3, [r7, #15]
    break;
 80106e8:	e005      	b.n	80106f6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80106ea:	2302      	movs	r3, #2
 80106ec:	73fb      	strb	r3, [r7, #15]
    break;
 80106ee:	e002      	b.n	80106f6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80106f0:	2302      	movs	r3, #2
 80106f2:	73fb      	strb	r3, [r7, #15]
    break;
 80106f4:	bf00      	nop
  }
  return usb_status; 
 80106f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3710      	adds	r7, #16
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010700:	b480      	push	{r7}
 8010702:	b085      	sub	sp, #20
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	460b      	mov	r3, r1
 801070a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010712:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8010714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010718:	2b00      	cmp	r3, #0
 801071a:	da0b      	bge.n	8010734 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801071c:	78fb      	ldrb	r3, [r7, #3]
 801071e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010722:	68f9      	ldr	r1, [r7, #12]
 8010724:	4613      	mov	r3, r2
 8010726:	00db      	lsls	r3, r3, #3
 8010728:	1a9b      	subs	r3, r3, r2
 801072a:	009b      	lsls	r3, r3, #2
 801072c:	440b      	add	r3, r1
 801072e:	333a      	adds	r3, #58	; 0x3a
 8010730:	781b      	ldrb	r3, [r3, #0]
 8010732:	e00b      	b.n	801074c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8010734:	78fb      	ldrb	r3, [r7, #3]
 8010736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801073a:	68f9      	ldr	r1, [r7, #12]
 801073c:	4613      	mov	r3, r2
 801073e:	00db      	lsls	r3, r3, #3
 8010740:	1a9b      	subs	r3, r3, r2
 8010742:	009b      	lsls	r3, r3, #2
 8010744:	440b      	add	r3, r1
 8010746:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 801074a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801074c:	4618      	mov	r0, r3
 801074e:	3714      	adds	r7, #20
 8010750:	46bd      	mov	sp, r7
 8010752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010756:	4770      	bx	lr

08010758 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b084      	sub	sp, #16
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	460b      	mov	r3, r1
 8010762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010764:	2300      	movs	r3, #0
 8010766:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010768:	2300      	movs	r3, #0
 801076a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010772:	78fa      	ldrb	r2, [r7, #3]
 8010774:	4611      	mov	r1, r2
 8010776:	4618      	mov	r0, r3
 8010778:	f7f0 ff84 	bl	8001684 <HAL_PCD_SetAddress>
 801077c:	4603      	mov	r3, r0
 801077e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8010780:	7bbb      	ldrb	r3, [r7, #14]
 8010782:	2b03      	cmp	r3, #3
 8010784:	d816      	bhi.n	80107b4 <USBD_LL_SetUSBAddress+0x5c>
 8010786:	a201      	add	r2, pc, #4	; (adr r2, 801078c <USBD_LL_SetUSBAddress+0x34>)
 8010788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801078c:	0801079d 	.word	0x0801079d
 8010790:	080107a3 	.word	0x080107a3
 8010794:	080107a9 	.word	0x080107a9
 8010798:	080107af 	.word	0x080107af
    case HAL_OK :
      usb_status = USBD_OK;
 801079c:	2300      	movs	r3, #0
 801079e:	73fb      	strb	r3, [r7, #15]
    break;
 80107a0:	e00b      	b.n	80107ba <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80107a2:	2302      	movs	r3, #2
 80107a4:	73fb      	strb	r3, [r7, #15]
    break;
 80107a6:	e008      	b.n	80107ba <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80107a8:	2301      	movs	r3, #1
 80107aa:	73fb      	strb	r3, [r7, #15]
    break;
 80107ac:	e005      	b.n	80107ba <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80107ae:	2302      	movs	r3, #2
 80107b0:	73fb      	strb	r3, [r7, #15]
    break;
 80107b2:	e002      	b.n	80107ba <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80107b4:	2302      	movs	r3, #2
 80107b6:	73fb      	strb	r3, [r7, #15]
    break;
 80107b8:	bf00      	nop
  }
  return usb_status;  
 80107ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80107bc:	4618      	mov	r0, r3
 80107be:	3710      	adds	r7, #16
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}

080107c4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b086      	sub	sp, #24
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	60f8      	str	r0, [r7, #12]
 80107cc:	607a      	str	r2, [r7, #4]
 80107ce:	461a      	mov	r2, r3
 80107d0:	460b      	mov	r3, r1
 80107d2:	72fb      	strb	r3, [r7, #11]
 80107d4:	4613      	mov	r3, r2
 80107d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107d8:	2300      	movs	r3, #0
 80107da:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107dc:	2300      	movs	r3, #0
 80107de:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80107e6:	893b      	ldrh	r3, [r7, #8]
 80107e8:	7af9      	ldrb	r1, [r7, #11]
 80107ea:	687a      	ldr	r2, [r7, #4]
 80107ec:	f7f1 f880 	bl	80018f0 <HAL_PCD_EP_Transmit>
 80107f0:	4603      	mov	r3, r0
 80107f2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80107f4:	7dbb      	ldrb	r3, [r7, #22]
 80107f6:	2b03      	cmp	r3, #3
 80107f8:	d816      	bhi.n	8010828 <USBD_LL_Transmit+0x64>
 80107fa:	a201      	add	r2, pc, #4	; (adr r2, 8010800 <USBD_LL_Transmit+0x3c>)
 80107fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010800:	08010811 	.word	0x08010811
 8010804:	08010817 	.word	0x08010817
 8010808:	0801081d 	.word	0x0801081d
 801080c:	08010823 	.word	0x08010823
    case HAL_OK :
      usb_status = USBD_OK;
 8010810:	2300      	movs	r3, #0
 8010812:	75fb      	strb	r3, [r7, #23]
    break;
 8010814:	e00b      	b.n	801082e <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010816:	2302      	movs	r3, #2
 8010818:	75fb      	strb	r3, [r7, #23]
    break;
 801081a:	e008      	b.n	801082e <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801081c:	2301      	movs	r3, #1
 801081e:	75fb      	strb	r3, [r7, #23]
    break;
 8010820:	e005      	b.n	801082e <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010822:	2302      	movs	r3, #2
 8010824:	75fb      	strb	r3, [r7, #23]
    break;
 8010826:	e002      	b.n	801082e <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8010828:	2302      	movs	r3, #2
 801082a:	75fb      	strb	r3, [r7, #23]
    break;
 801082c:	bf00      	nop
  }
  return usb_status;    
 801082e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010830:	4618      	mov	r0, r3
 8010832:	3718      	adds	r7, #24
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b086      	sub	sp, #24
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	607a      	str	r2, [r7, #4]
 8010842:	461a      	mov	r2, r3
 8010844:	460b      	mov	r3, r1
 8010846:	72fb      	strb	r3, [r7, #11]
 8010848:	4613      	mov	r3, r2
 801084a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801084c:	2300      	movs	r3, #0
 801084e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010850:	2300      	movs	r3, #0
 8010852:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801085a:	893b      	ldrh	r3, [r7, #8]
 801085c:	7af9      	ldrb	r1, [r7, #11]
 801085e:	687a      	ldr	r2, [r7, #4]
 8010860:	f7f0 ffe3 	bl	800182a <HAL_PCD_EP_Receive>
 8010864:	4603      	mov	r3, r0
 8010866:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8010868:	7dbb      	ldrb	r3, [r7, #22]
 801086a:	2b03      	cmp	r3, #3
 801086c:	d816      	bhi.n	801089c <USBD_LL_PrepareReceive+0x64>
 801086e:	a201      	add	r2, pc, #4	; (adr r2, 8010874 <USBD_LL_PrepareReceive+0x3c>)
 8010870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010874:	08010885 	.word	0x08010885
 8010878:	0801088b 	.word	0x0801088b
 801087c:	08010891 	.word	0x08010891
 8010880:	08010897 	.word	0x08010897
    case HAL_OK :
      usb_status = USBD_OK;
 8010884:	2300      	movs	r3, #0
 8010886:	75fb      	strb	r3, [r7, #23]
    break;
 8010888:	e00b      	b.n	80108a2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801088a:	2302      	movs	r3, #2
 801088c:	75fb      	strb	r3, [r7, #23]
    break;
 801088e:	e008      	b.n	80108a2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010890:	2301      	movs	r3, #1
 8010892:	75fb      	strb	r3, [r7, #23]
    break;
 8010894:	e005      	b.n	80108a2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010896:	2302      	movs	r3, #2
 8010898:	75fb      	strb	r3, [r7, #23]
    break;
 801089a:	e002      	b.n	80108a2 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 801089c:	2302      	movs	r3, #2
 801089e:	75fb      	strb	r3, [r7, #23]
    break;
 80108a0:	bf00      	nop
  }
  return usb_status; 
 80108a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80108a4:	4618      	mov	r0, r3
 80108a6:	3718      	adds	r7, #24
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}

080108ac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	460b      	mov	r3, r1
 80108b6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80108be:	78fa      	ldrb	r2, [r7, #3]
 80108c0:	4611      	mov	r1, r2
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7f0 fffb 	bl	80018be <HAL_PCD_EP_GetRxCount>
 80108c8:	4603      	mov	r3, r0
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3708      	adds	r7, #8
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}
	...

080108d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108d4:	b480      	push	{r7}
 80108d6:	b083      	sub	sp, #12
 80108d8:	af00      	add	r7, sp, #0
 80108da:	4603      	mov	r3, r0
 80108dc:	6039      	str	r1, [r7, #0]
 80108de:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	2212      	movs	r2, #18
 80108e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80108e6:	4b03      	ldr	r3, [pc, #12]	; (80108f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	370c      	adds	r7, #12
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr
 80108f4:	200000e0 	.word	0x200000e0

080108f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	4603      	mov	r3, r0
 8010900:	6039      	str	r1, [r7, #0]
 8010902:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	2204      	movs	r2, #4
 8010908:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801090a:	4b03      	ldr	r3, [pc, #12]	; (8010918 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801090c:	4618      	mov	r0, r3
 801090e:	370c      	adds	r7, #12
 8010910:	46bd      	mov	sp, r7
 8010912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010916:	4770      	bx	lr
 8010918:	200000f4 	.word	0x200000f4

0801091c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	af00      	add	r7, sp, #0
 8010922:	4603      	mov	r3, r0
 8010924:	6039      	str	r1, [r7, #0]
 8010926:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010928:	79fb      	ldrb	r3, [r7, #7]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d105      	bne.n	801093a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801092e:	683a      	ldr	r2, [r7, #0]
 8010930:	4907      	ldr	r1, [pc, #28]	; (8010950 <USBD_FS_ProductStrDescriptor+0x34>)
 8010932:	4808      	ldr	r0, [pc, #32]	; (8010954 <USBD_FS_ProductStrDescriptor+0x38>)
 8010934:	f7f4 fed9 	bl	80056ea <USBD_GetString>
 8010938:	e004      	b.n	8010944 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801093a:	683a      	ldr	r2, [r7, #0]
 801093c:	4904      	ldr	r1, [pc, #16]	; (8010950 <USBD_FS_ProductStrDescriptor+0x34>)
 801093e:	4805      	ldr	r0, [pc, #20]	; (8010954 <USBD_FS_ProductStrDescriptor+0x38>)
 8010940:	f7f4 fed3 	bl	80056ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8010944:	4b02      	ldr	r3, [pc, #8]	; (8010950 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010946:	4618      	mov	r0, r3
 8010948:	3708      	adds	r7, #8
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}
 801094e:	bf00      	nop
 8010950:	20005af0 	.word	0x20005af0
 8010954:	08010e68 	.word	0x08010e68

08010958 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b082      	sub	sp, #8
 801095c:	af00      	add	r7, sp, #0
 801095e:	4603      	mov	r3, r0
 8010960:	6039      	str	r1, [r7, #0]
 8010962:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010964:	683a      	ldr	r2, [r7, #0]
 8010966:	4904      	ldr	r1, [pc, #16]	; (8010978 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010968:	4804      	ldr	r0, [pc, #16]	; (801097c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801096a:	f7f4 febe 	bl	80056ea <USBD_GetString>
  return USBD_StrDesc;
 801096e:	4b02      	ldr	r3, [pc, #8]	; (8010978 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010970:	4618      	mov	r0, r3
 8010972:	3708      	adds	r7, #8
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}
 8010978:	20005af0 	.word	0x20005af0
 801097c:	08010e80 	.word	0x08010e80

08010980 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
 8010986:	4603      	mov	r3, r0
 8010988:	6039      	str	r1, [r7, #0]
 801098a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801098c:	79fb      	ldrb	r3, [r7, #7]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d105      	bne.n	801099e <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8010992:	683a      	ldr	r2, [r7, #0]
 8010994:	4907      	ldr	r1, [pc, #28]	; (80109b4 <USBD_FS_SerialStrDescriptor+0x34>)
 8010996:	4808      	ldr	r0, [pc, #32]	; (80109b8 <USBD_FS_SerialStrDescriptor+0x38>)
 8010998:	f7f4 fea7 	bl	80056ea <USBD_GetString>
 801099c:	e004      	b.n	80109a8 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 801099e:	683a      	ldr	r2, [r7, #0]
 80109a0:	4904      	ldr	r1, [pc, #16]	; (80109b4 <USBD_FS_SerialStrDescriptor+0x34>)
 80109a2:	4805      	ldr	r0, [pc, #20]	; (80109b8 <USBD_FS_SerialStrDescriptor+0x38>)
 80109a4:	f7f4 fea1 	bl	80056ea <USBD_GetString>
  }
  return USBD_StrDesc;
 80109a8:	4b02      	ldr	r3, [pc, #8]	; (80109b4 <USBD_FS_SerialStrDescriptor+0x34>)
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3708      	adds	r7, #8
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
 80109b2:	bf00      	nop
 80109b4:	20005af0 	.word	0x20005af0
 80109b8:	08010e94 	.word	0x08010e94

080109bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b082      	sub	sp, #8
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	4603      	mov	r3, r0
 80109c4:	6039      	str	r1, [r7, #0]
 80109c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80109c8:	79fb      	ldrb	r3, [r7, #7]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d105      	bne.n	80109da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80109ce:	683a      	ldr	r2, [r7, #0]
 80109d0:	4907      	ldr	r1, [pc, #28]	; (80109f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80109d2:	4808      	ldr	r0, [pc, #32]	; (80109f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80109d4:	f7f4 fe89 	bl	80056ea <USBD_GetString>
 80109d8:	e004      	b.n	80109e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80109da:	683a      	ldr	r2, [r7, #0]
 80109dc:	4904      	ldr	r1, [pc, #16]	; (80109f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80109de:	4805      	ldr	r0, [pc, #20]	; (80109f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80109e0:	f7f4 fe83 	bl	80056ea <USBD_GetString>
  }
  return USBD_StrDesc;
 80109e4:	4b02      	ldr	r3, [pc, #8]	; (80109f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3708      	adds	r7, #8
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	bf00      	nop
 80109f0:	20005af0 	.word	0x20005af0
 80109f4:	08010ea4 	.word	0x08010ea4

080109f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	4603      	mov	r3, r0
 8010a00:	6039      	str	r1, [r7, #0]
 8010a02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010a04:	79fb      	ldrb	r3, [r7, #7]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d105      	bne.n	8010a16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010a0a:	683a      	ldr	r2, [r7, #0]
 8010a0c:	4907      	ldr	r1, [pc, #28]	; (8010a2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010a0e:	4808      	ldr	r0, [pc, #32]	; (8010a30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010a10:	f7f4 fe6b 	bl	80056ea <USBD_GetString>
 8010a14:	e004      	b.n	8010a20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010a16:	683a      	ldr	r2, [r7, #0]
 8010a18:	4904      	ldr	r1, [pc, #16]	; (8010a2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010a1a:	4805      	ldr	r0, [pc, #20]	; (8010a30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010a1c:	f7f4 fe65 	bl	80056ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8010a20:	4b02      	ldr	r3, [pc, #8]	; (8010a2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3708      	adds	r7, #8
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}
 8010a2a:	bf00      	nop
 8010a2c:	20005af0 	.word	0x20005af0
 8010a30:	08010eb0 	.word	0x08010eb0

08010a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8010a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010a6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010a38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010a3a:	e003      	b.n	8010a44 <LoopCopyDataInit>

08010a3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010a3c:	4b0c      	ldr	r3, [pc, #48]	; (8010a70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010a3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010a40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010a42:	3104      	adds	r1, #4

08010a44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010a44:	480b      	ldr	r0, [pc, #44]	; (8010a74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010a46:	4b0c      	ldr	r3, [pc, #48]	; (8010a78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010a48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010a4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010a4c:	d3f6      	bcc.n	8010a3c <CopyDataInit>
  ldr  r2, =_sbss
 8010a4e:	4a0b      	ldr	r2, [pc, #44]	; (8010a7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010a50:	e002      	b.n	8010a58 <LoopFillZerobss>

08010a52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010a52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010a54:	f842 3b04 	str.w	r3, [r2], #4

08010a58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010a58:	4b09      	ldr	r3, [pc, #36]	; (8010a80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010a5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010a5c:	d3f9      	bcc.n	8010a52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010a5e:	f7ff fb57 	bl	8010110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010a62:	f000 f811 	bl	8010a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010a66:	f7ff f90d 	bl	800fc84 <main>
  bx  lr    
 8010a6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8010a6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010a70:	080110dc 	.word	0x080110dc
  ldr  r0, =_sdata
 8010a74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010a78:	200002c8 	.word	0x200002c8
  ldr  r2, =_sbss
 8010a7c:	200002c8 	.word	0x200002c8
  ldr  r3, = _ebss
 8010a80:	20005cf4 	.word	0x20005cf4

08010a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010a84:	e7fe      	b.n	8010a84 <ADC_IRQHandler>
	...

08010a88 <__libc_init_array>:
 8010a88:	b570      	push	{r4, r5, r6, lr}
 8010a8a:	4e0d      	ldr	r6, [pc, #52]	; (8010ac0 <__libc_init_array+0x38>)
 8010a8c:	4c0d      	ldr	r4, [pc, #52]	; (8010ac4 <__libc_init_array+0x3c>)
 8010a8e:	1ba4      	subs	r4, r4, r6
 8010a90:	10a4      	asrs	r4, r4, #2
 8010a92:	2500      	movs	r5, #0
 8010a94:	42a5      	cmp	r5, r4
 8010a96:	d109      	bne.n	8010aac <__libc_init_array+0x24>
 8010a98:	4e0b      	ldr	r6, [pc, #44]	; (8010ac8 <__libc_init_array+0x40>)
 8010a9a:	4c0c      	ldr	r4, [pc, #48]	; (8010acc <__libc_init_array+0x44>)
 8010a9c:	f000 f988 	bl	8010db0 <_init>
 8010aa0:	1ba4      	subs	r4, r4, r6
 8010aa2:	10a4      	asrs	r4, r4, #2
 8010aa4:	2500      	movs	r5, #0
 8010aa6:	42a5      	cmp	r5, r4
 8010aa8:	d105      	bne.n	8010ab6 <__libc_init_array+0x2e>
 8010aaa:	bd70      	pop	{r4, r5, r6, pc}
 8010aac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010ab0:	4798      	blx	r3
 8010ab2:	3501      	adds	r5, #1
 8010ab4:	e7ee      	b.n	8010a94 <__libc_init_array+0xc>
 8010ab6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010aba:	4798      	blx	r3
 8010abc:	3501      	adds	r5, #1
 8010abe:	e7f2      	b.n	8010aa6 <__libc_init_array+0x1e>
 8010ac0:	080110d4 	.word	0x080110d4
 8010ac4:	080110d4 	.word	0x080110d4
 8010ac8:	080110d4 	.word	0x080110d4
 8010acc:	080110d8 	.word	0x080110d8

08010ad0 <memcmp>:
 8010ad0:	b510      	push	{r4, lr}
 8010ad2:	3901      	subs	r1, #1
 8010ad4:	4402      	add	r2, r0
 8010ad6:	4290      	cmp	r0, r2
 8010ad8:	d101      	bne.n	8010ade <memcmp+0xe>
 8010ada:	2000      	movs	r0, #0
 8010adc:	bd10      	pop	{r4, pc}
 8010ade:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010ae2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010ae6:	42a3      	cmp	r3, r4
 8010ae8:	d0f5      	beq.n	8010ad6 <memcmp+0x6>
 8010aea:	1b18      	subs	r0, r3, r4
 8010aec:	bd10      	pop	{r4, pc}

08010aee <memcpy>:
 8010aee:	b510      	push	{r4, lr}
 8010af0:	1e43      	subs	r3, r0, #1
 8010af2:	440a      	add	r2, r1
 8010af4:	4291      	cmp	r1, r2
 8010af6:	d100      	bne.n	8010afa <memcpy+0xc>
 8010af8:	bd10      	pop	{r4, pc}
 8010afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010afe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b02:	e7f7      	b.n	8010af4 <memcpy+0x6>

08010b04 <memmove>:
 8010b04:	4288      	cmp	r0, r1
 8010b06:	b510      	push	{r4, lr}
 8010b08:	eb01 0302 	add.w	r3, r1, r2
 8010b0c:	d803      	bhi.n	8010b16 <memmove+0x12>
 8010b0e:	1e42      	subs	r2, r0, #1
 8010b10:	4299      	cmp	r1, r3
 8010b12:	d10c      	bne.n	8010b2e <memmove+0x2a>
 8010b14:	bd10      	pop	{r4, pc}
 8010b16:	4298      	cmp	r0, r3
 8010b18:	d2f9      	bcs.n	8010b0e <memmove+0xa>
 8010b1a:	1881      	adds	r1, r0, r2
 8010b1c:	1ad2      	subs	r2, r2, r3
 8010b1e:	42d3      	cmn	r3, r2
 8010b20:	d100      	bne.n	8010b24 <memmove+0x20>
 8010b22:	bd10      	pop	{r4, pc}
 8010b24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b28:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010b2c:	e7f7      	b.n	8010b1e <memmove+0x1a>
 8010b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b32:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010b36:	e7eb      	b.n	8010b10 <memmove+0xc>

08010b38 <memset>:
 8010b38:	4402      	add	r2, r0
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	4293      	cmp	r3, r2
 8010b3e:	d100      	bne.n	8010b42 <memset+0xa>
 8010b40:	4770      	bx	lr
 8010b42:	f803 1b01 	strb.w	r1, [r3], #1
 8010b46:	e7f9      	b.n	8010b3c <memset+0x4>

08010b48 <rand>:
 8010b48:	4b19      	ldr	r3, [pc, #100]	; (8010bb0 <rand+0x68>)
 8010b4a:	b510      	push	{r4, lr}
 8010b4c:	681c      	ldr	r4, [r3, #0]
 8010b4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010b50:	b9d3      	cbnz	r3, 8010b88 <rand+0x40>
 8010b52:	2018      	movs	r0, #24
 8010b54:	f000 f886 	bl	8010c64 <malloc>
 8010b58:	f243 330e 	movw	r3, #13070	; 0x330e
 8010b5c:	63a0      	str	r0, [r4, #56]	; 0x38
 8010b5e:	8003      	strh	r3, [r0, #0]
 8010b60:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8010b64:	8043      	strh	r3, [r0, #2]
 8010b66:	f241 2334 	movw	r3, #4660	; 0x1234
 8010b6a:	8083      	strh	r3, [r0, #4]
 8010b6c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8010b70:	80c3      	strh	r3, [r0, #6]
 8010b72:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8010b76:	8103      	strh	r3, [r0, #8]
 8010b78:	2305      	movs	r3, #5
 8010b7a:	8143      	strh	r3, [r0, #10]
 8010b7c:	230b      	movs	r3, #11
 8010b7e:	8183      	strh	r3, [r0, #12]
 8010b80:	2201      	movs	r2, #1
 8010b82:	2300      	movs	r3, #0
 8010b84:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010b88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010b8a:	480a      	ldr	r0, [pc, #40]	; (8010bb4 <rand+0x6c>)
 8010b8c:	690a      	ldr	r2, [r1, #16]
 8010b8e:	694b      	ldr	r3, [r1, #20]
 8010b90:	4c09      	ldr	r4, [pc, #36]	; (8010bb8 <rand+0x70>)
 8010b92:	4350      	muls	r0, r2
 8010b94:	fb04 0003 	mla	r0, r4, r3, r0
 8010b98:	fba2 2304 	umull	r2, r3, r2, r4
 8010b9c:	3201      	adds	r2, #1
 8010b9e:	4403      	add	r3, r0
 8010ba0:	f143 0300 	adc.w	r3, r3, #0
 8010ba4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8010ba8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8010bac:	bd10      	pop	{r4, pc}
 8010bae:	bf00      	nop
 8010bb0:	200000f8 	.word	0x200000f8
 8010bb4:	5851f42d 	.word	0x5851f42d
 8010bb8:	4c957f2d 	.word	0x4c957f2d

08010bbc <strcasecmp>:
 8010bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bbe:	4606      	mov	r6, r0
 8010bc0:	460f      	mov	r7, r1
 8010bc2:	f816 4b01 	ldrb.w	r4, [r6], #1
 8010bc6:	f000 f83f 	bl	8010c48 <__locale_ctype_ptr>
 8010bca:	4420      	add	r0, r4
 8010bcc:	f817 5b01 	ldrb.w	r5, [r7], #1
 8010bd0:	7843      	ldrb	r3, [r0, #1]
 8010bd2:	f003 0303 	and.w	r3, r3, #3
 8010bd6:	2b01      	cmp	r3, #1
 8010bd8:	bf08      	it	eq
 8010bda:	3420      	addeq	r4, #32
 8010bdc:	f000 f834 	bl	8010c48 <__locale_ctype_ptr>
 8010be0:	4428      	add	r0, r5
 8010be2:	7843      	ldrb	r3, [r0, #1]
 8010be4:	f003 0303 	and.w	r3, r3, #3
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	bf08      	it	eq
 8010bec:	3520      	addeq	r5, #32
 8010bee:	1b60      	subs	r0, r4, r5
 8010bf0:	d101      	bne.n	8010bf6 <strcasecmp+0x3a>
 8010bf2:	2d00      	cmp	r5, #0
 8010bf4:	d1e5      	bne.n	8010bc2 <strcasecmp+0x6>
 8010bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010bf8 <strncmp>:
 8010bf8:	b510      	push	{r4, lr}
 8010bfa:	b16a      	cbz	r2, 8010c18 <strncmp+0x20>
 8010bfc:	3901      	subs	r1, #1
 8010bfe:	1884      	adds	r4, r0, r2
 8010c00:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010c04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010c08:	4293      	cmp	r3, r2
 8010c0a:	d103      	bne.n	8010c14 <strncmp+0x1c>
 8010c0c:	42a0      	cmp	r0, r4
 8010c0e:	d001      	beq.n	8010c14 <strncmp+0x1c>
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d1f5      	bne.n	8010c00 <strncmp+0x8>
 8010c14:	1a98      	subs	r0, r3, r2
 8010c16:	bd10      	pop	{r4, pc}
 8010c18:	4610      	mov	r0, r2
 8010c1a:	bd10      	pop	{r4, pc}

08010c1c <strncpy>:
 8010c1c:	b570      	push	{r4, r5, r6, lr}
 8010c1e:	4604      	mov	r4, r0
 8010c20:	b902      	cbnz	r2, 8010c24 <strncpy+0x8>
 8010c22:	bd70      	pop	{r4, r5, r6, pc}
 8010c24:	4623      	mov	r3, r4
 8010c26:	f811 5b01 	ldrb.w	r5, [r1], #1
 8010c2a:	f803 5b01 	strb.w	r5, [r3], #1
 8010c2e:	1e56      	subs	r6, r2, #1
 8010c30:	b91d      	cbnz	r5, 8010c3a <strncpy+0x1e>
 8010c32:	4414      	add	r4, r2
 8010c34:	42a3      	cmp	r3, r4
 8010c36:	d103      	bne.n	8010c40 <strncpy+0x24>
 8010c38:	bd70      	pop	{r4, r5, r6, pc}
 8010c3a:	461c      	mov	r4, r3
 8010c3c:	4632      	mov	r2, r6
 8010c3e:	e7ef      	b.n	8010c20 <strncpy+0x4>
 8010c40:	f803 5b01 	strb.w	r5, [r3], #1
 8010c44:	e7f6      	b.n	8010c34 <strncpy+0x18>
	...

08010c48 <__locale_ctype_ptr>:
 8010c48:	4b04      	ldr	r3, [pc, #16]	; (8010c5c <__locale_ctype_ptr+0x14>)
 8010c4a:	4a05      	ldr	r2, [pc, #20]	; (8010c60 <__locale_ctype_ptr+0x18>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	6a1b      	ldr	r3, [r3, #32]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	bf08      	it	eq
 8010c54:	4613      	moveq	r3, r2
 8010c56:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8010c5a:	4770      	bx	lr
 8010c5c:	200000f8 	.word	0x200000f8
 8010c60:	2000015c 	.word	0x2000015c

08010c64 <malloc>:
 8010c64:	4b02      	ldr	r3, [pc, #8]	; (8010c70 <malloc+0xc>)
 8010c66:	4601      	mov	r1, r0
 8010c68:	6818      	ldr	r0, [r3, #0]
 8010c6a:	f000 b815 	b.w	8010c98 <_malloc_r>
 8010c6e:	bf00      	nop
 8010c70:	200000f8 	.word	0x200000f8

08010c74 <__ascii_mbtowc>:
 8010c74:	b082      	sub	sp, #8
 8010c76:	b901      	cbnz	r1, 8010c7a <__ascii_mbtowc+0x6>
 8010c78:	a901      	add	r1, sp, #4
 8010c7a:	b142      	cbz	r2, 8010c8e <__ascii_mbtowc+0x1a>
 8010c7c:	b14b      	cbz	r3, 8010c92 <__ascii_mbtowc+0x1e>
 8010c7e:	7813      	ldrb	r3, [r2, #0]
 8010c80:	600b      	str	r3, [r1, #0]
 8010c82:	7812      	ldrb	r2, [r2, #0]
 8010c84:	1c10      	adds	r0, r2, #0
 8010c86:	bf18      	it	ne
 8010c88:	2001      	movne	r0, #1
 8010c8a:	b002      	add	sp, #8
 8010c8c:	4770      	bx	lr
 8010c8e:	4610      	mov	r0, r2
 8010c90:	e7fb      	b.n	8010c8a <__ascii_mbtowc+0x16>
 8010c92:	f06f 0001 	mvn.w	r0, #1
 8010c96:	e7f8      	b.n	8010c8a <__ascii_mbtowc+0x16>

08010c98 <_malloc_r>:
 8010c98:	b570      	push	{r4, r5, r6, lr}
 8010c9a:	1ccd      	adds	r5, r1, #3
 8010c9c:	f025 0503 	bic.w	r5, r5, #3
 8010ca0:	3508      	adds	r5, #8
 8010ca2:	2d0c      	cmp	r5, #12
 8010ca4:	bf38      	it	cc
 8010ca6:	250c      	movcc	r5, #12
 8010ca8:	2d00      	cmp	r5, #0
 8010caa:	4606      	mov	r6, r0
 8010cac:	db01      	blt.n	8010cb2 <_malloc_r+0x1a>
 8010cae:	42a9      	cmp	r1, r5
 8010cb0:	d903      	bls.n	8010cba <_malloc_r+0x22>
 8010cb2:	230c      	movs	r3, #12
 8010cb4:	6033      	str	r3, [r6, #0]
 8010cb6:	2000      	movs	r0, #0
 8010cb8:	bd70      	pop	{r4, r5, r6, pc}
 8010cba:	f000 f868 	bl	8010d8e <__malloc_lock>
 8010cbe:	4a23      	ldr	r2, [pc, #140]	; (8010d4c <_malloc_r+0xb4>)
 8010cc0:	6814      	ldr	r4, [r2, #0]
 8010cc2:	4621      	mov	r1, r4
 8010cc4:	b991      	cbnz	r1, 8010cec <_malloc_r+0x54>
 8010cc6:	4c22      	ldr	r4, [pc, #136]	; (8010d50 <_malloc_r+0xb8>)
 8010cc8:	6823      	ldr	r3, [r4, #0]
 8010cca:	b91b      	cbnz	r3, 8010cd4 <_malloc_r+0x3c>
 8010ccc:	4630      	mov	r0, r6
 8010cce:	f000 f841 	bl	8010d54 <_sbrk_r>
 8010cd2:	6020      	str	r0, [r4, #0]
 8010cd4:	4629      	mov	r1, r5
 8010cd6:	4630      	mov	r0, r6
 8010cd8:	f000 f83c 	bl	8010d54 <_sbrk_r>
 8010cdc:	1c43      	adds	r3, r0, #1
 8010cde:	d126      	bne.n	8010d2e <_malloc_r+0x96>
 8010ce0:	230c      	movs	r3, #12
 8010ce2:	6033      	str	r3, [r6, #0]
 8010ce4:	4630      	mov	r0, r6
 8010ce6:	f000 f853 	bl	8010d90 <__malloc_unlock>
 8010cea:	e7e4      	b.n	8010cb6 <_malloc_r+0x1e>
 8010cec:	680b      	ldr	r3, [r1, #0]
 8010cee:	1b5b      	subs	r3, r3, r5
 8010cf0:	d41a      	bmi.n	8010d28 <_malloc_r+0x90>
 8010cf2:	2b0b      	cmp	r3, #11
 8010cf4:	d90f      	bls.n	8010d16 <_malloc_r+0x7e>
 8010cf6:	600b      	str	r3, [r1, #0]
 8010cf8:	50cd      	str	r5, [r1, r3]
 8010cfa:	18cc      	adds	r4, r1, r3
 8010cfc:	4630      	mov	r0, r6
 8010cfe:	f000 f847 	bl	8010d90 <__malloc_unlock>
 8010d02:	f104 000b 	add.w	r0, r4, #11
 8010d06:	1d23      	adds	r3, r4, #4
 8010d08:	f020 0007 	bic.w	r0, r0, #7
 8010d0c:	1ac3      	subs	r3, r0, r3
 8010d0e:	d01b      	beq.n	8010d48 <_malloc_r+0xb0>
 8010d10:	425a      	negs	r2, r3
 8010d12:	50e2      	str	r2, [r4, r3]
 8010d14:	bd70      	pop	{r4, r5, r6, pc}
 8010d16:	428c      	cmp	r4, r1
 8010d18:	bf0d      	iteet	eq
 8010d1a:	6863      	ldreq	r3, [r4, #4]
 8010d1c:	684b      	ldrne	r3, [r1, #4]
 8010d1e:	6063      	strne	r3, [r4, #4]
 8010d20:	6013      	streq	r3, [r2, #0]
 8010d22:	bf18      	it	ne
 8010d24:	460c      	movne	r4, r1
 8010d26:	e7e9      	b.n	8010cfc <_malloc_r+0x64>
 8010d28:	460c      	mov	r4, r1
 8010d2a:	6849      	ldr	r1, [r1, #4]
 8010d2c:	e7ca      	b.n	8010cc4 <_malloc_r+0x2c>
 8010d2e:	1cc4      	adds	r4, r0, #3
 8010d30:	f024 0403 	bic.w	r4, r4, #3
 8010d34:	42a0      	cmp	r0, r4
 8010d36:	d005      	beq.n	8010d44 <_malloc_r+0xac>
 8010d38:	1a21      	subs	r1, r4, r0
 8010d3a:	4630      	mov	r0, r6
 8010d3c:	f000 f80a 	bl	8010d54 <_sbrk_r>
 8010d40:	3001      	adds	r0, #1
 8010d42:	d0cd      	beq.n	8010ce0 <_malloc_r+0x48>
 8010d44:	6025      	str	r5, [r4, #0]
 8010d46:	e7d9      	b.n	8010cfc <_malloc_r+0x64>
 8010d48:	bd70      	pop	{r4, r5, r6, pc}
 8010d4a:	bf00      	nop
 8010d4c:	200045f0 	.word	0x200045f0
 8010d50:	200045f4 	.word	0x200045f4

08010d54 <_sbrk_r>:
 8010d54:	b538      	push	{r3, r4, r5, lr}
 8010d56:	4c06      	ldr	r4, [pc, #24]	; (8010d70 <_sbrk_r+0x1c>)
 8010d58:	2300      	movs	r3, #0
 8010d5a:	4605      	mov	r5, r0
 8010d5c:	4608      	mov	r0, r1
 8010d5e:	6023      	str	r3, [r4, #0]
 8010d60:	f000 f818 	bl	8010d94 <_sbrk>
 8010d64:	1c43      	adds	r3, r0, #1
 8010d66:	d102      	bne.n	8010d6e <_sbrk_r+0x1a>
 8010d68:	6823      	ldr	r3, [r4, #0]
 8010d6a:	b103      	cbz	r3, 8010d6e <_sbrk_r+0x1a>
 8010d6c:	602b      	str	r3, [r5, #0]
 8010d6e:	bd38      	pop	{r3, r4, r5, pc}
 8010d70:	20005cf0 	.word	0x20005cf0

08010d74 <__ascii_wctomb>:
 8010d74:	b149      	cbz	r1, 8010d8a <__ascii_wctomb+0x16>
 8010d76:	2aff      	cmp	r2, #255	; 0xff
 8010d78:	bf85      	ittet	hi
 8010d7a:	238a      	movhi	r3, #138	; 0x8a
 8010d7c:	6003      	strhi	r3, [r0, #0]
 8010d7e:	700a      	strbls	r2, [r1, #0]
 8010d80:	f04f 30ff 	movhi.w	r0, #4294967295
 8010d84:	bf98      	it	ls
 8010d86:	2001      	movls	r0, #1
 8010d88:	4770      	bx	lr
 8010d8a:	4608      	mov	r0, r1
 8010d8c:	4770      	bx	lr

08010d8e <__malloc_lock>:
 8010d8e:	4770      	bx	lr

08010d90 <__malloc_unlock>:
 8010d90:	4770      	bx	lr
	...

08010d94 <_sbrk>:
 8010d94:	4b04      	ldr	r3, [pc, #16]	; (8010da8 <_sbrk+0x14>)
 8010d96:	6819      	ldr	r1, [r3, #0]
 8010d98:	4602      	mov	r2, r0
 8010d9a:	b909      	cbnz	r1, 8010da0 <_sbrk+0xc>
 8010d9c:	4903      	ldr	r1, [pc, #12]	; (8010dac <_sbrk+0x18>)
 8010d9e:	6019      	str	r1, [r3, #0]
 8010da0:	6818      	ldr	r0, [r3, #0]
 8010da2:	4402      	add	r2, r0
 8010da4:	601a      	str	r2, [r3, #0]
 8010da6:	4770      	bx	lr
 8010da8:	200045f8 	.word	0x200045f8
 8010dac:	20005cf4 	.word	0x20005cf4

08010db0 <_init>:
 8010db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010db2:	bf00      	nop
 8010db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010db6:	bc08      	pop	{r3}
 8010db8:	469e      	mov	lr, r3
 8010dba:	4770      	bx	lr

08010dbc <_fini>:
 8010dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dbe:	bf00      	nop
 8010dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dc2:	bc08      	pop	{r3}
 8010dc4:	469e      	mov	lr, r3
 8010dc6:	4770      	bx	lr
