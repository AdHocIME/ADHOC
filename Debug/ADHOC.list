
ADHOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08010ef4  08010ef4  00020ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080111f0  080111f0  000211f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080111f8  080111f8  000211f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080111fc  080111fc  000211fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  20000000  08011200  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005edc  200002c8  080114c8  000302c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200061a4  080114c8  000361a4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034507  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000063c8  00000000  00000000  000647ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001dc8  00000000  00000000  0006abc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001bc0  00000000  00000000  0006c990  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f626  00000000  00000000  0006e550  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000a690  00000000  00000000  0007db76  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00088206  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007e68  00000000  00000000  00088284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010edc 	.word	0x08010edc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	08010edc 	.word	0x08010edc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000504:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000528:	2003      	movs	r0, #3
 800052a:	f000 f917 	bl	800075c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052e:	2000      	movs	r0, #0
 8000530:	f00f fdf8 	bl	8010124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000534:	f00f fda4 	bl	8010080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_IncTick+0x20>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_IncTick+0x24>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4413      	add	r3, r2
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_IncTick+0x24>)
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000000 	.word	0x20000000
 8000568:	20004600 	.word	0x20004600

0800056c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return uwTick;
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <HAL_GetTick+0x14>)
 8000572:	681b      	ldr	r3, [r3, #0]
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20004600 	.word	0x20004600

08000584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800058c:	f7ff ffee 	bl	800056c <HAL_GetTick>
 8000590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800059c:	d005      	beq.n	80005aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_Delay+0x40>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4413      	add	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005aa:	bf00      	nop
 80005ac:	f7ff ffde 	bl	800056c <HAL_GetTick>
 80005b0:	4602      	mov	r2, r0
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	1ad2      	subs	r2, r2, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d3f7      	bcc.n	80005ac <HAL_Delay+0x28>
  {
  }
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000000 	.word	0x20000000

080005c8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <NVIC_SetPriorityGrouping+0x44>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fa:	4a04      	ldr	r2, [pc, #16]	; (800060c <NVIC_SetPriorityGrouping+0x44>)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <NVIC_GetPriorityGrouping+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	f003 0307 	and.w	r3, r3, #7
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000636:	4909      	ldr	r1, [pc, #36]	; (800065c <NVIC_EnableIRQ+0x30>)
 8000638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063c:	095b      	lsrs	r3, r3, #5
 800063e:	79fa      	ldrb	r2, [r7, #7]
 8000640:	f002 021f 	and.w	r2, r2, #31
 8000644:	2001      	movs	r0, #1
 8000646:	fa00 f202 	lsl.w	r2, r0, r2
 800064a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000e100 	.word	0xe000e100

08000660 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800066c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	da0b      	bge.n	800068c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	490d      	ldr	r1, [pc, #52]	; (80006ac <NVIC_SetPriority+0x4c>)
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 030f 	and.w	r3, r3, #15
 800067c:	3b04      	subs	r3, #4
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	0112      	lsls	r2, r2, #4
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440b      	add	r3, r1
 8000688:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800068a:	e009      	b.n	80006a0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	4908      	ldr	r1, [pc, #32]	; (80006b0 <NVIC_SetPriority+0x50>)
 800068e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	b2d2      	uxtb	r2, r2
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b089      	sub	sp, #36	; 0x24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	f1c3 0307 	rsb	r3, r3, #7
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	bf28      	it	cs
 80006d2:	2304      	movcs	r3, #4
 80006d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3304      	adds	r3, #4
 80006da:	2b06      	cmp	r3, #6
 80006dc:	d902      	bls.n	80006e4 <NVIC_EncodePriority+0x30>
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3b03      	subs	r3, #3
 80006e2:	e000      	b.n	80006e6 <NVIC_EncodePriority+0x32>
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	2201      	movs	r2, #1
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	1e5a      	subs	r2, r3, #1
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	401a      	ands	r2, r3
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fa:	2101      	movs	r1, #1
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000702:	1e59      	subs	r1, r3, #1
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	4313      	orrs	r3, r2
         );
}
 800070a:	4618      	mov	r0, r3
 800070c:	3724      	adds	r7, #36	; 0x24
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000728:	d301      	bcc.n	800072e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800072a:	2301      	movs	r3, #1
 800072c:	e00f      	b.n	800074e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <SysTick_Config+0x40>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000736:	210f      	movs	r1, #15
 8000738:	f04f 30ff 	mov.w	r0, #4294967295
 800073c:	f7ff ff90 	bl	8000660 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <SysTick_Config+0x40>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <SysTick_Config+0x40>)
 8000748:	2207      	movs	r2, #7
 800074a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	e000e010 	.word	0xe000e010

0800075c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff ff2f 	bl	80005c8 <NVIC_SetPriorityGrouping>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000772:	b580      	push	{r7, lr}
 8000774:	b086      	sub	sp, #24
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	60b9      	str	r1, [r7, #8]
 800077c:	607a      	str	r2, [r7, #4]
 800077e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000784:	f7ff ff44 	bl	8000610 <NVIC_GetPriorityGrouping>
 8000788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	68b9      	ldr	r1, [r7, #8]
 800078e:	6978      	ldr	r0, [r7, #20]
 8000790:	f7ff ff90 	bl	80006b4 <NVIC_EncodePriority>
 8000794:	4602      	mov	r2, r0
 8000796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff5f 	bl	8000660 <NVIC_SetPriority>
}
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff37 	bl	800062c <NVIC_EnableIRQ>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ffa2 	bl	8000718 <SysTick_Config>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d106      	bne.n	80007fc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007ee:	4a09      	ldr	r2, [pc, #36]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80007fa:	e005      	b.n	8000808 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007fc:	4a05      	ldr	r2, [pc, #20]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f023 0304 	bic.w	r3, r3, #4
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	b480      	push	{r7}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
 8000832:	e159      	b.n	8000ae8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000834:	2201      	movs	r2, #1
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	429a      	cmp	r2, r3
 800084e:	f040 8148 	bne.w	8000ae2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d003      	beq.n	8000862 <HAL_GPIO_Init+0x4a>
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2b12      	cmp	r3, #18
 8000860:	d123      	bne.n	80008aa <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	08da      	lsrs	r2, r3, #3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3208      	adds	r2, #8
 800086a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800086e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	220f      	movs	r2, #15
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43db      	mvns	r3, r3
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	4013      	ands	r3, r2
 8000884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	691a      	ldr	r2, [r3, #16]
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	f003 0307 	and.w	r3, r3, #7
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	4313      	orrs	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	08da      	lsrs	r2, r3, #3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3208      	adds	r2, #8
 80008a4:	69b9      	ldr	r1, [r7, #24]
 80008a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2203      	movs	r2, #3
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4013      	ands	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 0203 	and.w	r2, r3, #3
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d00b      	beq.n	80008fe <HAL_GPIO_Init+0xe6>
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d007      	beq.n	80008fe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f2:	2b11      	cmp	r3, #17
 80008f4:	d003      	beq.n	80008fe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b12      	cmp	r3, #18
 80008fc:	d130      	bne.n	8000960 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	2203      	movs	r2, #3
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4013      	ands	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	68da      	ldr	r2, [r3, #12]
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	4313      	orrs	r3, r2
 8000926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	69ba      	ldr	r2, [r7, #24]
 800092c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000934:	2201      	movs	r2, #1
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	4013      	ands	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	091b      	lsrs	r3, r3, #4
 800094a:	f003 0201 	and.w	r2, r3, #1
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4313      	orrs	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	2203      	movs	r2, #3
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	4013      	ands	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	689a      	ldr	r2, [r3, #8]
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	4313      	orrs	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 80a2 	beq.w	8000ae2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4a56      	ldr	r2, [pc, #344]	; (8000afc <HAL_GPIO_Init+0x2e4>)
 80009a4:	4b55      	ldr	r3, [pc, #340]	; (8000afc <HAL_GPIO_Init+0x2e4>)
 80009a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b53      	ldr	r3, [pc, #332]	; (8000afc <HAL_GPIO_Init+0x2e4>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ba:	4a51      	ldr	r2, [pc, #324]	; (8000b00 <HAL_GPIO_Init+0x2e8>)
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	089b      	lsrs	r3, r3, #2
 80009c0:	3302      	adds	r3, #2
 80009c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f003 0303 	and.w	r3, r3, #3
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	220f      	movs	r2, #15
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4013      	ands	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a48      	ldr	r2, [pc, #288]	; (8000b04 <HAL_GPIO_Init+0x2ec>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d019      	beq.n	8000a1a <HAL_GPIO_Init+0x202>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a47      	ldr	r2, [pc, #284]	; (8000b08 <HAL_GPIO_Init+0x2f0>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d013      	beq.n	8000a16 <HAL_GPIO_Init+0x1fe>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a46      	ldr	r2, [pc, #280]	; (8000b0c <HAL_GPIO_Init+0x2f4>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00d      	beq.n	8000a12 <HAL_GPIO_Init+0x1fa>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a45      	ldr	r2, [pc, #276]	; (8000b10 <HAL_GPIO_Init+0x2f8>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d007      	beq.n	8000a0e <HAL_GPIO_Init+0x1f6>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a44      	ldr	r2, [pc, #272]	; (8000b14 <HAL_GPIO_Init+0x2fc>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d101      	bne.n	8000a0a <HAL_GPIO_Init+0x1f2>
 8000a06:	2304      	movs	r3, #4
 8000a08:	e008      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	e006      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a0e:	2303      	movs	r3, #3
 8000a10:	e004      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e002      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a16:	2301      	movs	r3, #1
 8000a18:	e000      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	69fa      	ldr	r2, [r7, #28]
 8000a1e:	f002 0203 	and.w	r2, r2, #3
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	4093      	lsls	r3, r2
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a2c:	4934      	ldr	r1, [pc, #208]	; (8000b00 <HAL_GPIO_Init+0x2e8>)
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a3a:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a5e:	4a2e      	ldr	r2, [pc, #184]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a64:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4013      	ands	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a88:	4a23      	ldr	r2, [pc, #140]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a8e:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ab2:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000adc:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	61fb      	str	r3, [r7, #28]
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	2b0f      	cmp	r3, #15
 8000aec:	f67f aea2 	bls.w	8000834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000af0:	bf00      	nop
 8000af2:	3724      	adds	r7, #36	; 0x24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40013800 	.word	0x40013800
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020400 	.word	0x40020400
 8000b0c:	40020800 	.word	0x40020800
 8000b10:	40020c00 	.word	0x40020c00
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40013c00 	.word	0x40013c00

08000b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	807b      	strh	r3, [r7, #2]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b2c:	787b      	ldrb	r3, [r7, #1]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b32:	887a      	ldrh	r2, [r7, #2]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b38:	e003      	b.n	8000b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	041a      	lsls	r2, r3, #16
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	619a      	str	r2, [r3, #24]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	460b      	mov	r3, r1
 8000b58:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	695a      	ldr	r2, [r3, #20]
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	405a      	eors	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	615a      	str	r2, [r3, #20]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000b72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b74:	b08f      	sub	sp, #60	; 0x3c
 8000b76:	af0a      	add	r7, sp, #40	; 0x28
 8000b78:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d101      	bne.n	8000b88 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	e0f7      	b.n	8000d78 <HAL_PCD_Init+0x206>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f00f fb9f 	bl	80102d4 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 ff68 	bl	8002a70 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	687e      	ldr	r6, [r7, #4]
 8000ba8:	466d      	mov	r5, sp
 8000baa:	f106 0410 	add.w	r4, r6, #16
 8000bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bba:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bbe:	1d33      	adds	r3, r6, #4
 8000bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bc2:	6838      	ldr	r0, [r7, #0]
 8000bc4:	f001 fef2 	bl	80029ac <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 ff5f 	bl	8002a92 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	e04c      	b.n	8000c74 <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	4613      	mov	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	3339      	adds	r3, #57	; 0x39
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	b2d8      	uxtb	r0, r3
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	1a9b      	subs	r3, r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	440b      	add	r3, r1
 8000c00:	3338      	adds	r3, #56	; 0x38
 8000c02:	4602      	mov	r2, r0
 8000c04:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	b298      	uxth	r0, r3
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	1a9b      	subs	r3, r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	440b      	add	r3, r1
 8000c18:	333e      	adds	r3, #62	; 0x3e
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	4613      	mov	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	333b      	adds	r3, #59	; 0x3b
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket = 0U;
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	4613      	mov	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	1a9b      	subs	r3, r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	440b      	add	r3, r1
 8000c40:	3340      	adds	r3, #64	; 0x40
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	3344      	adds	r3, #68	; 0x44
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	440b      	add	r3, r1
 8000c68:	334c      	adds	r3, #76	; 0x4c
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < 15U; i++)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	3301      	adds	r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2b0e      	cmp	r3, #14
 8000c78:	d9af      	bls.n	8000bda <HAL_PCD_Init+0x68>
 }
 
 for (i = 0U; i < 15U; i++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	e05a      	b.n	8000d36 <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	4613      	mov	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	1a9b      	subs	r3, r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	b2d8      	uxtb	r0, r3
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	1a9b      	subs	r3, r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000cac:	4602      	mov	r2, r0
 8000cae:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	b298      	uxth	r0, r3
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	1a9b      	subs	r3, r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	333e      	adds	r3, #62	; 0x3e
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cc8:	6879      	ldr	r1, [r7, #4]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	1a9b      	subs	r3, r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	440b      	add	r3, r1
 8000cec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	1a9b      	subs	r3, r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	440b      	add	r3, r1
 8000d02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	1a9b      	subs	r3, r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	440b      	add	r3, r1
 8000d18:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3340      	adds	r3, #64	; 0x40
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
 for (i = 0U; i < 15U; i++)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3301      	adds	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2b0e      	cmp	r3, #14
 8000d3a:	d9a1      	bls.n	8000c80 <HAL_PCD_Init+0x10e>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	687e      	ldr	r6, [r7, #4]
 8000d44:	466d      	mov	r5, sp
 8000d46:	f106 0410 	add.w	r4, r6, #16
 8000d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d56:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d5a:	1d33      	adds	r3, r6, #4
 8000d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d5e:	6838      	ldr	r0, [r7, #0]
 8000d60:	f001 febe 	bl	8002ae0 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 fedf 	bl	8003b34 <USB_DevDisconnect>
 return HAL_OK;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d80 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d101      	bne.n	8000d96 <HAL_PCD_Start+0x16>
 8000d92:	2302      	movs	r3, #2
 8000d94:	e012      	b.n	8000dbc <HAL_PCD_Start+0x3c>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 feaf 	bl	8003b06 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f001 fe4e 	bl	8002a4e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	623b      	str	r3, [r7, #32]
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
 8000dea:	4b7c      	ldr	r3, [pc, #496]	; (8000fdc <HAL_PCD_IRQHandler+0x218>)
 8000dec:	613b      	str	r3, [r7, #16]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 ff40 	bl	8003c78 <USB_GetMode>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f040 8468 	bne.w	80016d0 <HAL_PCD_IRQHandler+0x90c>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 feac 	bl	8003b62 <USB_ReadInterrupts>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f000 845e 	beq.w	80016ce <HAL_PCD_IRQHandler+0x90a>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fea3 	bl	8003b62 <USB_ReadInterrupts>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d107      	bne.n	8000e36 <HAL_PCD_IRQHandler+0x72>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	6952      	ldr	r2, [r2, #20]
 8000e30:	f002 0202 	and.w	r2, r2, #2
 8000e34:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 fe91 	bl	8003b62 <USB_ReadInterrupts>
 8000e40:	4603      	mov	r3, r0
 8000e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e4a:	f040 80b2 	bne.w	8000fb2 <HAL_PCD_IRQHandler+0x1ee>
    {
      epnum = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 fe98 	bl	8003b8c <USB_ReadDevAllOutEpInterrupt>
 8000e5c:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 8000e5e:	e0a4      	b.n	8000faa <HAL_PCD_IRQHandler+0x1e6>
      {
        if (ep_intr & 0x1U)
 8000e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 8099 	beq.w	8000f9e <HAL_PCD_IRQHandler+0x1da>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f002 feb8 	bl	8003bec <USB_ReadDevOutEPInterrupt>
 8000e7c:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d06b      	beq.n	8000f60 <HAL_PCD_IRQHandler+0x19c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	015a      	lsls	r2, r3, #5
 8000e8c:	6a3b      	ldr	r3, [r7, #32]
 8000e8e:	4413      	add	r3, r2
 8000e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000e94:	461a      	mov	r2, r3
 8000e96:	2301      	movs	r3, #1
 8000e98:	6093      	str	r3, [r2, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d13c      	bne.n	8000f1c <HAL_PCD_IRQHandler+0x158>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	1a9b      	subs	r3, r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	0159      	lsls	r1, r3, #5
 8000eba:	6a3b      	ldr	r3, [r7, #32]
 8000ebc:	440b      	add	r3, r1
 8000ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ec8:	1ad1      	subs	r1, r2, r3
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ece:	4613      	mov	r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4403      	add	r3, r0
 8000ed8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000edc:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	1a9b      	subs	r3, r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000ef0:	6819      	ldr	r1, [r3, #0]
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4403      	add	r3, r0
 8000f00:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4419      	add	r1, r3
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	1a9b      	subs	r3, r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4403      	add	r3, r0
 8000f16:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f1a:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4619      	mov	r1, r3
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f00f fa34 	bl	8010390 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d117      	bne.n	8000f60 <HAL_PCD_IRQHandler+0x19c>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d114      	bne.n	8000f60 <HAL_PCD_IRQHandler+0x19c>
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	1a9b      	subs	r3, r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d108      	bne.n	8000f60 <HAL_PCD_IRQHandler+0x19c>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8000f58:	461a      	mov	r2, r3
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	f002 fed0 	bl	8003d00 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00b      	beq.n	8000f82 <HAL_PCD_IRQHandler+0x1be>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f00f f9fe 	bl	801036c <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	015a      	lsls	r2, r3, #5
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	4413      	add	r3, r2
 8000f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2308      	movs	r3, #8
 8000f80:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d008      	beq.n	8000f9e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	015a      	lsls	r2, r3, #5
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	4413      	add	r3, r2
 8000f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f98:	461a      	mov	r2, r3
 8000f9a:	2310      	movs	r3, #16
 8000f9c:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa6:	085b      	lsrs	r3, r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8000faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f47f af57 	bne.w	8000e60 <HAL_PCD_IRQHandler+0x9c>
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 fdd3 	bl	8003b62 <USB_ReadInterrupts>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000fc6:	f040 80c5 	bne.w	8001154 <HAL_PCD_IRQHandler+0x390>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 fdf4 	bl	8003bbc <USB_ReadDevAllInEpInterrupt>
 8000fd4:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 8000fda:	e0b7      	b.n	800114c <HAL_PCD_IRQHandler+0x388>
 8000fdc:	0aba9500 	.word	0x0aba9500
      {
        if (ep_intr & 0x1U) /* In ITR */
 8000fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 80aa 	beq.w	8001140 <HAL_PCD_IRQHandler+0x37c>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 fe14 	bl	8003c24 <USB_ReadDevInEPInterrupt>
 8000ffc:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d05a      	beq.n	80010be <HAL_PCD_IRQHandler+0x2fa>
          {
            fifoemptymsk = 0x1U << epnum;
 8001008:	2201      	movs	r2, #1
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001018:	4619      	mov	r1, r3
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	43db      	mvns	r3, r3
 8001026:	4013      	ands	r3, r2
 8001028:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	015a      	lsls	r2, r3, #5
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	4413      	add	r3, r2
 8001032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001036:	461a      	mov	r2, r3
 8001038:	2301      	movs	r3, #1
 800103a:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d11b      	bne.n	800107c <HAL_PCD_IRQHandler+0x2b8>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	3344      	adds	r3, #68	; 0x44
 8001054:	6819      	ldr	r1, [r3, #0]
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800105a:	4613      	mov	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	1a9b      	subs	r3, r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4403      	add	r3, r0
 8001064:	3340      	adds	r3, #64	; 0x40
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4419      	add	r1, r3
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	1a9b      	subs	r3, r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4403      	add	r3, r0
 8001078:	3344      	adds	r3, #68	; 0x44
 800107a:	6019      	str	r1, [r3, #0]
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4619      	mov	r1, r3
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f00f f99f 	bl	80103c6 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d116      	bne.n	80010be <HAL_PCD_IRQHandler+0x2fa>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	2b00      	cmp	r3, #0
 8001094:	d113      	bne.n	80010be <HAL_PCD_IRQHandler+0x2fa>
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800109a:	4613      	mov	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	1a9b      	subs	r3, r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	440b      	add	r3, r1
 80010a4:	334c      	adds	r3, #76	; 0x4c
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d108      	bne.n	80010be <HAL_PCD_IRQHandler+0x2fa>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80010b6:	461a      	mov	r2, r3
 80010b8:	2101      	movs	r1, #1
 80010ba:	f002 fe21 	bl	8003d00 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d008      	beq.n	80010da <HAL_PCD_IRQHandler+0x316>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	015a      	lsls	r2, r3, #5
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	4413      	add	r3, r2
 80010d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010d4:	461a      	mov	r2, r3
 80010d6:	2308      	movs	r3, #8
 80010d8:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0310 	and.w	r3, r3, #16
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <HAL_PCD_IRQHandler+0x332>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	015a      	lsls	r2, r3, #5
 80010e8:	6a3b      	ldr	r3, [r7, #32]
 80010ea:	4413      	add	r3, r2
 80010ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010f0:	461a      	mov	r2, r3
 80010f2:	2310      	movs	r3, #16
 80010f4:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d008      	beq.n	8001112 <HAL_PCD_IRQHandler+0x34e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	015a      	lsls	r2, r3, #5
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	4413      	add	r3, r2
 8001108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800110c:	461a      	mov	r2, r3
 800110e:	2340      	movs	r3, #64	; 0x40
 8001110:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d008      	beq.n	800112e <HAL_PCD_IRQHandler+0x36a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	015a      	lsls	r2, r3, #5
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	4413      	add	r3, r2
 8001124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001128:	461a      	mov	r2, r3
 800112a:	2302      	movs	r3, #2
 800112c:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_PCD_IRQHandler+0x37c>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 8001138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 fcf1 	bl	8001b22 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	3301      	adds	r3, #1
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001148:	085b      	lsrs	r3, r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	2b00      	cmp	r3, #0
 8001150:	f47f af46 	bne.w	8000fe0 <HAL_PCD_IRQHandler+0x21c>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f002 fd02 	bl	8003b62 <USB_ReadInterrupts>
 800115e:	4603      	mov	r3, r0
 8001160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001168:	d115      	bne.n	8001196 <HAL_PCD_IRQHandler+0x3d2>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001170:	461a      	mov	r2, r3
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f023 0301 	bic.w	r3, r3, #1
 800117e:	6053      	str	r3, [r2, #4]
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f00f f999 	bl	80104b8 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	6812      	ldr	r2, [r2, #0]
 800118e:	6952      	ldr	r2, [r2, #20]
 8001190:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001194:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f002 fce1 	bl	8003b62 <USB_ReadInterrupts>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011aa:	d112      	bne.n	80011d2 <HAL_PCD_IRQHandler+0x40e>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d102      	bne.n	80011c2 <HAL_PCD_IRQHandler+0x3fe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f00f f953 	bl	8010468 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	6952      	ldr	r2, [r2, #20]
 80011cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80011d0:	615a      	str	r2, [r3, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fcc3 	bl	8003b62 <USB_ReadInterrupts>
 80011dc:	4603      	mov	r3, r0
 80011de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011e6:	f040 8091 	bne.w	800130c <HAL_PCD_IRQHandler+0x548>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011f0:	461a      	mov	r2, r3
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f023 0301 	bic.w	r3, r3, #1
 80011fe:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2110      	movs	r1, #16
 8001206:	4618      	mov	r0, r3
 8001208:	f001 fd9c 	bl	8002d44 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001210:	e014      	b.n	800123c <HAL_PCD_IRQHandler+0x478>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8001212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001214:	015a      	lsls	r2, r3, #5
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	4413      	add	r3, r2
 800121a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800121e:	461a      	mov	r2, r3
 8001220:	23ff      	movs	r3, #255	; 0xff
 8001222:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	015a      	lsls	r2, r3, #5
 8001228:	6a3b      	ldr	r3, [r7, #32]
 800122a:	4413      	add	r3, r2
 800122c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001230:	461a      	mov	r2, r3
 8001232:	23ff      	movs	r3, #255	; 0xff
 8001234:	6093      	str	r3, [r2, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	3301      	adds	r3, #1
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001242:	429a      	cmp	r2, r3
 8001244:	d8e5      	bhi.n	8001212 <HAL_PCD_IRQHandler+0x44e>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800124c:	461a      	mov	r2, r3
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800125a:	461a      	mov	r2, r3
 800125c:	6a3b      	ldr	r3, [r7, #32]
 800125e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001268:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	2b00      	cmp	r3, #0
 8001270:	d018      	beq.n	80012a4 <HAL_PCD_IRQHandler+0x4e0>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8001272:	6a3b      	ldr	r3, [r7, #32]
 8001274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001278:	461a      	mov	r2, r3
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001284:	f043 030b 	orr.w	r3, r3, #11
 8001288:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001292:	461a      	mov	r2, r3
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	f043 030b 	orr.w	r3, r3, #11
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	e015      	b.n	80012d0 <HAL_PCD_IRQHandler+0x50c>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012aa:	461a      	mov	r2, r3
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	f043 030b 	orr.w	r3, r3, #11
 80012b8:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012c0:	461a      	mov	r2, r3
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	f043 030b 	orr.w	r3, r3, #11
 80012ce:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012d6:	461a      	mov	r2, r3
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80012e4:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	b2d9      	uxtb	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80012f6:	461a      	mov	r2, r3
 80012f8:	f002 fd02 	bl	8003d00 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	6952      	ldr	r2, [r2, #20]
 8001306:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800130a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f002 fc26 	bl	8003b62 <USB_ReadInterrupts>
 8001316:	4603      	mov	r3, r0
 8001318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800131c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001320:	f040 80da 	bne.w	80014d8 <HAL_PCD_IRQHandler+0x714>
    {
      USB_ActivateSetup(hpcd->Instance);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f002 fcb3 	bl	8003c94 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	68d2      	ldr	r2, [r2, #12]
 8001338:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800133c:	60da      	str	r2, [r3, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f001 fd5e 	bl	8002e04 <USB_GetDevSpeed>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10f      	bne.n	800136e <HAL_PCD_IRQHandler+0x5aa>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135a:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	68d2      	ldr	r2, [r2, #12]
 8001366:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	e0a9      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2203      	movs	r2, #3
 8001372:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2240      	movs	r2, #64	; 0x40
 8001378:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 800137a:	f001 f8ad 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 800137e:	6138      	str	r0, [r7, #16]
        
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4a7b      	ldr	r2, [pc, #492]	; (8001570 <HAL_PCD_IRQHandler+0x7ac>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d90c      	bls.n	80013a2 <HAL_PCD_IRQHandler+0x5de>
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4a7a      	ldr	r2, [pc, #488]	; (8001574 <HAL_PCD_IRQHandler+0x7b0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d808      	bhi.n	80013a2 <HAL_PCD_IRQHandler+0x5de>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	68d2      	ldr	r2, [r2, #12]
 800139a:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	e08f      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4a73      	ldr	r2, [pc, #460]	; (8001574 <HAL_PCD_IRQHandler+0x7b0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d90c      	bls.n	80013c4 <HAL_PCD_IRQHandler+0x600>
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4a72      	ldr	r2, [pc, #456]	; (8001578 <HAL_PCD_IRQHandler+0x7b4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d808      	bhi.n	80013c4 <HAL_PCD_IRQHandler+0x600>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	68d2      	ldr	r2, [r2, #12]
 80013bc:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	e07e      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4a6c      	ldr	r2, [pc, #432]	; (8001578 <HAL_PCD_IRQHandler+0x7b4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d90c      	bls.n	80013e6 <HAL_PCD_IRQHandler+0x622>
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4a6b      	ldr	r2, [pc, #428]	; (800157c <HAL_PCD_IRQHandler+0x7b8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d808      	bhi.n	80013e6 <HAL_PCD_IRQHandler+0x622>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	68d2      	ldr	r2, [r2, #12]
 80013de:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	e06d      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4a64      	ldr	r2, [pc, #400]	; (800157c <HAL_PCD_IRQHandler+0x7b8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d90c      	bls.n	8001408 <HAL_PCD_IRQHandler+0x644>
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4a63      	ldr	r2, [pc, #396]	; (8001580 <HAL_PCD_IRQHandler+0x7bc>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d808      	bhi.n	8001408 <HAL_PCD_IRQHandler+0x644>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	68d2      	ldr	r2, [r2, #12]
 8001400:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	e05c      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4a5d      	ldr	r2, [pc, #372]	; (8001580 <HAL_PCD_IRQHandler+0x7bc>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d90c      	bls.n	800142a <HAL_PCD_IRQHandler+0x666>
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4a5c      	ldr	r2, [pc, #368]	; (8001584 <HAL_PCD_IRQHandler+0x7c0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d808      	bhi.n	800142a <HAL_PCD_IRQHandler+0x666>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	68d2      	ldr	r2, [r2, #12]
 8001422:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	e04b      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4a55      	ldr	r2, [pc, #340]	; (8001584 <HAL_PCD_IRQHandler+0x7c0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d90c      	bls.n	800144c <HAL_PCD_IRQHandler+0x688>
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4a54      	ldr	r2, [pc, #336]	; (8001588 <HAL_PCD_IRQHandler+0x7c4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d808      	bhi.n	800144c <HAL_PCD_IRQHandler+0x688>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	68d2      	ldr	r2, [r2, #12]
 8001444:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	e03a      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4a4e      	ldr	r2, [pc, #312]	; (8001588 <HAL_PCD_IRQHandler+0x7c4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d90c      	bls.n	800146e <HAL_PCD_IRQHandler+0x6aa>
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4a4d      	ldr	r2, [pc, #308]	; (800158c <HAL_PCD_IRQHandler+0x7c8>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d808      	bhi.n	800146e <HAL_PCD_IRQHandler+0x6aa>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	68d2      	ldr	r2, [r2, #12]
 8001466:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	e029      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4a46      	ldr	r2, [pc, #280]	; (800158c <HAL_PCD_IRQHandler+0x7c8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d90c      	bls.n	8001490 <HAL_PCD_IRQHandler+0x6cc>
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4a45      	ldr	r2, [pc, #276]	; (8001590 <HAL_PCD_IRQHandler+0x7cc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d808      	bhi.n	8001490 <HAL_PCD_IRQHandler+0x6cc>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	68d2      	ldr	r2, [r2, #12]
 8001488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	e018      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4a3f      	ldr	r2, [pc, #252]	; (8001590 <HAL_PCD_IRQHandler+0x7cc>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d90c      	bls.n	80014b2 <HAL_PCD_IRQHandler+0x6ee>
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4a3e      	ldr	r2, [pc, #248]	; (8001594 <HAL_PCD_IRQHandler+0x7d0>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d808      	bhi.n	80014b2 <HAL_PCD_IRQHandler+0x6ee>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6812      	ldr	r2, [r2, #0]
 80014a8:	68d2      	ldr	r2, [r2, #12]
 80014aa:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	e007      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	68d2      	ldr	r2, [r2, #12]
 80014bc:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 80014c0:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f00e ffa7 	bl	8010416 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	6952      	ldr	r2, [r2, #20]
 80014d2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80014d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 fb40 	bl	8003b62 <USB_ReadInterrupts>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	2b10      	cmp	r3, #16
 80014ea:	d174      	bne.n	80015d6 <HAL_PCD_IRQHandler+0x812>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	6992      	ldr	r2, [r2, #24]
 80014f6:	f022 0210 	bic.w	r2, r2, #16
 80014fa:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 020f 	and.w	r2, r3, #15
 8001508:	4613      	mov	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	1a9b      	subs	r3, r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	0c5b      	lsrs	r3, r3, #17
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	2b02      	cmp	r3, #2
 8001524:	d138      	bne.n	8001598 <HAL_PCD_IRQHandler+0x7d4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d049      	beq.n	80015c6 <HAL_PCD_IRQHandler+0x802>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	68d9      	ldr	r1, [r3, #12]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	b29b      	uxth	r3, r3
 800153c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001540:	b29b      	uxth	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	6a38      	ldr	r0, [r7, #32]
 8001546:	f002 f9b3 	bl	80038b0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001556:	441a      	add	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	699a      	ldr	r2, [r3, #24]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001568:	441a      	add	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	619a      	str	r2, [r3, #24]
 800156e:	e02a      	b.n	80015c6 <HAL_PCD_IRQHandler+0x802>
 8001570:	00d8acbf 	.word	0x00d8acbf
 8001574:	00e4e1bf 	.word	0x00e4e1bf
 8001578:	00f423ff 	.word	0x00f423ff
 800157c:	0106737f 	.word	0x0106737f
 8001580:	011a499f 	.word	0x011a499f
 8001584:	01312cff 	.word	0x01312cff
 8001588:	014ca43f 	.word	0x014ca43f
 800158c:	016e35ff 	.word	0x016e35ff
 8001590:	01a6ab1f 	.word	0x01a6ab1f
 8001594:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	0c5b      	lsrs	r3, r3, #17
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	2b06      	cmp	r3, #6
 80015a2:	d110      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x802>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80015aa:	2208      	movs	r2, #8
 80015ac:	4619      	mov	r1, r3
 80015ae:	6a38      	ldr	r0, [r7, #32]
 80015b0:	f002 f97e 	bl	80038b0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	699a      	ldr	r2, [r3, #24]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c0:	441a      	add	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	6992      	ldr	r2, [r2, #24]
 80015d0:	f042 0210 	orr.w	r2, r2, #16
 80015d4:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fac1 	bl	8003b62 <USB_ReadInterrupts>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d10a      	bne.n	8001600 <HAL_PCD_IRQHandler+0x83c>
    {
      HAL_PCD_SOFCallback(hpcd);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f00e ff05 	bl	80103fa <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	6952      	ldr	r2, [r2, #20]
 80015fa:	f002 0208 	and.w	r2, r2, #8
 80015fe:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f002 faac 	bl	8003b62 <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001610:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001614:	d10d      	bne.n	8001632 <HAL_PCD_IRQHandler+0x86e>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4619      	mov	r1, r3
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f00e ff6b 	bl	80104f8 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	6952      	ldr	r2, [r2, #20]
 800162c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001630:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f002 fa93 	bl	8003b62 <USB_ReadInterrupts>
 800163c:	4603      	mov	r3, r0
 800163e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001646:	d10d      	bne.n	8001664 <HAL_PCD_IRQHandler+0x8a0>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	b2db      	uxtb	r3, r3
 800164c:	4619      	mov	r1, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f00e ff40 	bl	80104d4 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	6952      	ldr	r2, [r2, #20]
 800165e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001662:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f002 fa7a 	bl	8003b62 <USB_ReadInterrupts>
 800166e:	4603      	mov	r3, r0
 8001670:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001678:	d10a      	bne.n	8001690 <HAL_PCD_IRQHandler+0x8cc>
    {
      HAL_PCD_ConnectCallback(hpcd);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f00e ff4e 	bl	801051c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	6952      	ldr	r2, [r2, #20]
 800168a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800168e:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f002 fa64 	bl	8003b62 <USB_ReadInterrupts>
 800169a:	4603      	mov	r3, r0
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d115      	bne.n	80016d0 <HAL_PCD_IRQHandler+0x90c>
    {
      temp = hpcd->Instance->GOTGINT;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <HAL_PCD_IRQHandler+0x8f8>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f00e ff3e 	bl	8010538 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	6851      	ldr	r1, [r2, #4]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	e000      	b.n	80016d0 <HAL_PCD_IRQHandler+0x90c>
      return;
 80016ce:	bf00      	nop
    }
  }
}
 80016d0:	3730      	adds	r7, #48	; 0x30
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop

080016d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_PCD_SetAddress+0x1a>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e00f      	b.n	8001712 <HAL_PCD_SetAddress+0x3a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f002 f9d9 	bl	8003aba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	4608      	mov	r0, r1
 8001724:	4611      	mov	r1, r2
 8001726:	461a      	mov	r2, r3
 8001728:	4603      	mov	r3, r0
 800172a:	70fb      	strb	r3, [r7, #3]
 800172c:	460b      	mov	r3, r1
 800172e:	803b      	strh	r3, [r7, #0]
 8001730:	4613      	mov	r3, r2
 8001732:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8001738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800173c:	2b00      	cmp	r3, #0
 800173e:	da0b      	bge.n	8001758 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	1a9b      	subs	r3, r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	3338      	adds	r3, #56	; 0x38
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	e00b      	b.n	8001770 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800175e:	4613      	mov	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	1a9b      	subs	r3, r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001776:	b2da      	uxtb	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800177c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	09db      	lsrs	r3, r3, #7
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 800178c:	883a      	ldrh	r2, [r7, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	78ba      	ldrb	r2, [r7, #2]
 8001796:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	785b      	ldrb	r3, [r3, #1]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 80017aa:	78bb      	ldrb	r3, [r7, #2]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d102      	bne.n	80017b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	711a      	strb	r2, [r3, #4]
  }
  
  __HAL_LOCK(hpcd); 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_PCD_EP_Open+0xaa>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e00e      	b.n	80017e2 <HAL_PCD_EP_Open+0xc8>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68f9      	ldr	r1, [r7, #12]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f001 fb4b 	bl	8002e6e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 80017e0:	7afb      	ldrb	r3, [r7, #11]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80017f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	da0b      	bge.n	8001816 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	1a9b      	subs	r3, r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	3338      	adds	r3, #56	; 0x38
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e00b      	b.n	800182e <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800181c:	4613      	mov	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001834:	b2da      	uxtb	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800183a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	09db      	lsrs	r3, r3, #7
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_PCD_EP_Close+0x6e>
 8001854:	2302      	movs	r3, #2
 8001856:	e00e      	b.n	8001876 <HAL_PCD_EP_Close+0x8c>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68f9      	ldr	r1, [r7, #12]
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fb8a 	bl	8002f80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	460b      	mov	r3, r1
 800188c:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800188e:	7afb      	ldrb	r3, [r7, #11]
 8001890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2200      	movs	r2, #0
 80018bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 80018be:	7afb      	ldrb	r3, [r7, #11]
 80018c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d102      	bne.n	80018d8 <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 80018d8:	7afb      	ldrb	r3, [r7, #11]
 80018da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	6979      	ldr	r1, [r7, #20]
 80018f0:	f001 fe4a 	bl	8003588 <USB_EP0StartXfer>
 80018f4:	e008      	b.n	8001908 <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	6979      	ldr	r1, [r7, #20]
 8001904:	f001 fbfe 	bl	8003104 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	f003 020f 	and.w	r2, r3, #15
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b29b      	uxth	r3, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	460b      	mov	r3, r1
 8001952:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001954:	7afb      	ldrb	r3, [r7, #11]
 8001956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800195a:	4613      	mov	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	3338      	adds	r3, #56	; 0x38
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2201      	movs	r2, #1
 8001980:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8001982:	7afb      	ldrb	r3, [r7, #11]
 8001984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001988:	b2da      	uxtb	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d102      	bne.n	800199c <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 800199c:	7afb      	ldrb	r3, [r7, #11]
 800199e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	6979      	ldr	r1, [r7, #20]
 80019b4:	f001 fde8 	bl	8003588 <USB_EP0StartXfer>
 80019b8:	e008      	b.n	80019cc <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	6979      	ldr	r1, [r7, #20]
 80019c8:	f001 fb9c 	bl	8003104 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 80019e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	da0b      	bge.n	8001a02 <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019f0:	4613      	mov	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	3338      	adds	r3, #56	; 0x38
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e009      	b.n	8001a16 <HAL_PCD_EP_SetStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001a28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	09db      	lsrs	r3, r3, #7
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <HAL_PCD_EP_SetStall+0x70>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e01e      	b.n	8001a84 <HAL_PCD_EP_SetStall+0xae>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68f9      	ldr	r1, [r7, #12]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f001 ff52 	bl	80038fe <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10a      	bne.n	8001a7a <HAL_PCD_EP_SetStall+0xa4>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	b2d9      	uxtb	r1, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001a74:	461a      	mov	r2, r3
 8001a76:	f002 f943 	bl	8003d00 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8001a98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	da0b      	bge.n	8001ab8 <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	3338      	adds	r3, #56	; 0x38
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	e009      	b.n	8001acc <HAL_PCD_EP_ClrStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	4613      	mov	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	09db      	lsrs	r3, r3, #7
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_PCD_EP_ClrStall+0x70>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e00e      	b.n	8001b1a <HAL_PCD_EP_ClrStall+0x8e>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68f9      	ldr	r1, [r7, #12]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f001 ff68 	bl	80039e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b08a      	sub	sp, #40	; 0x28
 8001b26:	af02      	add	r7, sp, #8
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	3338      	adds	r3, #56	; 0x38
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d202      	bcs.n	8001b68 <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3U) / 4U;
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	3303      	adds	r3, #3
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	61bb      	str	r3, [r7, #24]
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b70:	e02b      	b.n	8001bca <PCD_WriteEmptyTxFifo+0xa8>
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d202      	bcs.n	8001b8e <PCD_WriteEmptyTxFifo+0x6c>
    {
      len = ep->maxpacket;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3303      	adds	r3, #3
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	68d9      	ldr	r1, [r3, #12]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	b298      	uxth	r0, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	4603      	mov	r3, r0
 8001bac:	6978      	ldr	r0, [r7, #20]
 8001bae:	f001 fe4a 	bl	8003846 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	441a      	add	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	699a      	ldr	r2, [r3, #24]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	441a      	add	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	619a      	str	r2, [r3, #24]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d909      	bls.n	8001bf4 <PCD_WriteEmptyTxFifo+0xd2>
          (ep->xfer_count < ep->xfer_len) &&
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	699a      	ldr	r2, [r3, #24]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	695b      	ldr	r3, [r3, #20]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d203      	bcs.n	8001bf4 <PCD_WriteEmptyTxFifo+0xd2>
            (ep->xfer_len != 0U))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	695b      	ldr	r3, [r3, #20]
          (ep->xfer_count < ep->xfer_len) &&
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1be      	bne.n	8001b72 <PCD_WriteEmptyTxFifo+0x50>
  }
  
  if(len <= 0U)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d110      	bne.n	8001c1c <PCD_WriteEmptyTxFifo+0xfa>
  {
    fifoemptymsk = 0x1U << epnum;
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b085      	sub	sp, #20
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	70fb      	strb	r3, [r7, #3]
 8001c32:	4613      	mov	r3, r2
 8001c34:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d107      	bne.n	8001c5c <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	883a      	ldrh	r2, [r7, #0]
 8001c52:	0411      	lsls	r1, r2, #16
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28
 8001c5a:	e028      	b.n	8001cae <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	4413      	add	r3, r2
 8001c68:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	e00d      	b.n	8001c8c <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	3340      	adds	r3, #64	; 0x40
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	0c1b      	lsrs	r3, r3, #16
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	4413      	add	r3, r2
 8001c84:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dbec      	blt.n	8001c70 <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6819      	ldr	r1, [r3, #0]
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	883a      	ldrh	r2, [r7, #0]
 8001ca0:	0410      	lsls	r0, r2, #16
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	4302      	orrs	r2, r0
 8001ca6:	3340      	adds	r3, #64	; 0x40
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	887a      	ldrh	r2, [r7, #2]
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e22d      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d075      	beq.n	8001dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cfe:	4ba3      	ldr	r3, [pc, #652]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d00c      	beq.n	8001d24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0a:	4ba0      	ldr	r3, [pc, #640]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d112      	bne.n	8001d3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d16:	4b9d      	ldr	r3, [pc, #628]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d22:	d10b      	bne.n	8001d3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	4b99      	ldr	r3, [pc, #612]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d05b      	beq.n	8001de8 <HAL_RCC_OscConfig+0x108>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d157      	bne.n	8001de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e208      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	d106      	bne.n	8001d54 <HAL_RCC_OscConfig+0x74>
 8001d46:	4a91      	ldr	r2, [pc, #580]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	4b90      	ldr	r3, [pc, #576]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e01d      	b.n	8001d90 <HAL_RCC_OscConfig+0xb0>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x98>
 8001d5e:	4a8b      	ldr	r2, [pc, #556]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	4b8a      	ldr	r3, [pc, #552]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4a88      	ldr	r2, [pc, #544]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	4b87      	ldr	r3, [pc, #540]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e00b      	b.n	8001d90 <HAL_RCC_OscConfig+0xb0>
 8001d78:	4a84      	ldr	r2, [pc, #528]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d7a:	4b84      	ldr	r3, [pc, #528]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4a81      	ldr	r2, [pc, #516]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	4b81      	ldr	r3, [pc, #516]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d013      	beq.n	8001dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7fe fbe8 	bl	800056c <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da0:	f7fe fbe4 	bl	800056c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e1cd      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0xc0>
 8001dbe:	e014      	b.n	8001dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fbd4 	bl	800056c <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7fe fbd0 	bl	800056c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e1b9      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dda:	4b6c      	ldr	r3, [pc, #432]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0xe8>
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d063      	beq.n	8001ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001df6:	4b65      	ldr	r3, [pc, #404]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00b      	beq.n	8001e1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e02:	4b62      	ldr	r3, [pc, #392]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d11c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e0e:	4b5f      	ldr	r3, [pc, #380]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d116      	bne.n	8001e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1a:	4b5c      	ldr	r3, [pc, #368]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_RCC_OscConfig+0x152>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d001      	beq.n	8001e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e18d      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e32:	4956      	ldr	r1, [pc, #344]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	4b55      	ldr	r3, [pc, #340]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e46:	e03a      	b.n	8001ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d020      	beq.n	8001e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e50:	4b4f      	ldr	r3, [pc, #316]	; (8001f90 <HAL_RCC_OscConfig+0x2b0>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e56:	f7fe fb89 	bl	800056c <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e5e:	f7fe fb85 	bl	800056c <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e16e      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7c:	4943      	ldr	r1, [pc, #268]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	4b43      	ldr	r3, [pc, #268]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]
 8001e90:	e015      	b.n	8001ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e92:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <HAL_RCC_OscConfig+0x2b0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7fe fb68 	bl	800056c <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea0:	f7fe fb64 	bl	800056c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e14d      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb2:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d030      	beq.n	8001f2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d016      	beq.n	8001f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed2:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <HAL_RCC_OscConfig+0x2b4>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed8:	f7fe fb48 	bl	800056c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7fe fb44 	bl	800056c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e12d      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x200>
 8001efe:	e015      	b.n	8001f2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f00:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <HAL_RCC_OscConfig+0x2b4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f06:	f7fe fb31 	bl	800056c <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f0e:	f7fe fb2d 	bl	800056c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e116      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80a0 	beq.w	800207a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10f      	bne.n	8001f6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f58:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f66:	2301      	movs	r3, #1
 8001f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_OscConfig+0x2b8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d121      	bne.n	8001fba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f76:	4a08      	ldr	r2, [pc, #32]	; (8001f98 <HAL_RCC_OscConfig+0x2b8>)
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <HAL_RCC_OscConfig+0x2b8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f82:	f7fe faf3 	bl	800056c <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	e011      	b.n	8001fae <HAL_RCC_OscConfig+0x2ce>
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	42470000 	.word	0x42470000
 8001f94:	42470e80 	.word	0x42470e80
 8001f98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9c:	f7fe fae6 	bl	800056c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e0cf      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fae:	4b6a      	ldr	r3, [pc, #424]	; (8002158 <HAL_RCC_OscConfig+0x478>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d106      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
 8001fc2:	4a66      	ldr	r2, [pc, #408]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fc4:	4b65      	ldr	r3, [pc, #404]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001fce:	e01c      	b.n	800200a <HAL_RCC_OscConfig+0x32a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d10c      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x312>
 8001fd8:	4a60      	ldr	r2, [pc, #384]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fda:	4b60      	ldr	r3, [pc, #384]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fde:	f043 0304 	orr.w	r3, r3, #4
 8001fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe4:	4a5d      	ldr	r2, [pc, #372]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff0:	e00b      	b.n	800200a <HAL_RCC_OscConfig+0x32a>
 8001ff2:	4a5a      	ldr	r2, [pc, #360]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001ff4:	4b59      	ldr	r3, [pc, #356]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	4a57      	ldr	r2, [pc, #348]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8002000:	4b56      	ldr	r3, [pc, #344]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	f023 0304 	bic.w	r3, r3, #4
 8002008:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d015      	beq.n	800203e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002012:	f7fe faab 	bl	800056c <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	e00a      	b.n	8002030 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7fe faa7 	bl	800056c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	f241 3288 	movw	r2, #5000	; 0x1388
 8002028:	4293      	cmp	r3, r2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e08e      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002030:	4b4a      	ldr	r3, [pc, #296]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8002032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0ee      	beq.n	800201a <HAL_RCC_OscConfig+0x33a>
 800203c:	e014      	b.n	8002068 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203e:	f7fe fa95 	bl	800056c <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7fe fa91 	bl	800056c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f241 3288 	movw	r2, #5000	; 0x1388
 8002054:	4293      	cmp	r3, r2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e078      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205c:	4b3f      	ldr	r3, [pc, #252]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ee      	bne.n	8002046 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002068:	7dfb      	ldrb	r3, [r7, #23]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d105      	bne.n	800207a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206e:	4a3b      	ldr	r2, [pc, #236]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8002070:	4b3a      	ldr	r3, [pc, #232]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002078:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d064      	beq.n	800214c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b08      	cmp	r3, #8
 800208c:	d05c      	beq.n	8002148 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d141      	bne.n	800211a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002096:	4b32      	ldr	r3, [pc, #200]	; (8002160 <HAL_RCC_OscConfig+0x480>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7fe fa66 	bl	800056c <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a4:	f7fe fa62 	bl	800056c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e04b      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	4b29      	ldr	r3, [pc, #164]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020c2:	4926      	ldr	r1, [pc, #152]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69da      	ldr	r2, [r3, #28]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	019b      	lsls	r3, r3, #6
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	085b      	lsrs	r3, r3, #1
 80020dc:	3b01      	subs	r3, #1
 80020de:	041b      	lsls	r3, r3, #16
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	061b      	lsls	r3, r3, #24
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ec:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <HAL_RCC_OscConfig+0x480>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7fe fa3b 	bl	800056c <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fa:	f7fe fa37 	bl	800056c <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e020      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x41a>
 8002118:	e018      	b.n	800214c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_RCC_OscConfig+0x480>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7fe fa24 	bl	800056c <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002128:	f7fe fa20 	bl	800056c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e009      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x448>
 8002146:	e001      	b.n	800214c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40007000 	.word	0x40007000
 800215c:	40023800 	.word	0x40023800
 8002160:	42470060 	.word	0x42470060

08002164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0ca      	b.n	800230e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002178:	4b67      	ldr	r3, [pc, #412]	; (8002318 <HAL_RCC_ClockConfig+0x1b4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 020f 	and.w	r2, r3, #15
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d20c      	bcs.n	80021a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b64      	ldr	r3, [pc, #400]	; (8002318 <HAL_RCC_ClockConfig+0x1b4>)
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b62      	ldr	r3, [pc, #392]	; (8002318 <HAL_RCC_ClockConfig+0x1b4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 020f 	and.w	r2, r3, #15
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0b6      	b.n	800230e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d020      	beq.n	80021ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b8:	4a58      	ldr	r2, [pc, #352]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80021ba:	4b58      	ldr	r3, [pc, #352]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021d0:	4a52      	ldr	r2, [pc, #328]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80021d2:	4b52      	ldr	r3, [pc, #328]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021dc:	494f      	ldr	r1, [pc, #316]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80021de:	4b4f      	ldr	r3, [pc, #316]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d044      	beq.n	8002284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	4b46      	ldr	r3, [pc, #280]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d119      	bne.n	8002242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e07d      	b.n	800230e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d003      	beq.n	8002222 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800221e:	2b03      	cmp	r3, #3
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002222:	4b3e      	ldr	r3, [pc, #248]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e06d      	b.n	800230e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002232:	4b3a      	ldr	r3, [pc, #232]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e065      	b.n	800230e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002242:	4936      	ldr	r1, [pc, #216]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	4b35      	ldr	r3, [pc, #212]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f023 0203 	bic.w	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4313      	orrs	r3, r2
 8002252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002254:	f7fe f98a 	bl	800056c <HAL_GetTick>
 8002258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225a:	e00a      	b.n	8002272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225c:	f7fe f986 	bl	800056c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	f241 3288 	movw	r2, #5000	; 0x1388
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e04d      	b.n	800230e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 020c 	and.w	r2, r3, #12
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	429a      	cmp	r2, r3
 8002282:	d1eb      	bne.n	800225c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002284:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCC_ClockConfig+0x1b4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 020f 	and.w	r2, r3, #15
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d90c      	bls.n	80022ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_RCC_ClockConfig+0x1b4>)
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_RCC_ClockConfig+0x1b4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 020f 	and.w	r2, r3, #15
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e030      	b.n	800230e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b8:	4918      	ldr	r1, [pc, #96]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d6:	4911      	ldr	r1, [pc, #68]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	4b10      	ldr	r3, [pc, #64]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ea:	f000 f81d 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80022ee:	4601      	mov	r1, r0
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	4a09      	ldr	r2, [pc, #36]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	5cd3      	ldrb	r3, [r2, r3]
 80022fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002302:	4a08      	ldr	r2, [pc, #32]	; (8002324 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002306:	2000      	movs	r0, #0
 8002308:	f00d ff0c 	bl	8010124 <HAL_InitTick>

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40023c00 	.word	0x40023c00
 800231c:	40023800 	.word	0x40023800
 8002320:	080110cc 	.word	0x080110cc
 8002324:	200000c0 	.word	0x200000c0

08002328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800232c:	b08f      	sub	sp, #60	; 0x3c
 800232e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002334:	2300      	movs	r3, #0
 8002336:	637b      	str	r3, [r7, #52]	; 0x34
 8002338:	2300      	movs	r3, #0
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002340:	4b62      	ldr	r3, [pc, #392]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b04      	cmp	r3, #4
 800234a:	d007      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x34>
 800234c:	2b08      	cmp	r3, #8
 800234e:	d008      	beq.n	8002362 <HAL_RCC_GetSysClockFreq+0x3a>
 8002350:	2b00      	cmp	r3, #0
 8002352:	f040 80b2 	bne.w	80024ba <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002356:	4b5e      	ldr	r3, [pc, #376]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002358:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800235a:	e0b1      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800235c:	4b5d      	ldr	r3, [pc, #372]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002360:	e0ae      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002362:	4b5a      	ldr	r3, [pc, #360]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800236c:	4b57      	ldr	r3, [pc, #348]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d04e      	beq.n	8002416 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002378:	4b54      	ldr	r3, [pc, #336]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	099b      	lsrs	r3, r3, #6
 800237e:	f04f 0400 	mov.w	r4, #0
 8002382:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	ea01 0103 	and.w	r1, r1, r3
 800238e:	ea02 0204 	and.w	r2, r2, r4
 8002392:	460b      	mov	r3, r1
 8002394:	4614      	mov	r4, r2
 8002396:	0160      	lsls	r0, r4, #5
 8002398:	6278      	str	r0, [r7, #36]	; 0x24
 800239a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800239c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80023a0:	6278      	str	r0, [r7, #36]	; 0x24
 80023a2:	015b      	lsls	r3, r3, #5
 80023a4:	623b      	str	r3, [r7, #32]
 80023a6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80023aa:	1a5b      	subs	r3, r3, r1
 80023ac:	eb64 0402 	sbc.w	r4, r4, r2
 80023b0:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80023b4:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80023b8:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80023bc:	ebb8 0803 	subs.w	r8, r8, r3
 80023c0:	eb69 0904 	sbc.w	r9, r9, r4
 80023c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80023dc:	eb18 0801 	adds.w	r8, r8, r1
 80023e0:	eb49 0902 	adc.w	r9, r9, r2
 80023e4:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80023fc:	4640      	mov	r0, r8
 80023fe:	4649      	mov	r1, r9
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002402:	f04f 0400 	mov.w	r4, #0
 8002406:	461a      	mov	r2, r3
 8002408:	4623      	mov	r3, r4
 800240a:	f7fd fef1 	bl	80001f0 <__aeabi_uldivmod>
 800240e:	4603      	mov	r3, r0
 8002410:	460c      	mov	r4, r1
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
 8002414:	e043      	b.n	800249e <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002416:	4b2d      	ldr	r3, [pc, #180]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	099b      	lsrs	r3, r3, #6
 800241c:	f04f 0400 	mov.w	r4, #0
 8002420:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	ea01 0103 	and.w	r1, r1, r3
 800242c:	ea02 0204 	and.w	r2, r2, r4
 8002430:	460b      	mov	r3, r1
 8002432:	4614      	mov	r4, r2
 8002434:	0160      	lsls	r0, r4, #5
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	015b      	lsls	r3, r3, #5
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002448:	1a5b      	subs	r3, r3, r1
 800244a:	eb64 0402 	sbc.w	r4, r4, r2
 800244e:	01a6      	lsls	r6, r4, #6
 8002450:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002454:	019d      	lsls	r5, r3, #6
 8002456:	1aed      	subs	r5, r5, r3
 8002458:	eb66 0604 	sbc.w	r6, r6, r4
 800245c:	00f3      	lsls	r3, r6, #3
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002466:	607b      	str	r3, [r7, #4]
 8002468:	00eb      	lsls	r3, r5, #3
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002470:	186d      	adds	r5, r5, r1
 8002472:	eb46 0602 	adc.w	r6, r6, r2
 8002476:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800247a:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800247e:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002482:	4655      	mov	r5, sl
 8002484:	465e      	mov	r6, fp
 8002486:	4628      	mov	r0, r5
 8002488:	4631      	mov	r1, r6
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	f04f 0400 	mov.w	r4, #0
 8002490:	461a      	mov	r2, r3
 8002492:	4623      	mov	r3, r4
 8002494:	f7fd feac 	bl	80001f0 <__aeabi_uldivmod>
 8002498:	4603      	mov	r3, r0
 800249a:	460c      	mov	r4, r1
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	0c1b      	lsrs	r3, r3, #16
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	3301      	adds	r3, #1
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80024ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024b8:	e002      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	373c      	adds	r7, #60	; 0x3c
 80024c6:	46bd      	mov	sp, r7
 80024c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024cc:	40023800 	.word	0x40023800
 80024d0:	00f42400 	.word	0x00f42400
 80024d4:	007a1200 	.word	0x007a1200

080024d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_RCC_GetHCLKFreq+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	200000c0 	.word	0x200000c0

080024f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024f4:	f7ff fff0 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 80024f8:	4601      	mov	r1, r0
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	0b5b      	lsrs	r3, r3, #13
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4a03      	ldr	r2, [pc, #12]	; (8002514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002506:	5cd3      	ldrb	r3, [r2, r3]
 8002508:	fa21 f303 	lsr.w	r3, r1, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40023800 	.word	0x40023800
 8002514:	080110dc 	.word	0x080110dc

08002518 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	220f      	movs	r2, #15
 8002526:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_RCC_GetClockConfig+0x5c>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0203 	and.w	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_RCC_GetClockConfig+0x5c>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_RCC_GetClockConfig+0x5c>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_RCC_GetClockConfig+0x5c>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	08db      	lsrs	r3, r3, #3
 8002552:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <HAL_RCC_GetClockConfig+0x60>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 020f 	and.w	r2, r3, #15
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	601a      	str	r2, [r3, #0]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	40023c00 	.word	0x40023c00

0800257c <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e01d      	b.n	80025ca <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f815 	bl	80025d2 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f000 f95e 	bl	800287c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	68d2      	ldr	r2, [r2, #12]
 80025f8:	f042 0201 	orr.w	r2, r2, #1
 80025fc:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	f042 0201 	orr.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d122      	bne.n	8002678 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b02      	cmp	r3, #2
 800263e:	d11b      	bne.n	8002678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0202 	mvn.w	r2, #2
 8002648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8ee 	bl	8002840 <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f8e0 	bl	800282c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f8f1 	bl	8002854 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b04      	cmp	r3, #4
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b04      	cmp	r3, #4
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0204 	mvn.w	r2, #4
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f8c4 	bl	8002840 <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f8b6 	bl	800282c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f8c7 	bl	8002854 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0208 	mvn.w	r2, #8
 80026f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2204      	movs	r2, #4
 80026f6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f89a 	bl	8002840 <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f88c 	bl	800282c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f89d 	bl	8002854 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b10      	cmp	r3, #16
 800272c:	d122      	bne.n	8002774 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b10      	cmp	r3, #16
 800273a:	d11b      	bne.n	8002774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0210 	mvn.w	r2, #16
 8002744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2208      	movs	r2, #8
 800274a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f870 	bl	8002840 <HAL_TIM_IC_CaptureCallback>
 8002760:	e005      	b.n	800276e <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f862 	bl	800282c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f873 	bl	8002854 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10e      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d107      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0201 	mvn.w	r2, #1
 8002798:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f00d fc58 	bl	8010050 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b80      	cmp	r3, #128	; 0x80
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b8:	2b80      	cmp	r3, #128	; 0x80
 80027ba:	d107      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8e6 	bl	8002998 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b40      	cmp	r3, #64	; 0x40
 80027d8:	d10e      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e4:	2b40      	cmp	r3, #64	; 0x40
 80027e6:	d107      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f838 	bl	8002868 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b20      	cmp	r3, #32
 8002804:	d10e      	bne.n	8002824 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b20      	cmp	r3, #32
 8002812:	d107      	bne.n	8002824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0220 	mvn.w	r2, #32
 800281c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8b0 	bl	8002984 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a35      	ldr	r2, [pc, #212]	; (8002968 <TIM_Base_SetConfig+0xec>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00f      	beq.n	80028b8 <TIM_Base_SetConfig+0x3c>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289e:	d00b      	beq.n	80028b8 <TIM_Base_SetConfig+0x3c>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a32      	ldr	r2, [pc, #200]	; (800296c <TIM_Base_SetConfig+0xf0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d007      	beq.n	80028b8 <TIM_Base_SetConfig+0x3c>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a31      	ldr	r2, [pc, #196]	; (8002970 <TIM_Base_SetConfig+0xf4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d003      	beq.n	80028b8 <TIM_Base_SetConfig+0x3c>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a30      	ldr	r2, [pc, #192]	; (8002974 <TIM_Base_SetConfig+0xf8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d101      	bne.n	80028bc <TIM_Base_SetConfig+0x40>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <TIM_Base_SetConfig+0x42>
 80028bc:	2300      	movs	r3, #0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a24      	ldr	r2, [pc, #144]	; (8002968 <TIM_Base_SetConfig+0xec>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d01b      	beq.n	8002914 <TIM_Base_SetConfig+0x98>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e2:	d017      	beq.n	8002914 <TIM_Base_SetConfig+0x98>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a21      	ldr	r2, [pc, #132]	; (800296c <TIM_Base_SetConfig+0xf0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d013      	beq.n	8002914 <TIM_Base_SetConfig+0x98>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a20      	ldr	r2, [pc, #128]	; (8002970 <TIM_Base_SetConfig+0xf4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00f      	beq.n	8002914 <TIM_Base_SetConfig+0x98>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a1f      	ldr	r2, [pc, #124]	; (8002974 <TIM_Base_SetConfig+0xf8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00b      	beq.n	8002914 <TIM_Base_SetConfig+0x98>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a1e      	ldr	r2, [pc, #120]	; (8002978 <TIM_Base_SetConfig+0xfc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d007      	beq.n	8002914 <TIM_Base_SetConfig+0x98>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a1d      	ldr	r2, [pc, #116]	; (800297c <TIM_Base_SetConfig+0x100>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d003      	beq.n	8002914 <TIM_Base_SetConfig+0x98>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <TIM_Base_SetConfig+0x104>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d101      	bne.n	8002918 <TIM_Base_SetConfig+0x9c>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <TIM_Base_SetConfig+0x9e>
 8002918:	2300      	movs	r3, #0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <TIM_Base_SetConfig+0xec>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d103      	bne.n	8002956 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	615a      	str	r2, [r3, #20]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	40010000 	.word	0x40010000
 800296c:	40000400 	.word	0x40000400
 8002970:	40000800 	.word	0x40000800
 8002974:	40000c00 	.word	0x40000c00
 8002978:	40014000 	.word	0x40014000
 800297c:	40014400 	.word	0x40014400
 8002980:	40014800 	.word	0x40014800

08002984 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029ac:	b084      	sub	sp, #16
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	f107 0014 	add.w	r0, r7, #20
 80029ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d120      	bne.n	8002a06 <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80029d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 80029ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d105      	bne.n	80029fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f001 f9c4 	bl	8003d8c <USB_CoreReset>
 8002a04:	e00c      	b.n	8002a20 <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f001 f9ba 	bl	8003d8c <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a1e:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d10b      	bne.n	8002a3e <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f043 0206 	orr.w	r2, r3, #6
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f043 0220 	orr.w	r2, r3, #32
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a4a:	b004      	add	sp, #16
 8002a4c:	4770      	bx	lr

08002a4e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f023 0201 	bic.w	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d106      	bne.n	8002abe <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	60da      	str	r2, [r3, #12]
 8002abc:	e008      	b.n	8002ad0 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 8002ad0:	2032      	movs	r0, #50	; 0x32
 8002ad2:	f7fd fd57 	bl	8000584 <HAL_Delay>
  
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	f107 001c 	add.w	r0, r7, #28
 8002aee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
 8002af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d106      	bne.n	8002b0a <USB_DevInit+0x2a>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	639a      	str	r2, [r3, #56]	; 0x38
 8002b08:	e005      	b.n	8002b16 <USB_DevInit+0x36>
  }
  else
  {
    /* Enable VBUS */
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2300      	movs	r3, #0
 8002b20:	6013      	str	r3, [r2, #0]
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b28:	461a      	mov	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6013      	str	r3, [r2, #0]
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10c      	bne.n	8002b54 <USB_DevInit+0x74>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d104      	bne.n	8002b4a <USB_DevInit+0x6a>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8002b40:	2100      	movs	r1, #0
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f946 	bl	8002dd4 <USB_SetDevSpeed>
 8002b48:	e008      	b.n	8002b5c <USB_DevInit+0x7c>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f941 	bl	8002dd4 <USB_SetDevSpeed>
 8002b52:	e003      	b.n	8002b5c <USB_DevInit+0x7c>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002b54:	2103      	movs	r1, #3
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f93c 	bl	8002dd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8002b5c:	2110      	movs	r1, #16
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f8f0 	bl	8002d44 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f913 	bl	8002d90 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b70:	461a      	mov	r2, r3
 8002b72:	2300      	movs	r3, #0
 8002b74:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2300      	movs	r3, #0
 8002b80:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8e:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b96:	461a      	mov	r2, r3
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61d3      	str	r3, [r2, #28]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	e034      	b.n	8002c0c <USB_DevInit+0x12c>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bb8:	d10a      	bne.n	8002bd0 <USB_DevInit+0xf0>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e008      	b.n	8002be2 <USB_DevInit+0x102>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2300      	movs	r3, #0
 8002be0:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c00:	461a      	mov	r2, r3
 8002c02:	23ff      	movs	r3, #255	; 0xff
 8002c04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d8c6      	bhi.n	8002ba2 <USB_DevInit+0xc2>
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e034      	b.n	8002c84 <USB_DevInit+0x1a4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c30:	d10a      	bne.n	8002c48 <USB_DevInit+0x168>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e008      	b.n	8002c5a <USB_DevInit+0x17a>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c54:	461a      	mov	r2, r3
 8002c56:	2300      	movs	r3, #0
 8002c58:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c66:	461a      	mov	r2, r3
 8002c68:	2300      	movs	r3, #0
 8002c6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c78:	461a      	mov	r2, r3
 8002c7a:	23ff      	movs	r3, #255	; 0xff
 8002c7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3301      	adds	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d8c6      	bhi.n	8002c1a <USB_DevInit+0x13a>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c92:	461a      	mov	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ca0:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1U)
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d117      	bne.n	8002cd8 <USB_DevInit+0x1f8>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <USB_DevInit+0x25c>)
 8002cb2:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cba:	461a      	mov	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	f043 0303 	orr.w	r3, r3, #3
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002ce4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8002ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f043 0210 	orr.w	r2, r3, #16
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699a      	ldr	r2, [r3, #24]
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <USB_DevInit+0x260>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8002d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <USB_DevInit+0x236>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f043 0208 	orr.w	r2, r3, #8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8002d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d107      	bne.n	8002d2c <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d38:	b004      	add	sp, #16
 8002d3a:	4770      	bx	lr
 8002d3c:	00800100 	.word	0x00800100
 8002d40:	803c3800 	.word	0x803c3800

08002d44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	019b      	lsls	r3, r3, #6
 8002d56:	f043 0220 	orr.w	r2, r3, #32
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3301      	adds	r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <USB_FlushTxFifo+0x48>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e006      	b.n	8002d7e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d0f0      	beq.n	8002d5e <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	00030d40 	.word	0x00030d40

08002d90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2210      	movs	r2, #16
 8002da0:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	3301      	adds	r3, #1
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <USB_FlushRxFifo+0x40>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d901      	bls.n	8002db4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e006      	b.n	8002dc2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d0f0      	beq.n	8002da2 <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	00030d40 	.word	0x00030d40

08002dd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de6:	4619      	mov	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0306 	and.w	r3, r3, #6
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e01c      	b.n	8002e60 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0306 	and.w	r3, r3, #6
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d007      	beq.n	8002e46 <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002e42:	2b06      	cmp	r3, #6
 8002e44:	d102      	bne.n	8002e4c <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 8002e46:	2303      	movs	r3, #3
 8002e48:	73fb      	strb	r3, [r7, #15]
 8002e4a:	e009      	b.n	8002e60 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0306 	and.w	r3, r3, #6
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d101      	bne.n	8002e60 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	785b      	ldrb	r3, [r3, #1]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d13e      	bne.n	8002efe <USB_ActivateEndpoint+0x90>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e86:	4619      	mov	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8e:	69da      	ldr	r2, [r3, #28]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	2301      	movs	r3, #1
 8002e98:	4083      	lsls	r3, r0
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d15c      	bne.n	8002f72 <USB_ActivateEndpoint+0x104>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ee0:	6839      	ldr	r1, [r7, #0]
 8002ee2:	78c9      	ldrb	r1, [r1, #3]
 8002ee4:	0489      	lsls	r1, r1, #18
 8002ee6:	430b      	orrs	r3, r1
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 8002ee8:	6839      	ldr	r1, [r7, #0]
 8002eea:	7809      	ldrb	r1, [r1, #0]
 8002eec:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efa:	6003      	str	r3, [r0, #0]
 8002efc:	e039      	b.n	8002f72 <USB_ActivateEndpoint+0x104>
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f04:	4619      	mov	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f0c:	69da      	ldr	r2, [r3, #28]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	2301      	movs	r3, #1
 8002f16:	4083      	lsls	r3, r0
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d11d      	bne.n	8002f72 <USB_ActivateEndpoint+0x104>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f44:	4618      	mov	r0, r3
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f5e:	6839      	ldr	r1, [r7, #0]
 8002f60:	78c9      	ldrb	r1, [r1, #3]
 8002f62:	0489      	lsls	r1, r1, #18
 8002f64:	430b      	orrs	r3, r1
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f70:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	785b      	ldrb	r3, [r3, #1]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d154      	bne.n	8003040 <USB_DeactivateEndpoint+0xc0>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002fba:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fd0:	6013      	str	r3, [r2, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fe6:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	3301      	adds	r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4a43      	ldr	r2, [pc, #268]	; (8003100 <USB_DeactivateEndpoint+0x180>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <USB_DeactivateEndpoint+0x7a>
      {
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e07d      	b.n	80030f6 <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800300e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003012:	d0e9      	beq.n	8002fe8 <USB_DeactivateEndpoint+0x68>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8003014:	2110      	movs	r1, #16
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff fe94 	bl	8002d44 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003022:	4619      	mov	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	2301      	movs	r3, #1
 8003034:	4083      	lsls	r3, r0
 8003036:	b29b      	uxth	r3, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	4013      	ands	r3, r2
 800303c:	61cb      	str	r3, [r1, #28]
 800303e:	e059      	b.n	80030f4 <USB_DeactivateEndpoint+0x174>
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304e:	4619      	mov	r1, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003064:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4413      	add	r3, r2
 8003070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003074:	461a      	mov	r2, r3
 8003076:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800307a:	6013      	str	r3, [r2, #0]
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308a:	461a      	mov	r2, r3
 800308c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003090:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	3301      	adds	r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4a19      	ldr	r2, [pc, #100]	; (8003100 <USB_DeactivateEndpoint+0x180>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <USB_DeactivateEndpoint+0x124>
      {
        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e028      	b.n	80030f6 <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d0ea      	beq.n	8003092 <USB_DeactivateEndpoint+0x112>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c2:	461a      	mov	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d0:	6053      	str	r3, [r2, #4]
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d8:	4619      	mov	r1, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	2301      	movs	r3, #1
 80030ea:	4083      	lsls	r3, r0
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	43db      	mvns	r3, r3
 80030f0:	4013      	ands	r3, r2
 80030f2:	61cb      	str	r3, [r1, #28]
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	00030d40 	.word	0x00030d40

08003104 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	4613      	mov	r3, r2
 8003110:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	785b      	ldrb	r3, [r3, #1]
 800311a:	2b01      	cmp	r3, #1
 800311c:	f040 8146 	bne.w	80033ac <USB_EPStartXfer+0x2a8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d13b      	bne.n	80031a0 <USB_EPStartXfer+0x9c>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003136:	4619      	mov	r1, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800314c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003150:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003160:	4619      	mov	r1, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4413      	add	r3, r2
 800316c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003176:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003186:	4619      	mov	r1, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4413      	add	r3, r2
 8003192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	0cdb      	lsrs	r3, r3, #19
 800319a:	04db      	lsls	r3, r3, #19
 800319c:	610b      	str	r3, [r1, #16]
 800319e:	e086      	b.n	80032ae <USB_EPStartXfer+0x1aa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ae:	4619      	mov	r1, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	0cdb      	lsrs	r3, r3, #19
 80031c2:	04db      	lsls	r3, r3, #19
 80031c4:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d4:	4619      	mov	r1, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80031ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80031ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fe:	4618      	mov	r0, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4413      	add	r3, r2
 800320a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	6959      	ldr	r1, [r3, #20]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	440b      	add	r3, r1
 800321a:	1e59      	subs	r1, r3, #1
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	fbb1 f3f3 	udiv	r3, r1, r3
 8003224:	04d9      	lsls	r1, r3, #19
 8003226:	4b8c      	ldr	r3, [pc, #560]	; (8003458 <USB_EPStartXfer+0x354>)
 8003228:	400b      	ands	r3, r1
 800322a:	4313      	orrs	r3, r2
 800322c:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323c:	4619      	mov	r1, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003256:	4313      	orrs	r3, r2
 8003258:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	78db      	ldrb	r3, [r3, #3]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d125      	bne.n	80032ae <USB_EPStartXfer+0x1aa>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003270:	4619      	mov	r1, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003286:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4413      	add	r3, r2
 8003292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003296:	4619      	mov	r1, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032ac:	610b      	str	r3, [r1, #16]
      }       
    }

    if (dma == 1U)
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d10b      	bne.n	80032cc <USB_EPStartXfer+0x1c8>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c2:	461a      	mov	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	6153      	str	r3, [r2, #20]
 80032ca:	e016      	b.n	80032fa <USB_EPStartXfer+0x1f6>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	78db      	ldrb	r3, [r3, #3]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d012      	beq.n	80032fa <USB_EPStartXfer+0x1f6>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00e      	beq.n	80032fa <USB_EPStartXfer+0x1f6>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e2:	4619      	mov	r1, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	2301      	movs	r3, #1
 80032f4:	4083      	lsls	r3, r0
 80032f6:	4313      	orrs	r3, r2
 80032f8:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	78db      	ldrb	r3, [r3, #3]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d12e      	bne.n	8003360 <USB_EPStartXfer+0x25c>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d113      	bne.n	800333a <USB_EPStartXfer+0x236>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003320:	4619      	mov	r1, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003336:	600b      	str	r3, [r1, #0]
 8003338:	e012      	b.n	8003360 <USB_EPStartXfer+0x25c>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003348:	4619      	mov	r1, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335e:	600b      	str	r3, [r1, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336e:	4619      	mov	r1, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4413      	add	r3, r2
 800337a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003384:	600b      	str	r3, [r1, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	78db      	ldrb	r3, [r3, #3]
 800338a:	2b01      	cmp	r3, #1
 800338c:	f040 80f5 	bne.w	800357a <USB_EPStartXfer+0x476>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	68d9      	ldr	r1, [r3, #12]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	b298      	uxth	r0, r3
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	4603      	mov	r3, r0
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fa4e 	bl	8003846 <USB_WritePacket>
 80033aa:	e0e6      	b.n	800357a <USB_EPStartXfer+0x476>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ba:	4619      	mov	r1, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	0cdb      	lsrs	r3, r3, #19
 80033ce:	04db      	lsls	r3, r3, #19
 80033d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e0:	4619      	mov	r1, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033fa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d12b      	bne.n	800345c <USB_EPStartXfer+0x358>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003412:	4619      	mov	r1, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342c:	4313      	orrs	r3, r2
 800342e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343e:	4619      	mov	r1, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003454:	610b      	str	r3, [r1, #16]
 8003456:	e03c      	b.n	80034d2 <USB_EPStartXfer+0x3ce>
 8003458:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4413      	add	r3, r2
 8003466:	1e5a      	subs	r2, r3, #1
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4413      	add	r3, r2
 800347c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003480:	4619      	mov	r1, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4413      	add	r3, r2
 800348c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	8afb      	ldrh	r3, [r7, #22]
 8003494:	04db      	lsls	r3, r3, #19
 8003496:	4618      	mov	r0, r3
 8003498:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <USB_EPStartXfer+0x480>)
 800349a:	4003      	ands	r3, r0
 800349c:	4313      	orrs	r3, r2
 800349e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ae:	4618      	mov	r0, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	8af9      	ldrh	r1, [r7, #22]
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ce:	4313      	orrs	r3, r2
 80034d0:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1U)
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10a      	bne.n	80034ee <USB_EPStartXfer+0x3ea>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e6:	461a      	mov	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	6153      	str	r3, [r2, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	78db      	ldrb	r3, [r3, #3]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d12e      	bne.n	8003554 <USB_EPStartXfer+0x450>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d113      	bne.n	800352e <USB_EPStartXfer+0x42a>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003514:	4619      	mov	r1, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800352a:	600b      	str	r3, [r1, #0]
 800352c:	e012      	b.n	8003554 <USB_EPStartXfer+0x450>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353c:	4619      	mov	r1, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003552:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003562:	4619      	mov	r1, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003578:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	1ff80000 	.word	0x1ff80000

08003588 <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	4613      	mov	r3, r2
 8003594:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	785b      	ldrb	r3, [r3, #1]
 800359a:	2b01      	cmp	r3, #1
 800359c:	f040 80d2 	bne.w	8003744 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d13b      	bne.n	8003620 <USB_EP0StartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b6:	4619      	mov	r1, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035d0:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e0:	4619      	mov	r1, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003606:	4619      	mov	r1, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4413      	add	r3, r2
 8003612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	0cdb      	lsrs	r3, r3, #19
 800361a:	04db      	lsls	r3, r3, #19
 800361c:	610b      	str	r3, [r1, #16]
 800361e:	e05a      	b.n	80036d6 <USB_EP0StartXfer+0x14e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362e:	4619      	mov	r1, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	0cdb      	lsrs	r3, r3, #19
 8003642:	04db      	lsls	r3, r3, #19
 8003644:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003654:	4619      	mov	r1, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800366a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800366e:	610b      	str	r3, [r1, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	429a      	cmp	r2, r3
 800367a:	d903      	bls.n	8003684 <USB_EP0StartXfer+0xfc>
      {
        ep->xfer_len = ep->maxpacket;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003692:	4619      	mov	r1, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036a8:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b8:	4619      	mov	r1, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d2:	4313      	orrs	r3, r2
 80036d4:	610b      	str	r3, [r1, #16]
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e4:	4619      	mov	r1, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036fa:	600b      	str	r3, [r1, #0]
    
    if (dma == 1)
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d10b      	bne.n	800371a <USB_EP0StartXfer+0x192>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003710:	461a      	mov	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	6153      	str	r3, [r2, #20]
 8003718:	e08e      	b.n	8003838 <USB_EP0StartXfer+0x2b0>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 808a 	beq.w	8003838 <USB_EP0StartXfer+0x2b0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372a:	4619      	mov	r1, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	2301      	movs	r3, #1
 800373c:	4083      	lsls	r3, r0
 800373e:	4313      	orrs	r3, r2
 8003740:	634b      	str	r3, [r1, #52]	; 0x34
 8003742:	e079      	b.n	8003838 <USB_EP0StartXfer+0x2b0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003752:	4619      	mov	r1, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	0cdb      	lsrs	r3, r3, #19
 8003766:	04db      	lsls	r3, r3, #19
 8003768:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003778:	4619      	mov	r1, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800378e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003792:	610b      	str	r3, [r1, #16]
      
    if (ep->xfer_len > 0U)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <USB_EP0StartXfer+0x21c>
    {
      ep->xfer_len = ep->maxpacket;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b2:	4619      	mov	r1, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037c8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d8:	4619      	mov	r1, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f2:	4313      	orrs	r3, r2
 80037f4:	610b      	str	r3, [r1, #16]
    

    if (dma == 1U)
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d10a      	bne.n	8003812 <USB_EP0StartXfer+0x28a>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380a:	461a      	mov	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	6153      	str	r3, [r2, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003820:	4619      	mov	r1, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003836:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003846:	b480      	push	{r7}
 8003848:	b087      	sub	sp, #28
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	4611      	mov	r1, r2
 8003852:	461a      	mov	r2, r3
 8003854:	460b      	mov	r3, r1
 8003856:	71fb      	strb	r3, [r7, #7]
 8003858:	4613      	mov	r3, r2
 800385a:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 8003864:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d11a      	bne.n	80038a2 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 800386c:	88bb      	ldrh	r3, [r7, #4]
 800386e:	3303      	adds	r3, #3
 8003870:	089b      	lsrs	r3, r3, #2
 8003872:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	e00f      	b.n	800389a <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	031a      	lsls	r2, r3, #12
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003886:	461a      	mov	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	3301      	adds	r3, #1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	3304      	adds	r3, #4
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d3eb      	bcc.n	800387a <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	4613      	mov	r3, r2
 80038bc:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	3303      	adds	r3, #3
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e00b      	b.n	80038e8 <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	3301      	adds	r3, #1
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3304      	adds	r3, #4
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d3ef      	bcc.n	80038d0 <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 80038f0:	68bb      	ldr	r3, [r7, #8]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	785b      	ldrb	r3, [r3, #1]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d130      	bne.n	8003972 <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	db12      	blt.n	800394a <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003932:	4619      	mov	r1, r3
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003948:	600b      	str	r3, [r1, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003958:	4619      	mov	r1, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800396e:	600b      	str	r3, [r1, #0]
 8003970:	e02f      	b.n	80039d2 <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	db12      	blt.n	80039ac <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	4619      	mov	r1, r3
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039aa:	600b      	str	r3, [r1, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ba:	4619      	mov	r1, r3
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039d0:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	785b      	ldrb	r3, [r3, #1]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d12e      	bne.n	8003a50 <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a00:	4619      	mov	r1, r3
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a16:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	78db      	ldrb	r3, [r3, #3]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d003      	beq.n	8003a28 <USB_EPClearStall+0x48>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	78db      	ldrb	r3, [r3, #3]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d141      	bne.n	8003aac <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a36:	4619      	mov	r1, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	600b      	str	r3, [r1, #0]
 8003a4e:	e02d      	b.n	8003aac <USB_EPClearStall+0xcc>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5e:	4619      	mov	r1, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a74:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	78db      	ldrb	r3, [r3, #3]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d003      	beq.n	8003a86 <USB_EPClearStall+0xa6>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	78db      	ldrb	r3, [r3, #3]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d112      	bne.n	8003aac <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a94:	4619      	mov	r1, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	600b      	str	r3, [r1, #0]
    }    
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003acc:	461a      	mov	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ada:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003af4:	4313      	orrs	r3, r2
 8003af6:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b14:	461a      	mov	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f023 0302 	bic.w	r3, r3, #2
 8003b22:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003b24:	2003      	movs	r0, #3
 8003b26:	f7fc fd2d 	bl	8000584 <HAL_Delay>
  
  return HAL_OK;  
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b42:	461a      	mov	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f043 0302 	orr.w	r3, r3, #2
 8003b50:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003b52:	2003      	movs	r0, #3
 8003b54:	f7fc fd16 	bl	8000584 <HAL_Delay>
  
  return HAL_OK;  
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
  return v;  
 8003b7e:	68fb      	ldr	r3, [r7, #12]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000U) >> 16U);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	0c1b      	lsrs	r3, r3, #16
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFFU));
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	b29b      	uxth	r3, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4013      	ands	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
  return v;
 8003c16:	68fb      	ldr	r3, [r7, #12]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4c:	01db      	lsls	r3, r3, #7
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003c56:	78fb      	ldrb	r3, [r7, #3]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	4013      	ands	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
  return v;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	f003 0301 	and.w	r3, r3, #1
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003cb0:	f023 0307 	bic.w	r3, r3, #7
 8003cb4:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0306 	and.w	r3, r3, #6
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d10a      	bne.n	8003cdc <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ccc:	461a      	mov	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f043 0303 	orr.w	r3, r3, #3
 8003cda:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d14:	461a      	mov	r2, r3
 8003d16:	2300      	movs	r3, #0
 8003d18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d20:	461a      	mov	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d2e:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d36:	461a      	mov	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f043 0318 	orr.w	r3, r3, #24
 8003d44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003d5a:	6113      	str	r3, [r2, #16]
  
  if (dma == 1U)
 8003d5c:	7afb      	ldrb	r3, [r7, #11]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d10c      	bne.n	8003d7c <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d68:	461a      	mov	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d74:	461a      	mov	r2, r3
 8003d76:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8003d7a:	6013      	str	r3, [r2, #0]
  }
  
  return HAL_OK;  
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a13      	ldr	r2, [pc, #76]	; (8003df0 <USB_CoreReset+0x64>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e01b      	b.n	8003de2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	daf2      	bge.n	8003d98 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f043 0201 	orr.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <USB_CoreReset+0x64>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d901      	bls.n	8003dd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e006      	b.n	8003de2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d0f0      	beq.n	8003dc2 <USB_CoreReset+0x36>
  
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	00030d40 	.word	0x00030d40

08003df4 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
    /* Open EP IN */
	USBD_LL_OpenEP(pdev, RNDIS_NOTIFICATION_IN_EP, USBD_EP_TYPE_INTR, RNDIS_NOTIFICATION_IN_SZ);
 8003e00:	2308      	movs	r3, #8
 8003e02:	2203      	movs	r2, #3
 8003e04:	2181      	movs	r1, #129	; 0x81
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f00c fc30 	bl	801066c <USBD_LL_OpenEP>
    
    /* Open EP OUT */
	USBD_LL_OpenEP(pdev, RNDIS_DATA_IN_EP, USBD_EP_TYPE_BULK, RNDIS_DATA_IN_SZ);
 8003e0c:	2340      	movs	r3, #64	; 0x40
 8003e0e:	2202      	movs	r2, #2
 8003e10:	2182      	movs	r1, #130	; 0x82
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f00c fc2a 	bl	801066c <USBD_LL_OpenEP>

    /* Open EP IN */
	USBD_LL_OpenEP(pdev, RNDIS_DATA_OUT_EP, USBD_EP_TYPE_BULK, RNDIS_DATA_OUT_SZ);
 8003e18:	2340      	movs	r3, #64	; 0x40
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f00c fc24 	bl	801066c <USBD_LL_OpenEP>
    
    /* Init Xfer states */
    //txState =0;
    //rxState =0;
	pDev = pdev;
 8003e24:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <USBD_CDC_Init+0x80>)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6013      	str	r3, [r2, #0]
    USBD_LL_PrepareReceive(pdev, RNDIS_DATA_OUT_EP, (uint8_t*)usb_rx_buffer, RNDIS_DATA_OUT_SZ);
 8003e2a:	2340      	movs	r3, #64	; 0x40
 8003e2c:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <USBD_CDC_Init+0x84>)
 8003e2e:	2101      	movs	r1, #1
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f00c fd97 	bl	8010964 <USBD_LL_PrepareReceive>
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
    if( xipInitTaskHandle != NULL )
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <USBD_CDC_Init+0x88>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d012      	beq.n	8003e68 <USBD_CDC_Init+0x74>
	{
		vTaskNotifyGiveFromISR( xipInitTaskHandle, &xHigherPriorityTaskWoken );
 8003e42:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <USBD_CDC_Init+0x88>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f107 020c 	add.w	r2, r7, #12
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f004 faef 	bl	8008430 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d007      	beq.n	8003e68 <USBD_CDC_Init+0x74>
 8003e58:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <USBD_CDC_Init+0x8c>)
 8003e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	f3bf 8f6f 	isb	sy
	}
    return 0;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	200058e0 	.word	0x200058e0
 8003e78:	20004604 	.word	0x20004604
 8003e7c:	200058d8 	.word	0x200058d8
 8003e80:	e000ed04 	.word	0xe000ed04

08003e84 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev, RNDIS_NOTIFICATION_IN_EP);
 8003e90:	2181      	movs	r1, #129	; 0x81
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f00c fc28 	bl	80106e8 <USBD_LL_CloseEP>
  
  USBD_LL_CloseEP(pdev, RNDIS_DATA_IN_EP);
 8003e98:	2182      	movs	r1, #130	; 0x82
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f00c fc24 	bl	80106e8 <USBD_LL_CloseEP>
  
  USBD_LL_CloseEP(pdev, RNDIS_DATA_OUT_EP);
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f00c fc20 	bl	80106e8 <USBD_LL_CloseEP>
  
  return 0;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <USBD_CDC_Setup>:
  *         Handle the CDC specific requests
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
	switch (req->bmRequest & USB_REQ_TYPE_MASK){
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d000      	beq.n	8003ecc <USBD_CDC_Setup+0x18>
				{
					USBD_CtlPrepareRx (pdev, encapsulated_buffer, req->wLength);
				}
			}
		default:
			break;
 8003eca:	e018      	b.n	8003efe <USBD_CDC_Setup+0x4a>
			if (req->wLength){
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	88db      	ldrh	r3, [r3, #6]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d014      	beq.n	8003efe <USBD_CDC_Setup+0x4a>
				if (req->bmRequest & 0x80)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	b25b      	sxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	da08      	bge.n	8003ef0 <USBD_CDC_Setup+0x3c>
					USBD_CtlSendData(pdev, encapsulated_buffer, ((rndis_generic_msg_t *)encapsulated_buffer)->MessageLength);
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <USBD_CDC_Setup+0x58>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4909      	ldr	r1, [pc, #36]	; (8003f0c <USBD_CDC_Setup+0x58>)
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f001 fcab 	bl	8005844 <USBD_CtlSendData>
			break;
 8003eee:	e006      	b.n	8003efe <USBD_CDC_Setup+0x4a>
					USBD_CtlPrepareRx (pdev, encapsulated_buffer, req->wLength);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	88db      	ldrh	r3, [r3, #6]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4905      	ldr	r1, [pc, #20]	; (8003f0c <USBD_CDC_Setup+0x58>)
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f001 fcd1 	bl	80058a0 <USBD_CtlPrepareRx>
			break;
 8003efe:	bf00      	nop
	}
	return USBD_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20005248 	.word	0x20005248

08003f10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	70fb      	strb	r3, [r7, #3]
	epnum &= 0x0F;
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	70fb      	strb	r3, [r7, #3]
	if (epnum == (RNDIS_DATA_IN_EP & 0x0F)){
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d133      	bne.n	8003f92 <USBD_CDC_DataIn+0x82>
		rndis_first_tx = 0;
 8003f2a:	4b1c      	ldr	r3, [pc, #112]	; (8003f9c <USBD_CDC_DataIn+0x8c>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
		rndis_sended += sended;
 8003f30:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <USBD_CDC_DataIn+0x90>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <USBD_CDC_DataIn+0x94>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4413      	add	r3, r2
 8003f3a:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <USBD_CDC_DataIn+0x90>)
 8003f3c:	6013      	str	r3, [r2, #0]
		rndis_tx_size -= sended;
 8003f3e:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <USBD_CDC_DataIn+0x98>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <USBD_CDC_DataIn+0x94>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <USBD_CDC_DataIn+0x98>)
 8003f4a:	6013      	str	r3, [r2, #0]
		rndis_tx_ptr += sended;
 8003f4c:	4b17      	ldr	r3, [pc, #92]	; (8003fac <USBD_CDC_DataIn+0x9c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <USBD_CDC_DataIn+0x94>)
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	4413      	add	r3, r2
 8003f56:	4a15      	ldr	r2, [pc, #84]	; (8003fac <USBD_CDC_DataIn+0x9c>)
 8003f58:	6013      	str	r3, [r2, #0]
		sended = 0;
 8003f5a:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <USBD_CDC_DataIn+0x94>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
		if(rndis_tx_size<=0){
 8003f60:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <USBD_CDC_DataIn+0x98>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	dc04      	bgt.n	8003f72 <USBD_CDC_DataIn+0x62>
			usb_eth_stat.txok++;
 8003f68:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <USBD_CDC_DataIn+0xa0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	4a10      	ldr	r2, [pc, #64]	; (8003fb0 <USBD_CDC_DataIn+0xa0>)
 8003f70:	6013      	str	r3, [r2, #0]
		}
		if (rndis_tx_ZLP){
 8003f72:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <USBD_CDC_DataIn+0xa4>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <USBD_CDC_DataIn+0x7c>
			USBD_LL_Transmit (pdev, RNDIS_DATA_IN_EP, NULL, 0);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2182      	movs	r1, #130	; 0x82
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f00c fcb5 	bl	80108f0 <USBD_LL_Transmit>
			rndis_tx_ZLP = false;
 8003f86:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <USBD_CDC_DataIn+0xa4>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
		}
		usbd_cdc_transfer(pdev);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f955 	bl	800423c <usbd_cdc_transfer>
	}
	return USBD_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000004 	.word	0x20000004
 8003fa0:	20000300 	.word	0x20000300
 8003fa4:	20000308 	.word	0x20000308
 8003fa8:	200002fc 	.word	0x200002fc
 8003fac:	200002f8 	.word	0x200002f8
 8003fb0:	200002e4 	.word	0x200002e4
 8003fb4:	20000304 	.word	0x20000304

08003fb8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	70fb      	strb	r3, [r7, #3]
	uint32_t xfer_count = USBD_LL_GetRxDataSize (pdev, epnum);
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f00c fd05 	bl	80109d8 <USBD_LL_GetRxDataSize>
 8003fce:	60f8      	str	r0, [r7, #12]
	static int rndis_received = 0;
	if (epnum == RNDIS_DATA_OUT_EP){
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d146      	bne.n	8004064 <USBD_CDC_DataOut+0xac>
		if (rndis_received + xfer_count > RNDIS_RX_BUFFER_SIZE){
 8003fd6:	4b26      	ldr	r3, [pc, #152]	; (8004070 <USBD_CDC_DataOut+0xb8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f240 6216 	movw	r2, #1558	; 0x616
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d908      	bls.n	8003ffa <USBD_CDC_DataOut+0x42>
			usb_eth_stat.rxbad++;
 8003fe8:	4b22      	ldr	r3, [pc, #136]	; (8004074 <USBD_CDC_DataOut+0xbc>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	3301      	adds	r3, #1
 8003fee:	4a21      	ldr	r2, [pc, #132]	; (8004074 <USBD_CDC_DataOut+0xbc>)
 8003ff0:	60d3      	str	r3, [r2, #12]
			rndis_received = 0;
 8003ff2:	4b1f      	ldr	r3, [pc, #124]	; (8004070 <USBD_CDC_DataOut+0xb8>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e02e      	b.n	8004058 <USBD_CDC_DataOut+0xa0>
		}
		else{
			if (rndis_received + xfer_count <= RNDIS_RX_BUFFER_SIZE){
 8003ffa:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <USBD_CDC_DataOut+0xb8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	f240 6216 	movw	r2, #1558	; 0x616
 8004008:	4293      	cmp	r3, r2
 800400a:	d81d      	bhi.n	8004048 <USBD_CDC_DataOut+0x90>
				memcpy(&rndis_rx_buffer[rndis_received], usb_rx_buffer, xfer_count);
 800400c:	4b18      	ldr	r3, [pc, #96]	; (8004070 <USBD_CDC_DataOut+0xb8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a19      	ldr	r2, [pc, #100]	; (8004078 <USBD_CDC_DataOut+0xc0>)
 8004012:	4413      	add	r3, r2
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4919      	ldr	r1, [pc, #100]	; (800407c <USBD_CDC_DataOut+0xc4>)
 8004018:	4618      	mov	r0, r3
 800401a:	f00c fdfe 	bl	8010c1a <memcpy>
				rndis_received += xfer_count;
 800401e:	4b14      	ldr	r3, [pc, #80]	; (8004070 <USBD_CDC_DataOut+0xb8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	461a      	mov	r2, r3
 800402a:	4b11      	ldr	r3, [pc, #68]	; (8004070 <USBD_CDC_DataOut+0xb8>)
 800402c:	601a      	str	r2, [r3, #0]
				if (xfer_count != RNDIS_DATA_OUT_SZ){
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	d011      	beq.n	8004058 <USBD_CDC_DataOut+0xa0>
					handle_packet(rndis_rx_buffer, rndis_received);
 8004034:	4b0e      	ldr	r3, [pc, #56]	; (8004070 <USBD_CDC_DataOut+0xb8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4619      	mov	r1, r3
 800403a:	480f      	ldr	r0, [pc, #60]	; (8004078 <USBD_CDC_DataOut+0xc0>)
 800403c:	f000 f982 	bl	8004344 <handle_packet>
					rndis_received = 0;
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <USBD_CDC_DataOut+0xb8>)
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e007      	b.n	8004058 <USBD_CDC_DataOut+0xa0>
				}
			}
			else{
				rndis_received = 0;
 8004048:	4b09      	ldr	r3, [pc, #36]	; (8004070 <USBD_CDC_DataOut+0xb8>)
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
				usb_eth_stat.rxbad++;
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <USBD_CDC_DataOut+0xbc>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	3301      	adds	r3, #1
 8004054:	4a07      	ldr	r2, [pc, #28]	; (8004074 <USBD_CDC_DataOut+0xbc>)
 8004056:	60d3      	str	r3, [r2, #12]
			}
		}
	    USBD_LL_PrepareReceive(pdev, RNDIS_DATA_OUT_EP, (uint8_t*)usb_rx_buffer, RNDIS_DATA_OUT_SZ);
 8004058:	2340      	movs	r3, #64	; 0x40
 800405a:	4a08      	ldr	r2, [pc, #32]	; (800407c <USBD_CDC_DataOut+0xc4>)
 800405c:	2101      	movs	r1, #1
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f00c fc80 	bl	8010964 <USBD_LL_PrepareReceive>
	}
    return USBD_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000318 	.word	0x20000318
 8004074:	200002e4 	.word	0x200002e4
 8004078:	20004c30 	.word	0x20004c30
 800407c:	20004604 	.word	0x20004604

08004080 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	switch (((rndis_generic_msg_t *)encapsulated_buffer)->MessageType){
 8004088:	4b3f      	ldr	r3, [pc, #252]	; (8004188 <USBD_CDC_EP0_RxReady+0x108>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3b02      	subs	r3, #2
 800408e:	2b06      	cmp	r3, #6
 8004090:	d873      	bhi.n	800417a <USBD_CDC_EP0_RxReady+0xfa>
 8004092:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <USBD_CDC_EP0_RxReady+0x18>)
 8004094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004098:	080040b5 	.word	0x080040b5
 800409c:	0800417b 	.word	0x0800417b
 80040a0:	08004117 	.word	0x08004117
 80040a4:	0800411f 	.word	0x0800411f
 80040a8:	08004127 	.word	0x08004127
 80040ac:	0800417b 	.word	0x0800417b
 80040b0:	08004157 	.word	0x08004157
		case REMOTE_NDIS_INITIALIZE_MSG:
			{
				rndis_initialize_cmplt_t *m;
				m = ((rndis_initialize_cmplt_t *)encapsulated_buffer);
 80040b4:	4b34      	ldr	r3, [pc, #208]	; (8004188 <USBD_CDC_EP0_RxReady+0x108>)
 80040b6:	617b      	str	r3, [r7, #20]
				/* m->MessageID is same as before */
				m->MessageType = REMOTE_NDIS_INITIALIZE_CMPLT;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	4a34      	ldr	r2, [pc, #208]	; (800418c <USBD_CDC_EP0_RxReady+0x10c>)
 80040bc:	601a      	str	r2, [r3, #0]
				m->MessageLength = sizeof(rndis_initialize_cmplt_t);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2234      	movs	r2, #52	; 0x34
 80040c2:	605a      	str	r2, [r3, #4]
				m->MajorVersion = RNDIS_MAJOR_VERSION;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2201      	movs	r2, #1
 80040c8:	611a      	str	r2, [r3, #16]
				m->MinorVersion = RNDIS_MINOR_VERSION;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2200      	movs	r2, #0
 80040ce:	615a      	str	r2, [r3, #20]
				m->Status = RNDIS_STATUS_SUCCESS;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2200      	movs	r2, #0
 80040d4:	60da      	str	r2, [r3, #12]
				m->DeviceFlags = RNDIS_DF_CONNECTIONLESS;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2201      	movs	r2, #1
 80040da:	619a      	str	r2, [r3, #24]
				m->Medium = RNDIS_MEDIUM_802_3;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2200      	movs	r2, #0
 80040e0:	61da      	str	r2, [r3, #28]
				m->MaxPacketsPerTransfer = 1;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2201      	movs	r2, #1
 80040e6:	621a      	str	r2, [r3, #32]
				m->MaxTransferSize = RNDIS_RX_BUFFER_SIZE;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f240 6216 	movw	r2, #1558	; 0x616
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24
				m->PacketAlignmentFactor = 0;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2200      	movs	r2, #0
 80040f4:	629a      	str	r2, [r3, #40]	; 0x28
				m->AfListOffset = 0;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2200      	movs	r2, #0
 80040fa:	62da      	str	r2, [r3, #44]	; 0x2c
				m->AfListSize = 0;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	; 0x30
				rndis_state = rndis_initialized;
 8004102:	4b23      	ldr	r3, [pc, #140]	; (8004190 <USBD_CDC_EP0_RxReady+0x110>)
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]
				USBD_LL_Transmit(pdev, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 8004108:	2308      	movs	r3, #8
 800410a:	4a22      	ldr	r2, [pc, #136]	; (8004194 <USBD_CDC_EP0_RxReady+0x114>)
 800410c:	2181      	movs	r1, #129	; 0x81
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f00c fbee 	bl	80108f0 <USBD_LL_Transmit>
			}
			break;
 8004114:	e032      	b.n	800417c <USBD_CDC_EP0_RxReady+0xfc>

		case REMOTE_NDIS_QUERY_MSG:
			rndis_query(pdev);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f952 	bl	80043c0 <rndis_query>
			break;
 800411c:	e02e      	b.n	800417c <USBD_CDC_EP0_RxReady+0xfc>

		case REMOTE_NDIS_SET_MSG:
			rndis_handle_set_msg(pdev);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fb5a 	bl	80047d8 <rndis_handle_set_msg>
			break;
 8004124:	e02a      	b.n	800417c <USBD_CDC_EP0_RxReady+0xfc>

		case REMOTE_NDIS_RESET_MSG:
			{
				rndis_reset_cmplt_t * m;
				m = ((rndis_reset_cmplt_t *)encapsulated_buffer);
 8004126:	4b18      	ldr	r3, [pc, #96]	; (8004188 <USBD_CDC_EP0_RxReady+0x108>)
 8004128:	613b      	str	r3, [r7, #16]
				rndis_state = rndis_uninitialized;
 800412a:	4b19      	ldr	r3, [pc, #100]	; (8004190 <USBD_CDC_EP0_RxReady+0x110>)
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
				m->MessageType = REMOTE_NDIS_RESET_CMPLT;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4a19      	ldr	r2, [pc, #100]	; (8004198 <USBD_CDC_EP0_RxReady+0x118>)
 8004134:	601a      	str	r2, [r3, #0]
				m->MessageLength = sizeof(rndis_reset_cmplt_t);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2210      	movs	r2, #16
 800413a:	605a      	str	r2, [r3, #4]
				m->Status = RNDIS_STATUS_SUCCESS;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
				m->AddressingReset = 1; /* Make it look like we did something */
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2201      	movs	r2, #1
 8004146:	60da      	str	r2, [r3, #12]
				/* m->AddressingReset = 0; - Windows halts if set to 1 for some reason */
				USBD_LL_Transmit(pdev,RNDIS_NOTIFICATION_IN_EP,(uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00",8);
 8004148:	2308      	movs	r3, #8
 800414a:	4a12      	ldr	r2, [pc, #72]	; (8004194 <USBD_CDC_EP0_RxReady+0x114>)
 800414c:	2181      	movs	r1, #129	; 0x81
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f00c fbce 	bl	80108f0 <USBD_LL_Transmit>
			}
			break;
 8004154:	e012      	b.n	800417c <USBD_CDC_EP0_RxReady+0xfc>

		case REMOTE_NDIS_KEEPALIVE_MSG:
			{
				rndis_keepalive_cmplt_t * m;
				m = (rndis_keepalive_cmplt_t *)encapsulated_buffer;
 8004156:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <USBD_CDC_EP0_RxReady+0x108>)
 8004158:	60fb      	str	r3, [r7, #12]
				m->MessageType = REMOTE_NDIS_KEEPALIVE_CMPLT;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4a0f      	ldr	r2, [pc, #60]	; (800419c <USBD_CDC_EP0_RxReady+0x11c>)
 800415e:	601a      	str	r2, [r3, #0]
				m->MessageLength = sizeof(rndis_keepalive_cmplt_t);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2210      	movs	r2, #16
 8004164:	605a      	str	r2, [r3, #4]
				m->Status = RNDIS_STATUS_SUCCESS;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	60da      	str	r2, [r3, #12]
			}
			/* We have data to send back */
			USBD_LL_Transmit(pdev,RNDIS_NOTIFICATION_IN_EP,(uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00",8);
 800416c:	2308      	movs	r3, #8
 800416e:	4a09      	ldr	r2, [pc, #36]	; (8004194 <USBD_CDC_EP0_RxReady+0x114>)
 8004170:	2181      	movs	r1, #129	; 0x81
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f00c fbbc 	bl	80108f0 <USBD_LL_Transmit>
			break;
 8004178:	e000      	b.n	800417c <USBD_CDC_EP0_RxReady+0xfc>

		default:
			break;
 800417a:	bf00      	nop
	}
	return USBD_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20005248 	.word	0x20005248
 800418c:	80000002 	.word	0x80000002
 8004190:	200058dc 	.word	0x200058dc
 8004194:	08010ef4 	.word	0x08010ef4
 8004198:	80000006 	.word	0x80000006
 800419c:	80000008 	.word	0x80000008

080041a0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length){
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
    *length = sizeof(usbd_cdc_CfgDesc);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	224b      	movs	r2, #75	; 0x4b
 80041ac:	801a      	strh	r2, [r3, #0]
    usbd_cdc_CfgDesc[2] = sizeof(usbd_cdc_CfgDesc) & 0xFF;
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <USBD_CDC_GetFSCfgDesc+0x28>)
 80041b0:	224b      	movs	r2, #75	; 0x4b
 80041b2:	709a      	strb	r2, [r3, #2]
    usbd_cdc_CfgDesc[3] = (sizeof(usbd_cdc_CfgDesc) >> 8) & 0xFF;
 80041b4:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <USBD_CDC_GetFSCfgDesc+0x28>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	70da      	strb	r2, [r3, #3]
    return usbd_cdc_CfgDesc;
 80041ba:	4b03      	ldr	r3, [pc, #12]	; (80041c8 <USBD_CDC_GetFSCfgDesc+0x28>)
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	20000040 	.word	0x20000040

080041cc <usbd_rndis_sof>:

// Start Of Frame event management
static uint8_t usbd_rndis_sof(USBD_HandleTypeDef *pdev){
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  //rndis_send();
  return usbd_cdc_transfer(pdev);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f831 	bl	800423c <usbd_cdc_transfer>
 80041da:	4603      	mov	r3, r0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <rndis_iso_in_incomplete>:

static uint8_t rndis_iso_in_incomplete(USBD_HandleTypeDef *pdev, uint8_t epnum){
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	70fb      	strb	r3, [r7, #3]
  return usbd_cdc_transfer(pdev);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f823 	bl	800423c <usbd_cdc_transfer>
 80041f6:	4603      	mov	r3, r0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <rndis_iso_out_incomplete>:

static uint8_t rndis_iso_out_incomplete(USBD_HandleTypeDef *pdev, uint8_t epnum){
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	70fb      	strb	r3, [r7, #3]
  return usbd_cdc_transfer(pdev);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f815 	bl	800423c <usbd_cdc_transfer>
 8004212:	4603      	mov	r3, r0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <usbd_rndis_GetDeviceQualifierDesc>:

static uint8_t  *usbd_rndis_GetDeviceQualifierDesc (uint16_t *length){
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_DeviceQualifierDesc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	220a      	movs	r2, #10
 8004228:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceQualifierDesc;
 800422a:	4b03      	ldr	r3, [pc, #12]	; (8004238 <usbd_rndis_GetDeviceQualifierDesc+0x1c>)
}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	2000008c 	.word	0x2000008c

0800423c <usbd_cdc_transfer>:

static uint8_t usbd_cdc_transfer(void *pdev){
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
	if (sended != 0 || rndis_tx_ptr == NULL || rndis_tx_size <= 0 || rndis_state!=rndis_data_initialized) return USBD_OK;
 8004244:	4b37      	ldr	r3, [pc, #220]	; (8004324 <usbd_cdc_transfer+0xe8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10b      	bne.n	8004264 <usbd_cdc_transfer+0x28>
 800424c:	4b36      	ldr	r3, [pc, #216]	; (8004328 <usbd_cdc_transfer+0xec>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <usbd_cdc_transfer+0x28>
 8004254:	4b35      	ldr	r3, [pc, #212]	; (800432c <usbd_cdc_transfer+0xf0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	dd03      	ble.n	8004264 <usbd_cdc_transfer+0x28>
 800425c:	4b34      	ldr	r3, [pc, #208]	; (8004330 <usbd_cdc_transfer+0xf4>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d001      	beq.n	8004268 <usbd_cdc_transfer+0x2c>
 8004264:	2300      	movs	r3, #0
 8004266:	e058      	b.n	800431a <usbd_cdc_transfer+0xde>
	if (rndis_first_tx)
 8004268:	4b32      	ldr	r3, [pc, #200]	; (8004334 <usbd_cdc_transfer+0xf8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d040      	beq.n	80042f2 <usbd_cdc_transfer+0xb6>
	{
		static uint8_t first[RNDIS_DATA_IN_SZ];
		rndis_data_packet_t *hdr;

		hdr = (rndis_data_packet_t *)first;
 8004270:	4b31      	ldr	r3, [pc, #196]	; (8004338 <usbd_cdc_transfer+0xfc>)
 8004272:	60bb      	str	r3, [r7, #8]
		memset(hdr, 0, sizeof(rndis_data_packet_t));
 8004274:	222c      	movs	r2, #44	; 0x2c
 8004276:	2100      	movs	r1, #0
 8004278:	68b8      	ldr	r0, [r7, #8]
 800427a:	f00c fcf3 	bl	8010c64 <memset>
		hdr->MessageType = REMOTE_NDIS_PACKET_MSG;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2201      	movs	r2, #1
 8004282:	601a      	str	r2, [r3, #0]
		hdr->MessageLength = sizeof(rndis_data_packet_t) + rndis_tx_size;
 8004284:	4b29      	ldr	r3, [pc, #164]	; (800432c <usbd_cdc_transfer+0xf0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	605a      	str	r2, [r3, #4]
		hdr->DataOffset = sizeof(rndis_data_packet_t) - offsetof(rndis_data_packet_t, DataOffset);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2224      	movs	r2, #36	; 0x24
 8004294:	609a      	str	r2, [r3, #8]
		hdr->DataLength = rndis_tx_size;
 8004296:	4b25      	ldr	r3, [pc, #148]	; (800432c <usbd_cdc_transfer+0xf0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	60da      	str	r2, [r3, #12]
		if (hdr->MessageLength % RNDIS_DATA_IN_SZ == 0)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d102      	bne.n	80042b2 <usbd_cdc_transfer+0x76>
			rndis_tx_ZLP = true;
 80042ac:	4b23      	ldr	r3, [pc, #140]	; (800433c <usbd_cdc_transfer+0x100>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]

		sended = RNDIS_DATA_IN_SZ - sizeof(rndis_data_packet_t);
 80042b2:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <usbd_cdc_transfer+0xe8>)
 80042b4:	2214      	movs	r2, #20
 80042b6:	601a      	str	r2, [r3, #0]
		if (sended > rndis_tx_size) sended = rndis_tx_size;
 80042b8:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <usbd_cdc_transfer+0xe8>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b1b      	ldr	r3, [pc, #108]	; (800432c <usbd_cdc_transfer+0xf0>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	dd03      	ble.n	80042cc <usbd_cdc_transfer+0x90>
 80042c4:	4b19      	ldr	r3, [pc, #100]	; (800432c <usbd_cdc_transfer+0xf0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a16      	ldr	r2, [pc, #88]	; (8004324 <usbd_cdc_transfer+0xe8>)
 80042ca:	6013      	str	r3, [r2, #0]
		memcpy(first + sizeof(rndis_data_packet_t), rndis_tx_ptr, sended);
 80042cc:	481c      	ldr	r0, [pc, #112]	; (8004340 <usbd_cdc_transfer+0x104>)
 80042ce:	4b16      	ldr	r3, [pc, #88]	; (8004328 <usbd_cdc_transfer+0xec>)
 80042d0:	6819      	ldr	r1, [r3, #0]
 80042d2:	4b14      	ldr	r3, [pc, #80]	; (8004324 <usbd_cdc_transfer+0xe8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f00c fc9f 	bl	8010c1a <memcpy>

		USBD_LL_Transmit(pdev, RNDIS_DATA_IN_EP, (uint8_t *)first, sizeof(rndis_data_packet_t) + sended);
 80042dc:	4b11      	ldr	r3, [pc, #68]	; (8004324 <usbd_cdc_transfer+0xe8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	332c      	adds	r3, #44	; 0x2c
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	4a14      	ldr	r2, [pc, #80]	; (8004338 <usbd_cdc_transfer+0xfc>)
 80042e8:	2182      	movs	r1, #130	; 0x82
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f00c fb00 	bl	80108f0 <USBD_LL_Transmit>
 80042f0:	e012      	b.n	8004318 <usbd_cdc_transfer+0xdc>
	}
	else
	{
		int n = rndis_tx_size;
 80042f2:	4b0e      	ldr	r3, [pc, #56]	; (800432c <usbd_cdc_transfer+0xf0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60fb      	str	r3, [r7, #12]
		if (n > RNDIS_DATA_IN_SZ) n = RNDIS_DATA_IN_SZ;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b40      	cmp	r3, #64	; 0x40
 80042fc:	dd01      	ble.n	8004302 <usbd_cdc_transfer+0xc6>
 80042fe:	2340      	movs	r3, #64	; 0x40
 8004300:	60fb      	str	r3, [r7, #12]
		USBD_LL_Transmit(pdev, RNDIS_DATA_IN_EP, rndis_tx_ptr, n);
 8004302:	4b09      	ldr	r3, [pc, #36]	; (8004328 <usbd_cdc_transfer+0xec>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	b29b      	uxth	r3, r3
 800430a:	2182      	movs	r1, #130	; 0x82
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f00c faef 	bl	80108f0 <USBD_LL_Transmit>
		sended = n;
 8004312:	4a04      	ldr	r2, [pc, #16]	; (8004324 <usbd_cdc_transfer+0xe8>)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6013      	str	r3, [r2, #0]
	}
	return USBD_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000308 	.word	0x20000308
 8004328:	200002f8 	.word	0x200002f8
 800432c:	200002fc 	.word	0x200002fc
 8004330:	200058dc 	.word	0x200058dc
 8004334:	20000004 	.word	0x20000004
 8004338:	2000031c 	.word	0x2000031c
 800433c:	20000304 	.word	0x20000304
 8004340:	20000348 	.word	0x20000348

08004344 <handle_packet>:

static void handle_packet(const char *data, int size){
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
	rndis_data_packet_t *p;
	p = (rndis_data_packet_t *)data;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	60fb      	str	r3, [r7, #12]
	if (size < sizeof(rndis_data_packet_t)) return;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b2b      	cmp	r3, #43	; 0x2b
 8004356:	d929      	bls.n	80043ac <handle_packet+0x68>
	if (p->MessageType != REMOTE_NDIS_PACKET_MSG || p->MessageLength != size) return;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d127      	bne.n	80043b0 <handle_packet+0x6c>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d122      	bne.n	80043b0 <handle_packet+0x6c>
	if (p->DataOffset + offsetof(rndis_data_packet_t, DataOffset) + p->DataLength != size)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	4413      	add	r3, r2
 8004374:	f103 0208 	add.w	r2, r3, #8
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d005      	beq.n	800438a <handle_packet+0x46>
	{
		usb_eth_stat.rxbad++;
 800437e:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <handle_packet+0x74>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	3301      	adds	r3, #1
 8004384:	4a0c      	ldr	r2, [pc, #48]	; (80043b8 <handle_packet+0x74>)
 8004386:	60d3      	str	r3, [r2, #12]
		return;
 8004388:	e013      	b.n	80043b2 <handle_packet+0x6e>
	}
	usb_eth_stat.rxok++;
 800438a:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <handle_packet+0x74>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	3301      	adds	r3, #1
 8004390:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <handle_packet+0x74>)
 8004392:	6053      	str	r3, [r2, #4]
	rndis_rxproc(&rndis_rx_buffer[p->DataOffset + offsetof(rndis_data_packet_t, DataOffset)], p->DataLength);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	3308      	adds	r3, #8
 800439a:	4a08      	ldr	r2, [pc, #32]	; (80043bc <handle_packet+0x78>)
 800439c:	441a      	add	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	4619      	mov	r1, r3
 80043a4:	4610      	mov	r0, r2
 80043a6:	f000 faf3 	bl	8004990 <rndis_rxproc>
 80043aa:	e002      	b.n	80043b2 <handle_packet+0x6e>
	if (size < sizeof(rndis_data_packet_t)) return;
 80043ac:	bf00      	nop
 80043ae:	e000      	b.n	80043b2 <handle_packet+0x6e>
	if (p->MessageType != REMOTE_NDIS_PACKET_MSG || p->MessageLength != size) return;
 80043b0:	bf00      	nop
}
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	200002e4 	.word	0x200002e4
 80043bc:	20004c30 	.word	0x20004c30

080043c0 <rndis_query>:

static const char *rndis_vendor = RNDIS_VENDOR;

void rndis_query(void  *pdev){
 80043c0:	b590      	push	{r4, r7, lr}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
	switch (((rndis_query_msg_t *)encapsulated_buffer)->Oid){
 80043c8:	4bb2      	ldr	r3, [pc, #712]	; (8004694 <rndis_query+0x2d4>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4ab2      	ldr	r2, [pc, #712]	; (8004698 <rndis_query+0x2d8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	f000 808d 	beq.w	80044ee <rndis_query+0x12e>
 80043d4:	4ab0      	ldr	r2, [pc, #704]	; (8004698 <rndis_query+0x2d8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d83f      	bhi.n	800445a <rndis_query+0x9a>
 80043da:	4ab0      	ldr	r2, [pc, #704]	; (800469c <rndis_query+0x2dc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	f000 80e5 	beq.w	80045ac <rndis_query+0x1ec>
 80043e2:	4aae      	ldr	r2, [pc, #696]	; (800469c <rndis_query+0x2dc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d81b      	bhi.n	8004420 <rndis_query+0x60>
 80043e8:	4aad      	ldr	r2, [pc, #692]	; (80046a0 <rndis_query+0x2e0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	f000 8094 	beq.w	8004518 <rndis_query+0x158>
 80043f0:	4aab      	ldr	r2, [pc, #684]	; (80046a0 <rndis_query+0x2e0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d807      	bhi.n	8004406 <rndis_query+0x46>
 80043f6:	4aab      	ldr	r2, [pc, #684]	; (80046a4 <rndis_query+0x2e4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d071      	beq.n	80044e0 <rndis_query+0x120>
 80043fc:	4aaa      	ldr	r2, [pc, #680]	; (80046a8 <rndis_query+0x2e8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	f000 809c 	beq.w	800453c <rndis_query+0x17c>
 8004404:	e13c      	b.n	8004680 <rndis_query+0x2c0>
 8004406:	4aa9      	ldr	r2, [pc, #676]	; (80046ac <rndis_query+0x2ec>)
 8004408:	4293      	cmp	r3, r2
 800440a:	f000 80c1 	beq.w	8004590 <rndis_query+0x1d0>
 800440e:	4aa8      	ldr	r2, [pc, #672]	; (80046b0 <rndis_query+0x2f0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	f000 8099 	beq.w	8004548 <rndis_query+0x188>
 8004416:	4aa7      	ldr	r2, [pc, #668]	; (80046b4 <rndis_query+0x2f4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	f000 8083 	beq.w	8004524 <rndis_query+0x164>
 800441e:	e12f      	b.n	8004680 <rndis_query+0x2c0>
 8004420:	4aa5      	ldr	r2, [pc, #660]	; (80046b8 <rndis_query+0x2f8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	f000 80ac 	beq.w	8004580 <rndis_query+0x1c0>
 8004428:	4aa3      	ldr	r2, [pc, #652]	; (80046b8 <rndis_query+0x2f8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d808      	bhi.n	8004440 <rndis_query+0x80>
 800442e:	4aa3      	ldr	r2, [pc, #652]	; (80046bc <rndis_query+0x2fc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	f000 808f 	beq.w	8004554 <rndis_query+0x194>
 8004436:	4aa1      	ldr	r2, [pc, #644]	; (80046bc <rndis_query+0x2fc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	f200 8092 	bhi.w	8004562 <rndis_query+0x1a2>
 800443e:	e0bc      	b.n	80045ba <rndis_query+0x1fa>
 8004440:	4a9f      	ldr	r2, [pc, #636]	; (80046c0 <rndis_query+0x300>)
 8004442:	4293      	cmp	r3, r2
 8004444:	f000 80de 	beq.w	8004604 <rndis_query+0x244>
 8004448:	4a9e      	ldr	r2, [pc, #632]	; (80046c4 <rndis_query+0x304>)
 800444a:	4293      	cmp	r3, r2
 800444c:	f000 80bc 	beq.w	80045c8 <rndis_query+0x208>
 8004450:	4a9d      	ldr	r2, [pc, #628]	; (80046c8 <rndis_query+0x308>)
 8004452:	4293      	cmp	r3, r2
 8004454:	f000 80a3 	beq.w	800459e <rndis_query+0x1de>
 8004458:	e112      	b.n	8004680 <rndis_query+0x2c0>
 800445a:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 800445e:	d054      	beq.n	800450a <rndis_query+0x14a>
 8004460:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 8004464:	d81f      	bhi.n	80044a6 <rndis_query+0xe6>
 8004466:	4a99      	ldr	r2, [pc, #612]	; (80046cc <rndis_query+0x30c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	f000 80eb 	beq.w	8004644 <rndis_query+0x284>
 800446e:	4a97      	ldr	r2, [pc, #604]	; (80046cc <rndis_query+0x30c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d80b      	bhi.n	800448c <rndis_query+0xcc>
 8004474:	4a96      	ldr	r2, [pc, #600]	; (80046d0 <rndis_query+0x310>)
 8004476:	4293      	cmp	r3, r2
 8004478:	f000 80ac 	beq.w	80045d4 <rndis_query+0x214>
 800447c:	4a95      	ldr	r2, [pc, #596]	; (80046d4 <rndis_query+0x314>)
 800447e:	4293      	cmp	r3, r2
 8004480:	f000 80d8 	beq.w	8004634 <rndis_query+0x274>
 8004484:	4a94      	ldr	r2, [pc, #592]	; (80046d8 <rndis_query+0x318>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d052      	beq.n	8004530 <rndis_query+0x170>
 800448a:	e0f9      	b.n	8004680 <rndis_query+0x2c0>
 800448c:	4a93      	ldr	r2, [pc, #588]	; (80046dc <rndis_query+0x31c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	f000 80e0 	beq.w	8004654 <rndis_query+0x294>
 8004494:	4a91      	ldr	r2, [pc, #580]	; (80046dc <rndis_query+0x31c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	f0c0 80e4 	bcc.w	8004664 <rndis_query+0x2a4>
 800449c:	4a90      	ldr	r2, [pc, #576]	; (80046e0 <rndis_query+0x320>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	f000 80e8 	beq.w	8004674 <rndis_query+0x2b4>
 80044a4:	e0ec      	b.n	8004680 <rndis_query+0x2c0>
 80044a6:	4a8f      	ldr	r2, [pc, #572]	; (80046e4 <rndis_query+0x324>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	f000 80a5 	beq.w	80045f8 <rndis_query+0x238>
 80044ae:	4a8d      	ldr	r2, [pc, #564]	; (80046e4 <rndis_query+0x324>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d808      	bhi.n	80044c6 <rndis_query+0x106>
 80044b4:	4a8c      	ldr	r2, [pc, #560]	; (80046e8 <rndis_query+0x328>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	f000 8098 	beq.w	80045ec <rndis_query+0x22c>
 80044bc:	4a8a      	ldr	r2, [pc, #552]	; (80046e8 <rndis_query+0x328>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	f200 808e 	bhi.w	80045e0 <rndis_query+0x220>
 80044c4:	e01a      	b.n	80044fc <rndis_query+0x13c>
 80044c6:	4a89      	ldr	r2, [pc, #548]	; (80046ec <rndis_query+0x32c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	f000 80a7 	beq.w	800461c <rndis_query+0x25c>
 80044ce:	4a88      	ldr	r2, [pc, #544]	; (80046f0 <rndis_query+0x330>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	f000 80a9 	beq.w	8004628 <rndis_query+0x268>
 80044d6:	4a87      	ldr	r2, [pc, #540]	; (80046f4 <rndis_query+0x334>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	f000 8099 	beq.w	8004610 <rndis_query+0x250>
 80044de:	e0cf      	b.n	8004680 <rndis_query+0x2c0>
		case OID_GEN_SUPPORTED_LIST:         rndis_query_cmplt(pdev, RNDIS_STATUS_SUCCESS, OIDSupportedList, 4 * OID_LIST_LENGTH); return;
 80044e0:	2358      	movs	r3, #88	; 0x58
 80044e2:	4a85      	ldr	r2, [pc, #532]	; (80046f8 <rndis_query+0x338>)
 80044e4:	2100      	movs	r1, #0
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f918 	bl	800471c <rndis_query_cmplt>
 80044ec:	e0cf      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_VENDOR_DRIVER_VERSION:  rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0x00001000);  return;
 80044ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044f2:	2100      	movs	r1, #0
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f943 	bl	8004780 <rndis_query_cmplt32>
 80044fa:	e0c8      	b.n	800468e <rndis_query+0x2ce>
		case OID_802_3_CURRENT_ADDRESS:      rndis_query_cmplt(pdev, RNDIS_STATUS_SUCCESS, &station_hwaddr, 6); return;
 80044fc:	2306      	movs	r3, #6
 80044fe:	4a7f      	ldr	r2, [pc, #508]	; (80046fc <rndis_query+0x33c>)
 8004500:	2100      	movs	r1, #0
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f90a 	bl	800471c <rndis_query_cmplt>
 8004508:	e0c1      	b.n	800468e <rndis_query+0x2ce>
		case OID_802_3_PERMANENT_ADDRESS:    rndis_query_cmplt(pdev, RNDIS_STATUS_SUCCESS, &permanent_hwaddr, 6); return;
 800450a:	2306      	movs	r3, #6
 800450c:	4a7c      	ldr	r2, [pc, #496]	; (8004700 <rndis_query+0x340>)
 800450e:	2100      	movs	r1, #0
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f903 	bl	800471c <rndis_query_cmplt>
 8004516:	e0ba      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_MEDIA_SUPPORTED:        rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 8004518:	2200      	movs	r2, #0
 800451a:	2100      	movs	r1, #0
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f92f 	bl	8004780 <rndis_query_cmplt32>
 8004522:	e0b4      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_MEDIA_IN_USE:           rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 8004524:	2200      	movs	r2, #0
 8004526:	2100      	movs	r1, #0
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f929 	bl	8004780 <rndis_query_cmplt32>
 800452e:	e0ae      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_PHYSICAL_MEDIUM:        rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 8004530:	2200      	movs	r2, #0
 8004532:	2100      	movs	r1, #0
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f923 	bl	8004780 <rndis_query_cmplt32>
 800453a:	e0a8      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_HARDWARE_STATUS:        rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 800453c:	2200      	movs	r2, #0
 800453e:	2100      	movs	r1, #0
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f91d 	bl	8004780 <rndis_query_cmplt32>
 8004546:	e0a2      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_LINK_SPEED:             rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, RNDIS_LINK_SPEED / 100); return;
 8004548:	4a6e      	ldr	r2, [pc, #440]	; (8004704 <rndis_query+0x344>)
 800454a:	2100      	movs	r1, #0
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f917 	bl	8004780 <rndis_query_cmplt32>
 8004552:	e09c      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_VENDOR_ID:              rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0x00FFFFFF); return;
 8004554:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8004558:	2100      	movs	r1, #0
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f910 	bl	8004780 <rndis_query_cmplt32>
 8004560:	e095      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_VENDOR_DESCRIPTION:     rndis_query_cmplt(pdev, RNDIS_STATUS_SUCCESS, rndis_vendor, strlen(rndis_vendor) + 1); return;
 8004562:	4b69      	ldr	r3, [pc, #420]	; (8004708 <rndis_query+0x348>)
 8004564:	681c      	ldr	r4, [r3, #0]
 8004566:	4b68      	ldr	r3, [pc, #416]	; (8004708 <rndis_query+0x348>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7fb fe38 	bl	80001e0 <strlen>
 8004570:	4603      	mov	r3, r0
 8004572:	3301      	adds	r3, #1
 8004574:	4622      	mov	r2, r4
 8004576:	2100      	movs	r1, #0
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f8cf 	bl	800471c <rndis_query_cmplt>
 800457e:	e086      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_CURRENT_PACKET_FILTER:  rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, oid_packet_filter); return;
 8004580:	4b62      	ldr	r3, [pc, #392]	; (800470c <rndis_query+0x34c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	2100      	movs	r1, #0
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f8f9 	bl	8004780 <rndis_query_cmplt32>
 800458e:	e07e      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_MAXIMUM_FRAME_SIZE:     rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE - ETH_HEADER_SIZE); return;
 8004590:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004594:	2100      	movs	r1, #0
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f8f2 	bl	8004780 <rndis_query_cmplt32>
 800459c:	e077      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_MAXIMUM_TOTAL_SIZE:     rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE); return;
 800459e:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80045a2:	2100      	movs	r1, #0
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f8eb 	bl	8004780 <rndis_query_cmplt32>
 80045aa:	e070      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_TRANSMIT_BLOCK_SIZE:    rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE); return;
 80045ac:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80045b0:	2100      	movs	r1, #0
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f8e4 	bl	8004780 <rndis_query_cmplt32>
 80045b8:	e069      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_RECEIVE_BLOCK_SIZE:     rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE); return;
 80045ba:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80045be:	2100      	movs	r1, #0
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f8dd 	bl	8004780 <rndis_query_cmplt32>
 80045c6:	e062      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_MEDIA_CONNECT_STATUS:   rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, NDIS_MEDIA_STATE_CONNECTED); return;
 80045c8:	2200      	movs	r2, #0
 80045ca:	2100      	movs	r1, #0
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f8d7 	bl	8004780 <rndis_query_cmplt32>
 80045d2:	e05c      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_RNDIS_CONFIG_PARAMETER: rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 80045d4:	2200      	movs	r2, #0
 80045d6:	2100      	movs	r1, #0
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f8d1 	bl	8004780 <rndis_query_cmplt32>
 80045de:	e056      	b.n	800468e <rndis_query+0x2ce>
		case OID_802_3_MAXIMUM_LIST_SIZE:    rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 1); return;
 80045e0:	2201      	movs	r2, #1
 80045e2:	2100      	movs	r1, #0
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f8cb 	bl	8004780 <rndis_query_cmplt32>
 80045ea:	e050      	b.n	800468e <rndis_query+0x2ce>
		case OID_802_3_MULTICAST_LIST:       rndis_query_cmplt32(pdev, RNDIS_STATUS_NOT_SUPPORTED, 0); return;
 80045ec:	2200      	movs	r2, #0
 80045ee:	4948      	ldr	r1, [pc, #288]	; (8004710 <rndis_query+0x350>)
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f8c5 	bl	8004780 <rndis_query_cmplt32>
 80045f6:	e04a      	b.n	800468e <rndis_query+0x2ce>
		case OID_802_3_MAC_OPTIONS:          rndis_query_cmplt32(pdev, RNDIS_STATUS_NOT_SUPPORTED, 0); return;
 80045f8:	2200      	movs	r2, #0
 80045fa:	4945      	ldr	r1, [pc, #276]	; (8004710 <rndis_query+0x350>)
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f8bf 	bl	8004780 <rndis_query_cmplt32>
 8004602:	e044      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_MAC_OPTIONS:            rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, /*MAC_OPT*/ 0); return;
 8004604:	2200      	movs	r2, #0
 8004606:	2100      	movs	r1, #0
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f8b9 	bl	8004780 <rndis_query_cmplt32>
 800460e:	e03e      	b.n	800468e <rndis_query+0x2ce>
		case OID_802_3_RCV_ERROR_ALIGNMENT:  rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 8004610:	2200      	movs	r2, #0
 8004612:	2100      	movs	r1, #0
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f8b3 	bl	8004780 <rndis_query_cmplt32>
 800461a:	e038      	b.n	800468e <rndis_query+0x2ce>
		case OID_802_3_XMIT_ONE_COLLISION:   rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 800461c:	2200      	movs	r2, #0
 800461e:	2100      	movs	r1, #0
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f8ad 	bl	8004780 <rndis_query_cmplt32>
 8004626:	e032      	b.n	800468e <rndis_query+0x2ce>
		case OID_802_3_XMIT_MORE_COLLISIONS: rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 8004628:	2200      	movs	r2, #0
 800462a:	2100      	movs	r1, #0
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f8a7 	bl	8004780 <rndis_query_cmplt32>
 8004632:	e02c      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_XMIT_OK:                rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, usb_eth_stat.txok); return;
 8004634:	4b37      	ldr	r3, [pc, #220]	; (8004714 <rndis_query+0x354>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	2100      	movs	r1, #0
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f89f 	bl	8004780 <rndis_query_cmplt32>
 8004642:	e024      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_RCV_OK:                 rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, usb_eth_stat.rxok); return;
 8004644:	4b33      	ldr	r3, [pc, #204]	; (8004714 <rndis_query+0x354>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	461a      	mov	r2, r3
 800464a:	2100      	movs	r1, #0
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f897 	bl	8004780 <rndis_query_cmplt32>
 8004652:	e01c      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_RCV_ERROR:              rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, usb_eth_stat.rxbad); return;
 8004654:	4b2f      	ldr	r3, [pc, #188]	; (8004714 <rndis_query+0x354>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	461a      	mov	r2, r3
 800465a:	2100      	movs	r1, #0
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f88f 	bl	8004780 <rndis_query_cmplt32>
 8004662:	e014      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_XMIT_ERROR:             rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, usb_eth_stat.txbad); return;
 8004664:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <rndis_query+0x354>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	461a      	mov	r2, r3
 800466a:	2100      	movs	r1, #0
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f887 	bl	8004780 <rndis_query_cmplt32>
 8004672:	e00c      	b.n	800468e <rndis_query+0x2ce>
		case OID_GEN_RCV_NO_BUFFER:          rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 8004674:	2200      	movs	r2, #0
 8004676:	2100      	movs	r1, #0
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f881 	bl	8004780 <rndis_query_cmplt32>
 800467e:	e006      	b.n	800468e <rndis_query+0x2ce>
		default:                             rndis_query_cmplt(pdev, RNDIS_STATUS_FAILURE, NULL, 0); return;
 8004680:	2300      	movs	r3, #0
 8004682:	2200      	movs	r2, #0
 8004684:	4924      	ldr	r1, [pc, #144]	; (8004718 <rndis_query+0x358>)
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f848 	bl	800471c <rndis_query_cmplt>
 800468c:	bf00      	nop
	}
}
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	bd90      	pop	{r4, r7, pc}
 8004694:	20005248 	.word	0x20005248
 8004698:	00010116 	.word	0x00010116
 800469c:	0001010a 	.word	0x0001010a
 80046a0:	00010103 	.word	0x00010103
 80046a4:	00010101 	.word	0x00010101
 80046a8:	00010102 	.word	0x00010102
 80046ac:	00010106 	.word	0x00010106
 80046b0:	00010107 	.word	0x00010107
 80046b4:	00010104 	.word	0x00010104
 80046b8:	0001010e 	.word	0x0001010e
 80046bc:	0001010c 	.word	0x0001010c
 80046c0:	00010113 	.word	0x00010113
 80046c4:	00010114 	.word	0x00010114
 80046c8:	00010111 	.word	0x00010111
 80046cc:	00020102 	.word	0x00020102
 80046d0:	0001021b 	.word	0x0001021b
 80046d4:	00020101 	.word	0x00020101
 80046d8:	00010202 	.word	0x00010202
 80046dc:	00020104 	.word	0x00020104
 80046e0:	00020105 	.word	0x00020105
 80046e4:	01010105 	.word	0x01010105
 80046e8:	01010103 	.word	0x01010103
 80046ec:	01020102 	.word	0x01020102
 80046f0:	01020103 	.word	0x01020103
 80046f4:	01020101 	.word	0x01020101
 80046f8:	08010fe4 	.word	0x08010fe4
 80046fc:	0801103c 	.word	0x0801103c
 8004700:	08011044 	.word	0x08011044
 8004704:	0001d4c0 	.word	0x0001d4c0
 8004708:	20000098 	.word	0x20000098
 800470c:	200002f4 	.word	0x200002f4
 8004710:	c00000bb 	.word	0xc00000bb
 8004714:	200002e4 	.word	0x200002e4
 8004718:	c0000001 	.word	0xc0000001

0800471c <rndis_query_cmplt>:

void rndis_query_cmplt(void *pdev, int status, const void *data, int size){
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]
	rndis_query_cmplt_t *c;
	c = (rndis_query_cmplt_t *)encapsulated_buffer;
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <rndis_query_cmplt+0x58>)
 800472c:	617b      	str	r3, [r7, #20]
	c->MessageType = REMOTE_NDIS_QUERY_CMPLT;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	4a11      	ldr	r2, [pc, #68]	; (8004778 <rndis_query_cmplt+0x5c>)
 8004732:	601a      	str	r2, [r3, #0]
	c->MessageLength = sizeof(rndis_query_cmplt_t) + size;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	f103 0218 	add.w	r2, r3, #24
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	605a      	str	r2, [r3, #4]
	c->InformationBufferLength = size;
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	611a      	str	r2, [r3, #16]
	c->InformationBufferOffset = 16;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	2210      	movs	r2, #16
 8004748:	615a      	str	r2, [r3, #20]
	c->Status = status;
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	60da      	str	r2, [r3, #12]
	memcpy(c + 1, data, size);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	3318      	adds	r3, #24
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4618      	mov	r0, r3
 800475a:	f00c fa5e 	bl	8010c1a <memcpy>
	USBD_LL_Transmit(pdev, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 800475e:	2308      	movs	r3, #8
 8004760:	4a06      	ldr	r2, [pc, #24]	; (800477c <rndis_query_cmplt+0x60>)
 8004762:	2181      	movs	r1, #129	; 0x81
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f00c f8c3 	bl	80108f0 <USBD_LL_Transmit>
}
 800476a:	bf00      	nop
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20005248 	.word	0x20005248
 8004778:	80000004 	.word	0x80000004
 800477c:	08010ef4 	.word	0x08010ef4

08004780 <rndis_query_cmplt32>:

void rndis_query_cmplt32(void *pdev, int status, uint32_t data){
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
	rndis_query_cmplt_t *c;
	c = (rndis_query_cmplt_t *)encapsulated_buffer;
 800478c:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <rndis_query_cmplt32+0x4c>)
 800478e:	617b      	str	r3, [r7, #20]
	c->MessageType = REMOTE_NDIS_QUERY_CMPLT;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	4a0f      	ldr	r2, [pc, #60]	; (80047d0 <rndis_query_cmplt32+0x50>)
 8004794:	601a      	str	r2, [r3, #0]
	c->MessageLength = sizeof(rndis_query_cmplt_t) + 4;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	221c      	movs	r2, #28
 800479a:	605a      	str	r2, [r3, #4]
	c->InformationBufferLength = 4;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2204      	movs	r2, #4
 80047a0:	611a      	str	r2, [r3, #16]
	c->InformationBufferOffset = 16;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2210      	movs	r2, #16
 80047a6:	615a      	str	r2, [r3, #20]
	c->Status = status;
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	60da      	str	r2, [r3, #12]
	*(uint32_t *)(c + 1) = data;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	3318      	adds	r3, #24
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
	USBD_LL_Transmit(pdev, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 80047b6:	2308      	movs	r3, #8
 80047b8:	4a06      	ldr	r2, [pc, #24]	; (80047d4 <rndis_query_cmplt32+0x54>)
 80047ba:	2181      	movs	r1, #129	; 0x81
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f00c f897 	bl	80108f0 <USBD_LL_Transmit>
}
 80047c2:	bf00      	nop
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20005248 	.word	0x20005248
 80047d0:	80000004 	.word	0x80000004
 80047d4:	08010ef4 	.word	0x08010ef4

080047d8 <rndis_handle_set_msg>:
#define PARMNAME  ((uint8_t *)CFGBUF + CFGBUF->ParameterNameOffset)
#define PARMVALUE ((uint8_t *)CFGBUF + CFGBUF->ParameterValueOffset)
#define PARMVALUELENGTH	CFGBUF->ParameterValueLength
#define PARM_NAME_LENGTH 25 /* Maximum parameter name length */

void rndis_handle_set_msg(void  *pdev){
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	rndis_set_cmplt_t *c;
	rndis_set_msg_t *m;
	rndis_Oid_t oid;

	c = (rndis_set_cmplt_t *)encapsulated_buffer;
 80047e0:	4b2c      	ldr	r3, [pc, #176]	; (8004894 <rndis_handle_set_msg+0xbc>)
 80047e2:	61fb      	str	r3, [r7, #28]
	m = (rndis_set_msg_t *)encapsulated_buffer;
 80047e4:	4b2b      	ldr	r3, [pc, #172]	; (8004894 <rndis_handle_set_msg+0xbc>)
 80047e6:	61bb      	str	r3, [r7, #24]
		parmlength -= 2;
		i++;
	}
	*/

	oid = m->Oid;
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	617b      	str	r3, [r7, #20]
	c->MessageType = REMOTE_NDIS_SET_CMPLT;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4a29      	ldr	r2, [pc, #164]	; (8004898 <rndis_handle_set_msg+0xc0>)
 80047f2:	601a      	str	r2, [r3, #0]
	c->MessageLength = sizeof(rndis_set_cmplt_t);
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2210      	movs	r2, #16
 80047f8:	605a      	str	r2, [r3, #4]
	c->Status = RNDIS_STATUS_SUCCESS;
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	2200      	movs	r2, #0
 80047fe:	60da      	str	r2, [r3, #12]

	switch (oid)
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4a26      	ldr	r2, [pc, #152]	; (800489c <rndis_handle_set_msg+0xc4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d036      	beq.n	8004876 <rndis_handle_set_msg+0x9e>
 8004808:	4a24      	ldr	r2, [pc, #144]	; (800489c <rndis_handle_set_msg+0xc4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d806      	bhi.n	800481c <rndis_handle_set_msg+0x44>
 800480e:	4a24      	ldr	r2, [pc, #144]	; (80048a0 <rndis_handle_set_msg+0xc8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d017      	beq.n	8004844 <rndis_handle_set_msg+0x6c>
 8004814:	4a23      	ldr	r2, [pc, #140]	; (80048a4 <rndis_handle_set_msg+0xcc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d02f      	beq.n	800487a <rndis_handle_set_msg+0xa2>
 800481a:	e028      	b.n	800486e <rndis_handle_set_msg+0x96>
 800481c:	4a22      	ldr	r2, [pc, #136]	; (80048a8 <rndis_handle_set_msg+0xd0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d003      	beq.n	800482a <rndis_handle_set_msg+0x52>
 8004822:	4a22      	ldr	r2, [pc, #136]	; (80048ac <rndis_handle_set_msg+0xd4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d02a      	beq.n	800487e <rndis_handle_set_msg+0xa6>
 8004828:	e021      	b.n	800486e <rndis_handle_set_msg+0x96>
	{
		/* Parameters set up in 'Advanced' tab */
		case OID_GEN_RNDIS_CONFIG_PARAMETER:
			{
                rndis_config_parameter_t *p;
				char *ptr = (char *)m;
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	613b      	str	r3, [r7, #16]
				ptr += sizeof(rndis_generic_msg_t);
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	3308      	adds	r3, #8
 8004832:	613b      	str	r3, [r7, #16]
				ptr += m->InformationBufferOffset;
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4413      	add	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
				p = (rndis_config_parameter_t *)ptr;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	60fb      	str	r3, [r7, #12]
				//rndis_handle_config_parm(ptr, p->ParameterNameOffset, p->ParameterValueOffset, p->ParameterNameLength, p->ParameterValueLength);
			}
			break;
 8004842:	e01d      	b.n	8004880 <rndis_handle_set_msg+0xa8>

		/* Mandatory general OIDs */
		case OID_GEN_CURRENT_PACKET_FILTER:
			oid_packet_filter = *INFBUF;
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	f103 0208 	add.w	r2, r3, #8
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	4413      	add	r3, r2
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a17      	ldr	r2, [pc, #92]	; (80048b0 <rndis_handle_set_msg+0xd8>)
 8004854:	6013      	str	r3, [r2, #0]
			if (oid_packet_filter)
 8004856:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <rndis_handle_set_msg+0xd8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <rndis_handle_set_msg+0x8e>
			{
				//rndis_packetFilter(oid_packet_filter);
				rndis_state = rndis_data_initialized;
 800485e:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <rndis_handle_set_msg+0xdc>)
 8004860:	2202      	movs	r2, #2
 8004862:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				rndis_state = rndis_initialized;
			}
			break;
 8004864:	e00c      	b.n	8004880 <rndis_handle_set_msg+0xa8>
				rndis_state = rndis_initialized;
 8004866:	4b13      	ldr	r3, [pc, #76]	; (80048b4 <rndis_handle_set_msg+0xdc>)
 8004868:	2201      	movs	r2, #1
 800486a:	701a      	strb	r2, [r3, #0]
			break;
 800486c:	e008      	b.n	8004880 <rndis_handle_set_msg+0xa8>
		/* Power Managment: fails for now */
		case OID_PNP_ADD_WAKE_UP_PATTERN:
		case OID_PNP_REMOVE_WAKE_UP_PATTERN:
		case OID_PNP_ENABLE_WAKE_UP:
		default:
			c->Status = RNDIS_STATUS_FAILURE;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	4a11      	ldr	r2, [pc, #68]	; (80048b8 <rndis_handle_set_msg+0xe0>)
 8004872:	60da      	str	r2, [r3, #12]
			break;
 8004874:	e004      	b.n	8004880 <rndis_handle_set_msg+0xa8>
			break;
 8004876:	bf00      	nop
 8004878:	e002      	b.n	8004880 <rndis_handle_set_msg+0xa8>
			break;
 800487a:	bf00      	nop
 800487c:	e000      	b.n	8004880 <rndis_handle_set_msg+0xa8>
			break;
 800487e:	bf00      	nop
	}

	/* c->MessageID is same as before */
	USBD_LL_Transmit(pdev, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 8004880:	2308      	movs	r3, #8
 8004882:	4a0e      	ldr	r2, [pc, #56]	; (80048bc <rndis_handle_set_msg+0xe4>)
 8004884:	2181      	movs	r1, #129	; 0x81
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f00c f832 	bl	80108f0 <USBD_LL_Transmit>
	return;
 800488c:	bf00      	nop
}
 800488e:	3720      	adds	r7, #32
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20005248 	.word	0x20005248
 8004898:	80000005 	.word	0x80000005
 800489c:	00010112 	.word	0x00010112
 80048a0:	0001010e 	.word	0x0001010e
 80048a4:	0001010f 	.word	0x0001010f
 80048a8:	0001021b 	.word	0x0001021b
 80048ac:	01010103 	.word	0x01010103
 80048b0:	200002f4 	.word	0x200002f4
 80048b4:	200058dc 	.word	0x200058dc
 80048b8:	c0000001 	.word	0xc0000001
 80048bc:	08010ef4 	.word	0x08010ef4

080048c0 <xNetworkInterfaceInitialise>:

BaseType_t xNetworkInterfaceInitialise( void )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af02      	add	r7, sp, #8
	xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, configMAX_PRIORITIES - 1, &xEMACTaskHandle );
 80048c6:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <xNetworkInterfaceInitialise+0x24>)
 80048c8:	9301      	str	r3, [sp, #4]
 80048ca:	2306      	movs	r3, #6
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	2300      	movs	r3, #0
 80048d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048d4:	4904      	ldr	r1, [pc, #16]	; (80048e8 <xNetworkInterfaceInitialise+0x28>)
 80048d6:	4805      	ldr	r0, [pc, #20]	; (80048ec <xNetworkInterfaceInitialise+0x2c>)
 80048d8:	f002 fcdc 	bl	8007294 <xTaskCreate>

    return pdTRUE;
 80048dc:	2301      	movs	r3, #1
}
 80048de:	4618      	mov	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	2000030c 	.word	0x2000030c
 80048e8:	08010f08 	.word	0x08010f08
 80048ec:	08004a09 	.word	0x08004a09

080048f0 <xNetworkInterfaceOutput>:

BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor, BaseType_t xReleaseAfterSend ){
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
    This example assumes SendData() is a peripheral driver library function that
    takes a pointer to the start of the data to be sent and the length of the
    data to be sent as two separate parameters.  The start of the data is located
    by pxDescriptor->pucEthernetBuffer.  The length of the data is located
    by pxDescriptor->xDataLength. */
	if (pxDescriptor->xDataLength <= 0 || pxDescriptor->xDataLength > ETH_MAX_PACKET_SIZE || rndis_tx_size > 0){
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d009      	beq.n	8004916 <xNetworkInterfaceOutput+0x26>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800490a:	4293      	cmp	r3, r2
 800490c:	d803      	bhi.n	8004916 <xNetworkInterfaceOutput+0x26>
 800490e:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <xNetworkInterfaceOutput+0x88>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	dd08      	ble.n	8004928 <xNetworkInterfaceOutput+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004916:	b672      	cpsid	i
		__disable_irq();
		usbd_cdc_transfer(pDev);
 8004918:	4b18      	ldr	r3, [pc, #96]	; (800497c <xNetworkInterfaceOutput+0x8c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fc8d 	bl	800423c <usbd_cdc_transfer>
  __ASM volatile ("cpsie i" : : : "memory");
 8004922:	b662      	cpsie	i
		__enable_irq();
		return pdFALSE;
 8004924:	2300      	movs	r3, #0
 8004926:	e023      	b.n	8004970 <xNetworkInterfaceOutput+0x80>
  __ASM volatile ("cpsid i" : : : "memory");
 8004928:	b672      	cpsid	i
	}

	__disable_irq();
	rndis_first_tx = true;
 800492a:	4b15      	ldr	r3, [pc, #84]	; (8004980 <xNetworkInterfaceOutput+0x90>)
 800492c:	2201      	movs	r2, #1
 800492e:	601a      	str	r2, [r3, #0]
	memcpy((void *) data_to_send, (void *) pxDescriptor->pucEthernetBuffer, pxDescriptor->xDataLength);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6999      	ldr	r1, [r3, #24]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	461a      	mov	r2, r3
 800493a:	4812      	ldr	r0, [pc, #72]	; (8004984 <xNetworkInterfaceOutput+0x94>)
 800493c:	f00c f96d 	bl	8010c1a <memcpy>
	rndis_sended = 0;
 8004940:	4b11      	ldr	r3, [pc, #68]	; (8004988 <xNetworkInterfaceOutput+0x98>)
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
	rndis_tx_ptr = (uint8_t *)data_to_send;
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <xNetworkInterfaceOutput+0x9c>)
 8004948:	4a0e      	ldr	r2, [pc, #56]	; (8004984 <xNetworkInterfaceOutput+0x94>)
 800494a:	601a      	str	r2, [r3, #0]
	rndis_tx_size = pxDescriptor->xDataLength;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	461a      	mov	r2, r3
 8004952:	4b09      	ldr	r3, [pc, #36]	; (8004978 <xNetworkInterfaceOutput+0x88>)
 8004954:	601a      	str	r2, [r3, #0]
	usbd_cdc_transfer(pDev);
 8004956:	4b09      	ldr	r3, [pc, #36]	; (800497c <xNetworkInterfaceOutput+0x8c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fc6e 	bl	800423c <usbd_cdc_transfer>
  __ASM volatile ("cpsie i" : : : "memory");
 8004960:	b662      	cpsie	i
	__enable_irq();
    /* Call the standard trace macro to log the send event. */
    iptraceNETWORK_INTERFACE_TRANSMIT();
	if( xReleaseAfterSend != pdFALSE ){
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <xNetworkInterfaceOutput+0x7e>
        /* It is assumed SendData() copies the data out of the FreeRTOS+TCP Ethernet
        buffer.  The Ethernet buffer is therefore no longer needed, and must be
        freed for re-use. */
        vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f00b f9a7 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
    }
    return pdTRUE;
 800496e:	2301      	movs	r3, #1
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	200002fc 	.word	0x200002fc
 800497c:	200058e0 	.word	0x200058e0
 8004980:	20000004 	.word	0x20000004
 8004984:	20004644 	.word	0x20004644
 8004988:	20000300 	.word	0x20000300
 800498c:	200002f8 	.word	0x200002f8

08004990 <rndis_rxproc>:

static void rndis_rxproc(const char *data, int size){
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
	memcpy((void *) rndis_rx_tcp_buffer, (void *) data, size);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	4814      	ldr	r0, [pc, #80]	; (80049f4 <rndis_rxproc+0x64>)
 80049a2:	f00c f93a 	bl	8010c1a <memcpy>
	rndis_tx_tcp_size = size;
 80049a6:	4a14      	ldr	r2, [pc, #80]	; (80049f8 <rndis_rxproc+0x68>)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	6013      	str	r3, [r2, #0]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]

	/* Ethernet RX-Complete callback function, elsewhere declared as weak. */
	ulISREvents |= EMAC_IF_RX_EVENT;
 80049b0:	4b12      	ldr	r3, [pc, #72]	; (80049fc <rndis_rxproc+0x6c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	4a10      	ldr	r2, [pc, #64]	; (80049fc <rndis_rxproc+0x6c>)
 80049ba:	6013      	str	r3, [r2, #0]
	if( xEMACTaskHandle != NULL )
 80049bc:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <rndis_rxproc+0x70>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d012      	beq.n	80049ea <rndis_rxproc+0x5a>
	{
		vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <rndis_rxproc+0x70>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f107 020c 	add.w	r2, r7, #12
 80049cc:	4611      	mov	r1, r2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f003 fd2e 	bl	8008430 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <rndis_rxproc+0x5a>
 80049da:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <rndis_rxproc+0x74>)
 80049dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	f3bf 8f6f 	isb	sy
	}
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	200052c0 	.word	0x200052c0
 80049f8:	20000314 	.word	0x20000314
 80049fc:	20000310 	.word	0x20000310
 8004a00:	2000030c 	.word	0x2000030c
 8004a04:	e000ed04 	.word	0xe000ed04

08004a08 <prvEMACHandlerTask>:
static void prvEMACHandlerTask( void *pvParameters )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
	/* Used to indicate that xSendEventStructToIPTask() is being called because
	of an Ethernet receive event. */
	IPStackEvent_t xRxEvent;
    for( ;; )
    {
        ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 8004a10:	f04f 31ff 	mov.w	r1, #4294967295
 8004a14:	2000      	movs	r0, #0
 8004a16:	f003 fcc3 	bl	80083a0 <ulTaskNotifyTake>
		xBytesReceived = rndis_tx_tcp_size;
 8004a1a:	4b1a      	ldr	r3, [pc, #104]	; (8004a84 <prvEMACHandlerTask+0x7c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	617b      	str	r3, [r7, #20]
		if( xBytesReceived > 0 ){
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f4      	beq.n	8004a10 <prvEMACHandlerTask+0x8>
			/* Allocate a network buffer descriptor that points to a buffer
			large enough to hold the received frame.  As this is the simple
			rather than efficient example the received data will just be copied
			into this buffer. */
			pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( xBytesReceived, 0 );
 8004a26:	2100      	movs	r1, #0
 8004a28:	6978      	ldr	r0, [r7, #20]
 8004a2a:	f00b f8cf 	bl	800fbcc <pxGetNetworkBufferWithDescriptor>
 8004a2e:	6138      	str	r0, [r7, #16]

			if( pxBufferDescriptor != NULL )
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0ec      	beq.n	8004a10 <prvEMACHandlerTask+0x8>
				is assumed ReceiveData() is a peripheral driver function that
				copies the received data into a buffer passed in as the function's
				parameter.  Remember! While is is a simple robust technique -
				it is not efficient.  An example that uses a zero copy technique
				is provided further down this page. */
				memcpy((void *) pxBufferDescriptor->pucEthernetBuffer, (void *) rndis_rx_tcp_buffer, xBytesReceived);
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4912      	ldr	r1, [pc, #72]	; (8004a88 <prvEMACHandlerTask+0x80>)
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f00c f8eb 	bl	8010c1a <memcpy>
				pxBufferDescriptor->xDataLength = xBytesReceived;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	61da      	str	r2, [r3, #28]

				/* See if the data contained in the received Ethernet frame needs
				to be processed.  NOTE! It is preferable to do this in
				the interrupt service routine itself, which would remove the need
				to unblock this task for packets that don't need processing. */
				if( eConsiderFrameForProcessing( pxBufferDescriptor->pucEthernetBuffer )
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f005 fd8e 	bl	800a570 <eConsiderFrameForProcessing>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d110      	bne.n	8004a7c <prvEMACHandlerTask+0x74>
																	  == eProcessBuffer ){
					/* The event about to be sent to the TCP/IP is an Rx event. */
					xRxEvent.eEventType = eNetworkRxEvent;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	723b      	strb	r3, [r7, #8]

					/* pvData is used to point to the network buffer descriptor that
					now references the received data. */
					xRxEvent.pvData = ( void * ) pxBufferDescriptor;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	60fb      	str	r3, [r7, #12]

					/* Send the data to the TCP/IP stack. */
					if( xSendEventStructToIPTask( &xRxEvent, 0 ) == pdFALSE )
 8004a62:	f107 0308 	add.w	r3, r7, #8
 8004a66:	2100      	movs	r1, #0
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f005 fd37 	bl	800a4dc <xSendEventStructToIPTask>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1cd      	bne.n	8004a10 <prvEMACHandlerTask+0x8>
					{
						/* The buffer could not be sent to the IP task so the buffer
						must be released. */
						vReleaseNetworkBufferAndDescriptor( pxBufferDescriptor );
 8004a74:	6938      	ldr	r0, [r7, #16]
 8004a76:	f00b f921 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
 8004a7a:	e7c9      	b.n	8004a10 <prvEMACHandlerTask+0x8>
				}
				else
				{
					/* The Ethernet frame can be dropped, but the Ethernet buffer
					must be released. */
					vReleaseNetworkBufferAndDescriptor( pxBufferDescriptor );
 8004a7c:	6938      	ldr	r0, [r7, #16]
 8004a7e:	f00b f91d 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
        ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 8004a82:	e7c5      	b.n	8004a10 <prvEMACHandlerTask+0x8>
 8004a84:	20000314 	.word	0x20000314
 8004a88:	200052c0 	.word	0x200052c0

08004a8c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	4613      	mov	r3, r2
 8004a98:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e01a      	b.n	8004ada <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	79fa      	ldrb	r2, [r7, #7]
 8004ad0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f00b fd3e 	bl	8010554 <USBD_LL_Init>
  
  return USBD_OK; 
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d006      	beq.n	8004b04 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	73fb      	strb	r3, [r7, #15]
 8004b02:	e001      	b.n	8004b08 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8004b04:	2302      	movs	r3, #2
 8004b06:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f00b fd72 	bl	8010608 <USBD_LL_Start>
  
  return USBD_OK;  
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004b50:	2302      	movs	r3, #2
 8004b52:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00c      	beq.n	8004b78 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	78fa      	ldrb	r2, [r7, #3]
 8004b68:	4611      	mov	r1, r2
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	78fa      	ldrb	r2, [r7, #3]
 8004b98:	4611      	mov	r1, r2
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
  return USBD_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004bb8:	6839      	ldr	r1, [r7, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fd99 	bl	80056f2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004bce:	461a      	mov	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d00b      	beq.n	8004bfc <USBD_LL_SetupStage+0x54>
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d011      	beq.n	8004c0c <USBD_LL_SetupStage+0x64>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d117      	bne.n	8004c1c <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f9c7 	bl	8004f88 <USBD_StdDevReq>
    break;
 8004bfa:	e01a      	b.n	8004c32 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c02:	4619      	mov	r1, r3
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fa0f 	bl	8005028 <USBD_StdItfReq>
    break;
 8004c0a:	e012      	b.n	8004c32 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c12:	4619      	mov	r1, r3
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fa3a 	bl	800508e <USBD_StdEPReq>
    break;
 8004c1a:	e00a      	b.n	8004c32 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004c22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f00b fd92 	bl	8010754 <USBD_LL_StallEP>
    break;
 8004c30:	bf00      	nop
  }  
  return USBD_OK;  
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	460b      	mov	r3, r1
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004c4a:	7afb      	ldrb	r3, [r7, #11]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d138      	bne.n	8004cc2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004c56:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d142      	bne.n	8004ce8 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d914      	bls.n	8004c98 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	1ad2      	subs	r2, r2, r3
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4293      	cmp	r3, r2
 8004c86:	bf28      	it	cs
 8004c88:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fe23 	bl	80058dc <USBD_CtlContinueRx>
 8004c96:	e027      	b.n	8004ce8 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d105      	bne.n	8004cba <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 fe20 	bl	8005900 <USBD_CtlSendStatus>
 8004cc0:	e012      	b.n	8004ce8 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00c      	beq.n	8004ce8 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d107      	bne.n	8004ce8 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	7afa      	ldrb	r2, [r7, #11]
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	4798      	blx	r3
  }  
  return USBD_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b086      	sub	sp, #24
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	607a      	str	r2, [r7, #4]
 8004cfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8004d00:	7afb      	ldrb	r3, [r7, #11]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d16c      	bne.n	8004de0 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3314      	adds	r3, #20
 8004d0a:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d157      	bne.n	8004dc6 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d915      	bls.n	8004d4e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	1ad2      	subs	r2, r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	461a      	mov	r2, r3
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fd9e 	bl	800587c <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004d40:	2300      	movs	r3, #0
 8004d42:	2200      	movs	r2, #0
 8004d44:	2100      	movs	r1, #0
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f00b fe0c 	bl	8010964 <USBD_LL_PrepareReceive>
 8004d4c:	e03b      	b.n	8004dc6 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	68d2      	ldr	r2, [r2, #12]
 8004d56:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d5a:	fb02 f201 	mul.w	r2, r2, r1
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d11c      	bne.n	8004d9e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d316      	bcc.n	8004d9e <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d20f      	bcs.n	8004d9e <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2100      	movs	r1, #0
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 fd7a 	bl	800587c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004d90:	2300      	movs	r3, #0
 8004d92:	2200      	movs	r2, #0
 8004d94:	2100      	movs	r1, #0
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f00b fde4 	bl	8010964 <USBD_LL_PrepareReceive>
 8004d9c:	e013      	b.n	8004dc6 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d105      	bne.n	8004dc0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 fdb0 	bl	8005926 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d11a      	bne.n	8004e06 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f7ff feac 	bl	8004b2e <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8004dde:	e012      	b.n	8004e06 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00c      	beq.n	8004e06 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d107      	bne.n	8004e06 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	7afa      	ldrb	r2, [r7, #11]
 8004e00:	4611      	mov	r1, r2
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	4798      	blx	r3
  }  
  return USBD_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004e18:	2340      	movs	r3, #64	; 0x40
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f00b fc24 	bl	801066c <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2240      	movs	r2, #64	; 0x40
 8004e28:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004e2c:	2340      	movs	r3, #64	; 0x40
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2180      	movs	r1, #128	; 0x80
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f00b fc1a 	bl	801066c <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2240      	movs	r2, #64	; 0x40
 8004e3c:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d009      	beq.n	8004e64 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6852      	ldr	r2, [r2, #4]
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	4611      	mov	r1, r2
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	4798      	blx	r3
 
  
  return USBD_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	460b      	mov	r3, r1
 8004e78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	78fa      	ldrb	r2, [r7, #3]
 8004e7e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d10b      	bne.n	8004f04 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	460b      	mov	r3, r1
 8004f18:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6852      	ldr	r2, [r2, #4]
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	4611      	mov	r1, r2
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	4798      	blx	r3
   
  return USBD_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8004f92:	2300      	movs	r3, #0
 8004f94:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	2b09      	cmp	r3, #9
 8004f9c:	d839      	bhi.n	8005012 <USBD_StdDevReq+0x8a>
 8004f9e:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <USBD_StdDevReq+0x1c>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08004ff5 	.word	0x08004ff5
 8004fa8:	08005009 	.word	0x08005009
 8004fac:	08005013 	.word	0x08005013
 8004fb0:	08004fff 	.word	0x08004fff
 8004fb4:	08005013 	.word	0x08005013
 8004fb8:	08004fd7 	.word	0x08004fd7
 8004fbc:	08004fcd 	.word	0x08004fcd
 8004fc0:	08005013 	.word	0x08005013
 8004fc4:	08004feb 	.word	0x08004feb
 8004fc8:	08004fe1 	.word	0x08004fe1
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8004fcc:	6839      	ldr	r1, [r7, #0]
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f936 	bl	8005240 <USBD_GetDescriptor>
    break;
 8004fd4:	e022      	b.n	800501c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8004fd6:	6839      	ldr	r1, [r7, #0]
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fa25 	bl	8005428 <USBD_SetAddress>
    break;
 8004fde:	e01d      	b.n	800501c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8004fe0:	6839      	ldr	r1, [r7, #0]
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fa5e 	bl	80054a4 <USBD_SetConfig>
    break;
 8004fe8:	e018      	b.n	800501c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8004fea:	6839      	ldr	r1, [r7, #0]
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fae1 	bl	80055b4 <USBD_GetConfig>
    break;
 8004ff2:	e013      	b.n	800501c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8004ff4:	6839      	ldr	r1, [r7, #0]
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fb0e 	bl	8005618 <USBD_GetStatus>
    break;
 8004ffc:	e00e      	b.n	800501c <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8004ffe:	6839      	ldr	r1, [r7, #0]
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fb33 	bl	800566c <USBD_SetFeature>
    break;
 8005006:	e009      	b.n	800501c <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8005008:	6839      	ldr	r1, [r7, #0]
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fb49 	bl	80056a2 <USBD_ClrFeature>
    break;
 8005010:	e004      	b.n	800501c <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8005012:	6839      	ldr	r1, [r7, #0]
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fba9 	bl	800576c <USBD_CtlError>
    break;
 800501a:	bf00      	nop
  }
  
  return ret;
 800501c:	7bfb      	ldrb	r3, [r7, #15]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop

08005028 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8005032:	2300      	movs	r3, #0
 8005034:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800503c:	2b03      	cmp	r3, #3
 800503e:	d11b      	bne.n	8005078 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	889b      	ldrh	r3, [r3, #4]
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b01      	cmp	r3, #1
 8005048:	d811      	bhi.n	800506e <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	6839      	ldr	r1, [r7, #0]
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	88db      	ldrh	r3, [r3, #6]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d110      	bne.n	8005082 <USBD_StdItfReq+0x5a>
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10d      	bne.n	8005082 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fc4a 	bl	8005900 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800506c:	e009      	b.n	8005082 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 800506e:	6839      	ldr	r1, [r7, #0]
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fb7b 	bl	800576c <USBD_CtlError>
    break;
 8005076:	e004      	b.n	8005082 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8005078:	6839      	ldr	r1, [r7, #0]
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fb76 	bl	800576c <USBD_CtlError>
    break;
 8005080:	e000      	b.n	8005084 <USBD_StdItfReq+0x5c>
    break;
 8005082:	bf00      	nop
  }
  return USBD_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
 8005096:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8005098:	2300      	movs	r3, #0
 800509a:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	889b      	ldrh	r3, [r3, #4]
 80050a0:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d108      	bne.n	80050c0 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	6839      	ldr	r1, [r7, #0]
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	4798      	blx	r3
    
    return USBD_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	e0ba      	b.n	8005236 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	785b      	ldrb	r3, [r3, #1]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d039      	beq.n	800513c <USBD_StdEPReq+0xae>
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d002      	beq.n	80050d2 <USBD_StdEPReq+0x44>
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d06b      	beq.n	80051a8 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 80050d0:	e0b0      	b.n	8005234 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d002      	beq.n	80050e2 <USBD_StdEPReq+0x54>
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d00c      	beq.n	80050fa <USBD_StdEPReq+0x6c>
 80050e0:	e025      	b.n	800512e <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80050e2:	7bbb      	ldrb	r3, [r7, #14]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d027      	beq.n	8005138 <USBD_StdEPReq+0xaa>
 80050e8:	7bbb      	ldrb	r3, [r7, #14]
 80050ea:	2b80      	cmp	r3, #128	; 0x80
 80050ec:	d024      	beq.n	8005138 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 80050ee:	7bbb      	ldrb	r3, [r7, #14]
 80050f0:	4619      	mov	r1, r3
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f00b fb2e 	bl	8010754 <USBD_LL_StallEP>
      break;	
 80050f8:	e01e      	b.n	8005138 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	885b      	ldrh	r3, [r3, #2]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005102:	7bbb      	ldrb	r3, [r7, #14]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d007      	beq.n	8005118 <USBD_StdEPReq+0x8a>
 8005108:	7bbb      	ldrb	r3, [r7, #14]
 800510a:	2b80      	cmp	r3, #128	; 0x80
 800510c:	d004      	beq.n	8005118 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 800510e:	7bbb      	ldrb	r3, [r7, #14]
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f00b fb1e 	bl	8010754 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	6839      	ldr	r1, [r7, #0]
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fbea 	bl	8005900 <USBD_CtlSendStatus>
      break;
 800512c:	e005      	b.n	800513a <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fb1b 	bl	800576c <USBD_CtlError>
      break;    
 8005136:	e000      	b.n	800513a <USBD_StdEPReq+0xac>
      break;	
 8005138:	bf00      	nop
    break;
 800513a:	e07b      	b.n	8005234 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005142:	2b02      	cmp	r3, #2
 8005144:	d002      	beq.n	800514c <USBD_StdEPReq+0xbe>
 8005146:	2b03      	cmp	r3, #3
 8005148:	d00c      	beq.n	8005164 <USBD_StdEPReq+0xd6>
 800514a:	e024      	b.n	8005196 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800514c:	7bbb      	ldrb	r3, [r7, #14]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d026      	beq.n	80051a0 <USBD_StdEPReq+0x112>
 8005152:	7bbb      	ldrb	r3, [r7, #14]
 8005154:	2b80      	cmp	r3, #128	; 0x80
 8005156:	d023      	beq.n	80051a0 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8005158:	7bbb      	ldrb	r3, [r7, #14]
 800515a:	4619      	mov	r1, r3
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f00b faf9 	bl	8010754 <USBD_LL_StallEP>
      break;	
 8005162:	e01d      	b.n	80051a0 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	885b      	ldrh	r3, [r3, #2]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d11b      	bne.n	80051a4 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 800516c:	7bbb      	ldrb	r3, [r7, #14]
 800516e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00b      	beq.n	800518e <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8005176:	7bbb      	ldrb	r3, [r7, #14]
 8005178:	4619      	mov	r1, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f00b fb20 	bl	80107c0 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	6839      	ldr	r1, [r7, #0]
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fbb6 	bl	8005900 <USBD_CtlSendStatus>
      break;
 8005194:	e006      	b.n	80051a4 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8005196:	6839      	ldr	r1, [r7, #0]
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fae7 	bl	800576c <USBD_CtlError>
      break;    
 800519e:	e002      	b.n	80051a6 <USBD_StdEPReq+0x118>
      break;	
 80051a0:	bf00      	nop
 80051a2:	e047      	b.n	8005234 <USBD_StdEPReq+0x1a6>
      break;
 80051a4:	bf00      	nop
    break;
 80051a6:	e045      	b.n	8005234 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d002      	beq.n	80051b8 <USBD_StdEPReq+0x12a>
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d00b      	beq.n	80051ce <USBD_StdEPReq+0x140>
 80051b6:	e036      	b.n	8005226 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 80051b8:	7bbb      	ldrb	r3, [r7, #14]
 80051ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d036      	beq.n	8005230 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 80051c2:	7bbb      	ldrb	r3, [r7, #14]
 80051c4:	4619      	mov	r1, r3
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f00b fac4 	bl	8010754 <USBD_LL_StallEP>
      break;	
 80051cc:	e030      	b.n	8005230 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80051ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	da08      	bge.n	80051e8 <USBD_StdEPReq+0x15a>
 80051d6:	7bbb      	ldrb	r3, [r7, #14]
 80051d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051dc:	3301      	adds	r3, #1
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	4413      	add	r3, r2
 80051e4:	3304      	adds	r3, #4
 80051e6:	e007      	b.n	80051f8 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80051e8:	7bbb      	ldrb	r3, [r7, #14]
 80051ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80051ee:	3310      	adds	r3, #16
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	4413      	add	r3, r2
 80051f6:	3304      	adds	r3, #4
 80051f8:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80051fa:	7bbb      	ldrb	r3, [r7, #14]
 80051fc:	4619      	mov	r1, r3
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f00b fb14 	bl	801082c <USBD_LL_IsStallEP>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2201      	movs	r2, #1
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	e002      	b.n	8005218 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8005218:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 800521a:	2202      	movs	r2, #2
 800521c:	4619      	mov	r1, r3
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fb10 	bl	8005844 <USBD_CtlSendData>
      break;
 8005224:	e005      	b.n	8005232 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8005226:	6839      	ldr	r1, [r7, #0]
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fa9f 	bl	800576c <USBD_CtlError>
      break;
 800522e:	e000      	b.n	8005232 <USBD_StdEPReq+0x1a4>
      break;	
 8005230:	bf00      	nop
    break;
 8005232:	bf00      	nop
  }
  return ret;
 8005234:	7bfb      	ldrb	r3, [r7, #15]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	885b      	ldrh	r3, [r3, #2]
 800524e:	0a1b      	lsrs	r3, r3, #8
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	2b06      	cmp	r3, #6
 8005256:	f200 80c9 	bhi.w	80053ec <USBD_GetDescriptor+0x1ac>
 800525a:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <USBD_GetDescriptor+0x20>)
 800525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005260:	0800527d 	.word	0x0800527d
 8005264:	08005295 	.word	0x08005295
 8005268:	080052d5 	.word	0x080052d5
 800526c:	080053ed 	.word	0x080053ed
 8005270:	080053ed 	.word	0x080053ed
 8005274:	08005399 	.word	0x08005399
 8005278:	080053bf 	.word	0x080053bf
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	7c12      	ldrb	r2, [r2, #16]
 8005288:	f107 010a 	add.w	r1, r7, #10
 800528c:	4610      	mov	r0, r2
 800528e:	4798      	blx	r3
 8005290:	60f8      	str	r0, [r7, #12]
    break;
 8005292:	e0b0      	b.n	80053f6 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	7c1b      	ldrb	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10d      	bne.n	80052b8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	f107 020a 	add.w	r2, r7, #10
 80052a8:	4610      	mov	r0, r2
 80052aa:	4798      	blx	r3
 80052ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3301      	adds	r3, #1
 80052b2:	2202      	movs	r2, #2
 80052b4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80052b6:	e09e      	b.n	80053f6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	f107 020a 	add.w	r2, r7, #10
 80052c4:	4610      	mov	r0, r2
 80052c6:	4798      	blx	r3
 80052c8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3301      	adds	r3, #1
 80052ce:	2202      	movs	r2, #2
 80052d0:	701a      	strb	r2, [r3, #0]
    break;
 80052d2:	e090      	b.n	80053f6 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	885b      	ldrh	r3, [r3, #2]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b05      	cmp	r3, #5
 80052dc:	d856      	bhi.n	800538c <USBD_GetDescriptor+0x14c>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <USBD_GetDescriptor+0xa4>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	080052fd 	.word	0x080052fd
 80052e8:	08005315 	.word	0x08005315
 80052ec:	0800532d 	.word	0x0800532d
 80052f0:	08005345 	.word	0x08005345
 80052f4:	0800535d 	.word	0x0800535d
 80052f8:	08005375 	.word	0x08005375
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	7c12      	ldrb	r2, [r2, #16]
 8005308:	f107 010a 	add.w	r1, r7, #10
 800530c:	4610      	mov	r0, r2
 800530e:	4798      	blx	r3
 8005310:	60f8      	str	r0, [r7, #12]
      break;
 8005312:	e040      	b.n	8005396 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	7c12      	ldrb	r2, [r2, #16]
 8005320:	f107 010a 	add.w	r1, r7, #10
 8005324:	4610      	mov	r0, r2
 8005326:	4798      	blx	r3
 8005328:	60f8      	str	r0, [r7, #12]
      break;
 800532a:	e034      	b.n	8005396 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	7c12      	ldrb	r2, [r2, #16]
 8005338:	f107 010a 	add.w	r1, r7, #10
 800533c:	4610      	mov	r0, r2
 800533e:	4798      	blx	r3
 8005340:	60f8      	str	r0, [r7, #12]
      break;
 8005342:	e028      	b.n	8005396 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	7c12      	ldrb	r2, [r2, #16]
 8005350:	f107 010a 	add.w	r1, r7, #10
 8005354:	4610      	mov	r0, r2
 8005356:	4798      	blx	r3
 8005358:	60f8      	str	r0, [r7, #12]
      break;
 800535a:	e01c      	b.n	8005396 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	7c12      	ldrb	r2, [r2, #16]
 8005368:	f107 010a 	add.w	r1, r7, #10
 800536c:	4610      	mov	r0, r2
 800536e:	4798      	blx	r3
 8005370:	60f8      	str	r0, [r7, #12]
      break;
 8005372:	e010      	b.n	8005396 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	7c12      	ldrb	r2, [r2, #16]
 8005380:	f107 010a 	add.w	r1, r7, #10
 8005384:	4610      	mov	r0, r2
 8005386:	4798      	blx	r3
 8005388:	60f8      	str	r0, [r7, #12]
      break;
 800538a:	e004      	b.n	8005396 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800538c:	6839      	ldr	r1, [r7, #0]
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f9ec 	bl	800576c <USBD_CtlError>
      return;
 8005394:	e044      	b.n	8005420 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8005396:	e02e      	b.n	80053f6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	7c1b      	ldrb	r3, [r3, #16]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d109      	bne.n	80053b4 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a8:	f107 020a 	add.w	r2, r7, #10
 80053ac:	4610      	mov	r0, r2
 80053ae:	4798      	blx	r3
 80053b0:	60f8      	str	r0, [r7, #12]
      break;
 80053b2:	e020      	b.n	80053f6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80053b4:	6839      	ldr	r1, [r7, #0]
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f9d8 	bl	800576c <USBD_CtlError>
      return;
 80053bc:	e030      	b.n	8005420 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	7c1b      	ldrb	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10d      	bne.n	80053e2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	f107 020a 	add.w	r2, r7, #10
 80053d2:	4610      	mov	r0, r2
 80053d4:	4798      	blx	r3
 80053d6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3301      	adds	r3, #1
 80053dc:	2207      	movs	r2, #7
 80053de:	701a      	strb	r2, [r3, #0]
      break; 
 80053e0:	e009      	b.n	80053f6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f9c1 	bl	800576c <USBD_CtlError>
      return;
 80053ea:	e019      	b.n	8005420 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f9bc 	bl	800576c <USBD_CtlError>
    return;
 80053f4:	e014      	b.n	8005420 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 80053f6:	897b      	ldrh	r3, [r7, #10]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d011      	beq.n	8005420 <USBD_GetDescriptor+0x1e0>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	88db      	ldrh	r3, [r3, #6]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00d      	beq.n	8005420 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	88da      	ldrh	r2, [r3, #6]
 8005408:	897b      	ldrh	r3, [r7, #10]
 800540a:	4293      	cmp	r3, r2
 800540c:	bf28      	it	cs
 800540e:	4613      	movcs	r3, r2
 8005410:	b29b      	uxth	r3, r3
 8005412:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8005414:	897b      	ldrh	r3, [r7, #10]
 8005416:	461a      	mov	r2, r3
 8005418:	68f9      	ldr	r1, [r7, #12]
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fa12 	bl	8005844 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop

08005428 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	889b      	ldrh	r3, [r3, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d12c      	bne.n	8005494 <USBD_SetAddress+0x6c>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	88db      	ldrh	r3, [r3, #6]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d128      	bne.n	8005494 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	885b      	ldrh	r3, [r3, #2]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800544c:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005454:	2b03      	cmp	r3, #3
 8005456:	d104      	bne.n	8005462 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8005458:	6839      	ldr	r1, [r7, #0]
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f986 	bl	800576c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005460:	e01c      	b.n	800549c <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	7bfa      	ldrb	r2, [r7, #15]
 8005466:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	4619      	mov	r1, r3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f00b fa08 	bl	8010884 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fa43 	bl	8005900 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005488:	e008      	b.n	800549c <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005492:	e003      	b.n	800549c <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8005494:	6839      	ldr	r1, [r7, #0]
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f968 	bl	800576c <USBD_CtlError>
  } 
}
 800549c:	bf00      	nop
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	885b      	ldrh	r3, [r3, #2]
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	4b3e      	ldr	r3, [pc, #248]	; (80055b0 <USBD_SetConfig+0x10c>)
 80054b6:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80054b8:	4b3d      	ldr	r3, [pc, #244]	; (80055b0 <USBD_SetConfig+0x10c>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d904      	bls.n	80054ca <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 80054c0:	6839      	ldr	r1, [r7, #0]
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f952 	bl	800576c <USBD_CtlError>
 80054c8:	e06f      	b.n	80055aa <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d002      	beq.n	80054da <USBD_SetConfig+0x36>
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d023      	beq.n	8005520 <USBD_SetConfig+0x7c>
 80054d8:	e062      	b.n	80055a0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80054da:	4b35      	ldr	r3, [pc, #212]	; (80055b0 <USBD_SetConfig+0x10c>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01a      	beq.n	8005518 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80054e2:	4b33      	ldr	r3, [pc, #204]	; (80055b0 <USBD_SetConfig+0x10c>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2203      	movs	r2, #3
 80054f0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80054f4:	4b2e      	ldr	r3, [pc, #184]	; (80055b0 <USBD_SetConfig+0x10c>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	4619      	mov	r1, r3
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff fb22 	bl	8004b44 <USBD_SetClassConfig>
 8005500:	4603      	mov	r3, r0
 8005502:	2b02      	cmp	r3, #2
 8005504:	d104      	bne.n	8005510 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f92f 	bl	800576c <USBD_CtlError>
          return;
 800550e:	e04c      	b.n	80055aa <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f9f5 	bl	8005900 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8005516:	e048      	b.n	80055aa <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f9f1 	bl	8005900 <USBD_CtlSendStatus>
      break;
 800551e:	e044      	b.n	80055aa <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8005520:	4b23      	ldr	r3, [pc, #140]	; (80055b0 <USBD_SetConfig+0x10c>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d112      	bne.n	800554e <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8005530:	4b1f      	ldr	r3, [pc, #124]	; (80055b0 <USBD_SetConfig+0x10c>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	461a      	mov	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800553a:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <USBD_SetConfig+0x10c>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff fb1e 	bl	8004b82 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f9da 	bl	8005900 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800554c:	e02d      	b.n	80055aa <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 800554e:	4b18      	ldr	r3, [pc, #96]	; (80055b0 <USBD_SetConfig+0x10c>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	429a      	cmp	r2, r3
 800555a:	d01d      	beq.n	8005598 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	b2db      	uxtb	r3, r3
 8005562:	4619      	mov	r1, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff fb0c 	bl	8004b82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800556a:	4b11      	ldr	r3, [pc, #68]	; (80055b0 <USBD_SetConfig+0x10c>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005574:	4b0e      	ldr	r3, [pc, #56]	; (80055b0 <USBD_SetConfig+0x10c>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	4619      	mov	r1, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff fae2 	bl	8004b44 <USBD_SetClassConfig>
 8005580:	4603      	mov	r3, r0
 8005582:	2b02      	cmp	r3, #2
 8005584:	d104      	bne.n	8005590 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8005586:	6839      	ldr	r1, [r7, #0]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f8ef 	bl	800576c <USBD_CtlError>
          return;
 800558e:	e00c      	b.n	80055aa <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f9b5 	bl	8005900 <USBD_CtlSendStatus>
      break;
 8005596:	e008      	b.n	80055aa <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f9b1 	bl	8005900 <USBD_CtlSendStatus>
      break;
 800559e:	e004      	b.n	80055aa <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f8e2 	bl	800576c <USBD_CtlError>
      break;
 80055a8:	bf00      	nop
    }
  }
}
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	2000035c 	.word	0x2000035c

080055b4 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	88db      	ldrh	r3, [r3, #6]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d004      	beq.n	80055d0 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 80055c6:	6839      	ldr	r1, [r7, #0]
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f8cf 	bl	800576c <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80055ce:	e01f      	b.n	8005610 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d002      	beq.n	80055e0 <USBD_GetConfig+0x2c>
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d00b      	beq.n	80055f6 <USBD_GetConfig+0x42>
 80055de:	e012      	b.n	8005606 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 80055ea:	2201      	movs	r2, #1
 80055ec:	4619      	mov	r1, r3
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f928 	bl	8005844 <USBD_CtlSendData>
      break;
 80055f4:	e00c      	b.n	8005610 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 80055fa:	2201      	movs	r2, #1
 80055fc:	4619      	mov	r1, r3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f920 	bl	8005844 <USBD_CtlSendData>
      break;
 8005604:	e004      	b.n	8005610 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f8af 	bl	800576c <USBD_CtlError>
      break;
 800560e:	bf00      	nop
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005628:	3b02      	subs	r3, #2
 800562a:	2b01      	cmp	r3, #1
 800562c:	d815      	bhi.n	800565a <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f043 0202 	orr.w	r2, r3, #2
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 800564e:	2202      	movs	r2, #2
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f8f6 	bl	8005844 <USBD_CtlSendData>
                      2);
    break;
 8005658:	e004      	b.n	8005664 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800565a:	6839      	ldr	r1, [r7, #0]
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f885 	bl	800576c <USBD_CtlError>
    break;
 8005662:	bf00      	nop
  }
}
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	885b      	ldrh	r3, [r3, #2]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d10d      	bne.n	800569a <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f933 	bl	8005900 <USBD_CtlSendStatus>
  }

}
 800569a:	bf00      	nop
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b082      	sub	sp, #8
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80056b2:	3b02      	subs	r3, #2
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d812      	bhi.n	80056de <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	885b      	ldrh	r3, [r3, #2]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d113      	bne.n	80056e8 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	6839      	ldr	r1, [r7, #0]
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f912 	bl	8005900 <USBD_CtlSendStatus>
    }
    break;
 80056dc:	e004      	b.n	80056e8 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 80056de:	6839      	ldr	r1, [r7, #0]
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f843 	bl	800576c <USBD_CtlError>
    break;
 80056e6:	e000      	b.n	80056ea <USBD_ClrFeature+0x48>
    break;
 80056e8:	bf00      	nop
  }
}
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781a      	ldrb	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	785a      	ldrb	r2, [r3, #1]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	3302      	adds	r3, #2
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	b29a      	uxth	r2, r3
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	3303      	adds	r3, #3
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	b29b      	uxth	r3, r3
 8005720:	4413      	add	r3, r2
 8005722:	b29a      	uxth	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	3304      	adds	r3, #4
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	b29a      	uxth	r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	3305      	adds	r3, #5
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	b29b      	uxth	r3, r3
 8005738:	021b      	lsls	r3, r3, #8
 800573a:	b29b      	uxth	r3, r3
 800573c:	4413      	add	r3, r2
 800573e:	b29a      	uxth	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	3306      	adds	r3, #6
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	b29a      	uxth	r2, r3
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	3307      	adds	r3, #7
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	b29b      	uxth	r3, r3
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	b29b      	uxth	r3, r3
 8005758:	4413      	add	r3, r2
 800575a:	b29a      	uxth	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	80da      	strh	r2, [r3, #6]

}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8005776:	2180      	movs	r1, #128	; 0x80
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f00a ffeb 	bl	8010754 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800577e:	2100      	movs	r1, #0
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f00a ffe7 	bl	8010754 <USBD_LL_StallEP>
}
 8005786:	bf00      	nop
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b086      	sub	sp, #24
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d033      	beq.n	800580c <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f835 	bl	8005814 <USBD_GetLen>
 80057aa:	4603      	mov	r3, r0
 80057ac:	3301      	adds	r3, #1
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	75fa      	strb	r2, [r7, #23]
 80057be:	461a      	mov	r2, r3
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4413      	add	r3, r2
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	8812      	ldrh	r2, [r2, #0]
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	75fa      	strb	r2, [r7, #23]
 80057d2:	461a      	mov	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4413      	add	r3, r2
 80057d8:	2203      	movs	r2, #3
 80057da:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80057dc:	e012      	b.n	8005804 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 80057de:	7dfb      	ldrb	r3, [r7, #23]
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	75fa      	strb	r2, [r7, #23]
 80057e4:	461a      	mov	r2, r3
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	441a      	add	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	1c59      	adds	r1, r3, #1
 80057ee:	60f9      	str	r1, [r7, #12]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80057f4:	7dfb      	ldrb	r3, [r7, #23]
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	75fa      	strb	r2, [r7, #23]
 80057fa:	461a      	mov	r2, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4413      	add	r3, r2
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e8      	bne.n	80057de <USBD_GetString+0x50>
    }
  } 
}
 800580c:	bf00      	nop
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800581c:	2300      	movs	r3, #0
 800581e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8005820:	e005      	b.n	800582e <USBD_GetLen+0x1a>
    {
        len++;
 8005822:	7bfb      	ldrb	r3, [r7, #15]
 8005824:	3301      	adds	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
        buf++;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3301      	adds	r3, #1
 800582c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f5      	bne.n	8005822 <USBD_GetLen+0xe>
    }

    return len;
 8005836:	7bfb      	ldrb	r3, [r7, #15]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	4613      	mov	r3, r2
 8005850:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2202      	movs	r2, #2
 8005856:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800585a:	88fa      	ldrh	r2, [r7, #6]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8005860:	88fa      	ldrh	r2, [r7, #6]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8005866:	88fb      	ldrh	r3, [r7, #6]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	2100      	movs	r1, #0
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f00b f83f 	bl	80108f0 <USBD_LL_Transmit>
  
  return USBD_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	4613      	mov	r3, r2
 8005888:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	2100      	movs	r1, #0
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f00b f82d 	bl	80108f0 <USBD_LL_Transmit>
  
  return USBD_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	4613      	mov	r3, r2
 80058ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2203      	movs	r2, #3
 80058b2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80058b6:	88fa      	ldrh	r2, [r7, #6]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 80058be:	88fa      	ldrh	r2, [r7, #6]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80058c6:	88fb      	ldrh	r3, [r7, #6]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	2100      	movs	r1, #0
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f00b f849 	bl	8010964 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	4613      	mov	r3, r2
 80058e8:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80058ea:	88fb      	ldrh	r3, [r7, #6]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	2100      	movs	r1, #0
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f00b f837 	bl	8010964 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2204      	movs	r2, #4
 800590c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8005910:	2300      	movs	r3, #0
 8005912:	2200      	movs	r2, #0
 8005914:	2100      	movs	r1, #0
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f00a ffea 	bl	80108f0 <USBD_LL_Transmit>
  
  return USBD_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b082      	sub	sp, #8
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2205      	movs	r2, #5
 8005932:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8005936:	2300      	movs	r3, #0
 8005938:	2200      	movs	r2, #0
 800593a:	2100      	movs	r1, #0
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f00b f811 	bl	8010964 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800595a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800595e:	2b84      	cmp	r3, #132	; 0x84
 8005960:	d005      	beq.n	800596e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005962:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4413      	add	r3, r2
 800596a:	3303      	adds	r3, #3
 800596c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800596e:	68fb      	ldr	r3, [r7, #12]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005980:	f001 fe74 	bl	800766c <vTaskStartScheduler>
  
  return osOK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	bd80      	pop	{r7, pc}

0800598a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800598a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800598c:	b087      	sub	sp, #28
 800598e:	af02      	add	r7, sp, #8
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685c      	ldr	r4, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059a0:	b29e      	uxth	r6, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff ffcf 	bl	800594c <makeFreeRtosPriority>
 80059ae:	4602      	mov	r2, r0
 80059b0:	f107 030c 	add.w	r3, r7, #12
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	9200      	str	r2, [sp, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	4632      	mov	r2, r6
 80059bc:	4629      	mov	r1, r5
 80059be:	4620      	mov	r0, r4
 80059c0:	f001 fc68 	bl	8007294 <xTaskCreate>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d001      	beq.n	80059ce <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	e000      	b.n	80059d0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80059ce:	68fb      	ldr	r3, [r7, #12]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059d8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <osDelay+0x16>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	e000      	b.n	80059f0 <osDelay+0x18>
 80059ee:	2301      	movs	r3, #1
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 fe07 	bl	8007604 <vTaskDelay>
  
  return osOK;
 80059f6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005a04:	f002 fada 	bl	8007fbc <xTaskGetSchedulerState>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d001      	beq.n	8005a12 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8005a0e:	f000 fc5b 	bl	80062c8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8005a12:	bf00      	nop
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b082      	sub	sp, #8
 8005a1a:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005a1c:	2018      	movs	r0, #24
 8005a1e:	f000 fcdf 	bl	80063e0 <pvPortMalloc>
 8005a22:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d007      	beq.n	8005a3a <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3304      	adds	r3, #4
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 f9e0 	bl	8005dfa <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005a3a:	687b      	ldr	r3, [r7, #4]
	}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b090      	sub	sp, #64	; 0x40
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d109      	bne.n	8005a78 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	623b      	str	r3, [r7, #32]
 8005a76:	e7fe      	b.n	8005a76 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d009      	beq.n	8005a96 <xEventGroupWaitBits+0x52>
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	61fb      	str	r3, [r7, #28]
 8005a94:	e7fe      	b.n	8005a94 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d109      	bne.n	8005ab0 <xEventGroupWaitBits+0x6c>
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	e7fe      	b.n	8005aae <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ab0:	f002 fa84 	bl	8007fbc <xTaskGetSchedulerState>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d102      	bne.n	8005ac0 <xEventGroupWaitBits+0x7c>
 8005aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <xEventGroupWaitBits+0x80>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <xEventGroupWaitBits+0x82>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <xEventGroupWaitBits+0x9a>
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	e7fe      	b.n	8005adc <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8005ade:	f001 fe0b 	bl	80076f8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005aee:	f000 f962 	bl	8005db6 <prvTestWaitCondition>
 8005af2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00e      	beq.n	8005b18 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005afe:	2300      	movs	r3, #0
 8005b00:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d028      	beq.n	8005b5a <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	401a      	ands	r2, r3
 8005b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	e020      	b.n	8005b5a <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d104      	bne.n	8005b28 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005b22:	2301      	movs	r3, #1
 8005b24:	633b      	str	r3, [r7, #48]	; 0x30
 8005b26:	e018      	b.n	8005b5a <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b34:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b42:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b46:	1d18      	adds	r0, r3, #4
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b50:	4619      	mov	r1, r3
 8005b52:	f001 ffc5 	bl	8007ae0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005b5a:	f001 fddb 	bl	8007714 <xTaskResumeAll>
 8005b5e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d031      	beq.n	8005bca <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d107      	bne.n	8005b7c <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8005b6c:	4b19      	ldr	r3, [pc, #100]	; (8005bd4 <xEventGroupWaitBits+0x190>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005b7c:	f002 fbe4 	bl	8008348 <uxTaskResetEventItemValue>
 8005b80:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d11a      	bne.n	8005bc2 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8005b8c:	f000 fb0e 	bl	80061ac <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005b9c:	f000 f90b 	bl	8005db6 <prvTestWaitCondition>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d009      	beq.n	8005bba <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d006      	beq.n	8005bba <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	401a      	ands	r2, r3
 8005bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8005bbe:	f000 fb23 	bl	8006208 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3740      	adds	r7, #64	; 0x40
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	e000ed04 	.word	0xe000ed04

08005bd8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d109      	bne.n	8005c00 <xEventGroupClearBits+0x28>
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	e7fe      	b.n	8005bfe <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d009      	beq.n	8005c1e <xEventGroupClearBits+0x46>
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	60bb      	str	r3, [r7, #8]
 8005c1c:	e7fe      	b.n	8005c1c <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 8005c1e:	f000 fac5 	bl	80061ac <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	401a      	ands	r2, r3
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8005c36:	f000 fae7 	bl	8006208 <vPortExitCritical>

	return uxReturn;
 8005c3a:	693b      	ldr	r3, [r7, #16]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08e      	sub	sp, #56	; 0x38
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005c56:	2300      	movs	r3, #0
 8005c58:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <xEventGroupSetBits+0x30>
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	e7fe      	b.n	8005c72 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d009      	beq.n	8005c92 <xEventGroupSetBits+0x4e>
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e7fe      	b.n	8005c90 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	3304      	adds	r3, #4
 8005c96:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005c9e:	f001 fd2b 	bl	80076f8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005cb4:	e03c      	b.n	8005d30 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005ccc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005cd4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d108      	bne.n	8005cf2 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8005cec:	2301      	movs	r3, #1
 8005cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf0:	e008      	b.n	8005d04 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	401a      	ands	r2, r3
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d101      	bne.n	8005d04 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005d00:	2301      	movs	r3, #1
 8005d02:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d010      	beq.n	8005d2c <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d24:	4619      	mov	r1, r3
 8005d26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005d28:	f001 ff76 	bl	8007c18 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005d30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d1be      	bne.n	8005cb6 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	43db      	mvns	r3, r3
 8005d40:	401a      	ands	r2, r3
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005d46:	f001 fce5 	bl	8007714 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	681b      	ldr	r3, [r3, #0]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3738      	adds	r7, #56	; 0x38
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b086      	sub	sp, #24
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	3304      	adds	r3, #4
 8005d66:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 8005d68:	f001 fcc6 	bl	80076f8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8005d6c:	e016      	b.n	8005d9c <vEventGroupDelete+0x46>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	3308      	adds	r3, #8
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d109      	bne.n	8005d8e <vEventGroupDelete+0x38>
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	e7fe      	b.n	8005d8c <vEventGroupDelete+0x36>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005d96:	4618      	mov	r0, r3
 8005d98:	f001 ff3e 	bl	8007c18 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e4      	bne.n	8005d6e <vEventGroupDelete+0x18>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
 8005da4:	6978      	ldr	r0, [r7, #20]
 8005da6:	f000 fbdd 	bl	8006564 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 8005daa:	f001 fcb3 	bl	8007714 <xTaskResumeAll>
}
 8005dae:	bf00      	nop
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005db6:	b480      	push	{r7}
 8005db8:	b087      	sub	sp, #28
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d107      	bne.n	8005ddc <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	e007      	b.n	8005dec <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	401a      	ands	r2, r3
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d101      	bne.n	8005dec <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005de8:	2301      	movs	r3, #1
 8005dea:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005dec:	697b      	ldr	r3, [r7, #20]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f103 0208 	add.w	r2, r3, #8
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e12:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f103 0208 	add.w	r2, r3, #8
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f103 0208 	add.w	r2, r3, #8
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	689a      	ldr	r2, [r3, #8]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	601a      	str	r2, [r3, #0]
}
 8005e90:	bf00      	nop
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb2:	d103      	bne.n	8005ebc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	e00c      	b.n	8005ed6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	e002      	b.n	8005eca <vListInsert+0x2e>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d9f6      	bls.n	8005ec4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	601a      	str	r2, [r3, #0]
}
 8005f02:	bf00      	nop
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b085      	sub	sp, #20
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6892      	ldr	r2, [r2, #8]
 8005f24:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6852      	ldr	r2, [r2, #4]
 8005f2e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d103      	bne.n	8005f42 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	1e5a      	subs	r2, r3, #1
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
	...

08005f64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3b04      	subs	r3, #4
 8005f74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3b04      	subs	r3, #4
 8005f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f023 0201 	bic.w	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3b04      	subs	r3, #4
 8005f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f94:	4a0c      	ldr	r2, [pc, #48]	; (8005fc8 <pxPortInitialiseStack+0x64>)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3b14      	subs	r3, #20
 8005f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3b04      	subs	r3, #4
 8005faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f06f 0202 	mvn.w	r2, #2
 8005fb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3b20      	subs	r3, #32
 8005fb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fba:	68fb      	ldr	r3, [r7, #12]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	08005fcd 	.word	0x08005fcd

08005fcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fd6:	4b11      	ldr	r3, [pc, #68]	; (800601c <prvTaskExitError+0x50>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fde:	d009      	beq.n	8005ff4 <prvTaskExitError+0x28>
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	e7fe      	b.n	8005ff2 <prvTaskExitError+0x26>
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006006:	bf00      	nop
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0fc      	beq.n	8006008 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	2000009c 	.word	0x2000009c

08006020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006020:	4b07      	ldr	r3, [pc, #28]	; (8006040 <pxCurrentTCBConst2>)
 8006022:	6819      	ldr	r1, [r3, #0]
 8006024:	6808      	ldr	r0, [r1, #0]
 8006026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602a:	f380 8809 	msr	PSP, r0
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f04f 0000 	mov.w	r0, #0
 8006036:	f380 8811 	msr	BASEPRI, r0
 800603a:	4770      	bx	lr
 800603c:	f3af 8000 	nop.w

08006040 <pxCurrentTCBConst2>:
 8006040:	20003f7c 	.word	0x20003f7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop

08006048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006048:	4808      	ldr	r0, [pc, #32]	; (800606c <prvPortStartFirstTask+0x24>)
 800604a:	6800      	ldr	r0, [r0, #0]
 800604c:	6800      	ldr	r0, [r0, #0]
 800604e:	f380 8808 	msr	MSP, r0
 8006052:	f04f 0000 	mov.w	r0, #0
 8006056:	f380 8814 	msr	CONTROL, r0
 800605a:	b662      	cpsie	i
 800605c:	b661      	cpsie	f
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	df00      	svc	0
 8006068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800606a:	bf00      	nop
 800606c:	e000ed08 	.word	0xe000ed08

08006070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006076:	4b44      	ldr	r3, [pc, #272]	; (8006188 <xPortStartScheduler+0x118>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a44      	ldr	r2, [pc, #272]	; (800618c <xPortStartScheduler+0x11c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d109      	bne.n	8006094 <xPortStartScheduler+0x24>
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	e7fe      	b.n	8006092 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006094:	4b3c      	ldr	r3, [pc, #240]	; (8006188 <xPortStartScheduler+0x118>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a3d      	ldr	r2, [pc, #244]	; (8006190 <xPortStartScheduler+0x120>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d109      	bne.n	80060b2 <xPortStartScheduler+0x42>
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	e7fe      	b.n	80060b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060b2:	4b38      	ldr	r3, [pc, #224]	; (8006194 <xPortStartScheduler+0x124>)
 80060b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	22ff      	movs	r2, #255	; 0xff
 80060c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	4b30      	ldr	r3, [pc, #192]	; (8006198 <xPortStartScheduler+0x128>)
 80060d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060da:	4b30      	ldr	r3, [pc, #192]	; (800619c <xPortStartScheduler+0x12c>)
 80060dc:	2207      	movs	r2, #7
 80060de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060e0:	e009      	b.n	80060f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80060e2:	4b2e      	ldr	r3, [pc, #184]	; (800619c <xPortStartScheduler+0x12c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	4a2c      	ldr	r2, [pc, #176]	; (800619c <xPortStartScheduler+0x12c>)
 80060ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fe:	2b80      	cmp	r3, #128	; 0x80
 8006100:	d0ef      	beq.n	80060e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006102:	4b26      	ldr	r3, [pc, #152]	; (800619c <xPortStartScheduler+0x12c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f1c3 0307 	rsb	r3, r3, #7
 800610a:	2b04      	cmp	r3, #4
 800610c:	d009      	beq.n	8006122 <xPortStartScheduler+0xb2>
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	60bb      	str	r3, [r7, #8]
 8006120:	e7fe      	b.n	8006120 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006122:	4b1e      	ldr	r3, [pc, #120]	; (800619c <xPortStartScheduler+0x12c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	021b      	lsls	r3, r3, #8
 8006128:	4a1c      	ldr	r2, [pc, #112]	; (800619c <xPortStartScheduler+0x12c>)
 800612a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800612c:	4b1b      	ldr	r3, [pc, #108]	; (800619c <xPortStartScheduler+0x12c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006134:	4a19      	ldr	r2, [pc, #100]	; (800619c <xPortStartScheduler+0x12c>)
 8006136:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	b2da      	uxtb	r2, r3
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006140:	4a17      	ldr	r2, [pc, #92]	; (80061a0 <xPortStartScheduler+0x130>)
 8006142:	4b17      	ldr	r3, [pc, #92]	; (80061a0 <xPortStartScheduler+0x130>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800614a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800614c:	4a14      	ldr	r2, [pc, #80]	; (80061a0 <xPortStartScheduler+0x130>)
 800614e:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <xPortStartScheduler+0x130>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006156:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006158:	f000 f8d6 	bl	8006308 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800615c:	4b11      	ldr	r3, [pc, #68]	; (80061a4 <xPortStartScheduler+0x134>)
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006162:	f000 f8f5 	bl	8006350 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006166:	4a10      	ldr	r2, [pc, #64]	; (80061a8 <xPortStartScheduler+0x138>)
 8006168:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <xPortStartScheduler+0x138>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006170:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006172:	f7ff ff69 	bl	8006048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006176:	f001 fc35 	bl	80079e4 <vTaskSwitchContext>
	prvTaskExitError();
 800617a:	f7ff ff27 	bl	8005fcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	e000ed00 	.word	0xe000ed00
 800618c:	410fc271 	.word	0x410fc271
 8006190:	410fc270 	.word	0x410fc270
 8006194:	e000e400 	.word	0xe000e400
 8006198:	2000035d 	.word	0x2000035d
 800619c:	20000360 	.word	0x20000360
 80061a0:	e000ed20 	.word	0xe000ed20
 80061a4:	2000009c 	.word	0x2000009c
 80061a8:	e000ef34 	.word	0xe000ef34

080061ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061c4:	4b0e      	ldr	r3, [pc, #56]	; (8006200 <vPortEnterCritical+0x54>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3301      	adds	r3, #1
 80061ca:	4a0d      	ldr	r2, [pc, #52]	; (8006200 <vPortEnterCritical+0x54>)
 80061cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061ce:	4b0c      	ldr	r3, [pc, #48]	; (8006200 <vPortEnterCritical+0x54>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d10e      	bne.n	80061f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061d6:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <vPortEnterCritical+0x58>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d009      	beq.n	80061f4 <vPortEnterCritical+0x48>
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	603b      	str	r3, [r7, #0]
 80061f2:	e7fe      	b.n	80061f2 <vPortEnterCritical+0x46>
	}
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	2000009c 	.word	0x2000009c
 8006204:	e000ed04 	.word	0xe000ed04

08006208 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800620e:	4b11      	ldr	r3, [pc, #68]	; (8006254 <vPortExitCritical+0x4c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d109      	bne.n	800622a <vPortExitCritical+0x22>
 8006216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	607b      	str	r3, [r7, #4]
 8006228:	e7fe      	b.n	8006228 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800622a:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <vPortExitCritical+0x4c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3b01      	subs	r3, #1
 8006230:	4a08      	ldr	r2, [pc, #32]	; (8006254 <vPortExitCritical+0x4c>)
 8006232:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006234:	4b07      	ldr	r3, [pc, #28]	; (8006254 <vPortExitCritical+0x4c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d104      	bne.n	8006246 <vPortExitCritical+0x3e>
 800623c:	2300      	movs	r3, #0
 800623e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	2000009c 	.word	0x2000009c
	...

08006260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006260:	f3ef 8009 	mrs	r0, PSP
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	4b15      	ldr	r3, [pc, #84]	; (80062c0 <pxCurrentTCBConst>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	f01e 0f10 	tst.w	lr, #16
 8006270:	bf08      	it	eq
 8006272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627a:	6010      	str	r0, [r2, #0]
 800627c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006284:	f380 8811 	msr	BASEPRI, r0
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f001 fba8 	bl	80079e4 <vTaskSwitchContext>
 8006294:	f04f 0000 	mov.w	r0, #0
 8006298:	f380 8811 	msr	BASEPRI, r0
 800629c:	bc09      	pop	{r0, r3}
 800629e:	6819      	ldr	r1, [r3, #0]
 80062a0:	6808      	ldr	r0, [r1, #0]
 80062a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a6:	f01e 0f10 	tst.w	lr, #16
 80062aa:	bf08      	it	eq
 80062ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062b0:	f380 8809 	msr	PSP, r0
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	f3af 8000 	nop.w

080062c0 <pxCurrentTCBConst>:
 80062c0:	20003f7c 	.word	0x20003f7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop

080062c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062e0:	f001 fac4 	bl	800786c <xTaskIncrementTick>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062ea:	4b06      	ldr	r3, [pc, #24]	; (8006304 <xPortSysTickHandler+0x3c>)
 80062ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	2300      	movs	r3, #0
 80062f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80062fc:	bf00      	nop
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	e000ed04 	.word	0xe000ed04

08006308 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <vPortSetupTimerInterrupt+0x34>)
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006312:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <vPortSetupTimerInterrupt+0x38>)
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006318:	4a0a      	ldr	r2, [pc, #40]	; (8006344 <vPortSetupTimerInterrupt+0x3c>)
 800631a:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <vPortSetupTimerInterrupt+0x40>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	490b      	ldr	r1, [pc, #44]	; (800634c <vPortSetupTimerInterrupt+0x44>)
 8006320:	fba1 1303 	umull	r1, r3, r1, r3
 8006324:	099b      	lsrs	r3, r3, #6
 8006326:	3b01      	subs	r3, #1
 8006328:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800632a:	4b04      	ldr	r3, [pc, #16]	; (800633c <vPortSetupTimerInterrupt+0x34>)
 800632c:	2207      	movs	r2, #7
 800632e:	601a      	str	r2, [r3, #0]
}
 8006330:	bf00      	nop
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	e000e010 	.word	0xe000e010
 8006340:	e000e018 	.word	0xe000e018
 8006344:	e000e014 	.word	0xe000e014
 8006348:	200000c0 	.word	0x200000c0
 800634c:	10624dd3 	.word	0x10624dd3

08006350 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006350:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006360 <vPortEnableVFP+0x10>
 8006354:	6801      	ldr	r1, [r0, #0]
 8006356:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800635a:	6001      	str	r1, [r0, #0]
 800635c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800635e:	bf00      	nop
 8006360:	e000ed88 	.word	0xe000ed88

08006364 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800636a:	f3ef 8305 	mrs	r3, IPSR
 800636e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b0f      	cmp	r3, #15
 8006374:	d913      	bls.n	800639e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006376:	4a16      	ldr	r2, [pc, #88]	; (80063d0 <vPortValidateInterruptPriority+0x6c>)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006380:	4b14      	ldr	r3, [pc, #80]	; (80063d4 <vPortValidateInterruptPriority+0x70>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	7afa      	ldrb	r2, [r7, #11]
 8006386:	429a      	cmp	r2, r3
 8006388:	d209      	bcs.n	800639e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	607b      	str	r3, [r7, #4]
 800639c:	e7fe      	b.n	800639c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800639e:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <vPortValidateInterruptPriority+0x74>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063a6:	4b0d      	ldr	r3, [pc, #52]	; (80063dc <vPortValidateInterruptPriority+0x78>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d909      	bls.n	80063c2 <vPortValidateInterruptPriority+0x5e>
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	e7fe      	b.n	80063c0 <vPortValidateInterruptPriority+0x5c>
	}
 80063c2:	bf00      	nop
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	e000e3f0 	.word	0xe000e3f0
 80063d4:	2000035d 	.word	0x2000035d
 80063d8:	e000ed0c 	.word	0xe000ed0c
 80063dc:	20000360 	.word	0x20000360

080063e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08a      	sub	sp, #40	; 0x28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063e8:	2300      	movs	r3, #0
 80063ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063ec:	f001 f984 	bl	80076f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063f0:	4b57      	ldr	r3, [pc, #348]	; (8006550 <pvPortMalloc+0x170>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063f8:	f000 f90c 	bl	8006614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063fc:	4b55      	ldr	r3, [pc, #340]	; (8006554 <pvPortMalloc+0x174>)
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4013      	ands	r3, r2
 8006404:	2b00      	cmp	r3, #0
 8006406:	f040 808c 	bne.w	8006522 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d01c      	beq.n	800644a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006410:	2208      	movs	r2, #8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4413      	add	r3, r2
 8006416:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	2b00      	cmp	r3, #0
 8006420:	d013      	beq.n	800644a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f023 0307 	bic.w	r3, r3, #7
 8006428:	3308      	adds	r3, #8
 800642a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <pvPortMalloc+0x6a>
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	e7fe      	b.n	8006448 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d068      	beq.n	8006522 <pvPortMalloc+0x142>
 8006450:	4b41      	ldr	r3, [pc, #260]	; (8006558 <pvPortMalloc+0x178>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	429a      	cmp	r2, r3
 8006458:	d863      	bhi.n	8006522 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800645a:	4b40      	ldr	r3, [pc, #256]	; (800655c <pvPortMalloc+0x17c>)
 800645c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800645e:	4b3f      	ldr	r3, [pc, #252]	; (800655c <pvPortMalloc+0x17c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006464:	e004      	b.n	8006470 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	429a      	cmp	r2, r3
 8006478:	d203      	bcs.n	8006482 <pvPortMalloc+0xa2>
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f1      	bne.n	8006466 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006482:	4b33      	ldr	r3, [pc, #204]	; (8006550 <pvPortMalloc+0x170>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006488:	429a      	cmp	r2, r3
 800648a:	d04a      	beq.n	8006522 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2208      	movs	r2, #8
 8006492:	4413      	add	r3, r2
 8006494:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	1ad2      	subs	r2, r2, r3
 80064a6:	2308      	movs	r3, #8
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d91e      	bls.n	80064ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4413      	add	r3, r2
 80064b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d009      	beq.n	80064d4 <pvPortMalloc+0xf4>
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	e7fe      	b.n	80064d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	1ad2      	subs	r2, r2, r3
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064e6:	69b8      	ldr	r0, [r7, #24]
 80064e8:	f000 f8f6 	bl	80066d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064ec:	4b1a      	ldr	r3, [pc, #104]	; (8006558 <pvPortMalloc+0x178>)
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	4a18      	ldr	r2, [pc, #96]	; (8006558 <pvPortMalloc+0x178>)
 80064f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064fa:	4b17      	ldr	r3, [pc, #92]	; (8006558 <pvPortMalloc+0x178>)
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	4b18      	ldr	r3, [pc, #96]	; (8006560 <pvPortMalloc+0x180>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d203      	bcs.n	800650e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006506:	4b14      	ldr	r3, [pc, #80]	; (8006558 <pvPortMalloc+0x178>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a15      	ldr	r2, [pc, #84]	; (8006560 <pvPortMalloc+0x180>)
 800650c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	4b10      	ldr	r3, [pc, #64]	; (8006554 <pvPortMalloc+0x174>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	431a      	orrs	r2, r3
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006522:	f001 f8f7 	bl	8007714 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <pvPortMalloc+0x164>
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	e7fe      	b.n	8006542 <pvPortMalloc+0x162>
	return pvReturn;
 8006544:	69fb      	ldr	r3, [r7, #28]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3728      	adds	r7, #40	; 0x28
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20003f6c 	.word	0x20003f6c
 8006554:	20003f78 	.word	0x20003f78
 8006558:	20003f70 	.word	0x20003f70
 800655c:	20003f64 	.word	0x20003f64
 8006560:	20003f74 	.word	0x20003f74

08006564 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d046      	beq.n	8006604 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006576:	2308      	movs	r3, #8
 8006578:	425b      	negs	r3, r3
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4413      	add	r3, r2
 800657e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	4b20      	ldr	r3, [pc, #128]	; (800660c <vPortFree+0xa8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4013      	ands	r3, r2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d109      	bne.n	80065a6 <vPortFree+0x42>
 8006592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	e7fe      	b.n	80065a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d009      	beq.n	80065c2 <vPortFree+0x5e>
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	60bb      	str	r3, [r7, #8]
 80065c0:	e7fe      	b.n	80065c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	4b11      	ldr	r3, [pc, #68]	; (800660c <vPortFree+0xa8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4013      	ands	r3, r2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d019      	beq.n	8006604 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d115      	bne.n	8006604 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <vPortFree+0xa8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	43db      	mvns	r3, r3
 80065e2:	401a      	ands	r2, r3
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065e8:	f001 f886 	bl	80076f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	4b07      	ldr	r3, [pc, #28]	; (8006610 <vPortFree+0xac>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4413      	add	r3, r2
 80065f6:	4a06      	ldr	r2, [pc, #24]	; (8006610 <vPortFree+0xac>)
 80065f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065fa:	6938      	ldr	r0, [r7, #16]
 80065fc:	f000 f86c 	bl	80066d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006600:	f001 f888 	bl	8007714 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006604:	bf00      	nop
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	20003f78 	.word	0x20003f78
 8006610:	20003f70 	.word	0x20003f70

08006614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800661a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800661e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006620:	4b27      	ldr	r3, [pc, #156]	; (80066c0 <prvHeapInit+0xac>)
 8006622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00c      	beq.n	8006648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3307      	adds	r3, #7
 8006632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0307 	bic.w	r3, r3, #7
 800663a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	4a1f      	ldr	r2, [pc, #124]	; (80066c0 <prvHeapInit+0xac>)
 8006644:	4413      	add	r3, r2
 8006646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800664c:	4a1d      	ldr	r2, [pc, #116]	; (80066c4 <prvHeapInit+0xb0>)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006652:	4b1c      	ldr	r3, [pc, #112]	; (80066c4 <prvHeapInit+0xb0>)
 8006654:	2200      	movs	r2, #0
 8006656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	4413      	add	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006660:	2208      	movs	r2, #8
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	1a9b      	subs	r3, r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0307 	bic.w	r3, r3, #7
 800666e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4a15      	ldr	r2, [pc, #84]	; (80066c8 <prvHeapInit+0xb4>)
 8006674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006676:	4b14      	ldr	r3, [pc, #80]	; (80066c8 <prvHeapInit+0xb4>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2200      	movs	r2, #0
 800667c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800667e:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <prvHeapInit+0xb4>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	1ad2      	subs	r2, r2, r3
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006694:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <prvHeapInit+0xb4>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	4a0a      	ldr	r2, [pc, #40]	; (80066cc <prvHeapInit+0xb8>)
 80066a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	4a09      	ldr	r2, [pc, #36]	; (80066d0 <prvHeapInit+0xbc>)
 80066aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066ac:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <prvHeapInit+0xc0>)
 80066ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066b2:	601a      	str	r2, [r3, #0]
}
 80066b4:	bf00      	nop
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	20000364 	.word	0x20000364
 80066c4:	20003f64 	.word	0x20003f64
 80066c8:	20003f6c 	.word	0x20003f6c
 80066cc:	20003f74 	.word	0x20003f74
 80066d0:	20003f70 	.word	0x20003f70
 80066d4:	20003f78 	.word	0x20003f78

080066d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066e0:	4b28      	ldr	r3, [pc, #160]	; (8006784 <prvInsertBlockIntoFreeList+0xac>)
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	e002      	b.n	80066ec <prvInsertBlockIntoFreeList+0x14>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d3f7      	bcc.n	80066e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	441a      	add	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	429a      	cmp	r2, r3
 8006706:	d108      	bne.n	800671a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	441a      	add	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	441a      	add	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d118      	bne.n	8006760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b15      	ldr	r3, [pc, #84]	; (8006788 <prvInsertBlockIntoFreeList+0xb0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	429a      	cmp	r2, r3
 8006738:	d00d      	beq.n	8006756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	441a      	add	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	e008      	b.n	8006768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006756:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <prvInsertBlockIntoFreeList+0xb0>)
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e003      	b.n	8006768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	429a      	cmp	r2, r3
 800676e:	d002      	beq.n	8006776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006776:	bf00      	nop
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20003f64 	.word	0x20003f64
 8006788:	20003f6c 	.word	0x20003f6c

0800678c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d109      	bne.n	80067b4 <xQueueGenericReset+0x28>
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	60bb      	str	r3, [r7, #8]
 80067b2:	e7fe      	b.n	80067b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80067b4:	f7ff fcfa 	bl	80061ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c0:	68f9      	ldr	r1, [r7, #12]
 80067c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067c4:	fb01 f303 	mul.w	r3, r1, r3
 80067c8:	441a      	add	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e4:	3b01      	subs	r3, #1
 80067e6:	68f9      	ldr	r1, [r7, #12]
 80067e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067ea:	fb01 f303 	mul.w	r3, r1, r3
 80067ee:	441a      	add	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	22ff      	movs	r2, #255	; 0xff
 80067f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	22ff      	movs	r2, #255	; 0xff
 8006800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d114      	bne.n	8006834 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d01a      	beq.n	8006848 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	3310      	adds	r3, #16
 8006816:	4618      	mov	r0, r3
 8006818:	f001 f99c 	bl	8007b54 <xTaskRemoveFromEventList>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d012      	beq.n	8006848 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006822:	4b0d      	ldr	r3, [pc, #52]	; (8006858 <xQueueGenericReset+0xcc>)
 8006824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	e009      	b.n	8006848 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3310      	adds	r3, #16
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff fade 	bl	8005dfa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3324      	adds	r3, #36	; 0x24
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff fad9 	bl	8005dfa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006848:	f7ff fcde 	bl	8006208 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800684c:	2301      	movs	r3, #1
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	e000ed04 	.word	0xe000ed04

0800685c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08a      	sub	sp, #40	; 0x28
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	4613      	mov	r3, r2
 8006868:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d109      	bne.n	8006884 <xQueueGenericCreate+0x28>
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	613b      	str	r3, [r7, #16]
 8006882:	e7fe      	b.n	8006882 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d102      	bne.n	8006890 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]
 800688e:	e004      	b.n	800689a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	fb02 f303 	mul.w	r3, r2, r3
 8006898:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	3348      	adds	r3, #72	; 0x48
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff fd9e 	bl	80063e0 <pvPortMalloc>
 80068a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00b      	beq.n	80068c4 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	3348      	adds	r3, #72	; 0x48
 80068b0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068b2:	79fa      	ldrb	r2, [r7, #7]
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	4613      	mov	r3, r2
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 f805 	bl	80068ce <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80068c4:	69bb      	ldr	r3, [r7, #24]
	}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3720      	adds	r7, #32
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	607a      	str	r2, [r7, #4]
 80068da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d103      	bne.n	80068ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	e002      	b.n	80068f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068fc:	2101      	movs	r1, #1
 80068fe:	69b8      	ldr	r0, [r7, #24]
 8006900:	f7ff ff44 	bl	800678c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d109      	bne.n	8006930 <xQueueCreateCountingSemaphore+0x24>
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	613b      	str	r3, [r7, #16]
 800692e:	e7fe      	b.n	800692e <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	429a      	cmp	r2, r3
 8006936:	d909      	bls.n	800694c <xQueueCreateCountingSemaphore+0x40>
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	e7fe      	b.n	800694a <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800694c:	2202      	movs	r2, #2
 800694e:	2100      	movs	r1, #0
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff ff83 	bl	800685c <xQueueGenericCreate>
 8006956:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006964:	697b      	ldr	r3, [r7, #20]
	}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08e      	sub	sp, #56	; 0x38
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800697e:	2300      	movs	r3, #0
 8006980:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	2b00      	cmp	r3, #0
 800698a:	d109      	bne.n	80069a0 <xQueueGenericSend+0x30>
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	62bb      	str	r3, [r7, #40]	; 0x28
 800699e:	e7fe      	b.n	800699e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d103      	bne.n	80069ae <xQueueGenericSend+0x3e>
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <xQueueGenericSend+0x42>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <xQueueGenericSend+0x44>
 80069b2:	2300      	movs	r3, #0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d109      	bne.n	80069cc <xQueueGenericSend+0x5c>
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
 80069ca:	e7fe      	b.n	80069ca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d103      	bne.n	80069da <xQueueGenericSend+0x6a>
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d101      	bne.n	80069de <xQueueGenericSend+0x6e>
 80069da:	2301      	movs	r3, #1
 80069dc:	e000      	b.n	80069e0 <xQueueGenericSend+0x70>
 80069de:	2300      	movs	r3, #0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d109      	bne.n	80069f8 <xQueueGenericSend+0x88>
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	623b      	str	r3, [r7, #32]
 80069f6:	e7fe      	b.n	80069f6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069f8:	f001 fae0 	bl	8007fbc <xTaskGetSchedulerState>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d102      	bne.n	8006a08 <xQueueGenericSend+0x98>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <xQueueGenericSend+0x9c>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e000      	b.n	8006a0e <xQueueGenericSend+0x9e>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d109      	bne.n	8006a26 <xQueueGenericSend+0xb6>
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	61fb      	str	r3, [r7, #28]
 8006a24:	e7fe      	b.n	8006a24 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a26:	f7ff fbc1 	bl	80061ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d302      	bcc.n	8006a3c <xQueueGenericSend+0xcc>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d129      	bne.n	8006a90 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	68b9      	ldr	r1, [r7, #8]
 8006a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a42:	f000 fac5 	bl	8006fd0 <prvCopyDataToQueue>
 8006a46:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d010      	beq.n	8006a72 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	3324      	adds	r3, #36	; 0x24
 8006a54:	4618      	mov	r0, r3
 8006a56:	f001 f87d 	bl	8007b54 <xTaskRemoveFromEventList>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d013      	beq.n	8006a88 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a60:	4b3f      	ldr	r3, [pc, #252]	; (8006b60 <xQueueGenericSend+0x1f0>)
 8006a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	e00a      	b.n	8006a88 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d007      	beq.n	8006a88 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a78:	4b39      	ldr	r3, [pc, #228]	; (8006b60 <xQueueGenericSend+0x1f0>)
 8006a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a88:	f7ff fbbe 	bl	8006208 <vPortExitCritical>
				return pdPASS;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e063      	b.n	8006b58 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d103      	bne.n	8006a9e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a96:	f7ff fbb7 	bl	8006208 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e05c      	b.n	8006b58 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d106      	bne.n	8006ab2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006aa4:	f107 0314 	add.w	r3, r7, #20
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f001 f93b 	bl	8007d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ab2:	f7ff fba9 	bl	8006208 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ab6:	f000 fe1f 	bl	80076f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006aba:	f7ff fb77 	bl	80061ac <vPortEnterCritical>
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ac4:	b25b      	sxtb	r3, r3
 8006ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aca:	d103      	bne.n	8006ad4 <xQueueGenericSend+0x164>
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ada:	b25b      	sxtb	r3, r3
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d103      	bne.n	8006aea <xQueueGenericSend+0x17a>
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006aea:	f7ff fb8d 	bl	8006208 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006aee:	1d3a      	adds	r2, r7, #4
 8006af0:	f107 0314 	add.w	r3, r7, #20
 8006af4:	4611      	mov	r1, r2
 8006af6:	4618      	mov	r0, r3
 8006af8:	f001 f92a 	bl	8007d50 <xTaskCheckForTimeOut>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d124      	bne.n	8006b4c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b04:	f000 fb5c 	bl	80071c0 <prvIsQueueFull>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d018      	beq.n	8006b40 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	3310      	adds	r3, #16
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	4611      	mov	r1, r2
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 ffbe 	bl	8007a98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b1e:	f000 fae7 	bl	80070f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b22:	f000 fdf7 	bl	8007714 <xTaskResumeAll>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f47f af7c 	bne.w	8006a26 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006b2e:	4b0c      	ldr	r3, [pc, #48]	; (8006b60 <xQueueGenericSend+0x1f0>)
 8006b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	e772      	b.n	8006a26 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b42:	f000 fad5 	bl	80070f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b46:	f000 fde5 	bl	8007714 <xTaskResumeAll>
 8006b4a:	e76c      	b.n	8006a26 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b4e:	f000 facf 	bl	80070f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b52:	f000 fddf 	bl	8007714 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b56:	2300      	movs	r3, #0
		}
	}
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3738      	adds	r7, #56	; 0x38
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	e000ed04 	.word	0xe000ed04

08006b64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08c      	sub	sp, #48	; 0x30
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b70:	2300      	movs	r3, #0
 8006b72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <xQueueReceive+0x2e>
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	623b      	str	r3, [r7, #32]
 8006b90:	e7fe      	b.n	8006b90 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d103      	bne.n	8006ba0 <xQueueReceive+0x3c>
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <xQueueReceive+0x40>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e000      	b.n	8006ba6 <xQueueReceive+0x42>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d109      	bne.n	8006bbe <xQueueReceive+0x5a>
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	61fb      	str	r3, [r7, #28]
 8006bbc:	e7fe      	b.n	8006bbc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bbe:	f001 f9fd 	bl	8007fbc <xTaskGetSchedulerState>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d102      	bne.n	8006bce <xQueueReceive+0x6a>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <xQueueReceive+0x6e>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e000      	b.n	8006bd4 <xQueueReceive+0x70>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d109      	bne.n	8006bec <xQueueReceive+0x88>
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	61bb      	str	r3, [r7, #24]
 8006bea:	e7fe      	b.n	8006bea <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bec:	f7ff fade 	bl	80061ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01f      	beq.n	8006c3c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bfc:	68b9      	ldr	r1, [r7, #8]
 8006bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c00:	f000 fa50 	bl	80070a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	1e5a      	subs	r2, r3, #1
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00f      	beq.n	8006c34 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	3310      	adds	r3, #16
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 ff9b 	bl	8007b54 <xTaskRemoveFromEventList>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d007      	beq.n	8006c34 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c24:	4b3c      	ldr	r3, [pc, #240]	; (8006d18 <xQueueReceive+0x1b4>)
 8006c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c34:	f7ff fae8 	bl	8006208 <vPortExitCritical>
				return pdPASS;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e069      	b.n	8006d10 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d103      	bne.n	8006c4a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c42:	f7ff fae1 	bl	8006208 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e062      	b.n	8006d10 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d106      	bne.n	8006c5e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c50:	f107 0310 	add.w	r3, r7, #16
 8006c54:	4618      	mov	r0, r3
 8006c56:	f001 f865 	bl	8007d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c5e:	f7ff fad3 	bl	8006208 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c62:	f000 fd49 	bl	80076f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c66:	f7ff faa1 	bl	80061ac <vPortEnterCritical>
 8006c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c70:	b25b      	sxtb	r3, r3
 8006c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c76:	d103      	bne.n	8006c80 <xQueueReceive+0x11c>
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c86:	b25b      	sxtb	r3, r3
 8006c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8c:	d103      	bne.n	8006c96 <xQueueReceive+0x132>
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c96:	f7ff fab7 	bl	8006208 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c9a:	1d3a      	adds	r2, r7, #4
 8006c9c:	f107 0310 	add.w	r3, r7, #16
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f001 f854 	bl	8007d50 <xTaskCheckForTimeOut>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d123      	bne.n	8006cf6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cb0:	f000 fa70 	bl	8007194 <prvIsQueueEmpty>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d017      	beq.n	8006cea <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	3324      	adds	r3, #36	; 0x24
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fee8 	bl	8007a98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cca:	f000 fa11 	bl	80070f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cce:	f000 fd21 	bl	8007714 <xTaskResumeAll>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d189      	bne.n	8006bec <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006cd8:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <xQueueReceive+0x1b4>)
 8006cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	e780      	b.n	8006bec <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cec:	f000 fa00 	bl	80070f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cf0:	f000 fd10 	bl	8007714 <xTaskResumeAll>
 8006cf4:	e77a      	b.n	8006bec <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf8:	f000 f9fa 	bl	80070f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cfc:	f000 fd0a 	bl	8007714 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d02:	f000 fa47 	bl	8007194 <prvIsQueueEmpty>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f43f af6f 	beq.w	8006bec <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3730      	adds	r7, #48	; 0x30
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08e      	sub	sp, #56	; 0x38
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d26:	2300      	movs	r3, #0
 8006d28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d109      	bne.n	8006d4c <xQueueSemaphoreTake+0x30>
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	623b      	str	r3, [r7, #32]
 8006d4a:	e7fe      	b.n	8006d4a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d009      	beq.n	8006d68 <xQueueSemaphoreTake+0x4c>
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	e7fe      	b.n	8006d66 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d68:	f001 f928 	bl	8007fbc <xTaskGetSchedulerState>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d102      	bne.n	8006d78 <xQueueSemaphoreTake+0x5c>
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <xQueueSemaphoreTake+0x60>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <xQueueSemaphoreTake+0x62>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d109      	bne.n	8006d96 <xQueueSemaphoreTake+0x7a>
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	61bb      	str	r3, [r7, #24]
 8006d94:	e7fe      	b.n	8006d94 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d96:	f7ff fa09 	bl	80061ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d024      	beq.n	8006df0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	1e5a      	subs	r2, r3, #1
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d104      	bne.n	8006dc0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006db6:	f001 fadf 	bl	8008378 <pvTaskIncrementMutexHeldCount>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00f      	beq.n	8006de8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dca:	3310      	adds	r3, #16
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fec1 	bl	8007b54 <xTaskRemoveFromEventList>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d007      	beq.n	8006de8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dd8:	4b53      	ldr	r3, [pc, #332]	; (8006f28 <xQueueSemaphoreTake+0x20c>)
 8006dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006de8:	f7ff fa0e 	bl	8006208 <vPortExitCritical>
				return pdPASS;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e096      	b.n	8006f1e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d110      	bne.n	8006e18 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d009      	beq.n	8006e10 <xQueueSemaphoreTake+0xf4>
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	617b      	str	r3, [r7, #20]
 8006e0e:	e7fe      	b.n	8006e0e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e10:	f7ff f9fa 	bl	8006208 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e14:	2300      	movs	r3, #0
 8006e16:	e082      	b.n	8006f1e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d106      	bne.n	8006e2c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e1e:	f107 030c 	add.w	r3, r7, #12
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 ff7e 	bl	8007d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e2c:	f7ff f9ec 	bl	8006208 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e30:	f000 fc62 	bl	80076f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e34:	f7ff f9ba 	bl	80061ac <vPortEnterCritical>
 8006e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e3e:	b25b      	sxtb	r3, r3
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d103      	bne.n	8006e4e <xQueueSemaphoreTake+0x132>
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e54:	b25b      	sxtb	r3, r3
 8006e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5a:	d103      	bne.n	8006e64 <xQueueSemaphoreTake+0x148>
 8006e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e64:	f7ff f9d0 	bl	8006208 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e68:	463a      	mov	r2, r7
 8006e6a:	f107 030c 	add.w	r3, r7, #12
 8006e6e:	4611      	mov	r1, r2
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 ff6d 	bl	8007d50 <xTaskCheckForTimeOut>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d132      	bne.n	8006ee2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e7e:	f000 f989 	bl	8007194 <prvIsQueueEmpty>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d026      	beq.n	8006ed6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d109      	bne.n	8006ea4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006e90:	f7ff f98c 	bl	80061ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 f8ad 	bl	8007ff8 <xTaskPriorityInherit>
 8006e9e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006ea0:	f7ff f9b2 	bl	8006208 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea6:	3324      	adds	r3, #36	; 0x24
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	4611      	mov	r1, r2
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 fdf3 	bl	8007a98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006eb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006eb4:	f000 f91c 	bl	80070f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006eb8:	f000 fc2c 	bl	8007714 <xTaskResumeAll>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f47f af69 	bne.w	8006d96 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006ec4:	4b18      	ldr	r3, [pc, #96]	; (8006f28 <xQueueSemaphoreTake+0x20c>)
 8006ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	e75f      	b.n	8006d96 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006ed6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ed8:	f000 f90a 	bl	80070f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006edc:	f000 fc1a 	bl	8007714 <xTaskResumeAll>
 8006ee0:	e759      	b.n	8006d96 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006ee2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ee4:	f000 f904 	bl	80070f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ee8:	f000 fc14 	bl	8007714 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006eec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006eee:	f000 f951 	bl	8007194 <prvIsQueueEmpty>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f43f af4e 	beq.w	8006d96 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00d      	beq.n	8006f1c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006f00:	f7ff f954 	bl	80061ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f06:	f000 f84b 	bl	8006fa0 <prvGetDisinheritPriorityAfterTimeout>
 8006f0a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f12:	4618      	mov	r0, r3
 8006f14:	f001 f97a 	bl	800820c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f18:	f7ff f976 	bl	8006208 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3738      	adds	r7, #56	; 0x38
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	e000ed04 	.word	0xe000ed04

08006f2c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d109      	bne.n	8006f4e <uxQueueMessagesWaiting+0x22>
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	60bb      	str	r3, [r7, #8]
 8006f4c:	e7fe      	b.n	8006f4c <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8006f4e:	f7ff f92d 	bl	80061ac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f56:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006f58:	f7ff f956 	bl	8006208 <vPortExitCritical>

	return uxReturn;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b084      	sub	sp, #16
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d109      	bne.n	8006f8c <vQueueDelete+0x26>
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	60bb      	str	r3, [r7, #8]
 8006f8a:	e7fe      	b.n	8006f8a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f957 	bl	8007240 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f7ff fae6 	bl	8006564 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006f98:	bf00      	nop
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d006      	beq.n	8006fbe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f1c3 0307 	rsb	r3, r3, #7
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	e001      	b.n	8006fc2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
	}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10d      	bne.n	800700a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d14d      	bne.n	8007092 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f001 f882 	bl	8008104 <xTaskPriorityDisinherit>
 8007000:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	605a      	str	r2, [r3, #4]
 8007008:	e043      	b.n	8007092 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d119      	bne.n	8007044 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6898      	ldr	r0, [r3, #8]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007018:	461a      	mov	r2, r3
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	f009 fdfd 	bl	8010c1a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	441a      	add	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	429a      	cmp	r2, r3
 8007038:	d32b      	bcc.n	8007092 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	609a      	str	r2, [r3, #8]
 8007042:	e026      	b.n	8007092 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68d8      	ldr	r0, [r3, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	461a      	mov	r2, r3
 800704e:	68b9      	ldr	r1, [r7, #8]
 8007050:	f009 fde3 	bl	8010c1a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705c:	425b      	negs	r3, r3
 800705e:	441a      	add	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	429a      	cmp	r2, r3
 800706e:	d207      	bcs.n	8007080 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007078:	425b      	negs	r3, r3
 800707a:	441a      	add	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b02      	cmp	r3, #2
 8007084:	d105      	bne.n	8007092 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	3b01      	subs	r3, #1
 8007090:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800709a:	697b      	ldr	r3, [r7, #20]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d018      	beq.n	80070e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	441a      	add	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68da      	ldr	r2, [r3, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d303      	bcc.n	80070d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68d9      	ldr	r1, [r3, #12]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e0:	461a      	mov	r2, r3
 80070e2:	6838      	ldr	r0, [r7, #0]
 80070e4:	f009 fd99 	bl	8010c1a <memcpy>
	}
}
 80070e8:	bf00      	nop
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070f8:	f7ff f858 	bl	80061ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007102:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007104:	e011      	b.n	800712a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	2b00      	cmp	r3, #0
 800710c:	d012      	beq.n	8007134 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3324      	adds	r3, #36	; 0x24
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fd1e 	bl	8007b54 <xTaskRemoveFromEventList>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800711e:	f000 fe77 	bl	8007e10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	3b01      	subs	r3, #1
 8007126:	b2db      	uxtb	r3, r3
 8007128:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800712a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800712e:	2b00      	cmp	r3, #0
 8007130:	dce9      	bgt.n	8007106 <prvUnlockQueue+0x16>
 8007132:	e000      	b.n	8007136 <prvUnlockQueue+0x46>
					break;
 8007134:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	22ff      	movs	r2, #255	; 0xff
 800713a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800713e:	f7ff f863 	bl	8006208 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007142:	f7ff f833 	bl	80061ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800714c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800714e:	e011      	b.n	8007174 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d012      	beq.n	800717e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3310      	adds	r3, #16
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fcf9 	bl	8007b54 <xTaskRemoveFromEventList>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007168:	f000 fe52 	bl	8007e10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	3b01      	subs	r3, #1
 8007170:	b2db      	uxtb	r3, r3
 8007172:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007174:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007178:	2b00      	cmp	r3, #0
 800717a:	dce9      	bgt.n	8007150 <prvUnlockQueue+0x60>
 800717c:	e000      	b.n	8007180 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800717e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	22ff      	movs	r2, #255	; 0xff
 8007184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007188:	f7ff f83e 	bl	8006208 <vPortExitCritical>
}
 800718c:	bf00      	nop
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800719c:	f7ff f806 	bl	80061ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071a8:	2301      	movs	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	e001      	b.n	80071b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071ae:	2300      	movs	r3, #0
 80071b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071b2:	f7ff f829 	bl	8006208 <vPortExitCritical>

	return xReturn;
 80071b6:	68fb      	ldr	r3, [r7, #12]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071c8:	f7fe fff0 	bl	80061ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d102      	bne.n	80071de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071d8:	2301      	movs	r3, #1
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	e001      	b.n	80071e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071e2:	f7ff f811 	bl	8006208 <vPortExitCritical>

	return xReturn;
 80071e6:	68fb      	ldr	r3, [r7, #12]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071fa:	2300      	movs	r3, #0
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	e014      	b.n	800722a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007200:	4a0e      	ldr	r2, [pc, #56]	; (800723c <vQueueAddToRegistry+0x4c>)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10b      	bne.n	8007224 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800720c:	490b      	ldr	r1, [pc, #44]	; (800723c <vQueueAddToRegistry+0x4c>)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007216:	4a09      	ldr	r2, [pc, #36]	; (800723c <vQueueAddToRegistry+0x4c>)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	4413      	add	r3, r2
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007222:	e005      	b.n	8007230 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3301      	adds	r3, #1
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b07      	cmp	r3, #7
 800722e:	d9e7      	bls.n	8007200 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007230:	bf00      	nop
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	200058e4 	.word	0x200058e4

08007240 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007248:	2300      	movs	r3, #0
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	e016      	b.n	800727c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800724e:	4a10      	ldr	r2, [pc, #64]	; (8007290 <vQueueUnregisterQueue+0x50>)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	4413      	add	r3, r2
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	429a      	cmp	r2, r3
 800725c:	d10b      	bne.n	8007276 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800725e:	4a0c      	ldr	r2, [pc, #48]	; (8007290 <vQueueUnregisterQueue+0x50>)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2100      	movs	r1, #0
 8007264:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007268:	4a09      	ldr	r2, [pc, #36]	; (8007290 <vQueueUnregisterQueue+0x50>)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	4413      	add	r3, r2
 8007270:	2200      	movs	r2, #0
 8007272:	605a      	str	r2, [r3, #4]
				break;
 8007274:	e005      	b.n	8007282 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	3301      	adds	r3, #1
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b07      	cmp	r3, #7
 8007280:	d9e5      	bls.n	800724e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007282:	bf00      	nop
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	200058e4 	.word	0x200058e4

08007294 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007294:	b580      	push	{r7, lr}
 8007296:	b08c      	sub	sp, #48	; 0x30
 8007298:	af04      	add	r7, sp, #16
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	4613      	mov	r3, r2
 80072a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a4:	88fb      	ldrh	r3, [r7, #6]
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7ff f899 	bl	80063e0 <pvPortMalloc>
 80072ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00e      	beq.n	80072d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80072b6:	2054      	movs	r0, #84	; 0x54
 80072b8:	f7ff f892 	bl	80063e0 <pvPortMalloc>
 80072bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d003      	beq.n	80072cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	631a      	str	r2, [r3, #48]	; 0x30
 80072ca:	e005      	b.n	80072d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072cc:	6978      	ldr	r0, [r7, #20]
 80072ce:	f7ff f949 	bl	8006564 <vPortFree>
 80072d2:	e001      	b.n	80072d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d013      	beq.n	8007306 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072de:	88fa      	ldrh	r2, [r7, #6]
 80072e0:	2300      	movs	r3, #0
 80072e2:	9303      	str	r3, [sp, #12]
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	9302      	str	r3, [sp, #8]
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ea:	9301      	str	r3, [sp, #4]
 80072ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	68b9      	ldr	r1, [r7, #8]
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f80e 	bl	8007316 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072fa:	69f8      	ldr	r0, [r7, #28]
 80072fc:	f000 f88a 	bl	8007414 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007300:	2301      	movs	r3, #1
 8007302:	61bb      	str	r3, [r7, #24]
 8007304:	e002      	b.n	800730c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007306:	f04f 33ff 	mov.w	r3, #4294967295
 800730a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800730c:	69bb      	ldr	r3, [r7, #24]
	}
 800730e:	4618      	mov	r0, r3
 8007310:	3720      	adds	r7, #32
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b088      	sub	sp, #32
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	607a      	str	r2, [r7, #4]
 8007322:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800732e:	3b01      	subs	r3, #1
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	f023 0307 	bic.w	r3, r3, #7
 800733c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	f003 0307 	and.w	r3, r3, #7
 8007344:	2b00      	cmp	r3, #0
 8007346:	d009      	beq.n	800735c <prvInitialiseNewTask+0x46>
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	617b      	str	r3, [r7, #20]
 800735a:	e7fe      	b.n	800735a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800735c:	2300      	movs	r3, #0
 800735e:	61fb      	str	r3, [r7, #28]
 8007360:	e012      	b.n	8007388 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	4413      	add	r3, r2
 8007368:	7819      	ldrb	r1, [r3, #0]
 800736a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	4413      	add	r3, r2
 8007370:	3334      	adds	r3, #52	; 0x34
 8007372:	460a      	mov	r2, r1
 8007374:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	4413      	add	r3, r2
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d006      	beq.n	8007390 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	3301      	adds	r3, #1
 8007386:	61fb      	str	r3, [r7, #28]
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	2b0f      	cmp	r3, #15
 800738c:	d9e9      	bls.n	8007362 <prvInitialiseNewTask+0x4c>
 800738e:	e000      	b.n	8007392 <prvInitialiseNewTask+0x7c>
		{
			break;
 8007390:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	2b06      	cmp	r3, #6
 800739e:	d901      	bls.n	80073a4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073a0:	2306      	movs	r3, #6
 80073a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	2200      	movs	r2, #0
 80073b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	3304      	adds	r3, #4
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fe fd3d 	bl	8005e3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	3318      	adds	r3, #24
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe fd38 	bl	8005e3a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	f1c3 0207 	rsb	r2, r3, #7
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e2:	2200      	movs	r2, #0
 80073e4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	68f9      	ldr	r1, [r7, #12]
 80073f2:	69b8      	ldr	r0, [r7, #24]
 80073f4:	f7fe fdb6 	bl	8005f64 <pxPortInitialiseStack>
 80073f8:	4602      	mov	r2, r0
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800740a:	bf00      	nop
 800740c:	3720      	adds	r7, #32
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800741c:	f7fe fec6 	bl	80061ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007420:	4b2a      	ldr	r3, [pc, #168]	; (80074cc <prvAddNewTaskToReadyList+0xb8>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3301      	adds	r3, #1
 8007426:	4a29      	ldr	r2, [pc, #164]	; (80074cc <prvAddNewTaskToReadyList+0xb8>)
 8007428:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800742a:	4b29      	ldr	r3, [pc, #164]	; (80074d0 <prvAddNewTaskToReadyList+0xbc>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d109      	bne.n	8007446 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007432:	4a27      	ldr	r2, [pc, #156]	; (80074d0 <prvAddNewTaskToReadyList+0xbc>)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007438:	4b24      	ldr	r3, [pc, #144]	; (80074cc <prvAddNewTaskToReadyList+0xb8>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d110      	bne.n	8007462 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007440:	f000 fd0a 	bl	8007e58 <prvInitialiseTaskLists>
 8007444:	e00d      	b.n	8007462 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007446:	4b23      	ldr	r3, [pc, #140]	; (80074d4 <prvAddNewTaskToReadyList+0xc0>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d109      	bne.n	8007462 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800744e:	4b20      	ldr	r3, [pc, #128]	; (80074d0 <prvAddNewTaskToReadyList+0xbc>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	429a      	cmp	r2, r3
 800745a:	d802      	bhi.n	8007462 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800745c:	4a1c      	ldr	r2, [pc, #112]	; (80074d0 <prvAddNewTaskToReadyList+0xbc>)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007462:	4b1d      	ldr	r3, [pc, #116]	; (80074d8 <prvAddNewTaskToReadyList+0xc4>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3301      	adds	r3, #1
 8007468:	4a1b      	ldr	r2, [pc, #108]	; (80074d8 <prvAddNewTaskToReadyList+0xc4>)
 800746a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007470:	2201      	movs	r2, #1
 8007472:	409a      	lsls	r2, r3
 8007474:	4b19      	ldr	r3, [pc, #100]	; (80074dc <prvAddNewTaskToReadyList+0xc8>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4313      	orrs	r3, r2
 800747a:	4a18      	ldr	r2, [pc, #96]	; (80074dc <prvAddNewTaskToReadyList+0xc8>)
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007482:	4613      	mov	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4a15      	ldr	r2, [pc, #84]	; (80074e0 <prvAddNewTaskToReadyList+0xcc>)
 800748c:	441a      	add	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3304      	adds	r3, #4
 8007492:	4619      	mov	r1, r3
 8007494:	4610      	mov	r0, r2
 8007496:	f7fe fcdd 	bl	8005e54 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800749a:	f7fe feb5 	bl	8006208 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800749e:	4b0d      	ldr	r3, [pc, #52]	; (80074d4 <prvAddNewTaskToReadyList+0xc0>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00e      	beq.n	80074c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074a6:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <prvAddNewTaskToReadyList+0xbc>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d207      	bcs.n	80074c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074b4:	4b0b      	ldr	r3, [pc, #44]	; (80074e4 <prvAddNewTaskToReadyList+0xd0>)
 80074b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074c4:	bf00      	nop
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	2000407c 	.word	0x2000407c
 80074d0:	20003f7c 	.word	0x20003f7c
 80074d4:	20004088 	.word	0x20004088
 80074d8:	20004098 	.word	0x20004098
 80074dc:	20004084 	.word	0x20004084
 80074e0:	20003f80 	.word	0x20003f80
 80074e4:	e000ed04 	.word	0xe000ed04

080074e8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80074f0:	f7fe fe5c 	bl	80061ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d102      	bne.n	8007500 <vTaskDelete+0x18>
 80074fa:	4b38      	ldr	r3, [pc, #224]	; (80075dc <vTaskDelete+0xf4>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	e000      	b.n	8007502 <vTaskDelete+0x1a>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	3304      	adds	r3, #4
 8007508:	4618      	mov	r0, r3
 800750a:	f7fe fd00 	bl	8005f0e <uxListRemove>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d115      	bne.n	8007540 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007518:	4931      	ldr	r1, [pc, #196]	; (80075e0 <vTaskDelete+0xf8>)
 800751a:	4613      	mov	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	440b      	add	r3, r1
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10a      	bne.n	8007540 <vTaskDelete+0x58>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	2201      	movs	r2, #1
 8007530:	fa02 f303 	lsl.w	r3, r2, r3
 8007534:	43da      	mvns	r2, r3
 8007536:	4b2b      	ldr	r3, [pc, #172]	; (80075e4 <vTaskDelete+0xfc>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4013      	ands	r3, r2
 800753c:	4a29      	ldr	r2, [pc, #164]	; (80075e4 <vTaskDelete+0xfc>)
 800753e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007544:	2b00      	cmp	r3, #0
 8007546:	d004      	beq.n	8007552 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3318      	adds	r3, #24
 800754c:	4618      	mov	r0, r3
 800754e:	f7fe fcde 	bl	8005f0e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007552:	4b25      	ldr	r3, [pc, #148]	; (80075e8 <vTaskDelete+0x100>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3301      	adds	r3, #1
 8007558:	4a23      	ldr	r2, [pc, #140]	; (80075e8 <vTaskDelete+0x100>)
 800755a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800755c:	4b1f      	ldr	r3, [pc, #124]	; (80075dc <vTaskDelete+0xf4>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	429a      	cmp	r2, r3
 8007564:	d10b      	bne.n	800757e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3304      	adds	r3, #4
 800756a:	4619      	mov	r1, r3
 800756c:	481f      	ldr	r0, [pc, #124]	; (80075ec <vTaskDelete+0x104>)
 800756e:	f7fe fc71 	bl	8005e54 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007572:	4b1f      	ldr	r3, [pc, #124]	; (80075f0 <vTaskDelete+0x108>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3301      	adds	r3, #1
 8007578:	4a1d      	ldr	r2, [pc, #116]	; (80075f0 <vTaskDelete+0x108>)
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	e009      	b.n	8007592 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800757e:	4b1d      	ldr	r3, [pc, #116]	; (80075f4 <vTaskDelete+0x10c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3b01      	subs	r3, #1
 8007584:	4a1b      	ldr	r2, [pc, #108]	; (80075f4 <vTaskDelete+0x10c>)
 8007586:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 fcd1 	bl	8007f30 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800758e:	f000 fcdf 	bl	8007f50 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007592:	f7fe fe39 	bl	8006208 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007596:	4b18      	ldr	r3, [pc, #96]	; (80075f8 <vTaskDelete+0x110>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d01a      	beq.n	80075d4 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800759e:	4b0f      	ldr	r3, [pc, #60]	; (80075dc <vTaskDelete+0xf4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d115      	bne.n	80075d4 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80075a8:	4b14      	ldr	r3, [pc, #80]	; (80075fc <vTaskDelete+0x114>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d009      	beq.n	80075c4 <vTaskDelete+0xdc>
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	60bb      	str	r3, [r7, #8]
 80075c2:	e7fe      	b.n	80075c2 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 80075c4:	4b0e      	ldr	r3, [pc, #56]	; (8007600 <vTaskDelete+0x118>)
 80075c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075d4:	bf00      	nop
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	20003f7c 	.word	0x20003f7c
 80075e0:	20003f80 	.word	0x20003f80
 80075e4:	20004084 	.word	0x20004084
 80075e8:	20004098 	.word	0x20004098
 80075ec:	20004050 	.word	0x20004050
 80075f0:	20004064 	.word	0x20004064
 80075f4:	2000407c 	.word	0x2000407c
 80075f8:	20004088 	.word	0x20004088
 80075fc:	200040a4 	.word	0x200040a4
 8007600:	e000ed04 	.word	0xe000ed04

08007604 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800760c:	2300      	movs	r3, #0
 800760e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d016      	beq.n	8007644 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007616:	4b13      	ldr	r3, [pc, #76]	; (8007664 <vTaskDelay+0x60>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d009      	beq.n	8007632 <vTaskDelay+0x2e>
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	60bb      	str	r3, [r7, #8]
 8007630:	e7fe      	b.n	8007630 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007632:	f000 f861 	bl	80076f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007636:	2100      	movs	r1, #0
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 ff89 	bl	8008550 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800763e:	f000 f869 	bl	8007714 <xTaskResumeAll>
 8007642:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d107      	bne.n	800765a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800764a:	4b07      	ldr	r3, [pc, #28]	; (8007668 <vTaskDelay+0x64>)
 800764c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	200040a4 	.word	0x200040a4
 8007668:	e000ed04 	.word	0xe000ed04

0800766c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8007672:	4b1b      	ldr	r3, [pc, #108]	; (80076e0 <vTaskStartScheduler+0x74>)
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	2300      	movs	r3, #0
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	2300      	movs	r3, #0
 800767c:	2280      	movs	r2, #128	; 0x80
 800767e:	4919      	ldr	r1, [pc, #100]	; (80076e4 <vTaskStartScheduler+0x78>)
 8007680:	4819      	ldr	r0, [pc, #100]	; (80076e8 <vTaskStartScheduler+0x7c>)
 8007682:	f7ff fe07 	bl	8007294 <xTaskCreate>
 8007686:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d115      	bne.n	80076ba <vTaskStartScheduler+0x4e>
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076a0:	4b12      	ldr	r3, [pc, #72]	; (80076ec <vTaskStartScheduler+0x80>)
 80076a2:	f04f 32ff 	mov.w	r2, #4294967295
 80076a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076a8:	4b11      	ldr	r3, [pc, #68]	; (80076f0 <vTaskStartScheduler+0x84>)
 80076aa:	2201      	movs	r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80076ae:	4b11      	ldr	r3, [pc, #68]	; (80076f4 <vTaskStartScheduler+0x88>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076b4:	f7fe fcdc 	bl	8006070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076b8:	e00d      	b.n	80076d6 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c0:	d109      	bne.n	80076d6 <vTaskStartScheduler+0x6a>
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	607b      	str	r3, [r7, #4]
 80076d4:	e7fe      	b.n	80076d4 <vTaskStartScheduler+0x68>
}
 80076d6:	bf00      	nop
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	200040a0 	.word	0x200040a0
 80076e4:	08010f10 	.word	0x08010f10
 80076e8:	08007e29 	.word	0x08007e29
 80076ec:	2000409c 	.word	0x2000409c
 80076f0:	20004088 	.word	0x20004088
 80076f4:	20004080 	.word	0x20004080

080076f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80076fc:	4b04      	ldr	r3, [pc, #16]	; (8007710 <vTaskSuspendAll+0x18>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	3301      	adds	r3, #1
 8007702:	4a03      	ldr	r2, [pc, #12]	; (8007710 <vTaskSuspendAll+0x18>)
 8007704:	6013      	str	r3, [r2, #0]
}
 8007706:	bf00      	nop
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	200040a4 	.word	0x200040a4

08007714 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800771e:	2300      	movs	r3, #0
 8007720:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007722:	4b41      	ldr	r3, [pc, #260]	; (8007828 <xTaskResumeAll+0x114>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <xTaskResumeAll+0x2a>
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	e7fe      	b.n	800773c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800773e:	f7fe fd35 	bl	80061ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007742:	4b39      	ldr	r3, [pc, #228]	; (8007828 <xTaskResumeAll+0x114>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3b01      	subs	r3, #1
 8007748:	4a37      	ldr	r2, [pc, #220]	; (8007828 <xTaskResumeAll+0x114>)
 800774a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800774c:	4b36      	ldr	r3, [pc, #216]	; (8007828 <xTaskResumeAll+0x114>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d161      	bne.n	8007818 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007754:	4b35      	ldr	r3, [pc, #212]	; (800782c <xTaskResumeAll+0x118>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d05d      	beq.n	8007818 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800775c:	e02e      	b.n	80077bc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800775e:	4b34      	ldr	r3, [pc, #208]	; (8007830 <xTaskResumeAll+0x11c>)
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3318      	adds	r3, #24
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe fbcf 	bl	8005f0e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3304      	adds	r3, #4
 8007774:	4618      	mov	r0, r3
 8007776:	f7fe fbca 	bl	8005f0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	2201      	movs	r2, #1
 8007780:	409a      	lsls	r2, r3
 8007782:	4b2c      	ldr	r3, [pc, #176]	; (8007834 <xTaskResumeAll+0x120>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4313      	orrs	r3, r2
 8007788:	4a2a      	ldr	r2, [pc, #168]	; (8007834 <xTaskResumeAll+0x120>)
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007790:	4613      	mov	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4a27      	ldr	r2, [pc, #156]	; (8007838 <xTaskResumeAll+0x124>)
 800779a:	441a      	add	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3304      	adds	r3, #4
 80077a0:	4619      	mov	r1, r3
 80077a2:	4610      	mov	r0, r2
 80077a4:	f7fe fb56 	bl	8005e54 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ac:	4b23      	ldr	r3, [pc, #140]	; (800783c <xTaskResumeAll+0x128>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d302      	bcc.n	80077bc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80077b6:	4b22      	ldr	r3, [pc, #136]	; (8007840 <xTaskResumeAll+0x12c>)
 80077b8:	2201      	movs	r2, #1
 80077ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077bc:	4b1c      	ldr	r3, [pc, #112]	; (8007830 <xTaskResumeAll+0x11c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1cc      	bne.n	800775e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077ca:	f000 fbc1 	bl	8007f50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80077ce:	4b1d      	ldr	r3, [pc, #116]	; (8007844 <xTaskResumeAll+0x130>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d010      	beq.n	80077fc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077da:	f000 f847 	bl	800786c <xTaskIncrementTick>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80077e4:	4b16      	ldr	r3, [pc, #88]	; (8007840 <xTaskResumeAll+0x12c>)
 80077e6:	2201      	movs	r2, #1
 80077e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f1      	bne.n	80077da <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80077f6:	4b13      	ldr	r3, [pc, #76]	; (8007844 <xTaskResumeAll+0x130>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077fc:	4b10      	ldr	r3, [pc, #64]	; (8007840 <xTaskResumeAll+0x12c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d009      	beq.n	8007818 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007804:	2301      	movs	r3, #1
 8007806:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007808:	4b0f      	ldr	r3, [pc, #60]	; (8007848 <xTaskResumeAll+0x134>)
 800780a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800780e:	601a      	str	r2, [r3, #0]
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007818:	f7fe fcf6 	bl	8006208 <vPortExitCritical>

	return xAlreadyYielded;
 800781c:	68bb      	ldr	r3, [r7, #8]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	200040a4 	.word	0x200040a4
 800782c:	2000407c 	.word	0x2000407c
 8007830:	2000403c 	.word	0x2000403c
 8007834:	20004084 	.word	0x20004084
 8007838:	20003f80 	.word	0x20003f80
 800783c:	20003f7c 	.word	0x20003f7c
 8007840:	20004090 	.word	0x20004090
 8007844:	2000408c 	.word	0x2000408c
 8007848:	e000ed04 	.word	0xe000ed04

0800784c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007852:	4b05      	ldr	r3, [pc, #20]	; (8007868 <xTaskGetTickCount+0x1c>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007858:	687b      	ldr	r3, [r7, #4]
}
 800785a:	4618      	mov	r0, r3
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	20004080 	.word	0x20004080

0800786c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007872:	2300      	movs	r3, #0
 8007874:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007876:	4b50      	ldr	r3, [pc, #320]	; (80079b8 <xTaskIncrementTick+0x14c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	f040 808c 	bne.w	8007998 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007880:	4b4e      	ldr	r3, [pc, #312]	; (80079bc <xTaskIncrementTick+0x150>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3301      	adds	r3, #1
 8007886:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007888:	4a4c      	ldr	r2, [pc, #304]	; (80079bc <xTaskIncrementTick+0x150>)
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d11f      	bne.n	80078d4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007894:	4b4a      	ldr	r3, [pc, #296]	; (80079c0 <xTaskIncrementTick+0x154>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d009      	beq.n	80078b2 <xTaskIncrementTick+0x46>
 800789e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	603b      	str	r3, [r7, #0]
 80078b0:	e7fe      	b.n	80078b0 <xTaskIncrementTick+0x44>
 80078b2:	4b43      	ldr	r3, [pc, #268]	; (80079c0 <xTaskIncrementTick+0x154>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	4b42      	ldr	r3, [pc, #264]	; (80079c4 <xTaskIncrementTick+0x158>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a40      	ldr	r2, [pc, #256]	; (80079c0 <xTaskIncrementTick+0x154>)
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	4a40      	ldr	r2, [pc, #256]	; (80079c4 <xTaskIncrementTick+0x158>)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	4b40      	ldr	r3, [pc, #256]	; (80079c8 <xTaskIncrementTick+0x15c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	3301      	adds	r3, #1
 80078cc:	4a3e      	ldr	r2, [pc, #248]	; (80079c8 <xTaskIncrementTick+0x15c>)
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	f000 fb3e 	bl	8007f50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078d4:	4b3d      	ldr	r3, [pc, #244]	; (80079cc <xTaskIncrementTick+0x160>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d34d      	bcc.n	800797a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078de:	4b38      	ldr	r3, [pc, #224]	; (80079c0 <xTaskIncrementTick+0x154>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <xTaskIncrementTick+0x80>
 80078e8:	2301      	movs	r3, #1
 80078ea:	e000      	b.n	80078ee <xTaskIncrementTick+0x82>
 80078ec:	2300      	movs	r3, #0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078f2:	4b36      	ldr	r3, [pc, #216]	; (80079cc <xTaskIncrementTick+0x160>)
 80078f4:	f04f 32ff 	mov.w	r2, #4294967295
 80078f8:	601a      	str	r2, [r3, #0]
					break;
 80078fa:	e03e      	b.n	800797a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80078fc:	4b30      	ldr	r3, [pc, #192]	; (80079c0 <xTaskIncrementTick+0x154>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	429a      	cmp	r2, r3
 8007912:	d203      	bcs.n	800791c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007914:	4a2d      	ldr	r2, [pc, #180]	; (80079cc <xTaskIncrementTick+0x160>)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6013      	str	r3, [r2, #0]
						break;
 800791a:	e02e      	b.n	800797a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	3304      	adds	r3, #4
 8007920:	4618      	mov	r0, r3
 8007922:	f7fe faf4 	bl	8005f0e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792a:	2b00      	cmp	r3, #0
 800792c:	d004      	beq.n	8007938 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	3318      	adds	r3, #24
 8007932:	4618      	mov	r0, r3
 8007934:	f7fe faeb 	bl	8005f0e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793c:	2201      	movs	r2, #1
 800793e:	409a      	lsls	r2, r3
 8007940:	4b23      	ldr	r3, [pc, #140]	; (80079d0 <xTaskIncrementTick+0x164>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4313      	orrs	r3, r2
 8007946:	4a22      	ldr	r2, [pc, #136]	; (80079d0 <xTaskIncrementTick+0x164>)
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794e:	4613      	mov	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4a1f      	ldr	r2, [pc, #124]	; (80079d4 <xTaskIncrementTick+0x168>)
 8007958:	441a      	add	r2, r3
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	3304      	adds	r3, #4
 800795e:	4619      	mov	r1, r3
 8007960:	4610      	mov	r0, r2
 8007962:	f7fe fa77 	bl	8005e54 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796a:	4b1b      	ldr	r3, [pc, #108]	; (80079d8 <xTaskIncrementTick+0x16c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	429a      	cmp	r2, r3
 8007972:	d3b4      	bcc.n	80078de <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007974:	2301      	movs	r3, #1
 8007976:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007978:	e7b1      	b.n	80078de <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800797a:	4b17      	ldr	r3, [pc, #92]	; (80079d8 <xTaskIncrementTick+0x16c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007980:	4914      	ldr	r1, [pc, #80]	; (80079d4 <xTaskIncrementTick+0x168>)
 8007982:	4613      	mov	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4413      	add	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	440b      	add	r3, r1
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d907      	bls.n	80079a2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007992:	2301      	movs	r3, #1
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	e004      	b.n	80079a2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007998:	4b10      	ldr	r3, [pc, #64]	; (80079dc <xTaskIncrementTick+0x170>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3301      	adds	r3, #1
 800799e:	4a0f      	ldr	r2, [pc, #60]	; (80079dc <xTaskIncrementTick+0x170>)
 80079a0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80079a2:	4b0f      	ldr	r3, [pc, #60]	; (80079e0 <xTaskIncrementTick+0x174>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80079aa:	2301      	movs	r3, #1
 80079ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80079ae:	697b      	ldr	r3, [r7, #20]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3718      	adds	r7, #24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	200040a4 	.word	0x200040a4
 80079bc:	20004080 	.word	0x20004080
 80079c0:	20004034 	.word	0x20004034
 80079c4:	20004038 	.word	0x20004038
 80079c8:	20004094 	.word	0x20004094
 80079cc:	2000409c 	.word	0x2000409c
 80079d0:	20004084 	.word	0x20004084
 80079d4:	20003f80 	.word	0x20003f80
 80079d8:	20003f7c 	.word	0x20003f7c
 80079dc:	2000408c 	.word	0x2000408c
 80079e0:	20004090 	.word	0x20004090

080079e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079ea:	4b26      	ldr	r3, [pc, #152]	; (8007a84 <vTaskSwitchContext+0xa0>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d003      	beq.n	80079fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079f2:	4b25      	ldr	r3, [pc, #148]	; (8007a88 <vTaskSwitchContext+0xa4>)
 80079f4:	2201      	movs	r2, #1
 80079f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079f8:	e03e      	b.n	8007a78 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80079fa:	4b23      	ldr	r3, [pc, #140]	; (8007a88 <vTaskSwitchContext+0xa4>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007a00:	4b22      	ldr	r3, [pc, #136]	; (8007a8c <vTaskSwitchContext+0xa8>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	fab3 f383 	clz	r3, r3
 8007a0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a0e:	7afb      	ldrb	r3, [r7, #11]
 8007a10:	f1c3 031f 	rsb	r3, r3, #31
 8007a14:	617b      	str	r3, [r7, #20]
 8007a16:	491e      	ldr	r1, [pc, #120]	; (8007a90 <vTaskSwitchContext+0xac>)
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	440b      	add	r3, r1
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d109      	bne.n	8007a3e <vTaskSwitchContext+0x5a>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	607b      	str	r3, [r7, #4]
 8007a3c:	e7fe      	b.n	8007a3c <vTaskSwitchContext+0x58>
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	4613      	mov	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4a11      	ldr	r2, [pc, #68]	; (8007a90 <vTaskSwitchContext+0xac>)
 8007a4a:	4413      	add	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	605a      	str	r2, [r3, #4]
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	3308      	adds	r3, #8
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d104      	bne.n	8007a6e <vTaskSwitchContext+0x8a>
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	685a      	ldr	r2, [r3, #4]
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	605a      	str	r2, [r3, #4]
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	4a07      	ldr	r2, [pc, #28]	; (8007a94 <vTaskSwitchContext+0xb0>)
 8007a76:	6013      	str	r3, [r2, #0]
}
 8007a78:	bf00      	nop
 8007a7a:	371c      	adds	r7, #28
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	200040a4 	.word	0x200040a4
 8007a88:	20004090 	.word	0x20004090
 8007a8c:	20004084 	.word	0x20004084
 8007a90:	20003f80 	.word	0x20003f80
 8007a94:	20003f7c 	.word	0x20003f7c

08007a98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d109      	bne.n	8007abc <vTaskPlaceOnEventList+0x24>
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	e7fe      	b.n	8007aba <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007abc:	4b07      	ldr	r3, [pc, #28]	; (8007adc <vTaskPlaceOnEventList+0x44>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3318      	adds	r3, #24
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7fe f9e9 	bl	8005e9c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007aca:	2101      	movs	r1, #1
 8007acc:	6838      	ldr	r0, [r7, #0]
 8007ace:	f000 fd3f 	bl	8008550 <prvAddCurrentTaskToDelayedList>
}
 8007ad2:	bf00      	nop
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20003f7c 	.word	0x20003f7c

08007ae0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d109      	bne.n	8007b06 <vTaskPlaceOnUnorderedEventList+0x26>
 8007af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	e7fe      	b.n	8007b04 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007b06:	4b11      	ldr	r3, [pc, #68]	; (8007b4c <vTaskPlaceOnUnorderedEventList+0x6c>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <vTaskPlaceOnUnorderedEventList+0x42>
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	613b      	str	r3, [r7, #16]
 8007b20:	e7fe      	b.n	8007b20 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007b22:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007b2c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b2e:	4b08      	ldr	r3, [pc, #32]	; (8007b50 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3318      	adds	r3, #24
 8007b34:	4619      	mov	r1, r3
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f7fe f98c 	bl	8005e54 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fd06 	bl	8008550 <prvAddCurrentTaskToDelayedList>
}
 8007b44:	bf00      	nop
 8007b46:	3718      	adds	r7, #24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	200040a4 	.word	0x200040a4
 8007b50:	20003f7c 	.word	0x20003f7c

08007b54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d109      	bne.n	8007b7e <xTaskRemoveFromEventList+0x2a>
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	e7fe      	b.n	8007b7c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	3318      	adds	r3, #24
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe f9c3 	bl	8005f0e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b88:	4b1d      	ldr	r3, [pc, #116]	; (8007c00 <xTaskRemoveFromEventList+0xac>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d11c      	bne.n	8007bca <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	3304      	adds	r3, #4
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fe f9ba 	bl	8005f0e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	409a      	lsls	r2, r3
 8007ba2:	4b18      	ldr	r3, [pc, #96]	; (8007c04 <xTaskRemoveFromEventList+0xb0>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	4a16      	ldr	r2, [pc, #88]	; (8007c04 <xTaskRemoveFromEventList+0xb0>)
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4a13      	ldr	r2, [pc, #76]	; (8007c08 <xTaskRemoveFromEventList+0xb4>)
 8007bba:	441a      	add	r2, r3
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	f7fe f946 	bl	8005e54 <vListInsertEnd>
 8007bc8:	e005      	b.n	8007bd6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3318      	adds	r3, #24
 8007bce:	4619      	mov	r1, r3
 8007bd0:	480e      	ldr	r0, [pc, #56]	; (8007c0c <xTaskRemoveFromEventList+0xb8>)
 8007bd2:	f7fe f93f 	bl	8005e54 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bda:	4b0d      	ldr	r3, [pc, #52]	; (8007c10 <xTaskRemoveFromEventList+0xbc>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d905      	bls.n	8007bf0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007be8:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <xTaskRemoveFromEventList+0xc0>)
 8007bea:	2201      	movs	r2, #1
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	e001      	b.n	8007bf4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007bf4:	697b      	ldr	r3, [r7, #20]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	200040a4 	.word	0x200040a4
 8007c04:	20004084 	.word	0x20004084
 8007c08:	20003f80 	.word	0x20003f80
 8007c0c:	2000403c 	.word	0x2000403c
 8007c10:	20003f7c 	.word	0x20003f7c
 8007c14:	20004090 	.word	0x20004090

08007c18 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007c22:	4b28      	ldr	r3, [pc, #160]	; (8007cc4 <vTaskRemoveFromUnorderedEventList+0xac>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d109      	bne.n	8007c3e <vTaskRemoveFromUnorderedEventList+0x26>
 8007c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	613b      	str	r3, [r7, #16]
 8007c3c:	e7fe      	b.n	8007c3c <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d109      	bne.n	8007c68 <vTaskRemoveFromUnorderedEventList+0x50>
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	60fb      	str	r3, [r7, #12]
 8007c66:	e7fe      	b.n	8007c66 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7fe f950 	bl	8005f0e <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	3304      	adds	r3, #4
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe f94b 	bl	8005f0e <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	409a      	lsls	r2, r3
 8007c80:	4b11      	ldr	r3, [pc, #68]	; (8007cc8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	4a10      	ldr	r2, [pc, #64]	; (8007cc8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007c88:	6013      	str	r3, [r2, #0]
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8e:	4613      	mov	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4a0d      	ldr	r2, [pc, #52]	; (8007ccc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007c98:	441a      	add	r2, r3
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	f7fe f8d7 	bl	8005e54 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007caa:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d902      	bls.n	8007cba <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007cb4:	4b07      	ldr	r3, [pc, #28]	; (8007cd4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	601a      	str	r2, [r3, #0]
	}
}
 8007cba:	bf00      	nop
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	200040a4 	.word	0x200040a4
 8007cc8:	20004084 	.word	0x20004084
 8007ccc:	20003f80 	.word	0x20003f80
 8007cd0:	20003f7c 	.word	0x20003f7c
 8007cd4:	20004090 	.word	0x20004090

08007cd8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d109      	bne.n	8007cfa <vTaskSetTimeOutState+0x22>
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	e7fe      	b.n	8007cf8 <vTaskSetTimeOutState+0x20>
	taskENTER_CRITICAL();
 8007cfa:	f7fe fa57 	bl	80061ac <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cfe:	4b07      	ldr	r3, [pc, #28]	; (8007d1c <vTaskSetTimeOutState+0x44>)
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007d06:	4b06      	ldr	r3, [pc, #24]	; (8007d20 <vTaskSetTimeOutState+0x48>)
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007d0e:	f7fe fa7b 	bl	8006208 <vPortExitCritical>
}
 8007d12:	bf00      	nop
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20004094 	.word	0x20004094
 8007d20:	20004080 	.word	0x20004080

08007d24 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d2c:	4b06      	ldr	r3, [pc, #24]	; (8007d48 <vTaskInternalSetTimeOutState+0x24>)
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <vTaskInternalSetTimeOutState+0x28>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	605a      	str	r2, [r3, #4]
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	20004094 	.word	0x20004094
 8007d4c:	20004080 	.word	0x20004080

08007d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b088      	sub	sp, #32
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d109      	bne.n	8007d74 <xTaskCheckForTimeOut+0x24>
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	613b      	str	r3, [r7, #16]
 8007d72:	e7fe      	b.n	8007d72 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d109      	bne.n	8007d8e <xTaskCheckForTimeOut+0x3e>
 8007d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	e7fe      	b.n	8007d8c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007d8e:	f7fe fa0d 	bl	80061ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d92:	4b1d      	ldr	r3, [pc, #116]	; (8007e08 <xTaskCheckForTimeOut+0xb8>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	69ba      	ldr	r2, [r7, #24]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007daa:	d102      	bne.n	8007db2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007dac:	2300      	movs	r3, #0
 8007dae:	61fb      	str	r3, [r7, #28]
 8007db0:	e023      	b.n	8007dfa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	4b15      	ldr	r3, [pc, #84]	; (8007e0c <xTaskCheckForTimeOut+0xbc>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d007      	beq.n	8007dce <xTaskCheckForTimeOut+0x7e>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d802      	bhi.n	8007dce <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	61fb      	str	r3, [r7, #28]
 8007dcc:	e015      	b.n	8007dfa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d90b      	bls.n	8007df0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	1ad2      	subs	r2, r2, r3
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7ff ff9d 	bl	8007d24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007dea:	2300      	movs	r3, #0
 8007dec:	61fb      	str	r3, [r7, #28]
 8007dee:	e004      	b.n	8007dfa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007df6:	2301      	movs	r3, #1
 8007df8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007dfa:	f7fe fa05 	bl	8006208 <vPortExitCritical>

	return xReturn;
 8007dfe:	69fb      	ldr	r3, [r7, #28]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3720      	adds	r7, #32
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	20004080 	.word	0x20004080
 8007e0c:	20004094 	.word	0x20004094

08007e10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e10:	b480      	push	{r7}
 8007e12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e14:	4b03      	ldr	r3, [pc, #12]	; (8007e24 <vTaskMissedYield+0x14>)
 8007e16:	2201      	movs	r2, #1
 8007e18:	601a      	str	r2, [r3, #0]
}
 8007e1a:	bf00      	nop
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	20004090 	.word	0x20004090

08007e28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e30:	f000 f852 	bl	8007ed8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e34:	4b06      	ldr	r3, [pc, #24]	; (8007e50 <prvIdleTask+0x28>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d9f9      	bls.n	8007e30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e3c:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <prvIdleTask+0x2c>)
 8007e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e4c:	e7f0      	b.n	8007e30 <prvIdleTask+0x8>
 8007e4e:	bf00      	nop
 8007e50:	20003f80 	.word	0x20003f80
 8007e54:	e000ed04 	.word	0xe000ed04

08007e58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e5e:	2300      	movs	r3, #0
 8007e60:	607b      	str	r3, [r7, #4]
 8007e62:	e00c      	b.n	8007e7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	4613      	mov	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4a12      	ldr	r2, [pc, #72]	; (8007eb8 <prvInitialiseTaskLists+0x60>)
 8007e70:	4413      	add	r3, r2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fd ffc1 	bl	8005dfa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	607b      	str	r3, [r7, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b06      	cmp	r3, #6
 8007e82:	d9ef      	bls.n	8007e64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e84:	480d      	ldr	r0, [pc, #52]	; (8007ebc <prvInitialiseTaskLists+0x64>)
 8007e86:	f7fd ffb8 	bl	8005dfa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e8a:	480d      	ldr	r0, [pc, #52]	; (8007ec0 <prvInitialiseTaskLists+0x68>)
 8007e8c:	f7fd ffb5 	bl	8005dfa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e90:	480c      	ldr	r0, [pc, #48]	; (8007ec4 <prvInitialiseTaskLists+0x6c>)
 8007e92:	f7fd ffb2 	bl	8005dfa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e96:	480c      	ldr	r0, [pc, #48]	; (8007ec8 <prvInitialiseTaskLists+0x70>)
 8007e98:	f7fd ffaf 	bl	8005dfa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e9c:	480b      	ldr	r0, [pc, #44]	; (8007ecc <prvInitialiseTaskLists+0x74>)
 8007e9e:	f7fd ffac 	bl	8005dfa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ea2:	4b0b      	ldr	r3, [pc, #44]	; (8007ed0 <prvInitialiseTaskLists+0x78>)
 8007ea4:	4a05      	ldr	r2, [pc, #20]	; (8007ebc <prvInitialiseTaskLists+0x64>)
 8007ea6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ea8:	4b0a      	ldr	r3, [pc, #40]	; (8007ed4 <prvInitialiseTaskLists+0x7c>)
 8007eaa:	4a05      	ldr	r2, [pc, #20]	; (8007ec0 <prvInitialiseTaskLists+0x68>)
 8007eac:	601a      	str	r2, [r3, #0]
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20003f80 	.word	0x20003f80
 8007ebc:	2000400c 	.word	0x2000400c
 8007ec0:	20004020 	.word	0x20004020
 8007ec4:	2000403c 	.word	0x2000403c
 8007ec8:	20004050 	.word	0x20004050
 8007ecc:	20004068 	.word	0x20004068
 8007ed0:	20004034 	.word	0x20004034
 8007ed4:	20004038 	.word	0x20004038

08007ed8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ede:	e019      	b.n	8007f14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ee0:	f7fe f964 	bl	80061ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007ee4:	4b0f      	ldr	r3, [pc, #60]	; (8007f24 <prvCheckTasksWaitingTermination+0x4c>)
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	3304      	adds	r3, #4
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fe f80c 	bl	8005f0e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ef6:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <prvCheckTasksWaitingTermination+0x50>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	4a0a      	ldr	r2, [pc, #40]	; (8007f28 <prvCheckTasksWaitingTermination+0x50>)
 8007efe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f00:	4b0a      	ldr	r3, [pc, #40]	; (8007f2c <prvCheckTasksWaitingTermination+0x54>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3b01      	subs	r3, #1
 8007f06:	4a09      	ldr	r2, [pc, #36]	; (8007f2c <prvCheckTasksWaitingTermination+0x54>)
 8007f08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f0a:	f7fe f97d 	bl	8006208 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f80e 	bl	8007f30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f14:	4b05      	ldr	r3, [pc, #20]	; (8007f2c <prvCheckTasksWaitingTermination+0x54>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1e1      	bne.n	8007ee0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f1c:	bf00      	nop
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	20004050 	.word	0x20004050
 8007f28:	2000407c 	.word	0x2000407c
 8007f2c:	20004064 	.word	0x20004064

08007f30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe fb11 	bl	8006564 <vPortFree>
			vPortFree( pxTCB );
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7fe fb0e 	bl	8006564 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f48:	bf00      	nop
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f56:	4b0f      	ldr	r3, [pc, #60]	; (8007f94 <prvResetNextTaskUnblockTime+0x44>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <prvResetNextTaskUnblockTime+0x14>
 8007f60:	2301      	movs	r3, #1
 8007f62:	e000      	b.n	8007f66 <prvResetNextTaskUnblockTime+0x16>
 8007f64:	2300      	movs	r3, #0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d004      	beq.n	8007f74 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f6a:	4b0b      	ldr	r3, [pc, #44]	; (8007f98 <prvResetNextTaskUnblockTime+0x48>)
 8007f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f70:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f72:	e008      	b.n	8007f86 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f74:	4b07      	ldr	r3, [pc, #28]	; (8007f94 <prvResetNextTaskUnblockTime+0x44>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	4a05      	ldr	r2, [pc, #20]	; (8007f98 <prvResetNextTaskUnblockTime+0x48>)
 8007f84:	6013      	str	r3, [r2, #0]
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	20004034 	.word	0x20004034
 8007f98:	2000409c 	.word	0x2000409c

08007f9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007fa2:	4b05      	ldr	r3, [pc, #20]	; (8007fb8 <xTaskGetCurrentTaskHandle+0x1c>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007fa8:	687b      	ldr	r3, [r7, #4]
	}
 8007faa:	4618      	mov	r0, r3
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	20003f7c 	.word	0x20003f7c

08007fbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fc2:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <xTaskGetSchedulerState+0x34>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d102      	bne.n	8007fd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	607b      	str	r3, [r7, #4]
 8007fce:	e008      	b.n	8007fe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fd0:	4b08      	ldr	r3, [pc, #32]	; (8007ff4 <xTaskGetSchedulerState+0x38>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d102      	bne.n	8007fde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007fd8:	2302      	movs	r3, #2
 8007fda:	607b      	str	r3, [r7, #4]
 8007fdc:	e001      	b.n	8007fe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007fe2:	687b      	ldr	r3, [r7, #4]
	}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	20004088 	.word	0x20004088
 8007ff4:	200040a4 	.word	0x200040a4

08007ff8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d06e      	beq.n	80080ec <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008012:	4b39      	ldr	r3, [pc, #228]	; (80080f8 <xTaskPriorityInherit+0x100>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008018:	429a      	cmp	r2, r3
 800801a:	d25e      	bcs.n	80080da <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	2b00      	cmp	r3, #0
 8008022:	db06      	blt.n	8008032 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008024:	4b34      	ldr	r3, [pc, #208]	; (80080f8 <xTaskPriorityInherit+0x100>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802a:	f1c3 0207 	rsb	r2, r3, #7
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	6959      	ldr	r1, [r3, #20]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4a2e      	ldr	r2, [pc, #184]	; (80080fc <xTaskPriorityInherit+0x104>)
 8008044:	4413      	add	r3, r2
 8008046:	4299      	cmp	r1, r3
 8008048:	d101      	bne.n	800804e <xTaskPriorityInherit+0x56>
 800804a:	2301      	movs	r3, #1
 800804c:	e000      	b.n	8008050 <xTaskPriorityInherit+0x58>
 800804e:	2300      	movs	r3, #0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d03a      	beq.n	80080ca <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	3304      	adds	r3, #4
 8008058:	4618      	mov	r0, r3
 800805a:	f7fd ff58 	bl	8005f0e <uxListRemove>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d115      	bne.n	8008090 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008068:	4924      	ldr	r1, [pc, #144]	; (80080fc <xTaskPriorityInherit+0x104>)
 800806a:	4613      	mov	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	440b      	add	r3, r1
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10a      	bne.n	8008090 <xTaskPriorityInherit+0x98>
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807e:	2201      	movs	r2, #1
 8008080:	fa02 f303 	lsl.w	r3, r2, r3
 8008084:	43da      	mvns	r2, r3
 8008086:	4b1e      	ldr	r3, [pc, #120]	; (8008100 <xTaskPriorityInherit+0x108>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4013      	ands	r3, r2
 800808c:	4a1c      	ldr	r2, [pc, #112]	; (8008100 <xTaskPriorityInherit+0x108>)
 800808e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008090:	4b19      	ldr	r3, [pc, #100]	; (80080f8 <xTaskPriorityInherit+0x100>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809e:	2201      	movs	r2, #1
 80080a0:	409a      	lsls	r2, r3
 80080a2:	4b17      	ldr	r3, [pc, #92]	; (8008100 <xTaskPriorityInherit+0x108>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	4a15      	ldr	r2, [pc, #84]	; (8008100 <xTaskPriorityInherit+0x108>)
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b0:	4613      	mov	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4a10      	ldr	r2, [pc, #64]	; (80080fc <xTaskPriorityInherit+0x104>)
 80080ba:	441a      	add	r2, r3
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	3304      	adds	r3, #4
 80080c0:	4619      	mov	r1, r3
 80080c2:	4610      	mov	r0, r2
 80080c4:	f7fd fec6 	bl	8005e54 <vListInsertEnd>
 80080c8:	e004      	b.n	80080d4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080ca:	4b0b      	ldr	r3, [pc, #44]	; (80080f8 <xTaskPriorityInherit+0x100>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80080d4:	2301      	movs	r3, #1
 80080d6:	60fb      	str	r3, [r7, #12]
 80080d8:	e008      	b.n	80080ec <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080de:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <xTaskPriorityInherit+0x100>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d201      	bcs.n	80080ec <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80080e8:	2301      	movs	r3, #1
 80080ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080ec:	68fb      	ldr	r3, [r7, #12]
	}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	20003f7c 	.word	0x20003f7c
 80080fc:	20003f80 	.word	0x20003f80
 8008100:	20004084 	.word	0x20004084

08008104 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d06c      	beq.n	80081f4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800811a:	4b39      	ldr	r3, [pc, #228]	; (8008200 <xTaskPriorityDisinherit+0xfc>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	429a      	cmp	r2, r3
 8008122:	d009      	beq.n	8008138 <xTaskPriorityDisinherit+0x34>
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	60fb      	str	r3, [r7, #12]
 8008136:	e7fe      	b.n	8008136 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800813c:	2b00      	cmp	r3, #0
 800813e:	d109      	bne.n	8008154 <xTaskPriorityDisinherit+0x50>
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	60bb      	str	r3, [r7, #8]
 8008152:	e7fe      	b.n	8008152 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008158:	1e5a      	subs	r2, r3, #1
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008166:	429a      	cmp	r2, r3
 8008168:	d044      	beq.n	80081f4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800816e:	2b00      	cmp	r3, #0
 8008170:	d140      	bne.n	80081f4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	3304      	adds	r3, #4
 8008176:	4618      	mov	r0, r3
 8008178:	f7fd fec9 	bl	8005f0e <uxListRemove>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d115      	bne.n	80081ae <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008186:	491f      	ldr	r1, [pc, #124]	; (8008204 <xTaskPriorityDisinherit+0x100>)
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10a      	bne.n	80081ae <xTaskPriorityDisinherit+0xaa>
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	2201      	movs	r2, #1
 800819e:	fa02 f303 	lsl.w	r3, r2, r3
 80081a2:	43da      	mvns	r2, r3
 80081a4:	4b18      	ldr	r3, [pc, #96]	; (8008208 <xTaskPriorityDisinherit+0x104>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4013      	ands	r3, r2
 80081aa:	4a17      	ldr	r2, [pc, #92]	; (8008208 <xTaskPriorityDisinherit+0x104>)
 80081ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	f1c3 0207 	rsb	r2, r3, #7
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	2201      	movs	r2, #1
 80081c8:	409a      	lsls	r2, r3
 80081ca:	4b0f      	ldr	r3, [pc, #60]	; (8008208 <xTaskPriorityDisinherit+0x104>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	4a0d      	ldr	r2, [pc, #52]	; (8008208 <xTaskPriorityDisinherit+0x104>)
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d8:	4613      	mov	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4a08      	ldr	r2, [pc, #32]	; (8008204 <xTaskPriorityDisinherit+0x100>)
 80081e2:	441a      	add	r2, r3
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	3304      	adds	r3, #4
 80081e8:	4619      	mov	r1, r3
 80081ea:	4610      	mov	r0, r2
 80081ec:	f7fd fe32 	bl	8005e54 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081f0:	2301      	movs	r3, #1
 80081f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081f4:	697b      	ldr	r3, [r7, #20]
	}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20003f7c 	.word	0x20003f7c
 8008204:	20003f80 	.word	0x20003f80
 8008208:	20004084 	.word	0x20004084

0800820c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800821a:	2301      	movs	r3, #1
 800821c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 8086 	beq.w	8008332 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800822a:	2b00      	cmp	r3, #0
 800822c:	d109      	bne.n	8008242 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	e7fe      	b.n	8008240 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	429a      	cmp	r2, r3
 800824a:	d202      	bcs.n	8008252 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	61fb      	str	r3, [r7, #28]
 8008250:	e002      	b.n	8008258 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008256:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	429a      	cmp	r2, r3
 8008260:	d067      	beq.n	8008332 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	429a      	cmp	r2, r3
 800826a:	d162      	bne.n	8008332 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800826c:	4b33      	ldr	r3, [pc, #204]	; (800833c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	429a      	cmp	r2, r3
 8008274:	d109      	bne.n	800828a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8008276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	60bb      	str	r3, [r7, #8]
 8008288:	e7fe      	b.n	8008288 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	69fa      	ldr	r2, [r7, #28]
 8008294:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	2b00      	cmp	r3, #0
 800829c:	db04      	blt.n	80082a8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	f1c3 0207 	rsb	r2, r3, #7
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	6959      	ldr	r1, [r3, #20]
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4a22      	ldr	r2, [pc, #136]	; (8008340 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80082b8:	4413      	add	r3, r2
 80082ba:	4299      	cmp	r1, r3
 80082bc:	d101      	bne.n	80082c2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80082be:	2301      	movs	r3, #1
 80082c0:	e000      	b.n	80082c4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80082c2:	2300      	movs	r3, #0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d034      	beq.n	8008332 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	3304      	adds	r3, #4
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fd fe1e 	bl	8005f0e <uxListRemove>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d115      	bne.n	8008304 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082dc:	4918      	ldr	r1, [pc, #96]	; (8008340 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	440b      	add	r3, r1
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f2:	2201      	movs	r2, #1
 80082f4:	fa02 f303 	lsl.w	r3, r2, r3
 80082f8:	43da      	mvns	r2, r3
 80082fa:	4b12      	ldr	r3, [pc, #72]	; (8008344 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4013      	ands	r3, r2
 8008300:	4a10      	ldr	r2, [pc, #64]	; (8008344 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008302:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008308:	2201      	movs	r2, #1
 800830a:	409a      	lsls	r2, r3
 800830c:	4b0d      	ldr	r3, [pc, #52]	; (8008344 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4313      	orrs	r3, r2
 8008312:	4a0c      	ldr	r2, [pc, #48]	; (8008344 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831a:	4613      	mov	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	4413      	add	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4a07      	ldr	r2, [pc, #28]	; (8008340 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008324:	441a      	add	r2, r3
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	3304      	adds	r3, #4
 800832a:	4619      	mov	r1, r3
 800832c:	4610      	mov	r0, r2
 800832e:	f7fd fd91 	bl	8005e54 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008332:	bf00      	nop
 8008334:	3720      	adds	r7, #32
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	20003f7c 	.word	0x20003f7c
 8008340:	20003f80 	.word	0x20003f80
 8008344:	20004084 	.word	0x20004084

08008348 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800834e:	4b09      	ldr	r3, [pc, #36]	; (8008374 <uxTaskResetEventItemValue+0x2c>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008356:	4b07      	ldr	r3, [pc, #28]	; (8008374 <uxTaskResetEventItemValue+0x2c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a06      	ldr	r2, [pc, #24]	; (8008374 <uxTaskResetEventItemValue+0x2c>)
 800835c:	6812      	ldr	r2, [r2, #0]
 800835e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008360:	f1c2 0207 	rsb	r2, r2, #7
 8008364:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008366:	687b      	ldr	r3, [r7, #4]
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	20003f7c 	.word	0x20003f7c

08008378 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800837c:	4b07      	ldr	r3, [pc, #28]	; (800839c <pvTaskIncrementMutexHeldCount+0x24>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d004      	beq.n	800838e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008384:	4b05      	ldr	r3, [pc, #20]	; (800839c <pvTaskIncrementMutexHeldCount+0x24>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800838a:	3201      	adds	r2, #1
 800838c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800838e:	4b03      	ldr	r3, [pc, #12]	; (800839c <pvTaskIncrementMutexHeldCount+0x24>)
 8008390:	681b      	ldr	r3, [r3, #0]
	}
 8008392:	4618      	mov	r0, r3
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	20003f7c 	.word	0x20003f7c

080083a0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80083aa:	f7fd feff 	bl	80061ac <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80083ae:	4b1e      	ldr	r3, [pc, #120]	; (8008428 <ulTaskNotifyTake+0x88>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d113      	bne.n	80083e0 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80083b8:	4b1b      	ldr	r3, [pc, #108]	; (8008428 <ulTaskNotifyTake+0x88>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80083c8:	2101      	movs	r1, #1
 80083ca:	6838      	ldr	r0, [r7, #0]
 80083cc:	f000 f8c0 	bl	8008550 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80083d0:	4b16      	ldr	r3, [pc, #88]	; (800842c <ulTaskNotifyTake+0x8c>)
 80083d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80083e0:	f7fd ff12 	bl	8006208 <vPortExitCritical>

		taskENTER_CRITICAL();
 80083e4:	f7fd fee2 	bl	80061ac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80083e8:	4b0f      	ldr	r3, [pc, #60]	; (8008428 <ulTaskNotifyTake+0x88>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ee:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00c      	beq.n	8008410 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d004      	beq.n	8008406 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80083fc:	4b0a      	ldr	r3, [pc, #40]	; (8008428 <ulTaskNotifyTake+0x88>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2200      	movs	r2, #0
 8008402:	64da      	str	r2, [r3, #76]	; 0x4c
 8008404:	e004      	b.n	8008410 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8008406:	4b08      	ldr	r3, [pc, #32]	; (8008428 <ulTaskNotifyTake+0x88>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	3a01      	subs	r2, #1
 800840e:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008410:	4b05      	ldr	r3, [pc, #20]	; (8008428 <ulTaskNotifyTake+0x88>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800841a:	f7fd fef5 	bl	8006208 <vPortExitCritical>

		return ulReturn;
 800841e:	68fb      	ldr	r3, [r7, #12]
	}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	20003f7c 	.word	0x20003f7c
 800842c:	e000ed04 	.word	0xe000ed04

08008430 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08a      	sub	sp, #40	; 0x28
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d109      	bne.n	8008454 <vTaskNotifyGiveFromISR+0x24>
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	61bb      	str	r3, [r7, #24]
 8008452:	e7fe      	b.n	8008452 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008454:	f7fd ff86 	bl	8006364 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800845c:	f3ef 8211 	mrs	r2, BASEPRI
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	617a      	str	r2, [r7, #20]
 8008472:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008474:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008476:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800847e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	2202      	movs	r2, #2
 8008484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800848c:	1c5a      	adds	r2, r3, #1
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008492:	7ffb      	ldrb	r3, [r7, #31]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d145      	bne.n	8008524 <vTaskNotifyGiveFromISR+0xf4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849c:	2b00      	cmp	r3, #0
 800849e:	d009      	beq.n	80084b4 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	e7fe      	b.n	80084b2 <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084b4:	4b20      	ldr	r3, [pc, #128]	; (8008538 <vTaskNotifyGiveFromISR+0x108>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d11c      	bne.n	80084f6 <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	3304      	adds	r3, #4
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fd fd24 	bl	8005f0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ca:	2201      	movs	r2, #1
 80084cc:	409a      	lsls	r2, r3
 80084ce:	4b1b      	ldr	r3, [pc, #108]	; (800853c <vTaskNotifyGiveFromISR+0x10c>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	4a19      	ldr	r2, [pc, #100]	; (800853c <vTaskNotifyGiveFromISR+0x10c>)
 80084d6:	6013      	str	r3, [r2, #0]
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084dc:	4613      	mov	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4a16      	ldr	r2, [pc, #88]	; (8008540 <vTaskNotifyGiveFromISR+0x110>)
 80084e6:	441a      	add	r2, r3
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	3304      	adds	r3, #4
 80084ec:	4619      	mov	r1, r3
 80084ee:	4610      	mov	r0, r2
 80084f0:	f7fd fcb0 	bl	8005e54 <vListInsertEnd>
 80084f4:	e005      	b.n	8008502 <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80084f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f8:	3318      	adds	r3, #24
 80084fa:	4619      	mov	r1, r3
 80084fc:	4811      	ldr	r0, [pc, #68]	; (8008544 <vTaskNotifyGiveFromISR+0x114>)
 80084fe:	f7fd fca9 	bl	8005e54 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008506:	4b10      	ldr	r3, [pc, #64]	; (8008548 <vTaskNotifyGiveFromISR+0x118>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850c:	429a      	cmp	r2, r3
 800850e:	d909      	bls.n	8008524 <vTaskNotifyGiveFromISR+0xf4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <vTaskNotifyGiveFromISR+0xee>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2201      	movs	r2, #1
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	e002      	b.n	8008524 <vTaskNotifyGiveFromISR+0xf4>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800851e:	4b0b      	ldr	r3, [pc, #44]	; (800854c <vTaskNotifyGiveFromISR+0x11c>)
 8008520:	2201      	movs	r2, #1
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800852e:	bf00      	nop
 8008530:	3728      	adds	r7, #40	; 0x28
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	200040a4 	.word	0x200040a4
 800853c:	20004084 	.word	0x20004084
 8008540:	20003f80 	.word	0x20003f80
 8008544:	2000403c 	.word	0x2000403c
 8008548:	20003f7c 	.word	0x20003f7c
 800854c:	20004090 	.word	0x20004090

08008550 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800855a:	4b29      	ldr	r3, [pc, #164]	; (8008600 <prvAddCurrentTaskToDelayedList+0xb0>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008560:	4b28      	ldr	r3, [pc, #160]	; (8008604 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3304      	adds	r3, #4
 8008566:	4618      	mov	r0, r3
 8008568:	f7fd fcd1 	bl	8005f0e <uxListRemove>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10b      	bne.n	800858a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008572:	4b24      	ldr	r3, [pc, #144]	; (8008604 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	2201      	movs	r2, #1
 800857a:	fa02 f303 	lsl.w	r3, r2, r3
 800857e:	43da      	mvns	r2, r3
 8008580:	4b21      	ldr	r3, [pc, #132]	; (8008608 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4013      	ands	r3, r2
 8008586:	4a20      	ldr	r2, [pc, #128]	; (8008608 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008588:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008590:	d10a      	bne.n	80085a8 <prvAddCurrentTaskToDelayedList+0x58>
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d007      	beq.n	80085a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008598:	4b1a      	ldr	r3, [pc, #104]	; (8008604 <prvAddCurrentTaskToDelayedList+0xb4>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	3304      	adds	r3, #4
 800859e:	4619      	mov	r1, r3
 80085a0:	481a      	ldr	r0, [pc, #104]	; (800860c <prvAddCurrentTaskToDelayedList+0xbc>)
 80085a2:	f7fd fc57 	bl	8005e54 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085a6:	e026      	b.n	80085f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4413      	add	r3, r2
 80085ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085b0:	4b14      	ldr	r3, [pc, #80]	; (8008604 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d209      	bcs.n	80085d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085c0:	4b13      	ldr	r3, [pc, #76]	; (8008610 <prvAddCurrentTaskToDelayedList+0xc0>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	4b0f      	ldr	r3, [pc, #60]	; (8008604 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3304      	adds	r3, #4
 80085ca:	4619      	mov	r1, r3
 80085cc:	4610      	mov	r0, r2
 80085ce:	f7fd fc65 	bl	8005e9c <vListInsert>
}
 80085d2:	e010      	b.n	80085f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085d4:	4b0f      	ldr	r3, [pc, #60]	; (8008614 <prvAddCurrentTaskToDelayedList+0xc4>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	4b0a      	ldr	r3, [pc, #40]	; (8008604 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3304      	adds	r3, #4
 80085de:	4619      	mov	r1, r3
 80085e0:	4610      	mov	r0, r2
 80085e2:	f7fd fc5b 	bl	8005e9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085e6:	4b0c      	ldr	r3, [pc, #48]	; (8008618 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d202      	bcs.n	80085f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80085f0:	4a09      	ldr	r2, [pc, #36]	; (8008618 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	6013      	str	r3, [r2, #0]
}
 80085f6:	bf00      	nop
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	20004080 	.word	0x20004080
 8008604:	20003f7c 	.word	0x20003f7c
 8008608:	20004084 	.word	0x20004084
 800860c:	20004068 	.word	0x20004068
 8008610:	20004038 	.word	0x20004038
 8008614:	20004034 	.word	0x20004034
 8008618:	2000409c 	.word	0x2000409c

0800861c <eARPProcessPacket>:
};

/*-----------------------------------------------------------*/

eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8008624:	2300      	movs	r3, #0
 8008626:	73fb      	strb	r3, [r7, #15]
ARPHeader_t *pxARPHeader;

	pxARPHeader = &( pxARPFrame->xARPHeader );
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	330e      	adds	r3, #14
 800862c:	60bb      	str	r3, [r7, #8]

	traceARP_PACKET_RECEIVED();

	/* Don't do anything if the local IP address is zero because
	that means a DHCP request has not completed. */
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 800862e:	4b39      	ldr	r3, [pc, #228]	; (8008714 <eARPProcessPacket+0xf8>)
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d068      	beq.n	8008708 <eARPProcessPacket+0xec>
	{
		switch( pxARPHeader->usOperation )
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	88db      	ldrh	r3, [r3, #6]
 800863a:	b29b      	uxth	r3, r3
 800863c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008640:	d003      	beq.n	800864a <eARPProcessPacket+0x2e>
 8008642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008646:	d053      	beq.n	80086f0 <eARPProcessPacket+0xd4>
				#endif /* ipconfigARP_USE_CLASH_DETECTION */
				break;

			default :
				/* Invalid. */
				break;
 8008648:	e05e      	b.n	8008708 <eARPProcessPacket+0xec>
				if( pxARPHeader->ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	699a      	ldr	r2, [r3, #24]
 800864e:	4b31      	ldr	r3, [pc, #196]	; (8008714 <eARPProcessPacket+0xf8>)
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	429a      	cmp	r2, r3
 8008654:	d157      	bne.n	8008706 <eARPProcessPacket+0xea>
					vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), pxARPHeader->ulSenderProtocolAddress );
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	f103 0208 	add.w	r2, r3, #8
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8008662:	4619      	mov	r1, r3
 8008664:	4610      	mov	r0, r2
 8008666:	f000 f859 	bl	800871c <vARPRefreshCacheEntry>
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2200      	movs	r2, #0
 800866e:	719a      	strb	r2, [r3, #6]
 8008670:	2200      	movs	r2, #0
 8008672:	f042 0202 	orr.w	r2, r2, #2
 8008676:	71da      	strb	r2, [r3, #7]
					if( pxARPHeader->ulTargetProtocolAddress == pxARPHeader->ulSenderProtocolAddress )
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	699a      	ldr	r2, [r3, #24]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8008682:	429a      	cmp	r2, r3
 8008684:	d117      	bne.n	80086b6 <eARPProcessPacket+0x9a>
						memcpy( pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes, xBroadcastMACAddress.ucBytes, sizeof( xBroadcastMACAddress ) );
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3306      	adds	r3, #6
 800868a:	4a23      	ldr	r2, [pc, #140]	; (8008718 <eARPProcessPacket+0xfc>)
 800868c:	6811      	ldr	r1, [r2, #0]
 800868e:	6019      	str	r1, [r3, #0]
 8008690:	8892      	ldrh	r2, [r2, #4]
 8008692:	809a      	strh	r2, [r3, #4]
						memset( pxARPHeader->xTargetHardwareAddress.ucBytes, '\0', sizeof( MACAddress_t ) );
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	3312      	adds	r3, #18
 8008698:	2206      	movs	r2, #6
 800869a:	2100      	movs	r1, #0
 800869c:	4618      	mov	r0, r3
 800869e:	f008 fae1 	bl	8010c64 <memset>
						pxARPHeader->ulTargetProtocolAddress = 0UL;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2200      	movs	r2, #0
 80086a6:	761a      	strb	r2, [r3, #24]
 80086a8:	2200      	movs	r2, #0
 80086aa:	765a      	strb	r2, [r3, #25]
 80086ac:	2200      	movs	r2, #0
 80086ae:	769a      	strb	r2, [r3, #26]
 80086b0:	2200      	movs	r2, #0
 80086b2:	76da      	strb	r2, [r3, #27]
 80086b4:	e00d      	b.n	80086d2 <eARPProcessPacket+0xb6>
						memcpy( pxARPHeader->xTargetHardwareAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, sizeof( MACAddress_t ) );
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	f103 0012 	add.w	r0, r3, #18
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	3308      	adds	r3, #8
 80086c0:	2206      	movs	r2, #6
 80086c2:	4619      	mov	r1, r3
 80086c4:	f008 faa9 	bl	8010c1a <memcpy>
						pxARPHeader->ulTargetProtocolAddress = pxARPHeader->ulSenderProtocolAddress;
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f8d3 200e 	ldr.w	r2, [r3, #14]
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	619a      	str	r2, [r3, #24]
					memcpy( pxARPHeader->xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	3308      	adds	r3, #8
 80086d6:	2206      	movs	r2, #6
 80086d8:	490e      	ldr	r1, [pc, #56]	; (8008714 <eARPProcessPacket+0xf8>)
 80086da:	4618      	mov	r0, r3
 80086dc:	f008 fa9d 	bl	8010c1a <memcpy>
					pxARPHeader->ulSenderProtocolAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 80086e0:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <eARPProcessPacket+0xf8>)
 80086e2:	695a      	ldr	r2, [r3, #20]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f8c3 200e 	str.w	r2, [r3, #14]
					eReturn = eReturnEthernetFrame;
 80086ea:	2302      	movs	r3, #2
 80086ec:	73fb      	strb	r3, [r7, #15]
				break;
 80086ee:	e00a      	b.n	8008706 <eARPProcessPacket+0xea>
				vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), pxARPHeader->ulSenderProtocolAddress );
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f103 0208 	add.w	r2, r3, #8
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80086fc:	4619      	mov	r1, r3
 80086fe:	4610      	mov	r0, r2
 8008700:	f000 f80c 	bl	800871c <vARPRefreshCacheEntry>
				break;
 8008704:	e000      	b.n	8008708 <eARPProcessPacket+0xec>
				break;
 8008706:	bf00      	nop
		}
	}

	return eReturn;
 8008708:	7bfb      	ldrb	r3, [r7, #15]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	200000a0 	.word	0x200000a0
 8008718:	080110a8 	.word	0x080110a8

0800871c <vARPRefreshCacheEntry>:

#endif	/* ipconfigUSE_ARP_REMOVE_ENTRY != 0 */
/*-----------------------------------------------------------*/

void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress, const uint32_t ulIPAddress )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b088      	sub	sp, #32
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
BaseType_t x, xIpEntry = -1, xMacEntry = -1, xUseEntry = 0;
 8008726:	f04f 33ff 	mov.w	r3, #4294967295
 800872a:	61bb      	str	r3, [r7, #24]
 800872c:	f04f 33ff 	mov.w	r3, #4294967295
 8008730:	617b      	str	r3, [r7, #20]
 8008732:	2300      	movs	r3, #0
 8008734:	613b      	str	r3, [r7, #16]
uint8_t ucMinAgeFound = 0U;
 8008736:	2300      	movs	r3, #0
 8008738:	73fb      	strb	r3, [r7, #15]

	#if( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )
		/* Only process the IP address if it is on the local network.
		Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
		and netmask are still unknown. */
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 800873a:	4b71      	ldr	r3, [pc, #452]	; (8008900 <vARPRefreshCacheEntry+0x1e4>)
 800873c:	695a      	ldr	r2, [r3, #20]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	405a      	eors	r2, r3
 8008742:	4b70      	ldr	r3, [pc, #448]	; (8008904 <vARPRefreshCacheEntry+0x1e8>)
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	4013      	ands	r3, r2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d004      	beq.n	8008756 <vARPRefreshCacheEntry+0x3a>
			( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 800874c:	4b6c      	ldr	r3, [pc, #432]	; (8008900 <vARPRefreshCacheEntry+0x1e4>)
 800874e:	695b      	ldr	r3, [r3, #20]
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 8008750:	2b00      	cmp	r3, #0
 8008752:	f040 80d2 	bne.w	80088fa <vARPRefreshCacheEntry+0x1de>
		zero the the gateway address is the only option. */
		if( pdTRUE )
	#endif
	{
		/* Start with the maximum possible number. */
		ucMinAgeFound--;
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	3b01      	subs	r3, #1
 800875a:	73fb      	strb	r3, [r7, #15]

		/* For each entry in the ARP cache table. */
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800875c:	2300      	movs	r3, #0
 800875e:	61fb      	str	r3, [r7, #28]
 8008760:	e069      	b.n	8008836 <vARPRefreshCacheEntry+0x11a>
		{
			/* Does this line in the cache table hold an entry for the IP
			address	being queried? */
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8008762:	4969      	ldr	r1, [pc, #420]	; (8008908 <vARPRefreshCacheEntry+0x1ec>)
 8008764:	69fa      	ldr	r2, [r7, #28]
 8008766:	4613      	mov	r3, r2
 8008768:	005b      	lsls	r3, r3, #1
 800876a:	4413      	add	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	440b      	add	r3, r1
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	429a      	cmp	r2, r3
 8008776:	d12d      	bne.n	80087d4 <vARPRefreshCacheEntry+0xb8>
			{
				if( pxMACAddress == NULL )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d102      	bne.n	8008784 <vARPRefreshCacheEntry+0x68>
				{
					/* In case the parameter pxMACAddress is NULL, an entry will be reserved to
					indicate that there is an outstanding ARP request, This entry will have
					"ucValid == pdFALSE". */
					xIpEntry = x;
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	61bb      	str	r3, [r7, #24]
					break;
 8008782:	e05b      	b.n	800883c <vARPRefreshCacheEntry+0x120>
				}

				/* See if the MAC-address also matches. */
				if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8008784:	69fa      	ldr	r2, [r7, #28]
 8008786:	4613      	mov	r3, r2
 8008788:	005b      	lsls	r3, r3, #1
 800878a:	4413      	add	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4a5e      	ldr	r2, [pc, #376]	; (8008908 <vARPRefreshCacheEntry+0x1ec>)
 8008790:	4413      	add	r3, r2
 8008792:	3304      	adds	r3, #4
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	2206      	movs	r2, #6
 8008798:	4618      	mov	r0, r3
 800879a:	f008 fa2f 	bl	8010bfc <memcmp>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d114      	bne.n	80087ce <vARPRefreshCacheEntry+0xb2>
				{
					/* This function will be called for each received packet
					As this is by far the most common path the coding standard
					is relaxed in this case and a return is permitted as an
					optimisation. */
					xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80087a4:	4958      	ldr	r1, [pc, #352]	; (8008908 <vARPRefreshCacheEntry+0x1ec>)
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	4613      	mov	r3, r2
 80087aa:	005b      	lsls	r3, r3, #1
 80087ac:	4413      	add	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	440b      	add	r3, r1
 80087b2:	330a      	adds	r3, #10
 80087b4:	2296      	movs	r2, #150	; 0x96
 80087b6:	701a      	strb	r2, [r3, #0]
					xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 80087b8:	4953      	ldr	r1, [pc, #332]	; (8008908 <vARPRefreshCacheEntry+0x1ec>)
 80087ba:	69fa      	ldr	r2, [r7, #28]
 80087bc:	4613      	mov	r3, r2
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	4413      	add	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	440b      	add	r3, r1
 80087c6:	330b      	adds	r3, #11
 80087c8:	2201      	movs	r2, #1
 80087ca:	701a      	strb	r2, [r3, #0]
					return;
 80087cc:	e095      	b.n	80088fa <vARPRefreshCacheEntry+0x1de>
				/* Found an entry containing ulIPAddress, but the MAC address
				doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
				for an ARP reply.  Still want to see if there is match with the
				given MAC address.ucBytes.  If found, either of the two entries
				must be cleared. */
				xIpEntry = x;
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	61bb      	str	r3, [r7, #24]
 80087d2:	e02d      	b.n	8008830 <vARPRefreshCacheEntry+0x114>
			}
			else if( ( pxMACAddress != NULL ) && ( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 ) )
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d012      	beq.n	8008800 <vARPRefreshCacheEntry+0xe4>
 80087da:	69fa      	ldr	r2, [r7, #28]
 80087dc:	4613      	mov	r3, r2
 80087de:	005b      	lsls	r3, r3, #1
 80087e0:	4413      	add	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4a48      	ldr	r2, [pc, #288]	; (8008908 <vARPRefreshCacheEntry+0x1ec>)
 80087e6:	4413      	add	r3, r2
 80087e8:	3304      	adds	r3, #4
 80087ea:	6879      	ldr	r1, [r7, #4]
 80087ec:	2206      	movs	r2, #6
 80087ee:	4618      	mov	r0, r3
 80087f0:	f008 fa04 	bl	8010bfc <memcmp>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d102      	bne.n	8008800 <vARPRefreshCacheEntry+0xe4>
				if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
				{
					xMacEntry = x;
				}
	#else
				xMacEntry = x;
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	617b      	str	r3, [r7, #20]
 80087fe:	e017      	b.n	8008830 <vARPRefreshCacheEntry+0x114>
	#endif
			}
			/* _HT_
			Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8008800:	4941      	ldr	r1, [pc, #260]	; (8008908 <vARPRefreshCacheEntry+0x1ec>)
 8008802:	69fa      	ldr	r2, [r7, #28]
 8008804:	4613      	mov	r3, r2
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	440b      	add	r3, r1
 800880e:	330a      	adds	r3, #10
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	7bfa      	ldrb	r2, [r7, #15]
 8008814:	429a      	cmp	r2, r3
 8008816:	d90b      	bls.n	8008830 <vARPRefreshCacheEntry+0x114>
			{
				/* As the table is traversed, remember the table row that
				contains the oldest entry (the lowest age count, as ages are
				decremented to zero) so the row can be re-used if this function
				needs to add an entry that does not already exist. */
				ucMinAgeFound = xARPCache[ x ].ucAge;
 8008818:	493b      	ldr	r1, [pc, #236]	; (8008908 <vARPRefreshCacheEntry+0x1ec>)
 800881a:	69fa      	ldr	r2, [r7, #28]
 800881c:	4613      	mov	r3, r2
 800881e:	005b      	lsls	r3, r3, #1
 8008820:	4413      	add	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	440b      	add	r3, r1
 8008826:	330a      	adds	r3, #10
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	73fb      	strb	r3, [r7, #15]
				xUseEntry = x;
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	613b      	str	r3, [r7, #16]
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	3301      	adds	r3, #1
 8008834:	61fb      	str	r3, [r7, #28]
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	2b05      	cmp	r3, #5
 800883a:	dd92      	ble.n	8008762 <vARPRefreshCacheEntry+0x46>
			}
		}

		if( xMacEntry >= 0 )
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	2b00      	cmp	r3, #0
 8008840:	db11      	blt.n	8008866 <vARPRefreshCacheEntry+0x14a>
		{
			xUseEntry = xMacEntry;
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	613b      	str	r3, [r7, #16]

			if( xIpEntry >= 0 )
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	2b00      	cmp	r3, #0
 800884a:	db11      	blt.n	8008870 <vARPRefreshCacheEntry+0x154>
			{
				/* Both the MAC address as well as the IP address were found in
				different locations: clear the entry which matches the
				IP-address */
				memset( &xARPCache[ xIpEntry ], '\0', sizeof( xARPCache[ xIpEntry ] ) );
 800884c:	69ba      	ldr	r2, [r7, #24]
 800884e:	4613      	mov	r3, r2
 8008850:	005b      	lsls	r3, r3, #1
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4a2c      	ldr	r2, [pc, #176]	; (8008908 <vARPRefreshCacheEntry+0x1ec>)
 8008858:	4413      	add	r3, r2
 800885a:	220c      	movs	r2, #12
 800885c:	2100      	movs	r1, #0
 800885e:	4618      	mov	r0, r3
 8008860:	f008 fa00 	bl	8010c64 <memset>
 8008864:	e004      	b.n	8008870 <vARPRefreshCacheEntry+0x154>
			}
		}
		else if( xIpEntry >= 0 )
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	2b00      	cmp	r3, #0
 800886a:	db01      	blt.n	8008870 <vARPRefreshCacheEntry+0x154>
		{
			/* An entry containing the IP-address was found, but it had a different MAC address */
			xUseEntry = xIpEntry;
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	613b      	str	r3, [r7, #16]
		}

		/* If the entry was not found, we use the oldest entry and set the IPaddress */
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 8008870:	4925      	ldr	r1, [pc, #148]	; (8008908 <vARPRefreshCacheEntry+0x1ec>)
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	4613      	mov	r3, r2
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	4413      	add	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	440b      	add	r3, r1
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	601a      	str	r2, [r3, #0]

		if( pxMACAddress != NULL )
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d021      	beq.n	80088cc <vARPRefreshCacheEntry+0x1b0>
		{
			memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	4613      	mov	r3, r2
 800888c:	005b      	lsls	r3, r3, #1
 800888e:	4413      	add	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	4a1d      	ldr	r2, [pc, #116]	; (8008908 <vARPRefreshCacheEntry+0x1ec>)
 8008894:	4413      	add	r3, r2
 8008896:	3304      	adds	r3, #4
 8008898:	6879      	ldr	r1, [r7, #4]
 800889a:	2206      	movs	r2, #6
 800889c:	4618      	mov	r0, r3
 800889e:	f008 f9bc 	bl	8010c1a <memcpy>

			iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, (*pxMACAddress) );
			/* And this entry does not need immediate attention */
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80088a2:	4919      	ldr	r1, [pc, #100]	; (8008908 <vARPRefreshCacheEntry+0x1ec>)
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	4613      	mov	r3, r2
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	4413      	add	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	440b      	add	r3, r1
 80088b0:	330a      	adds	r3, #10
 80088b2:	2296      	movs	r2, #150	; 0x96
 80088b4:	701a      	strb	r2, [r3, #0]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 80088b6:	4914      	ldr	r1, [pc, #80]	; (8008908 <vARPRefreshCacheEntry+0x1ec>)
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	4613      	mov	r3, r2
 80088bc:	005b      	lsls	r3, r3, #1
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	440b      	add	r3, r1
 80088c4:	330b      	adds	r3, #11
 80088c6:	2201      	movs	r2, #1
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	e016      	b.n	80088fa <vARPRefreshCacheEntry+0x1de>
		}
		else if( xIpEntry < 0 )
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	da13      	bge.n	80088fa <vARPRefreshCacheEntry+0x1de>
		{
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 80088d2:	490d      	ldr	r1, [pc, #52]	; (8008908 <vARPRefreshCacheEntry+0x1ec>)
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	4613      	mov	r3, r2
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	4413      	add	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	440b      	add	r3, r1
 80088e0:	330a      	adds	r3, #10
 80088e2:	2205      	movs	r2, #5
 80088e4:	701a      	strb	r2, [r3, #0]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 80088e6:	4908      	ldr	r1, [pc, #32]	; (8008908 <vARPRefreshCacheEntry+0x1ec>)
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	4613      	mov	r3, r2
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	4413      	add	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	440b      	add	r3, r1
 80088f4:	330b      	adds	r3, #11
 80088f6:	2200      	movs	r2, #0
 80088f8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80088fa:	3720      	adds	r7, #32
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	200000a0 	.word	0x200000a0
 8008904:	20004198 	.word	0x20004198
 8008908:	200040a8 	.word	0x200040a8

0800890c <eARPGetCacheEntry>:
#endif /* ipconfigUSE_ARP_REVERSED_LOOKUP */

/*-----------------------------------------------------------*/

eARPLookupResult_t eARPGetCacheEntry( uint32_t *pulIPAddress, MACAddress_t * const pxMACAddress )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
eARPLookupResult_t eReturn;
uint32_t ulAddressToLookup;

#if( ipconfigUSE_LLMNR == 1 )
	if( *pulIPAddress == ipLLMNR_IP_ADDR )	/* Is in network byte order */
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a2a      	ldr	r2, [pc, #168]	; (80089c4 <eARPGetCacheEntry+0xb8>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d108      	bne.n	8008932 <eARPGetCacheEntry+0x26>
	{
		/* The LLMNR IP-address has a fixed virtual MAC address */
		memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	4a29      	ldr	r2, [pc, #164]	; (80089c8 <eARPGetCacheEntry+0xbc>)
 8008924:	6811      	ldr	r1, [r2, #0]
 8008926:	6019      	str	r1, [r3, #0]
 8008928:	8892      	ldrh	r2, [r2, #4]
 800892a:	809a      	strh	r2, [r3, #4]
		eReturn = eARPCacheHit;
 800892c:	2301      	movs	r3, #1
 800892e:	73fb      	strb	r3, [r7, #15]
 8008930:	e042      	b.n	80089b8 <eARPGetCacheEntry+0xac>
	}
	else
#endif
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893a:	d005      	beq.n	8008948 <eARPGetCacheEntry+0x3c>
		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 192.168.1.255? */
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	4b22      	ldr	r3, [pc, #136]	; (80089cc <eARPGetCacheEntry+0xc0>)
 8008942:	691b      	ldr	r3, [r3, #16]
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 8008944:	429a      	cmp	r2, r3
 8008946:	d108      	bne.n	800895a <eARPGetCacheEntry+0x4e>
	{
		/* This is a broadcast so uses the broadcast MAC address. */
		memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	4a21      	ldr	r2, [pc, #132]	; (80089d0 <eARPGetCacheEntry+0xc4>)
 800894c:	6811      	ldr	r1, [r2, #0]
 800894e:	6019      	str	r1, [r3, #0]
 8008950:	8892      	ldrh	r2, [r2, #4]
 8008952:	809a      	strh	r2, [r3, #4]
		eReturn = eARPCacheHit;
 8008954:	2301      	movs	r3, #1
 8008956:	73fb      	strb	r3, [r7, #15]
 8008958:	e02e      	b.n	80089b8 <eARPGetCacheEntry+0xac>
	}
	else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 800895a:	4b1e      	ldr	r3, [pc, #120]	; (80089d4 <eARPGetCacheEntry+0xc8>)
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d102      	bne.n	8008968 <eARPGetCacheEntry+0x5c>
	{
		/* The IP address has not yet been assigned, so there is nothing that
		can be done. */
		eReturn = eCantSendPacket;
 8008962:	2302      	movs	r3, #2
 8008964:	73fb      	strb	r3, [r7, #15]
 8008966:	e027      	b.n	80089b8 <eARPGetCacheEntry+0xac>
	}
	else
	{
		eReturn = eARPCacheMiss;
 8008968:	2300      	movs	r3, #0
 800896a:	73fb      	strb	r3, [r7, #15]

		if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	4b18      	ldr	r3, [pc, #96]	; (80089d4 <eARPGetCacheEntry+0xc8>)
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	405a      	eors	r2, r3
 8008976:	4b15      	ldr	r3, [pc, #84]	; (80089cc <eARPGetCacheEntry+0xc0>)
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	4013      	ands	r3, r2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d003      	beq.n	8008988 <eARPGetCacheEntry+0x7c>
			else
#endif
			{
				/* The IP address is off the local network, so look up the
				hardware address of the router, if any. */
				ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 8008980:	4b12      	ldr	r3, [pc, #72]	; (80089cc <eARPGetCacheEntry+0xc0>)
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	60bb      	str	r3, [r7, #8]
 8008986:	e002      	b.n	800898e <eARPGetCacheEntry+0x82>
		}
		else
		{
			/* The IP address is on the local network, so lookup the requested
			IP address directly. */
			ulAddressToLookup = *pulIPAddress;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	60bb      	str	r3, [r7, #8]
		}

		if( eReturn == eARPCacheMiss )
 800898e:	7bfb      	ldrb	r3, [r7, #15]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d111      	bne.n	80089b8 <eARPGetCacheEntry+0xac>
		{
			if( ulAddressToLookup == 0UL )
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d102      	bne.n	80089a0 <eARPGetCacheEntry+0x94>
			{
				/* The address is not on the local network, and there is not a
				router. */
				eReturn = eCantSendPacket;
 800899a:	2302      	movs	r3, #2
 800899c:	73fb      	strb	r3, [r7, #15]
 800899e:	e00b      	b.n	80089b8 <eARPGetCacheEntry+0xac>
			}
			else
			{
				eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	68b8      	ldr	r0, [r7, #8]
 80089a4:	f000 f818 	bl	80089d8 <prvCacheLookup>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73fb      	strb	r3, [r7, #15]

				if( eReturn == eARPCacheMiss )
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d102      	bne.n	80089b8 <eARPGetCacheEntry+0xac>
				{
					/* It might be that the ARP has to go to the gateway. */
					*pulIPAddress = ulAddressToLookup;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

	return eReturn;
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	fc0000e0 	.word	0xfc0000e0
 80089c8:	080110a0 	.word	0x080110a0
 80089cc:	20004198 	.word	0x20004198
 80089d0:	080110a8 	.word	0x080110a8
 80089d4:	200000a0 	.word	0x200000a0

080089d8 <prvCacheLookup>:

/*-----------------------------------------------------------*/

static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup, MACAddress_t * const pxMACAddress )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
BaseType_t x;
eARPLookupResult_t eReturn = eARPCacheMiss;
 80089e2:	2300      	movs	r3, #0
 80089e4:	72fb      	strb	r3, [r7, #11]

	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80089e6:	2300      	movs	r3, #0
 80089e8:	60fb      	str	r3, [r7, #12]
 80089ea:	e02b      	b.n	8008a44 <prvCacheLookup+0x6c>
	{
		/* Does this row in the ARP cache table hold an entry for the IP address
		being queried? */
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 80089ec:	4919      	ldr	r1, [pc, #100]	; (8008a54 <prvCacheLookup+0x7c>)
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	4613      	mov	r3, r2
 80089f2:	005b      	lsls	r3, r3, #1
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	440b      	add	r3, r1
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d11d      	bne.n	8008a3e <prvCacheLookup+0x66>
		{
			/* A matching valid entry was found. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8008a02:	4914      	ldr	r1, [pc, #80]	; (8008a54 <prvCacheLookup+0x7c>)
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4613      	mov	r3, r2
 8008a08:	005b      	lsls	r3, r3, #1
 8008a0a:	4413      	add	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	440b      	add	r3, r1
 8008a10:	330b      	adds	r3, #11
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d102      	bne.n	8008a1e <prvCacheLookup+0x46>
			{
				/* This entry is waiting an ARP reply, so is not valid. */
				eReturn = eCantSendPacket;
 8008a18:	2302      	movs	r3, #2
 8008a1a:	72fb      	strb	r3, [r7, #11]
			{
				/* A valid entry was found. */
				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
				eReturn = eARPCacheHit;
			}
			break;
 8008a1c:	e015      	b.n	8008a4a <prvCacheLookup+0x72>
				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8008a1e:	6838      	ldr	r0, [r7, #0]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	4613      	mov	r3, r2
 8008a24:	005b      	lsls	r3, r3, #1
 8008a26:	4413      	add	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4a0a      	ldr	r2, [pc, #40]	; (8008a54 <prvCacheLookup+0x7c>)
 8008a2c:	4413      	add	r3, r2
 8008a2e:	3304      	adds	r3, #4
 8008a30:	2206      	movs	r2, #6
 8008a32:	4619      	mov	r1, r3
 8008a34:	f008 f8f1 	bl	8010c1a <memcpy>
				eReturn = eARPCacheHit;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	72fb      	strb	r3, [r7, #11]
			break;
 8008a3c:	e005      	b.n	8008a4a <prvCacheLookup+0x72>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3301      	adds	r3, #1
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b05      	cmp	r3, #5
 8008a48:	ddd0      	ble.n	80089ec <prvCacheLookup+0x14>
		}
	}

	return eReturn;
 8008a4a:	7afb      	ldrb	r3, [r7, #11]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	200040a8 	.word	0x200040a8

08008a58 <vARPAgeCache>:
/*-----------------------------------------------------------*/

void vARPAgeCache( void )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
BaseType_t x;
TickType_t xTimeNow;

	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8008a5e:	2300      	movs	r3, #0
 8008a60:	607b      	str	r3, [r7, #4]
 8008a62:	e063      	b.n	8008b2c <vARPAgeCache+0xd4>
	{
		/* If the entry is valid (its age is greater than zero). */
		if( xARPCache[ x ].ucAge > 0U )
 8008a64:	4940      	ldr	r1, [pc, #256]	; (8008b68 <vARPAgeCache+0x110>)
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	005b      	lsls	r3, r3, #1
 8008a6c:	4413      	add	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	440b      	add	r3, r1
 8008a72:	330a      	adds	r3, #10
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d055      	beq.n	8008b26 <vARPAgeCache+0xce>
		{
			/* Decrement the age value of the entry in this ARP cache table row.
			When the age reaches zero it is no longer considered valid. */
			( xARPCache[ x ].ucAge )--;
 8008a7a:	493b      	ldr	r1, [pc, #236]	; (8008b68 <vARPAgeCache+0x110>)
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	4413      	add	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	440b      	add	r3, r1
 8008a88:	330a      	adds	r3, #10
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	b2d8      	uxtb	r0, r3
 8008a90:	4935      	ldr	r1, [pc, #212]	; (8008b68 <vARPAgeCache+0x110>)
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	4613      	mov	r3, r2
 8008a96:	005b      	lsls	r3, r3, #1
 8008a98:	4413      	add	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	440b      	add	r3, r1
 8008a9e:	330a      	adds	r3, #10
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	701a      	strb	r2, [r3, #0]

			/* If the entry is not yet valid, then it is waiting an ARP
			reply, and the ARP request should be retransmitted. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8008aa4:	4930      	ldr	r1, [pc, #192]	; (8008b68 <vARPAgeCache+0x110>)
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	440b      	add	r3, r1
 8008ab2:	330b      	adds	r3, #11
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10b      	bne.n	8008ad2 <vARPAgeCache+0x7a>
			{
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8008aba:	492b      	ldr	r1, [pc, #172]	; (8008b68 <vARPAgeCache+0x110>)
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	005b      	lsls	r3, r3, #1
 8008ac2:	4413      	add	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	440b      	add	r3, r1
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 f85e 	bl	8008b8c <FreeRTOS_OutputARPRequest>
 8008ad0:	e015      	b.n	8008afe <vARPAgeCache+0xa6>
			}
			else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8008ad2:	4925      	ldr	r1, [pc, #148]	; (8008b68 <vARPAgeCache+0x110>)
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	4413      	add	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	440b      	add	r3, r1
 8008ae0:	330a      	adds	r3, #10
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d80a      	bhi.n	8008afe <vARPAgeCache+0xa6>
			{
				/* This entry will get removed soon.  See if the MAC address is
				still valid to prevent this happening. */
				iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8008ae8:	491f      	ldr	r1, [pc, #124]	; (8008b68 <vARPAgeCache+0x110>)
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	4613      	mov	r3, r2
 8008aee:	005b      	lsls	r3, r3, #1
 8008af0:	4413      	add	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	440b      	add	r3, r1
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 f847 	bl	8008b8c <FreeRTOS_OutputARPRequest>
			else
			{
				/* The age has just ticked down, with nothing to do. */
			}

			if( xARPCache[ x ].ucAge == 0u )
 8008afe:	491a      	ldr	r1, [pc, #104]	; (8008b68 <vARPAgeCache+0x110>)
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	4613      	mov	r3, r2
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	4413      	add	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	440b      	add	r3, r1
 8008b0c:	330a      	adds	r3, #10
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d108      	bne.n	8008b26 <vARPAgeCache+0xce>
			{
				/* The entry is no longer valid.  Wipe it out. */
				iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
				xARPCache[ x ].ulIPAddress = 0UL;
 8008b14:	4914      	ldr	r1, [pc, #80]	; (8008b68 <vARPAgeCache+0x110>)
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	005b      	lsls	r3, r3, #1
 8008b1c:	4413      	add	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	440b      	add	r3, r1
 8008b22:	2200      	movs	r2, #0
 8008b24:	601a      	str	r2, [r3, #0]
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	607b      	str	r3, [r7, #4]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b05      	cmp	r3, #5
 8008b30:	dd98      	ble.n	8008a64 <vARPAgeCache+0xc>
			}
		}
	}

	xTimeNow = xTaskGetTickCount ();
 8008b32:	f7fe fe8b 	bl	800784c <xTaskGetTickCount>
 8008b36:	6038      	str	r0, [r7, #0]

	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8008b38:	4b0c      	ldr	r3, [pc, #48]	; (8008b6c <vARPAgeCache+0x114>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d007      	beq.n	8008b50 <vARPAgeCache+0xf8>
 8008b40:	4b0a      	ldr	r3, [pc, #40]	; (8008b6c <vARPAgeCache+0x114>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d907      	bls.n	8008b60 <vARPAgeCache+0x108>
	{
		FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 8008b50:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <vARPAgeCache+0x118>)
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 f819 	bl	8008b8c <FreeRTOS_OutputARPRequest>
		xLastGratuitousARPTime = xTimeNow;
 8008b5a:	4a04      	ldr	r2, [pc, #16]	; (8008b6c <vARPAgeCache+0x114>)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	6013      	str	r3, [r2, #0]
	}
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	200040a8 	.word	0x200040a8
 8008b6c:	200040f0 	.word	0x200040f0
 8008b70:	200000a0 	.word	0x200000a0

08008b74 <vARPSendGratuitous>:
/*-----------------------------------------------------------*/

void vARPSendGratuitous( void )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
	/* Setting xLastGratuitousARPTime to 0 will force a gratuitous ARP the next
	time vARPAgeCache() is called. */
	xLastGratuitousARPTime = ( TickType_t ) 0;
 8008b78:	4b03      	ldr	r3, [pc, #12]	; (8008b88 <vARPSendGratuitous+0x14>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]

	/* Let the IP-task call vARPAgeCache(). */
	xSendEventToIPTask( eARPTimerEvent );
 8008b7e:	2002      	movs	r0, #2
 8008b80:	f001 fc96 	bl	800a4b0 <xSendEventToIPTask>
}
 8008b84:	bf00      	nop
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	200040f0 	.word	0x200040f0

08008b8c <FreeRTOS_OutputARPRequest>:

/*-----------------------------------------------------------*/
void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
NetworkBufferDescriptor_t *pxNetworkBuffer;

	/* This is called from the context of the IP event task, so a block time
	must not be used. */
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0 );
 8008b94:	2100      	movs	r1, #0
 8008b96:	202a      	movs	r0, #42	; 0x2a
 8008b98:	f007 f818 	bl	800fbcc <pxGetNetworkBufferWithDescriptor>
 8008b9c:	60f8      	str	r0, [r7, #12]

	if( pxNetworkBuffer != NULL )
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d009      	beq.n	8008bb8 <FreeRTOS_OutputARPRequest+0x2c>
	{
		pxNetworkBuffer->ulIPAddress = ulIPAddress;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	615a      	str	r2, [r3, #20]
		vARPGenerateRequestPacket( pxNetworkBuffer );
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 f808 	bl	8008bc0 <vARPGenerateRequestPacket>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
			}
		}
		#endif

		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f7fb fe9c 	bl	80048f0 <xNetworkInterfaceOutput>
	}
}
 8008bb8:	bf00      	nop
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <vARPGenerateRequestPacket>:

void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
ARPPacket_t *pxARPPacket;

	pxARPPacket = ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	60fb      	str	r3, [r7, #12]
		xARPHeader.ucHardwareAddressLength;
		xARPHeader.ucProtocolAddressLength;
		xARPHeader.usOperation;
		xARPHeader.xTargetHardwareAddress;
	*/
	memcpy( ( void * ) &( pxARPPacket->xEthernetHeader ), ( void * ) xDefaultPartARPPacketHeader, sizeof( xDefaultPartARPPacketHeader ) );
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	4a1a      	ldr	r2, [pc, #104]	; (8008c3c <vARPGenerateRequestPacket+0x7c>)
 8008bd2:	4614      	mov	r4, r2
 8008bd4:	469e      	mov	lr, r3
 8008bd6:	f104 0c20 	add.w	ip, r4, #32
 8008bda:	4675      	mov	r5, lr
 8008bdc:	4626      	mov	r6, r4
 8008bde:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008be0:	6028      	str	r0, [r5, #0]
 8008be2:	6069      	str	r1, [r5, #4]
 8008be4:	60aa      	str	r2, [r5, #8]
 8008be6:	60eb      	str	r3, [r5, #12]
 8008be8:	3410      	adds	r4, #16
 8008bea:	f10e 0e10 	add.w	lr, lr, #16
 8008bee:	4564      	cmp	r4, ip
 8008bf0:	d1f3      	bne.n	8008bda <vARPGenerateRequestPacket+0x1a>
 8008bf2:	4673      	mov	r3, lr
 8008bf4:	4622      	mov	r2, r4
 8008bf6:	6810      	ldr	r0, [r2, #0]
 8008bf8:	6018      	str	r0, [r3, #0]
 8008bfa:	8892      	ldrh	r2, [r2, #4]
 8008bfc:	809a      	strh	r2, [r3, #4]
	memcpy( ( void * ) pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3306      	adds	r3, #6
 8008c02:	2206      	movs	r2, #6
 8008c04:	490e      	ldr	r1, [pc, #56]	; (8008c40 <vARPGenerateRequestPacket+0x80>)
 8008c06:	4618      	mov	r0, r3
 8008c08:	f008 f807 	bl	8010c1a <memcpy>
	memcpy( ( void * ) pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	3316      	adds	r3, #22
 8008c10:	2206      	movs	r2, #6
 8008c12:	490b      	ldr	r1, [pc, #44]	; (8008c40 <vARPGenerateRequestPacket+0x80>)
 8008c14:	4618      	mov	r0, r3
 8008c16:	f008 f800 	bl	8010c1a <memcpy>
	/* HT:endian: network to network */
	pxARPPacket->xARPHeader.ulSenderProtocolAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8008c1a:	4b09      	ldr	r3, [pc, #36]	; (8008c40 <vARPGenerateRequestPacket+0x80>)
 8008c1c:	695a      	ldr	r2, [r3, #20]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	61da      	str	r2, [r3, #28]
	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	695a      	ldr	r2, [r3, #20]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	222a      	movs	r2, #42	; 0x2a
 8008c30:	61da      	str	r2, [r3, #28]

	iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
 8008c32:	bf00      	nop
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	0801104c 	.word	0x0801104c
 8008c40:	200000a0 	.word	0x200000a0

08008c44 <xIsDHCPSocket>:
static DHCPData_t xDHCPData;

/*-----------------------------------------------------------*/

BaseType_t xIsDHCPSocket( Socket_t xSocket )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	if( xDHCPData.xDHCPSocket == xSocket )
 8008c4c:	4b08      	ldr	r3, [pc, #32]	; (8008c70 <xIsDHCPSocket+0x2c>)
 8008c4e:	6a1a      	ldr	r2, [r3, #32]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d102      	bne.n	8008c5c <xIsDHCPSocket+0x18>
	{
		xReturn = pdTRUE;
 8008c56:	2301      	movs	r3, #1
 8008c58:	60fb      	str	r3, [r7, #12]
 8008c5a:	e001      	b.n	8008c60 <xIsDHCPSocket+0x1c>
	}
	else
	{
		xReturn = pdFALSE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008c60:	68fb      	ldr	r3, [r7, #12]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	200040f4 	.word	0x200040f4

08008c74 <vDHCPProcess>:
/*-----------------------------------------------------------*/

void vDHCPProcess( BaseType_t xReset )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
BaseType_t xGivingUp = pdFALSE;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	60fb      	str	r3, [r7, #12]
#if( ipconfigUSE_DHCP_HOOK != 0 )
	eDHCPCallbackAnswer_t eAnswer;
#endif	/* ipconfigUSE_DHCP_HOOK */

	/* Is DHCP starting over? */
	if( xReset != pdFALSE )
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d002      	beq.n	8008c8c <vDHCPProcess+0x18>
	{
		xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 8008c86:	4b8d      	ldr	r3, [pc, #564]	; (8008ebc <vDHCPProcess+0x248>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	771a      	strb	r2, [r3, #28]
	}

	switch( xDHCPData.eDHCPState )
 8008c8c:	4b8b      	ldr	r3, [pc, #556]	; (8008ebc <vDHCPProcess+0x248>)
 8008c8e:	7f1b      	ldrb	r3, [r3, #28]
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	f200 80e6 	bhi.w	8008e62 <vDHCPProcess+0x1ee>
 8008c96:	a201      	add	r2, pc, #4	; (adr r2, 8008c9c <vDHCPProcess+0x28>)
 8008c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9c:	08008cb1 	.word	0x08008cb1
 8008ca0:	08008ce9 	.word	0x08008ce9
 8008ca4:	08008d77 	.word	0x08008d77
 8008ca8:	08008e2b 	.word	0x08008e2b
 8008cac:	08008e5b 	.word	0x08008e5b
			if( eAnswer == eDHCPContinue )
		#endif	/* ipconfigUSE_DHCP_HOOK */
			{
				/* Initial state.  Create the DHCP socket, timer, etc. if they
				have not already been created. */
				prvInitialiseDHCP();
 8008cb0:	f000 f956 	bl	8008f60 <prvInitialiseDHCP>

				/* See if prvInitialiseDHCP() has creates a socket. */
				if( xDHCPData.xDHCPSocket == NULL )
 8008cb4:	4b81      	ldr	r3, [pc, #516]	; (8008ebc <vDHCPProcess+0x248>)
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d102      	bne.n	8008cc2 <vDHCPProcess+0x4e>
				{
					xGivingUp = pdTRUE;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	60fb      	str	r3, [r7, #12]
					break;
 8008cc0:	e0d8      	b.n	8008e74 <vDHCPProcess+0x200>
				}

				*ipLOCAL_IP_ADDRESS_POINTER = 0UL;
 8008cc2:	4b7f      	ldr	r3, [pc, #508]	; (8008ec0 <vDHCPProcess+0x24c>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	615a      	str	r2, [r3, #20]

				/* Send the first discover request. */
				if( xDHCPData.xDHCPSocket != NULL )
 8008cc8:	4b7c      	ldr	r3, [pc, #496]	; (8008ebc <vDHCPProcess+0x248>)
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 80ca 	beq.w	8008e66 <vDHCPProcess+0x1f2>
				{
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008cd2:	f7fe fdbb 	bl	800784c <xTaskGetTickCount>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	4b78      	ldr	r3, [pc, #480]	; (8008ebc <vDHCPProcess+0x248>)
 8008cda:	611a      	str	r2, [r3, #16]
					prvSendDHCPDiscover( );
 8008cdc:	f000 fbd6 	bl	800948c <prvSendDHCPDiscover>
					xDHCPData.eDHCPState = eWaitingOffer;
 8008ce0:	4b76      	ldr	r3, [pc, #472]	; (8008ebc <vDHCPProcess+0x248>)
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	771a      	strb	r2, [r3, #28]

				/* The user indicates that the DHCP process does not continue. */
				xGivingUp = pdTRUE;
			}
		#endif	/* ipconfigUSE_DHCP_HOOK */
			break;
 8008ce6:	e0be      	b.n	8008e66 <vDHCPProcess+0x1f2>

		case eWaitingOffer :

			xGivingUp = pdFALSE;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60fb      	str	r3, [r7, #12]

			/* Look for offers coming in. */
			if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_OFFER ) == pdPASS )
 8008cec:	2002      	movs	r0, #2
 8008cee:	f000 f95f 	bl	8008fb0 <prvProcessDHCPReplies>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d10e      	bne.n	8008d16 <vDHCPProcess+0xa2>
				if( eAnswer == eDHCPContinue )
			#endif	/* ipconfigUSE_DHCP_HOOK */
				{
					/* An offer has been made, the user wants to continue,
					generate the request. */
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008cf8:	f7fe fda8 	bl	800784c <xTaskGetTickCount>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	4b6f      	ldr	r3, [pc, #444]	; (8008ebc <vDHCPProcess+0x248>)
 8008d00:	611a      	str	r2, [r3, #16]
					xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 8008d02:	4b6e      	ldr	r3, [pc, #440]	; (8008ebc <vDHCPProcess+0x248>)
 8008d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d08:	615a      	str	r2, [r3, #20]
					prvSendDHCPRequest( );
 8008d0a:	f000 fb8d 	bl	8009428 <prvSendDHCPRequest>
					xDHCPData.eDHCPState = eWaitingAcknowledge;
 8008d0e:	4b6b      	ldr	r3, [pc, #428]	; (8008ebc <vDHCPProcess+0x248>)
 8008d10:	2202      	movs	r2, #2
 8008d12:	771a      	strb	r2, [r3, #28]
					break;
 8008d14:	e0ae      	b.n	8008e74 <vDHCPProcess+0x200>

				/* The user indicates that the DHCP process does not continue. */
				xGivingUp = pdTRUE;
			#endif	/* ipconfigUSE_DHCP_HOOK */
			}
			else if( ( xTaskGetTickCount() - xDHCPData.xDHCPTxTime ) > xDHCPData.xDHCPTxPeriod )
 8008d16:	f7fe fd99 	bl	800784c <xTaskGetTickCount>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	4b67      	ldr	r3, [pc, #412]	; (8008ebc <vDHCPProcess+0x248>)
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	1ad2      	subs	r2, r2, r3
 8008d22:	4b66      	ldr	r3, [pc, #408]	; (8008ebc <vDHCPProcess+0x248>)
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	f240 809f 	bls.w	8008e6a <vDHCPProcess+0x1f6>
			{
				/* It is time to send another Discover.  Increase the time
				period, and if it has not got to the point of giving up - send
				another discovery. */
				xDHCPData.xDHCPTxPeriod <<= 1;
 8008d2c:	4b63      	ldr	r3, [pc, #396]	; (8008ebc <vDHCPProcess+0x248>)
 8008d2e:	695b      	ldr	r3, [r3, #20]
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	4a62      	ldr	r2, [pc, #392]	; (8008ebc <vDHCPProcess+0x248>)
 8008d34:	6153      	str	r3, [r2, #20]

				if( xDHCPData.xDHCPTxPeriod <= ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 8008d36:	4b61      	ldr	r3, [pc, #388]	; (8008ebc <vDHCPProcess+0x248>)
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	f247 5230 	movw	r2, #30000	; 0x7530
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d816      	bhi.n	8008d70 <vDHCPProcess+0xfc>
				{
					xDHCPData.ulTransactionId++;
 8008d42:	4b5e      	ldr	r3, [pc, #376]	; (8008ebc <vDHCPProcess+0x248>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3301      	adds	r3, #1
 8008d48:	4a5c      	ldr	r2, [pc, #368]	; (8008ebc <vDHCPProcess+0x248>)
 8008d4a:	6013      	str	r3, [r2, #0]
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008d4c:	f7fe fd7e 	bl	800784c <xTaskGetTickCount>
 8008d50:	4602      	mov	r2, r0
 8008d52:	4b5a      	ldr	r3, [pc, #360]	; (8008ebc <vDHCPProcess+0x248>)
 8008d54:	611a      	str	r2, [r3, #16]
					xDHCPData.xUseBroadcast = !xDHCPData.xUseBroadcast;
 8008d56:	4b59      	ldr	r3, [pc, #356]	; (8008ebc <vDHCPProcess+0x248>)
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	bf0c      	ite	eq
 8008d5e:	2301      	moveq	r3, #1
 8008d60:	2300      	movne	r3, #0
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	461a      	mov	r2, r3
 8008d66:	4b55      	ldr	r3, [pc, #340]	; (8008ebc <vDHCPProcess+0x248>)
 8008d68:	619a      	str	r2, [r3, #24]
					prvSendDHCPDiscover( );
 8008d6a:	f000 fb8f 	bl	800948c <prvSendDHCPDiscover>
						xGivingUp = pdTRUE;
					}
					#endif /* ipconfigDHCP_FALL_BACK_AUTO_IP */
				}
			}
			break;
 8008d6e:	e07c      	b.n	8008e6a <vDHCPProcess+0x1f6>
						xGivingUp = pdTRUE;
 8008d70:	2301      	movs	r3, #1
 8008d72:	60fb      	str	r3, [r7, #12]
			break;
 8008d74:	e079      	b.n	8008e6a <vDHCPProcess+0x1f6>

		case eWaitingAcknowledge :

			/* Look for acks coming in. */
			if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_ACK ) == pdPASS )
 8008d76:	2005      	movs	r0, #5
 8008d78:	f000 f91a 	bl	8008fb0 <prvProcessDHCPReplies>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d132      	bne.n	8008de8 <vDHCPProcess+0x174>
			{
				FreeRTOS_debug_printf( ( "vDHCPProcess: acked %lxip\n", FreeRTOS_ntohl( xDHCPData.ulOfferedIPAddress ) ) );

				/* DHCP completed.  The IP address can now be used, and the
				timer set to the lease timeout time. */
				*ipLOCAL_IP_ADDRESS_POINTER = xDHCPData.ulOfferedIPAddress;
 8008d82:	4b4e      	ldr	r3, [pc, #312]	; (8008ebc <vDHCPProcess+0x248>)
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	4a4e      	ldr	r2, [pc, #312]	; (8008ec0 <vDHCPProcess+0x24c>)
 8008d88:	6153      	str	r3, [r2, #20]

				/* Setting the 'local' broadcast address, something like
				'192.168.1.255'. */
				xNetworkAddressing.ulBroadcastAddress = ( xDHCPData.ulOfferedIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
 8008d8a:	4b4c      	ldr	r3, [pc, #304]	; (8008ebc <vDHCPProcess+0x248>)
 8008d8c:	685a      	ldr	r2, [r3, #4]
 8008d8e:	4b4d      	ldr	r3, [pc, #308]	; (8008ec4 <vDHCPProcess+0x250>)
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	43db      	mvns	r3, r3
 8008d94:	4313      	orrs	r3, r2
 8008d96:	4a4b      	ldr	r2, [pc, #300]	; (8008ec4 <vDHCPProcess+0x250>)
 8008d98:	6113      	str	r3, [r2, #16]
				xDHCPData.eDHCPState = eLeasedAddress;
 8008d9a:	4b48      	ldr	r3, [pc, #288]	; (8008ebc <vDHCPProcess+0x248>)
 8008d9c:	2203      	movs	r2, #3
 8008d9e:	771a      	strb	r2, [r3, #28]
				iptraceDHCP_SUCCEDEED( xDHCPData.ulOfferedIPAddress );

				/* DHCP failed, the default configured IP-address will be used
				Now call vIPNetworkUpCalls() to send the network-up event and
				start the ARP timer. */
				vIPNetworkUpCalls( );
 8008da0:	f001 fc60 	bl	800a664 <vIPNetworkUpCalls>

				/* Close socket to ensure packets don't queue on it. */
				vSocketClose( xDHCPData.xDHCPSocket );
 8008da4:	4b45      	ldr	r3, [pc, #276]	; (8008ebc <vDHCPProcess+0x248>)
 8008da6:	6a1b      	ldr	r3, [r3, #32]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f002 fb61 	bl	800b470 <vSocketClose>
				xDHCPData.xDHCPSocket = NULL;
 8008dae:	4b43      	ldr	r3, [pc, #268]	; (8008ebc <vDHCPProcess+0x248>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	621a      	str	r2, [r3, #32]

				if( xDHCPData.ulLeaseTime == 0UL )
 8008db4:	4b41      	ldr	r3, [pc, #260]	; (8008ebc <vDHCPProcess+0x248>)
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d103      	bne.n	8008dc4 <vDHCPProcess+0x150>
				{
					xDHCPData.ulLeaseTime = dhcpDEFAULT_LEASE_TIME;
 8008dbc:	4b3f      	ldr	r3, [pc, #252]	; (8008ebc <vDHCPProcess+0x248>)
 8008dbe:	4a42      	ldr	r2, [pc, #264]	; (8008ec8 <vDHCPProcess+0x254>)
 8008dc0:	60da      	str	r2, [r3, #12]
 8008dc2:	e009      	b.n	8008dd8 <vDHCPProcess+0x164>
				}
				else if( xDHCPData.ulLeaseTime < dhcpMINIMUM_LEASE_TIME )
 8008dc4:	4b3d      	ldr	r3, [pc, #244]	; (8008ebc <vDHCPProcess+0x248>)
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d803      	bhi.n	8008dd8 <vDHCPProcess+0x164>
				{
					xDHCPData.ulLeaseTime = dhcpMINIMUM_LEASE_TIME;
 8008dd0:	4b3a      	ldr	r3, [pc, #232]	; (8008ebc <vDHCPProcess+0x248>)
 8008dd2:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008dd6:	60da      	str	r2, [r3, #12]
				{
					/* The lease time is already valid. */
				}

				/* Check for clashes. */
				vARPSendGratuitous();
 8008dd8:	f7ff fecc 	bl	8008b74 <vARPSendGratuitous>
				vIPReloadDHCPTimer( xDHCPData.ulLeaseTime );
 8008ddc:	4b37      	ldr	r3, [pc, #220]	; (8008ebc <vDHCPProcess+0x248>)
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f001 fe89 	bl	800aaf8 <vIPReloadDHCPTimer>
						/* Give up, start again. */
						xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
					}
				}
			}
			break;
 8008de6:	e042      	b.n	8008e6e <vDHCPProcess+0x1fa>
				if( ( xTaskGetTickCount() - xDHCPData.xDHCPTxTime ) > xDHCPData.xDHCPTxPeriod )
 8008de8:	f7fe fd30 	bl	800784c <xTaskGetTickCount>
 8008dec:	4602      	mov	r2, r0
 8008dee:	4b33      	ldr	r3, [pc, #204]	; (8008ebc <vDHCPProcess+0x248>)
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	1ad2      	subs	r2, r2, r3
 8008df4:	4b31      	ldr	r3, [pc, #196]	; (8008ebc <vDHCPProcess+0x248>)
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d938      	bls.n	8008e6e <vDHCPProcess+0x1fa>
					xDHCPData.xDHCPTxPeriod <<= 1;
 8008dfc:	4b2f      	ldr	r3, [pc, #188]	; (8008ebc <vDHCPProcess+0x248>)
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	005b      	lsls	r3, r3, #1
 8008e02:	4a2e      	ldr	r2, [pc, #184]	; (8008ebc <vDHCPProcess+0x248>)
 8008e04:	6153      	str	r3, [r2, #20]
					if( xDHCPData.xDHCPTxPeriod <= ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 8008e06:	4b2d      	ldr	r3, [pc, #180]	; (8008ebc <vDHCPProcess+0x248>)
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	f247 5230 	movw	r2, #30000	; 0x7530
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d807      	bhi.n	8008e22 <vDHCPProcess+0x1ae>
						xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008e12:	f7fe fd1b 	bl	800784c <xTaskGetTickCount>
 8008e16:	4602      	mov	r2, r0
 8008e18:	4b28      	ldr	r3, [pc, #160]	; (8008ebc <vDHCPProcess+0x248>)
 8008e1a:	611a      	str	r2, [r3, #16]
						prvSendDHCPRequest( );
 8008e1c:	f000 fb04 	bl	8009428 <prvSendDHCPRequest>
			break;
 8008e20:	e025      	b.n	8008e6e <vDHCPProcess+0x1fa>
						xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 8008e22:	4b26      	ldr	r3, [pc, #152]	; (8008ebc <vDHCPProcess+0x248>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	771a      	strb	r2, [r3, #28]
			break;
 8008e28:	e021      	b.n	8008e6e <vDHCPProcess+0x1fa>
	#endif	/* ipconfigDHCP_FALL_BACK_AUTO_IP */

		case eLeasedAddress :

			/* Resend the request at the appropriate time to renew the lease. */
			prvCreateDHCPSocket();
 8008e2a:	f000 f84f 	bl	8008ecc <prvCreateDHCPSocket>

			if( xDHCPData.xDHCPSocket != NULL )
 8008e2e:	4b23      	ldr	r3, [pc, #140]	; (8008ebc <vDHCPProcess+0x248>)
 8008e30:	6a1b      	ldr	r3, [r3, #32]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d01d      	beq.n	8008e72 <vDHCPProcess+0x1fe>
			{
				xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008e36:	f7fe fd09 	bl	800784c <xTaskGetTickCount>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	4b1f      	ldr	r3, [pc, #124]	; (8008ebc <vDHCPProcess+0x248>)
 8008e3e:	611a      	str	r2, [r3, #16]
				xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 8008e40:	4b1e      	ldr	r3, [pc, #120]	; (8008ebc <vDHCPProcess+0x248>)
 8008e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e46:	615a      	str	r2, [r3, #20]
				prvSendDHCPRequest( );
 8008e48:	f000 faee 	bl	8009428 <prvSendDHCPRequest>
				xDHCPData.eDHCPState = eWaitingAcknowledge;
 8008e4c:	4b1b      	ldr	r3, [pc, #108]	; (8008ebc <vDHCPProcess+0x248>)
 8008e4e:	2202      	movs	r2, #2
 8008e50:	771a      	strb	r2, [r3, #28]

				/* From now on, we should be called more often */
				vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 8008e52:	20fa      	movs	r0, #250	; 0xfa
 8008e54:	f001 fe50 	bl	800aaf8 <vIPReloadDHCPTimer>
			}
			break;
 8008e58:	e00b      	b.n	8008e72 <vDHCPProcess+0x1fe>

		case eNotUsingLeasedAddress:

			vIPSetDHCPTimerEnableState( pdFALSE );
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	f001 fe32 	bl	800aac4 <vIPSetDHCPTimerEnableState>
			break;
 8008e60:	e008      	b.n	8008e74 <vDHCPProcess+0x200>

		default:
			break;
 8008e62:	bf00      	nop
 8008e64:	e006      	b.n	8008e74 <vDHCPProcess+0x200>
			break;
 8008e66:	bf00      	nop
 8008e68:	e004      	b.n	8008e74 <vDHCPProcess+0x200>
			break;
 8008e6a:	bf00      	nop
 8008e6c:	e002      	b.n	8008e74 <vDHCPProcess+0x200>
			break;
 8008e6e:	bf00      	nop
 8008e70:	e000      	b.n	8008e74 <vDHCPProcess+0x200>
			break;
 8008e72:	bf00      	nop
	}

	if( xGivingUp != pdFALSE )
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d01b      	beq.n	8008eb2 <vDHCPProcess+0x23e>
		/* xGivingUp became true either because of a time-out, or because
		xApplicationDHCPHook() returned another value than 'eDHCPContinue',
		meaning that the conversion is canceled from here. */

		/* Revert to static IP address. */
		taskENTER_CRITICAL();
 8008e7a:	f7fd f997 	bl	80061ac <vPortEnterCritical>
		{
			*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 8008e7e:	4b11      	ldr	r3, [pc, #68]	; (8008ec4 <vDHCPProcess+0x250>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a0f      	ldr	r2, [pc, #60]	; (8008ec0 <vDHCPProcess+0x24c>)
 8008e84:	6153      	str	r3, [r2, #20]
			iptraceDHCP_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( xNetworkAddressing.ulDefaultIPAddress );
		}
		taskEXIT_CRITICAL();
 8008e86:	f7fd f9bf 	bl	8006208 <vPortExitCritical>

		xDHCPData.eDHCPState = eNotUsingLeasedAddress;
 8008e8a:	4b0c      	ldr	r3, [pc, #48]	; (8008ebc <vDHCPProcess+0x248>)
 8008e8c:	2204      	movs	r2, #4
 8008e8e:	771a      	strb	r2, [r3, #28]
		vIPSetDHCPTimerEnableState( pdFALSE );
 8008e90:	2000      	movs	r0, #0
 8008e92:	f001 fe17 	bl	800aac4 <vIPSetDHCPTimerEnableState>

		/* DHCP failed, the default configured IP-address will be used.  Now
		call vIPNetworkUpCalls() to send the network-up event and start the ARP
		timer. */
		vIPNetworkUpCalls( );
 8008e96:	f001 fbe5 	bl	800a664 <vIPNetworkUpCalls>

		/* Test if socket was indeed created. */
		if( xDHCPData.xDHCPSocket != NULL )
 8008e9a:	4b08      	ldr	r3, [pc, #32]	; (8008ebc <vDHCPProcess+0x248>)
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d007      	beq.n	8008eb2 <vDHCPProcess+0x23e>
		{
			/* Close socket to ensure packets don't queue on it. */
			vSocketClose( xDHCPData.xDHCPSocket );
 8008ea2:	4b06      	ldr	r3, [pc, #24]	; (8008ebc <vDHCPProcess+0x248>)
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f002 fae2 	bl	800b470 <vSocketClose>
			xDHCPData.xDHCPSocket = NULL;
 8008eac:	4b03      	ldr	r3, [pc, #12]	; (8008ebc <vDHCPProcess+0x248>)
 8008eae:	2200      	movs	r2, #0
 8008eb0:	621a      	str	r2, [r3, #32]
		}
	}
}
 8008eb2:	bf00      	nop
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	200040f4 	.word	0x200040f4
 8008ec0:	200000a0 	.word	0x200000a0
 8008ec4:	20004198 	.word	0x20004198
 8008ec8:	0a4cb800 	.word	0x0a4cb800

08008ecc <prvCreateDHCPSocket>:
/*-----------------------------------------------------------*/

static void prvCreateDHCPSocket( void )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af02      	add	r7, sp, #8
struct freertos_sockaddr xAddress;
BaseType_t xReturn;
TickType_t xTimeoutTime = ( TickType_t ) 0;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	603b      	str	r3, [r7, #0]

	/* Create the socket, if it has not already been created. */
	if( xDHCPData.xDHCPSocket == NULL )
 8008ed6:	4b21      	ldr	r3, [pc, #132]	; (8008f5c <prvCreateDHCPSocket+0x90>)
 8008ed8:	6a1b      	ldr	r3, [r3, #32]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d13a      	bne.n	8008f54 <prvCreateDHCPSocket+0x88>
	{
		xDHCPData.xDHCPSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8008ede:	2211      	movs	r2, #17
 8008ee0:	2102      	movs	r1, #2
 8008ee2:	2002      	movs	r0, #2
 8008ee4:	f001 ffac 	bl	800ae40 <FreeRTOS_socket>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	4b1c      	ldr	r3, [pc, #112]	; (8008f5c <prvCreateDHCPSocket+0x90>)
 8008eec:	621a      	str	r2, [r3, #32]
		if( xDHCPData.xDHCPSocket != FREERTOS_INVALID_SOCKET )
 8008eee:	4b1b      	ldr	r3, [pc, #108]	; (8008f5c <prvCreateDHCPSocket+0x90>)
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef6:	d02a      	beq.n	8008f4e <prvCreateDHCPSocket+0x82>
		{

			/* Ensure the Rx and Tx timeouts are zero as the DHCP executes in the
			context of the IP task. */
			FreeRTOS_setsockopt( xDHCPData.xDHCPSocket, 0, FREERTOS_SO_RCVTIMEO, ( void * ) &xTimeoutTime, sizeof( TickType_t ) );
 8008ef8:	4b18      	ldr	r3, [pc, #96]	; (8008f5c <prvCreateDHCPSocket+0x90>)
 8008efa:	6a18      	ldr	r0, [r3, #32]
 8008efc:	463a      	mov	r2, r7
 8008efe:	2304      	movs	r3, #4
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	4613      	mov	r3, r2
 8008f04:	2200      	movs	r2, #0
 8008f06:	2100      	movs	r1, #0
 8008f08:	f002 fb4a 	bl	800b5a0 <FreeRTOS_setsockopt>
			FreeRTOS_setsockopt( xDHCPData.xDHCPSocket, 0, FREERTOS_SO_SNDTIMEO, ( void * ) &xTimeoutTime, sizeof( TickType_t ) );
 8008f0c:	4b13      	ldr	r3, [pc, #76]	; (8008f5c <prvCreateDHCPSocket+0x90>)
 8008f0e:	6a18      	ldr	r0, [r3, #32]
 8008f10:	463a      	mov	r2, r7
 8008f12:	2304      	movs	r3, #4
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	4613      	mov	r3, r2
 8008f18:	2201      	movs	r2, #1
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	f002 fb40 	bl	800b5a0 <FreeRTOS_setsockopt>

			/* Bind to the standard DHCP client port. */
			xAddress.sin_port = ( uint16_t ) dhcpCLIENT_PORT;
 8008f20:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8008f24:	80fb      	strh	r3, [r7, #6]
			xReturn = vSocketBind( xDHCPData.xDHCPSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8008f26:	4b0d      	ldr	r3, [pc, #52]	; (8008f5c <prvCreateDHCPSocket+0x90>)
 8008f28:	6a18      	ldr	r0, [r3, #32]
 8008f2a:	1d39      	adds	r1, r7, #4
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	2208      	movs	r2, #8
 8008f30:	f002 f9e8 	bl	800b304 <vSocketBind>
 8008f34:	60f8      	str	r0, [r7, #12]
			if( xReturn != 0 )
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00b      	beq.n	8008f54 <prvCreateDHCPSocket+0x88>
			{
				/* Binding failed, close the socket again. */
				vSocketClose( xDHCPData.xDHCPSocket );
 8008f3c:	4b07      	ldr	r3, [pc, #28]	; (8008f5c <prvCreateDHCPSocket+0x90>)
 8008f3e:	6a1b      	ldr	r3, [r3, #32]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f002 fa95 	bl	800b470 <vSocketClose>
				xDHCPData.xDHCPSocket = NULL;
 8008f46:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <prvCreateDHCPSocket+0x90>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	621a      	str	r2, [r3, #32]
		{
			/* Change to NULL for easier testing. */
			xDHCPData.xDHCPSocket = NULL;
		}
	}
}
 8008f4c:	e002      	b.n	8008f54 <prvCreateDHCPSocket+0x88>
			xDHCPData.xDHCPSocket = NULL;
 8008f4e:	4b03      	ldr	r3, [pc, #12]	; (8008f5c <prvCreateDHCPSocket+0x90>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	621a      	str	r2, [r3, #32]
}
 8008f54:	bf00      	nop
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	200040f4 	.word	0x200040f4

08008f60 <prvInitialiseDHCP>:
/*-----------------------------------------------------------*/

static void prvInitialiseDHCP( void )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	af00      	add	r7, sp, #0
	/* Initialise the parameters that will be set by the DHCP process. */
	if( xDHCPData.ulTransactionId == 0ul )
 8008f64:	4b11      	ldr	r3, [pc, #68]	; (8008fac <prvInitialiseDHCP+0x4c>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d105      	bne.n	8008f78 <prvInitialiseDHCP+0x18>
	{
		xDHCPData.ulTransactionId = ipconfigRAND32();
 8008f6c:	f006 ff58 	bl	800fe20 <uxRand>
 8008f70:	4602      	mov	r2, r0
 8008f72:	4b0e      	ldr	r3, [pc, #56]	; (8008fac <prvInitialiseDHCP+0x4c>)
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	e004      	b.n	8008f82 <prvInitialiseDHCP+0x22>
	}
	else
	{
		xDHCPData.ulTransactionId++;
 8008f78:	4b0c      	ldr	r3, [pc, #48]	; (8008fac <prvInitialiseDHCP+0x4c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	4a0b      	ldr	r2, [pc, #44]	; (8008fac <prvInitialiseDHCP+0x4c>)
 8008f80:	6013      	str	r3, [r2, #0]
	}

	xDHCPData.xUseBroadcast = 0;
 8008f82:	4b0a      	ldr	r3, [pc, #40]	; (8008fac <prvInitialiseDHCP+0x4c>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	619a      	str	r2, [r3, #24]
	xDHCPData.ulOfferedIPAddress = 0UL;
 8008f88:	4b08      	ldr	r3, [pc, #32]	; (8008fac <prvInitialiseDHCP+0x4c>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	605a      	str	r2, [r3, #4]
	xDHCPData.ulDHCPServerAddress = 0UL;
 8008f8e:	4b07      	ldr	r3, [pc, #28]	; (8008fac <prvInitialiseDHCP+0x4c>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	609a      	str	r2, [r3, #8]
	xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 8008f94:	4b05      	ldr	r3, [pc, #20]	; (8008fac <prvInitialiseDHCP+0x4c>)
 8008f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f9a:	615a      	str	r2, [r3, #20]

	/* Create the DHCP socket if it has not already been created. */
	prvCreateDHCPSocket();
 8008f9c:	f7ff ff96 	bl	8008ecc <prvCreateDHCPSocket>
	FreeRTOS_debug_printf( ( "prvInitialiseDHCP: start after %lu ticks\n", dhcpINITIAL_TIMER_PERIOD ) );
	vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 8008fa0:	20fa      	movs	r0, #250	; 0xfa
 8008fa2:	f001 fda9 	bl	800aaf8 <vIPReloadDHCPTimer>
}
 8008fa6:	bf00      	nop
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	200040f4 	.word	0x200040f4

08008fb0 <prvProcessDHCPReplies>:
/*-----------------------------------------------------------*/

static BaseType_t prvProcessDHCPReplies( BaseType_t xExpectedMessageType )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b092      	sub	sp, #72	; 0x48
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	6078      	str	r0, [r7, #4]
uint8_t *pucUDPPayload, *pucLastByte;
struct freertos_sockaddr xClient;
uint32_t xClientLength = sizeof( xClient );
 8008fb8:	2308      	movs	r3, #8
 8008fba:	613b      	str	r3, [r7, #16]
int32_t lBytes;
DHCPMessage_t *pxDHCPMessage;
uint8_t *pucByte, ucOptionCode, ucLength;
uint32_t ulProcessed, ulParameter;
BaseType_t xReturn = pdFALSE;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	637b      	str	r3, [r7, #52]	; 0x34
const uint32_t ulMandatoryOptions = 2ul; /* DHCP server address, and the correct DHCP message type must be present in the options. */
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	633b      	str	r3, [r7, #48]	; 0x30

	lBytes = FreeRTOS_recvfrom( xDHCPData.xDHCPSocket, ( void * ) &pucUDPPayload, 0ul, FREERTOS_ZERO_COPY, &xClient, &xClientLength );
 8008fc4:	4bb9      	ldr	r3, [pc, #740]	; (80092ac <prvProcessDHCPReplies+0x2fc>)
 8008fc6:	6a18      	ldr	r0, [r3, #32]
 8008fc8:	f107 011c 	add.w	r1, r7, #28
 8008fcc:	f107 0310 	add.w	r3, r7, #16
 8008fd0:	9301      	str	r3, [sp, #4]
 8008fd2:	f107 0314 	add.w	r3, r7, #20
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	2301      	movs	r3, #1
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f001 ffca 	bl	800af74 <FreeRTOS_recvfrom>
 8008fe0:	62f8      	str	r0, [r7, #44]	; 0x2c

	if( lBytes > 0 )
 8008fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f340 815b 	ble.w	80092a0 <prvProcessDHCPReplies+0x2f0>
	{
		/* Map a DHCP structure onto the received data. */
		pxDHCPMessage = ( DHCPMessage_t * ) ( pucUDPPayload );
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Sanity check. */
		if( ( pxDHCPMessage->ulDHCPCookie == ( uint32_t ) dhcpCOOKIE ) &&
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008ff4:	4aae      	ldr	r2, [pc, #696]	; (80092b0 <prvProcessDHCPReplies+0x300>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	f040 814e 	bne.w	8009298 <prvProcessDHCPReplies+0x2e8>
			( pxDHCPMessage->ucOpcode == ( uint8_t ) dhcpREPLY_OPCODE ) &&
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	781b      	ldrb	r3, [r3, #0]
		if( ( pxDHCPMessage->ulDHCPCookie == ( uint32_t ) dhcpCOOKIE ) &&
 8009000:	2b02      	cmp	r3, #2
 8009002:	f040 8149 	bne.w	8009298 <prvProcessDHCPReplies+0x2e8>
			( pxDHCPMessage->ulTransactionID == FreeRTOS_htonl( xDHCPData.ulTransactionId ) ) )
 8009006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009008:	685a      	ldr	r2, [r3, #4]
 800900a:	4ba8      	ldr	r3, [pc, #672]	; (80092ac <prvProcessDHCPReplies+0x2fc>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	0619      	lsls	r1, r3, #24
 8009010:	4ba6      	ldr	r3, [pc, #664]	; (80092ac <prvProcessDHCPReplies+0x2fc>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	021b      	lsls	r3, r3, #8
 8009016:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800901a:	4319      	orrs	r1, r3
 800901c:	4ba3      	ldr	r3, [pc, #652]	; (80092ac <prvProcessDHCPReplies+0x2fc>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	0a1b      	lsrs	r3, r3, #8
 8009022:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009026:	4319      	orrs	r1, r3
 8009028:	4ba0      	ldr	r3, [pc, #640]	; (80092ac <prvProcessDHCPReplies+0x2fc>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	0e1b      	lsrs	r3, r3, #24
 800902e:	430b      	orrs	r3, r1
			( pxDHCPMessage->ucOpcode == ( uint8_t ) dhcpREPLY_OPCODE ) &&
 8009030:	429a      	cmp	r2, r3
 8009032:	f040 8131 	bne.w	8009298 <prvProcessDHCPReplies+0x2e8>
		{
			if( memcmp( ( void * ) &( pxDHCPMessage->ucClientHardwareAddress ), ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) ) == 0 )
 8009036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009038:	331c      	adds	r3, #28
 800903a:	2206      	movs	r2, #6
 800903c:	499d      	ldr	r1, [pc, #628]	; (80092b4 <prvProcessDHCPReplies+0x304>)
 800903e:	4618      	mov	r0, r3
 8009040:	f007 fddc 	bl	8010bfc <memcmp>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	f040 8126 	bne.w	8009298 <prvProcessDHCPReplies+0x2e8>
			{
				/* None of the essential options have been processed yet. */
				ulProcessed = 0ul;
 800904c:	2300      	movs	r3, #0
 800904e:	63bb      	str	r3, [r7, #56]	; 0x38

				/* Walk through the options until the dhcpOPTION_END_BYTE byte
				is found, taking care not to walk off the end of the options. */
				pucByte = &( pxDHCPMessage->ucFirstOptionByte );
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	33f0      	adds	r3, #240	; 0xf0
 8009054:	63fb      	str	r3, [r7, #60]	; 0x3c
				pucLastByte = &( pucUDPPayload[ lBytes - dhcpMAX_OPTION_LENGTH_OF_INTEREST ] );
 8009056:	69fa      	ldr	r2, [r7, #28]
 8009058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905a:	3b02      	subs	r3, #2
 800905c:	4413      	add	r3, r2
 800905e:	627b      	str	r3, [r7, #36]	; 0x24

				while( pucByte < pucLastByte )
 8009060:	e107      	b.n	8009272 <prvProcessDHCPReplies+0x2c2>
				{
					ucOptionCode = pucByte[ 0 ];
 8009062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					if( ucOptionCode == dhcpOPTION_END_BYTE )
 800906a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800906e:	2bff      	cmp	r3, #255	; 0xff
 8009070:	f000 8105 	beq.w	800927e <prvProcessDHCPReplies+0x2ce>
					{
						/* Ready, the last byte has been seen. */
						break;
					}
					if( ucOptionCode == dhcpZERO_PAD_OPTION_CODE )
 8009074:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009078:	2b00      	cmp	r3, #0
 800907a:	d103      	bne.n	8009084 <prvProcessDHCPReplies+0xd4>
					{
						/* The value zero is used as a pad byte,
						it is not followed by a length byte. */
						pucByte += 1;
 800907c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907e:	3301      	adds	r3, #1
 8009080:	63fb      	str	r3, [r7, #60]	; 0x3c
						continue;
 8009082:	e0f6      	b.n	8009272 <prvProcessDHCPReplies+0x2c2>
					}
					ucLength = pucByte[ 1 ];
 8009084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009086:	785b      	ldrb	r3, [r3, #1]
 8009088:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					pucByte += 2;
 800908c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800908e:	3302      	adds	r3, #2
 8009090:	63fb      	str	r3, [r7, #60]	; 0x3c

					/* In most cases, a 4-byte network-endian parameter follows,
					just get it once here and use later */
					memcpy( ( void * ) &( ulParameter ), ( void * ) pucByte, ( size_t ) sizeof( ulParameter ) );
 8009092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	60fb      	str	r3, [r7, #12]

					switch( ucOptionCode )
 8009098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800909c:	3b01      	subs	r3, #1
 800909e:	2b35      	cmp	r3, #53	; 0x35
 80090a0:	f200 80d3 	bhi.w	800924a <prvProcessDHCPReplies+0x29a>
 80090a4:	a201      	add	r2, pc, #4	; (adr r2, 80090ac <prvProcessDHCPReplies+0xfc>)
 80090a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090aa:	bf00      	nop
 80090ac:	080091af 	.word	0x080091af
 80090b0:	0800924b 	.word	0x0800924b
 80090b4:	080091bf 	.word	0x080091bf
 80090b8:	0800924b 	.word	0x0800924b
 80090bc:	0800924b 	.word	0x0800924b
 80090c0:	080091cf 	.word	0x080091cf
 80090c4:	0800924b 	.word	0x0800924b
 80090c8:	0800924b 	.word	0x0800924b
 80090cc:	0800924b 	.word	0x0800924b
 80090d0:	0800924b 	.word	0x0800924b
 80090d4:	0800924b 	.word	0x0800924b
 80090d8:	0800924b 	.word	0x0800924b
 80090dc:	0800924b 	.word	0x0800924b
 80090e0:	0800924b 	.word	0x0800924b
 80090e4:	0800924b 	.word	0x0800924b
 80090e8:	0800924b 	.word	0x0800924b
 80090ec:	0800924b 	.word	0x0800924b
 80090f0:	0800924b 	.word	0x0800924b
 80090f4:	0800924b 	.word	0x0800924b
 80090f8:	0800924b 	.word	0x0800924b
 80090fc:	0800924b 	.word	0x0800924b
 8009100:	0800924b 	.word	0x0800924b
 8009104:	0800924b 	.word	0x0800924b
 8009108:	0800924b 	.word	0x0800924b
 800910c:	0800924b 	.word	0x0800924b
 8009110:	0800924b 	.word	0x0800924b
 8009114:	0800924b 	.word	0x0800924b
 8009118:	0800924b 	.word	0x0800924b
 800911c:	0800924b 	.word	0x0800924b
 8009120:	0800924b 	.word	0x0800924b
 8009124:	0800924b 	.word	0x0800924b
 8009128:	0800924b 	.word	0x0800924b
 800912c:	0800924b 	.word	0x0800924b
 8009130:	0800924b 	.word	0x0800924b
 8009134:	0800924b 	.word	0x0800924b
 8009138:	0800924b 	.word	0x0800924b
 800913c:	0800924b 	.word	0x0800924b
 8009140:	0800924b 	.word	0x0800924b
 8009144:	0800924b 	.word	0x0800924b
 8009148:	0800924b 	.word	0x0800924b
 800914c:	0800924b 	.word	0x0800924b
 8009150:	0800924b 	.word	0x0800924b
 8009154:	0800924b 	.word	0x0800924b
 8009158:	0800924b 	.word	0x0800924b
 800915c:	0800924b 	.word	0x0800924b
 8009160:	0800924b 	.word	0x0800924b
 8009164:	0800924b 	.word	0x0800924b
 8009168:	0800924b 	.word	0x0800924b
 800916c:	0800924b 	.word	0x0800924b
 8009170:	0800924b 	.word	0x0800924b
 8009174:	08009205 	.word	0x08009205
 8009178:	0800924b 	.word	0x0800924b
 800917c:	08009185 	.word	0x08009185
 8009180:	080091d7 	.word	0x080091d7
					{
						case dhcpMESSAGE_TYPE_OPTION_CODE	:

							if( *pucByte == ( uint8_t ) xExpectedMessageType )
 8009184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009186:	781a      	ldrb	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	b2db      	uxtb	r3, r3
 800918c:	429a      	cmp	r2, r3
 800918e:	d103      	bne.n	8009198 <prvProcessDHCPReplies+0x1e8>
							{
								/* The message type is the message type the
								state machine is expecting. */
								ulProcessed++;
 8009190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009192:	3301      	adds	r3, #1
 8009194:	63bb      	str	r3, [r7, #56]	; 0x38
							}
							else
							{
								/* Don't process other message types. */
							}
							break;
 8009196:	e05a      	b.n	800924e <prvProcessDHCPReplies+0x29e>
							else if( *pucByte == ( uint8_t ) dhcpMESSAGE_TYPE_NACK )
 8009198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	2b06      	cmp	r3, #6
 800919e:	d156      	bne.n	800924e <prvProcessDHCPReplies+0x29e>
								if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_ACK )
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b05      	cmp	r3, #5
 80091a4:	d153      	bne.n	800924e <prvProcessDHCPReplies+0x29e>
									xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 80091a6:	4b41      	ldr	r3, [pc, #260]	; (80092ac <prvProcessDHCPReplies+0x2fc>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	771a      	strb	r2, [r3, #28]
							break;
 80091ac:	e04f      	b.n	800924e <prvProcessDHCPReplies+0x29e>

						case dhcpSUBNET_MASK_OPTION_CODE :

							if( ucLength == sizeof( uint32_t ) )
 80091ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	d14d      	bne.n	8009252 <prvProcessDHCPReplies+0x2a2>
							{
								xNetworkAddressing.ulNetMask = ulParameter;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	4a3f      	ldr	r2, [pc, #252]	; (80092b8 <prvProcessDHCPReplies+0x308>)
 80091ba:	6053      	str	r3, [r2, #4]
							}
							break;
 80091bc:	e049      	b.n	8009252 <prvProcessDHCPReplies+0x2a2>

						case dhcpGATEWAY_OPTION_CODE :

							if( ucLength == sizeof( uint32_t ) )
 80091be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80091c2:	2b04      	cmp	r3, #4
 80091c4:	d147      	bne.n	8009256 <prvProcessDHCPReplies+0x2a6>
							{
								/* ulProcessed is not incremented in this case
								because the gateway is not essential. */
								xNetworkAddressing.ulGatewayAddress = ulParameter;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	4a3b      	ldr	r2, [pc, #236]	; (80092b8 <prvProcessDHCPReplies+0x308>)
 80091ca:	6093      	str	r3, [r2, #8]
							}
							break;
 80091cc:	e043      	b.n	8009256 <prvProcessDHCPReplies+0x2a6>
						case dhcpDNS_SERVER_OPTIONS_CODE :

							/* ulProcessed is not incremented in this case
							because the DNS server is not essential.  Only the
							first DNS server address is taken. */
							xNetworkAddressing.ulDNSServerAddress = ulParameter;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	4a39      	ldr	r2, [pc, #228]	; (80092b8 <prvProcessDHCPReplies+0x308>)
 80091d2:	60d3      	str	r3, [r2, #12]
							break;
 80091d4:	e044      	b.n	8009260 <prvProcessDHCPReplies+0x2b0>

						case dhcpSERVER_IP_ADDRESS_OPTION_CODE :

							if( ucLength == sizeof( uint32_t ) )
 80091d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80091da:	2b04      	cmp	r3, #4
 80091dc:	d13d      	bne.n	800925a <prvProcessDHCPReplies+0x2aa>
							{
								if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_OFFER )
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d106      	bne.n	80091f2 <prvProcessDHCPReplies+0x242>
								{
									/* Offers state the replying server. */
									ulProcessed++;
 80091e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e6:	3301      	adds	r3, #1
 80091e8:	63bb      	str	r3, [r7, #56]	; 0x38
									xDHCPData.ulDHCPServerAddress = ulParameter;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	4a2f      	ldr	r2, [pc, #188]	; (80092ac <prvProcessDHCPReplies+0x2fc>)
 80091ee:	6093      	str	r3, [r2, #8]
									{
										ulProcessed++;
									}
								}
							}
							break;
 80091f0:	e033      	b.n	800925a <prvProcessDHCPReplies+0x2aa>
									if( xDHCPData.ulDHCPServerAddress == ulParameter )
 80091f2:	4b2e      	ldr	r3, [pc, #184]	; (80092ac <prvProcessDHCPReplies+0x2fc>)
 80091f4:	689a      	ldr	r2, [r3, #8]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d12e      	bne.n	800925a <prvProcessDHCPReplies+0x2aa>
										ulProcessed++;
 80091fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fe:	3301      	adds	r3, #1
 8009200:	63bb      	str	r3, [r7, #56]	; 0x38
							break;
 8009202:	e02a      	b.n	800925a <prvProcessDHCPReplies+0x2aa>

						case dhcpLEASE_TIME_OPTION_CODE :

							if( ucLength == sizeof( &( xDHCPData.ulLeaseTime ) ) )
 8009204:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009208:	2b04      	cmp	r3, #4
 800920a:	d128      	bne.n	800925e <prvProcessDHCPReplies+0x2ae>
							{
								/* ulProcessed is not incremented in this case
								because the lease time is not essential. */
								/* The DHCP parameter is in seconds, convert
								to host-endian format. */
								xDHCPData.ulLeaseTime = FreeRTOS_ntohl( ulParameter );
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	061a      	lsls	r2, r3, #24
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	021b      	lsls	r3, r3, #8
 8009214:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009218:	431a      	orrs	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	0a1b      	lsrs	r3, r3, #8
 800921e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009222:	431a      	orrs	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	0e1b      	lsrs	r3, r3, #24
 8009228:	4313      	orrs	r3, r2
 800922a:	4a20      	ldr	r2, [pc, #128]	; (80092ac <prvProcessDHCPReplies+0x2fc>)
 800922c:	60d3      	str	r3, [r2, #12]

								/* Divide the lease time by two to ensure a
								renew request is sent before the lease actually
								expires. */
								xDHCPData.ulLeaseTime >>= 1UL;
 800922e:	4b1f      	ldr	r3, [pc, #124]	; (80092ac <prvProcessDHCPReplies+0x2fc>)
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	085b      	lsrs	r3, r3, #1
 8009234:	4a1d      	ldr	r2, [pc, #116]	; (80092ac <prvProcessDHCPReplies+0x2fc>)
 8009236:	60d3      	str	r3, [r2, #12]

								/* Multiply with configTICK_RATE_HZ to get clock
								ticks. */
								xDHCPData.ulLeaseTime = configTICK_RATE_HZ * xDHCPData.ulLeaseTime;
 8009238:	4b1c      	ldr	r3, [pc, #112]	; (80092ac <prvProcessDHCPReplies+0x2fc>)
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009240:	fb02 f303 	mul.w	r3, r2, r3
 8009244:	4a19      	ldr	r2, [pc, #100]	; (80092ac <prvProcessDHCPReplies+0x2fc>)
 8009246:	60d3      	str	r3, [r2, #12]
							}
							break;
 8009248:	e009      	b.n	800925e <prvProcessDHCPReplies+0x2ae>

						default :

							/* Not interested in this field. */

							break;
 800924a:	bf00      	nop
 800924c:	e008      	b.n	8009260 <prvProcessDHCPReplies+0x2b0>
							break;
 800924e:	bf00      	nop
 8009250:	e006      	b.n	8009260 <prvProcessDHCPReplies+0x2b0>
							break;
 8009252:	bf00      	nop
 8009254:	e004      	b.n	8009260 <prvProcessDHCPReplies+0x2b0>
							break;
 8009256:	bf00      	nop
 8009258:	e002      	b.n	8009260 <prvProcessDHCPReplies+0x2b0>
							break;
 800925a:	bf00      	nop
 800925c:	e000      	b.n	8009260 <prvProcessDHCPReplies+0x2b0>
							break;
 800925e:	bf00      	nop
					}

					/* Jump over the data to find the next option code. */
					if( ucLength == 0u )
 8009260:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00c      	beq.n	8009282 <prvProcessDHCPReplies+0x2d2>
					{
						break;
					}
					else
					{
						pucByte += ucLength;
 8009268:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800926c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800926e:	4413      	add	r3, r2
 8009270:	63fb      	str	r3, [r7, #60]	; 0x3c
				while( pucByte < pucLastByte )
 8009272:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	429a      	cmp	r2, r3
 8009278:	f4ff aef3 	bcc.w	8009062 <prvProcessDHCPReplies+0xb2>
 800927c:	e002      	b.n	8009284 <prvProcessDHCPReplies+0x2d4>
						break;
 800927e:	bf00      	nop
 8009280:	e000      	b.n	8009284 <prvProcessDHCPReplies+0x2d4>
						break;
 8009282:	bf00      	nop
					}
				}

				/* Were all the mandatory options received? */
				if( ulProcessed >= ulMandatoryOptions )
 8009284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	429a      	cmp	r2, r3
 800928a:	d305      	bcc.n	8009298 <prvProcessDHCPReplies+0x2e8>
				{
					/* HT:endian: used to be network order */
					xDHCPData.ulOfferedIPAddress = pxDHCPMessage->ulYourIPAddress_yiaddr;
 800928c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	4a06      	ldr	r2, [pc, #24]	; (80092ac <prvProcessDHCPReplies+0x2fc>)
 8009292:	6053      	str	r3, [r2, #4]
					FreeRTOS_printf( ( "vDHCPProcess: offer %lxip\n", FreeRTOS_ntohl( xDHCPData.ulOfferedIPAddress ) ) );
					xReturn = pdPASS;
 8009294:	2301      	movs	r3, #1
 8009296:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}

		FreeRTOS_ReleaseUDPPayloadBuffer( ( void * ) pucUDPPayload );
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	4618      	mov	r0, r3
 800929c:	f001 f80e 	bl	800a2bc <FreeRTOS_ReleaseUDPPayloadBuffer>
	}

	return xReturn;
 80092a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3740      	adds	r7, #64	; 0x40
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	200040f4 	.word	0x200040f4
 80092b0:	63538263 	.word	0x63538263
 80092b4:	200000a0 	.word	0x200000a0
 80092b8:	20004198 	.word	0x20004198

080092bc <prvCreatePartDHCPMessage>:
/*-----------------------------------------------------------*/

static uint8_t *prvCreatePartDHCPMessage( struct freertos_sockaddr *pxAddress, BaseType_t xOpcode, const uint8_t * const pucOptionsArray, size_t *pxOptionsArraySize )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b08a      	sub	sp, #40	; 0x28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
 80092c8:	603b      	str	r3, [r7, #0]
DHCPMessage_t *pxDHCPMessage;
size_t xRequiredBufferSize = sizeof( DHCPMessage_t ) + *pxOptionsArraySize;
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	33f1      	adds	r3, #241	; 0xf1
 80092d0:	627b      	str	r3, [r7, #36]	; 0x24
uint8_t *pucUDPPayloadBuffer;

#if( ipconfigDHCP_REGISTER_HOSTNAME == 1 )
	const char *pucHostName = pcApplicationHostnameHook ();
 80092d2:	f006 fd9b 	bl	800fe0c <pcApplicationHostnameHook>
 80092d6:	6238      	str	r0, [r7, #32]
	size_t xNameLength = strlen( pucHostName );
 80092d8:	6a38      	ldr	r0, [r7, #32]
 80092da:	f7f6 ff81 	bl	80001e0 <strlen>
 80092de:	61f8      	str	r0, [r7, #28]
	uint8_t *pucPtr;

	xRequiredBufferSize += ( 2 + xNameLength );
 80092e0:	69fa      	ldr	r2, [r7, #28]
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	4413      	add	r3, r2
 80092e6:	3302      	adds	r3, #2
 80092e8:	627b      	str	r3, [r7, #36]	; 0x24
	/* Get a buffer.  This uses a maximum delay, but the delay will be capped
	to ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS so the return value still needs to
	be test. */
	do
	{
	} while( ( pucUDPPayloadBuffer = ( uint8_t * ) FreeRTOS_GetUDPPayloadBuffer( xRequiredBufferSize, portMAX_DELAY ) ) == NULL );
 80092ea:	f04f 31ff 	mov.w	r1, #4294967295
 80092ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092f0:	f000 ff78 	bl	800a1e4 <FreeRTOS_GetUDPPayloadBuffer>
 80092f4:	61b8      	str	r0, [r7, #24]
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d0f6      	beq.n	80092ea <prvCreatePartDHCPMessage+0x2e>

	pxDHCPMessage = ( DHCPMessage_t * ) pucUDPPayloadBuffer;
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	617b      	str	r3, [r7, #20]

	/* Most fields need to be zero. */
	memset( ( void * ) pxDHCPMessage, 0x00, sizeof( DHCPMessage_t ) );
 8009300:	22f1      	movs	r2, #241	; 0xf1
 8009302:	2100      	movs	r1, #0
 8009304:	6978      	ldr	r0, [r7, #20]
 8009306:	f007 fcad 	bl	8010c64 <memset>

	/* Create the message. */
	pxDHCPMessage->ucOpcode = ( uint8_t ) xOpcode;
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	b2da      	uxtb	r2, r3
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	701a      	strb	r2, [r3, #0]
	pxDHCPMessage->ucAddressType = ( uint8_t ) dhcpADDRESS_TYPE_ETHERNET;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2201      	movs	r2, #1
 8009316:	705a      	strb	r2, [r3, #1]
	pxDHCPMessage->ucAddressLength = ( uint8_t ) dhcpETHERNET_ADDRESS_LENGTH;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	2206      	movs	r2, #6
 800931c:	709a      	strb	r2, [r3, #2]

	/* ulTransactionID doesn't really need a htonl() translation, but when DHCP
	times out, it is nicer to see an increasing number in this ID field */
	pxDHCPMessage->ulTransactionID = FreeRTOS_htonl( xDHCPData.ulTransactionId );
 800931e:	4b40      	ldr	r3, [pc, #256]	; (8009420 <prvCreatePartDHCPMessage+0x164>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	061a      	lsls	r2, r3, #24
 8009324:	4b3e      	ldr	r3, [pc, #248]	; (8009420 <prvCreatePartDHCPMessage+0x164>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	021b      	lsls	r3, r3, #8
 800932a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800932e:	431a      	orrs	r2, r3
 8009330:	4b3b      	ldr	r3, [pc, #236]	; (8009420 <prvCreatePartDHCPMessage+0x164>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	0a1b      	lsrs	r3, r3, #8
 8009336:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800933a:	431a      	orrs	r2, r3
 800933c:	4b38      	ldr	r3, [pc, #224]	; (8009420 <prvCreatePartDHCPMessage+0x164>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	0e1b      	lsrs	r3, r3, #24
 8009342:	431a      	orrs	r2, r3
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	605a      	str	r2, [r3, #4]
	pxDHCPMessage->ulDHCPCookie = ( uint32_t ) dhcpCOOKIE;
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	2200      	movs	r2, #0
 800934c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8009350:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8009354:	2200      	movs	r2, #0
 8009356:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800935a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800935e:	2200      	movs	r2, #0
 8009360:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8009364:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8009368:	2200      	movs	r2, #0
 800936a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800936e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
	if( xDHCPData.xUseBroadcast != pdFALSE )
 8009372:	4b2b      	ldr	r3, [pc, #172]	; (8009420 <prvCreatePartDHCPMessage+0x164>)
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d007      	beq.n	800938a <prvCreatePartDHCPMessage+0xce>
	{
		pxDHCPMessage->usFlags = ( uint16_t ) dhcpBROADCAST;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	2200      	movs	r2, #0
 800937e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009382:	729a      	strb	r2, [r3, #10]
 8009384:	2200      	movs	r2, #0
 8009386:	72da      	strb	r2, [r3, #11]
 8009388:	e004      	b.n	8009394 <prvCreatePartDHCPMessage+0xd8>
	}
	else
	{
		pxDHCPMessage->usFlags = 0u;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2200      	movs	r2, #0
 800938e:	729a      	strb	r2, [r3, #10]
 8009390:	2200      	movs	r2, #0
 8009392:	72da      	strb	r2, [r3, #11]
	}

	memcpy( ( void * ) &( pxDHCPMessage->ucClientHardwareAddress[ 0 ] ), ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	331c      	adds	r3, #28
 8009398:	2206      	movs	r2, #6
 800939a:	4922      	ldr	r1, [pc, #136]	; (8009424 <prvCreatePartDHCPMessage+0x168>)
 800939c:	4618      	mov	r0, r3
 800939e:	f007 fc3c 	bl	8010c1a <memcpy>

	/* Copy in the const part of the options options. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET ] ), ( void * ) pucOptionsArray, *pxOptionsArraySize );
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	461a      	mov	r2, r3
 80093ae:	6879      	ldr	r1, [r7, #4]
 80093b0:	f007 fc33 	bl	8010c1a <memcpy>
	{
		/* With this option, the hostname can be registered as well which makes
		it easier to lookup a device in a router's list of DHCP clients. */

		/* Point to where the OPTION_END was stored to add data. */
		pucPtr = &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + ( *pxOptionsArraySize - 1 ) ] );
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	33ef      	adds	r3, #239	; 0xef
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	4413      	add	r3, r2
 80093be:	613b      	str	r3, [r7, #16]
		pucPtr[ 0 ] = dhcpDNS_HOSTNAME_OPTIONS_CODE;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	220c      	movs	r2, #12
 80093c4:	701a      	strb	r2, [r3, #0]
		pucPtr[ 1 ] = ( uint8_t ) xNameLength;
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	3301      	adds	r3, #1
 80093ca:	69fa      	ldr	r2, [r7, #28]
 80093cc:	b2d2      	uxtb	r2, r2
 80093ce:	701a      	strb	r2, [r3, #0]
		memcpy( ( void *) ( pucPtr + 2 ), pucHostName, xNameLength );
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	3302      	adds	r3, #2
 80093d4:	69fa      	ldr	r2, [r7, #28]
 80093d6:	6a39      	ldr	r1, [r7, #32]
 80093d8:	4618      	mov	r0, r3
 80093da:	f007 fc1e 	bl	8010c1a <memcpy>
		pucPtr[ 2 + xNameLength ] = dhcpOPTION_END_BYTE;
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	3302      	adds	r3, #2
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	4413      	add	r3, r2
 80093e6:	22ff      	movs	r2, #255	; 0xff
 80093e8:	701a      	strb	r2, [r3, #0]
		*pxOptionsArraySize += ( 2 + xNameLength );
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	4413      	add	r3, r2
 80093f2:	1c9a      	adds	r2, r3, #2
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	601a      	str	r2, [r3, #0]
	}
	#endif

	/* Map in the client identifier. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpCLIENT_IDENTIFIER_OFFSET ] ),
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	33f5      	adds	r3, #245	; 0xf5
 80093fc:	2206      	movs	r2, #6
 80093fe:	4909      	ldr	r1, [pc, #36]	; (8009424 <prvCreatePartDHCPMessage+0x168>)
 8009400:	4618      	mov	r0, r3
 8009402:	f007 fc0a 	bl	8010c1a <memcpy>
		( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );

	/* Set the addressing. */
	pxAddress->sin_addr = ipBROADCAST_IP_ADDRESS;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f04f 32ff 	mov.w	r2, #4294967295
 800940c:	605a      	str	r2, [r3, #4]
	pxAddress->sin_port = ( uint16_t ) dhcpSERVER_PORT;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f44f 4286 	mov.w	r2, #17152	; 0x4300
 8009414:	805a      	strh	r2, [r3, #2]

	return pucUDPPayloadBuffer;
 8009416:	69bb      	ldr	r3, [r7, #24]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3728      	adds	r7, #40	; 0x28
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	200040f4 	.word	0x200040f4
 8009424:	200000a0 	.word	0x200000a0

08009428 <prvSendDHCPRequest>:
/*-----------------------------------------------------------*/

static void prvSendDHCPRequest( void )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af02      	add	r7, sp, #8
	dhcpCLIENT_IDENTIFIER_OPTION_CODE, 6, 0, 0, 0, 0, 0, 0,			/* Client identifier. */
	dhcpREQUEST_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,				/* The IP address being requested. */
	dhcpSERVER_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,				/* The IP address of the DHCP server. */
	dhcpOPTION_END_BYTE
};
size_t xOptionsLength = sizeof( ucDHCPRequestOptions );
 800942e:	2318      	movs	r3, #24
 8009430:	603b      	str	r3, [r7, #0]

	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress, dhcpREQUEST_OPCODE, ucDHCPRequestOptions, &xOptionsLength );
 8009432:	463b      	mov	r3, r7
 8009434:	1d38      	adds	r0, r7, #4
 8009436:	4a13      	ldr	r2, [pc, #76]	; (8009484 <prvSendDHCPRequest+0x5c>)
 8009438:	2101      	movs	r1, #1
 800943a:	f7ff ff3f 	bl	80092bc <prvCreatePartDHCPMessage>
 800943e:	60f8      	str	r0, [r7, #12]

	/* Copy in the IP address being requested. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpREQUESTED_IP_ADDRESS_OFFSET ] ),
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	33fd      	adds	r3, #253	; 0xfd
 8009444:	4a10      	ldr	r2, [pc, #64]	; (8009488 <prvSendDHCPRequest+0x60>)
 8009446:	6852      	ldr	r2, [r2, #4]
 8009448:	601a      	str	r2, [r3, #0]
		( void * ) &( xDHCPData.ulOfferedIPAddress ), sizeof( xDHCPData.ulOfferedIPAddress ) );

	/* Copy in the address of the DHCP server being used. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpDHCP_SERVER_IP_ADDRESS_OFFSET ] ),
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f203 1303 	addw	r3, r3, #259	; 0x103
 8009450:	4a0d      	ldr	r2, [pc, #52]	; (8009488 <prvSendDHCPRequest+0x60>)
 8009452:	6892      	ldr	r2, [r2, #8]
 8009454:	601a      	str	r2, [r3, #0]
		( void * ) &( xDHCPData.ulDHCPServerAddress ), sizeof( xDHCPData.ulDHCPServerAddress ) );

	FreeRTOS_debug_printf( ( "vDHCPProcess: reply %lxip\n", FreeRTOS_ntohl( xDHCPData.ulOfferedIPAddress ) ) );
	iptraceSENDING_DHCP_REQUEST();

	if( FreeRTOS_sendto( xDHCPData.xDHCPSocket, pucUDPPayloadBuffer, ( sizeof( DHCPMessage_t ) + xOptionsLength ), FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
 8009456:	4b0c      	ldr	r3, [pc, #48]	; (8009488 <prvSendDHCPRequest+0x60>)
 8009458:	6a18      	ldr	r0, [r3, #32]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	f103 02f1 	add.w	r2, r3, #241	; 0xf1
 8009460:	2308      	movs	r3, #8
 8009462:	9301      	str	r3, [sp, #4]
 8009464:	1d3b      	adds	r3, r7, #4
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	2301      	movs	r3, #1
 800946a:	68f9      	ldr	r1, [r7, #12]
 800946c:	f001 fe4f 	bl	800b10e <FreeRTOS_sendto>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d102      	bne.n	800947c <prvSendDHCPRequest+0x54>
	{
		/* The packet was not successfully queued for sending and must be
		returned to the stack. */
		FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 ff20 	bl	800a2bc <FreeRTOS_ReleaseUDPPayloadBuffer>
	}
}
 800947c:	bf00      	nop
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	08011074 	.word	0x08011074
 8009488:	200040f4 	.word	0x200040f4

0800948c <prvSendDHCPDiscover>:
/*-----------------------------------------------------------*/

static void prvSendDHCPDiscover( void )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af02      	add	r7, sp, #8
	dhcpMESSAGE_TYPE_OPTION_CODE, 1, dhcpMESSAGE_TYPE_DISCOVER,					/* Message type option. */
	dhcpCLIENT_IDENTIFIER_OPTION_CODE, 6, 0, 0, 0, 0, 0, 0,						/* Client identifier. */
	dhcpPARAMETER_REQUEST_OPTION_CODE, 3, dhcpSUBNET_MASK_OPTION_CODE, dhcpGATEWAY_OPTION_CODE, dhcpDNS_SERVER_OPTIONS_CODE,	/* Parameter request option. */
	dhcpOPTION_END_BYTE
};
size_t xOptionsLength = sizeof( ucDHCPDiscoverOptions );
 8009492:	2311      	movs	r3, #17
 8009494:	603b      	str	r3, [r7, #0]

	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress, dhcpREQUEST_OPCODE, ucDHCPDiscoverOptions, &xOptionsLength );
 8009496:	463b      	mov	r3, r7
 8009498:	1d38      	adds	r0, r7, #4
 800949a:	4a0e      	ldr	r2, [pc, #56]	; (80094d4 <prvSendDHCPDiscover+0x48>)
 800949c:	2101      	movs	r1, #1
 800949e:	f7ff ff0d 	bl	80092bc <prvCreatePartDHCPMessage>
 80094a2:	60f8      	str	r0, [r7, #12]

	FreeRTOS_debug_printf( ( "vDHCPProcess: discover\n" ) );
	iptraceSENDING_DHCP_DISCOVER();

	if( FreeRTOS_sendto( xDHCPData.xDHCPSocket, pucUDPPayloadBuffer, ( sizeof( DHCPMessage_t ) + xOptionsLength ), FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
 80094a4:	4b0c      	ldr	r3, [pc, #48]	; (80094d8 <prvSendDHCPDiscover+0x4c>)
 80094a6:	6a18      	ldr	r0, [r3, #32]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	f103 02f1 	add.w	r2, r3, #241	; 0xf1
 80094ae:	2308      	movs	r3, #8
 80094b0:	9301      	str	r3, [sp, #4]
 80094b2:	1d3b      	adds	r3, r7, #4
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	2301      	movs	r3, #1
 80094b8:	68f9      	ldr	r1, [r7, #12]
 80094ba:	f001 fe28 	bl	800b10e <FreeRTOS_sendto>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d102      	bne.n	80094ca <prvSendDHCPDiscover+0x3e>
	{
		/* The packet was not successfully queued for sending and must be
		returned to the stack. */
		FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f000 fef9 	bl	800a2bc <FreeRTOS_ReleaseUDPPayloadBuffer>
	}
}
 80094ca:	bf00      	nop
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	0801108c 	.word	0x0801108c
 80094d8:	200040f4 	.word	0x200040f4

080094dc <usChar2u16>:
			( ( ( uint32_t )apChr[3] ) );
}

static portINLINE uint16_t usChar2u16 (const uint8_t *apChr);
static portINLINE uint16_t usChar2u16 (const uint8_t *apChr)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
	return ( uint16_t )
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	021b      	lsls	r3, r3, #8
 80094ec:	b29a      	uxth	r2, r3
			  ( ( ( uint32_t )apChr[1] ) ) );
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3301      	adds	r3, #1
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	b29b      	uxth	r3, r3
	return ( uint16_t )
 80094f6:	4313      	orrs	r3, r2
 80094f8:	b29b      	uxth	r3, r3
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
	...

08009508 <vDNSInitialise>:
	/*-----------------------------------------------------------*/

	/* Initialise the list of call-back structures. */
	void vDNSInitialise( void );
	void vDNSInitialise( void )
	{
 8009508:	b580      	push	{r7, lr}
 800950a:	af00      	add	r7, sp, #0
		vListInitialise( &xCallbackList );
 800950c:	4802      	ldr	r0, [pc, #8]	; (8009518 <vDNSInitialise+0x10>)
 800950e:	f7fc fc74 	bl	8005dfa <vListInitialise>
	}
 8009512:	bf00      	nop
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20004178 	.word	0x20004178

0800951c <vDNSCheckCallBack>:
	As soon as the list hase become empty, the DNS timer will be stopped
	In case pvSearchID is supplied, the user wants to cancel a DNS request
	*/
	void vDNSCheckCallBack( void *pvSearchID );
	void vDNSCheckCallBack( void *pvSearchID )
	{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
	const ListItem_t *pxIterator;
	const MiniListItem_t* xEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xCallbackList );
 8009524:	4b25      	ldr	r3, [pc, #148]	; (80095bc <vDNSCheckCallBack+0xa0>)
 8009526:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8009528:	f7fe f8e6 	bl	80076f8 <vTaskSuspendAll>
		{
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	617b      	str	r3, [r7, #20]
 8009532:	e031      	b.n	8009598 <vDNSCheckCallBack+0x7c>
				 pxIterator != ( const ListItem_t * ) xEnd;
				  )
			{
				DNSCallback_t *pxCallback = ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	60fb      	str	r3, [r7, #12]
				/* Move to the next item because we might remove this item */
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	617b      	str	r3, [r7, #20]
				if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00d      	beq.n	8009562 <vDNSCheckCallBack+0x46>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	691a      	ldr	r2, [r3, #16]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	429a      	cmp	r2, r3
 800954e:	d108      	bne.n	8009562 <vDNSCheckCallBack+0x46>
				{
					uxListRemove( &pxCallback->xListItem );
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	3314      	adds	r3, #20
 8009554:	4618      	mov	r0, r3
 8009556:	f7fc fcda 	bl	8005f0e <uxListRemove>
					vPortFree( pxCallback );
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f7fd f802 	bl	8006564 <vPortFree>
 8009560:	e01a      	b.n	8009598 <vDNSCheckCallBack+0x7c>
				}
				else if( xTaskCheckForTimeOut( &pxCallback->xTimeoutState, &pxCallback->xRemaningTime ) != pdFALSE )
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	3308      	adds	r3, #8
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	4611      	mov	r1, r2
 800956a:	4618      	mov	r0, r3
 800956c:	f7fe fbf0 	bl	8007d50 <xTaskCheckForTimeOut>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d010      	beq.n	8009598 <vDNSCheckCallBack+0x7c>
				{
					pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0 );
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	f102 0028 	add.w	r0, r2, #40	; 0x28
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	6911      	ldr	r1, [r2, #16]
 8009584:	2200      	movs	r2, #0
 8009586:	4798      	blx	r3
					uxListRemove( &pxCallback->xListItem );
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	3314      	adds	r3, #20
 800958c:	4618      	mov	r0, r3
 800958e:	f7fc fcbe 	bl	8005f0e <uxListRemove>
					vPortFree( ( void * ) pxCallback );
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f7fc ffe6 	bl	8006564 <vPortFree>
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8009598:	697a      	ldr	r2, [r7, #20]
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	429a      	cmp	r2, r3
 800959e:	d1c9      	bne.n	8009534 <vDNSCheckCallBack+0x18>
				}
			}
		}
		xTaskResumeAll();
 80095a0:	f7fe f8b8 	bl	8007714 <xTaskResumeAll>

		if( listLIST_IS_EMPTY( &xCallbackList ) )
 80095a4:	4b06      	ldr	r3, [pc, #24]	; (80095c0 <vDNSCheckCallBack+0xa4>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d102      	bne.n	80095b2 <vDNSCheckCallBack+0x96>
		{
			vIPSetDnsTimerEnableState( pdFALSE );
 80095ac:	2000      	movs	r0, #0
 80095ae:	f001 fab1 	bl	800ab14 <vIPSetDnsTimerEnableState>
		}
	}
 80095b2:	bf00      	nop
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	20004180 	.word	0x20004180
 80095c0:	20004178 	.word	0x20004178

080095c4 <vDNSDoCallback>:

	/* A DNS reply was received, see if there is any matching entry and
	call the handler. */
	static void vDNSDoCallback( TickType_t xIdentifier, const char *pcName, uint32_t ulIPAddress );
	static void vDNSDoCallback( TickType_t xIdentifier, const char *pcName, uint32_t ulIPAddress )
	{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b088      	sub	sp, #32
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
		const ListItem_t *pxIterator;
		const MiniListItem_t* xEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xCallbackList );
 80095d0:	4b1a      	ldr	r3, [pc, #104]	; (800963c <vDNSDoCallback+0x78>)
 80095d2:	61bb      	str	r3, [r7, #24]

		vTaskSuspendAll();
 80095d4:	f7fe f890 	bl	80076f8 <vTaskSuspendAll>
		{
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	61fb      	str	r3, [r7, #28]
 80095de:	e021      	b.n	8009624 <vDNSDoCallback+0x60>
				 pxIterator != ( const ListItem_t * ) xEnd;
				 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
			{
				if( listGET_LIST_ITEM_VALUE( pxIterator ) == xIdentifier )
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d119      	bne.n	800961e <vDNSDoCallback+0x5a>
				{
					DNSCallback_t *pxCallback = ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	617b      	str	r3, [r7, #20]
					pxCallback->pCallbackFunction( pcName, pxCallback->pvSearchID, ulIPAddress );
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	6911      	ldr	r1, [r2, #16]
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	68b8      	ldr	r0, [r7, #8]
 80095fc:	4798      	blx	r3
					uxListRemove( &pxCallback->xListItem );
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	3314      	adds	r3, #20
 8009602:	4618      	mov	r0, r3
 8009604:	f7fc fc83 	bl	8005f0e <uxListRemove>
					vPortFree( pxCallback );
 8009608:	6978      	ldr	r0, [r7, #20]
 800960a:	f7fc ffab 	bl	8006564 <vPortFree>
					if( listLIST_IS_EMPTY( &xCallbackList ) )
 800960e:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <vDNSDoCallback+0x7c>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10b      	bne.n	800962e <vDNSDoCallback+0x6a>
					{
						vIPSetDnsTimerEnableState( pdFALSE );
 8009616:	2000      	movs	r0, #0
 8009618:	f001 fa7c 	bl	800ab14 <vIPSetDnsTimerEnableState>
					}
					break;
 800961c:	e007      	b.n	800962e <vDNSDoCallback+0x6a>
				 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	61fb      	str	r3, [r7, #28]
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8009624:	69fa      	ldr	r2, [r7, #28]
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	429a      	cmp	r2, r3
 800962a:	d1d9      	bne.n	80095e0 <vDNSDoCallback+0x1c>
 800962c:	e000      	b.n	8009630 <vDNSDoCallback+0x6c>
					break;
 800962e:	bf00      	nop
				}
			}
		}
		xTaskResumeAll();
 8009630:	f7fe f870 	bl	8007714 <xTaskResumeAll>
	}
 8009634:	bf00      	nop
 8009636:	3720      	adds	r7, #32
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	20004180 	.word	0x20004180
 8009640:	20004178 	.word	0x20004178

08009644 <prvReadNameField>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DNS_CACHE == 1 )

	static uint8_t *prvReadNameField( uint8_t *pucByte, char *pcName, BaseType_t xLen )
	{
 8009644:	b480      	push	{r7}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
	BaseType_t xNameLen = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	617b      	str	r3, [r7, #20]
		/* Determine if the name is the fully coded name, or an offset to the name
		elsewhere in the message. */
		if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800965c:	2bc0      	cmp	r3, #192	; 0xc0
 800965e:	d12f      	bne.n	80096c0 <prvReadNameField+0x7c>
		{
			/* Jump over the two byte offset. */
			pucByte += sizeof( uint16_t );
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	3302      	adds	r3, #2
 8009664:	60fb      	str	r3, [r7, #12]
 8009666:	e032      	b.n	80096ce <prvReadNameField+0x8a>
		{
			/* pucByte points to the full name.  Walk over the string. */
			while( *pucByte != 0x00 )
			{
				BaseType_t xCount;
				if( xNameLen && xNameLen < xLen - 1 )
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00c      	beq.n	8009688 <prvReadNameField+0x44>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	1e5a      	subs	r2, r3, #1
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	429a      	cmp	r2, r3
 8009676:	dd07      	ble.n	8009688 <prvReadNameField+0x44>
					pcName[xNameLen++] = '.';
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	1c5a      	adds	r2, r3, #1
 800967c:	617a      	str	r2, [r7, #20]
 800967e:	461a      	mov	r2, r3
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	4413      	add	r3, r2
 8009684:	222e      	movs	r2, #46	; 0x2e
 8009686:	701a      	strb	r2, [r3, #0]
				for( xCount = *(pucByte++); xCount--; pucByte++ )
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	60fa      	str	r2, [r7, #12]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	613b      	str	r3, [r7, #16]
 8009692:	e010      	b.n	80096b6 <prvReadNameField+0x72>
				{
					if( xNameLen < xLen - 1 )
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	1e5a      	subs	r2, r3, #1
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	429a      	cmp	r2, r3
 800969c:	dd08      	ble.n	80096b0 <prvReadNameField+0x6c>
						pcName[xNameLen++] = *( ( char * ) pucByte );
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	1c5a      	adds	r2, r3, #1
 80096a2:	617a      	str	r2, [r7, #20]
 80096a4:	461a      	mov	r2, r3
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	4413      	add	r3, r2
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	7812      	ldrb	r2, [r2, #0]
 80096ae:	701a      	strb	r2, [r3, #0]
				for( xCount = *(pucByte++); xCount--; pucByte++ )
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	3301      	adds	r3, #1
 80096b4:	60fb      	str	r3, [r7, #12]
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	1e5a      	subs	r2, r3, #1
 80096ba:	613a      	str	r2, [r7, #16]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1e9      	bne.n	8009694 <prvReadNameField+0x50>
			while( *pucByte != 0x00 )
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1cf      	bne.n	8009668 <prvReadNameField+0x24>
				}
			}

			pucByte++;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	3301      	adds	r3, #1
 80096cc:	60fb      	str	r3, [r7, #12]
		}

		return pucByte;
 80096ce:	68fb      	ldr	r3, [r7, #12]
	}
 80096d0:	4618      	mov	r0, r3
 80096d2:	371c      	adds	r7, #28
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <prvSkipNameField>:
#endif	/* ipconfigUSE_DNS_CACHE == 1 */
/*-----------------------------------------------------------*/

static uint8_t *prvSkipNameField( uint8_t *pucByte )
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
	/* Determine if the name is the fully coded name, or an offset to the name
	elsewhere in the message. */
	if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80096ec:	2bc0      	cmp	r3, #192	; 0xc0
 80096ee:	d109      	bne.n	8009704 <prvSkipNameField+0x28>
	{
		/* Jump over the two byte offset. */
		pucByte += sizeof( uint16_t );
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	3302      	adds	r3, #2
 80096f4:	607b      	str	r3, [r7, #4]
 80096f6:	e00c      	b.n	8009712 <prvSkipNameField+0x36>
		/* pucByte points to the full name.  Walk over the string. */
		while( *pucByte != 0x00 )
		{
			/* The number of bytes to jump for each name section is stored in the byte
			before the name section. */
			pucByte += ( *pucByte + 1 );
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	3301      	adds	r3, #1
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	4413      	add	r3, r2
 8009702:	607b      	str	r3, [r7, #4]
		while( *pucByte != 0x00 )
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1f5      	bne.n	80096f8 <prvSkipNameField+0x1c>
		}

		pucByte++;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	3301      	adds	r3, #1
 8009710:	607b      	str	r3, [r7, #4]
	}

	return pucByte;
 8009712:	687b      	ldr	r3, [r7, #4]
}
 8009714:	4618      	mov	r0, r3
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <ulDNSHandlePacket>:
/*-----------------------------------------------------------*/

uint32_t ulDNSHandlePacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
uint8_t *pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + sizeof( UDPPacket_t );
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	332a      	adds	r3, #42	; 0x2a
 800972e:	60fb      	str	r3, [r7, #12]
DNSMessage_t *pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	60bb      	str	r3, [r7, #8]

	prvParseDNSReply( pucUDPPayloadBuffer, ( uint32_t ) pxDNSMessageHeader->usIdentifier );
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	881b      	ldrh	r3, [r3, #0]
 8009738:	b29b      	uxth	r3, r3
 800973a:	4619      	mov	r1, r3
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f000 f805 	bl	800974c <prvParseDNSReply>

	/* The packet was not consumed. */
	return pdFAIL;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <prvParseDNSReply>:

#endif /* ipconfigUSE_NBNS */
/*-----------------------------------------------------------*/

static uint32_t prvParseDNSReply( uint8_t *pucUDPPayloadBuffer, TickType_t xIdentifier )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b0b2      	sub	sp, #200	; 0xc8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
DNSMessage_t *pxDNSMessageHeader;
uint32_t ulIPAddress = 0UL;
 8009756:	2300      	movs	r3, #0
 8009758:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#if( ipconfigUSE_LLMNR == 1 )
	char *pcRequestedName = NULL;
 800975c:	2300      	movs	r3, #0
 800975e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
#endif
uint8_t *pucByte;
uint16_t x, usDataLength, usQuestions;
#if( ipconfigUSE_LLMNR == 1 )
	uint16_t usType = 0, usClass = 0;
 8009762:	2300      	movs	r3, #0
 8009764:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8009768:	2300      	movs	r3, #0
 800976a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
#endif
#if( ipconfigUSE_DNS_CACHE == 1 )
	char pcName[128] = ""; /*_RB_ What is the significance of 128?  Probably too big to go on the stack for a small MCU but don't know how else it could be made re-entrant.  Might be necessary. */
 800976e:	2300      	movs	r3, #0
 8009770:	60fb      	str	r3, [r7, #12]
 8009772:	f107 0310 	add.w	r3, r7, #16
 8009776:	227c      	movs	r2, #124	; 0x7c
 8009778:	2100      	movs	r1, #0
 800977a:	4618      	mov	r0, r3
 800977c:	f007 fa72 	bl	8010c64 <memset>
#endif

	pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	if( pxDNSMessageHeader->usIdentifier == ( uint16_t ) xIdentifier )
 8009786:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	b29a      	uxth	r2, r3
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	b29b      	uxth	r3, r3
 8009792:	429a      	cmp	r2, r3
 8009794:	f040 8221 	bne.w	8009bda <prvParseDNSReply+0x48e>
	{
		/* Start at the first byte after the header. */
		pucByte = pucUDPPayloadBuffer + sizeof( DNSMessage_t );
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	330c      	adds	r3, #12
 800979c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Skip any question records. */
		usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 80097a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097a4:	889b      	ldrh	r3, [r3, #4]
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	021b      	lsls	r3, r3, #8
 80097aa:	b21a      	sxth	r2, r3
 80097ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097b0:	889b      	ldrh	r3, [r3, #4]
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	0a1b      	lsrs	r3, r3, #8
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	b21b      	sxth	r3, r3
 80097ba:	4313      	orrs	r3, r2
 80097bc:	b21b      	sxth	r3, r3
 80097be:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		for( x = 0; x < usQuestions; x++ )
 80097c2:	2300      	movs	r3, #0
 80097c4:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 80097c8:	e036      	b.n	8009838 <prvParseDNSReply+0xec>
		{
			#if( ipconfigUSE_LLMNR == 1 )
			{
				if( x == 0 )
 80097ca:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d103      	bne.n	80097da <prvParseDNSReply+0x8e>
				{
					pcRequestedName = ( char * ) pucByte;
 80097d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80097d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
				}
			}
			#endif

#if( ipconfigUSE_DNS_CACHE == 1 )
			if( x == 0 )
 80097da:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10a      	bne.n	80097f8 <prvParseDNSReply+0xac>
			{
				pucByte = prvReadNameField( pucByte, pcName, sizeof( pcName ) );
 80097e2:	f107 030c 	add.w	r3, r7, #12
 80097e6:	2280      	movs	r2, #128	; 0x80
 80097e8:	4619      	mov	r1, r3
 80097ea:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80097ee:	f7ff ff29 	bl	8009644 <prvReadNameField>
 80097f2:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 80097f6:	e005      	b.n	8009804 <prvParseDNSReply+0xb8>
			}
			else
#endif /* ipconfigUSE_DNS_CACHE */
			{
				/* Skip the variable length pcName field. */
				pucByte = prvSkipNameField( pucByte );
 80097f8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80097fc:	f7ff ff6e 	bl	80096dc <prvSkipNameField>
 8009800:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
			}

			#if( ipconfigUSE_LLMNR == 1 )
			{
				/* usChar2u16 returns value in host endianness */
				usType = usChar2u16( pucByte );
 8009804:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8009808:	f7ff fe68 	bl	80094dc <usChar2u16>
 800980c:	4603      	mov	r3, r0
 800980e:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
				usClass = usChar2u16( pucByte + 2 );
 8009812:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009816:	3302      	adds	r3, #2
 8009818:	4618      	mov	r0, r3
 800981a:	f7ff fe5f 	bl	80094dc <usChar2u16>
 800981e:	4603      	mov	r3, r0
 8009820:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
			}
			#endif /* ipconfigUSE_LLMNR */

			/* Skip the type and class fields. */
			pucByte += sizeof( uint32_t );
 8009824:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009828:	3304      	adds	r3, #4
 800982a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		for( x = 0; x < usQuestions; x++ )
 800982e:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8009832:	3301      	adds	r3, #1
 8009834:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8009838:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800983c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009840:	429a      	cmp	r2, r3
 8009842:	d3c2      	bcc.n	80097ca <prvParseDNSReply+0x7e>
		}

		/* Search through the answers records. */
		pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 8009844:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009848:	88db      	ldrh	r3, [r3, #6]
 800984a:	b29b      	uxth	r3, r3
 800984c:	021b      	lsls	r3, r3, #8
 800984e:	b21a      	sxth	r2, r3
 8009850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009854:	88db      	ldrh	r3, [r3, #6]
 8009856:	b29b      	uxth	r3, r3
 8009858:	0a1b      	lsrs	r3, r3, #8
 800985a:	b29b      	uxth	r3, r3
 800985c:	b21b      	sxth	r3, r3
 800985e:	4313      	orrs	r3, r2
 8009860:	b21b      	sxth	r3, r3
 8009862:	b29a      	uxth	r2, r3
 8009864:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009868:	80da      	strh	r2, [r3, #6]

		if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 800986a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800986e:	885b      	ldrh	r3, [r3, #2]
 8009870:	b29b      	uxth	r3, r3
 8009872:	f403 6378 	and.w	r3, r3, #3968	; 0xf80
 8009876:	2b80      	cmp	r3, #128	; 0x80
 8009878:	d169      	bne.n	800994e <prvParseDNSReply+0x202>
		{
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 800987a:	2300      	movs	r3, #0
 800987c:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8009880:	e05c      	b.n	800993c <prvParseDNSReply+0x1f0>
			{
				pucByte = prvSkipNameField( pucByte );
 8009882:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8009886:	f7ff ff29 	bl	80096dc <prvSkipNameField>
 800988a:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

				/* Is the type field that of an A record? */
				if( usChar2u16( pucByte ) == dnsTYPE_A_HOST )
 800988e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8009892:	f7ff fe23 	bl	80094dc <usChar2u16>
 8009896:	4603      	mov	r3, r0
 8009898:	2b01      	cmp	r3, #1
 800989a:	d129      	bne.n	80098f0 <prvParseDNSReply+0x1a4>
				{
					/* This is the required record.  Skip the type, class, and
					time to live fields, plus the first byte of the data
					length. */
					pucByte += ( sizeof( uint32_t ) + sizeof( uint32_t ) + sizeof( uint8_t ) );
 800989c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80098a0:	3309      	adds	r3, #9
 80098a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

					/* Sanity check the data length. */
					if( ( size_t ) *pucByte == sizeof( uint32_t ) )
 80098a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b04      	cmp	r3, #4
 80098ae:	f040 8193 	bne.w	8009bd8 <prvParseDNSReply+0x48c>
					{
						/* Skip the second byte of the length. */
						pucByte++;
 80098b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80098b6:	3301      	adds	r3, #1
 80098b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

						/* Copy the IP address out of the record. */
						memcpy( ( void * ) &ulIPAddress, ( void * ) pucByte, sizeof( uint32_t ) );
 80098bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

						#if( ipconfigUSE_DNS_CACHE == 1 )
						{
							prvProcessDNSCache( pcName, &ulIPAddress, pdFALSE );
 80098c6:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80098ca:	f107 030c 	add.w	r3, r7, #12
 80098ce:	2200      	movs	r2, #0
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 f9f7 	bl	8009cc4 <prvProcessDNSCache>
						}
						#endif /* ipconfigUSE_DNS_CACHE */
						#if( ipconfigDNS_USE_CALLBACKS != 0 )
						{
							/* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
							vDNSDoCallback( ( TickType_t ) pxDNSMessageHeader->usIdentifier, pcName, ulIPAddress );
 80098d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098da:	881b      	ldrh	r3, [r3, #0]
 80098dc:	b29b      	uxth	r3, r3
 80098de:	4618      	mov	r0, r3
 80098e0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80098e4:	f107 030c 	add.w	r3, r7, #12
 80098e8:	4619      	mov	r1, r3
 80098ea:	f7ff fe6b 	bl	80095c4 <vDNSDoCallback>
						}
						#endif	/* ipconfigDNS_USE_CALLBACKS != 0 */
					}

					break;
 80098ee:	e173      	b.n	8009bd8 <prvParseDNSReply+0x48c>
				}
				else
				{
					/* Skip the type, class and time to live fields. */
					pucByte += ( sizeof( uint32_t ) + sizeof( uint32_t ) );
 80098f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80098f4:	3308      	adds	r3, #8
 80098f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

					/* Determine the length of the data in the field. */
					memcpy( ( void * ) &usDataLength, ( void * ) pucByte, sizeof( uint16_t ) );
 80098fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80098fe:	881b      	ldrh	r3, [r3, #0]
 8009900:	b29b      	uxth	r3, r3
 8009902:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					usDataLength = FreeRTOS_ntohs( usDataLength );
 8009906:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800990a:	021b      	lsls	r3, r3, #8
 800990c:	b21a      	sxth	r2, r3
 800990e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009912:	0a1b      	lsrs	r3, r3, #8
 8009914:	b29b      	uxth	r3, r3
 8009916:	b21b      	sxth	r3, r3
 8009918:	4313      	orrs	r3, r2
 800991a:	b21b      	sxth	r3, r3
 800991c:	b29b      	uxth	r3, r3
 800991e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

					/* Jump over the data length bytes, and the data itself. */
					pucByte += usDataLength + sizeof( uint16_t );
 8009922:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009926:	3302      	adds	r3, #2
 8009928:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800992c:	4413      	add	r3, r2
 800992e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 8009932:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8009936:	3301      	adds	r3, #1
 8009938:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800993c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009940:	88db      	ldrh	r3, [r3, #6]
 8009942:	b29b      	uxth	r3, r3
 8009944:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8009948:	429a      	cmp	r2, r3
 800994a:	d39a      	bcc.n	8009882 <prvParseDNSReply+0x136>
 800994c:	e145      	b.n	8009bda <prvParseDNSReply+0x48e>
				}
			}
		}
#if( ipconfigUSE_LLMNR == 1 )
		else if( usQuestions && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) )
 800994e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 8141 	beq.w	8009bda <prvParseDNSReply+0x48e>
 8009958:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800995c:	2b01      	cmp	r3, #1
 800995e:	f040 813c 	bne.w	8009bda <prvParseDNSReply+0x48e>
 8009962:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009966:	2b01      	cmp	r3, #1
 8009968:	f040 8137 	bne.w	8009bda <prvParseDNSReply+0x48e>
		{
			/* If this is not a reply to our DNS request, it might an LLMNR
			request. */
			if( xApplicationDNSQueryHook ( ( pcRequestedName + 1 ) ) )
 800996c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009970:	3301      	adds	r3, #1
 8009972:	4618      	mov	r0, r3
 8009974:	f006 fa5e 	bl	800fe34 <xApplicationDNSQueryHook>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 812d 	beq.w	8009bda <prvParseDNSReply+0x48e>
			{
			int16_t usLength;
			NetworkBufferDescriptor_t *pxNewBuffer = NULL;
 8009980:	2300      	movs	r3, #0
 8009982:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			NetworkBufferDescriptor_t *pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fc77 	bl	800a27a <pxUDPPayloadBuffer_to_NetworkBuffer>
 800998c:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
			LLMNRAnswer_t *pxAnswer;

				if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 8009990:	4b95      	ldr	r3, [pc, #596]	; (8009be8 <prvParseDNSReply+0x49c>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d144      	bne.n	8009a22 <prvParseDNSReply+0x2d6>
 8009998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800999c:	2b00      	cmp	r3, #0
 800999e:	d040      	beq.n	8009a22 <prvParseDNSReply+0x2d6>
				{
				BaseType_t xDataLength = pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) +
 80099a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099a4:	69db      	ldr	r3, [r3, #28]
					sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 80099a6:	332a      	adds	r3, #42	; 0x2a
				BaseType_t xDataLength = pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) +
 80099a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

					/* The field xDataLength was set to the length of the UDP payload.
					The answer (reply) will be longer than the request, so the packet
					must be duplicaed into a bigger buffer */
					pxNetworkBuffer->xDataLength = xDataLength;
 80099ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80099b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099b4:	61da      	str	r2, [r3, #28]
					pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, xDataLength + 16 );
 80099b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80099ba:	3310      	adds	r3, #16
 80099bc:	4619      	mov	r1, r3
 80099be:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80099c2:	f000 fc32 	bl	800a22a <pxDuplicateNetworkBufferWithDescriptor>
 80099c6:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
					if( pxNewBuffer != NULL )
 80099ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d024      	beq.n	8009a1c <prvParseDNSReply+0x2d0>
					{
					BaseType_t xOffset1, xOffset2;

						xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 80099d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
 80099de:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

						pxNetworkBuffer = pxNewBuffer;
 80099ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80099ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
						pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + ipUDP_PAYLOAD_OFFSET_IPv4;
 80099f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	332a      	adds	r3, #42	; 0x2a
 80099fa:	607b      	str	r3, [r7, #4]

						pucByte = pucUDPPayloadBuffer + xOffset1;
 80099fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	4413      	add	r3, r2
 8009a04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						pcRequestedName = ( char * ) ( pucUDPPayloadBuffer + xOffset2 );
 8009a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	4413      	add	r3, r2
 8009a10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
						pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a1a:	e002      	b.n	8009a22 <prvParseDNSReply+0x2d6>

					}
					else
					{
						/* Just to indicate that the message may not be answered. */
						pxNetworkBuffer = NULL;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					}
				}
				if( pxNetworkBuffer != NULL )
 8009a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f000 80d7 	beq.w	8009bda <prvParseDNSReply+0x48e>
				{
					pxAnswer = (LLMNRAnswer_t *)pucByte;
 8009a2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009a30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

					/* We leave 'usIdentifier' and 'usQuestions' untouched */
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE );	/* Set the response flag */
 8009a34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009a38:	3302      	adds	r3, #2
 8009a3a:	2280      	movs	r2, #128	; 0x80
 8009a3c:	701a      	strb	r2, [r3, #0]
 8009a3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009a42:	3303      	adds	r3, #3
 8009a44:	2200      	movs	r2, #0
 8009a46:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );	/* Provide a single answer */
 8009a48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009a4c:	3306      	adds	r3, #6
 8009a4e:	2200      	movs	r2, #0
 8009a50:	701a      	strb	r2, [r3, #0]
 8009a52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009a56:	3307      	adds	r3, #7
 8009a58:	2201      	movs	r2, #1
 8009a5a:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );	/* No authority */
 8009a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009a60:	3308      	adds	r3, #8
 8009a62:	2200      	movs	r2, #0
 8009a64:	701a      	strb	r2, [r3, #0]
 8009a66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009a6a:	3309      	adds	r3, #9
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );	/* No additional info */
 8009a70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009a74:	330a      	adds	r3, #10
 8009a76:	2200      	movs	r2, #0
 8009a78:	701a      	strb	r2, [r3, #0]
 8009a7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009a7e:	330b      	adds	r3, #11
 8009a80:	2200      	movs	r2, #0
 8009a82:	701a      	strb	r2, [r3, #0]

					pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8009a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a88:	22c0      	movs	r2, #192	; 0xc0
 8009a8a:	701a      	strb	r2, [r3, #0]
					pxAnswer->ucNameOffset = ( uint8_t )( pcRequestedName - ( char * ) pucUDPPayloadBuffer );
 8009a8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	b2da      	uxtb	r2, r3
 8009a96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a9a:	705a      	strb	r2, [r3, #1]

					vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST );	/* Type A: host */
 8009a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009aa0:	3302      	adds	r3, #2
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	701a      	strb	r2, [r3, #0]
 8009aa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009aaa:	3303      	adds	r3, #3
 8009aac:	2201      	movs	r2, #1
 8009aae:	701a      	strb	r2, [r3, #0]
					vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );	/* 1: Class IN */
 8009ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ab4:	3304      	adds	r3, #4
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	701a      	strb	r2, [r3, #0]
 8009aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009abe:	3305      	adds	r3, #5
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	701a      	strb	r2, [r3, #0]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8009ac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ac8:	3306      	adds	r3, #6
 8009aca:	2200      	movs	r2, #0
 8009acc:	701a      	strb	r2, [r3, #0]
 8009ace:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ad2:	3307      	adds	r3, #7
 8009ad4:	2204      	movs	r2, #4
 8009ad6:	701a      	strb	r2, [r3, #0]
 8009ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009adc:	3308      	adds	r3, #8
 8009ade:	2293      	movs	r2, #147	; 0x93
 8009ae0:	701a      	strb	r2, [r3, #0]
 8009ae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ae6:	3309      	adds	r3, #9
 8009ae8:	22e0      	movs	r2, #224	; 0xe0
 8009aea:	701a      	strb	r2, [r3, #0]
					vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 8009aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009af0:	330a      	adds	r3, #10
 8009af2:	2200      	movs	r2, #0
 8009af4:	701a      	strb	r2, [r3, #0]
 8009af6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009afa:	330b      	adds	r3, #11
 8009afc:	2204      	movs	r2, #4
 8009afe:	701a      	strb	r2, [r3, #0]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 8009b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b04:	330c      	adds	r3, #12
 8009b06:	4a39      	ldr	r2, [pc, #228]	; (8009bec <prvParseDNSReply+0x4a0>)
 8009b08:	6952      	ldr	r2, [r2, #20]
 8009b0a:	0611      	lsls	r1, r2, #24
 8009b0c:	4a37      	ldr	r2, [pc, #220]	; (8009bec <prvParseDNSReply+0x4a0>)
 8009b0e:	6952      	ldr	r2, [r2, #20]
 8009b10:	0212      	lsls	r2, r2, #8
 8009b12:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8009b16:	4311      	orrs	r1, r2
 8009b18:	4a34      	ldr	r2, [pc, #208]	; (8009bec <prvParseDNSReply+0x4a0>)
 8009b1a:	6952      	ldr	r2, [r2, #20]
 8009b1c:	0a12      	lsrs	r2, r2, #8
 8009b1e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8009b22:	4311      	orrs	r1, r2
 8009b24:	4a31      	ldr	r2, [pc, #196]	; (8009bec <prvParseDNSReply+0x4a0>)
 8009b26:	6952      	ldr	r2, [r2, #20]
 8009b28:	0e12      	lsrs	r2, r2, #24
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	0e12      	lsrs	r2, r2, #24
 8009b2e:	b2d2      	uxtb	r2, r2
 8009b30:	701a      	strb	r2, [r3, #0]
 8009b32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b36:	330d      	adds	r3, #13
 8009b38:	4a2c      	ldr	r2, [pc, #176]	; (8009bec <prvParseDNSReply+0x4a0>)
 8009b3a:	6952      	ldr	r2, [r2, #20]
 8009b3c:	0611      	lsls	r1, r2, #24
 8009b3e:	4a2b      	ldr	r2, [pc, #172]	; (8009bec <prvParseDNSReply+0x4a0>)
 8009b40:	6952      	ldr	r2, [r2, #20]
 8009b42:	0212      	lsls	r2, r2, #8
 8009b44:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8009b48:	4311      	orrs	r1, r2
 8009b4a:	4a28      	ldr	r2, [pc, #160]	; (8009bec <prvParseDNSReply+0x4a0>)
 8009b4c:	6952      	ldr	r2, [r2, #20]
 8009b4e:	0a12      	lsrs	r2, r2, #8
 8009b50:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8009b54:	4311      	orrs	r1, r2
 8009b56:	4a25      	ldr	r2, [pc, #148]	; (8009bec <prvParseDNSReply+0x4a0>)
 8009b58:	6952      	ldr	r2, [r2, #20]
 8009b5a:	0e12      	lsrs	r2, r2, #24
 8009b5c:	430a      	orrs	r2, r1
 8009b5e:	0c12      	lsrs	r2, r2, #16
 8009b60:	b2d2      	uxtb	r2, r2
 8009b62:	701a      	strb	r2, [r3, #0]
 8009b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b68:	330e      	adds	r3, #14
 8009b6a:	4a20      	ldr	r2, [pc, #128]	; (8009bec <prvParseDNSReply+0x4a0>)
 8009b6c:	6952      	ldr	r2, [r2, #20]
 8009b6e:	0611      	lsls	r1, r2, #24
 8009b70:	4a1e      	ldr	r2, [pc, #120]	; (8009bec <prvParseDNSReply+0x4a0>)
 8009b72:	6952      	ldr	r2, [r2, #20]
 8009b74:	0212      	lsls	r2, r2, #8
 8009b76:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8009b7a:	4311      	orrs	r1, r2
 8009b7c:	4a1b      	ldr	r2, [pc, #108]	; (8009bec <prvParseDNSReply+0x4a0>)
 8009b7e:	6952      	ldr	r2, [r2, #20]
 8009b80:	0a12      	lsrs	r2, r2, #8
 8009b82:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8009b86:	4311      	orrs	r1, r2
 8009b88:	4a18      	ldr	r2, [pc, #96]	; (8009bec <prvParseDNSReply+0x4a0>)
 8009b8a:	6952      	ldr	r2, [r2, #20]
 8009b8c:	0e12      	lsrs	r2, r2, #24
 8009b8e:	430a      	orrs	r2, r1
 8009b90:	0a12      	lsrs	r2, r2, #8
 8009b92:	b2d2      	uxtb	r2, r2
 8009b94:	701a      	strb	r2, [r3, #0]
 8009b96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b9a:	330f      	adds	r3, #15
 8009b9c:	4a13      	ldr	r2, [pc, #76]	; (8009bec <prvParseDNSReply+0x4a0>)
 8009b9e:	6952      	ldr	r2, [r2, #20]
 8009ba0:	0e12      	lsrs	r2, r2, #24
 8009ba2:	b2d2      	uxtb	r2, r2
 8009ba4:	701a      	strb	r2, [r3, #0]

					usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucUDPPayloadBuffer ) );
 8009ba6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	3310      	adds	r3, #16
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

					prvReplyDNSMessage( pxNetworkBuffer, usLength );
 8009bb8:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009bc2:	f000 f815 	bl	8009bf0 <prvReplyDNSMessage>

					if( pxNewBuffer != NULL )
 8009bc6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d005      	beq.n	8009bda <prvParseDNSReply+0x48e>
					{
						vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8009bce:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8009bd2:	f006 f873 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
 8009bd6:	e000      	b.n	8009bda <prvParseDNSReply+0x48e>
					break;
 8009bd8:	bf00      	nop
			}
		}
#endif /* ipconfigUSE_LLMNR == 1 */
	}

	return ulIPAddress;
 8009bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	37c8      	adds	r7, #200	; 0xc8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	080110b8 	.word	0x080110b8
 8009bec:	200000a0 	.word	0x200000a0

08009bf0 <prvReplyDNSMessage>:
/*-----------------------------------------------------------*/

#if( ( ipconfigUSE_NBNS == 1 ) || ( ipconfigUSE_LLMNR == 1 ) )

	static void prvReplyDNSMessage( NetworkBufferDescriptor_t *pxNetworkBuffer, BaseType_t lNetLength )
	{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
	UDPPacket_t *pxUDPPacket;
	IPHeader_t *pxIPHeader;
	UDPHeader_t *pxUDPHeader;

		pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	617b      	str	r3, [r7, #20]
		pxIPHeader = &pxUDPPacket->xIPHeader;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	330e      	adds	r3, #14
 8009c04:	613b      	str	r3, [r7, #16]
		pxUDPHeader = &pxUDPPacket->xUDPHeader;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	3322      	adds	r3, #34	; 0x22
 8009c0a:	60fb      	str	r3, [r7, #12]
		/* HT: started using defines like 'ipSIZE_OF_xxx' */
		pxIPHeader->usLength               = FreeRTOS_htons( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	331c      	adds	r3, #28
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	021b      	lsls	r3, r3, #8
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	331c      	adds	r3, #28
 8009c1c:	0a1b      	lsrs	r3, r3, #8
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	4313      	orrs	r3, r2
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	805a      	strh	r2, [r3, #2]
		/* HT:endian: should not be translated, copying from packet to packet */
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	68da      	ldr	r2, [r3, #12]
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress      = *ipLOCAL_IP_ADDRESS_POINTER;
 8009c30:	4b22      	ldr	r3, [pc, #136]	; (8009cbc <prvReplyDNSMessage+0xcc>)
 8009c32:	695a      	ldr	r2, [r3, #20]
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	60da      	str	r2, [r3, #12]
		pxIPHeader->ucTimeToLive           = ipconfigUDP_TIME_TO_LIVE;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	2280      	movs	r2, #128	; 0x80
 8009c3c:	721a      	strb	r2, [r3, #8]
		pxIPHeader->usIdentification       = FreeRTOS_htons( usPacketIdentifier );
 8009c3e:	4b20      	ldr	r3, [pc, #128]	; (8009cc0 <prvReplyDNSMessage+0xd0>)
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	021b      	lsls	r3, r3, #8
 8009c44:	b21a      	sxth	r2, r3
 8009c46:	4b1e      	ldr	r3, [pc, #120]	; (8009cc0 <prvReplyDNSMessage+0xd0>)
 8009c48:	881b      	ldrh	r3, [r3, #0]
 8009c4a:	0a1b      	lsrs	r3, r3, #8
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	b21b      	sxth	r3, r3
 8009c50:	4313      	orrs	r3, r2
 8009c52:	b21b      	sxth	r3, r3
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	809a      	strh	r2, [r3, #4]
		usPacketIdentifier++;
 8009c5a:	4b19      	ldr	r3, [pc, #100]	; (8009cc0 <prvReplyDNSMessage+0xd0>)
 8009c5c:	881b      	ldrh	r3, [r3, #0]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	4b17      	ldr	r3, [pc, #92]	; (8009cc0 <prvReplyDNSMessage+0xd0>)
 8009c64:	801a      	strh	r2, [r3, #0]
		pxUDPHeader->usLength              = FreeRTOS_htons( lNetLength + ipSIZE_OF_UDP_HEADER );
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	021b      	lsls	r3, r3, #8
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	3308      	adds	r3, #8
 8009c76:	0a1b      	lsrs	r3, r3, #8
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	809a      	strh	r2, [r3, #4]
		vFlip_16( pxUDPPacket->xUDPHeader.usSourcePort, pxUDPPacket->xUDPHeader.usDestinationPort );
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8009c88:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009c8c:	021b      	lsls	r3, r3, #8
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	817b      	strh	r3, [r7, #10]
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	845a      	strh	r2, [r3, #34]	; 0x22
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	897a      	ldrh	r2, [r7, #10]
 8009ca0:	849a      	strh	r2, [r3, #36]	; 0x24
			usGenerateProtocolChecksum( ( uint8_t* ) pxUDPPacket, pdTRUE );
		}
		#endif

		/* Important: tell NIC driver how many bytes must be sent */
		pxNetworkBuffer->xDataLength = ( size_t ) ( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER );
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	61da      	str	r2, [r3, #28]

		/* This function will fill in the eth addresses and send the packet */
		vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8009cac:	2100      	movs	r1, #0
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fee8 	bl	800aa84 <vReturnEthernetFrame>
	}
 8009cb4:	bf00      	nop
 8009cb6:	3718      	adds	r7, #24
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	200000a0 	.word	0x200000a0
 8009cc0:	20004194 	.word	0x20004194

08009cc4 <prvProcessDNSCache>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DNS_CACHE == 1 )

	static void prvProcessDNSCache( const char *pcName, uint32_t *pulIP, BaseType_t xLookUp )
	{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
	BaseType_t x;
	BaseType_t xFound = pdFALSE;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	613b      	str	r3, [r7, #16]
	static BaseType_t xFreeEntry = 0;

		/* For each entry in the DNS cache table. */
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	617b      	str	r3, [r7, #20]
 8009cd8:	e038      	b.n	8009d4c <prvProcessDNSCache+0x88>
		{
			if( xDNSCache[ x ].pcName[ 0 ] == 0 )
 8009cda:	4939      	ldr	r1, [pc, #228]	; (8009dc0 <prvProcessDNSCache+0xfc>)
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	005b      	lsls	r3, r3, #1
 8009ce2:	4413      	add	r3, r2
 8009ce4:	00db      	lsls	r3, r3, #3
 8009ce6:	440b      	add	r3, r1
 8009ce8:	3304      	adds	r3, #4
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d031      	beq.n	8009d54 <prvProcessDNSCache+0x90>
			{
				break;
			}

			if( strncmp( xDNSCache[ x ].pcName, pcName, sizeof( xDNSCache[ x ].pcName ) ) == 0 )
 8009cf0:	697a      	ldr	r2, [r7, #20]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	005b      	lsls	r3, r3, #1
 8009cf6:	4413      	add	r3, r2
 8009cf8:	00db      	lsls	r3, r3, #3
 8009cfa:	4a31      	ldr	r2, [pc, #196]	; (8009dc0 <prvProcessDNSCache+0xfc>)
 8009cfc:	4413      	add	r3, r2
 8009cfe:	3304      	adds	r3, #4
 8009d00:	2210      	movs	r2, #16
 8009d02:	68f9      	ldr	r1, [r7, #12]
 8009d04:	4618      	mov	r0, r3
 8009d06:	f007 f80d 	bl	8010d24 <strncmp>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d11a      	bne.n	8009d46 <prvProcessDNSCache+0x82>
			{
				/* Is this function called for a lookup or to add/update an IP address? */
				if( xLookUp != pdFALSE )
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00a      	beq.n	8009d2c <prvProcessDNSCache+0x68>
				{
					*pulIP = xDNSCache[ x ].ulIPAddress;
 8009d16:	492a      	ldr	r1, [pc, #168]	; (8009dc0 <prvProcessDNSCache+0xfc>)
 8009d18:	697a      	ldr	r2, [r7, #20]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	005b      	lsls	r3, r3, #1
 8009d1e:	4413      	add	r3, r2
 8009d20:	00db      	lsls	r3, r3, #3
 8009d22:	440b      	add	r3, r1
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	e009      	b.n	8009d40 <prvProcessDNSCache+0x7c>
				}
				else
				{
					xDNSCache[ x ].ulIPAddress = *pulIP;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	6819      	ldr	r1, [r3, #0]
 8009d30:	4823      	ldr	r0, [pc, #140]	; (8009dc0 <prvProcessDNSCache+0xfc>)
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	4613      	mov	r3, r2
 8009d36:	005b      	lsls	r3, r3, #1
 8009d38:	4413      	add	r3, r2
 8009d3a:	00db      	lsls	r3, r3, #3
 8009d3c:	4403      	add	r3, r0
 8009d3e:	6019      	str	r1, [r3, #0]
				}

				xFound = pdTRUE;
 8009d40:	2301      	movs	r3, #1
 8009d42:	613b      	str	r3, [r7, #16]
				break;
 8009d44:	e007      	b.n	8009d56 <prvProcessDNSCache+0x92>
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	617b      	str	r3, [r7, #20]
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	2b03      	cmp	r3, #3
 8009d50:	ddc3      	ble.n	8009cda <prvProcessDNSCache+0x16>
 8009d52:	e000      	b.n	8009d56 <prvProcessDNSCache+0x92>
				break;
 8009d54:	bf00      	nop
			}
		}

		if( xFound == pdFALSE )
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d12b      	bne.n	8009db4 <prvProcessDNSCache+0xf0>
		{
			if( xLookUp != pdFALSE )
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <prvProcessDNSCache+0xa6>
			{
				*pulIP = 0;
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2200      	movs	r2, #0
 8009d66:	601a      	str	r2, [r3, #0]
 8009d68:	e024      	b.n	8009db4 <prvProcessDNSCache+0xf0>
			}
			else
			{
				/* Called to add or update an item */
				strncpy( xDNSCache[ xFreeEntry ].pcName, pcName, sizeof( xDNSCache[ xFreeEntry ].pcName ) );
 8009d6a:	4b16      	ldr	r3, [pc, #88]	; (8009dc4 <prvProcessDNSCache+0x100>)
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	005b      	lsls	r3, r3, #1
 8009d72:	4413      	add	r3, r2
 8009d74:	00db      	lsls	r3, r3, #3
 8009d76:	4a12      	ldr	r2, [pc, #72]	; (8009dc0 <prvProcessDNSCache+0xfc>)
 8009d78:	4413      	add	r3, r2
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	2210      	movs	r2, #16
 8009d7e:	68f9      	ldr	r1, [r7, #12]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f006 ffe1 	bl	8010d48 <strncpy>
				xDNSCache[ xFreeEntry ].ulIPAddress = *pulIP;
 8009d86:	4b0f      	ldr	r3, [pc, #60]	; (8009dc4 <prvProcessDNSCache+0x100>)
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	6819      	ldr	r1, [r3, #0]
 8009d8e:	480c      	ldr	r0, [pc, #48]	; (8009dc0 <prvProcessDNSCache+0xfc>)
 8009d90:	4613      	mov	r3, r2
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	4413      	add	r3, r2
 8009d96:	00db      	lsls	r3, r3, #3
 8009d98:	4403      	add	r3, r0
 8009d9a:	6019      	str	r1, [r3, #0]

				xFreeEntry++;
 8009d9c:	4b09      	ldr	r3, [pc, #36]	; (8009dc4 <prvProcessDNSCache+0x100>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	3301      	adds	r3, #1
 8009da2:	4a08      	ldr	r2, [pc, #32]	; (8009dc4 <prvProcessDNSCache+0x100>)
 8009da4:	6013      	str	r3, [r2, #0]
				if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8009da6:	4b07      	ldr	r3, [pc, #28]	; (8009dc4 <prvProcessDNSCache+0x100>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2b04      	cmp	r3, #4
 8009dac:	d102      	bne.n	8009db4 <prvProcessDNSCache+0xf0>
				{
					xFreeEntry = 0;
 8009dae:	4b05      	ldr	r3, [pc, #20]	; (8009dc4 <prvProcessDNSCache+0x100>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	601a      	str	r2, [r3, #0]
				}
			}
		}

		if( ( xLookUp == 0 ) || ( *pulIP != 0 ) )
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
		{
			FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", xLookUp ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
		}
	}
 8009db8:	bf00      	nop
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	20004118 	.word	0x20004118
 8009dc4:	2000418c 	.word	0x2000418c

08009dc8 <prvIPTask>:
#endif

/*-----------------------------------------------------------*/

static void prvIPTask( void *pvParameters )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b088      	sub	sp, #32
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]

	/* Generate a dummy message to say that the network connection has gone
	down.  This will cause this task to initialise the network interface.  After
	this it is the responsibility of the network interface hardware driver to
	send this message if a previously connected network is disconnected. */
	FreeRTOS_NetworkDown();
 8009dd0:	f000 f9ec 	bl	800a1ac <FreeRTOS_NetworkDown>

	#if( ipconfigUSE_TCP == 1 )
	{
		/* Initialise the TCP timer. */
		prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8009dd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009dd8:	4850      	ldr	r0, [pc, #320]	; (8009f1c <prvIPTask+0x154>)
 8009dda:	f000 f9a7 	bl	800a12c <prvIPTimerReload>
	}
	#endif

	/* Initialisation is complete and events can now be processed. */
	xIPTaskInitialised = pdTRUE;
 8009dde:	4b50      	ldr	r3, [pc, #320]	; (8009f20 <prvIPTask+0x158>)
 8009de0:	2201      	movs	r2, #1
 8009de2:	601a      	str	r2, [r3, #0]
	{
		ipconfigWATCHDOG_TIMER();

		/* Check the ARP, DHCP and TCP timers to see if there is any periodic
		or timeout processing to perform. */
		prvCheckNetworkTimers();
 8009de4:	f000 f910 	bl	800a008 <prvCheckNetworkTimers>

		/* Calculate the acceptable maximum sleep time. */
		xNextIPSleep = prvCalculateSleepTime();
 8009de8:	f000 f8c4 	bl	8009f74 <prvCalculateSleepTime>
 8009dec:	61f8      	str	r0, [r7, #28]

		/* Wait until there is something to do.  The event is initialised to "no
		event" in case the following call exits due to a time out rather than a
		message being received. */
		xReceivedEvent.eEventType = eNoEvent;
 8009dee:	23ff      	movs	r3, #255	; 0xff
 8009df0:	743b      	strb	r3, [r7, #16]
		xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep );
 8009df2:	4b4c      	ldr	r3, [pc, #304]	; (8009f24 <prvIPTask+0x15c>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f107 0110 	add.w	r1, r7, #16
 8009dfa:	69fa      	ldr	r2, [r7, #28]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fc feb1 	bl	8006b64 <xQueueReceive>
		}
		#endif /* ipconfigCHECK_IP_QUEUE_SPACE */

		iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

		switch( xReceivedEvent.eEventType )
 8009e02:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8009e06:	2b0b      	cmp	r3, #11
 8009e08:	d87d      	bhi.n	8009f06 <prvIPTask+0x13e>
 8009e0a:	a201      	add	r2, pc, #4	; (adr r2, 8009e10 <prvIPTask+0x48>)
 8009e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e10:	08009e41 	.word	0x08009e41
 8009e14:	08009e4d 	.word	0x08009e4d
 8009e18:	08009e57 	.word	0x08009e57
 8009e1c:	08009eb1 	.word	0x08009eb1
 8009e20:	08009ebb 	.word	0x08009ebb
 8009e24:	08009ed7 	.word	0x08009ed7
 8009e28:	08009ee3 	.word	0x08009ee3
 8009e2c:	08009f07 	.word	0x08009f07
 8009e30:	08009e5d 	.word	0x08009e5d
 8009e34:	08009ea7 	.word	0x08009ea7
 8009e38:	08009ec3 	.word	0x08009ec3
 8009e3c:	08009ecd 	.word	0x08009ecd
		{
			case eNetworkDownEvent :
				/* Attempt to establish a connection. */
				xNetworkUp = pdFALSE;
 8009e40:	4b39      	ldr	r3, [pc, #228]	; (8009f28 <prvIPTask+0x160>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	601a      	str	r2, [r3, #0]
				prvProcessNetworkDownEvent();
 8009e46:	f000 fbe3 	bl	800a610 <prvProcessNetworkDownEvent>
				break;
 8009e4a:	e05f      	b.n	8009f0c <prvIPTask+0x144>

			case eNetworkRxEvent:
				/* The network hardware driver has received a new packet.  A
				pointer to the received buffer is located in the pvData member
				of the received event structure. */
				prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 f884 	bl	8009f5c <prvHandleEthernetPacket>
				break;
 8009e54:	e05a      	b.n	8009f0c <prvIPTask+0x144>

			case eARPTimerEvent :
				/* The ARP timer has expired, process the ARP cache. */
				vARPAgeCache();
 8009e56:	f7fe fdff 	bl	8008a58 <vARPAgeCache>
				break;
 8009e5a:	e057      	b.n	8009f0c <prvIPTask+0x144>
				/* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
				to a port. The port number is communicated in the socket field
				usLocalPort. vSocketBind() will actually bind the socket and the
				API will unblock as soon as the eSOCKET_BOUND event is
				triggered. */
				pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	61bb      	str	r3, [r7, #24]
				xAddress.sin_addr = 0u;	/* For the moment. */
 8009e60:	2300      	movs	r3, #0
 8009e62:	60fb      	str	r3, [r7, #12]
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009e68:	021b      	lsls	r3, r3, #8
 8009e6a:	b21a      	sxth	r2, r3
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009e70:	0a1b      	lsrs	r3, r3, #8
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	b21b      	sxth	r3, r3
 8009e76:	4313      	orrs	r3, r2
 8009e78:	b21b      	sxth	r3, r3
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	817b      	strh	r3, [r7, #10]
				pxSocket->usLocalPort = 0u;
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	2200      	movs	r2, #0
 8009e82:	849a      	strh	r2, [r3, #36]	; 0x24
				vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8009e84:	f107 0108 	add.w	r1, r7, #8
 8009e88:	2300      	movs	r3, #0
 8009e8a:	2208      	movs	r2, #8
 8009e8c:	69b8      	ldr	r0, [r7, #24]
 8009e8e:	f001 fa39 	bl	800b304 <vSocketBind>

				/* Before 'eSocketBindEvent' was sent it was tested that
				( xEventGroup != NULL ) so it can be used now to wake up the
				user. */
				pxSocket->xEventBits |= eSOCKET_BOUND;
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f043 0210 	orr.w	r2, r3, #16
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	601a      	str	r2, [r3, #0]
				vSocketWakeUpUser( pxSocket );
 8009e9e:	69b8      	ldr	r0, [r7, #24]
 8009ea0:	f001 fdbc 	bl	800ba1c <vSocketWakeUpUser>
				break;
 8009ea4:	e032      	b.n	8009f0c <prvIPTask+0x144>
			case eSocketCloseEvent :
				/* The user API FreeRTOS_closesocket() has sent a message to the
				IP-task to actually close a socket. This is handled in
				vSocketClose().  As the socket gets closed, there is no way to
				report back to the API, so the API won't wait for the result */
				vSocketClose( ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData ) );
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f001 fae1 	bl	800b470 <vSocketClose>
				break;
 8009eae:	e02d      	b.n	8009f0c <prvIPTask+0x144>

			case eStackTxEvent :
				/* The network stack has generated a packet to send.  A
				pointer to the generated buffer is located in the pvData
				member of the received event structure. */
				vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f005 fcb2 	bl	800f81c <vProcessGeneratedUDPPacket>
				break;
 8009eb8:	e028      	b.n	8009f0c <prvIPTask+0x144>

			case eDHCPEvent:
				/* The DHCP state machine needs processing. */
				#if( ipconfigUSE_DHCP == 1 )
				{
					vDHCPProcess( pdFALSE );
 8009eba:	2000      	movs	r0, #0
 8009ebc:	f7fe feda 	bl	8008c74 <vDHCPProcess>
				}
				#endif /* ipconfigUSE_DHCP */
				break;
 8009ec0:	e024      	b.n	8009f0c <prvIPTask+0x144>
				/* FreeRTOS_select() has got unblocked by a socket event,
				vSocketSelect() will check which sockets actually have an event
				and update the socket field xSocketBits. */
				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
				{
					vSocketSelect( ( SocketSelect_t * ) ( xReceivedEvent.pvData ) );
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f001 ffc5 	bl	800be54 <vSocketSelect>
				}
				#endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
				break;
 8009eca:	e01f      	b.n	8009f0c <prvIPTask+0x144>
			case eSocketSignalEvent :
				#if( ipconfigSUPPORT_SIGNALS != 0 )
				{
					/* Some task wants to signal the user of this socket in
					order to interrupt a call to recv() or a call to select(). */
					FreeRTOS_SignalSocket( ( Socket_t ) xReceivedEvent.pvData );
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f002 f8cc 	bl	800c06c <FreeRTOS_SignalSocket>
				}
				#endif /* ipconfigSUPPORT_SIGNALS */
				break;
 8009ed4:	e01a      	b.n	8009f0c <prvIPTask+0x144>
			case eTCPTimerEvent :
				#if( ipconfigUSE_TCP == 1 )
				{
					/* Simply mark the TCP timer as expired so it gets processed
					the next time prvCheckNetworkTimers() is called. */
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8009ed6:	4a11      	ldr	r2, [pc, #68]	; (8009f1c <prvIPTask+0x154>)
 8009ed8:	7813      	ldrb	r3, [r2, #0]
 8009eda:	f043 0302 	orr.w	r3, r3, #2
 8009ede:	7013      	strb	r3, [r2, #0]
				}
				#endif /* ipconfigUSE_TCP */
				break;
 8009ee0:	e014      	b.n	8009f0c <prvIPTask+0x144>
				/* The API FreeRTOS_accept() was called, the IP-task will now
				check if the listening socket (communicated in pvData) actually
				received a new connection. */
				#if( ipconfigUSE_TCP == 1 )
				{
					pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	61bb      	str	r3, [r7, #24]

					if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8009ee6:	69b8      	ldr	r0, [r7, #24]
 8009ee8:	f004 fc96 	bl	800e818 <xTCPCheckNewClient>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00b      	beq.n	8009f0a <prvIPTask+0x142>
					{
						pxSocket->xEventBits |= eSOCKET_ACCEPT;
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f043 0204 	orr.w	r2, r3, #4
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	601a      	str	r2, [r3, #0]
						vSocketWakeUpUser( pxSocket );
 8009efe:	69b8      	ldr	r0, [r7, #24]
 8009f00:	f001 fd8c 	bl	800ba1c <vSocketWakeUpUser>
					}
				}
				#endif /* ipconfigUSE_TCP */
				break;
 8009f04:	e001      	b.n	8009f0a <prvIPTask+0x142>
				#endif /* ipconfigUSE_TCP */
				break;

			default :
				/* Should not get here. */
				break;
 8009f06:	bf00      	nop
 8009f08:	e000      	b.n	8009f0c <prvIPTask+0x144>
				break;
 8009f0a:	bf00      	nop
		}

		if( xNetworkDownEventPending != pdFALSE )
 8009f0c:	4b07      	ldr	r3, [pc, #28]	; (8009f2c <prvIPTask+0x164>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f43f af67 	beq.w	8009de4 <prvIPTask+0x1c>
		{
			/* A network down event could not be posted to the network event
			queue because the queue was full.  Try posting again. */
			FreeRTOS_NetworkDown();
 8009f16:	f000 f949 	bl	800a1ac <FreeRTOS_NetworkDown>
		prvCheckNetworkTimers();
 8009f1a:	e763      	b.n	8009de4 <prvIPTask+0x1c>
 8009f1c:	200041f8 	.word	0x200041f8
 8009f20:	20004220 	.word	0x20004220
 8009f24:	20004190 	.word	0x20004190
 8009f28:	200041cc 	.word	0x200041cc
 8009f2c:	200041c0 	.word	0x200041c0

08009f30 <xIsCallingFromIPTask>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xIsCallingFromIPTask( void )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
BaseType_t xReturn;

	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 8009f36:	f7fe f831 	bl	8007f9c <xTaskGetCurrentTaskHandle>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	4b06      	ldr	r3, [pc, #24]	; (8009f58 <xIsCallingFromIPTask+0x28>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d102      	bne.n	8009f4a <xIsCallingFromIPTask+0x1a>
	{
		xReturn = pdTRUE;
 8009f44:	2301      	movs	r3, #1
 8009f46:	607b      	str	r3, [r7, #4]
 8009f48:	e001      	b.n	8009f4e <xIsCallingFromIPTask+0x1e>
	}
	else
	{
		xReturn = pdFALSE;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	607b      	str	r3, [r7, #4]
	}

	return xReturn;
 8009f4e:	687b      	ldr	r3, [r7, #4]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	200041c4 	.word	0x200041c4

08009f5c <prvHandleEthernetPacket>:
/*-----------------------------------------------------------*/

static void prvHandleEthernetPacket( NetworkBufferDescriptor_t *pxBuffer )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
	#if( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
	{
		/* When ipconfigUSE_LINKED_RX_MESSAGES is not set to 0 then only one
		buffer will be sent at a time.  This is the default way for +TCP to pass
		messages from the MAC to the TCP/IP stack. */
		prvProcessEthernetPacket( pxBuffer );
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fb93 	bl	800a690 <prvProcessEthernetPacket>

		/* While there is another packet in the chain. */
		} while( pxBuffer != NULL );
	}
	#endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8009f6a:	bf00      	nop
 8009f6c:	3708      	adds	r7, #8
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
	...

08009f74 <prvCalculateSleepTime>:
/*-----------------------------------------------------------*/

static TickType_t prvCalculateSleepTime( void )
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
TickType_t xMaximumSleepTime;

	/* Start with the maximum sleep time, then check this against the remaining
	time in any other timers that are active. */
	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 8009f7a:	f242 7310 	movw	r3, #10000	; 0x2710
 8009f7e:	607b      	str	r3, [r7, #4]

	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 8009f80:	4b1d      	ldr	r3, [pc, #116]	; (8009ff8 <prvCalculateSleepTime+0x84>)
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	f003 0301 	and.w	r3, r3, #1
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d007      	beq.n	8009f9e <prvCalculateSleepTime+0x2a>
	{
		if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 8009f8e:	4b1a      	ldr	r3, [pc, #104]	; (8009ff8 <prvCalculateSleepTime+0x84>)
 8009f90:	68da      	ldr	r2, [r3, #12]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d202      	bcs.n	8009f9e <prvCalculateSleepTime+0x2a>
		{
			xMaximumSleepTime = xARPTimer.ulReloadTime;
 8009f98:	4b17      	ldr	r3, [pc, #92]	; (8009ff8 <prvCalculateSleepTime+0x84>)
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	607b      	str	r3, [r7, #4]
		}
	}

	#if( ipconfigUSE_DHCP == 1 )
	{
		if( xDHCPTimer.bActive != pdFALSE_UNSIGNED )
 8009f9e:	4b17      	ldr	r3, [pc, #92]	; (8009ffc <prvCalculateSleepTime+0x88>)
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	f003 0301 	and.w	r3, r3, #1
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d007      	beq.n	8009fbc <prvCalculateSleepTime+0x48>
		{
			if( xDHCPTimer.ulRemainingTime < xMaximumSleepTime )
 8009fac:	4b13      	ldr	r3, [pc, #76]	; (8009ffc <prvCalculateSleepTime+0x88>)
 8009fae:	68da      	ldr	r2, [r3, #12]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d202      	bcs.n	8009fbc <prvCalculateSleepTime+0x48>
			{
				xMaximumSleepTime = xDHCPTimer.ulRemainingTime;
 8009fb6:	4b11      	ldr	r3, [pc, #68]	; (8009ffc <prvCalculateSleepTime+0x88>)
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	607b      	str	r3, [r7, #4]
	}
	#endif /* ipconfigUSE_DHCP */

	#if( ipconfigUSE_TCP == 1 )
	{
		if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 8009fbc:	4b10      	ldr	r3, [pc, #64]	; (800a000 <prvCalculateSleepTime+0x8c>)
 8009fbe:	68da      	ldr	r2, [r3, #12]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d202      	bcs.n	8009fcc <prvCalculateSleepTime+0x58>
		{
			xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 8009fc6:	4b0e      	ldr	r3, [pc, #56]	; (800a000 <prvCalculateSleepTime+0x8c>)
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	607b      	str	r3, [r7, #4]
	}
	#endif

	#if( ipconfigDNS_USE_CALLBACKS != 0 )
	{
		if( xDNSTimer.bActive != pdFALSE )
 8009fcc:	4b0d      	ldr	r3, [pc, #52]	; (800a004 <prvCalculateSleepTime+0x90>)
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	f003 0301 	and.w	r3, r3, #1
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d007      	beq.n	8009fea <prvCalculateSleepTime+0x76>
		{
			if( xDNSTimer.ulRemainingTime < xMaximumSleepTime )
 8009fda:	4b0a      	ldr	r3, [pc, #40]	; (800a004 <prvCalculateSleepTime+0x90>)
 8009fdc:	68da      	ldr	r2, [r3, #12]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d202      	bcs.n	8009fea <prvCalculateSleepTime+0x76>
			{
				xMaximumSleepTime = xDNSTimer.ulRemainingTime;
 8009fe4:	4b07      	ldr	r3, [pc, #28]	; (800a004 <prvCalculateSleepTime+0x90>)
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	607b      	str	r3, [r7, #4]
			}
		}
	}
	#endif

	return xMaximumSleepTime;
 8009fea:	687b      	ldr	r3, [r7, #4]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr
 8009ff8:	200041d0 	.word	0x200041d0
 8009ffc:	200041e4 	.word	0x200041e4
 800a000:	200041f8 	.word	0x200041f8
 800a004:	2000420c 	.word	0x2000420c

0800a008 <prvCheckNetworkTimers>:
/*-----------------------------------------------------------*/

static void prvCheckNetworkTimers( void )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
	/* Is it time for ARP processing? */
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800a00e:	482d      	ldr	r0, [pc, #180]	; (800a0c4 <prvCheckNetworkTimers+0xbc>)
 800a010:	f000 f89c 	bl	800a14c <prvIPTimerCheck>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d002      	beq.n	800a020 <prvCheckNetworkTimers+0x18>
	{
		xSendEventToIPTask( eARPTimerEvent );
 800a01a:	2002      	movs	r0, #2
 800a01c:	f000 fa48 	bl	800a4b0 <xSendEventToIPTask>
	}

	#if( ipconfigUSE_DHCP == 1 )
	{
		/* Is it time for DHCP processing? */
		if( prvIPTimerCheck( &xDHCPTimer ) != pdFALSE )
 800a020:	4829      	ldr	r0, [pc, #164]	; (800a0c8 <prvCheckNetworkTimers+0xc0>)
 800a022:	f000 f893 	bl	800a14c <prvIPTimerCheck>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <prvCheckNetworkTimers+0x2a>
		{
			xSendEventToIPTask( eDHCPEvent );
 800a02c:	2004      	movs	r0, #4
 800a02e:	f000 fa3f 	bl	800a4b0 <xSendEventToIPTask>
	#if( ipconfigDNS_USE_CALLBACKS != 0 )
	{
	extern void vDNSCheckCallBack( void *pvSearchID );

		/* Is it time for DNS processing? */
		if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 800a032:	4826      	ldr	r0, [pc, #152]	; (800a0cc <prvCheckNetworkTimers+0xc4>)
 800a034:	f000 f88a 	bl	800a14c <prvIPTimerCheck>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d002      	beq.n	800a044 <prvCheckNetworkTimers+0x3c>
		{
			vDNSCheckCallBack( NULL );
 800a03e:	2000      	movs	r0, #0
 800a040:	f7ff fa6c 	bl	800951c <vDNSCheckCallBack>
	static TickType_t xStart = ( TickType_t ) 0;
	TickType_t xTimeNow, xNextTime;
	BaseType_t xCheckTCPSockets;
	extern uint32_t ulNextInitialSequenceNumber;

		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0u )
 800a044:	4b22      	ldr	r3, [pc, #136]	; (800a0d0 <prvCheckNetworkTimers+0xc8>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fc ff6f 	bl	8006f2c <uxQueueMessagesWaiting>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d102      	bne.n	800a05a <prvCheckNetworkTimers+0x52>
		{
			xWillSleep = pdTRUE;
 800a054:	2301      	movs	r3, #1
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	e001      	b.n	800a05e <prvCheckNetworkTimers+0x56>
		}
		else
		{
			xWillSleep = pdFALSE;
 800a05a:	2300      	movs	r3, #0
 800a05c:	60fb      	str	r3, [r7, #12]
		}

		xTimeNow = xTaskGetTickCount();
 800a05e:	f7fd fbf5 	bl	800784c <xTaskGetTickCount>
 800a062:	6078      	str	r0, [r7, #4]

		if( xStart != ( TickType_t ) 0 )
 800a064:	4b1b      	ldr	r3, [pc, #108]	; (800a0d4 <prvCheckNetworkTimers+0xcc>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d009      	beq.n	800a080 <prvCheckNetworkTimers+0x78>
		{
			/* It is advised to increment the Initial Sequence Number every 4
			microseconds which makes 250 times per ms.  This will make it harder
			for a third party to 'guess' our sequence number and 'take over'
			a TCP connection */
			ulNextInitialSequenceNumber += ipINITIAL_SEQUENCE_NUMBER_FACTOR * ( ( xTimeNow - xStart ) * portTICK_PERIOD_MS );
 800a06c:	4b19      	ldr	r3, [pc, #100]	; (800a0d4 <prvCheckNetworkTimers+0xcc>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	021a      	lsls	r2, r3, #8
 800a076:	4b18      	ldr	r3, [pc, #96]	; (800a0d8 <prvCheckNetworkTimers+0xd0>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4413      	add	r3, r2
 800a07c:	4a16      	ldr	r2, [pc, #88]	; (800a0d8 <prvCheckNetworkTimers+0xd0>)
 800a07e:	6013      	str	r3, [r2, #0]
		}

		xStart = xTimeNow;
 800a080:	4a14      	ldr	r2, [pc, #80]	; (800a0d4 <prvCheckNetworkTimers+0xcc>)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6013      	str	r3, [r2, #0]

		/* Sockets need to be checked if the TCP timer has expired. */
		xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800a086:	4815      	ldr	r0, [pc, #84]	; (800a0dc <prvCheckNetworkTimers+0xd4>)
 800a088:	f000 f860 	bl	800a14c <prvIPTimerCheck>
 800a08c:	60b8      	str	r0, [r7, #8]

		/* Sockets will also be checked if there are TCP messages but the
		message queue is empty (indicated by xWillSleep being true). */
		if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 800a08e:	4b14      	ldr	r3, [pc, #80]	; (800a0e0 <prvCheckNetworkTimers+0xd8>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d004      	beq.n	800a0a0 <prvCheckNetworkTimers+0x98>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <prvCheckNetworkTimers+0x98>
		{
			xCheckTCPSockets = pdTRUE;
 800a09c:	2301      	movs	r3, #1
 800a09e:	60bb      	str	r3, [r7, #8]
		}

		if( xCheckTCPSockets != pdFALSE )
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00a      	beq.n	800a0bc <prvCheckNetworkTimers+0xb4>
		{
			/* Attend to the sockets, returning the period after which the
			check must be repeated. */
			xNextTime = xTCPTimerCheck( xWillSleep );
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f001 fcf4 	bl	800ba94 <xTCPTimerCheck>
 800a0ac:	6038      	str	r0, [r7, #0]
			prvIPTimerStart( &xTCPTimer, xNextTime );
 800a0ae:	6839      	ldr	r1, [r7, #0]
 800a0b0:	480a      	ldr	r0, [pc, #40]	; (800a0dc <prvCheckNetworkTimers+0xd4>)
 800a0b2:	f000 f817 	bl	800a0e4 <prvIPTimerStart>
			xProcessedTCPMessage = 0;
 800a0b6:	4b0a      	ldr	r3, [pc, #40]	; (800a0e0 <prvCheckNetworkTimers+0xd8>)
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	601a      	str	r2, [r3, #0]
		}
	}
	#endif /* ipconfigUSE_TCP == 1 */
}
 800a0bc:	bf00      	nop
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	200041d0 	.word	0x200041d0
 800a0c8:	200041e4 	.word	0x200041e4
 800a0cc:	2000420c 	.word	0x2000420c
 800a0d0:	20004190 	.word	0x20004190
 800a0d4:	20004224 	.word	0x20004224
 800a0d8:	20004234 	.word	0x20004234
 800a0dc:	200041f8 	.word	0x200041f8
 800a0e0:	200041c8 	.word	0x200041c8

0800a0e4 <prvIPTimerStart>:
/*-----------------------------------------------------------*/

static void prvIPTimerStart( IPTimer_t *pxTimer, TickType_t xTime )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3304      	adds	r3, #4
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fd fdf0 	bl	8007cd8 <vTaskSetTimeOutState>
	pxTimer->ulRemainingTime = xTime;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	60da      	str	r2, [r3, #12]

	if( xTime == ( TickType_t ) 0 )
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d105      	bne.n	800a110 <prvIPTimerStart+0x2c>
	{
		pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	7813      	ldrb	r3, [r2, #0]
 800a108:	f043 0302 	orr.w	r3, r3, #2
 800a10c:	7013      	strb	r3, [r2, #0]
 800a10e:	e004      	b.n	800a11a <prvIPTimerStart+0x36>
	}
	else
	{
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	7813      	ldrb	r3, [r2, #0]
 800a114:	f36f 0341 	bfc	r3, #1, #1
 800a118:	7013      	strb	r3, [r2, #0]
	}

	pxTimer->bActive = pdTRUE_UNSIGNED;
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	7813      	ldrb	r3, [r2, #0]
 800a11e:	f043 0301 	orr.w	r3, r3, #1
 800a122:	7013      	strb	r3, [r2, #0]
}
 800a124:	bf00      	nop
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <prvIPTimerReload>:
/*-----------------------------------------------------------*/

static void prvIPTimerReload( IPTimer_t *pxTimer, TickType_t xTime )
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
	pxTimer->ulReloadTime = xTime;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	683a      	ldr	r2, [r7, #0]
 800a13a:	611a      	str	r2, [r3, #16]
	prvIPTimerStart( pxTimer, xTime );
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7ff ffd0 	bl	800a0e4 <prvIPTimerStart>
}
 800a144:	bf00      	nop
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <prvIPTimerCheck>:
/*-----------------------------------------------------------*/

static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	f003 0301 	and.w	r3, r3, #1
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d102      	bne.n	800a168 <prvIPTimerCheck+0x1c>
	{
		/* The timer is not enabled. */
		xReturn = pdFALSE;
 800a162:	2300      	movs	r3, #0
 800a164:	60fb      	str	r3, [r7, #12]
 800a166:	e01c      	b.n	800a1a2 <prvIPTimerCheck+0x56>
	}
	else
	{
		/* The timer might have set the bExpired flag already, if not, check the
		value of xTimeOut against ulRemainingTime. */
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	f003 0302 	and.w	r3, r3, #2
 800a170:	b2db      	uxtb	r3, r3
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10a      	bne.n	800a18c <prvIPTimerCheck+0x40>
			( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE ) )
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	1d1a      	adds	r2, r3, #4
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	330c      	adds	r3, #12
 800a17e:	4619      	mov	r1, r3
 800a180:	4610      	mov	r0, r2
 800a182:	f7fd fde5 	bl	8007d50 <xTaskCheckForTimeOut>
 800a186:	4603      	mov	r3, r0
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d008      	beq.n	800a19e <prvIPTimerCheck+0x52>
		{
			prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	4619      	mov	r1, r3
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f7ff ffa6 	bl	800a0e4 <prvIPTimerStart>
			xReturn = pdTRUE;
 800a198:	2301      	movs	r3, #1
 800a19a:	60fb      	str	r3, [r7, #12]
 800a19c:	e001      	b.n	800a1a2 <prvIPTimerCheck+0x56>
		}
		else
		{
			xReturn = pdFALSE;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	60fb      	str	r3, [r7, #12]
		}
	}

	return xReturn;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <FreeRTOS_NetworkDown>:
/*-----------------------------------------------------------*/

void FreeRTOS_NetworkDown( void )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
const TickType_t xDontBlock = ( TickType_t ) 0;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	607b      	str	r3, [r7, #4]

	/* Simply send the network task the appropriate event. */
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 800a1b6:	6879      	ldr	r1, [r7, #4]
 800a1b8:	4808      	ldr	r0, [pc, #32]	; (800a1dc <FreeRTOS_NetworkDown+0x30>)
 800a1ba:	f000 f98f 	bl	800a4dc <xSendEventStructToIPTask>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d003      	beq.n	800a1cc <FreeRTOS_NetworkDown+0x20>
	{
		/* Could not send the message, so it is still pending. */
		xNetworkDownEventPending = pdTRUE;
 800a1c4:	4b06      	ldr	r3, [pc, #24]	; (800a1e0 <FreeRTOS_NetworkDown+0x34>)
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	601a      	str	r2, [r3, #0]
		/* Message was sent so it is not pending. */
		xNetworkDownEventPending = pdFALSE;
	}

	iptraceNETWORK_DOWN();
}
 800a1ca:	e002      	b.n	800a1d2 <FreeRTOS_NetworkDown+0x26>
		xNetworkDownEventPending = pdFALSE;
 800a1cc:	4b04      	ldr	r3, [pc, #16]	; (800a1e0 <FreeRTOS_NetworkDown+0x34>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	601a      	str	r2, [r3, #0]
}
 800a1d2:	bf00      	nop
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	080110b0 	.word	0x080110b0
 800a1e0:	200041c0 	.word	0x200041c0

0800a1e4 <FreeRTOS_GetUDPPayloadBuffer>:
	return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void *FreeRTOS_GetUDPPayloadBuffer( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
void *pvReturn;

	/* Cap the block time.  The reason for this is explained where
	ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined (assuming an official
	FreeRTOSIPConfig.h header file is being used). */
	if( xBlockTimeTicks > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d902      	bls.n	800a1fe <FreeRTOS_GetUDPPayloadBuffer+0x1a>
	{
		xBlockTimeTicks = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800a1f8:	f241 3388 	movw	r3, #5000	; 0x1388
 800a1fc:	603b      	str	r3, [r7, #0]
	}

	/* Obtain a network buffer with the required amount of storage. */
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( UDPPacket_t ) + xRequestedSizeBytes, xBlockTimeTicks );
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	332a      	adds	r3, #42	; 0x2a
 800a202:	6839      	ldr	r1, [r7, #0]
 800a204:	4618      	mov	r0, r3
 800a206:	f005 fce1 	bl	800fbcc <pxGetNetworkBufferWithDescriptor>
 800a20a:	60b8      	str	r0, [r7, #8]

	if( pxNetworkBuffer != NULL )
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d004      	beq.n	800a21c <FreeRTOS_GetUDPPayloadBuffer+0x38>
	{
		/* Leave space for the UPD header. */
		pvReturn = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	332a      	adds	r3, #42	; 0x2a
 800a218:	60fb      	str	r3, [r7, #12]
 800a21a:	e001      	b.n	800a220 <FreeRTOS_GetUDPPayloadBuffer+0x3c>
	}
	else
	{
		pvReturn = NULL;
 800a21c:	2300      	movs	r3, #0
 800a21e:	60fb      	str	r3, [r7, #12]
	}

	return ( void * ) pvReturn;
 800a220:	68fb      	ldr	r3, [r7, #12]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <pxDuplicateNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxDuplicateNetworkBufferWithDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer,
	BaseType_t xNewLength )
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	6039      	str	r1, [r7, #0]
NetworkBufferDescriptor_t * pxNewBuffer;

	/* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
	The transmit routine wants to have ownership of the network buffer
	descriptor, because it will pass the buffer straight to DMA. */
	pxNewBuffer = pxGetNetworkBufferWithDescriptor( ( size_t ) xNewLength, ( TickType_t ) 0 );
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	2100      	movs	r1, #0
 800a238:	4618      	mov	r0, r3
 800a23a:	f005 fcc7 	bl	800fbcc <pxGetNetworkBufferWithDescriptor>
 800a23e:	60f8      	str	r0, [r7, #12]

	if( pxNewBuffer != NULL )
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d014      	beq.n	800a270 <pxDuplicateNetworkBufferWithDescriptor+0x46>
	{
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	695a      	ldr	r2, [r3, #20]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	615a      	str	r2, [r3, #20]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	8c1a      	ldrh	r2, [r3, #32]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	841a      	strh	r2, [r3, #32]
		pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	845a      	strh	r2, [r3, #34]	; 0x22
		memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6998      	ldr	r0, [r3, #24]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6999      	ldr	r1, [r3, #24]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	69db      	ldr	r3, [r3, #28]
 800a26a:	461a      	mov	r2, r3
 800a26c:	f006 fcd5 	bl	8010c1a <memcpy>
	}

	return pxNewBuffer;
 800a270:	68fb      	ldr	r3, [r7, #12]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <pxUDPPayloadBuffer_to_NetworkBuffer>:

#endif /* ipconfigZERO_COPY_TX_DRIVER != 0 */
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxUDPPayloadBuffer_to_NetworkBuffer( void *pvBuffer )
{
 800a27a:	b480      	push	{r7}
 800a27c:	b085      	sub	sp, #20
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
uint8_t *pucBuffer;
NetworkBufferDescriptor_t *pxResult;

	if( pvBuffer == NULL )
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
	{
		pxResult = NULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	60fb      	str	r3, [r7, #12]
 800a28c:	e00f      	b.n	800a2ae <pxUDPPayloadBuffer_to_NetworkBuffer+0x34>
	}
	else
	{
		/* Obtain the network buffer from the zero copy pointer. */
		pucBuffer = ( uint8_t * ) pvBuffer;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	60bb      	str	r3, [r7, #8]

		/* The input here is a pointer to a payload buffer.  Subtract
		the total size of a UDP/IP header plus the size of the header in
		the network buffer, usually 8 + 2 bytes. */
		pucBuffer -= ( sizeof( UDPPacket_t ) + ipBUFFER_PADDING );
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	3b34      	subs	r3, #52	; 0x34
 800a296:	60bb      	str	r3, [r7, #8]

		/* Here a pointer was placed to the network descriptor,
		As a pointer is dereferenced, make sure it is well aligned */
		if( ( ( ( uint32_t ) pucBuffer ) & ( sizeof( pucBuffer ) - 1 ) ) == 0 )
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	f003 0303 	and.w	r3, r3, #3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d103      	bne.n	800a2aa <pxUDPPayloadBuffer_to_NetworkBuffer+0x30>
		{
			/* The following statement may trigger a:
			warning: cast increases required alignment of target type [-Wcast-align].
			It has been confirmed though that the alignment is suitable. */
			pxResult = * ( ( NetworkBufferDescriptor_t ** ) pucBuffer );
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	60fb      	str	r3, [r7, #12]
 800a2a8:	e001      	b.n	800a2ae <pxUDPPayloadBuffer_to_NetworkBuffer+0x34>
		}
		else
		{
			pxResult = NULL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	60fb      	str	r3, [r7, #12]
		}
	}

	return pxResult;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <FreeRTOS_ReleaseUDPPayloadBuffer>:
/*-----------------------------------------------------------*/

void FreeRTOS_ReleaseUDPPayloadBuffer( void *pvBuffer )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
	vReleaseNetworkBufferAndDescriptor( pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer ) );
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff ffd8 	bl	800a27a <pxUDPPayloadBuffer_to_NetworkBuffer>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f005 fcf5 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
}
 800a2d2:	bf00      	nop
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
	...

0800a2dc <FreeRTOS_IPInit>:
/*_RB_ Should we add an error or assert if the task priorities are set such that the servers won't function as expected? */
/*_HT_ There was a bug in FreeRTOS_TCP_IP.c that only occurred when the applications' priority was too high.
 As that bug has been repaired, there is not an urgent reason to warn.
 It is better though to use the advised priority scheme. */
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 800a2dc:	b5b0      	push	{r4, r5, r7, lr}
 800a2de:	b08c      	sub	sp, #48	; 0x30
 800a2e0:	af02      	add	r7, sp, #8
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFALSE;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	627b      	str	r3, [r7, #36]	; 0x24

	/* This function should only be called once. */
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800a2ee:	f000 fc2b 	bl	800ab48 <xIPIsNetworkTaskReady>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d009      	beq.n	800a30c <FreeRTOS_IPInit+0x30>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	623b      	str	r3, [r7, #32]
 800a30a:	e7fe      	b.n	800a30a <FreeRTOS_IPInit+0x2e>
	configASSERT( xNetworkEventQueue == NULL );
 800a30c:	4b60      	ldr	r3, [pc, #384]	; (800a490 <FreeRTOS_IPInit+0x1b4>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d009      	beq.n	800a328 <FreeRTOS_IPInit+0x4c>
 800a314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	61fb      	str	r3, [r7, #28]
 800a326:	e7fe      	b.n	800a326 <FreeRTOS_IPInit+0x4a>
	configASSERT( xIPTaskHandle == NULL );
 800a328:	4b5a      	ldr	r3, [pc, #360]	; (800a494 <FreeRTOS_IPInit+0x1b8>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d009      	beq.n	800a344 <FreeRTOS_IPInit+0x68>
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	61bb      	str	r3, [r7, #24]
 800a342:	e7fe      	b.n	800a342 <FreeRTOS_IPInit+0x66>
	configASSERT( sizeof( IPHeader_t ) == ipEXPECTED_IPHeader_t_SIZE );
	configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
	configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );

	/* Attempt to create the queue used to communicate with the IP task. */
	xNetworkEventQueue = xQueueCreate( ( UBaseType_t ) ipconfigEVENT_QUEUE_LENGTH, ( UBaseType_t ) sizeof( IPStackEvent_t ) );
 800a344:	2200      	movs	r2, #0
 800a346:	2108      	movs	r1, #8
 800a348:	201e      	movs	r0, #30
 800a34a:	f7fc fa87 	bl	800685c <xQueueGenericCreate>
 800a34e:	4602      	mov	r2, r0
 800a350:	4b4f      	ldr	r3, [pc, #316]	; (800a490 <FreeRTOS_IPInit+0x1b4>)
 800a352:	601a      	str	r2, [r3, #0]
	configASSERT( xNetworkEventQueue );
 800a354:	4b4e      	ldr	r3, [pc, #312]	; (800a490 <FreeRTOS_IPInit+0x1b4>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d109      	bne.n	800a370 <FreeRTOS_IPInit+0x94>
 800a35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	617b      	str	r3, [r7, #20]
 800a36e:	e7fe      	b.n	800a36e <FreeRTOS_IPInit+0x92>

	if( xNetworkEventQueue != NULL )
 800a370:	4b47      	ldr	r3, [pc, #284]	; (800a490 <FreeRTOS_IPInit+0x1b4>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	f000 8086 	beq.w	800a486 <FreeRTOS_IPInit+0x1aa>
		#if ( configQUEUE_REGISTRY_SIZE > 0 )
		{
			/* A queue registry is normally used to assist a kernel aware
			debugger.  If one is in use then it will be helpful for the debugger
			to show information about the network event queue. */
			vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 800a37a:	4b45      	ldr	r3, [pc, #276]	; (800a490 <FreeRTOS_IPInit+0x1b4>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4946      	ldr	r1, [pc, #280]	; (800a498 <FreeRTOS_IPInit+0x1bc>)
 800a380:	4618      	mov	r0, r3
 800a382:	f7fc ff35 	bl	80071f0 <vQueueAddToRegistry>
		}
		#endif /* configQUEUE_REGISTRY_SIZE */

		if( xNetworkBuffersInitialise() == pdPASS )
 800a386:	f005 fb93 	bl	800fab0 <xNetworkBuffersInitialise>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d172      	bne.n	800a476 <FreeRTOS_IPInit+0x19a>
		{
			/* Store the local IP and MAC address. */
			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3303      	adds	r3, #3
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	061a      	lsls	r2, r3, #24
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	3302      	adds	r3, #2
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	041b      	lsls	r3, r3, #16
 800a3a0:	431a      	orrs	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	021b      	lsls	r3, r3, #8
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	7812      	ldrb	r2, [r2, #0]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	4a3a      	ldr	r2, [pc, #232]	; (800a49c <FreeRTOS_IPInit+0x1c0>)
 800a3b4:	6013      	str	r3, [r2, #0]
			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	3303      	adds	r3, #3
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	061a      	lsls	r2, r3, #24
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	3302      	adds	r3, #2
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	041b      	lsls	r3, r3, #16
 800a3c6:	431a      	orrs	r2, r3
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	021b      	lsls	r3, r3, #8
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	7812      	ldrb	r2, [r2, #0]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	4a30      	ldr	r2, [pc, #192]	; (800a49c <FreeRTOS_IPInit+0x1c0>)
 800a3da:	6053      	str	r3, [r2, #4]
			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	3303      	adds	r3, #3
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	061a      	lsls	r2, r3, #24
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	3302      	adds	r3, #2
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	041b      	lsls	r3, r3, #16
 800a3ec:	431a      	orrs	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	021b      	lsls	r3, r3, #8
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	7812      	ldrb	r2, [r2, #0]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	4a27      	ldr	r2, [pc, #156]	; (800a49c <FreeRTOS_IPInit+0x1c0>)
 800a400:	6093      	str	r3, [r2, #8]
			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	3303      	adds	r3, #3
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	061a      	lsls	r2, r3, #24
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	3302      	adds	r3, #2
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	041b      	lsls	r3, r3, #16
 800a412:	431a      	orrs	r2, r3
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	3301      	adds	r3, #1
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	021b      	lsls	r3, r3, #8
 800a41c:	4313      	orrs	r3, r2
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	7812      	ldrb	r2, [r2, #0]
 800a422:	4313      	orrs	r3, r2
 800a424:	4a1d      	ldr	r2, [pc, #116]	; (800a49c <FreeRTOS_IPInit+0x1c0>)
 800a426:	60d3      	str	r3, [r2, #12]
			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
 800a428:	4b1c      	ldr	r3, [pc, #112]	; (800a49c <FreeRTOS_IPInit+0x1c0>)
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	4b1b      	ldr	r3, [pc, #108]	; (800a49c <FreeRTOS_IPInit+0x1c0>)
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	43db      	mvns	r3, r3
 800a432:	4313      	orrs	r3, r2
 800a434:	4a19      	ldr	r2, [pc, #100]	; (800a49c <FreeRTOS_IPInit+0x1c0>)
 800a436:	6113      	str	r3, [r2, #16]

			memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 800a438:	4a19      	ldr	r2, [pc, #100]	; (800a4a0 <FreeRTOS_IPInit+0x1c4>)
 800a43a:	4b18      	ldr	r3, [pc, #96]	; (800a49c <FreeRTOS_IPInit+0x1c0>)
 800a43c:	4614      	mov	r4, r2
 800a43e:	461d      	mov	r5, r3
 800a440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a444:	682b      	ldr	r3, [r5, #0]
 800a446:	6023      	str	r3, [r4, #0]

			#if ipconfigUSE_DHCP == 1
			{
				/* The IP address is not set until DHCP completes. */
				*ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
 800a448:	4b16      	ldr	r3, [pc, #88]	; (800a4a4 <FreeRTOS_IPInit+0x1c8>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	615a      	str	r2, [r3, #20]
			}
			#endif /* ipconfigUSE_DHCP == 1 */

			/* The MAC address is stored in the start of the default packet
			header fragment, which is used when sending UDP packets. */
			memcpy( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800a44e:	2206      	movs	r2, #6
 800a450:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a452:	4814      	ldr	r0, [pc, #80]	; (800a4a4 <FreeRTOS_IPInit+0x1c8>)
 800a454:	f006 fbe1 	bl	8010c1a <memcpy>

			/* Prepare the sockets interface. */
			vNetworkSocketsInit();
 800a458:	f000 fc4c 	bl	800acf4 <vNetworkSocketsInit>

			/* Create the task that processes Ethernet and stack events. */
			xReturn = xTaskCreate( prvIPTask, "IP-task", ( uint16_t ) ipconfigIP_TASK_STACK_SIZE_WORDS, NULL, ( UBaseType_t ) ipconfigIP_TASK_PRIORITY, &xIPTaskHandle );
 800a45c:	4b0d      	ldr	r3, [pc, #52]	; (800a494 <FreeRTOS_IPInit+0x1b8>)
 800a45e:	9301      	str	r3, [sp, #4]
 800a460:	2305      	movs	r3, #5
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	2300      	movs	r3, #0
 800a466:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a46a:	490f      	ldr	r1, [pc, #60]	; (800a4a8 <FreeRTOS_IPInit+0x1cc>)
 800a46c:	480f      	ldr	r0, [pc, #60]	; (800a4ac <FreeRTOS_IPInit+0x1d0>)
 800a46e:	f7fc ff11 	bl	8007294 <xTaskCreate>
 800a472:	6278      	str	r0, [r7, #36]	; 0x24
 800a474:	e007      	b.n	800a486 <FreeRTOS_IPInit+0x1aa>
		else
		{
			FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n") );

			/* Clean up. */
			vQueueDelete( xNetworkEventQueue );
 800a476:	4b06      	ldr	r3, [pc, #24]	; (800a490 <FreeRTOS_IPInit+0x1b4>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fc fd73 	bl	8006f66 <vQueueDelete>
			xNetworkEventQueue = NULL;
 800a480:	4b03      	ldr	r3, [pc, #12]	; (800a490 <FreeRTOS_IPInit+0x1b4>)
 800a482:	2200      	movs	r2, #0
 800a484:	601a      	str	r2, [r3, #0]
	else
	{
		FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n") );
	}

	return xReturn;
 800a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3728      	adds	r7, #40	; 0x28
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bdb0      	pop	{r4, r5, r7, pc}
 800a490:	20004190 	.word	0x20004190
 800a494:	200041c4 	.word	0x200041c4
 800a498:	08010f18 	.word	0x08010f18
 800a49c:	20004198 	.word	0x20004198
 800a4a0:	200041ac 	.word	0x200041ac
 800a4a4:	200000a0 	.word	0x200000a0
 800a4a8:	08010f20 	.word	0x08010f20
 800a4ac:	08009dc9 	.word	0x08009dc9

0800a4b0 <xSendEventToIPTask>:

#endif /* ipconfigSUPPORT_OUTGOING_PINGS == 1 */
/*-----------------------------------------------------------*/

BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	71fb      	strb	r3, [r7, #7]
IPStackEvent_t xEventMessage;
const TickType_t xDontBlock = ( TickType_t ) 0;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	617b      	str	r3, [r7, #20]

	xEventMessage.eEventType = eEvent;
 800a4be:	79fb      	ldrb	r3, [r7, #7]
 800a4c0:	733b      	strb	r3, [r7, #12]
	xEventMessage.pvData = ( void* )NULL;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	613b      	str	r3, [r7, #16]

	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 800a4c6:	f107 030c 	add.w	r3, r7, #12
 800a4ca:	6979      	ldr	r1, [r7, #20]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 f805 	bl	800a4dc <xSendEventStructToIPTask>
 800a4d2:	4603      	mov	r3, r0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3718      	adds	r7, #24
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <xSendEventStructToIPTask>:
/*-----------------------------------------------------------*/

BaseType_t xSendEventStructToIPTask( const IPStackEvent_t *pxEvent, TickType_t xTimeout )
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn, xSendMessage;

	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 800a4e6:	f000 fb2f 	bl	800ab48 <xIPIsNetworkTaskReady>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d107      	bne.n	800a500 <xSendEventStructToIPTask+0x24>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f993 3000 	ldrsb.w	r3, [r3]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d002      	beq.n	800a500 <xSendEventStructToIPTask+0x24>
	{
		/* Only allow eNetworkDownEvent events if the IP task is not ready
		yet.  Not going to attempt to send the message so the send failed. */
		xReturn = pdFAIL;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	60fb      	str	r3, [r7, #12]
 800a4fe:	e02d      	b.n	800a55c <xSendEventStructToIPTask+0x80>
	}
	else
	{
		xSendMessage = pdTRUE;
 800a500:	2301      	movs	r3, #1
 800a502:	60bb      	str	r3, [r7, #8]

		#if( ipconfigUSE_TCP == 1 )
		{
			if( pxEvent->eEventType == eTCPTimerEvent )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f993 3000 	ldrsb.w	r3, [r3]
 800a50a:	2b05      	cmp	r3, #5
 800a50c:	d10e      	bne.n	800a52c <xSendEventStructToIPTask+0x50>
			{
				/* TCP timer events are sent to wake the timer task when
				xTCPTimer has expired, but there is no point sending them if the
				IP task is already awake processing other message. */
				xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800a50e:	4a16      	ldr	r2, [pc, #88]	; (800a568 <xSendEventStructToIPTask+0x8c>)
 800a510:	7813      	ldrb	r3, [r2, #0]
 800a512:	f043 0302 	orr.w	r3, r3, #2
 800a516:	7013      	strb	r3, [r2, #0]

				if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0u )
 800a518:	4b14      	ldr	r3, [pc, #80]	; (800a56c <xSendEventStructToIPTask+0x90>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7fc fd05 	bl	8006f2c <uxQueueMessagesWaiting>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <xSendEventStructToIPTask+0x50>
				{
					/* Not actually going to send the message but this is not a
					failure as the message didn't need to be sent. */
					xSendMessage = pdFALSE;
 800a528:	2300      	movs	r3, #0
 800a52a:	60bb      	str	r3, [r7, #8]
				}
			}
		}
		#endif /* ipconfigUSE_TCP */

		if( xSendMessage != pdFALSE )
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d012      	beq.n	800a558 <xSendEventStructToIPTask+0x7c>
		{
			/* The IP task cannot block itself while waiting for itself to
			respond. */
			if( ( xIsCallingFromIPTask() == pdTRUE ) && ( xTimeout > ( TickType_t ) 0 ) )
 800a532:	f7ff fcfd 	bl	8009f30 <xIsCallingFromIPTask>
 800a536:	4603      	mov	r3, r0
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d104      	bne.n	800a546 <xSendEventStructToIPTask+0x6a>
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d001      	beq.n	800a546 <xSendEventStructToIPTask+0x6a>
			{
				xTimeout = ( TickType_t ) 0;
 800a542:	2300      	movs	r3, #0
 800a544:	603b      	str	r3, [r7, #0]
			}

			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, xTimeout );
 800a546:	4b09      	ldr	r3, [pc, #36]	; (800a56c <xSendEventStructToIPTask+0x90>)
 800a548:	6818      	ldr	r0, [r3, #0]
 800a54a:	2300      	movs	r3, #0
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	6879      	ldr	r1, [r7, #4]
 800a550:	f7fc fa0e 	bl	8006970 <xQueueGenericSend>
 800a554:	60f8      	str	r0, [r7, #12]
 800a556:	e001      	b.n	800a55c <xSendEventStructToIPTask+0x80>
		}
		else
		{
			/* It was not necessary to send the message to process the event so
			even though the message was not sent the call was successful. */
			xReturn = pdPASS;
 800a558:	2301      	movs	r3, #1
 800a55a:	60fb      	str	r3, [r7, #12]
		}
	}

	return xReturn;
 800a55c:	68fb      	ldr	r3, [r7, #12]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	200041f8 	.word	0x200041f8
 800a56c:	20004190 	.word	0x20004190

0800a570 <eConsiderFrameForProcessing>:
/*-----------------------------------------------------------*/

eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
eFrameProcessingResult_t eReturn;
const EthernetHeader_t *pxEthernetHeader;

	pxEthernetHeader = ( const EthernetHeader_t * ) pucEthernetBuffer;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	613b      	str	r3, [r7, #16]

	if( memcmp( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) &( pxEthernetHeader->xDestinationAddress ), sizeof( MACAddress_t ) ) == 0 )
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	2206      	movs	r2, #6
 800a580:	4619      	mov	r1, r3
 800a582:	4820      	ldr	r0, [pc, #128]	; (800a604 <eConsiderFrameForProcessing+0x94>)
 800a584:	f006 fb3a 	bl	8010bfc <memcmp>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d102      	bne.n	800a594 <eConsiderFrameForProcessing+0x24>
	{
		/* The packet was directed to this node directly - process it. */
		eReturn = eProcessBuffer;
 800a58e:	2301      	movs	r3, #1
 800a590:	75fb      	strb	r3, [r7, #23]
 800a592:	e019      	b.n	800a5c8 <eConsiderFrameForProcessing+0x58>
	}
	else if( memcmp( ( void * ) xBroadcastMACAddress.ucBytes, ( void * ) pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	2206      	movs	r2, #6
 800a598:	4619      	mov	r1, r3
 800a59a:	481b      	ldr	r0, [pc, #108]	; (800a608 <eConsiderFrameForProcessing+0x98>)
 800a59c:	f006 fb2e 	bl	8010bfc <memcmp>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d102      	bne.n	800a5ac <eConsiderFrameForProcessing+0x3c>
	{
		/* The packet was a broadcast - process it. */
		eReturn = eProcessBuffer;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	75fb      	strb	r3, [r7, #23]
 800a5aa:	e00d      	b.n	800a5c8 <eConsiderFrameForProcessing+0x58>
	}
	else
#if( ipconfigUSE_LLMNR == 1 )
	if( memcmp( ( void * ) xLLMNR_MacAdress.ucBytes, ( void * ) pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	2206      	movs	r2, #6
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4816      	ldr	r0, [pc, #88]	; (800a60c <eConsiderFrameForProcessing+0x9c>)
 800a5b4:	f006 fb22 	bl	8010bfc <memcmp>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d102      	bne.n	800a5c4 <eConsiderFrameForProcessing+0x54>
	{
		/* The packet is a request for LLMNR - process it. */
		eReturn = eProcessBuffer;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	75fb      	strb	r3, [r7, #23]
 800a5c2:	e001      	b.n	800a5c8 <eConsiderFrameForProcessing+0x58>
	else
#endif /* ipconfigUSE_LLMNR */
	{
		/* The packet was not a broadcast, or for this node, just release
		the buffer without taking any other action. */
		eReturn = eReleaseBuffer;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	75fb      	strb	r3, [r7, #23]

	#if( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
	{
	uint16_t usFrameType;

		if( eReturn == eProcessBuffer )
 800a5c8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d115      	bne.n	800a5fa <eConsiderFrameForProcessing+0x8a>
		{
			usFrameType = pxEthernetHeader->usFrameType;
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	7b1a      	ldrb	r2, [r3, #12]
 800a5d2:	7b5b      	ldrb	r3, [r3, #13]
 800a5d4:	021b      	lsls	r3, r3, #8
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	81fb      	strh	r3, [r7, #14]
			usFrameType = FreeRTOS_ntohs( usFrameType );
 800a5da:	89fb      	ldrh	r3, [r7, #14]
 800a5dc:	021b      	lsls	r3, r3, #8
 800a5de:	b21a      	sxth	r2, r3
 800a5e0:	89fb      	ldrh	r3, [r7, #14]
 800a5e2:	0a1b      	lsrs	r3, r3, #8
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	b21b      	sxth	r3, r3
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	b21b      	sxth	r3, r3
 800a5ec:	81fb      	strh	r3, [r7, #14]

			if( usFrameType <= 0x600U )
 800a5ee:	89fb      	ldrh	r3, [r7, #14]
 800a5f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a5f4:	d801      	bhi.n	800a5fa <eConsiderFrameForProcessing+0x8a>
			{
				/* Not an Ethernet II frame. */
				eReturn = eReleaseBuffer;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	75fb      	strb	r3, [r7, #23]
			}
		}
	}
	#endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

	return eReturn;
 800a5fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3718      	adds	r7, #24
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	200000a0 	.word	0x200000a0
 800a608:	080110a8 	.word	0x080110a8
 800a60c:	080110a0 	.word	0x080110a0

0800a610 <prvProcessNetworkDownEvent>:
/*-----------------------------------------------------------*/

static void prvProcessNetworkDownEvent( void )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	af00      	add	r7, sp, #0
	/* Stop the ARP timer while there is no network. */
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 800a614:	4a11      	ldr	r2, [pc, #68]	; (800a65c <prvProcessNetworkDownEvent+0x4c>)
 800a616:	7813      	ldrb	r3, [r2, #0]
 800a618:	f36f 0300 	bfc	r3, #0, #1
 800a61c:	7013      	strb	r3, [r2, #0]
		static BaseType_t xCallEventHook = pdFALSE;

		/* The first network down event is generated by the IP stack itself to
		initialise the network hardware, so do not call the network down event
		the first time through. */
		if( xCallEventHook == pdTRUE )
 800a61e:	4b10      	ldr	r3, [pc, #64]	; (800a660 <prvProcessNetworkDownEvent+0x50>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b01      	cmp	r3, #1
 800a624:	d102      	bne.n	800a62c <prvProcessNetworkDownEvent+0x1c>
		{
			vApplicationIPNetworkEventHook( eNetworkDown );
 800a626:	2001      	movs	r0, #1
 800a628:	f005 fbe4 	bl	800fdf4 <vApplicationIPNetworkEventHook>
		}
		xCallEventHook = pdTRUE;
 800a62c:	4b0c      	ldr	r3, [pc, #48]	; (800a660 <prvProcessNetworkDownEvent+0x50>)
 800a62e:	2201      	movs	r2, #1
 800a630:	601a      	str	r2, [r3, #0]
	#endif

	/* The network has been disconnected (or is being initialised for the first
	time).  Perform whatever hardware processing is necessary to bring it up
	again, or wait for it to be available again.  This is hardware dependent. */
	if( xNetworkInterfaceInitialise() != pdPASS )
 800a632:	f7fa f945 	bl	80048c0 <xNetworkInterfaceInitialise>
 800a636:	4603      	mov	r3, r0
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d006      	beq.n	800a64a <prvProcessNetworkDownEvent+0x3a>
	{
		/* Ideally the network interface initialisation function will only
		return when the network is available.  In case this is not the case,
		wait a while before retrying the initialisation. */
		vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 800a63c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a640:	f7fc ffe0 	bl	8007604 <vTaskDelay>
		FreeRTOS_NetworkDown();
 800a644:	f7ff fdb2 	bl	800a1ac <FreeRTOS_NetworkDown>
			/* Perform any necessary 'network up' processing. */
			vIPNetworkUpCalls();
		}
		#endif
	}
}
 800a648:	e005      	b.n	800a656 <prvProcessNetworkDownEvent+0x46>
			vDHCPProcess( pdTRUE );
 800a64a:	2001      	movs	r0, #1
 800a64c:	f7fe fb12 	bl	8008c74 <vDHCPProcess>
			xSendEventToIPTask( eDHCPEvent );
 800a650:	2004      	movs	r0, #4
 800a652:	f7ff ff2d 	bl	800a4b0 <xSendEventToIPTask>
}
 800a656:	bf00      	nop
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	200041d0 	.word	0x200041d0
 800a660:	20004228 	.word	0x20004228

0800a664 <vIPNetworkUpCalls>:
/*-----------------------------------------------------------*/

void vIPNetworkUpCalls( void )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	af00      	add	r7, sp, #0
	xNetworkUp = pdTRUE;
 800a668:	4b07      	ldr	r3, [pc, #28]	; (800a688 <vIPNetworkUpCalls+0x24>)
 800a66a:	2201      	movs	r2, #1
 800a66c:	601a      	str	r2, [r3, #0]

	#if( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
	{
		vApplicationIPNetworkEventHook( eNetworkUp );
 800a66e:	2000      	movs	r0, #0
 800a670:	f005 fbc0 	bl	800fdf4 <vApplicationIPNetworkEventHook>
	#if( ipconfigDNS_USE_CALLBACKS != 0 )
	{
		/* The following function is declared in FreeRTOS_DNS.c	and 'private' to
		this library */
		extern void vDNSInitialise( void );
		vDNSInitialise();
 800a674:	f7fe ff48 	bl	8009508 <vDNSInitialise>
	}
	#endif /* ipconfigDNS_USE_CALLBACKS != 0 */

	/* Set remaining time to 0 so it will become active immediately. */
	prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 800a678:	f242 7110 	movw	r1, #10000	; 0x2710
 800a67c:	4803      	ldr	r0, [pc, #12]	; (800a68c <vIPNetworkUpCalls+0x28>)
 800a67e:	f7ff fd55 	bl	800a12c <prvIPTimerReload>
}
 800a682:	bf00      	nop
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	200041cc 	.word	0x200041cc
 800a68c:	200041d0 	.word	0x200041d0

0800a690 <prvProcessEthernetPacket>:
/*-----------------------------------------------------------*/

static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
EthernetHeader_t *pxEthernetHeader;
volatile eFrameProcessingResult_t eReturned; /* Volatile to prevent complier warnings when ipCONSIDER_FRAME_FOR_PROCESSING just sets it to eProcessBuffer. */

	configASSERT( pxNetworkBuffer );
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d109      	bne.n	800a6b2 <prvProcessEthernetPacket+0x22>
 800a69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	613b      	str	r3, [r7, #16]
 800a6b0:	e7fe      	b.n	800a6b0 <prvProcessEthernetPacket+0x20>

	/* Interpret the Ethernet frame. */
	eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	73fb      	strb	r3, [r7, #15]
	pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	699b      	ldr	r3, [r3, #24]
 800a6ba:	617b      	str	r3, [r7, #20]

	if( eReturned == eProcessBuffer )
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d11b      	bne.n	800a6fc <prvProcessEthernetPacket+0x6c>
	{
		/* Interpret the received Ethernet packet. */
		switch( pxEthernetHeader->usFrameType )
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	899b      	ldrh	r3, [r3, #12]
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	2b08      	cmp	r3, #8
 800a6cc:	d00a      	beq.n	800a6e4 <prvProcessEthernetPacket+0x54>
 800a6ce:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800a6d2:	d110      	bne.n	800a6f6 <prvProcessEthernetPacket+0x66>
		{
			case ipARP_FRAME_TYPE :
				/* The Ethernet frame contains an ARP packet. */
				eReturned = eARPProcessPacket( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fd ff9f 	bl	800861c <eARPProcessPacket>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]
				break;
 800a6e2:	e00b      	b.n	800a6fc <prvProcessEthernetPacket+0x6c>

			case ipIPv4_FRAME_TYPE :
				/* The Ethernet frame contains an IP packet. */
				eReturned = prvProcessIPPacket( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer );
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	6879      	ldr	r1, [r7, #4]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 f866 	bl	800a7bc <prvProcessIPPacket>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	73fb      	strb	r3, [r7, #15]
				break;
 800a6f4:	e002      	b.n	800a6fc <prvProcessEthernetPacket+0x6c>

			default :
				/* No other packet types are handled.  Nothing to do. */
				eReturned = eReleaseBuffer;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	73fb      	strb	r3, [r7, #15]
				break;
 800a6fa:	bf00      	nop
		}
	}

	/* Perform any actions that resulted from processing the Ethernet frame. */
	switch( eReturned )
 800a6fc:	7bfb      	ldrb	r3, [r7, #15]
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	2b02      	cmp	r3, #2
 800a702:	d002      	beq.n	800a70a <prvProcessEthernetPacket+0x7a>
 800a704:	2b03      	cmp	r3, #3
 800a706:	d009      	beq.n	800a71c <prvProcessEthernetPacket+0x8c>
 800a708:	e004      	b.n	800a714 <prvProcessEthernetPacket+0x84>
	{
		case eReturnEthernetFrame :
			/* The Ethernet frame will have been updated (maybe it was
			an ARP request or a PING request?) and should be sent back to
			its source. */
			vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 800a70a:	2101      	movs	r1, #1
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f9b9 	bl	800aa84 <vReturnEthernetFrame>
			/* parameter pdTRUE: the buffer must be released once
			the frame has been transmitted */
			break;
 800a712:	e004      	b.n	800a71e <prvProcessEthernetPacket+0x8e>

		default :
			/* The frame is not being used anywhere, and the
			NetworkBufferDescriptor_t structure containing the frame should
			just be	released back to the list of free buffers. */
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f005 fad1 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
			break;
 800a71a:	e000      	b.n	800a71e <prvProcessEthernetPacket+0x8e>
			break;
 800a71c:	bf00      	nop
	}
}
 800a71e:	bf00      	nop
 800a720:	3718      	adds	r7, #24
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
	...

0800a728 <prvAllowIPPacket>:
/*-----------------------------------------------------------*/

static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
	NetworkBufferDescriptor_t * const pxNetworkBuffer, UBaseType_t uxHeaderLength )
{
 800a728:	b480      	push	{r7}
 800a72a:	b089      	sub	sp, #36	; 0x24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
eFrameProcessingResult_t eReturn = eProcessBuffer;
 800a734:	2301      	movs	r3, #1
 800a736:	77fb      	strb	r3, [r7, #31]

#if( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
	const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	330e      	adds	r3, #14
 800a73c:	61bb      	str	r3, [r7, #24]
	#if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
	{
		/* In systems with a very small amount of RAM, it might be advantageous
		to have incoming messages checked earlier, by the network card driver.
		This method may decrease the usage of sparse network buffers. */
		uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	617b      	str	r3, [r7, #20]

			/* Ensure that the incoming packet is not fragmented (only outgoing
			packets can be fragmented) as these are the only handled IP frames
			currently. */
			if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	88db      	ldrh	r3, [r3, #6]
 800a748:	b29b      	uxth	r3, r3
 800a74a:	461a      	mov	r2, r3
 800a74c:	f64f 730f 	movw	r3, #65295	; 0xff0f
 800a750:	4013      	ands	r3, r2
 800a752:	2b00      	cmp	r3, #0
 800a754:	d002      	beq.n	800a75c <prvAllowIPPacket+0x34>
			{
				/* Can not handle, fragmented packet. */
				eReturn = eReleaseBuffer;
 800a756:	2300      	movs	r3, #0
 800a758:	77fb      	strb	r3, [r7, #31]
 800a75a:	e022      	b.n	800a7a2 <prvAllowIPPacket+0x7a>
			}
			/* 0x45 means: IPv4 with an IP header of 5 x 4 = 20 bytes
			 * 0x47 means: IPv4 with an IP header of 7 x 4 = 28 bytes */
			else if( ( pxIPHeader->ucVersionHeaderLength < 0x45u ) || ( pxIPHeader->ucVersionHeaderLength > 0x4Fu ) )
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	2b44      	cmp	r3, #68	; 0x44
 800a762:	d903      	bls.n	800a76c <prvAllowIPPacket+0x44>
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	2b4f      	cmp	r3, #79	; 0x4f
 800a76a:	d902      	bls.n	800a772 <prvAllowIPPacket+0x4a>
			{
				/* Can not handle, unknown or invalid header version. */
				eReturn = eReleaseBuffer;
 800a76c:	2300      	movs	r3, #0
 800a76e:	77fb      	strb	r3, [r7, #31]
 800a770:	e017      	b.n	800a7a2 <prvAllowIPPacket+0x7a>
			}
				/* Is the packet for this IP address? */
			else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 800a772:	4b0f      	ldr	r3, [pc, #60]	; (800a7b0 <prvAllowIPPacket+0x88>)
 800a774:	695a      	ldr	r2, [r3, #20]
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d012      	beq.n	800a7a2 <prvAllowIPPacket+0x7a>
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a782:	d00e      	beq.n	800a7a2 <prvAllowIPPacket+0x7a>
				/* Is it the global broadcast address 255.255.255.255 ? */
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
				/* Is it a specific broadcast address 192.168.1.255 ? */
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800a784:	4b0b      	ldr	r3, [pc, #44]	; (800a7b4 <prvAllowIPPacket+0x8c>)
 800a786:	691a      	ldr	r2, [r3, #16]
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d009      	beq.n	800a7a2 <prvAllowIPPacket+0x7a>
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	4a09      	ldr	r2, [pc, #36]	; (800a7b8 <prvAllowIPPacket+0x90>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d005      	beq.n	800a7a2 <prvAllowIPPacket+0x7a>
			#if( ipconfigUSE_LLMNR == 1 )
				/* Is it the LLMNR multicast address? */
				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
			#endif
				/* Or (during DHCP negotiation) we have no IP-address yet? */
				( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
 800a796:	4b06      	ldr	r3, [pc, #24]	; (800a7b0 <prvAllowIPPacket+0x88>)
 800a798:	695b      	ldr	r3, [r3, #20]
				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <prvAllowIPPacket+0x7a>
			{
				/* Packet is not for this node, release it */
				eReturn = eReleaseBuffer;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	77fb      	strb	r3, [r7, #31]
		( void ) pxNetworkBuffer;
		( void ) uxHeaderLength;
	}
	#endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

	return eReturn;
 800a7a2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3724      	adds	r7, #36	; 0x24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	200000a0 	.word	0x200000a0
 800a7b4:	20004198 	.word	0x20004198
 800a7b8:	fc0000e0 	.word	0xfc0000e0

0800a7bc <prvProcessIPPacket>:
/*-----------------------------------------------------------*/

static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * const pxIPPacket, NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b08c      	sub	sp, #48	; 0x30
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
eFrameProcessingResult_t eReturn;
const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	330e      	adds	r3, #14
 800a7ca:	62bb      	str	r3, [r7, #40]	; 0x28
UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0x0Fu ) << 2 );
 800a7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800a7d6:	627b      	str	r3, [r7, #36]	; 0x24
uint8_t ucProtocol;

	ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	7ddb      	ldrb	r3, [r3, #23]
 800a7dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	/* Check if the IP headers are acceptable and if it has our destination. */
	eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 800a7e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7e2:	6839      	ldr	r1, [r7, #0]
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7ff ff9f 	bl	800a728 <prvAllowIPPacket>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if( eReturn == eProcessBuffer )
 800a7f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	f040 8082 	bne.w	800a8fe <prvProcessIPPacket+0x142>
	{
		if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	2b14      	cmp	r3, #20
 800a7fe:	d91a      	bls.n	800a836 <prvProcessIPPacket+0x7a>
		{
			/* All structs of headers expect a IP header size of 20 bytes
			 * IP header options were included, we'll ignore them and cut them out
			 * Note: IP options are mostly use in Multi-cast protocols */
			const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	3b14      	subs	r3, #20
 800a804:	61fb      	str	r3, [r7, #28]
			/* From: the previous start of UDP/ICMP/TCP data */
			uint8_t *pucSource = ( ( uint8_t * ) pxIPHeader ) + uxHeaderLength;
 800a806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80a:	4413      	add	r3, r2
 800a80c:	61bb      	str	r3, [r7, #24]
			/* To: the usual start of UDP/ICMP/TCP data at offset 20 from IP header */
			uint8_t *pucTarget = ( ( uint8_t * ) pxIPHeader ) + ipSIZE_OF_IPv4_HEADER;
 800a80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a810:	3314      	adds	r3, #20
 800a812:	617b      	str	r3, [r7, #20]
			/* How many: total length minus the options and the lower headers */
			const size_t  xMoveLen = pxNetworkBuffer->xDataLength - optlen - ipSIZE_OF_IPv4_HEADER - ipSIZE_OF_ETH_HEADER;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	69da      	ldr	r2, [r3, #28]
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	3b22      	subs	r3, #34	; 0x22
 800a81e:	613b      	str	r3, [r7, #16]

			memmove( pucTarget, pucSource, xMoveLen );
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	69b9      	ldr	r1, [r7, #24]
 800a824:	6978      	ldr	r0, [r7, #20]
 800a826:	f006 fa03 	bl	8010c30 <memmove>
			pxNetworkBuffer->xDataLength -= optlen;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	69da      	ldr	r2, [r3, #28]
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	1ad2      	subs	r2, r2, r3
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	61da      	str	r2, [r3, #28]
		}
		/* Add the IP and MAC addresses to the ARP table if they are not
		already there - otherwise refresh the age of the existing
		entry. */
		if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 800a836:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a83a:	2b11      	cmp	r3, #17
 800a83c:	d007      	beq.n	800a84e <prvProcessIPPacket+0x92>
			 * For UDP packets, this will be done later in xProcessReceivedUDPPacket()
			 * as soon as know that the message will be handled by someone
			 * This will prevent that the ARP cache will get overwritten
			 * with the IP-address of useless broadcast packets
			 */
			vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	1d9a      	adds	r2, r3, #6
 800a842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	4619      	mov	r1, r3
 800a848:	4610      	mov	r0, r2
 800a84a:	f7fd ff67 	bl	800871c <vARPRefreshCacheEntry>
		}
		switch( ucProtocol )
 800a84e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a852:	2b06      	cmp	r3, #6
 800a854:	d041      	beq.n	800a8da <prvProcessIPPacket+0x11e>
 800a856:	2b11      	cmp	r3, #17
 800a858:	d012      	beq.n	800a880 <prvProcessIPPacket+0xc4>
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d000      	beq.n	800a860 <prvProcessIPPacket+0xa4>
				}
				break;
#endif
			default	:
				/* Not a supported frame type. */
				break;
 800a85e:	e04e      	b.n	800a8fe <prvProcessIPPacket+0x142>
					ICMPPacket_t *pxICMPPacket = ( ICMPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	60fb      	str	r3, [r7, #12]
					if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800a866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a868:	691a      	ldr	r2, [r3, #16]
 800a86a:	4b28      	ldr	r3, [pc, #160]	; (800a90c <prvProcessIPPacket+0x150>)
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d142      	bne.n	800a8f8 <prvProcessIPPacket+0x13c>
						eReturn = prvProcessICMPPacket( pxICMPPacket );
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f000 f8e8 	bl	800aa48 <prvProcessICMPPacket>
 800a878:	4603      	mov	r3, r0
 800a87a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800a87e:	e03b      	b.n	800a8f8 <prvProcessIPPacket+0x13c>
					UDPPacket_t *pxUDPPacket = ( UDPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	60bb      	str	r3, [r7, #8]
					pxNetworkBuffer->xDataLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - sizeof( UDPHeader_t );
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	021b      	lsls	r3, r3, #8
 800a88e:	b21a      	sxth	r2, r3
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a894:	b29b      	uxth	r3, r3
 800a896:	0a1b      	lsrs	r3, r3, #8
 800a898:	b29b      	uxth	r3, r3
 800a89a:	b21b      	sxth	r3, r3
 800a89c:	4313      	orrs	r3, r2
 800a89e:	b21b      	sxth	r3, r3
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	f1a3 0208 	sub.w	r2, r3, #8
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	61da      	str	r2, [r3, #28]
					pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	841a      	strh	r2, [r3, #32]
					pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	615a      	str	r2, [r3, #20]
					if( xProcessReceivedUDPPacket( pxNetworkBuffer, pxUDPPacket->xUDPHeader.usDestinationPort ) == pdPASS )
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	6838      	ldr	r0, [r7, #0]
 800a8c8:	f005 f85c 	bl	800f984 <xProcessReceivedUDPPacket>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d114      	bne.n	800a8fc <prvProcessIPPacket+0x140>
						eReturn = eFrameConsumed;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800a8d8:	e010      	b.n	800a8fc <prvProcessIPPacket+0x140>
					if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800a8da:	6838      	ldr	r0, [r7, #0]
 800a8dc:	f003 fd5c 	bl	800e398 <xProcessReceivedTCPPacket>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d102      	bne.n	800a8ec <prvProcessIPPacket+0x130>
						eReturn = eFrameConsumed;
 800a8e6:	2303      	movs	r3, #3
 800a8e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					xProcessedTCPMessage++;
 800a8ec:	4b08      	ldr	r3, [pc, #32]	; (800a910 <prvProcessIPPacket+0x154>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	4a07      	ldr	r2, [pc, #28]	; (800a910 <prvProcessIPPacket+0x154>)
 800a8f4:	6013      	str	r3, [r2, #0]
				break;
 800a8f6:	e002      	b.n	800a8fe <prvProcessIPPacket+0x142>
				break;
 800a8f8:	bf00      	nop
 800a8fa:	e000      	b.n	800a8fe <prvProcessIPPacket+0x142>
				break;
 800a8fc:	bf00      	nop
		}
	}

	return eReturn;
 800a8fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a902:	4618      	mov	r0, r3
 800a904:	3730      	adds	r7, #48	; 0x30
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	200000a0 	.word	0x200000a0
 800a910:	200041c8 	.word	0x200041c8

0800a914 <prvProcessICMPEchoReply>:
/*-----------------------------------------------------------*/

#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

	static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
	{
 800a914:	b580      	push	{r7, lr}
 800a916:	b086      	sub	sp, #24
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
	ePingReplyStatus_t eStatus = eSuccess;
 800a91c:	2300      	movs	r3, #0
 800a91e:	75fb      	strb	r3, [r7, #23]
	uint16_t usDataLength, usCount;
	uint8_t *pucByte;

		/* Find the total length of the IP packet. */
		usDataLength = pxICMPPacket->xIPHeader.usLength;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	7c1a      	ldrb	r2, [r3, #16]
 800a924:	7c5b      	ldrb	r3, [r3, #17]
 800a926:	021b      	lsls	r3, r3, #8
 800a928:	4313      	orrs	r3, r2
 800a92a:	81fb      	strh	r3, [r7, #14]
		usDataLength = FreeRTOS_ntohs( usDataLength );
 800a92c:	89fb      	ldrh	r3, [r7, #14]
 800a92e:	021b      	lsls	r3, r3, #8
 800a930:	b21a      	sxth	r2, r3
 800a932:	89fb      	ldrh	r3, [r7, #14]
 800a934:	0a1b      	lsrs	r3, r3, #8
 800a936:	b29b      	uxth	r3, r3
 800a938:	b21b      	sxth	r3, r3
 800a93a:	4313      	orrs	r3, r2
 800a93c:	b21b      	sxth	r3, r3
 800a93e:	81fb      	strh	r3, [r7, #14]

		/* Remove the length of the IP headers to obtain the length of the ICMP
		message itself. */
		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 800a940:	89fb      	ldrh	r3, [r7, #14]
 800a942:	3b14      	subs	r3, #20
 800a944:	81fb      	strh	r3, [r7, #14]

		/* Remove the length of the ICMP header, to obtain the length of
		data contained in the ping. */
		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMP_HEADER );
 800a946:	89fb      	ldrh	r3, [r7, #14]
 800a948:	3b08      	subs	r3, #8
 800a94a:	81fb      	strh	r3, [r7, #14]

		/* Checksum has already been checked before in prvProcessIPPacket */

		/* Find the first byte of the data within the ICMP packet. */
		pucByte = ( uint8_t * ) pxICMPPacket;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	613b      	str	r3, [r7, #16]
		pucByte += sizeof( ICMPPacket_t );
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	332a      	adds	r3, #42	; 0x2a
 800a954:	613b      	str	r3, [r7, #16]

		/* Check each byte. */
		for( usCount = 0; usCount < usDataLength; usCount++ )
 800a956:	2300      	movs	r3, #0
 800a958:	82bb      	strh	r3, [r7, #20]
 800a95a:	e00c      	b.n	800a976 <prvProcessICMPEchoReply+0x62>
		{
			if( *pucByte != ipECHO_DATA_FILL_BYTE )
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	2b78      	cmp	r3, #120	; 0x78
 800a962:	d002      	beq.n	800a96a <prvProcessICMPEchoReply+0x56>
			{
				eStatus = eInvalidData;
 800a964:	2302      	movs	r3, #2
 800a966:	75fb      	strb	r3, [r7, #23]
				break;
 800a968:	e009      	b.n	800a97e <prvProcessICMPEchoReply+0x6a>
			}

			pucByte++;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	3301      	adds	r3, #1
 800a96e:	613b      	str	r3, [r7, #16]
		for( usCount = 0; usCount < usDataLength; usCount++ )
 800a970:	8abb      	ldrh	r3, [r7, #20]
 800a972:	3301      	adds	r3, #1
 800a974:	82bb      	strh	r3, [r7, #20]
 800a976:	8aba      	ldrh	r2, [r7, #20]
 800a978:	89fb      	ldrh	r3, [r7, #14]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d3ee      	bcc.n	800a95c <prvProcessICMPEchoReply+0x48>
		}

		/* Call back into the application to pass it the result. */
		vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a982:	b29a      	uxth	r2, r3
 800a984:	7dfb      	ldrb	r3, [r7, #23]
 800a986:	4611      	mov	r1, r2
 800a988:	4618      	mov	r0, r3
 800a98a:	f005 fa25 	bl	800fdd8 <vApplicationPingReplyHook>
	}
 800a98e:	bf00      	nop
 800a990:	3718      	adds	r7, #24
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
	...

0800a998 <prvProcessICMPEchoRequest>:
/*-----------------------------------------------------------*/

#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )

	static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket )
	{
 800a998:	b480      	push	{r7}
 800a99a:	b087      	sub	sp, #28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
	ICMPHeader_t *pxICMPHeader;
	IPHeader_t *pxIPHeader;
	uint16_t usRequest;

		pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	3322      	adds	r3, #34	; 0x22
 800a9a4:	617b      	str	r3, [r7, #20]
		pxIPHeader = &( pxICMPPacket->xIPHeader );
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	330e      	adds	r3, #14
 800a9aa:	613b      	str	r3, [r7, #16]

		/* The checksum can be checked here - but a ping reply should be
		returned even if the checksum is incorrect so the other end can
		tell that the ping was received - even if the ping reply contains
		invalid data. */
		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	701a      	strb	r2, [r3, #0]
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	68da      	ldr	r2, [r3, #12]
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800a9ba:	4b22      	ldr	r3, [pc, #136]	; (800aa44 <prvProcessICMPEchoRequest+0xac>)
 800a9bc:	695a      	ldr	r2, [r3, #20]
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	60da      	str	r2, [r3, #12]
		has been changed to ipICMP_ECHO_REPLY.  This is faster than calling
		usGenerateChecksum(). */

		/* due to compiler warning "integer operation result is out of range" */

		usRequest = ( uint16_t ) ( ( uint16_t )ipICMP_ECHO_REQUEST << 8 );
 800a9c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9c6:	81fb      	strh	r3, [r7, #14]

		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFu - usRequest ) )
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	885b      	ldrh	r3, [r3, #2]
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	89fb      	ldrh	r3, [r7, #14]
 800a9d0:	43db      	mvns	r3, r3
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	021b      	lsls	r3, r3, #8
 800a9d6:	b299      	uxth	r1, r3
 800a9d8:	89fb      	ldrh	r3, [r7, #14]
 800a9da:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800a9de:	33ff      	adds	r3, #255	; 0xff
 800a9e0:	0a1b      	lsrs	r3, r3, #8
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	430b      	orrs	r3, r1
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d312      	bcc.n	800aa12 <prvProcessICMPEchoRequest+0x7a>
		{
			pxICMPHeader->usChecksum = ( uint16_t )
				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	885b      	ldrh	r3, [r3, #2]
 800a9f0:	b29a      	uxth	r2, r3
					FreeRTOS_htons( usRequest + 1UL ) );
 800a9f2:	89fb      	ldrh	r3, [r7, #14]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	021b      	lsls	r3, r3, #8
 800a9fa:	b299      	uxth	r1, r3
 800a9fc:	89fb      	ldrh	r3, [r7, #14]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	0a1b      	lsrs	r3, r3, #8
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	430b      	orrs	r3, r1
 800aa06:	b29b      	uxth	r3, r3
			pxICMPHeader->usChecksum = ( uint16_t )
 800aa08:	4413      	add	r3, r2
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	805a      	strh	r2, [r3, #2]
 800aa10:	e010      	b.n	800aa34 <prvProcessICMPEchoRequest+0x9c>
		}
		else
		{
			pxICMPHeader->usChecksum = ( uint16_t )
				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	885b      	ldrh	r3, [r3, #2]
 800aa16:	b29a      	uxth	r2, r3
					FreeRTOS_htons( usRequest ) );
 800aa18:	89fb      	ldrh	r3, [r7, #14]
 800aa1a:	021b      	lsls	r3, r3, #8
 800aa1c:	b219      	sxth	r1, r3
 800aa1e:	89fb      	ldrh	r3, [r7, #14]
 800aa20:	0a1b      	lsrs	r3, r3, #8
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	b21b      	sxth	r3, r3
 800aa26:	430b      	orrs	r3, r1
 800aa28:	b21b      	sxth	r3, r3
 800aa2a:	b29b      	uxth	r3, r3
			pxICMPHeader->usChecksum = ( uint16_t )
 800aa2c:	4413      	add	r3, r2
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	805a      	strh	r2, [r3, #2]
		}
		return eReturnEthernetFrame;
 800aa34:	2302      	movs	r3, #2
	}
 800aa36:	4618      	mov	r0, r3
 800aa38:	371c      	adds	r7, #28
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	200000a0 	.word	0x200000a0

0800aa48 <prvProcessICMPPacket>:
/*-----------------------------------------------------------*/

#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

	static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket )
	{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
	eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800aa50:	2300      	movs	r3, #0
 800aa52:	73fb      	strb	r3, [r7, #15]

		iptraceICMP_PACKET_RECEIVED();
		switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d008      	beq.n	800aa70 <prvProcessICMPPacket+0x28>
 800aa5e:	2b08      	cmp	r3, #8
 800aa60:	d000      	beq.n	800aa64 <prvProcessICMPPacket+0x1c>
				}
				#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
				break;

			default	:
				break;
 800aa62:	e009      	b.n	800aa78 <prvProcessICMPPacket+0x30>
					eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f7ff ff97 	bl	800a998 <prvProcessICMPEchoRequest>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	73fb      	strb	r3, [r7, #15]
				break;
 800aa6e:	e003      	b.n	800aa78 <prvProcessICMPPacket+0x30>
					prvProcessICMPEchoReply( pxICMPPacket );
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f7ff ff4f 	bl	800a914 <prvProcessICMPEchoReply>
				break;
 800aa76:	bf00      	nop
		}

		return eReturn;
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
	}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
	...

0800aa84 <vReturnEthernetFrame>:
	return FreeRTOS_htons( ( (uint16_t) xSum.u32 ) );
}
/*-----------------------------------------------------------*/

void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer, BaseType_t xReleaseAfterSend )
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
	}

	if( pxNetworkBuffer != NULL )
#endif
	{
		pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	699b      	ldr	r3, [r3, #24]
 800aa92:	60fb      	str	r3, [r7, #12]

		/* Swap source and destination MAC addresses. */
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ), sizeof( pxEthernetHeader->xDestinationAddress ) );
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	3306      	adds	r3, #6
 800aa9a:	2206      	movs	r2, #6
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	f006 f8bc 	bl	8010c1a <memcpy>
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	3306      	adds	r3, #6
 800aaa6:	2206      	movs	r2, #6
 800aaa8:	4905      	ldr	r1, [pc, #20]	; (800aac0 <vReturnEthernetFrame+0x3c>)
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f006 f8b5 	bl	8010c1a <memcpy>

		/* Send! */
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800aab0:	6839      	ldr	r1, [r7, #0]
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f7f9 ff1c 	bl	80048f0 <xNetworkInterfaceOutput>
	}
}
 800aab8:	bf00      	nop
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	200000a0 	.word	0x200000a0

0800aac4 <vIPSetDHCPTimerEnableState>:
}
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DHCP == 1 )
	void vIPSetDHCPTimerEnableState( BaseType_t xEnableState )
	{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
		if( xEnableState != pdFALSE )
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d005      	beq.n	800aade <vIPSetDHCPTimerEnableState+0x1a>
		{
			xDHCPTimer.bActive = pdTRUE_UNSIGNED;
 800aad2:	4a08      	ldr	r2, [pc, #32]	; (800aaf4 <vIPSetDHCPTimerEnableState+0x30>)
 800aad4:	7813      	ldrb	r3, [r2, #0]
 800aad6:	f043 0301 	orr.w	r3, r3, #1
 800aada:	7013      	strb	r3, [r2, #0]
		}
		else
		{
			xDHCPTimer.bActive = pdFALSE_UNSIGNED;
		}
	}
 800aadc:	e004      	b.n	800aae8 <vIPSetDHCPTimerEnableState+0x24>
			xDHCPTimer.bActive = pdFALSE_UNSIGNED;
 800aade:	4a05      	ldr	r2, [pc, #20]	; (800aaf4 <vIPSetDHCPTimerEnableState+0x30>)
 800aae0:	7813      	ldrb	r3, [r2, #0]
 800aae2:	f36f 0300 	bfc	r3, #0, #1
 800aae6:	7013      	strb	r3, [r2, #0]
	}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr
 800aaf4:	200041e4 	.word	0x200041e4

0800aaf8 <vIPReloadDHCPTimer>:
#endif /* ipconfigUSE_DHCP */
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DHCP == 1 )
	void vIPReloadDHCPTimer( uint32_t ulLeaseTime )
	{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
		prvIPTimerReload( &xDHCPTimer, ulLeaseTime );
 800ab00:	6879      	ldr	r1, [r7, #4]
 800ab02:	4803      	ldr	r0, [pc, #12]	; (800ab10 <vIPReloadDHCPTimer+0x18>)
 800ab04:	f7ff fb12 	bl	800a12c <prvIPTimerReload>
	}
 800ab08:	bf00      	nop
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	200041e4 	.word	0x200041e4

0800ab14 <vIPSetDnsTimerEnableState>:
#endif /* ipconfigUSE_DHCP */
/*-----------------------------------------------------------*/

#if( ipconfigDNS_USE_CALLBACKS == 1 )
	void vIPSetDnsTimerEnableState( BaseType_t xEnableState )
	{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
		if( xEnableState != 0 )
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d005      	beq.n	800ab2e <vIPSetDnsTimerEnableState+0x1a>
		{
			xDNSTimer.bActive = pdTRUE;
 800ab22:	4a08      	ldr	r2, [pc, #32]	; (800ab44 <vIPSetDnsTimerEnableState+0x30>)
 800ab24:	7813      	ldrb	r3, [r2, #0]
 800ab26:	f043 0301 	orr.w	r3, r3, #1
 800ab2a:	7013      	strb	r3, [r2, #0]
		}
		else
		{
			xDNSTimer.bActive = pdFALSE;
		}
	}
 800ab2c:	e004      	b.n	800ab38 <vIPSetDnsTimerEnableState+0x24>
			xDNSTimer.bActive = pdFALSE;
 800ab2e:	4a05      	ldr	r2, [pc, #20]	; (800ab44 <vIPSetDnsTimerEnableState+0x30>)
 800ab30:	7813      	ldrb	r3, [r2, #0]
 800ab32:	f36f 0300 	bfc	r3, #0, #1
 800ab36:	7013      	strb	r3, [r2, #0]
	}
 800ab38:	bf00      	nop
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr
 800ab44:	2000420c 	.word	0x2000420c

0800ab48 <xIPIsNetworkTaskReady>:
	}
#endif /* ipconfigDNS_USE_CALLBACKS != 0 */
/*-----------------------------------------------------------*/

BaseType_t xIPIsNetworkTaskReady( void )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	af00      	add	r7, sp, #0
	return xIPTaskInitialised;
 800ab4c:	4b03      	ldr	r3, [pc, #12]	; (800ab5c <xIPIsNetworkTaskReady+0x14>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	20004220 	.word	0x20004220

0800ab60 <FreeRTOS_max_uint32>:
	static portINLINE BaseType_t  	FreeRTOS_min_BaseType  (BaseType_t  a, BaseType_t  b);
	static portINLINE UBaseType_t  	FreeRTOS_min_UBaseType (UBaseType_t  a, UBaseType_t  b);


	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return a >= b ? a : b; }
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	bf38      	it	cc
 800ab72:	4613      	movcc	r3, r2
 800ab74:	4618      	mov	r0, r3
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <FreeRTOS_round_up>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d) { return d * ( ( a + d - 1u ) / d ); }
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	4413      	add	r3, r2
 800ab90:	1e5a      	subs	r2, r3, #1
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab98:	683a      	ldr	r2, [r7, #0]
 800ab9a:	fb02 f303 	mul.w	r3, r2, r3
 800ab9e:	4618      	mov	r0, r3
 800aba0:	370c      	adds	r7, #12
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr

0800abaa <uxStreamBufferSpace>:
}
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper );
static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper )
{
 800abaa:	b480      	push	{r7}
 800abac:	b087      	sub	sp, #28
 800abae:	af00      	add	r7, sp, #0
 800abb0:	60f8      	str	r0, [r7, #12]
 800abb2:	60b9      	str	r1, [r7, #8]
 800abb4:	607a      	str	r2, [r7, #4]
/* Returns the space between uxLower and uxUpper, which equals to the distance minus 1 */
size_t uxCount;

	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	691a      	ldr	r2, [r3, #16]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	441a      	add	r2, r3
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	3b01      	subs	r3, #1
 800abc4:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	691a      	ldr	r2, [r3, #16]
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d804      	bhi.n	800abda <uxStreamBufferSpace+0x30>
	{
		uxCount -= pxBuffer->LENGTH;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	697a      	ldr	r2, [r7, #20]
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	617b      	str	r3, [r7, #20]
	}

	return uxCount;
 800abda:	697b      	ldr	r3, [r7, #20]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	371c      	adds	r7, #28
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <uxStreamBufferDistance>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper );
static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper )
{
 800abe8:	b480      	push	{r7}
 800abea:	b087      	sub	sp, #28
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
/* Returns the distance between uxLower and uxUpper */
size_t uxCount;

	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	691a      	ldr	r2, [r3, #16]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	441a      	add	r2, r3
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	691a      	ldr	r2, [r3, #16]
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d804      	bhi.n	800ac16 <uxStreamBufferDistance+0x2e>
	{
		uxCount -= pxBuffer->LENGTH;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	617b      	str	r3, [r7, #20]
	}

	return uxCount;
 800ac16:	697b      	ldr	r3, [r7, #20]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	371c      	adds	r7, #28
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <uxStreamBufferGetSpace>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can still be added to uxHead
before hitting on uxTail */
size_t uxHead = pxBuffer->uxHead;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	68f9      	ldr	r1, [r7, #12]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7ff ffb4 	bl	800abaa <uxStreamBufferSpace>
 800ac42:	4603      	mov	r3, r0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <uxStreamBufferFrontSpace>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer )
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
/* Distance between uxFront and uxTail
or the number of items which can still be added to uxFront,
before hitting on uxTail */

size_t uxFront = pxBuffer->uxFront;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	68f9      	ldr	r1, [r7, #12]
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f7ff ffa0 	bl	800abaa <uxStreamBufferSpace>
 800ac6a:	4603      	mov	r3, r0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3710      	adds	r7, #16
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <uxStreamBufferGetSize>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer )
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can be read from uxTail
before reaching uxHead */
size_t uxHead = pxBuffer->uxHead;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	68b9      	ldr	r1, [r7, #8]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f7ff ffab 	bl	800abe8 <uxStreamBufferDistance>
 800ac92:	4603      	mov	r3, r0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <prvValidSocket>:
static uint16_t usNextPortToUse[ socketPROTOCOL_COUNT ] = { 0 };

/*-----------------------------------------------------------*/

static BaseType_t prvValidSocket( FreeRTOS_Socket_t *pxSocket, BaseType_t xProtocol, BaseType_t xIsBound )
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdTRUE;
 800aca8:	2301      	movs	r3, #1
 800acaa:	617b      	str	r3, [r7, #20]

	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d003      	beq.n	800acba <prvValidSocket+0x1e>
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb8:	d102      	bne.n	800acc0 <prvValidSocket+0x24>
	{
		xReturn = pdFALSE;
 800acba:	2300      	movs	r3, #0
 800acbc:	617b      	str	r3, [r7, #20]
 800acbe:	e012      	b.n	800ace6 <prvValidSocket+0x4a>
	}
	else if( ( xIsBound != pdFALSE ) && ( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE ) )
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d006      	beq.n	800acd4 <prvValidSocket+0x38>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	699b      	ldr	r3, [r3, #24]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d102      	bne.n	800acd4 <prvValidSocket+0x38>
	{
		/* The caller expects the socket to be bound, but it isn't. */
		xReturn = pdFALSE;
 800acce:	2300      	movs	r3, #0
 800acd0:	617b      	str	r3, [r7, #20]
 800acd2:	e008      	b.n	800ace6 <prvValidSocket+0x4a>
	}
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	429a      	cmp	r2, r3
 800ace0:	d001      	beq.n	800ace6 <prvValidSocket+0x4a>
	{
		/* Socket has a wrong type (UDP != TCP). */
		xReturn = pdFALSE;
 800ace2:	2300      	movs	r3, #0
 800ace4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ace6:	697b      	ldr	r3, [r7, #20]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	371c      	adds	r7, #28
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <vNetworkSocketsInit>:
/*-----------------------------------------------------------*/

void vNetworkSocketsInit( void )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
const uint32_t ulAutoPortRange = socketAUTO_PORT_ALLOCATION_MAX_NUMBER - socketAUTO_PORT_ALLOCATION_RESET_NUMBER;
 800acfa:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 800acfe:	607b      	str	r3, [r7, #4]
uint32_t ulRandomPort;

	vListInitialise( &xBoundUDPSocketsList );
 800ad00:	481b      	ldr	r0, [pc, #108]	; (800ad70 <vNetworkSocketsInit+0x7c>)
 800ad02:	f7fb f87a 	bl	8005dfa <vListInitialise>

	/* Determine the first anonymous UDP port number to get assigned.  Give it
	a random value in order to avoid confusion about port numbers being used
	earlier, before rebooting the device.  Start with the first auto port
	number, then add a random offset up to a maximum of the range of numbers. */
	ulRandomPort = socketAUTO_PORT_ALLOCATION_START_NUMBER;
 800ad06:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800ad0a:	603b      	str	r3, [r7, #0]
	ulRandomPort += ( ipconfigRAND32() % ulAutoPortRange );
 800ad0c:	f005 f888 	bl	800fe20 <uxRand>
 800ad10:	4603      	mov	r3, r0
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad18:	6879      	ldr	r1, [r7, #4]
 800ad1a:	fb01 f202 	mul.w	r2, r1, r2
 800ad1e:	1a9b      	subs	r3, r3, r2
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	4413      	add	r3, r2
 800ad24:	603b      	str	r3, [r7, #0]
	usNextPortToUse[ socketNEXT_UDP_PORT_NUMBER_INDEX ] = ( uint16_t ) ulRandomPort;
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	4b12      	ldr	r3, [pc, #72]	; (800ad74 <vNetworkSocketsInit+0x80>)
 800ad2c:	801a      	strh	r2, [r3, #0]

	#if( ipconfigUSE_TCP == 1 )
	{
		extern uint32_t ulNextInitialSequenceNumber;

		ulNextInitialSequenceNumber = ipconfigRAND32();
 800ad2e:	f005 f877 	bl	800fe20 <uxRand>
 800ad32:	4602      	mov	r2, r0
 800ad34:	4b10      	ldr	r3, [pc, #64]	; (800ad78 <vNetworkSocketsInit+0x84>)
 800ad36:	601a      	str	r2, [r3, #0]

		/* Determine the first anonymous TCP port number to get assigned. */
		ulRandomPort = socketAUTO_PORT_ALLOCATION_START_NUMBER;
 800ad38:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800ad3c:	603b      	str	r3, [r7, #0]
		ulRandomPort += ( ipconfigRAND32() % ulAutoPortRange );
 800ad3e:	f005 f86f 	bl	800fe20 <uxRand>
 800ad42:	4603      	mov	r3, r0
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad4a:	6879      	ldr	r1, [r7, #4]
 800ad4c:	fb01 f202 	mul.w	r2, r1, r2
 800ad50:	1a9b      	subs	r3, r3, r2
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	4413      	add	r3, r2
 800ad56:	603b      	str	r3, [r7, #0]
		usNextPortToUse[ socketNEXT_TCP_PORT_NUMBER_INDEX ] = ( uint16_t ) ulRandomPort;
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <vNetworkSocketsInit+0x80>)
 800ad5e:	805a      	strh	r2, [r3, #2]

		vListInitialise( &xBoundTCPSocketsList );
 800ad60:	4806      	ldr	r0, [pc, #24]	; (800ad7c <vNetworkSocketsInit+0x88>)
 800ad62:	f7fb f84a 	bl	8005dfa <vListInitialise>
	}
	#endif  /* ipconfigUSE_TCP == 1 */
}
 800ad66:	bf00      	nop
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	20005938 	.word	0x20005938
 800ad74:	2000422c 	.word	0x2000422c
 800ad78:	20004234 	.word	0x20004234
 800ad7c:	20005924 	.word	0x20005924

0800ad80 <prvDetermineSocketSize>:
/*-----------------------------------------------------------*/

static BaseType_t prvDetermineSocketSize( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol, size_t *pxSocketSize )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b088      	sub	sp, #32
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
 800ad8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdPASS;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	61fb      	str	r3, [r7, #28]
FreeRTOS_Socket_t *pxSocket;

	/* Asserts must not appear before it has been determined that the network
	task is ready - otherwise the asserts will fail. */
	if( xIPIsNetworkTaskReady() == pdFALSE )
 800ad92:	f7ff fed9 	bl	800ab48 <xIPIsNetworkTaskReady>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d102      	bne.n	800ada2 <prvDetermineSocketSize+0x22>
	{
		xReturn = pdFAIL;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	61fb      	str	r3, [r7, #28]
 800ada0:	e045      	b.n	800ae2e <prvDetermineSocketSize+0xae>
	}
	else
	{
		/* Only Ethernet is currently supported. */
		configASSERT( xDomain == FREERTOS_AF_INET );
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b02      	cmp	r3, #2
 800ada6:	d009      	beq.n	800adbc <prvDetermineSocketSize+0x3c>
 800ada8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adac:	f383 8811 	msr	BASEPRI, r3
 800adb0:	f3bf 8f6f 	isb	sy
 800adb4:	f3bf 8f4f 	dsb	sy
 800adb8:	61bb      	str	r3, [r7, #24]
 800adba:	e7fe      	b.n	800adba <prvDetermineSocketSize+0x3a>

		/* Check if the UDP socket-list has been initialised. */
		configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800adbc:	4b1e      	ldr	r3, [pc, #120]	; (800ae38 <prvDetermineSocketSize+0xb8>)
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc4:	d009      	beq.n	800adda <prvDetermineSocketSize+0x5a>
 800adc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adca:	f383 8811 	msr	BASEPRI, r3
 800adce:	f3bf 8f6f 	isb	sy
 800add2:	f3bf 8f4f 	dsb	sy
 800add6:	617b      	str	r3, [r7, #20]
 800add8:	e7fe      	b.n	800add8 <prvDetermineSocketSize+0x58>
		#if( ipconfigUSE_TCP == 1 )
		{
			/* Check if the TCP socket-list has been initialised. */
			configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800adda:	4b18      	ldr	r3, [pc, #96]	; (800ae3c <prvDetermineSocketSize+0xbc>)
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade2:	d009      	beq.n	800adf8 <prvDetermineSocketSize+0x78>
 800ade4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	613b      	str	r3, [r7, #16]
 800adf6:	e7fe      	b.n	800adf6 <prvDetermineSocketSize+0x76>
		}
		#endif  /* ipconfigUSE_TCP == 1 */

		if( xProtocol == FREERTOS_IPPROTO_UDP )
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b11      	cmp	r3, #17
 800adfc:	d108      	bne.n	800ae10 <prvDetermineSocketSize+0x90>
		{
			if( xType != FREERTOS_SOCK_DGRAM )
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d001      	beq.n	800ae08 <prvDetermineSocketSize+0x88>
			{
				xReturn = pdFAIL;
 800ae04:	2300      	movs	r3, #0
 800ae06:	61fb      	str	r3, [r7, #28]
			}
			/* In case a UDP socket is created, do not allocate space for TCP data. */
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	224c      	movs	r2, #76	; 0x4c
 800ae0c:	601a      	str	r2, [r3, #0]
 800ae0e:	e00e      	b.n	800ae2e <prvDetermineSocketSize+0xae>
		}
#if( ipconfigUSE_TCP == 1 )
		else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b06      	cmp	r3, #6
 800ae14:	d109      	bne.n	800ae2a <prvDetermineSocketSize+0xaa>
		{
			if( xType != FREERTOS_SOCK_STREAM )
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d001      	beq.n	800ae20 <prvDetermineSocketSize+0xa0>
			{
				xReturn = pdFAIL;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	61fb      	str	r3, [r7, #28]
			}

			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800ae26:	601a      	str	r2, [r3, #0]
 800ae28:	e001      	b.n	800ae2e <prvDetermineSocketSize+0xae>
		}
#endif  /* ipconfigUSE_TCP == 1 */
		else
		{
			xReturn = pdFAIL;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	61fb      	str	r3, [r7, #28]
		}
	}
	/* In case configASSERT() is not used */
	( void )xDomain;
	return xReturn;
 800ae2e:	69fb      	ldr	r3, [r7, #28]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3720      	adds	r7, #32
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	20005938 	.word	0x20005938
 800ae3c:	20005924 	.word	0x20005924

0800ae40 <FreeRTOS_socket>:
/*-----------------------------------------------------------*/

/* FreeRTOS_socket() allocates and initiates a socket */
Socket_t FreeRTOS_socket( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol )
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b088      	sub	sp, #32
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
FreeRTOS_Socket_t *pxSocket;
size_t uxSocketSize;
EventGroupHandle_t xEventGroup;
Socket_t xReturn;

	if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
 800ae4c:	f107 0310 	add.w	r3, r7, #16
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	68b9      	ldr	r1, [r7, #8]
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f7ff ff93 	bl	800ad80 <prvDetermineSocketSize>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d103      	bne.n	800ae68 <FreeRTOS_socket+0x28>
	{
		xReturn = FREERTOS_INVALID_SOCKET;
 800ae60:	f04f 33ff 	mov.w	r3, #4294967295
 800ae64:	61bb      	str	r3, [r7, #24]
 800ae66:	e07d      	b.n	800af64 <FreeRTOS_socket+0x124>
	{
		/* Allocate the structure that will hold the socket information.  The
		size depends on the type of socket: UDP sockets need less space.  A
		define 'pvPortMallocSocket' will used to allocate the necessary space.
		By default it points to the FreeRTOS function 'pvPortMalloc()'. */
		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fb fab8 	bl	80063e0 <pvPortMalloc>
 800ae70:	61f8      	str	r0, [r7, #28]

		if( pxSocket == NULL )
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d103      	bne.n	800ae80 <FreeRTOS_socket+0x40>
		{
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800ae78:	f04f 33ff 	mov.w	r3, #4294967295
 800ae7c:	61fb      	str	r3, [r7, #28]
 800ae7e:	e06f      	b.n	800af60 <FreeRTOS_socket+0x120>
			iptraceFAILED_TO_CREATE_SOCKET();
		}
		else if( ( xEventGroup = xEventGroupCreate() ) == NULL )
 800ae80:	f7fa fdc9 	bl	8005a16 <xEventGroupCreate>
 800ae84:	6178      	str	r0, [r7, #20]
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d106      	bne.n	800ae9a <FreeRTOS_socket+0x5a>
		{
			vPortFreeSocket( pxSocket );
 800ae8c:	69f8      	ldr	r0, [r7, #28]
 800ae8e:	f7fb fb69 	bl	8006564 <vPortFree>
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800ae92:	f04f 33ff 	mov.w	r3, #4294967295
 800ae96:	61fb      	str	r3, [r7, #28]
 800ae98:	e062      	b.n	800af60 <FreeRTOS_socket+0x120>
			iptraceFAILED_TO_CREATE_EVENT_GROUP();
		}
		else
		{
			/* Clear the entire space to avoid nulling individual entries */
			memset( pxSocket, '\0', uxSocketSize );
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	2100      	movs	r1, #0
 800aea0:	69f8      	ldr	r0, [r7, #28]
 800aea2:	f005 fedf 	bl	8010c64 <memset>

			pxSocket->xEventGroup = xEventGroup;
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	697a      	ldr	r2, [r7, #20]
 800aeaa:	605a      	str	r2, [r3, #4]

			/* Initialise the socket's members.  The semaphore will be created
			if the socket is bound to an address, for now the pointer to the
			semaphore is just set to NULL to show it has not been created. */
			if( xProtocol == FREERTOS_IPPROTO_UDP )
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2b11      	cmp	r3, #17
 800aeb0:	d104      	bne.n	800aebc <FreeRTOS_socket+0x7c>
			{
				vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	3338      	adds	r3, #56	; 0x38
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7fa ff9f 	bl	8005dfa <vListInitialise>
					pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
				}
				#endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
			}

			vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	3308      	adds	r3, #8
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7fa ffba 	bl	8005e3a <vListInitialiseItem>
			listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	69fa      	ldr	r2, [r7, #28]
 800aeca:	615a      	str	r2, [r3, #20]

			pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	f241 3288 	movw	r2, #5000	; 0x1388
 800aed2:	61da      	str	r2, [r3, #28]
			pxSocket->xSendBlockTime    = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeda:	621a      	str	r2, [r3, #32]
			pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	2202      	movs	r2, #2
 800aee0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			pxSocket->ucProtocol        = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	b2da      	uxtb	r2, r3
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

			#if( ipconfigUSE_TCP == 1 )
			{
				if( xProtocol == FREERTOS_IPPROTO_TCP )
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2b06      	cmp	r3, #6
 800aef2:	d135      	bne.n	800af60 <FreeRTOS_socket+0x120>
				{
					/* StreamSize is expressed in number of bytes */
					/* Round up buffer sizes to nearest multiple of MSS */
					pxSocket->u.xTCP.usInitMSS    = pxSocket->u.xTCP.usCurMSS = ipconfigTCP_MSS;
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800aefa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	f241 121c 	movw	r2, #4380	; 0x111c
 800af10:	66da      	str	r2, [r3, #108]	; 0x6c
					pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800af12:	f240 51b4 	movw	r1, #1460	; 0x5b4
 800af16:	f640 3068 	movw	r0, #2920	; 0xb68
 800af1a:	f7ff fe31 	bl	800ab80 <FreeRTOS_round_up>
 800af1e:	4602      	mov	r2, r0
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	671a      	str	r2, [r3, #112]	; 0x70
					/* Use half of the buffer size of the TCP windows */
					#if ( ipconfigUSE_TCP_WIN == 1 )
					{
						pxSocket->u.xTCP.uxRxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2 ) / ipconfigTCP_MSS );
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af28:	08db      	lsrs	r3, r3, #3
 800af2a:	4a11      	ldr	r2, [pc, #68]	; (800af70 <FreeRTOS_socket+0x130>)
 800af2c:	fba2 2303 	umull	r2, r3, r2, r3
 800af30:	099b      	lsrs	r3, r3, #6
 800af32:	4619      	mov	r1, r3
 800af34:	2001      	movs	r0, #1
 800af36:	f7ff fe13 	bl	800ab60 <FreeRTOS_max_uint32>
 800af3a:	4602      	mov	r2, r0
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2 ) / ipconfigTCP_MSS );
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af46:	08db      	lsrs	r3, r3, #3
 800af48:	4a09      	ldr	r2, [pc, #36]	; (800af70 <FreeRTOS_socket+0x130>)
 800af4a:	fba2 2303 	umull	r2, r3, r2, r3
 800af4e:	099b      	lsrs	r3, r3, #6
 800af50:	4619      	mov	r1, r3
 800af52:	2001      	movs	r0, #1
 800af54:	f7ff fe04 	bl	800ab60 <FreeRTOS_max_uint32>
 800af58:	4602      	mov	r2, r0
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				}
			}
			#endif  /* ipconfigUSE_TCP == 1 */
		}

		xReturn = ( Socket_t ) pxSocket;
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	61bb      	str	r3, [r7, #24]
	}

	/* Remove compiler warnings in the case the configASSERT() is not defined. */
	( void ) xDomain;

	return xReturn;
 800af64:	69bb      	ldr	r3, [r7, #24]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3720      	adds	r7, #32
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	2ce33e6d 	.word	0x2ce33e6d

0800af74 <FreeRTOS_recvfrom>:
 * FreeRTOS_recvfrom: receive data from a bound socket
 * In this library, the function can only be used with connectionsless sockets
 * (UDP)
 */
int32_t FreeRTOS_recvfrom( Socket_t xSocket, void *pvBuffer, size_t xBufferLength, BaseType_t xFlags, struct freertos_sockaddr *pxSourceAddress, socklen_t *pxSourceAddressLength )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b090      	sub	sp, #64	; 0x40
 800af78:	af02      	add	r7, sp, #8
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
 800af80:	603b      	str	r3, [r7, #0]
BaseType_t lPacketCount = 0;
 800af82:	2300      	movs	r3, #0
 800af84:	637b      	str	r3, [r7, #52]	; 0x34
NetworkBufferDescriptor_t *pxNetworkBuffer;
FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	627b      	str	r3, [r7, #36]	; 0x24
TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 800af8a:	2300      	movs	r3, #0
 800af8c:	61fb      	str	r3, [r7, #28]
BaseType_t xTimed = pdFALSE;
 800af8e:	2300      	movs	r3, #0
 800af90:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;
int32_t lReturn;
EventBits_t xEventBits = ( EventBits_t ) 0;
 800af92:	2300      	movs	r3, #0
 800af94:	62bb      	str	r3, [r7, #40]	; 0x28

	if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdTRUE ) == pdFALSE )
 800af96:	2201      	movs	r2, #1
 800af98:	2111      	movs	r1, #17
 800af9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af9c:	f7ff fe7e 	bl	800ac9c <prvValidSocket>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d102      	bne.n	800afac <FreeRTOS_recvfrom+0x38>
	{
		return -pdFREERTOS_ERRNO_EINVAL;
 800afa6:	f06f 0315 	mvn.w	r3, #21
 800afaa:	e0ac      	b.n	800b106 <FreeRTOS_recvfrom+0x192>
	}

	lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb0:	637b      	str	r3, [r7, #52]	; 0x34

	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the parameters. */
	( void ) pxSourceAddressLength;

	while( lPacketCount == 0 )
 800afb2:	e04b      	b.n	800b04c <FreeRTOS_recvfrom+0xd8>
	{
		if( xTimed == pdFALSE )
 800afb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d11c      	bne.n	800aff4 <FreeRTOS_recvfrom+0x80>
		{
			/* Check to see if the socket is non blocking on the first
			iteration.  */
			xRemainingTime = pxSocket->xReceiveBlockTime;
 800afba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbc:	69db      	ldr	r3, [r3, #28]
 800afbe:	61fb      	str	r3, [r7, #28]

			if( xRemainingTime == ( TickType_t ) 0 )
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10a      	bne.n	800afdc <FreeRTOS_recvfrom+0x68>
			{
				#if( ipconfigSUPPORT_SIGNALS != 0 )
				{
					/* Just check for the interrupt flag. */
					xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_INTR,
 800afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc8:	6858      	ldr	r0, [r3, #4]
 800afca:	2300      	movs	r3, #0
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	2300      	movs	r3, #0
 800afd0:	2201      	movs	r2, #1
 800afd2:	2140      	movs	r1, #64	; 0x40
 800afd4:	f7fa fd36 	bl	8005a44 <xEventGroupWaitBits>
 800afd8:	62b8      	str	r0, [r7, #40]	; 0x28
						pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, socketDONT_BLOCK );
				}
				#endif /* ipconfigSUPPORT_SIGNALS */
				break;
 800afda:	e042      	b.n	800b062 <FreeRTOS_recvfrom+0xee>
			}

			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	f003 0310 	and.w	r3, r3, #16
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d136      	bne.n	800b054 <FreeRTOS_recvfrom+0xe0>
			{
				break;
			}

			/* To ensure this part only executes once. */
			xTimed = pdTRUE;
 800afe6:	2301      	movs	r3, #1
 800afe8:	633b      	str	r3, [r7, #48]	; 0x30

			/* Fetch the current time. */
			vTaskSetTimeOutState( &xTimeOut );
 800afea:	f107 0314 	add.w	r3, r7, #20
 800afee:	4618      	mov	r0, r3
 800aff0:	f7fc fe72 	bl	8007cd8 <vTaskSetTimeOutState>
		}

		/* Wait for arrival of data.  While waiting, the IP-task may set the
		'eSOCKET_RECEIVE' bit in 'xEventGroup', if it receives data for this
		socket, thus unblocking this API call. */
		xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_RECEIVE | eSOCKET_INTR,
 800aff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff6:	6858      	ldr	r0, [r3, #4]
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	2300      	movs	r3, #0
 800affe:	2201      	movs	r2, #1
 800b000:	2141      	movs	r1, #65	; 0x41
 800b002:	f7fa fd1f 	bl	8005a44 <xEventGroupWaitBits>
 800b006:	62b8      	str	r0, [r7, #40]	; 0x28
			pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

		#if( ipconfigSUPPORT_SIGNALS != 0 )
		{
			if( ( xEventBits & eSOCKET_INTR ) != 0 )
 800b008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00b      	beq.n	800b02a <FreeRTOS_recvfrom+0xb6>
			{
				if( ( xEventBits & eSOCKET_RECEIVE ) != 0 )
 800b012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b014:	f003 0301 	and.w	r3, r3, #1
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d01d      	beq.n	800b058 <FreeRTOS_recvfrom+0xe4>
				{
					/* Shouldn't have cleared the eSOCKET_RECEIVE flag. */
					xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	2101      	movs	r1, #1
 800b022:	4618      	mov	r0, r3
 800b024:	f7fa fe0e 	bl	8005c44 <xEventGroupSetBits>
				}
				break;
 800b028:	e016      	b.n	800b058 <FreeRTOS_recvfrom+0xe4>
		{
			( void ) xEventBits;
		}
		#endif /* ipconfigSUPPORT_SIGNALS */

		lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800b02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02e:	637b      	str	r3, [r7, #52]	; 0x34

		if( lPacketCount != 0 )
 800b030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b032:	2b00      	cmp	r3, #0
 800b034:	d112      	bne.n	800b05c <FreeRTOS_recvfrom+0xe8>
		{
			break;
		}

		/* Has the timeout been reached ? */
		if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) )
 800b036:	f107 021c 	add.w	r2, r7, #28
 800b03a:	f107 0314 	add.w	r3, r7, #20
 800b03e:	4611      	mov	r1, r2
 800b040:	4618      	mov	r0, r3
 800b042:	f7fc fe85 	bl	8007d50 <xTaskCheckForTimeOut>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d109      	bne.n	800b060 <FreeRTOS_recvfrom+0xec>
	while( lPacketCount == 0 )
 800b04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0b0      	beq.n	800afb4 <FreeRTOS_recvfrom+0x40>
 800b052:	e006      	b.n	800b062 <FreeRTOS_recvfrom+0xee>
				break;
 800b054:	bf00      	nop
 800b056:	e004      	b.n	800b062 <FreeRTOS_recvfrom+0xee>
				break;
 800b058:	bf00      	nop
 800b05a:	e002      	b.n	800b062 <FreeRTOS_recvfrom+0xee>
			break;
 800b05c:	bf00      	nop
 800b05e:	e000      	b.n	800b062 <FreeRTOS_recvfrom+0xee>
		{
			break;
 800b060:	bf00      	nop
		}
	} /* while( lPacketCount == 0 ) */

	if( lPacketCount != 0 )
 800b062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b064:	2b00      	cmp	r3, #0
 800b066:	d041      	beq.n	800b0ec <FreeRTOS_recvfrom+0x178>
	{
		taskENTER_CRITICAL();
 800b068:	f7fb f8a0 	bl	80061ac <vPortEnterCritical>
		{
			/* The owner of the list item is the network buffer. */
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	623b      	str	r3, [r7, #32]

			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	f003 0304 	and.w	r3, r3, #4
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d103      	bne.n	800b086 <FreeRTOS_recvfrom+0x112>
			{
				/* Remove the network buffer from the list of buffers waiting to
				be processed by the socket. */
				uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800b07e:	6a3b      	ldr	r3, [r7, #32]
 800b080:	4618      	mov	r0, r3
 800b082:	f7fa ff44 	bl	8005f0e <uxListRemove>
			}
		}
		taskEXIT_CRITICAL();
 800b086:	f7fb f8bf 	bl	8006208 <vPortExitCritical>

		/* The returned value is the data length, which may have been capped to
		the receive buffer size. */
		lReturn = ( int32_t ) pxNetworkBuffer->xDataLength;
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	69db      	ldr	r3, [r3, #28]
 800b08e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxSourceAddress != NULL )
 800b090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b092:	2b00      	cmp	r3, #0
 800b094:	d007      	beq.n	800b0a6 <FreeRTOS_recvfrom+0x132>
		{
			pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
 800b096:	6a3b      	ldr	r3, [r7, #32]
 800b098:	8c1a      	ldrh	r2, [r3, #32]
 800b09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b09c:	805a      	strh	r2, [r3, #2]
			pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
 800b09e:	6a3b      	ldr	r3, [r7, #32]
 800b0a0:	695a      	ldr	r2, [r3, #20]
 800b0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0a4:	605a      	str	r2, [r3, #4]
		}

		if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	f003 0301 	and.w	r3, r3, #1
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d116      	bne.n	800b0de <FreeRTOS_recvfrom+0x16a>
		{
			/* The zero copy flag is not set.  Truncate the length if it won't
			fit in the provided buffer. */
			if( lReturn > ( int32_t ) xBufferLength )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	dd01      	ble.n	800b0bc <FreeRTOS_recvfrom+0x148>
			{
				iptraceRECVFROM_DISCARDING_BYTES( ( xBufferLength - lReturn ) );
				lReturn = ( int32_t )xBufferLength;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

			/* Copy the received data into the provided buffer, then release the
			network buffer. */
			memcpy( pvBuffer, ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ), ( size_t )lReturn );
 800b0bc:	6a3b      	ldr	r3, [r7, #32]
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	332a      	adds	r3, #42	; 0x2a
 800b0c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	68b8      	ldr	r0, [r7, #8]
 800b0c8:	f005 fda7 	bl	8010c1a <memcpy>

			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	f003 0304 	and.w	r3, r3, #4
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d116      	bne.n	800b104 <FreeRTOS_recvfrom+0x190>
			{
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800b0d6:	6a38      	ldr	r0, [r7, #32]
 800b0d8:	f004 fdf0 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
 800b0dc:	e012      	b.n	800b104 <FreeRTOS_recvfrom+0x190>
		{
			/* The zero copy flag was set.  pvBuffer is not a buffer into which
			the received data can be copied, but a pointer that must be set to
			point to the buffer in which the received data has already been
			placed. */
			*( ( void** ) pvBuffer ) = ( void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ) );
 800b0de:	6a3b      	ldr	r3, [r7, #32]
 800b0e0:	699b      	ldr	r3, [r3, #24]
 800b0e2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	601a      	str	r2, [r3, #0]
 800b0ea:	e00b      	b.n	800b104 <FreeRTOS_recvfrom+0x190>
		}

	}
#if( ipconfigSUPPORT_SIGNALS != 0 )
	else if( ( xEventBits & eSOCKET_INTR ) != 0 )
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d003      	beq.n	800b0fe <FreeRTOS_recvfrom+0x18a>
	{
		lReturn = -pdFREERTOS_ERRNO_EINTR;
 800b0f6:	f06f 0303 	mvn.w	r3, #3
 800b0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0fc:	e002      	b.n	800b104 <FreeRTOS_recvfrom+0x190>
		iptraceRECVFROM_INTERRUPTED();
	}
#endif /* ipconfigSUPPORT_SIGNALS */
	else
	{
		lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800b0fe:	f06f 030a 	mvn.w	r3, #10
 800b102:	62fb      	str	r3, [r7, #44]	; 0x2c
		iptraceRECVFROM_TIMEOUT();
	}

	return lReturn;
 800b104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b106:	4618      	mov	r0, r3
 800b108:	3738      	adds	r7, #56	; 0x38
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <FreeRTOS_sendto>:
/*-----------------------------------------------------------*/

int32_t FreeRTOS_sendto( Socket_t xSocket, const void *pvBuffer, size_t xTotalDataLength, BaseType_t xFlags, const struct freertos_sockaddr *pxDestinationAddress, socklen_t xDestinationAddressLength )
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b08e      	sub	sp, #56	; 0x38
 800b112:	af00      	add	r7, sp, #0
 800b114:	60f8      	str	r0, [r7, #12]
 800b116:	60b9      	str	r1, [r7, #8]
 800b118:	607a      	str	r2, [r7, #4]
 800b11a:	603b      	str	r3, [r7, #0]
NetworkBufferDescriptor_t *pxNetworkBuffer;
IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800b11c:	2303      	movs	r3, #3
 800b11e:	f887 3020 	strb.w	r3, [r7, #32]
 800b122:	2300      	movs	r3, #0
 800b124:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
TickType_t xTicksToWait;
int32_t lReturn = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	633b      	str	r3, [r7, #48]	; 0x30
FreeRTOS_Socket_t *pxSocket;

	pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the
	parameters. */
	( void ) xDestinationAddressLength;
	configASSERT( pvBuffer );
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d109      	bne.n	800b148 <FreeRTOS_sendto+0x3a>
 800b134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b138:	f383 8811 	msr	BASEPRI, r3
 800b13c:	f3bf 8f6f 	isb	sy
 800b140:	f3bf 8f4f 	dsb	sy
 800b144:	62bb      	str	r3, [r7, #40]	; 0x28
 800b146:	e7fe      	b.n	800b146 <FreeRTOS_sendto+0x38>

	if( xTotalDataLength <= ( size_t ) ipMAX_UDP_PAYLOAD_LENGTH )
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 800b14e:	d875      	bhi.n	800b23c <FreeRTOS_sendto+0x12e>
	{
		/* If the socket is not already bound to an address, bind it now.
		Passing NULL as the address parameter tells FreeRTOS_bind() to select
		the address to bind to. */
		if( ( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE ) ||
 800b150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d107      	bne.n	800b168 <FreeRTOS_sendto+0x5a>
			( FreeRTOS_bind( xSocket, NULL, 0u ) == 0 ) )
 800b158:	2200      	movs	r2, #0
 800b15a:	2100      	movs	r1, #0
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f000 f872 	bl	800b246 <FreeRTOS_bind>
 800b162:	4603      	mov	r3, r0
		if( ( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE ) ||
 800b164:	2b00      	cmp	r3, #0
 800b166:	d169      	bne.n	800b23c <FreeRTOS_sendto+0x12e>
		{
			xTicksToWait = pxSocket->xSendBlockTime;
 800b168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16a:	6a1b      	ldr	r3, [r3, #32]
 800b16c:	617b      	str	r3, [r7, #20]
					xTicksToWait = ( TickType_t )0;
				}
			}
			#endif /* ipconfigUSE_CALLBACKS */

			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	f003 0310 	and.w	r3, r3, #16
 800b174:	2b00      	cmp	r3, #0
 800b176:	d001      	beq.n	800b17c <FreeRTOS_sendto+0x6e>
			{
				xTicksToWait = ( TickType_t ) 0;
 800b178:	2300      	movs	r3, #0
 800b17a:	617b      	str	r3, [r7, #20]
			}

			if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	2b00      	cmp	r3, #0
 800b184:	d125      	bne.n	800b1d2 <FreeRTOS_sendto+0xc4>
			{
				/* Zero copy is not set, so obtain a network buffer into
				which the payload will be copied. */
				vTaskSetTimeOutState( &xTimeOut );
 800b186:	f107 0318 	add.w	r3, r7, #24
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fc fda4 	bl	8007cd8 <vTaskSetTimeOutState>

				/* Block until a buffer becomes available, or until a
				timeout has been reached */
				pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( xTotalDataLength + sizeof( UDPPacket_t ), xTicksToWait );
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	332a      	adds	r3, #42	; 0x2a
 800b194:	697a      	ldr	r2, [r7, #20]
 800b196:	4611      	mov	r1, r2
 800b198:	4618      	mov	r0, r3
 800b19a:	f004 fd17 	bl	800fbcc <pxGetNetworkBufferWithDescriptor>
 800b19e:	6378      	str	r0, [r7, #52]	; 0x34

				if( pxNetworkBuffer != NULL )
 800b1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d019      	beq.n	800b1da <FreeRTOS_sendto+0xcc>
				{
					memcpy( ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ), ( void * ) pvBuffer, xTotalDataLength );
 800b1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a8:	699b      	ldr	r3, [r3, #24]
 800b1aa:	332a      	adds	r3, #42	; 0x2a
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f005 fd32 	bl	8010c1a <memcpy>

					if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800b1b6:	f107 0214 	add.w	r2, r7, #20
 800b1ba:	f107 0318 	add.w	r3, r7, #24
 800b1be:	4611      	mov	r1, r2
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fc fdc5 	bl	8007d50 <xTaskCheckForTimeOut>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d106      	bne.n	800b1da <FreeRTOS_sendto+0xcc>
					{
						/* The entire block time has been used up. */
						xTicksToWait = ( TickType_t ) 0;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	617b      	str	r3, [r7, #20]
 800b1d0:	e003      	b.n	800b1da <FreeRTOS_sendto+0xcc>
			else
			{
				/* When zero copy is used, pvBuffer is a pointer to the
				payload of a buffer that has already been obtained from the
				stack.  Obtain the network buffer pointer from the buffer. */
				pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( (void*)pvBuffer );
 800b1d2:	68b8      	ldr	r0, [r7, #8]
 800b1d4:	f7ff f851 	bl	800a27a <pxUDPPayloadBuffer_to_NetworkBuffer>
 800b1d8:	6378      	str	r0, [r7, #52]	; 0x34
			}

			if( pxNetworkBuffer != NULL )
 800b1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d02d      	beq.n	800b23c <FreeRTOS_sendto+0x12e>
			{
				pxNetworkBuffer->xDataLength = xTotalDataLength;
 800b1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	61da      	str	r2, [r3, #28]
				pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800b1e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1e8:	885a      	ldrh	r2, [r3, #2]
 800b1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ec:	841a      	strh	r2, [r3, #32]
				pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800b1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1f6:	845a      	strh	r2, [r3, #34]	; 0x22
				pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
 800b1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1fa:	685a      	ldr	r2, [r3, #4]
 800b1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1fe:	615a      	str	r2, [r3, #20]

				/* The socket options are passed to the IP layer in the
				space that will eventually get used by the Ethernet header. */
				pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800b200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b202:	699b      	ldr	r3, [r3, #24]
 800b204:	3306      	adds	r3, #6
 800b206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b208:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800b20c:	701a      	strb	r2, [r3, #0]

				/* Tell the networking task that the packet needs sending. */
				xStackTxEvent.pvData = pxNetworkBuffer;
 800b20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b210:	627b      	str	r3, [r7, #36]	; 0x24

				/* Ask the IP-task to send this packet */
				if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800b212:	697a      	ldr	r2, [r7, #20]
 800b214:	f107 0320 	add.w	r3, r7, #32
 800b218:	4611      	mov	r1, r2
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7ff f95e 	bl	800a4dc <xSendEventStructToIPTask>
 800b220:	4603      	mov	r3, r0
 800b222:	2b01      	cmp	r3, #1
 800b224:	d102      	bne.n	800b22c <FreeRTOS_sendto+0x11e>
				{
					/* The packet was successfully sent to the IP task. */
					lReturn = ( int32_t ) xTotalDataLength;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	633b      	str	r3, [r7, #48]	; 0x30
 800b22a:	e007      	b.n	800b23c <FreeRTOS_sendto+0x12e>
				}
				else
				{
					/* If the buffer was allocated in this function, release
					it. */
					if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	f003 0301 	and.w	r3, r3, #1
 800b232:	2b00      	cmp	r3, #0
 800b234:	d102      	bne.n	800b23c <FreeRTOS_sendto+0x12e>
					{
						vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800b236:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b238:	f004 fd40 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
	{
		/* The data is longer than the available buffer space. */
		iptraceSENDTO_DATA_TOO_LONG();
	}

	return lReturn;
 800b23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
} /* Tested */
 800b23e:	4618      	mov	r0, r3
 800b240:	3738      	adds	r7, #56	; 0x38
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <FreeRTOS_bind>:
 * be used for both UDP and TCP sockets.  The actual binding will be performed
 * by the IP-task to avoid mutual access to the bound-socket-lists
 * (xBoundUDPSocketsList or xBoundTCPSocketsList).
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket, struct freertos_sockaddr * pxAddress, socklen_t xAddressLength )
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b08a      	sub	sp, #40	; 0x28
 800b24a:	af02      	add	r7, sp, #8
 800b24c:	60f8      	str	r0, [r7, #12]
 800b24e:	60b9      	str	r1, [r7, #8]
 800b250:	607a      	str	r2, [r7, #4]
IPStackEvent_t xBindEvent;
FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	61bb      	str	r3, [r7, #24]
BaseType_t xReturn = 0;
 800b256:	2300      	movs	r3, #0
 800b258:	61fb      	str	r3, [r7, #28]

	( void ) xAddressLength;

	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d003      	beq.n	800b268 <FreeRTOS_bind+0x22>
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b266:	d103      	bne.n	800b270 <FreeRTOS_bind+0x2a>
	{
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b268:	f06f 0315 	mvn.w	r3, #21
 800b26c:	61fb      	str	r3, [r7, #28]
 800b26e:	e044      	b.n	800b2fa <FreeRTOS_bind+0xb4>
	}
	/* Once a socket is bound to a port, it can not be bound to a different
	port number */
	else if( socketSOCKET_IS_BOUND( pxSocket) != pdFALSE )
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	699b      	ldr	r3, [r3, #24]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <FreeRTOS_bind+0x36>
 800b278:	2301      	movs	r3, #1
 800b27a:	e000      	b.n	800b27e <FreeRTOS_bind+0x38>
 800b27c:	2300      	movs	r3, #0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d003      	beq.n	800b28a <FreeRTOS_bind+0x44>
	{
		/* The socket is already bound. */
		FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b282:	f06f 0315 	mvn.w	r3, #21
 800b286:	61fb      	str	r3, [r7, #28]
 800b288:	e037      	b.n	800b2fa <FreeRTOS_bind+0xb4>
	}
	else
	{
		/* Prepare a messages to the IP-task in order to perform the binding.
		The desired port number will be passed in usLocalPort. */
		xBindEvent.eEventType = eSocketBindEvent;
 800b28a:	2308      	movs	r3, #8
 800b28c:	743b      	strb	r3, [r7, #16]
		xBindEvent.pvData = ( void * ) xSocket;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	617b      	str	r3, [r7, #20]
		if( pxAddress != NULL )
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d00e      	beq.n	800b2b6 <FreeRTOS_bind+0x70>
		{
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	885b      	ldrh	r3, [r3, #2]
 800b29c:	021b      	lsls	r3, r3, #8
 800b29e:	b21a      	sxth	r2, r3
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	885b      	ldrh	r3, [r3, #2]
 800b2a4:	0a1b      	lsrs	r3, r3, #8
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	b21b      	sxth	r3, r3
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	b21b      	sxth	r3, r3
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	849a      	strh	r2, [r3, #36]	; 0x24
 800b2b4:	e002      	b.n	800b2bc <FreeRTOS_bind+0x76>
		}
		else
		{
			/* Caller wants to bind to a random port number. */
			pxSocket->usLocalPort = 0u;
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	849a      	strh	r2, [r3, #36]	; 0x24
		}

		/* portMAX_DELAY is used as a the time-out parameter, as binding *must*
		succeed before the socket can be used.  _RB_ The use of an infinite
		block time needs be changed as it could result in the task hanging. */
		if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800b2bc:	f107 0310 	add.w	r3, r7, #16
 800b2c0:	f04f 31ff 	mov.w	r1, #4294967295
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7ff f909 	bl	800a4dc <xSendEventStructToIPTask>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d103      	bne.n	800b2d8 <FreeRTOS_bind+0x92>
		{
			/* Failed to wake-up the IP-task, no use to wait for it */
			FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
			xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800b2d0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b2d4:	61fb      	str	r3, [r7, #28]
 800b2d6:	e010      	b.n	800b2fa <FreeRTOS_bind+0xb4>
		}
		else
		{
			/* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
			job. */
			xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	6858      	ldr	r0, [r3, #4]
 800b2dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	2110      	movs	r1, #16
 800b2e8:	f7fa fbac 	bl	8005a44 <xEventGroupWaitBits>
			if( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE )
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	699b      	ldr	r3, [r3, #24]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d102      	bne.n	800b2fa <FreeRTOS_bind+0xb4>
			{
				xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b2f4:	f06f 0315 	mvn.w	r3, #21
 800b2f8:	61fb      	str	r3, [r7, #28]
			}
		}
	}

	return xReturn;
 800b2fa:	69fb      	ldr	r3, [r7, #28]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3720      	adds	r7, #32
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <vSocketBind>:
 * vSocketBind(): internal version of bind() that should not be called directly.
 * 'xInternal' is used for TCP sockets only: it allows to have several
 * (connected) child sockets bound to the same server port.
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t *pxSocket, struct freertos_sockaddr * pxAddress, size_t uxAddressLength, BaseType_t xInternal )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b08c      	sub	sp, #48	; 0x30
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
 800b310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800b312:	2300      	movs	r3, #0
 800b314:	62fb      	str	r3, [r7, #44]	; 0x2c
#if( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
	struct freertos_sockaddr xAddress;
#endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

#if( ipconfigUSE_TCP == 1 )
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b31c:	2b06      	cmp	r3, #6
 800b31e:	d102      	bne.n	800b326 <vSocketBind+0x22>
	{
		pxSocketList = &xBoundTCPSocketsList;
 800b320:	4b3e      	ldr	r3, [pc, #248]	; (800b41c <vSocketBind+0x118>)
 800b322:	62bb      	str	r3, [r7, #40]	; 0x28
 800b324:	e001      	b.n	800b32a <vSocketBind+0x26>
	}
	else
#endif  /* ipconfigUSE_TCP == 1 */
	{
		pxSocketList = &xBoundUDPSocketsList;
 800b326:	4b3e      	ldr	r3, [pc, #248]	; (800b420 <vSocketBind+0x11c>)
 800b328:	62bb      	str	r3, [r7, #40]	; 0x28

	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the parameters. */
	( void ) uxAddressLength;

	configASSERT( pxSocket );
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d109      	bne.n	800b344 <vSocketBind+0x40>
 800b330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b334:	f383 8811 	msr	BASEPRI, r3
 800b338:	f3bf 8f6f 	isb	sy
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	627b      	str	r3, [r7, #36]	; 0x24
 800b342:	e7fe      	b.n	800b342 <vSocketBind+0x3e>
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34a:	d109      	bne.n	800b360 <vSocketBind+0x5c>
 800b34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b350:	f383 8811 	msr	BASEPRI, r3
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	623b      	str	r3, [r7, #32]
 800b35e:	e7fe      	b.n	800b35e <vSocketBind+0x5a>
		/* pxAddress will be NULL if sendto() was called on a socket without the
		socket being bound to an address.  In this case, automatically allocate
		an address to the socket.  There is a very tiny chance that the allocated
		port will already be in use - if that is the case, then the check below
		[pxListFindListItemWithValue()] will result in an error being returned. */
		if( pxAddress == NULL )
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d105      	bne.n	800b372 <vSocketBind+0x6e>
		{
			pxAddress = &xAddress;
 800b366:	f107 0314 	add.w	r3, r7, #20
 800b36a:	60bb      	str	r3, [r7, #8]
			/* For now, put it to zero, will be assigned later */
			pxAddress->sin_port = 0u;
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	2200      	movs	r2, #0
 800b370:	805a      	strh	r2, [r3, #2]
	}
	#endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

	/* Sockets must be bound before calling FreeRTOS_sendto() if
	ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
	configASSERT( pxAddress );
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d109      	bne.n	800b38c <vSocketBind+0x88>
 800b378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37c:	f383 8811 	msr	BASEPRI, r3
 800b380:	f3bf 8f6f 	isb	sy
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	61fb      	str	r3, [r7, #28]
 800b38a:	e7fe      	b.n	800b38a <vSocketBind+0x86>

	if( pxAddress != NULL )
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d03c      	beq.n	800b40c <vSocketBind+0x108>
	{
		if( pxAddress->sin_port == 0u )
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	885b      	ldrh	r3, [r3, #2]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d109      	bne.n	800b3ae <vSocketBind+0xaa>
		{
			pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 fa9f 	bl	800b8e4 <prvGetPrivatePortNumber>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	805a      	strh	r2, [r3, #2]
		confirmed that the socket was not yet bound to a port.  If it is called
		from the IP-task, no such check is necessary. */

		/* Check to ensure the port is not already in use.  If the bind is
		called internally, a port MAY be used by more than one socket. */
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d004      	beq.n	800b3be <vSocketBind+0xba>
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b3ba:	2b06      	cmp	r3, #6
 800b3bc:	d00c      	beq.n	800b3d8 <vSocketBind+0xd4>
			( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	885b      	ldrh	r3, [r3, #2]
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3c6:	f000 fad9 	bl	800b97c <pxListFindListItemWithValue>
 800b3ca:	4603      	mov	r3, r0
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d003      	beq.n	800b3d8 <vSocketBind+0xd4>
		{
			FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
				pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ? "TC" : "UD",
				FreeRTOS_ntohs( pxAddress->sin_port ) ) );
			xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800b3d0:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800b3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3d6:	e01c      	b.n	800b412 <vSocketBind+0x10e>
		}
		else
		{
			/* Allocate the port number to the socket.
			This macro will set 'xBoundSocketListItem->xItemValue' */
			socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	885b      	ldrh	r3, [r3, #2]
 800b3dc:	461a      	mov	r2, r3
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	609a      	str	r2, [r3, #8]

			/* And also store it in a socket field 'usLocalPort' in host-byte-order,
			mostly used for logging and debugging purposes */
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	885b      	ldrh	r3, [r3, #2]
 800b3e6:	021b      	lsls	r3, r3, #8
 800b3e8:	b21a      	sxth	r2, r3
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	885b      	ldrh	r3, [r3, #2]
 800b3ee:	0a1b      	lsrs	r3, r3, #8
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	b21b      	sxth	r3, r3
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	b21b      	sxth	r3, r3
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	849a      	strh	r2, [r3, #36]	; 0x24
					vTaskSuspendAll();
				}
				#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

				/* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
				vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	3308      	adds	r3, #8
 800b402:	4619      	mov	r1, r3
 800b404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b406:	f7fa fd25 	bl	8005e54 <vListInsertEnd>
 800b40a:	e002      	b.n	800b412 <vSocketBind+0x10e>
			}
		}
	}
	else
	{
		xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800b40c:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800b410:	62fb      	str	r3, [r7, #44]	; 0x2c
	if( xReturn != 0 )
	{
		iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
	}

	return xReturn;
 800b412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
} /* Tested */
 800b414:	4618      	mov	r0, r3
 800b416:	3730      	adds	r7, #48	; 0x30
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	20005924 	.word	0x20005924
 800b420:	20005938 	.word	0x20005938

0800b424 <FreeRTOS_closesocket>:
 * In case of a TCP socket: the connection will not be closed automatically
 * Subsequent messages for the closed socket will be responded to with a RST
 * The IP-task will actually close the socket, after receiving a 'eSocketCloseEvent' message
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
BaseType_t xResult;
#if( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 )
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * )xSocket;
#endif
IPStackEvent_t xCloseEvent;
xCloseEvent.eEventType = eSocketCloseEvent;
 800b42c:	2309      	movs	r3, #9
 800b42e:	733b      	strb	r3, [r7, #12]
xCloseEvent.pvData = ( void * ) xSocket;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	613b      	str	r3, [r7, #16]

	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d003      	beq.n	800b442 <FreeRTOS_closesocket+0x1e>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b440:	d102      	bne.n	800b448 <FreeRTOS_closesocket+0x24>
	{
		xResult = 0;
 800b442:	2300      	movs	r3, #0
 800b444:	617b      	str	r3, [r7, #20]
 800b446:	e00e      	b.n	800b466 <FreeRTOS_closesocket+0x42>
		packet handling. */

		/* Note when changing the time-out value below, it must be checked who is calling
		this function. If it is called by the IP-task, a deadlock could occur.
		The IP-task would only call it in case of a user call-back */
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 800b448:	f107 030c 	add.w	r3, r7, #12
 800b44c:	2100      	movs	r1, #0
 800b44e:	4618      	mov	r0, r3
 800b450:	f7ff f844 	bl	800a4dc <xSendEventStructToIPTask>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d103      	bne.n	800b462 <FreeRTOS_closesocket+0x3e>
		{
			FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
			xResult = -1;
 800b45a:	f04f 33ff 	mov.w	r3, #4294967295
 800b45e:	617b      	str	r3, [r7, #20]
 800b460:	e001      	b.n	800b466 <FreeRTOS_closesocket+0x42>
		}
		else
		{
			xResult = 1;
 800b462:	2301      	movs	r3, #1
 800b464:	617b      	str	r3, [r7, #20]
		}
	}

	return xResult;
 800b466:	697b      	ldr	r3, [r7, #20]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3718      	adds	r7, #24
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <vSocketClose>:

/* This is the internal version of FreeRTOS_closesocket()
 * It will be called by the IPtask only to avoid problems with synchronicity
 */
void *vSocketClose( FreeRTOS_Socket_t *pxSocket )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
NetworkBufferDescriptor_t *pxNetworkBuffer;

	#if( ipconfigUSE_TCP == 1 )
	{
		/* For TCP: clean up a little more. */
		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b47e:	2b06      	cmp	r3, #6
 800b480:	d122      	bne.n	800b4c8 <vSocketClose+0x58>
		{
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b486:	2b00      	cmp	r3, #0
 800b488:	d004      	beq.n	800b494 <vSocketClose+0x24>
				{
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b48e:	4618      	mov	r0, r3
 800b490:	f004 fc14 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
				}
				/* Free the resources which were claimed by the tcpWin member */
				vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	33dc      	adds	r3, #220	; 0xdc
 800b498:	4618      	mov	r0, r3
 800b49a:	f003 fc1b 	bl	800ecd4 <vTCPWindowDestroy>
			}
			#endif /* ipconfigUSE_TCP_WIN */

			/* Free the input and output streams */
			if( pxSocket->u.xTCP.rxStream != NULL )
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d004      	beq.n	800b4b0 <vSocketClose+0x40>
			{
				vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7fb f85a 	bl	8006564 <vPortFree>
			}

			if( pxSocket->u.xTCP.txStream != NULL )
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d004      	beq.n	800b4c2 <vSocketClose+0x52>
			{
				vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7fb f851 	bl	8006564 <vPortFree>
			}

			/* In case this is a child socket, make sure the child-count of the
			parent socket is decreased. */
			prvTCPSetSocketCount( pxSocket );
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f834 	bl	800b530 <prvTCPSetSocketCount>
	}
	#endif  /* ipconfigUSE_TCP == 1 */

	/* Socket must be unbound first, to ensure no more packets are queued on
	it. */
	if( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE )
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	699b      	ldr	r3, [r3, #24]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d001      	beq.n	800b4d4 <vSocketClose+0x64>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e000      	b.n	800b4d6 <vSocketClose+0x66>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d004      	beq.n	800b4e4 <vSocketClose+0x74>
		{
			vTaskSuspendAll();
		}
		#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

		uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	3308      	adds	r3, #8
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7fa fd15 	bl	8005f0e <uxListRemove>
		#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
	}

	/* Now the socket is not bound the list of waiting packets can be
	drained. */
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b4ea:	2b11      	cmp	r3, #17
 800b4ec:	d10f      	bne.n	800b50e <vSocketClose+0x9e>
	{
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800b4ee:	e00a      	b.n	800b506 <vSocketClose+0x96>
		{
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	60fb      	str	r3, [r7, #12]
			uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7fa fd07 	bl	8005f0e <uxListRemove>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f004 fbdb 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1f0      	bne.n	800b4f0 <vSocketClose+0x80>
		}
	}

	if( pxSocket->xEventGroup )
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d004      	beq.n	800b520 <vSocketClose+0xb0>
	{
		vEventGroupDelete( pxSocket->xEventGroup );
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fa fc1b 	bl	8005d56 <vEventGroupDelete>
		}
	}
	#endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

	/* Anf finally, after all resources have been freed, free the socket space */
	vPortFreeSocket( pxSocket );
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7fb f81f 	bl	8006564 <vPortFree>

	return 0;
 800b526:	2300      	movs	r3, #0
} /* Tested */
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <prvTCPSetSocketCount>:
	 * When a child socket gets closed, make sure to update the child-count of the
	 * parent.  When a listening parent socket is closed, make sure no child-sockets
	 * keep a pointer to it.
	 */
	static void prvTCPSetSocketCount( FreeRTOS_Socket_t *pxSocketToDelete )
	{
 800b530:	b480      	push	{r7}
 800b532:	b087      	sub	sp, #28
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
	const ListItem_t *pxIterator;
	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800b538:	4b18      	ldr	r3, [pc, #96]	; (800b59c <prvTCPSetSocketCount+0x6c>)
 800b53a:	613b      	str	r3, [r7, #16]
	FreeRTOS_Socket_t *pxOtherSocket;
	uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b540:	81fb      	strh	r3, [r7, #14]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	617b      	str	r3, [r7, #20]
 800b548:	e01d      	b.n	800b586 <prvTCPSetSocketCount+0x56>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxOtherSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	60bb      	str	r3, [r7, #8]
			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b556:	2b01      	cmp	r3, #1
 800b558:	d112      	bne.n	800b580 <prvTCPSetSocketCount+0x50>
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
 800b55e:	89fa      	ldrh	r2, [r7, #14]
 800b560:	429a      	cmp	r2, r3
 800b562:	d10d      	bne.n	800b580 <prvTCPSetSocketCount+0x50>
				( pxOtherSocket->u.xTCP.usChildCount ) )
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d008      	beq.n	800b580 <prvTCPSetSocketCount+0x50>
			{
				pxOtherSocket->u.xTCP.usChildCount--;
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800b574:	3b01      	subs	r3, #1
 800b576:	b29a      	uxth	r2, r3
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
				FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
					pxOtherSocket->usLocalPort,
					pxOtherSocket->u.xTCP.usChildCount,
					pxOtherSocket->u.xTCP.usBacklog,
					pxOtherSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );
				break;
 800b57e:	e006      	b.n	800b58e <prvTCPSetSocketCount+0x5e>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	617b      	str	r3, [r7, #20]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d1dd      	bne.n	800b54a <prvTCPSetSocketCount+0x1a>
			}
		}
	}
 800b58e:	bf00      	nop
 800b590:	371c      	adds	r7, #28
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	2000592c 	.word	0x2000592c

0800b5a0 <FreeRTOS_setsockopt>:
#endif /* ipconfigUSE_TCP == 1 */

/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_setsockopt( Socket_t xSocket, int32_t lLevel, int32_t lOptionName, const void *pvOptionValue, size_t xOptionLength )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b08c      	sub	sp, #48	; 0x30
 800b5a4:	af02      	add	r7, sp, #8
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	607a      	str	r2, [r7, #4]
 800b5ac:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b5ae:	f06f 0315 	mvn.w	r3, #21
 800b5b2:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t lOptionValue;
FreeRTOS_Socket_t *pxSocket;

	pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	623b      	str	r3, [r7, #32]
	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the parameters. */
	( void ) lLevel;
	( void ) xOptionLength;

	configASSERT( xSocket );
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d109      	bne.n	800b5d2 <FreeRTOS_setsockopt+0x32>
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	613b      	str	r3, [r7, #16]
 800b5d0:	e7fe      	b.n	800b5d0 <FreeRTOS_setsockopt+0x30>

	switch( lOptionName )
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2b0f      	cmp	r3, #15
 800b5d6:	f200 8171 	bhi.w	800b8bc <FreeRTOS_setsockopt+0x31c>
 800b5da:	a201      	add	r2, pc, #4	; (adr r2, 800b5e0 <FreeRTOS_setsockopt+0x40>)
 800b5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e0:	0800b621 	.word	0x0800b621
 800b5e4:	0800b62f 	.word	0x0800b62f
 800b5e8:	0800b65b 	.word	0x0800b65b
 800b5ec:	0800b8bd 	.word	0x0800b8bd
 800b5f0:	0800b691 	.word	0x0800b691
 800b5f4:	0800b691 	.word	0x0800b691
 800b5f8:	0800b8bd 	.word	0x0800b8bd
 800b5fc:	0800b8bd 	.word	0x0800b8bd
 800b600:	0800b8bd 	.word	0x0800b8bd
 800b604:	0800b8bd 	.word	0x0800b8bd
 800b608:	0800b8bd 	.word	0x0800b8bd
 800b60c:	0800b793 	.word	0x0800b793
 800b610:	0800b7cb 	.word	0x0800b7cb
 800b614:	0800b6ed 	.word	0x0800b6ed
 800b618:	0800b801 	.word	0x0800b801
 800b61c:	0800b86b 	.word	0x0800b86b
	{
		case FREERTOS_SO_RCVTIMEO	:
			/* Receive time out. */
			pxSocket->xReceiveBlockTime = *( ( TickType_t * ) pvOptionValue );
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	6a3b      	ldr	r3, [r7, #32]
 800b626:	61da      	str	r2, [r3, #28]
			xReturn = 0;
 800b628:	2300      	movs	r3, #0
 800b62a:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800b62c:	e155      	b.n	800b8da <FreeRTOS_setsockopt+0x33a>

		case FREERTOS_SO_SNDTIMEO	:
			pxSocket->xSendBlockTime = *( ( TickType_t * ) pvOptionValue );
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	6a3b      	ldr	r3, [r7, #32]
 800b634:	621a      	str	r2, [r3, #32]
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800b636:	6a3b      	ldr	r3, [r7, #32]
 800b638:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b63c:	2b11      	cmp	r3, #17
 800b63e:	d109      	bne.n	800b654 <FreeRTOS_setsockopt+0xb4>
			{
				/* The send time out is capped for the reason stated in the
				comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
				in FreeRTOSIPConfig.h (assuming an official configuration file
				is being used. */
				if( pxSocket->xSendBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800b640:	6a3b      	ldr	r3, [r7, #32]
 800b642:	6a1b      	ldr	r3, [r3, #32]
 800b644:	f241 3288 	movw	r2, #5000	; 0x1388
 800b648:	4293      	cmp	r3, r2
 800b64a:	d903      	bls.n	800b654 <FreeRTOS_setsockopt+0xb4>
				{
					pxSocket->xSendBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800b64c:	6a3b      	ldr	r3, [r7, #32]
 800b64e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b652:	621a      	str	r2, [r3, #32]
			{
				/* For TCP socket, it isn't necessary to limit the blocking time
				because	the FreeRTOS_send() function does not wait for a network
				buffer to become available. */
			}
			xReturn = 0;
 800b654:	2300      	movs	r3, #0
 800b656:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800b658:	e13f      	b.n	800b8da <FreeRTOS_setsockopt+0x33a>
				break;
		#endif /* ipconfigUDP_MAX_RX_PACKETS */

		case FREERTOS_SO_UDPCKSUM_OUT :
			/* Turn calculating of the UDP checksum on/off for this socket. */
			lOptionValue = ( BaseType_t ) pvOptionValue;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	61fb      	str	r3, [r7, #28]

			if( lOptionValue == 0 )
 800b65e:	69fb      	ldr	r3, [r7, #28]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d109      	bne.n	800b678 <FreeRTOS_setsockopt+0xd8>
			{
				pxSocket->ucSocketOptions &= ( uint8_t ) ~FREERTOS_SO_UDPCKSUM_OUT;
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b66a:	f023 0302 	bic.w	r3, r3, #2
 800b66e:	b2da      	uxtb	r2, r3
 800b670:	6a3b      	ldr	r3, [r7, #32]
 800b672:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800b676:	e008      	b.n	800b68a <FreeRTOS_setsockopt+0xea>
			}
			else
			{
				pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800b678:	6a3b      	ldr	r3, [r7, #32]
 800b67a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b67e:	f043 0302 	orr.w	r3, r3, #2
 800b682:	b2da      	uxtb	r2, r3
 800b684:	6a3b      	ldr	r3, [r7, #32]
 800b686:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			}
			xReturn = 0;
 800b68a:	2300      	movs	r3, #0
 800b68c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800b68e:	e124      	b.n	800b8da <FreeRTOS_setsockopt+0x33a>
			case FREERTOS_SO_SNDBUF:	/* Set the size of the send buffer, in units of MSS (TCP only) */
			case FREERTOS_SO_RCVBUF:	/* Set the size of the receive buffer, in units of MSS (TCP only) */
				{
					uint32_t ulNewValue;

					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b690:	6a3b      	ldr	r3, [r7, #32]
 800b692:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b696:	2b06      	cmp	r3, #6
 800b698:	f040 8114 	bne.w	800b8c4 <FreeRTOS_setsockopt+0x324>
						FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
							( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2b04      	cmp	r3, #4
 800b6a0:	d104      	bne.n	800b6ac <FreeRTOS_setsockopt+0x10c>
 800b6a2:	6a3b      	ldr	r3, [r7, #32]
 800b6a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f040 8117 	bne.w	800b8da <FreeRTOS_setsockopt+0x33a>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2b05      	cmp	r3, #5
 800b6b0:	d104      	bne.n	800b6bc <FreeRTOS_setsockopt+0x11c>
						( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800b6b2:	6a3b      	ldr	r3, [r7, #32]
 800b6b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f040 810f 	bne.w	800b8da <FreeRTOS_setsockopt+0x33a>
						FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
							( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					ulNewValue = *( ( uint32_t * ) pvOptionValue );
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	61bb      	str	r3, [r7, #24]

					if( lOptionName == FREERTOS_SO_SNDBUF )
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b04      	cmp	r3, #4
 800b6c6:	d10b      	bne.n	800b6e0 <FreeRTOS_setsockopt+0x140>
					{
						/* Round up to nearest MSS size */
						ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800b6c8:	6a3b      	ldr	r3, [r7, #32]
 800b6ca:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	69b8      	ldr	r0, [r7, #24]
 800b6d2:	f7ff fa55 	bl	800ab80 <FreeRTOS_round_up>
 800b6d6:	61b8      	str	r0, [r7, #24]
						pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800b6d8:	6a3b      	ldr	r3, [r7, #32]
 800b6da:	69ba      	ldr	r2, [r7, #24]
 800b6dc:	671a      	str	r2, [r3, #112]	; 0x70
 800b6de:	e002      	b.n	800b6e6 <FreeRTOS_setsockopt+0x146>
					}
					else
					{
						pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800b6e0:	6a3b      	ldr	r3, [r7, #32]
 800b6e2:	69ba      	ldr	r2, [r7, #24]
 800b6e4:	66da      	str	r2, [r3, #108]	; 0x6c
					}
				}
				xReturn = 0;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b6ea:	e0f6      	b.n	800b8da <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_WIN_PROPERTIES:	/* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
				{
					WinProperties_t* pxProps;

					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b6ec:	6a3b      	ldr	r3, [r7, #32]
 800b6ee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b6f2:	2b06      	cmp	r3, #6
 800b6f4:	f040 80e8 	bne.w	800b8c8 <FreeRTOS_setsockopt+0x328>
					{
						FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( ( pxSocket->u.xTCP.txStream != NULL ) || ( pxSocket->u.xTCP.rxStream != NULL ) )
 800b6f8:	6a3b      	ldr	r3, [r7, #32]
 800b6fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f040 80ec 	bne.w	800b8da <FreeRTOS_setsockopt+0x33a>
 800b702:	6a3b      	ldr	r3, [r7, #32]
 800b704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b706:	2b00      	cmp	r3, #0
 800b708:	f040 80e7 	bne.w	800b8da <FreeRTOS_setsockopt+0x33a>
					{
						FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: buffer already created\n" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					pxProps = ( ( WinProperties_t * ) pvOptionValue );
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	617b      	str	r3, [r7, #20]
					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ), sizeof( pxProps->lTxBufSize ) );
 800b710:	697a      	ldr	r2, [r7, #20]
 800b712:	2304      	movs	r3, #4
 800b714:	9300      	str	r3, [sp, #0]
 800b716:	4613      	mov	r3, r2
 800b718:	2204      	movs	r2, #4
 800b71a:	2100      	movs	r1, #0
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f7ff ff3f 	bl	800b5a0 <FreeRTOS_setsockopt>
					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ), sizeof( pxProps->lRxBufSize ) );
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f103 0208 	add.w	r2, r3, #8
 800b728:	2304      	movs	r3, #4
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	4613      	mov	r3, r2
 800b72e:	2205      	movs	r2, #5
 800b730:	2100      	movs	r1, #0
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f7ff ff34 	bl	800b5a0 <FreeRTOS_setsockopt>
					#if( ipconfigUSE_TCP_WIN == 1 )
					{
						pxSocket->u.xTCP.uxRxWinSize = ( uint32_t )pxProps->lRxWinSize;	/* Fixed value: size of the TCP reception window */
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	461a      	mov	r2, r3
 800b73e:	6a3b      	ldr	r3, [r7, #32]
 800b740:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize = ( uint32_t )pxProps->lTxWinSize;	/* Fixed value: size of the TCP transmit window */
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	461a      	mov	r2, r3
 800b74a:	6a3b      	ldr	r3, [r7, #32]
 800b74c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
					}
					#endif

					/* In case the socket has already initialised its tcpWin,
					adapt the window size parameters */
					if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800b750:	6a3b      	ldr	r3, [r7, #32]
 800b752:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800b756:	f003 0301 	and.w	r3, r3, #1
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d015      	beq.n	800b78c <FreeRTOS_setsockopt+0x1ec>
					{
						pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxRxWinSize * pxSocket->u.xTCP.usInitMSS;
 800b760:	6a3b      	ldr	r3, [r7, #32]
 800b762:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b766:	6a3a      	ldr	r2, [r7, #32]
 800b768:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800b76c:	fb02 f203 	mul.w	r2, r2, r3
 800b770:	6a3b      	ldr	r3, [r7, #32]
 800b772:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
						pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxTxWinSize * pxSocket->u.xTCP.usInitMSS;
 800b776:	6a3b      	ldr	r3, [r7, #32]
 800b778:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b77c:	6a3a      	ldr	r2, [r7, #32]
 800b77e:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800b782:	fb02 f203 	mul.w	r2, r2, r3
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
					}
				}

				xReturn = 0;
 800b78c:	2300      	movs	r3, #0
 800b78e:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b790:	e0a3      	b.n	800b8da <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_REUSE_LISTEN_SOCKET:	/* If true, the server-socket will turn into a connected socket */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b792:	6a3b      	ldr	r3, [r7, #32]
 800b794:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b798:	2b06      	cmp	r3, #6
 800b79a:	f040 8097 	bne.w	800b8cc <FreeRTOS_setsockopt+0x32c>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}
					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d007      	beq.n	800b7b6 <FreeRTOS_setsockopt+0x216>
					{
						pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800b7a6:	6a3a      	ldr	r2, [r7, #32]
 800b7a8:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b7ac:	f043 0308 	orr.w	r3, r3, #8
 800b7b0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800b7b4:	e006      	b.n	800b7c4 <FreeRTOS_setsockopt+0x224>
					}
					else
					{
						pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800b7b6:	6a3a      	ldr	r2, [r7, #32]
 800b7b8:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b7bc:	f36f 03c3 	bfc	r3, #3, #1
 800b7c0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
					}
				}
				xReturn = 0;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b7c8:	e087      	b.n	800b8da <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_CLOSE_AFTER_SEND:		/* As soon as the last byte has been transmitted, finalise the connection */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b7ca:	6a3b      	ldr	r3, [r7, #32]
 800b7cc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b7d0:	2b06      	cmp	r3, #6
 800b7d2:	d17d      	bne.n	800b8d0 <FreeRTOS_setsockopt+0x330>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d007      	beq.n	800b7ec <FreeRTOS_setsockopt+0x24c>
					{
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800b7dc:	6a3a      	ldr	r2, [r7, #32]
 800b7de:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b7e2:	f043 0310 	orr.w	r3, r3, #16
 800b7e6:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800b7ea:	e006      	b.n	800b7fa <FreeRTOS_setsockopt+0x25a>
					}
					else
					{
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800b7ec:	6a3a      	ldr	r2, [r7, #32]
 800b7ee:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b7f2:	f36f 1304 	bfc	r3, #4, #1
 800b7f6:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
					}
				}
				xReturn = 0;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b7fe:	e06c      	b.n	800b8da <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_SET_FULL_SIZE:		/* Refuse to send packets smaller than MSS  */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b800:	6a3b      	ldr	r3, [r7, #32]
 800b802:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b806:	2b06      	cmp	r3, #6
 800b808:	d164      	bne.n	800b8d4 <FreeRTOS_setsockopt+0x334>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d007      	beq.n	800b822 <FreeRTOS_setsockopt+0x282>
					{
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800b812:	6a3a      	ldr	r2, [r7, #32]
 800b814:	f892 30dc 	ldrb.w	r3, [r2, #220]	; 0xdc
 800b818:	f043 0302 	orr.w	r3, r3, #2
 800b81c:	f882 30dc 	strb.w	r3, [r2, #220]	; 0xdc
 800b820:	e006      	b.n	800b830 <FreeRTOS_setsockopt+0x290>
					}
					else
					{
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800b822:	6a3a      	ldr	r2, [r7, #32]
 800b824:	f892 30dc 	ldrb.w	r3, [r2, #220]	; 0xdc
 800b828:	f36f 0341 	bfc	r3, #1, #1
 800b82c:	f882 30dc 	strb.w	r3, [r2, #220]	; 0xdc
					}

					if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 800b830:	6a3b      	ldr	r3, [r7, #32]
 800b832:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800b836:	f003 0302 	and.w	r3, r3, #2
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d111      	bne.n	800b864 <FreeRTOS_setsockopt+0x2c4>
						( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800b840:	6a3b      	ldr	r3, [r7, #32]
 800b842:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
					if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 800b846:	2b04      	cmp	r3, #4
 800b848:	d90c      	bls.n	800b864 <FreeRTOS_setsockopt+0x2c4>
						( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800b84a:	6a38      	ldr	r0, [r7, #32]
 800b84c:	f000 fabd 	bl	800bdca <FreeRTOS_tx_size>
 800b850:	4603      	mov	r3, r0
						( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800b852:	2b00      	cmp	r3, #0
 800b854:	d006      	beq.n	800b864 <FreeRTOS_setsockopt+0x2c4>
					{
						pxSocket->u.xTCP.usTimeout = 1u; /* to set/clear bSendFullSize */
 800b856:	6a3b      	ldr	r3, [r7, #32]
 800b858:	2201      	movs	r2, #1
 800b85a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
						xSendEventToIPTask( eTCPTimerEvent );
 800b85e:	2005      	movs	r0, #5
 800b860:	f7fe fe26 	bl	800a4b0 <xSendEventToIPTask>
					}
				}
				xReturn = 0;
 800b864:	2300      	movs	r3, #0
 800b866:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b868:	e037      	b.n	800b8da <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_STOP_RX:		/* Refuse to receive more packts */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b86a:	6a3b      	ldr	r3, [r7, #32]
 800b86c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b870:	2b06      	cmp	r3, #6
 800b872:	d131      	bne.n	800b8d8 <FreeRTOS_setsockopt+0x338>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d007      	beq.n	800b88c <FreeRTOS_setsockopt+0x2ec>
					{
						pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800b87c:	6a3a      	ldr	r2, [r7, #32]
 800b87e:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800b882:	f043 0304 	orr.w	r3, r3, #4
 800b886:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
 800b88a:	e006      	b.n	800b89a <FreeRTOS_setsockopt+0x2fa>
					}
					else
					{
						pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800b88c:	6a3a      	ldr	r2, [r7, #32]
 800b88e:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800b892:	f36f 0382 	bfc	r3, #2, #1
 800b896:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
					}

					pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800b89a:	6a3a      	ldr	r2, [r7, #32]
 800b89c:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800b8a0:	f043 0301 	orr.w	r3, r3, #1
 800b8a4:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = 1u; /* to set/clear bRxStopped */
 800b8a8:	6a3b      	ldr	r3, [r7, #32]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
					xSendEventToIPTask( eTCPTimerEvent );
 800b8b0:	2005      	movs	r0, #5
 800b8b2:	f7fe fdfd 	bl	800a4b0 <xSendEventToIPTask>
				}
				xReturn = 0;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b8ba:	e00e      	b.n	800b8da <FreeRTOS_setsockopt+0x33a>

		#endif  /* ipconfigUSE_TCP == 1 */

		default :
			/* No other options are handled. */
			xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800b8bc:	f06f 036c 	mvn.w	r3, #108	; 0x6c
 800b8c0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800b8c2:	e00a      	b.n	800b8da <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b8c4:	bf00      	nop
 800b8c6:	e008      	b.n	800b8da <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b8c8:	bf00      	nop
 800b8ca:	e006      	b.n	800b8da <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b8cc:	bf00      	nop
 800b8ce:	e004      	b.n	800b8da <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b8d0:	bf00      	nop
 800b8d2:	e002      	b.n	800b8da <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b8d4:	bf00      	nop
 800b8d6:	e000      	b.n	800b8da <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b8d8:	bf00      	nop
	}

	return xReturn;
 800b8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
} /* Tested */
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3728      	adds	r7, #40	; 0x28
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <prvGetPrivatePortNumber>:

/*-----------------------------------------------------------*/

/* Get a free private ('anonymous') port number */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
uint16_t usResult;
BaseType_t xIndex;
const List_t *pxList;

#if ipconfigUSE_TCP == 1
	if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b06      	cmp	r3, #6
 800b8f0:	d104      	bne.n	800b8fc <prvGetPrivatePortNumber+0x18>
	{
		xIndex = socketNEXT_TCP_PORT_NUMBER_INDEX;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	617b      	str	r3, [r7, #20]
		pxList = &xBoundTCPSocketsList;
 800b8f6:	4b1e      	ldr	r3, [pc, #120]	; (800b970 <prvGetPrivatePortNumber+0x8c>)
 800b8f8:	613b      	str	r3, [r7, #16]
 800b8fa:	e003      	b.n	800b904 <prvGetPrivatePortNumber+0x20>
	}
	else
#endif
	{
		xIndex = socketNEXT_UDP_PORT_NUMBER_INDEX;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	617b      	str	r3, [r7, #20]
		pxList = &xBoundUDPSocketsList;
 800b900:	4b1c      	ldr	r3, [pc, #112]	; (800b974 <prvGetPrivatePortNumber+0x90>)
 800b902:	613b      	str	r3, [r7, #16]
	/*_RB_ This needs to be randomised rather than sequential. */
	/* _HT_ Agreed, although many OS's use sequential port numbers, see
	https://www.cymru.com/jtk/misc/ephemeralports.html  */
	for ( ;; )
	{
		++( usNextPortToUse[ xIndex ] );
 800b904:	4a1c      	ldr	r2, [pc, #112]	; (800b978 <prvGetPrivatePortNumber+0x94>)
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b90c:	3301      	adds	r3, #1
 800b90e:	b299      	uxth	r1, r3
 800b910:	4a19      	ldr	r2, [pc, #100]	; (800b978 <prvGetPrivatePortNumber+0x94>)
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if( usNextPortToUse[ xIndex ] >= socketAUTO_PORT_ALLOCATION_MAX_NUMBER )
 800b918:	4a17      	ldr	r2, [pc, #92]	; (800b978 <prvGetPrivatePortNumber+0x94>)
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b920:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800b924:	d305      	bcc.n	800b932 <prvGetPrivatePortNumber+0x4e>
		{
			/* Don't go right back to the start of the dynamic/private port
			range numbers as any persistent sockets are likely to have been
			create first so the early port numbers may still be in use. */
			usNextPortToUse[ xIndex ] = socketAUTO_PORT_ALLOCATION_RESET_NUMBER;
 800b926:	4a14      	ldr	r2, [pc, #80]	; (800b978 <prvGetPrivatePortNumber+0x94>)
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	f44f 4141 	mov.w	r1, #49408	; 0xc100
 800b92e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		usResult = FreeRTOS_htons( usNextPortToUse[ xIndex ] );
 800b932:	4a11      	ldr	r2, [pc, #68]	; (800b978 <prvGetPrivatePortNumber+0x94>)
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b93a:	021b      	lsls	r3, r3, #8
 800b93c:	b21a      	sxth	r2, r3
 800b93e:	490e      	ldr	r1, [pc, #56]	; (800b978 <prvGetPrivatePortNumber+0x94>)
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b946:	0a1b      	lsrs	r3, r3, #8
 800b948:	b29b      	uxth	r3, r3
 800b94a:	b21b      	sxth	r3, r3
 800b94c:	4313      	orrs	r3, r2
 800b94e:	b21b      	sxth	r3, r3
 800b950:	81fb      	strh	r3, [r7, #14]

		if( pxListFindListItemWithValue( pxList, ( TickType_t ) usResult ) == NULL )
 800b952:	89fb      	ldrh	r3, [r7, #14]
 800b954:	4619      	mov	r1, r3
 800b956:	6938      	ldr	r0, [r7, #16]
 800b958:	f000 f810 	bl	800b97c <pxListFindListItemWithValue>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d000      	beq.n	800b964 <prvGetPrivatePortNumber+0x80>
		++( usNextPortToUse[ xIndex ] );
 800b962:	e7cf      	b.n	800b904 <prvGetPrivatePortNumber+0x20>
		{
			break;
 800b964:	bf00      	nop
		}
	}
	return usResult;
 800b966:	89fb      	ldrh	r3, [r7, #14]
} /* Tested */
 800b968:	4618      	mov	r0, r3
 800b96a:	3718      	adds	r7, #24
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	20005924 	.word	0x20005924
 800b974:	20005938 	.word	0x20005938
 800b978:	2000422c 	.word	0x2000422c

0800b97c <pxListFindListItemWithValue>:
/*-----------------------------------------------------------*/

/* pxListFindListItemWithValue: find a list item in a bound socket list
'xWantedItemValue' refers to a port number */
static const ListItem_t * pxListFindListItemWithValue( const List_t *pxList, TickType_t xWantedItemValue )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
const ListItem_t * pxResult = NULL;
 800b986:	2300      	movs	r3, #0
 800b988:	617b      	str	r3, [r7, #20]

	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800b98a:	f7ff f8dd 	bl	800ab48 <xIPIsNetworkTaskReady>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d018      	beq.n	800b9c6 <pxListFindListItemWithValue+0x4a>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d015      	beq.n	800b9c6 <pxListFindListItemWithValue+0x4a>
	{
		const ListItem_t *pxIterator;
		const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( pxList );
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	3308      	adds	r3, #8
 800b99e:	60fb      	str	r3, [r7, #12]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	613b      	str	r3, [r7, #16]
 800b9a6:	e00a      	b.n	800b9be <pxListFindListItemWithValue+0x42>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d102      	bne.n	800b9b8 <pxListFindListItemWithValue+0x3c>
			{
				pxResult = pxIterator;
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	617b      	str	r3, [r7, #20]
				break;
 800b9b6:	e006      	b.n	800b9c6 <pxListFindListItemWithValue+0x4a>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	613b      	str	r3, [r7, #16]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800b9be:	693a      	ldr	r2, [r7, #16]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d1f0      	bne.n	800b9a8 <pxListFindListItemWithValue+0x2c>
			}
		}
	}

	return pxResult;
 800b9c6:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3718      	adds	r7, #24
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <pxUDPSocketLookup>:

/*-----------------------------------------------------------*/

FreeRTOS_Socket_t *pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b086      	sub	sp, #24
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
const ListItem_t *pxListItem;
FreeRTOS_Socket_t *pxSocket = NULL;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	617b      	str	r3, [r7, #20]

	/* Looking up a socket is quite simple, find a match with the local port.

	See if there is a list item associated with the port number on the
	list of bound sockets. */
	pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800b9dc:	6879      	ldr	r1, [r7, #4]
 800b9de:	480e      	ldr	r0, [pc, #56]	; (800ba18 <pxUDPSocketLookup+0x48>)
 800b9e0:	f7ff ffcc 	bl	800b97c <pxListFindListItemWithValue>
 800b9e4:	6138      	str	r0, [r7, #16]

	if( pxListItem != NULL )
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00f      	beq.n	800ba0c <pxUDPSocketLookup+0x3c>
	{
		/* The owner of the list item is the socket itself. */
		pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem );
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	617b      	str	r3, [r7, #20]
		configASSERT( pxSocket != NULL );
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d109      	bne.n	800ba0c <pxUDPSocketLookup+0x3c>
 800b9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fc:	f383 8811 	msr	BASEPRI, r3
 800ba00:	f3bf 8f6f 	isb	sy
 800ba04:	f3bf 8f4f 	dsb	sy
 800ba08:	60fb      	str	r3, [r7, #12]
 800ba0a:	e7fe      	b.n	800ba0a <pxUDPSocketLookup+0x3a>
	}
	return pxSocket;
 800ba0c:	697b      	ldr	r3, [r7, #20]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3718      	adds	r7, #24
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	20005938 	.word	0x20005938

0800ba1c <vSocketWakeUpUser>:
}

/*-----------------------------------------------------------*/

void vSocketWakeUpUser( FreeRTOS_Socket_t *pxSocket )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
	}
	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		if( pxSocket->pxSocketSet != NULL )
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d015      	beq.n	800ba58 <vSocketWakeUpUser+0x3c>
		{
			EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & eSELECT_ALL;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	0a1b      	lsrs	r3, r3, #8
 800ba32:	f003 030f 	and.w	r3, r3, #15
 800ba36:	60fb      	str	r3, [r7, #12]
			if( xSelectBits != 0ul )
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00c      	beq.n	800ba58 <vSocketWakeUpUser+0x3c>
			{
				pxSocket->xSocketBits |= xSelectBits;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	431a      	orrs	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	631a      	str	r2, [r3, #48]	; 0x30
				xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	68f9      	ldr	r1, [r7, #12]
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fa f8f6 	bl	8005c44 <xEventGroupSetBits>
			}
		}

		pxSocket->xEventBits &= eSOCKET_ALL;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	601a      	str	r2, [r3, #0]
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0u ) )
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00b      	beq.n	800ba84 <vSocketWakeUpUser+0x68>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d007      	beq.n	800ba84 <vSocketWakeUpUser+0x68>
	{
		xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685a      	ldr	r2, [r3, #4]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4610      	mov	r0, r2
 800ba80:	f7fa f8e0 	bl	8005c44 <xEventGroupSetBits>
	}

	pxSocket->xEventBits = 0ul;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	601a      	str	r2, [r3, #0]
}
 800ba8a:	bf00      	nop
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
	...

0800ba94 <xTCPTimerCheck>:
	 * - Send new data
	 * - Send a keep-alive packet
	 * - Check for timeout (in non-connected states only)
	 */
	TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
	{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b088      	sub	sp, #32
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket;
	TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800ba9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800baa0:	61fb      	str	r3, [r7, #28]
	TickType_t xNow = xTaskGetTickCount();
 800baa2:	f7fb fed3 	bl	800784c <xTaskGetTickCount>
 800baa6:	6138      	str	r0, [r7, #16]
	static TickType_t xLastTime = 0u;
	TickType_t xDelta = xNow - xLastTime;
 800baa8:	4b30      	ldr	r3, [pc, #192]	; (800bb6c <xTCPTimerCheck+0xd8>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	693a      	ldr	r2, [r7, #16]
 800baae:	1ad3      	subs	r3, r2, r3
 800bab0:	61bb      	str	r3, [r7, #24]
	ListItem_t* pxEnd = ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
 800bab2:	4b2f      	ldr	r3, [pc, #188]	; (800bb70 <xTCPTimerCheck+0xdc>)
 800bab4:	60fb      	str	r3, [r7, #12]
	ListItem_t *pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800bab6:	4b2f      	ldr	r3, [pc, #188]	; (800bb74 <xTCPTimerCheck+0xe0>)
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	617b      	str	r3, [r7, #20]

		xLastTime = xNow;
 800babc:	4a2b      	ldr	r2, [pc, #172]	; (800bb6c <xTCPTimerCheck+0xd8>)
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	6013      	str	r3, [r2, #0]

		if( xDelta == 0u )
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d148      	bne.n	800bb5a <xTCPTimerCheck+0xc6>
		{
			xDelta = 1u;
 800bac8:	2301      	movs	r3, #1
 800baca:	61bb      	str	r3, [r7, #24]
		}

		while( pxIterator != pxEnd )
 800bacc:	e045      	b.n	800bb5a <xTCPTimerCheck+0xc6>
		{
			pxSocket = ( FreeRTOS_Socket_t * )listGET_LIST_ITEM_OWNER( pxIterator );
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	60bb      	str	r3, [r7, #8]
			pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	617b      	str	r3, [r7, #20]

			/* Sockets with 'tmout == 0' do not need any regular attention. */
			if( pxSocket->u.xTCP.usTimeout == 0u )
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d100      	bne.n	800bae6 <xTCPTimerCheck+0x52>
			{
				continue;
 800bae4:	e039      	b.n	800bb5a <xTCPTimerCheck+0xc6>
			}

			if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800baec:	461a      	mov	r2, r3
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d90a      	bls.n	800bb0a <xTCPTimerCheck+0x76>
			{
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	1ad3      	subs	r3, r2, r3
 800bb00:	b29a      	uxth	r2, r3
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bb08:	e00a      	b.n	800bb20 <xTCPTimerCheck+0x8c>
			}
			else
			{
				pxSocket->u.xTCP.usTimeout = 0u;
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

				/* Within this function, the socket might want to send a delayed
				ack or send out data or whatever it needs to do. */
				if( xTCPSocketCheck( pxSocket ) < 0 )
 800bb12:	68b8      	ldr	r0, [r7, #8]
 800bb14:	f000 fdfc 	bl	800c710 <xTCPSocketCheck>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	da00      	bge.n	800bb20 <xTCPTimerCheck+0x8c>
				{
					/* Continue because the socket was deleted. */
					continue;
 800bb1e:	e01c      	b.n	800bb5a <xTCPTimerCheck+0xc6>
			}

			/* In xEventBits the driver may indicate that the socket has
			important events for the user.  These are only done just before the
			IP-task goes to sleep. */
			if( pxSocket->xEventBits != 0u )
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d008      	beq.n	800bb3a <xTCPTimerCheck+0xa6>
			{
				if( xWillSleep != pdFALSE )
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d003      	beq.n	800bb36 <xTCPTimerCheck+0xa2>
				{
					/* The IP-task is about to go to sleep, so messages can be
					sent to the socket owners. */
					vSocketWakeUpUser( pxSocket );
 800bb2e:	68b8      	ldr	r0, [r7, #8]
 800bb30:	f7ff ff74 	bl	800ba1c <vSocketWakeUpUser>
 800bb34:	e001      	b.n	800bb3a <xTCPTimerCheck+0xa6>
				}
				else
				{
					/* Or else make sure this will be called again to wake-up
					the sockets' owner. */
					xShortest = ( TickType_t ) 0;
 800bb36:	2300      	movs	r3, #0
 800bb38:	61fb      	str	r3, [r7, #28]
				}
			}

			if( ( pxSocket->u.xTCP.usTimeout != 0u ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00a      	beq.n	800bb5a <xTCPTimerCheck+0xc6>
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d203      	bcs.n	800bb5a <xTCPTimerCheck+0xc6>
			{
				xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bb58:	61fb      	str	r3, [r7, #28]
		while( pxIterator != pxEnd )
 800bb5a:	697a      	ldr	r2, [r7, #20]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d1b5      	bne.n	800bace <xTCPTimerCheck+0x3a>
			}
		}

		return xShortest;
 800bb62:	69fb      	ldr	r3, [r7, #28]
	}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3720      	adds	r7, #32
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	20004230 	.word	0x20004230
 800bb70:	2000592c 	.word	0x2000592c
 800bb74:	20005924 	.word	0x20005924

0800bb78 <pxTCPSocketLookup>:
	 * looking up a socket is a little more complex:
	 * Both a local port, and a remote port and IP address are being used
	 * For a socket in listening mode, the remote port and IP address are both 0
	 */
	FreeRTOS_Socket_t *pxTCPSocketLookup( uint32_t ulLocalIP, UBaseType_t uxLocalPort, uint32_t ulRemoteIP, UBaseType_t uxRemotePort )
	{
 800bb78:	b480      	push	{r7}
 800bb7a:	b08b      	sub	sp, #44	; 0x2c
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
 800bb84:	603b      	str	r3, [r7, #0]
	ListItem_t *pxIterator;
	FreeRTOS_Socket_t *pxResult = NULL, *pxListenSocket = NULL;
 800bb86:	2300      	movs	r3, #0
 800bb88:	623b      	str	r3, [r7, #32]
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	61fb      	str	r3, [r7, #28]
	MiniListItem_t *pxEnd = ( MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800bb8e:	4b1c      	ldr	r3, [pc, #112]	; (800bc00 <pxTCPSocketLookup+0x88>)
 800bb90:	61bb      	str	r3, [r7, #24]

		/* Parameter not yet supported. */
		( void ) ulLocalIP;

		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	627b      	str	r3, [r7, #36]	; 0x24
 800bb98:	e021      	b.n	800bbde <pxTCPSocketLookup+0x66>
			 pxIterator != ( ListItem_t * ) pxEnd;
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	617b      	str	r3, [r7, #20]

			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d115      	bne.n	800bbd8 <pxTCPSocketLookup+0x60>
			{
				if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d102      	bne.n	800bbbc <pxTCPSocketLookup+0x44>
				{
					/* If this is a socket listening to uxLocalPort, remember it
					in case there is no perfect match. */
					pxListenSocket = pxSocket;
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	61fb      	str	r3, [r7, #28]
 800bbba:	e00d      	b.n	800bbd8 <pxTCPSocketLookup+0x60>
				}
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d107      	bne.n	800bbd8 <pxTCPSocketLookup+0x60>
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d102      	bne.n	800bbd8 <pxTCPSocketLookup+0x60>
				{
					/* For sockets not in listening mode, find a match with
					xLocalPort, ulRemoteIP AND xRemotePort. */
					pxResult = pxSocket;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	623b      	str	r3, [r7, #32]
					break;
 800bbd6:	e006      	b.n	800bbe6 <pxTCPSocketLookup+0x6e>
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 800bbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	627b      	str	r3, [r7, #36]	; 0x24
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800bbde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d1d9      	bne.n	800bb9a <pxTCPSocketLookup+0x22>
				}
			}
		}
		if( pxResult == NULL )
 800bbe6:	6a3b      	ldr	r3, [r7, #32]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d101      	bne.n	800bbf0 <pxTCPSocketLookup+0x78>
		{
			/* An exact match was not found, maybe a listening socket was
			found. */
			pxResult = pxListenSocket;
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	623b      	str	r3, [r7, #32]
		}

		return pxResult;
 800bbf0:	6a3b      	ldr	r3, [r7, #32]
	}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	372c      	adds	r7, #44	; 0x2c
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	2000592c 	.word	0x2000592c

0800bc04 <prvTCPCreateStream>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP == 1 )

	static StreamBuffer_t *prvTCPCreateStream ( FreeRTOS_Socket_t *pxSocket, BaseType_t xIsInputStream )
	{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b086      	sub	sp, #24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
	size_t uxLength;
	size_t uxSize;

		/* Now that a stream is created, the maximum size is fixed before
		creation, it could still be changed with setsockopt(). */
		if( xIsInputStream != pdFALSE )
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d01c      	beq.n	800bc4e <prvTCPCreateStream+0x4a>
		{
			uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc18:	617b      	str	r3, [r7, #20]

			if( pxSocket->u.xTCP.uxLittleSpace == 0ul )
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d107      	bne.n	800bc32 <prvTCPCreateStream+0x2e>
			{
				pxSocket->u.xTCP.uxLittleSpace  = ( 1ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why divide by 5?  Can this be changed to a #define? */
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc26:	4a25      	ldr	r2, [pc, #148]	; (800bcbc <prvTCPCreateStream+0xb8>)
 800bc28:	fba2 2303 	umull	r2, r3, r2, r3
 800bc2c:	089a      	lsrs	r2, r3, #2
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	665a      	str	r2, [r3, #100]	; 0x64
			}

			if( pxSocket->u.xTCP.uxEnoughSpace == 0ul )
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10c      	bne.n	800bc54 <prvTCPCreateStream+0x50>
			{
				pxSocket->u.xTCP.uxEnoughSpace = ( 4ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why multiply by 4?  Maybe sock80_PERCENT?*/
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4a1e      	ldr	r2, [pc, #120]	; (800bcbc <prvTCPCreateStream+0xb8>)
 800bc42:	fba2 2303 	umull	r2, r3, r2, r3
 800bc46:	089a      	lsrs	r2, r3, #2
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	669a      	str	r2, [r3, #104]	; 0x68
 800bc4c:	e002      	b.n	800bc54 <prvTCPCreateStream+0x50>
			}
		}
		else
		{
			uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc52:	617b      	str	r3, [r7, #20]
		}

		/* Add an extra 4 (or 8) bytes. */
		uxLength += sizeof( size_t );
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	3304      	adds	r3, #4
 800bc58:	617b      	str	r3, [r7, #20]

		/* And make the length a multiple of sizeof( size_t ). */
		uxLength &= ~( sizeof( size_t ) - 1u );
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	f023 0303 	bic.w	r3, r3, #3
 800bc60:	617b      	str	r3, [r7, #20]

		uxSize = sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) + uxLength;
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	3314      	adds	r3, #20
 800bc66:	613b      	str	r3, [r7, #16]

		pxBuffer = ( StreamBuffer_t * )pvPortMallocLarge( uxSize );
 800bc68:	6938      	ldr	r0, [r7, #16]
 800bc6a:	f7fa fbb9 	bl	80063e0 <pvPortMalloc>
 800bc6e:	60f8      	str	r0, [r7, #12]

		if( pxBuffer == NULL )
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10b      	bne.n	800bc8e <prvTCPCreateStream+0x8a>
		{
			FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
			pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800bc7c:	f043 0308 	orr.w	r3, r3, #8
 800bc80:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800bc84:	2108      	movs	r1, #8
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f001 fa5f 	bl	800d14a <vTCPStateChange>
 800bc8c:	e011      	b.n	800bcb2 <prvTCPCreateStream+0xae>
		}
		else
		{
			/* Clear the markers of the stream */
			memset( pxBuffer, '\0', sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800bc8e:	2214      	movs	r2, #20
 800bc90:	2100      	movs	r1, #0
 800bc92:	68f8      	ldr	r0, [r7, #12]
 800bc94:	f004 ffe6 	bl	8010c64 <memset>
			pxBuffer->LENGTH = ( size_t ) uxLength ;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	697a      	ldr	r2, [r7, #20]
 800bc9c:	611a      	str	r2, [r3, #16]
			if( xTCPWindowLoggingLevel != 0 )
			{
				FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %lu bytes (total %lu)\n", xIsInputStream ? 'R' : 'T', uxLength, uxSize ) );
			}

			if( xIsInputStream != 0 )
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d003      	beq.n	800bcac <prvTCPCreateStream+0xa8>
			{
				pxSocket->u.xTCP.rxStream = pxBuffer;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	675a      	str	r2, [r3, #116]	; 0x74
 800bcaa:	e002      	b.n	800bcb2 <prvTCPCreateStream+0xae>
			}
			else
			{
				pxSocket->u.xTCP.txStream = pxBuffer;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	679a      	str	r2, [r3, #120]	; 0x78
			}
		}

		return pxBuffer;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
	}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3718      	adds	r7, #24
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	cccccccd 	.word	0xcccccccd

0800bcc0 <lTCPAddRxdata>:
	/*
	 * Add data to the RxStream.  When uxOffset > 0, data has come in out-of-order
	 * and will be put in front of the head so it can not be popped by the user.
	 */
	int32_t lTCPAddRxdata( FreeRTOS_Socket_t *pxSocket, size_t uxOffset, const uint8_t *pcData, uint32_t ulByteCount )
	{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b088      	sub	sp, #32
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	607a      	str	r2, [r7, #4]
 800bccc:	603b      	str	r3, [r7, #0]
	StreamBuffer_t *pxStream = pxSocket->u.xTCP.rxStream;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcd2:	61fb      	str	r3, [r7, #28]
		/* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
		if( pucData != NULL ) copy data the the buffer
		if( pucData == NULL ) no copying, just advance rxHead
		if( uxOffset != 0 ) Just store data which has come out-of-order
		if( uxOffset == 0 ) Also advance rxHead */
		if( pxStream == NULL )
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d10a      	bne.n	800bcf0 <lTCPAddRxdata+0x30>
		{
			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800bcda:	2101      	movs	r1, #1
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f7ff ff91 	bl	800bc04 <prvTCPCreateStream>
 800bce2:	61f8      	str	r0, [r7, #28]
			if( pxStream == NULL )
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d102      	bne.n	800bcf0 <lTCPAddRxdata+0x30>
			{
				return -1;
 800bcea:	f04f 33ff 	mov.w	r3, #4294967295
 800bcee:	e045      	b.n	800bd7c <lTCPAddRxdata+0xbc>
				pcData = NULL;
			}
		}
		#endif /* ipconfigUSE_CALLBACKS */

		xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	68b9      	ldr	r1, [r7, #8]
 800bcf6:	69f8      	ldr	r0, [r7, #28]
 800bcf8:	f000 fa97 	bl	800c22a <uxStreamBufferAdd>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	61bb      	str	r3, [r7, #24]
					pxStream->uxFront ) );
			}
		}
		#endif /* ipconfigHAS_DEBUG_PRINTF */

		if( uxOffset == 0u )
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d139      	bne.n	800bd7a <lTCPAddRxdata+0xba>
					}
				} else
			#endif /* ipconfigUSE_CALLBACKS */
			{
				/* See if running out of space. */
				if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d11f      	bne.n	800bd56 <lTCPAddRxdata+0x96>
				{
					size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7fe ff96 	bl	800ac4c <uxStreamBufferFrontSpace>
 800bd20:	6178      	str	r0, [r7, #20]
					if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace  )
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d314      	bcc.n	800bd56 <lTCPAddRxdata+0x96>
					{
						pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800bd2c:	68fa      	ldr	r2, [r7, #12]
 800bd2e:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800bd32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd36:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
						pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800bd40:	f043 0301 	orr.w	r3, r3, #1
 800bd44:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

						/* bLowWater was reached, send the changed window size. */
						pxSocket->u.xTCP.usTimeout = 1u;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
						xSendEventToIPTask( eTCPTimerEvent );
 800bd50:	2005      	movs	r0, #5
 800bd52:	f7fe fbad 	bl	800a4b0 <xSendEventToIPTask>
					}
				}

				/* New incoming data is available, wake up the user.   User's
				semaphores will be set just before the IP-task goes asleep. */
				pxSocket->xEventBits |= eSOCKET_RECEIVE;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f043 0201 	orr.w	r2, r3, #1
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	601a      	str	r2, [r3, #0]

				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
				{
					if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd66:	f003 0301 	and.w	r3, r3, #1
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d005      	beq.n	800bd7a <lTCPAddRxdata+0xba>
					{
						pxSocket->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	601a      	str	r2, [r3, #0]
				}
				#endif
			}
		}

		return xResult;
 800bd7a:	69bb      	ldr	r3, [r7, #24]
	}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3720      	adds	r7, #32
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <FreeRTOS_tx_space>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP ==1 )

	BaseType_t FreeRTOS_tx_space( Socket_t xSocket )
	{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800bd96:	2b06      	cmp	r3, #6
 800bd98:	d003      	beq.n	800bda2 <FreeRTOS_tx_space+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bd9a:	f06f 0315 	mvn.w	r3, #21
 800bd9e:	60fb      	str	r3, [r7, #12]
 800bda0:	e00e      	b.n	800bdc0 <FreeRTOS_tx_space+0x3c>
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d007      	beq.n	800bdba <FreeRTOS_tx_space+0x36>
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSpace ( pxSocket->u.xTCP.txStream );
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7fe ff38 	bl	800ac24 <uxStreamBufferGetSpace>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	60fb      	str	r3, [r7, #12]
 800bdb8:	e002      	b.n	800bdc0 <FreeRTOS_tx_space+0x3c>
			}
			else
			{
				xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdbe:	60fb      	str	r3, [r7, #12]
			}
		}

		return xReturn;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
	}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <FreeRTOS_tx_size>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP == 1 )

	BaseType_t FreeRTOS_tx_size( Socket_t xSocket )
	{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b084      	sub	sp, #16
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800bddc:	2b06      	cmp	r3, #6
 800bdde:	d003      	beq.n	800bde8 <FreeRTOS_tx_size+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bde0:	f06f 0315 	mvn.w	r3, #21
 800bde4:	60fb      	str	r3, [r7, #12]
 800bde6:	e00d      	b.n	800be04 <FreeRTOS_tx_size+0x3a>
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d007      	beq.n	800be00 <FreeRTOS_tx_size+0x36>
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSize ( pxSocket->u.xTCP.txStream );
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7fe ff3d 	bl	800ac74 <uxStreamBufferGetSize>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	60fb      	str	r3, [r7, #12]
 800bdfe:	e001      	b.n	800be04 <FreeRTOS_tx_size+0x3a>
			}
			else
			{
				xReturn = 0;
 800be00:	2300      	movs	r3, #0
 800be02:	60fb      	str	r3, [r7, #12]
			}
		}

		return xReturn;
 800be04:	68fb      	ldr	r3, [r7, #12]
	}
 800be06:	4618      	mov	r0, r3
 800be08:	3710      	adds	r7, #16
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <FreeRTOS_rx_size>:

	/*
	 * Returns the number of bytes which can be read.
	 */
	BaseType_t FreeRTOS_rx_size( Socket_t xSocket )
	{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b084      	sub	sp, #16
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800be20:	2b06      	cmp	r3, #6
 800be22:	d003      	beq.n	800be2c <FreeRTOS_rx_size+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800be24:	f06f 0315 	mvn.w	r3, #21
 800be28:	60fb      	str	r3, [r7, #12]
 800be2a:	e00d      	b.n	800be48 <FreeRTOS_rx_size+0x3a>
		}
		else if( pxSocket->u.xTCP.rxStream != NULL )
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be30:	2b00      	cmp	r3, #0
 800be32:	d007      	beq.n	800be44 <FreeRTOS_rx_size+0x36>
		{
			xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be38:	4618      	mov	r0, r3
 800be3a:	f7fe ff1b 	bl	800ac74 <uxStreamBufferGetSize>
 800be3e:	4603      	mov	r3, r0
 800be40:	60fb      	str	r3, [r7, #12]
 800be42:	e001      	b.n	800be48 <FreeRTOS_rx_size+0x3a>
		}
		else
		{
			xReturn = 0;
 800be44:	2300      	movs	r3, #0
 800be46:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800be48:	68fb      	ldr	r3, [r7, #12]
	}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
	...

0800be54 <vSocketSelect>:
/*-----------------------------------------------------------*/

#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )

	void vSocketSelect( SocketSelect_t *pxSocketSet )
	{
 800be54:	b580      	push	{r7, lr}
 800be56:	b08c      	sub	sp, #48	; 0x30
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
	BaseType_t xRound;
	EventBits_t xSocketBits, xBitsToClear;
	#if ipconfigUSE_TCP == 1
		BaseType_t xLastRound = 1;
 800be5c:	2301      	movs	r3, #1
 800be5e:	613b      	str	r3, [r7, #16]
	#else
		BaseType_t xLastRound = 0;
	#endif

		/* These flags will be switched on after checking the socket status. */
		EventBits_t xGroupBits = 0;
 800be60:	2300      	movs	r3, #0
 800be62:	627b      	str	r3, [r7, #36]	; 0x24
		pxSocketSet->pxSocket = NULL;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	609a      	str	r2, [r3, #8]

		for( xRound = 0; xRound <= xLastRound; xRound++ )
 800be6a:	2300      	movs	r3, #0
 800be6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be6e:	e0cc      	b.n	800c00a <vSocketSelect+0x1b6>
		{
			const ListItem_t *pxIterator;
			const MiniListItem_t *pxEnd;
			if( xRound == 0 )
 800be70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be72:	2b00      	cmp	r3, #0
 800be74:	d102      	bne.n	800be7c <vSocketSelect+0x28>
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundUDPSocketsList );
 800be76:	4b7b      	ldr	r3, [pc, #492]	; (800c064 <vSocketSelect+0x210>)
 800be78:	61fb      	str	r3, [r7, #28]
 800be7a:	e001      	b.n	800be80 <vSocketSelect+0x2c>
			}
		#if ipconfigUSE_TCP == 1
			else
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800be7c:	4b7a      	ldr	r3, [pc, #488]	; (800c068 <vSocketSelect+0x214>)
 800be7e:	61fb      	str	r3, [r7, #28]
			}
		#endif /* ipconfigUSE_TCP == 1 */
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800be80:	69fb      	ldr	r3, [r7, #28]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	623b      	str	r3, [r7, #32]
 800be86:	e0b8      	b.n	800bffa <vSocketSelect+0x1a6>
				 pxIterator != ( const ListItem_t * ) pxEnd;
				 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
			{
				FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800be88:	6a3b      	ldr	r3, [r7, #32]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	60fb      	str	r3, [r7, #12]
				if( pxSocket->pxSocketSet != pxSocketSet )
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	429a      	cmp	r2, r3
 800be96:	f040 80ac 	bne.w	800bff2 <vSocketSelect+0x19e>
				{
					/* Socket does not belong to this select group. */
					continue;
				}
				xSocketBits = 0;
 800be9a:	2300      	movs	r3, #0
 800be9c:	62bb      	str	r3, [r7, #40]	; 0x28

				#if( ipconfigUSE_TCP == 1 )
					if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP )
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800bea4:	2b06      	cmp	r3, #6
 800bea6:	f040 808e 	bne.w	800bfc6 <vSocketSelect+0x172>
					{
						/* Check if the socket has already been accepted by the
						owner.  If not, it is useless to return it from a
						select(). */
						BaseType_t bAccepted = pdFALSE;
 800beaa:	2300      	movs	r3, #0
 800beac:	61bb      	str	r3, [r7, #24]

						if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800beb4:	f003 0304 	and.w	r3, r3, #4
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d109      	bne.n	800bed2 <vSocketSelect+0x7e>
						{
							if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bec4:	f003 0302 	and.w	r3, r3, #2
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	2b00      	cmp	r3, #0
 800becc:	d101      	bne.n	800bed2 <vSocketSelect+0x7e>
							{
								bAccepted = pdTRUE;
 800bece:	2301      	movs	r3, #1
 800bed0:	61bb      	str	r3, [r7, #24]
							}
						}

						/* Is the set owner interested in READ events? */
						if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed6:	f003 0301 	and.w	r3, r3, #1
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d023      	beq.n	800bf26 <vSocketSelect+0xd2>
						{
							if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d111      	bne.n	800bf0c <vSocketSelect+0xb8>
							{
								if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != 0 ) )
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beec:	2b00      	cmp	r3, #0
 800beee:	d01a      	beq.n	800bf26 <vSocketSelect+0xd2>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bef4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bef8:	f003 0302 	and.w	r3, r3, #2
 800befc:	b2db      	uxtb	r3, r3
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d011      	beq.n	800bf26 <vSocketSelect+0xd2>
								{
									xSocketBits |= eSELECT_READ;
 800bf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf04:	f043 0301 	orr.w	r3, r3, #1
 800bf08:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf0a:	e00c      	b.n	800bf26 <vSocketSelect+0xd2>
								}
							}
							else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d009      	beq.n	800bf26 <vSocketSelect+0xd2>
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f7ff ff7b 	bl	800be0e <FreeRTOS_rx_size>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	dd03      	ble.n	800bf26 <vSocketSelect+0xd2>
							{
								xSocketBits |= eSELECT_READ;
 800bf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf20:	f043 0301 	orr.w	r3, r3, #1
 800bf24:	62bb      	str	r3, [r7, #40]	; 0x28
							}
						}
						/* Is the set owner interested in EXCEPTION events? */
						if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2a:	f003 0304 	and.w	r3, r3, #4
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00d      	beq.n	800bf4e <vSocketSelect+0xfa>
						{
							if( ( pxSocket->u.xTCP.ucTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == eCLOSED ) )
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bf38:	2b08      	cmp	r3, #8
 800bf3a:	d004      	beq.n	800bf46 <vSocketSelect+0xf2>
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d103      	bne.n	800bf4e <vSocketSelect+0xfa>
							{
								xSocketBits |= eSELECT_EXCEPT;
 800bf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf48:	f043 0304 	orr.w	r3, r3, #4
 800bf4c:	62bb      	str	r3, [r7, #40]	; 0x28
							}
						}

						/* Is the set owner interested in WRITE events? */
						if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf52:	f003 0302 	and.w	r3, r3, #2
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d043      	beq.n	800bfe2 <vSocketSelect+0x18e>
						{
							BaseType_t bMatch = pdFALSE;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	617b      	str	r3, [r7, #20]

							if( bAccepted != 0 )
 800bf5e:	69bb      	ldr	r3, [r7, #24]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d007      	beq.n	800bf74 <vSocketSelect+0x120>
							{
								if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f7ff ff0d 	bl	800bd84 <FreeRTOS_tx_space>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	dd01      	ble.n	800bf74 <vSocketSelect+0x120>
								{
									bMatch = pdTRUE;
 800bf70:	2301      	movs	r3, #1
 800bf72:	617b      	str	r3, [r7, #20]
								}
							}

							if( bMatch == pdFALSE )
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d11d      	bne.n	800bfb6 <vSocketSelect+0x162>
							{
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf80:	f003 0308 	and.w	r3, r3, #8
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d015      	beq.n	800bfb6 <vSocketSelect+0x162>
									( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800bf90:	2b04      	cmp	r3, #4
 800bf92:	d910      	bls.n	800bfb6 <vSocketSelect+0x162>
									( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf9a:	f003 0310 	and.w	r3, r3, #16
 800bf9e:	b2db      	uxtb	r3, r3
									( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d108      	bne.n	800bfb6 <vSocketSelect+0x162>
								{
									pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800bfaa:	f043 0310 	orr.w	r3, r3, #16
 800bfae:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
									bMatch = pdTRUE;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	617b      	str	r3, [r7, #20]
								}
							}

							if( bMatch != pdFALSE )
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d012      	beq.n	800bfe2 <vSocketSelect+0x18e>
							{
								xSocketBits |= eSELECT_WRITE;
 800bfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbe:	f043 0302 	orr.w	r3, r3, #2
 800bfc2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfc4:	e00d      	b.n	800bfe2 <vSocketSelect+0x18e>
					}
					else
				#endif /* ipconfigUSE_TCP == 1 */
				{
					/* Select events for UDP are simpler. */
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d007      	beq.n	800bfe2 <vSocketSelect+0x18e>
						( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d003      	beq.n	800bfe2 <vSocketSelect+0x18e>
					{
						xSocketBits |= eSELECT_READ;
 800bfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfdc:	f043 0301 	orr.w	r3, r3, #1
 800bfe0:	62bb      	str	r3, [r7, #40]	; 0x28
					/* The WRITE and EXCEPT bits are not used for UDP */
				}	/* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

				/* Each socket keeps its own event flags, which are looked-up
				by FreeRTOS_FD_ISSSET() */
				pxSocket->xSocketBits = xSocketBits;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfe6:	631a      	str	r2, [r3, #48]	; 0x30

				/* The ORed value will be used to set the bits in the event
				group. */
				xGroupBits |= xSocketBits;
 800bfe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfec:	4313      	orrs	r3, r2
 800bfee:	627b      	str	r3, [r7, #36]	; 0x24
 800bff0:	e000      	b.n	800bff4 <vSocketSelect+0x1a0>
					continue;
 800bff2:	bf00      	nop
				 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800bff4:	6a3b      	ldr	r3, [r7, #32]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	623b      	str	r3, [r7, #32]
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800bffa:	6a3a      	ldr	r2, [r7, #32]
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	429a      	cmp	r2, r3
 800c000:	f47f af42 	bne.w	800be88 <vSocketSelect+0x34>
		for( xRound = 0; xRound <= xLastRound; xRound++ )
 800c004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c006:	3301      	adds	r3, #1
 800c008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c00a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	429a      	cmp	r2, r3
 800c010:	f77f af2e 	ble.w	800be70 <vSocketSelect+0x1c>

			}	/* for( pxIterator ... ) */
		}	/* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

		xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2100      	movs	r1, #0
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7f9 fddc 	bl	8005bd8 <xEventGroupClearBits>
 800c020:	60b8      	str	r0, [r7, #8]

		/* Now set the necessary bits. */
		xBitsToClear = ( xBitsToClear & ~xGroupBits ) & eSELECT_ALL;
 800c022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c024:	43da      	mvns	r2, r3
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	4013      	ands	r3, r2
 800c02a:	f003 030f 	and.w	r3, r3, #15
 800c02e:	60bb      	str	r3, [r7, #8]
		#if( ipconfigSUPPORT_SIGNALS != 0 )
		{
			/* Maybe the socketset was signalled, but don't
			clear the 'eSELECT_INTR' bit here, as it will be used
			and cleared in FreeRTOS_select(). */
			xBitsToClear &= ( EventBits_t ) ~eSELECT_INTR;
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	f023 0308 	bic.w	r3, r3, #8
 800c036:	60bb      	str	r3, [r7, #8]
		}
		#endif /* ipconfigSUPPORT_SIGNALS */

		if( xBitsToClear != 0 )
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d005      	beq.n	800c04a <vSocketSelect+0x1f6>
		{
			xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68b9      	ldr	r1, [r7, #8]
 800c044:	4618      	mov	r0, r3
 800c046:	f7f9 fdc7 	bl	8005bd8 <xEventGroupClearBits>
		}

		/* Now include eSELECT_CALL_IP to wakeup the caller. */
		xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | eSELECT_CALL_IP );
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c050:	f043 0310 	orr.w	r3, r3, #16
 800c054:	4619      	mov	r1, r3
 800c056:	4610      	mov	r0, r2
 800c058:	f7f9 fdf4 	bl	8005c44 <xEventGroupSetBits>
	}
 800c05c:	bf00      	nop
 800c05e:	3730      	adds	r7, #48	; 0x30
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}
 800c064:	20005940 	.word	0x20005940
 800c068:	2000592c 	.word	0x2000592c

0800c06c <FreeRTOS_SignalSocket>:

#if( ipconfigSUPPORT_SIGNALS != 0 )

	/* Send a signal to the task which reads from this socket. */
	BaseType_t FreeRTOS_SignalSocket( Socket_t xSocket )
	{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket == NULL )
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d103      	bne.n	800c086 <FreeRTOS_SignalSocket+0x1a>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800c07e:	f06f 0315 	mvn.w	r3, #21
 800c082:	60fb      	str	r3, [r7, #12]
 800c084:	e022      	b.n	800c0cc <FreeRTOS_SignalSocket+0x60>
		}
		else
	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
		if( ( pxSocket->pxSocketSet != NULL ) && ( pxSocket->pxSocketSet->xSelectGroup != NULL ) )
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00e      	beq.n	800c0ac <FreeRTOS_SignalSocket+0x40>
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d009      	beq.n	800c0ac <FreeRTOS_SignalSocket+0x40>
		{
			xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_INTR );
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2108      	movs	r1, #8
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7f9 fdcf 	bl	8005c44 <xEventGroupSetBits>
			xReturn = 0;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	60fb      	str	r3, [r7, #12]
 800c0aa:	e00f      	b.n	800c0cc <FreeRTOS_SignalSocket+0x60>
		}
		else
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */
		if( pxSocket->xEventGroup != NULL )
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d008      	beq.n	800c0c6 <FreeRTOS_SignalSocket+0x5a>
		{
			xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_INTR );
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	2140      	movs	r1, #64	; 0x40
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7f9 fdc2 	bl	8005c44 <xEventGroupSetBits>
			xReturn = 0;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	60fb      	str	r3, [r7, #12]
 800c0c4:	e002      	b.n	800c0cc <FreeRTOS_SignalSocket+0x60>
		}
		else
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800c0c6:	f06f 0315 	mvn.w	r3, #21
 800c0ca:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
	}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3710      	adds	r7, #16
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800c0d6:	b480      	push	{r7}
 800c0d8:	b083      	sub	sp, #12
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	6039      	str	r1, [r7, #0]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	bf28      	it	cs
 800c0e8:	4613      	movcs	r3, r2
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	370c      	adds	r7, #12
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <uxStreamBufferSpace>:
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b087      	sub	sp, #28
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	60f8      	str	r0, [r7, #12]
 800c0fe:	60b9      	str	r1, [r7, #8]
 800c100:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	691a      	ldr	r2, [r3, #16]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	441a      	add	r2, r3
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	1ad3      	subs	r3, r2, r3
 800c10e:	3b01      	subs	r3, #1
 800c110:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	691a      	ldr	r2, [r3, #16]
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d804      	bhi.n	800c126 <uxStreamBufferSpace+0x30>
		uxCount -= pxBuffer->LENGTH;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	697a      	ldr	r2, [r7, #20]
 800c122:	1ad3      	subs	r3, r2, r3
 800c124:	617b      	str	r3, [r7, #20]
	return uxCount;
 800c126:	697b      	ldr	r3, [r7, #20]
}
 800c128:	4618      	mov	r0, r3
 800c12a:	371c      	adds	r7, #28
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <uxStreamBufferDistance>:
{
 800c134:	b480      	push	{r7}
 800c136:	b087      	sub	sp, #28
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	691a      	ldr	r2, [r3, #16]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	441a      	add	r2, r3
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	691a      	ldr	r2, [r3, #16]
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	429a      	cmp	r2, r3
 800c156:	d804      	bhi.n	800c162 <uxStreamBufferDistance+0x2e>
		uxCount -= pxBuffer->LENGTH;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	691b      	ldr	r3, [r3, #16]
 800c15c:	697a      	ldr	r2, [r7, #20]
 800c15e:	1ad3      	subs	r3, r2, r3
 800c160:	617b      	str	r3, [r7, #20]
	return uxCount;
 800c162:	697b      	ldr	r3, [r7, #20]
}
 800c164:	4618      	mov	r0, r3
 800c166:	371c      	adds	r7, #28
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <uxStreamBufferGetSpace>:
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800c184:	68ba      	ldr	r2, [r7, #8]
 800c186:	68f9      	ldr	r1, [r7, #12]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f7ff ffb4 	bl	800c0f6 <uxStreamBufferSpace>
 800c18e:	4603      	mov	r3, r0
}
 800c190:	4618      	mov	r0, r3
 800c192:	3710      	adds	r7, #16
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <uxStreamBufferGetSize>:
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	68b9      	ldr	r1, [r7, #8]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7ff ffbf 	bl	800c134 <uxStreamBufferDistance>
 800c1b6:	4603      	mov	r3, r0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <xStreamBufferLessThenEqual>:
}
/*-----------------------------------------------------------*/

static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t *pxBuffer, const size_t uxLeft, const size_t uxRight );
static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t *pxBuffer, const size_t uxLeft, const size_t uxRight )
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b087      	sub	sp, #28
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
size_t uxTail = pxBuffer->uxTail;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	613b      	str	r3, [r7, #16]

	/* Returns true if ( uxLeft < uxRight ) */
	if( ( uxLeft < uxTail ) ^ ( uxRight < uxTail ) )
 800c1d2:	68ba      	ldr	r2, [r7, #8]
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	bf34      	ite	cc
 800c1da:	2301      	movcc	r3, #1
 800c1dc:	2300      	movcs	r3, #0
 800c1de:	b2da      	uxtb	r2, r3
 800c1e0:	6879      	ldr	r1, [r7, #4]
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	4299      	cmp	r1, r3
 800c1e6:	bf34      	ite	cc
 800c1e8:	2301      	movcc	r3, #1
 800c1ea:	2300      	movcs	r3, #0
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	4053      	eors	r3, r2
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d009      	beq.n	800c20a <xStreamBufferLessThenEqual+0x4a>
	{
		if( uxRight < uxTail )
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d202      	bcs.n	800c204 <xStreamBufferLessThenEqual+0x44>
		{
			xReturn = pdTRUE;
 800c1fe:	2301      	movs	r3, #1
 800c200:	617b      	str	r3, [r7, #20]
 800c202:	e00b      	b.n	800c21c <xStreamBufferLessThenEqual+0x5c>
		}
		else
		{
			xReturn = pdFALSE;
 800c204:	2300      	movs	r3, #0
 800c206:	617b      	str	r3, [r7, #20]
 800c208:	e008      	b.n	800c21c <xStreamBufferLessThenEqual+0x5c>
		}
	}
	else
	{
		if( uxLeft <= uxRight )
 800c20a:	68ba      	ldr	r2, [r7, #8]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	429a      	cmp	r2, r3
 800c210:	d802      	bhi.n	800c218 <xStreamBufferLessThenEqual+0x58>
		{
			xReturn = pdTRUE;
 800c212:	2301      	movs	r3, #1
 800c214:	617b      	str	r3, [r7, #20]
 800c216:	e001      	b.n	800c21c <xStreamBufferLessThenEqual+0x5c>
		}
		else
		{
			xReturn = pdFALSE;
 800c218:	2300      	movs	r3, #0
 800c21a:	617b      	str	r3, [r7, #20]
		}
	}
	return xReturn;
 800c21c:	697b      	ldr	r3, [r7, #20]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	371c      	adds	r7, #28
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <uxStreamBufferAdd>:
 * an offset from uxHead while uxHead will not be moved yet.  This possibility
 * will be used when TCP data is received while earlier data is still missing.
 * If 'pucData' equals NULL, the function is called to advance 'uxHead' only.
 */
size_t uxStreamBufferAdd( StreamBuffer_t *pxBuffer, size_t uxOffset, const uint8_t *pucData, size_t uxCount )
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b088      	sub	sp, #32
 800c22e:	af00      	add	r7, sp, #0
 800c230:	60f8      	str	r0, [r7, #12]
 800c232:	60b9      	str	r1, [r7, #8]
 800c234:	607a      	str	r2, [r7, #4]
 800c236:	603b      	str	r3, [r7, #0]
size_t uxSpace, uxNextHead, uxFirst;

	uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f7ff ff99 	bl	800c170 <uxStreamBufferGetSpace>
 800c23e:	61f8      	str	r0, [r7, #28]

	/* If uxOffset > 0, items can be placed in front of uxHead */
	if( uxSpace > uxOffset )
 800c240:	69fa      	ldr	r2, [r7, #28]
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	429a      	cmp	r2, r3
 800c246:	d904      	bls.n	800c252 <uxStreamBufferAdd+0x28>
	{
		uxSpace -= uxOffset;
 800c248:	69fa      	ldr	r2, [r7, #28]
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	1ad3      	subs	r3, r2, r3
 800c24e:	61fb      	str	r3, [r7, #28]
 800c250:	e001      	b.n	800c256 <uxStreamBufferAdd+0x2c>
	}
	else
	{
		uxSpace = 0u;
 800c252:	2300      	movs	r3, #0
 800c254:	61fb      	str	r3, [r7, #28]
	}

	/* The number of bytes that can be written is the minimum of the number of
	bytes requested and the number available. */
	uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	69f8      	ldr	r0, [r7, #28]
 800c25a:	f7ff ff3c 	bl	800c0d6 <FreeRTOS_min_uint32>
 800c25e:	6038      	str	r0, [r7, #0]

	if( uxCount != 0u )
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d05a      	beq.n	800c31c <uxStreamBufferAdd+0xf2>
	{
		uxNextHead = pxBuffer->uxHead;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	61bb      	str	r3, [r7, #24]

		if( uxOffset != 0u )
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d00d      	beq.n	800c28e <uxStreamBufferAdd+0x64>
		{
			/* ( uxOffset > 0 ) means: write in front if the uxHead marker */
			uxNextHead += uxOffset;
 800c272:	69ba      	ldr	r2, [r7, #24]
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	4413      	add	r3, r2
 800c278:	61bb      	str	r3, [r7, #24]
			if( uxNextHead >= pxBuffer->LENGTH )
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	691a      	ldr	r2, [r3, #16]
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	429a      	cmp	r2, r3
 800c282:	d804      	bhi.n	800c28e <uxStreamBufferAdd+0x64>
			{
				uxNextHead -= pxBuffer->LENGTH;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	69ba      	ldr	r2, [r7, #24]
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	61bb      	str	r3, [r7, #24]
			}
		}

		if( pucData != NULL )
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d022      	beq.n	800c2da <uxStreamBufferAdd+0xb0>
		{
			/* Calculate the number of bytes that can be added in the first
			write - which may be less than the total number of bytes that need
			to be added if the buffer will wrap back to the beginning. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	691a      	ldr	r2, [r3, #16]
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	6839      	ldr	r1, [r7, #0]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7ff ff19 	bl	800c0d6 <FreeRTOS_min_uint32>
 800c2a4:	6178      	str	r0, [r7, #20]

			/* Write as many bytes as can be written in the first write. */
			memcpy( ( void* ) ( pxBuffer->ucArray + uxNextHead ), pucData, uxFirst );
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f103 0214 	add.w	r2, r3, #20
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	6879      	ldr	r1, [r7, #4]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f004 fcb0 	bl	8010c1a <memcpy>

			/* If the number of bytes written was less than the number that
			could be written in the first write... */
			if( uxCount > uxFirst )
 800c2ba:	683a      	ldr	r2, [r7, #0]
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d90b      	bls.n	800c2da <uxStreamBufferAdd+0xb0>
			{
				/* ...then write the remaining bytes to the start of the
				buffer. */
				memcpy( ( void * )pxBuffer->ucArray, pucData + uxFirst, uxCount - uxFirst );
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f103 0014 	add.w	r0, r3, #20
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	18d1      	adds	r1, r2, r3
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	1ad3      	subs	r3, r2, r3
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	f004 fca0 	bl	8010c1a <memcpy>
			}
		}

		if( uxOffset == 0u )
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d110      	bne.n	800c302 <uxStreamBufferAdd+0xd8>
		{
			/* ( uxOffset == 0 ) means: write at uxHead position */
			uxNextHead += uxCount;
 800c2e0:	69ba      	ldr	r2, [r7, #24]
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	61bb      	str	r3, [r7, #24]
			if( uxNextHead >= pxBuffer->LENGTH )
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	691a      	ldr	r2, [r3, #16]
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d804      	bhi.n	800c2fc <uxStreamBufferAdd+0xd2>
			{
				uxNextHead -= pxBuffer->LENGTH;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	691b      	ldr	r3, [r3, #16]
 800c2f6:	69ba      	ldr	r2, [r7, #24]
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	61bb      	str	r3, [r7, #24]
			}
			pxBuffer->uxHead = uxNextHead;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	69ba      	ldr	r2, [r7, #24]
 800c300:	609a      	str	r2, [r3, #8]
		}

		if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	69ba      	ldr	r2, [r7, #24]
 800c308:	4619      	mov	r1, r3
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f7ff ff58 	bl	800c1c0 <xStreamBufferLessThenEqual>
 800c310:	4603      	mov	r3, r0
 800c312:	2b00      	cmp	r3, #0
 800c314:	d002      	beq.n	800c31c <uxStreamBufferAdd+0xf2>
		{
			/* Advance the front pointer */
			pxBuffer->uxFront = uxNextHead;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	69ba      	ldr	r2, [r7, #24]
 800c31a:	60da      	str	r2, [r3, #12]
		}
	}

	return uxCount;
 800c31c:	683b      	ldr	r3, [r7, #0]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3720      	adds	r7, #32
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <uxStreamBufferGet>:
 * If 'pucData' equals NULL, the function is called to advance 'lTail' only.
 * if 'xPeek' is pdTRUE, or if 'uxOffset' is non-zero, the 'lTail' pointer will
 * not be advanced.
 */
size_t uxStreamBufferGet( StreamBuffer_t *pxBuffer, size_t uxOffset, uint8_t *pucData, size_t uxMaxCount, BaseType_t xPeek )
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b088      	sub	sp, #32
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	60f8      	str	r0, [r7, #12]
 800c32e:	60b9      	str	r1, [r7, #8]
 800c330:	607a      	str	r2, [r7, #4]
 800c332:	603b      	str	r3, [r7, #0]
size_t uxSize, uxCount, uxFirst, uxNextTail;

	/* How much data is available? */
	uxSize = uxStreamBufferGetSize( pxBuffer );
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f7ff ff2f 	bl	800c198 <uxStreamBufferGetSize>
 800c33a:	61f8      	str	r0, [r7, #28]

	if( uxSize > uxOffset )
 800c33c:	69fa      	ldr	r2, [r7, #28]
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	429a      	cmp	r2, r3
 800c342:	d904      	bls.n	800c34e <uxStreamBufferGet+0x28>
	{
		uxSize -= uxOffset;
 800c344:	69fa      	ldr	r2, [r7, #28]
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	1ad3      	subs	r3, r2, r3
 800c34a:	61fb      	str	r3, [r7, #28]
 800c34c:	e001      	b.n	800c352 <uxStreamBufferGet+0x2c>
	}
	else
	{
		uxSize = 0u;
 800c34e:	2300      	movs	r3, #0
 800c350:	61fb      	str	r3, [r7, #28]
	}

	/* Use the minimum of the wanted bytes and the available bytes. */
	uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );
 800c352:	6839      	ldr	r1, [r7, #0]
 800c354:	69f8      	ldr	r0, [r7, #28]
 800c356:	f7ff febe 	bl	800c0d6 <FreeRTOS_min_uint32>
 800c35a:	6178      	str	r0, [r7, #20]

	if( uxCount > 0u )
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d050      	beq.n	800c404 <uxStreamBufferGet+0xde>
	{
		uxNextTail = pxBuffer->uxTail;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	61bb      	str	r3, [r7, #24]

		if( uxOffset != 0u )
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00d      	beq.n	800c38a <uxStreamBufferGet+0x64>
		{
			uxNextTail += uxOffset;
 800c36e:	69ba      	ldr	r2, [r7, #24]
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	4413      	add	r3, r2
 800c374:	61bb      	str	r3, [r7, #24]
			if( uxNextTail >= pxBuffer->LENGTH )
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	691a      	ldr	r2, [r3, #16]
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d804      	bhi.n	800c38a <uxStreamBufferGet+0x64>
			{
				uxNextTail -= pxBuffer->LENGTH;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	691b      	ldr	r3, [r3, #16]
 800c384:	69ba      	ldr	r2, [r7, #24]
 800c386:	1ad3      	subs	r3, r2, r3
 800c388:	61bb      	str	r3, [r7, #24]
			}
		}

		if( pucData != NULL )
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d022      	beq.n	800c3d6 <uxStreamBufferGet+0xb0>
		{
			/* Calculate the number of bytes that can be read - which may be
			less than the number wanted if the data wraps around to the start of
			the buffer. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	691a      	ldr	r2, [r3, #16]
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	1ad3      	subs	r3, r2, r3
 800c398:	6979      	ldr	r1, [r7, #20]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7ff fe9b 	bl	800c0d6 <FreeRTOS_min_uint32>
 800c3a0:	6138      	str	r0, [r7, #16]

			/* Obtain the number of bytes it is possible to obtain in the first
			read. */
			memcpy( pucData, pxBuffer->ucArray + uxNextTail, uxFirst );
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f103 0214 	add.w	r2, r3, #20
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	693a      	ldr	r2, [r7, #16]
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f004 fc32 	bl	8010c1a <memcpy>

			/* If the total number of wanted bytes is greater than the number
			that could be read in the first read... */
			if( uxCount > uxFirst )
 800c3b6:	697a      	ldr	r2, [r7, #20]
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d90b      	bls.n	800c3d6 <uxStreamBufferGet+0xb0>
			{
				/*...then read the remaining bytes from the start of the buffer. */
				memcpy( pucData + uxFirst, pxBuffer->ucArray, uxCount - uxFirst );
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	18d0      	adds	r0, r2, r3
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f103 0114 	add.w	r1, r3, #20
 800c3ca:	697a      	ldr	r2, [r7, #20]
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	f004 fc22 	bl	8010c1a <memcpy>
			}
		}

		if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 800c3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d113      	bne.n	800c404 <uxStreamBufferGet+0xde>
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d110      	bne.n	800c404 <uxStreamBufferGet+0xde>
		{
			/* Move the tail pointer to effecively remove the data read from
			the buffer. */
			uxNextTail += uxCount;
 800c3e2:	69ba      	ldr	r2, [r7, #24]
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	61bb      	str	r3, [r7, #24]

			if( uxNextTail >= pxBuffer->LENGTH )
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	691a      	ldr	r2, [r3, #16]
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d804      	bhi.n	800c3fe <uxStreamBufferGet+0xd8>
			{
				uxNextTail -= pxBuffer->LENGTH;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	691b      	ldr	r3, [r3, #16]
 800c3f8:	69ba      	ldr	r2, [r7, #24]
 800c3fa:	1ad3      	subs	r3, r2, r3
 800c3fc:	61bb      	str	r3, [r7, #24]
			}

			pxBuffer->uxTail = uxNextTail;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	69ba      	ldr	r2, [r7, #24]
 800c402:	601a      	str	r2, [r3, #0]
		}
	}

	return uxCount;
 800c404:	697b      	ldr	r3, [r7, #20]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3720      	adds	r7, #32
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <FreeRTOS_max_int32>:
	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
 800c40e:	b480      	push	{r7}
 800c410:	b083      	sub	sp, #12
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
 800c416:	6039      	str	r1, [r7, #0]
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	4293      	cmp	r3, r2
 800c41e:	bfb8      	it	lt
 800c420:	4613      	movlt	r3, r2
 800c422:	4618      	mov	r0, r3
 800c424:	370c      	adds	r7, #12
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr

0800c42e <FreeRTOS_min_int32>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 800c42e:	b480      	push	{r7}
 800c430:	b083      	sub	sp, #12
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
 800c436:	6039      	str	r1, [r7, #0]
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	4293      	cmp	r3, r2
 800c43e:	bfa8      	it	ge
 800c440:	4613      	movge	r3, r2
 800c442:	4618      	mov	r0, r3
 800c444:	370c      	adds	r7, #12
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr

0800c44e <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800c44e:	b480      	push	{r7}
 800c450:	b083      	sub	sp, #12
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
 800c456:	6039      	str	r1, [r7, #0]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	4293      	cmp	r3, r2
 800c45e:	bf28      	it	cs
 800c460:	4613      	movcs	r3, r2
 800c462:	4618      	mov	r0, r3
 800c464:	370c      	adds	r7, #12
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr

0800c46e <uxStreamBufferSpace>:
{
 800c46e:	b480      	push	{r7}
 800c470:	b087      	sub	sp, #28
 800c472:	af00      	add	r7, sp, #0
 800c474:	60f8      	str	r0, [r7, #12]
 800c476:	60b9      	str	r1, [r7, #8]
 800c478:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	691a      	ldr	r2, [r3, #16]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	441a      	add	r2, r3
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	1ad3      	subs	r3, r2, r3
 800c486:	3b01      	subs	r3, #1
 800c488:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	691a      	ldr	r2, [r3, #16]
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	429a      	cmp	r2, r3
 800c492:	d804      	bhi.n	800c49e <uxStreamBufferSpace+0x30>
		uxCount -= pxBuffer->LENGTH;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	691b      	ldr	r3, [r3, #16]
 800c498:	697a      	ldr	r2, [r7, #20]
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	617b      	str	r3, [r7, #20]
	return uxCount;
 800c49e:	697b      	ldr	r3, [r7, #20]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	371c      	adds	r7, #28
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr

0800c4ac <uxStreamBufferDistance>:
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b087      	sub	sp, #28
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	691a      	ldr	r2, [r3, #16]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	441a      	add	r2, r3
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	691a      	ldr	r2, [r3, #16]
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d804      	bhi.n	800c4da <uxStreamBufferDistance+0x2e>
		uxCount -= pxBuffer->LENGTH;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	691b      	ldr	r3, [r3, #16]
 800c4d4:	697a      	ldr	r2, [r7, #20]
 800c4d6:	1ad3      	subs	r3, r2, r3
 800c4d8:	617b      	str	r3, [r7, #20]
	return uxCount;
 800c4da:	697b      	ldr	r3, [r7, #20]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	371c      	adds	r7, #28
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <uxStreamBufferGetSpace>:
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800c4fc:	68ba      	ldr	r2, [r7, #8]
 800c4fe:	68f9      	ldr	r1, [r7, #12]
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f7ff ffb4 	bl	800c46e <uxStreamBufferSpace>
 800c506:	4603      	mov	r3, r0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <uxStreamBufferFrontSpace>:
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
size_t uxFront = pxBuffer->uxFront;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800c524:	68ba      	ldr	r2, [r7, #8]
 800c526:	68f9      	ldr	r1, [r7, #12]
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f7ff ffa0 	bl	800c46e <uxStreamBufferSpace>
 800c52e:	4603      	mov	r3, r0
}
 800c530:	4618      	mov	r0, r3
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <uxStreamBufferMidSpace>:
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	60fb      	str	r3, [r7, #12]
size_t uxMid = pxBuffer->uxMid;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	68b9      	ldr	r1, [r7, #8]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7ff ffab 	bl	800c4ac <uxStreamBufferDistance>
 800c556:	4603      	mov	r3, r0
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3710      	adds	r7, #16
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <vStreamBufferMoveMid>:
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f7ff ffe4 	bl	800c538 <uxStreamBufferMidSpace>
 800c570:	60f8      	str	r0, [r7, #12]
	if( uxCount > uxSize )
 800c572:	683a      	ldr	r2, [r7, #0]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	429a      	cmp	r2, r3
 800c578:	d901      	bls.n	800c57e <vStreamBufferMoveMid+0x1e>
		uxCount = uxSize;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	603b      	str	r3, [r7, #0]
	pxBuffer->uxMid += uxCount;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	685a      	ldr	r2, [r3, #4]
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	441a      	add	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	605a      	str	r2, [r3, #4]
	if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	685a      	ldr	r2, [r3, #4]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	429a      	cmp	r2, r3
 800c594:	d306      	bcc.n	800c5a4 <vStreamBufferMoveMid+0x44>
		pxBuffer->uxMid -= pxBuffer->LENGTH;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	685a      	ldr	r2, [r3, #4]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	1ad2      	subs	r2, r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	605a      	str	r2, [r3, #4]
}
 800c5a4:	bf00      	nop
 800c5a6:	3710      	adds	r7, #16
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <ulChar2u32>:
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	061a      	lsls	r2, r3, #24
			( ( ( uint32_t )apChr[1] ) << 16) |
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	041b      	lsls	r3, r3, #16
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 800c5c2:	431a      	orrs	r2, r3
			( ( ( uint32_t )apChr[2] ) << 8) |
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	3302      	adds	r3, #2
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	021b      	lsls	r3, r3, #8
			( ( ( uint32_t )apChr[1] ) << 16) |
 800c5cc:	4313      	orrs	r3, r2
			( ( ( uint32_t )apChr[3] ) );
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	3203      	adds	r2, #3
 800c5d2:	7812      	ldrb	r2, [r2, #0]
			( ( ( uint32_t )apChr[2] ) << 8) |
 800c5d4:	4313      	orrs	r3, r2
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	370c      	adds	r7, #12
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <usChar2u16>:
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b083      	sub	sp, #12
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	021b      	lsls	r3, r3, #8
 800c5f2:	b29a      	uxth	r2, r3
			  ( ( ( uint32_t )apChr[1] ) ) );
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	b29b      	uxth	r3, r3
	return ( uint16_t )
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	b29b      	uxth	r3, r3
}
 800c600:	4618      	mov	r0, r3
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <prvTCPSocketIsActive>:

/* prvTCPSocketIsActive() returns true if the socket must be checked.
 * Non-active sockets are waiting for user action, either connect()
 * or close(). */
static BaseType_t prvTCPSocketIsActive( UBaseType_t uxStatus )
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
	switch( uxStatus )
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2b0b      	cmp	r3, #11
 800c618:	d81c      	bhi.n	800c654 <prvTCPSocketIsActive+0x48>
 800c61a:	a201      	add	r2, pc, #4	; (adr r2, 800c620 <prvTCPSocketIsActive+0x14>)
 800c61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c620:	0800c651 	.word	0x0800c651
 800c624:	0800c655 	.word	0x0800c655
 800c628:	0800c655 	.word	0x0800c655
 800c62c:	0800c655 	.word	0x0800c655
 800c630:	0800c655 	.word	0x0800c655
 800c634:	0800c655 	.word	0x0800c655
 800c638:	0800c655 	.word	0x0800c655
 800c63c:	0800c651 	.word	0x0800c651
 800c640:	0800c651 	.word	0x0800c651
 800c644:	0800c651 	.word	0x0800c651
 800c648:	0800c655 	.word	0x0800c655
 800c64c:	0800c651 	.word	0x0800c651
	case eCLOSED:
	case eCLOSE_WAIT:
	case eFIN_WAIT_2:
	case eCLOSING:
	case eTIME_WAIT:
		return pdFALSE;
 800c650:	2300      	movs	r3, #0
 800c652:	e000      	b.n	800c656 <prvTCPSocketIsActive+0x4a>
	default:
		return pdTRUE;
 800c654:	2301      	movs	r3, #1
	}
}
 800c656:	4618      	mov	r0, r3
 800c658:	370c      	adds	r7, #12
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop

0800c664 <prvTCPStatusAgeCheck>:
/*-----------------------------------------------------------*/

#if( ipconfigTCP_HANG_PROTECTION == 1 )

	static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t *pxSocket )
	{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
	BaseType_t xResult;
		switch( pxSocket->u.xTCP.ucTCPState )
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c672:	2b08      	cmp	r3, #8
 800c674:	d81a      	bhi.n	800c6ac <prvTCPStatusAgeCheck+0x48>
 800c676:	a201      	add	r2, pc, #4	; (adr r2, 800c67c <prvTCPStatusAgeCheck+0x18>)
 800c678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c67c:	0800c6a7 	.word	0x0800c6a7
 800c680:	0800c6a7 	.word	0x0800c6a7
 800c684:	0800c6ad 	.word	0x0800c6ad
 800c688:	0800c6ad 	.word	0x0800c6ad
 800c68c:	0800c6ad 	.word	0x0800c6ad
 800c690:	0800c6a1 	.word	0x0800c6a1
 800c694:	0800c6ad 	.word	0x0800c6ad
 800c698:	0800c6ad 	.word	0x0800c6ad
 800c69c:	0800c6a7 	.word	0x0800c6a7
		{
		case eESTABLISHED:
			/* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
			state ESTABLISHED can be protected using keep-alive messages. */
			xResult = pdFALSE;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	60fb      	str	r3, [r7, #12]
			break;
 800c6a4:	e005      	b.n	800c6b2 <prvTCPStatusAgeCheck+0x4e>
		case eCLOSED:
		case eTCP_LISTEN:
		case eCLOSE_WAIT:
			/* These 3 states may last for ever, up to the owner. */
			xResult = pdFALSE;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	60fb      	str	r3, [r7, #12]
			break;
 800c6aa:	e002      	b.n	800c6b2 <prvTCPStatusAgeCheck+0x4e>
		default:
			/* All other (non-connected) states will get anti-hanging
			protection. */
			xResult = pdTRUE;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	60fb      	str	r3, [r7, #12]
			break;
 800c6b0:	bf00      	nop
		}
		if( xResult != pdFALSE )
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d025      	beq.n	800c704 <prvTCPStatusAgeCheck+0xa0>
		{
			/* How much time has past since the last active moment which is
			defined as A) a state change or B) a packet has arrived. */
			TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastActTime;
 800c6b8:	f7fb f8c8 	bl	800784c <xTaskGetTickCount>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6c2:	1ad3      	subs	r3, r2, r3
 800c6c4:	60bb      	str	r3, [r7, #8]

			/* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
			if( xAge > ( ipconfigTCP_HANG_PROTECTION_TIME * configTICK_RATE_HZ ) )
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	f247 5230 	movw	r2, #30000	; 0x7530
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d919      	bls.n	800c704 <prvTCPStatusAgeCheck+0xa0>
						FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) ) );
				}
				#endif /* ipconfigHAS_DEBUG_PRINTF */

				/* Move to eCLOSE_WAIT, user may close the socket. */
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c6d0:	2108      	movs	r1, #8
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 fd39 	bl	800d14a <vTCPStateChange>

				/* When 'bPassQueued' true, this socket is an orphan until it
				gets connected. */
				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c6de:	f003 0304 	and.w	r3, r3, #4
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00d      	beq.n	800c704 <prvTCPStatusAgeCheck+0xa0>
				{
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c6ee:	f003 0308 	and.w	r3, r3, #8
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d102      	bne.n	800c6fe <prvTCPStatusAgeCheck+0x9a>
					{
						/* As it did not get connected, and the user can never
						accept() it anymore, it will be deleted now.  Called from
						the IP-task, so it's safe to call the internal Close
						function: vSocketClose(). */
						vSocketClose( pxSocket );
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f7fe feb9 	bl	800b470 <vSocketClose>
					}
					/* Return a negative value to tell to inform the caller
					xTCPTimerCheck()
					that the socket got closed and may not be accessed anymore. */
					xResult = -1;
 800c6fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c702:	60fb      	str	r3, [r7, #12]
				}
			}
		}
		return xResult;
 800c704:	68fb      	ldr	r3, [r7, #12]
	}
 800c706:	4618      	mov	r0, r3
 800c708:	3710      	adds	r7, #16
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop

0800c710 <xTCPSocketCheck>:
 *		prvTCPSendRepeated()			// Send at most 8 messages on a row
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t *pxSocket )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
BaseType_t xResult = 0;
 800c718:	2300      	movs	r3, #0
 800c71a:	60fb      	str	r3, [r7, #12]
BaseType_t xReady = pdFALSE;
 800c71c:	2300      	movs	r3, #0
 800c71e:	60bb      	str	r3, [r7, #8]

	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c726:	2b04      	cmp	r3, #4
 800c728:	d906      	bls.n	800c738 <xTCPSocketCheck+0x28>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d002      	beq.n	800c738 <xTCPSocketCheck+0x28>
	{
		/* The API FreeRTOS_send() might have added data to the TX stream.  Add
		this data to the windowing system to it can be transmitted. */
		prvTCPAddTxData( pxSocket );
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f001 f82a 	bl	800d78c <prvTCPAddTxData>
	}

	#if ipconfigUSE_TCP_WIN == 1
	{
		if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d02a      	beq.n	800c796 <xTCPSocketCheck+0x86>
		{
			/* The first task of this regular socket check is to send-out delayed
			ACK's. */
			if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c746:	f003 0320 	and.w	r3, r3, #32
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d116      	bne.n	800c77e <xTCPSocketCheck+0x6e>
			{
				/* Earlier data was received but not yet acknowledged.  This
				function is called when the TCP timer for the socket expires, the
				ACK may be sent now. */
				if( pxSocket->u.xTCP.ucTCPState != eCLOSED )
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c756:	2b00      	cmp	r3, #0
 800c758:	d009      	beq.n	800c76e <xTCPSocketCheck+0x5e>
				{
					if( xTCPWindowLoggingLevel > 1 && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800c75a:	4b1d      	ldr	r3, [pc, #116]	; (800c7d0 <xTCPSocketCheck+0xc0>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b01      	cmp	r3, #1
							pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
							pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber   - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber,
							ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) );
					}

					prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800c764:	2300      	movs	r3, #0
 800c766:	2228      	movs	r2, #40	; 0x28
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f8bb 	bl	800c8e4 <prvTCPReturnPacket>
						clear the pointer to it. */
						pxSocket->u.xTCP.pxAckMessage = NULL;
					}
					#endif /* ipconfigZERO_COPY_TX_DRIVER */
				}
				if( prvTCPNextTimeout( pxSocket ) > 1 )
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 ff8e 	bl	800d690 <prvTCPNextTimeout>
 800c774:	4603      	mov	r3, r0
 800c776:	2b01      	cmp	r3, #1
 800c778:	d901      	bls.n	800c77e <xTCPSocketCheck+0x6e>
				{
					/* Tell the code below that this function is ready. */
					xReady = pdTRUE;
 800c77a:	2301      	movs	r3, #1
 800c77c:	60bb      	str	r3, [r7, #8]
				/* The user wants to perform an active shutdown(), skip sending
				the	delayed	ACK.  The function prvTCPSendPacket() will send the
				FIN	along with the ACK's. */
			}

			if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c782:	2b00      	cmp	r3, #0
 800c784:	d007      	beq.n	800c796 <xTCPSocketCheck+0x86>
			{
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c78a:	4618      	mov	r0, r3
 800c78c:	f003 fa96 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
				pxSocket->u.xTCP.pxAckMessage = NULL;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	67da      	str	r2, [r3, #124]	; 0x7c
			}
		}
	}
	#endif /* ipconfigUSE_TCP_WIN */

	if( xReady == pdFALSE )
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d113      	bne.n	800c7c4 <xTCPSocketCheck+0xb4>
	{
		/* The second task of this regular socket check is sending out data. */
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c7a2:	2b04      	cmp	r3, #4
 800c7a4:	d804      	bhi.n	800c7b0 <xTCPSocketCheck+0xa0>
			( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) )
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 800c7ac:	2b02      	cmp	r3, #2
 800c7ae:	d102      	bne.n	800c7b6 <xTCPSocketCheck+0xa6>
		{
			prvTCPSendPacket( pxSocket );
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 f80f 	bl	800c7d4 <prvTCPSendPacket>
		}

		/* Set the time-out for the next wakeup for this socket. */
		prvTCPNextTimeout( pxSocket );
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 ff6a 	bl	800d690 <prvTCPNextTimeout>

		#if( ipconfigTCP_HANG_PROTECTION == 1 )
		{
			/* In all (non-connected) states in which keep-alive messages can not be sent
			the anti-hang protocol will close sockets that are 'hanging'. */
			xResult = prvTCPStatusAgeCheck( pxSocket );
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7ff ff51 	bl	800c664 <prvTCPStatusAgeCheck>
 800c7c2:	60f8      	str	r0, [r7, #12]
		}
		#endif
	}

	return xResult;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	20004250 	.word	0x20004250

0800c7d4 <prvTCPSendPacket>:
/*
 * prvTCPSendPacket() will be called when the socket time-out has been reached.
 * It is only called by xTCPSocketCheck().
 */
static int32_t prvTCPSendPacket( FreeRTOS_Socket_t *pxSocket )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
int32_t lResult = 0;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	617b      	str	r3, [r7, #20]
UBaseType_t uxOptionsLength;
TCPPacket_t *pxTCPPacket;
NetworkBufferDescriptor_t *pxNetworkBuffer;

	if( pxSocket->u.xTCP.ucTCPState != eCONNECT_SYN )
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	d010      	beq.n	800c80c <prvTCPSendPacket+0x38>
	{
		/* The connection is in s state other than SYN. */
		pxNetworkBuffer = NULL;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	60bb      	str	r3, [r7, #8]

		/* prvTCPSendRepeated() will only create a network buffer if necessary,
		i.e. when data must be sent to the peer. */
		lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800c7ee:	f107 0308 	add.w	r3, r7, #8
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 f848 	bl	800c88a <prvTCPSendRepeated>
 800c7fa:	6178      	str	r0, [r7, #20]

		if( pxNetworkBuffer != NULL )
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d03e      	beq.n	800c880 <prvTCPSendPacket+0xac>
		{
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	4618      	mov	r0, r3
 800c806:	f003 fa59 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
 800c80a:	e039      	b.n	800c880 <prvTCPSendPacket+0xac>
		}
	}
	else
	{
		if( pxSocket->u.xTCP.ucRepCount >= 3u )
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c812:	2b02      	cmp	r3, #2
 800c814:	d904      	bls.n	800c820 <prvTCPSendPacket+0x4c>
			to most 3 times.  When there is no response, the socket get the
			status 'eCLOSE_WAIT'. */
			FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
				pxSocket->u.xTCP.ulRemoteIP,		/* IP address of remote machine. */
				pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c816:	2108      	movs	r1, #8
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 fc96 	bl	800d14a <vTCPStateChange>
 800c81e:	e02f      	b.n	800c880 <prvTCPSendPacket+0xac>
		}
		else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c826:	f003 0308 	and.w	r3, r3, #8
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d105      	bne.n	800c83c <prvTCPSendPacket+0x68>
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 fa29 	bl	800cc88 <prvTCPPrepareConnect>
 800c836:	4603      	mov	r3, r0
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d121      	bne.n	800c880 <prvTCPSendPacket+0xac>
		{
			/* Or else, if the connection has been prepared, or can be prepared
			now, proceed to send the packet with the SYN flag.
			prvTCPPrepareConnect() prepares 'xPacket' and returns pdTRUE if
			the Ethernet address of the peer or the gateway is found. */
			pxTCPPacket = ( TCPPacket_t * )pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	3382      	adds	r3, #130	; 0x82
 800c840:	613b      	str	r3, [r7, #16]
			#endif

			/* About to send a SYN packet.  Call prvSetSynAckOptions() to set
			the proper options: The size of MSS and whether SACK's are
			allowed. */
			uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPPacket );
 800c842:	6939      	ldr	r1, [r7, #16]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 fc08 	bl	800d05a <prvSetSynAckOptions>
 800c84a:	60f8      	str	r0, [r7, #12]

			/* Return the number of bytes to be sent. */
			lResult = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	3328      	adds	r3, #40	; 0x28
 800c850:	617b      	str	r3, [r7, #20]

			/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
			uxOptionsLength is always a multiple of 4.  The complete expression
			would be:
			ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
			pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	b2db      	uxtb	r3, r3
 800c856:	3314      	adds	r3, #20
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	b2da      	uxtb	r2, r3
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

			/* Repeat Count is used for a connecting socket, to limit the number
			of tries. */
			pxSocket->u.xTCP.ucRepCount++;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c86a:	3301      	adds	r3, #1
 800c86c:	b2da      	uxtb	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

			/* Send the SYN message to make a connection.  The messages is
			stored in the socket field 'xPacket'.  It will be wrapped in a
			pseudo network buffer descriptor before it will be sent. */
			prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 800c874:	697a      	ldr	r2, [r7, #20]
 800c876:	2300      	movs	r3, #0
 800c878:	2100      	movs	r1, #0
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f832 	bl	800c8e4 <prvTCPReturnPacket>
		}
	}

	/* Return the total number of bytes sent. */
	return lResult;
 800c880:	697b      	ldr	r3, [r7, #20]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3718      	adds	r7, #24
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <prvTCPSendRepeated>:
/*
 * prvTCPSendRepeated will try to send a series of messages, as long as there is
 * data to be sent and as long as the transmit window isn't full.
 */
static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer )
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b086      	sub	sp, #24
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	6039      	str	r1, [r7, #0]
UBaseType_t uxIndex;
int32_t lResult = 0;
 800c894:	2300      	movs	r3, #0
 800c896:	613b      	str	r3, [r7, #16]
UBaseType_t uxOptionsLength = 0u;
 800c898:	2300      	movs	r3, #0
 800c89a:	60fb      	str	r3, [r7, #12]
int32_t xSendLength;

	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800c89c:	2300      	movs	r3, #0
 800c89e:	617b      	str	r3, [r7, #20]
 800c8a0:	e016      	b.n	800c8d0 <prvTCPSendRepeated+0x46>
	{
		/* prvTCPPrepareSend() might allocate a network buffer if there is data
		to be sent. */
		xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800c8a2:	68fa      	ldr	r2, [r7, #12]
 800c8a4:	6839      	ldr	r1, [r7, #0]
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 fd8a 	bl	800d3c0 <prvTCPPrepareSend>
 800c8ac:	60b8      	str	r0, [r7, #8]
		if( xSendLength <= 0 )
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	dd11      	ble.n	800c8d8 <prvTCPSendRepeated+0x4e>
		{
			break;
		}

		/* And return the packet to the peer. */
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	6819      	ldr	r1, [r3, #0]
 800c8b8:	68ba      	ldr	r2, [r7, #8]
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 f811 	bl	800c8e4 <prvTCPReturnPacket>
		{
			*ppxNetworkBuffer = NULL;
		}
		#endif /* ipconfigZERO_COPY_TX_DRIVER */

		lResult += xSendLength;
 800c8c2:	693a      	ldr	r2, [r7, #16]
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	613b      	str	r3, [r7, #16]
	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	617b      	str	r3, [r7, #20]
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	2b07      	cmp	r3, #7
 800c8d4:	d9e5      	bls.n	800c8a2 <prvTCPSendRepeated+0x18>
 800c8d6:	e000      	b.n	800c8da <prvTCPSendRepeated+0x50>
			break;
 800c8d8:	bf00      	nop
	}

	/* Return the total number of bytes sent. */
	return lResult;
 800c8da:	693b      	ldr	r3, [r7, #16]
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3718      	adds	r7, #24
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <prvTCPReturnPacket>:
 * which may either point to a real network buffer or to a TCP socket field
 * called 'xTCP.xPacket'.   A temporary xNetworkBuffer will be used to pass
 * the data to the NIC.
 */
static void prvTCPReturnPacket( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulLen, BaseType_t xReleaseAfterSend )
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b098      	sub	sp, #96	; 0x60
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
 800c8f0:	603b      	str	r3, [r7, #0]
uint32_t ulFrontSpace, ulSpace, ulSourceAddress, ulWinSize;
TCPWindow_t *pxTCPWindow;
NetworkBufferDescriptor_t xTempBuffer;
/* For sending, a pseudo network buffer will be used, as explained above. */

	if( pxNetworkBuffer == NULL )
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d109      	bne.n	800c90c <prvTCPReturnPacket+0x28>
	{
		pxNetworkBuffer = &xTempBuffer;
 800c8f8:	f107 0310 	add.w	r3, r7, #16
 800c8fc:	60bb      	str	r3, [r7, #8]
		#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
		{
			xTempBuffer.pxNextBuffer = NULL;
		}
		#endif
		xTempBuffer.pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	3382      	adds	r3, #130	; 0x82
 800c902:	62bb      	str	r3, [r7, #40]	; 0x28
		xTempBuffer.xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800c904:	2346      	movs	r3, #70	; 0x46
 800c906:	62fb      	str	r3, [r7, #44]	; 0x2c
		xReleaseAfterSend = pdFALSE;
 800c908:	2300      	movs	r3, #0
 800c90a:	603b      	str	r3, [r7, #0]
			xReleaseAfterSend = pdTRUE;
		}
	}
	#endif /* ipconfigZERO_COPY_TX_DRIVER */

	if( pxNetworkBuffer != NULL )
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f000 818a 	beq.w	800cc28 <prvTCPReturnPacket+0x344>
	{
		pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	699b      	ldr	r3, [r3, #24]
 800c918:	64fb      	str	r3, [r7, #76]	; 0x4c
		pxIPHeader = &pxTCPPacket->xIPHeader;
 800c91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c91c:	330e      	adds	r3, #14
 800c91e:	64bb      	str	r3, [r7, #72]	; 0x48
		pxEthernetHeader = &pxTCPPacket->xEthernetHeader;
 800c920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c922:	647b      	str	r3, [r7, #68]	; 0x44

		/* Fill the packet, using hton translations. */
		if( pxSocket != NULL )
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	f000 80ed 	beq.w	800cb06 <prvTCPReturnPacket+0x222>
		{
			/* Calculate the space in the RX buffer in order to advertise the
			size of this socket's reception window. */
			pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	33dc      	adds	r3, #220	; 0xdc
 800c930:	643b      	str	r3, [r7, #64]	; 0x40

			if( pxSocket->u.xTCP.rxStream != NULL )
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c936:	2b00      	cmp	r3, #0
 800c938:	d006      	beq.n	800c948 <prvTCPReturnPacket+0x64>
			{
				/* An RX stream was created already, see how much space is
				available. */
				ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c93e:	4618      	mov	r0, r3
 800c940:	f7ff fde6 	bl	800c510 <uxStreamBufferFrontSpace>
 800c944:	65f8      	str	r0, [r7, #92]	; 0x5c
 800c946:	e002      	b.n	800c94e <prvTCPReturnPacket+0x6a>
			}
			else
			{
				/* No RX stream has been created, the full stream size is
				available. */
				ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c94c:	65fb      	str	r3, [r7, #92]	; 0x5c
			}

			/* Take the minimum of the RX buffer space and the RX window size. */
			ulSpace = FreeRTOS_min_uint32( pxSocket->u.xTCP.ulRxCurWinSize, pxTCPWindow->xSize.ulRxWindowLength );
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800c954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	4619      	mov	r1, r3
 800c95a:	4610      	mov	r0, r2
 800c95c:	f7ff fd77 	bl	800c44e <FreeRTOS_min_uint32>
 800c960:	65b8      	str	r0, [r7, #88]	; 0x58

			if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c968:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d107      	bne.n	800c982 <prvTCPReturnPacket+0x9e>
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c978:	f003 0304 	and.w	r3, r3, #4
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d001      	beq.n	800c986 <prvTCPReturnPacket+0xa2>
			{
				/* The low-water mark was reached, meaning there was little
				space left.  The socket will wait until the application has read
				or flushed the incoming data, and 'zero-window' will be
				advertised. */
				ulSpace = 0u;
 800c982:	2300      	movs	r3, #0
 800c984:	65bb      	str	r3, [r7, #88]	; 0x58
			}

			/* If possible, advertise an RX window size of at least 1 MSS, otherwise
			the peer might start 'zero window probing', i.e. sending small packets
			(1, 2, 4, 8... bytes). */
			if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c98c:	461a      	mov	r2, r3
 800c98e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c990:	429a      	cmp	r2, r3
 800c992:	d90a      	bls.n	800c9aa <prvTCPReturnPacket+0xc6>
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c99a:	461a      	mov	r2, r3
 800c99c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d803      	bhi.n	800c9aa <prvTCPReturnPacket+0xc6>
			{
				ulSpace = pxSocket->u.xTCP.usCurMSS;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c9a8:	65bb      	str	r3, [r7, #88]	; 0x58
			}

			/* Avoid overflow of the 16-bit win field. */
			ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9b4:	40d3      	lsrs	r3, r2
 800c9b6:	653b      	str	r3, [r7, #80]	; 0x50
			if( ulWinSize > 0xfffcUL )
 800c9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9ba:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d902      	bls.n	800c9c8 <prvTCPReturnPacket+0xe4>
			{
				ulWinSize = 0xfffcUL;
 800c9c2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800c9c6:	653b      	str	r3, [r7, #80]	; 0x50
			}

			pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800c9c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	021b      	lsls	r3, r3, #8
 800c9ce:	b21a      	sxth	r2, r3
 800c9d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	0a1b      	lsrs	r3, r3, #8
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	b21b      	sxth	r3, r3
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	b21b      	sxth	r3, r3
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9e2:	861a      	strh	r2, [r3, #48]	; 0x30
				}
			}
			#endif /* ipconfigHAS_DEBUG_PRINTF != 0 */

			/* The new window size has been advertised, switch off the flag. */
			pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c9ea:	f36f 0300 	bfc	r3, #0, #1
 800c9ee:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

			/* Later on, when deciding to delay an ACK, a precise estimate is needed
			of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
			highest sequence number minus 1 that the socket will accept. */
			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800c9f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9f4:	691a      	ldr	r2, [r3, #16]
 800c9f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9f8:	441a      	add	r2, r3
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	645a      	str	r2, [r3, #68]	; 0x44

			#if( ipconfigTCP_KEEP_ALIVE == 1 )
				if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca04:	f003 0302 	and.w	r3, r3, #2
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d02f      	beq.n	800ca6e <prvTCPReturnPacket+0x18a>
				{
					/* Sending a keep-alive packet, send the current sequence number
					minus 1, which will	be recognised as a keep-alive packet an
					responded to by acknowledging the last byte. */
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ca14:	f36f 0341 	bfc	r3, #1, #1
 800ca18:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ca22:	f043 0304 	orr.w	r3, r3, #4
 800ca26:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

					pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ca30:	1e5a      	subs	r2, r3, #1
 800ca32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca34:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800ca38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca3a:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ca3e:	061a      	lsls	r2, r3, #24
 800ca40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca42:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ca46:	021b      	lsls	r3, r3, #8
 800ca48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ca4c:	431a      	orrs	r2, r3
 800ca4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca50:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ca54:	0a1b      	lsrs	r3, r3, #8
 800ca56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ca5a:	431a      	orrs	r2, r3
 800ca5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca5e:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ca62:	0e1b      	lsrs	r3, r3, #24
 800ca64:	431a      	orrs	r2, r3
 800ca66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca68:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800ca6c:	e034      	b.n	800cad8 <prvTCPReturnPacket+0x1f4>
				}
				else
			#endif
			{
				pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ca74:	061a      	lsls	r2, r3, #24
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ca7c:	021b      	lsls	r3, r3, #8
 800ca7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ca82:	431a      	orrs	r2, r3
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ca8a:	0a1b      	lsrs	r3, r3, #8
 800ca8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ca90:	431a      	orrs	r2, r3
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ca98:	0e1b      	lsrs	r3, r3, #24
 800ca9a:	431a      	orrs	r2, r3
 800ca9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca9e:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

				if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u )
 800caa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caa4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800caa8:	f003 0301 	and.w	r3, r3, #1
 800caac:	2b00      	cmp	r3, #0
 800caae:	d013      	beq.n	800cad8 <prvTCPReturnPacket+0x1f4>
				{
					/* Suppress FIN in case this packet carries earlier data to be
					retransmitted. */
					uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	3b28      	subs	r3, #40	; 0x28
 800cab4:	63fb      	str	r3, [r7, #60]	; 0x3c
					if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 800cab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cabc:	441a      	add	r2, r3
 800cabe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d008      	beq.n	800cad8 <prvTCPReturnPacket+0x1f4>
					{
						pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_FIN );
 800cac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cac8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cacc:	f023 0301 	bic.w	r3, r3, #1
 800cad0:	b2da      	uxtb	r2, r3
 800cad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cad4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
					}
				}
			}

			/* Tell which sequence number is expected next time */
			pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 800cad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	061a      	lsls	r2, r3, #24
 800cade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	021b      	lsls	r3, r3, #8
 800cae4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cae8:	431a      	orrs	r2, r3
 800caea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	0a1b      	lsrs	r3, r3, #8
 800caf0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800caf4:	431a      	orrs	r2, r3
 800caf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caf8:	691b      	ldr	r3, [r3, #16]
 800cafa:	0e1b      	lsrs	r3, r3, #24
 800cafc:	431a      	orrs	r2, r3
 800cafe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb00:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 800cb04:	e00d      	b.n	800cb22 <prvTCPReturnPacket+0x23e>
		}
		else
		{
			/* Sending data without a socket, probably replying with a RST flag
			Just swap the two sequence numbers. */
			vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 800cb06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb08:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800cb0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb10:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 800cb14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb16:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800cb1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb1e:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
		}

		pxIPHeader->ucTimeToLive           = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800cb22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb24:	2280      	movs	r2, #128	; 0x80
 800cb26:	721a      	strb	r2, [r3, #8]
		pxIPHeader->usLength               = FreeRTOS_htons( ulLen );
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	021b      	lsls	r3, r3, #8
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	0a1b      	lsrs	r3, r3, #8
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	4313      	orrs	r3, r2
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb3c:	805a      	strh	r2, [r3, #2]
		if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d003      	beq.n	800cb4c <prvTCPReturnPacket+0x268>
 800cb44:	4b3a      	ldr	r3, [pc, #232]	; (800cc30 <prvTCPReturnPacket+0x34c>)
 800cb46:	695b      	ldr	r3, [r3, #20]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d103      	bne.n	800cb54 <prvTCPReturnPacket+0x270>
		{
			/* When pxSocket is NULL, this function is called by prvTCPSendReset()
			and the IP-addresses must be swapped.
			Also swap the IP-addresses in case the IP-tack doesn't have an
			IP-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ). */
			ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 800cb4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb4e:	691b      	ldr	r3, [r3, #16]
 800cb50:	657b      	str	r3, [r7, #84]	; 0x54
 800cb52:	e002      	b.n	800cb5a <prvTCPReturnPacket+0x276>
		}
		else
		{
			ulSourceAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800cb54:	4b36      	ldr	r3, [pc, #216]	; (800cc30 <prvTCPReturnPacket+0x34c>)
 800cb56:	695b      	ldr	r3, [r3, #20]
 800cb58:	657b      	str	r3, [r7, #84]	; 0x54
		}
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800cb5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb5c:	68da      	ldr	r2, [r3, #12]
 800cb5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb60:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 800cb62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb66:	60da      	str	r2, [r3, #12]
		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800cb68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb6a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800cb6e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800cb72:	021b      	lsls	r3, r3, #8
 800cb74:	4313      	orrs	r3, r2
 800cb76:	86fb      	strh	r3, [r7, #54]	; 0x36
 800cb78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb80:	845a      	strh	r2, [r3, #34]	; 0x22
 800cb82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb84:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cb86:	849a      	strh	r2, [r3, #36]	; 0x24

		/* Just an increasing number. */
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800cb88:	4b2a      	ldr	r3, [pc, #168]	; (800cc34 <prvTCPReturnPacket+0x350>)
 800cb8a:	881b      	ldrh	r3, [r3, #0]
 800cb8c:	021b      	lsls	r3, r3, #8
 800cb8e:	b21a      	sxth	r2, r3
 800cb90:	4b28      	ldr	r3, [pc, #160]	; (800cc34 <prvTCPReturnPacket+0x350>)
 800cb92:	881b      	ldrh	r3, [r3, #0]
 800cb94:	0a1b      	lsrs	r3, r3, #8
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	b21b      	sxth	r3, r3
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	b21b      	sxth	r3, r3
 800cb9e:	b29a      	uxth	r2, r3
 800cba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cba2:	809a      	strh	r2, [r3, #4]
		usPacketIdentifier++;
 800cba4:	4b23      	ldr	r3, [pc, #140]	; (800cc34 <prvTCPReturnPacket+0x350>)
 800cba6:	881b      	ldrh	r3, [r3, #0]
 800cba8:	3301      	adds	r3, #1
 800cbaa:	b29a      	uxth	r2, r3
 800cbac:	4b21      	ldr	r3, [pc, #132]	; (800cc34 <prvTCPReturnPacket+0x350>)
 800cbae:	801a      	strh	r2, [r3, #0]
		pxIPHeader->usFragmentOffset = 0u;
 800cbb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	719a      	strb	r2, [r3, #6]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	71da      	strb	r2, [r3, #7]
	#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
		pxNetworkBuffer->pxNextBuffer = NULL;
	#endif

		/* Important: tell NIC driver how many bytes must be sent. */
		pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f103 020e 	add.w	r2, r3, #14
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	61da      	str	r2, [r3, #28]

		/* Fill in the destination MAC addresses. */
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ),
 800cbc4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cbc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbc8:	3306      	adds	r3, #6
 800cbca:	2206      	movs	r2, #6
 800cbcc:	4619      	mov	r1, r3
 800cbce:	f004 f824 	bl	8010c1a <memcpy>
			sizeof( pxEthernetHeader->xDestinationAddress ) );

		/* The source MAC addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800cbd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbd4:	3306      	adds	r3, #6
 800cbd6:	2206      	movs	r2, #6
 800cbd8:	4915      	ldr	r1, [pc, #84]	; (800cc30 <prvTCPReturnPacket+0x34c>)
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f004 f81d 	bl	8010c1a <memcpy>
			}
		}
		#endif

		/* Send! */
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800cbe0:	6839      	ldr	r1, [r7, #0]
 800cbe2:	68b8      	ldr	r0, [r7, #8]
 800cbe4:	f7f7 fe84 	bl	80048f0 <xNetworkInterfaceOutput>

		if( xReleaseAfterSend == pdFALSE )
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d11c      	bne.n	800cc28 <prvTCPReturnPacket+0x344>
		{
			/* Swap-back some fields, as pxBuffer probably points to a socket field
			containing the packet header. */
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort);
 800cbee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbf0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800cbf4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800cbf8:	021b      	lsls	r3, r3, #8
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	86bb      	strh	r3, [r7, #52]	; 0x34
 800cbfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc06:	845a      	strh	r2, [r3, #34]	; 0x22
 800cc08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800cc0c:	849a      	strh	r2, [r3, #36]	; 0x24
			pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 800cc0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc10:	f8d3 201e 	ldr.w	r2, [r3, #30]
 800cc14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc16:	f8c3 201a 	str.w	r2, [r3, #26]
			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800cc1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc1c:	3306      	adds	r3, #6
 800cc1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc20:	2206      	movs	r2, #6
 800cc22:	4618      	mov	r0, r3
 800cc24:	f003 fff9 	bl	8010c1a <memcpy>
		else
		{
			/* Nothing to do: the buffer has been passed to DMA and will be released after use */
		}
	} /* if( pxNetworkBuffer != NULL ) */
}
 800cc28:	bf00      	nop
 800cc2a:	3760      	adds	r7, #96	; 0x60
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	200000a0 	.word	0x200000a0
 800cc34:	20004194 	.word	0x20004194

0800cc38 <prvTCPCreateWindow>:
 * random starting value, are being synchronised.  The sliding window manager
 * (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 * Size (MSS) in use.
 */
static void prvTCPCreateWindow( FreeRTOS_Socket_t *pxSocket )
{
 800cc38:	b5b0      	push	{r4, r5, r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af02      	add	r7, sp, #8
 800cc3e:	6078      	str	r0, [r7, #4]
		FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %lu Water %lu <= %lu <= %lu\n",
			pxSocket->u.xTCP.uxRxWinSize * ipconfigTCP_MSS,
			pxSocket->u.xTCP.uxLittleSpace ,
			pxSocket->u.xTCP.uxEnoughSpace,
			pxSocket->u.xTCP.uxRxStreamSize ) );
	vTCPWindowCreate(
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
		&pxSocket->u.xTCP.xTCPWindow,
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cc4c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800cc50:	fb02 f103 	mul.w	r1, r2, r3
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cc5a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800cc5e:	fb02 f403 	mul.w	r4, r2, r3
	vTCPWindowCreate(
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8d3 50ec 	ldr.w	r5, [r3, #236]	; 0xec
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
		( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
	vTCPWindowCreate(
 800cc74:	9201      	str	r2, [sp, #4]
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	462b      	mov	r3, r5
 800cc7a:	4622      	mov	r2, r4
 800cc7c:	f002 f85c 	bl	800ed38 <vTCPWindowCreate>
}
 800cc80:	bf00      	nop
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bdb0      	pop	{r4, r5, r7, pc}

0800cc88 <prvTCPPrepareConnect>:
 * the Ethernet address of the target will be found using ARP.  In case the
 * target IP address is not within the netmask, the hardware address of the
 * gateway will be used.
 */
static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t *pxSocket )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b08a      	sub	sp, #40	; 0x28
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
TCPPacket_t *pxTCPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulRemoteIP;
MACAddress_t xEthAddress;
BaseType_t xReturn = pdTRUE;
 800cc90:	2301      	movs	r3, #1
 800cc92:	627b      	str	r3, [r7, #36]	; 0x24
		/* Only necessary for nicer logging. */
		memset( xEthAddress.ucBytes, '\0', sizeof( xEthAddress.ucBytes ) );
	}
	#endif /* ipconfigHAS_PRINTF != 0 */

	ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc98:	061a      	lsls	r2, r3, #24
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc9e:	021b      	lsls	r3, r3, #8
 800cca0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cca4:	431a      	orrs	r2, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccaa:	0a1b      	lsrs	r3, r3, #8
 800ccac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ccb0:	431a      	orrs	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccb6:	0e1b      	lsrs	r3, r3, #24
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	617b      	str	r3, [r7, #20]

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 800ccbc:	f107 020c 	add.w	r2, r7, #12
 800ccc0:	f107 0314 	add.w	r3, r7, #20
 800ccc4:	4611      	mov	r1, r2
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7fb fe20 	bl	800890c <eARPGetCacheEntry>
 800cccc:	4603      	mov	r3, r0
 800ccce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	switch( eReturned )
 800ccd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d00e      	beq.n	800ccf8 <prvTCPPrepareConnect+0x70>
		break;				/* We can now prepare the SYN packet. */
	case eARPCacheMiss:		/* An ARP table lookup did not find a valid entry. */
	case eCantSendPacket:	/* There is no IP address, or an ARP is still in progress. */
	default:
		/* Count the number of times it couldn't find the ARP address. */
		pxSocket->u.xTCP.ucRepCount++;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cce0:	3301      	adds	r3, #1
 800cce2:	b2da      	uxtb	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			xEthAddress.ucBytes[ 3 ],
			xEthAddress.ucBytes[ 4 ],
			xEthAddress.ucBytes[ 5 ] ) );

		/* And issue a (new) ARP request */
		FreeRTOS_OutputARPRequest( ulRemoteIP );
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7fb ff4d 	bl	8008b8c <FreeRTOS_OutputARPRequest>

		xReturn = pdFALSE;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	627b      	str	r3, [r7, #36]	; 0x24
 800ccf6:	e000      	b.n	800ccfa <prvTCPPrepareConnect+0x72>
		break;				/* We can now prepare the SYN packet. */
 800ccf8:	bf00      	nop
	}

	if( xReturn != pdFALSE )
 800ccfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	f000 8091 	beq.w	800ce24 <prvTCPPrepareConnect+0x19c>
	{
		/* The MAC-address of the peer (or gateway) has been found,
		now prepare the initial TCP packet and some fields in the socket. */
		pxTCPPacket = ( TCPPacket_t * )pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	3382      	adds	r3, #130	; 0x82
 800cd06:	61fb      	str	r3, [r7, #28]
		pxIPHeader = &pxTCPPacket->xIPHeader;
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	330e      	adds	r3, #14
 800cd0c:	61bb      	str	r3, [r7, #24]

		/* reset the retry counter to zero. */
		pxSocket->u.xTCP.ucRepCount = 0u;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

		/* And remember that the connect/SYN data are prepared. */
		pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cd1c:	f043 0308 	orr.w	r3, r3, #8
 800cd20:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

		/* Now that the Ethernet address is known, the initial packet can be
		prepared. */
		memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, '\0', sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	3382      	adds	r3, #130	; 0x82
 800cd28:	2246      	movs	r2, #70	; 0x46
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f003 ff99 	bl	8010c64 <memset>

		/* Write the Ethernet address in Source, because it will be swapped by
		prvTCPReturnPacket(). */
		memcpy( &pxTCPPacket->xEthernetHeader.xSourceAddress, &xEthAddress, sizeof( xEthAddress ) );
 800cd32:	69fb      	ldr	r3, [r7, #28]
 800cd34:	3306      	adds	r3, #6
 800cd36:	461a      	mov	r2, r3
 800cd38:	f107 030c 	add.w	r3, r7, #12
 800cd3c:	6818      	ldr	r0, [r3, #0]
 800cd3e:	6010      	str	r0, [r2, #0]
 800cd40:	889b      	ldrh	r3, [r3, #4]
 800cd42:	8093      	strh	r3, [r2, #4]

		/* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
		pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	2200      	movs	r2, #0
 800cd48:	f042 0208 	orr.w	r2, r2, #8
 800cd4c:	731a      	strb	r2, [r3, #12]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	735a      	strb	r2, [r3, #13]

		pxIPHeader->ucVersionHeaderLength = 0x45u;
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	2245      	movs	r2, #69	; 0x45
 800cd56:	701a      	strb	r2, [r3, #0]
		pxIPHeader->usLength = FreeRTOS_htons( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	709a      	strb	r2, [r3, #2]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800cd64:	70da      	strb	r2, [r3, #3]
		pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800cd66:	69bb      	ldr	r3, [r7, #24]
 800cd68:	2280      	movs	r2, #128	; 0x80
 800cd6a:	721a      	strb	r2, [r3, #8]

		pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	2206      	movs	r2, #6
 800cd70:	725a      	strb	r2, [r3, #9]

		/* Addresses and ports will be stored swapped because prvTCPReturnPacket
		will swap them back while replying. */
		pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800cd72:	4b2f      	ldr	r3, [pc, #188]	; (800ce30 <prvTCPPrepareConnect+0x1a8>)
 800cd74:	695a      	ldr	r2, [r3, #20]
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd7e:	061a      	lsls	r2, r3, #24
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd84:	021b      	lsls	r3, r3, #8
 800cd86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cd8a:	431a      	orrs	r2, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd90:	0a1b      	lsrs	r3, r3, #8
 800cd92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cd96:	431a      	orrs	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd9c:	0e1b      	lsrs	r3, r3, #24
 800cd9e:	431a      	orrs	r2, r3
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	60da      	str	r2, [r3, #12]

		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cda8:	021b      	lsls	r3, r3, #8
 800cdaa:	b21a      	sxth	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cdb0:	0a1b      	lsrs	r3, r3, #8
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	b21b      	sxth	r3, r3
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	b21b      	sxth	r3, r3
 800cdba:	b29a      	uxth	r2, r3
 800cdbc:	69fb      	ldr	r3, [r7, #28]
 800cdbe:	845a      	strh	r2, [r3, #34]	; 0x22
		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cdc4:	021b      	lsls	r3, r3, #8
 800cdc6:	b21a      	sxth	r2, r3
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cdcc:	0a1b      	lsrs	r3, r3, #8
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	b21b      	sxth	r3, r3
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	b21b      	sxth	r3, r3
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	849a      	strh	r2, [r3, #36]	; 0x24

		/* We are actively connecting, so the peer's Initial Sequence Number (ISN)
		isn't known yet. */
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0ul;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2200      	movs	r2, #0
 800cde0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		/* Start with ISN (Initial Sequence Number). */
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulNextInitialSequenceNumber;
 800cde4:	4b13      	ldr	r3, [pc, #76]	; (800ce34 <prvTCPPrepareConnect+0x1ac>)
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

		/* And increment it with 268 for the next new connection, which is
		recommended value. */
		ulNextInitialSequenceNumber += 0x102UL;
 800cdee:	4b11      	ldr	r3, [pc, #68]	; (800ce34 <prvTCPPrepareConnect+0x1ac>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800cdf6:	4a0f      	ldr	r2, [pc, #60]	; (800ce34 <prvTCPPrepareConnect+0x1ac>)
 800cdf8:	6013      	str	r3, [r2, #0]

		/* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
		the high nibble of the TCP offset field. */
		pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50u;
 800cdfa:	69fb      	ldr	r3, [r7, #28]
 800cdfc:	2250      	movs	r2, #80	; 0x50
 800cdfe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		/* Only set the SYN flag. */
		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_SYN;
 800ce02:	69fb      	ldr	r3, [r7, #28]
 800ce04:	2202      	movs	r2, #2
 800ce06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		/* Set the values of usInitMSS / usCurMSS for this socket. */
		prvSocketSetMSS( pxSocket );
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f001 fa88 	bl	800e320 <prvSocketSetMSS>

		/* For now this is also the advertised window size. */
		pxSocket->u.xTCP.ulRxCurWinSize = pxSocket->u.xTCP.usInitMSS;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800ce16:	461a      	mov	r2, r3
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

		/* The initial sequence numbers at our side are known.  Later
		vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
		first wait for a SYN+ACK reply. */
		prvTCPCreateWindow( pxSocket );
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f7ff ff0a 	bl	800cc38 <prvTCPCreateWindow>
	}

	return xReturn;
 800ce24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3728      	adds	r7, #40	; 0x28
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	200000a0 	.word	0x200000a0
 800ce34:	20004234 	.word	0x20004234

0800ce38 <prvCheckOptions>:
 * Parse the TCP option(s) received, if present.  It has already been verified
 * that: ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that the TP header
 * is longer than the usual 20 (5 x 4) bytes.
 */
static void prvCheckOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b08e      	sub	sp, #56	; 0x38
 800ce3c:	af02      	add	r7, sp, #8
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
const unsigned char *pucPtr;
const unsigned char *pucLast;
TCPWindow_t *pxTCPWindow;
UBaseType_t uxNewMSS;

	pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	699b      	ldr	r3, [r3, #24]
 800ce46:	627b      	str	r3, [r7, #36]	; 0x24
	pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800ce48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4a:	3322      	adds	r3, #34	; 0x22
 800ce4c:	623b      	str	r3, [r7, #32]

	/* A character pointer to iterate through the option data */
	pucPtr = pxTCPHeader->ucOptdata;
 800ce4e:	6a3b      	ldr	r3, [r7, #32]
 800ce50:	3314      	adds	r3, #20
 800ce52:	62fb      	str	r3, [r7, #44]	; 0x2c
	pucLast = pucPtr + (((pxTCPHeader->ucTCPOffset >> 4) - 5) << 2);
 800ce54:	6a3b      	ldr	r3, [r7, #32]
 800ce56:	7b1b      	ldrb	r3, [r3, #12]
 800ce58:	091b      	lsrs	r3, r3, #4
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	3b05      	subs	r3, #5
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	461a      	mov	r2, r3
 800ce62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce64:	4413      	add	r3, r2
 800ce66:	61fb      	str	r3, [r7, #28]
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	33dc      	adds	r3, #220	; 0xdc
 800ce6c:	61bb      	str	r3, [r7, #24]

	/* The comparison with pucLast is only necessary in case the option data are
	corrupted, we don't like to run into invalid memory and crash. */
	while( pucPtr < pucLast )
 800ce6e:	e0c7      	b.n	800d000 <prvCheckOptions+0x1c8>
	{
		if( pucPtr[ 0 ] == TCP_OPT_END )
 800ce70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f000 80c9 	beq.w	800d00c <prvCheckOptions+0x1d4>
		{
			/* End of options. */
			return;
		}
		if( pucPtr[ 0 ] == TCP_OPT_NOOP)
 800ce7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d103      	bne.n	800ce8a <prvCheckOptions+0x52>
		{
			pucPtr++;
 800ce82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce84:	3301      	adds	r3, #1
 800ce86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce88:	e0ba      	b.n	800d000 <prvCheckOptions+0x1c8>

			/* NOP option, inserted to make the length a multiple of 4. */
		}
#if( ipconfigUSE_TCP_WIN != 0 )
		else if( ( pucPtr[ 0 ] == TCP_OPT_WSOPT ) && ( pucPtr[ 1 ] == TCP_OPT_WSOPT_LEN ) )
 800ce8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	2b03      	cmp	r3, #3
 800ce90:	d114      	bne.n	800cebc <prvCheckOptions+0x84>
 800ce92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce94:	3301      	adds	r3, #1
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	2b03      	cmp	r3, #3
 800ce9a:	d10f      	bne.n	800cebc <prvCheckOptions+0x84>
		{
			pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 800ce9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9e:	789a      	ldrb	r2, [r3, #2]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
			pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800ceac:	f043 0310 	orr.w	r3, r3, #16
 800ceb0:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			pucPtr += TCP_OPT_WSOPT_LEN;
 800ceb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb6:	3303      	adds	r3, #3
 800ceb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ceba:	e0a1      	b.n	800d000 <prvCheckOptions+0x1c8>
		}
#endif	/* ipconfigUSE_TCP_WIN */
		else if( ( pucPtr[ 0 ] == TCP_OPT_MSS ) && ( pucPtr[ 1 ] == TCP_OPT_MSS_LEN ) )
 800cebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	d14a      	bne.n	800cf5a <prvCheckOptions+0x122>
 800cec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec6:	3301      	adds	r3, #1
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	2b04      	cmp	r3, #4
 800cecc:	d145      	bne.n	800cf5a <prvCheckOptions+0x122>
		{
			/* An MSS option with the correct option length.  FreeRTOS_htons()
			is not needed here because usChar2u16() already returns a host
			endian number. */
			uxNewMSS = usChar2u16( pucPtr + 2 );
 800cece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced0:	3302      	adds	r3, #2
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7ff fb85 	bl	800c5e2 <usChar2u16>
 800ced8:	4603      	mov	r3, r0
 800ceda:	617b      	str	r3, [r7, #20]
			if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
			{
				FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
			}

			if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800cee2:	461a      	mov	r2, r3
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d933      	bls.n	800cf52 <prvCheckOptions+0x11a>
			{
				/* our MSS was bigger than the MSS of the other party: adapt it. */
				pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cef0:	f043 0301 	orr.w	r3, r3, #1
 800cef4:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
				if( ( pxTCPWindow != NULL ) && ( pxSocket->u.xTCP.usCurMSS > uxNewMSS ) )
 800cef8:	69bb      	ldr	r3, [r7, #24]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d00b      	beq.n	800cf16 <prvCheckOptions+0xde>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cf04:	461a      	mov	r2, r3
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d904      	bls.n	800cf16 <prvCheckOptions+0xde>
				{
					/* The peer advertises a smaller MSS than this socket was
					using.  Use that as well. */
					FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
					pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	b29a      	uxth	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				}
				pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	685a      	ldr	r2, [r3, #4]
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	fb02 f203 	mul.w	r2, r2, r3
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	605a      	str	r2, [r3, #4]
				pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	b29a      	uxth	r2, r3
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
				pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	b29a      	uxth	r2, r3
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
				pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	b29a      	uxth	r2, r3
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			#if( ipconfigUSE_TCP_WIN != 1 )
				/* Without scaled windows, MSS is the only interesting option. */
				break;
			#else
				/* Or else we continue to check another option: selective ACK. */
				pucPtr += TCP_OPT_MSS_LEN;
 800cf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf54:	3304      	adds	r3, #4
 800cf56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf58:	e052      	b.n	800d000 <prvCheckOptions+0x1c8>
		}
		else
		{
			/* All other options have a length field, so that we easily
			can skip past them. */
			int len = ( int )pucPtr[ 1 ];
 800cf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	62bb      	str	r3, [r7, #40]	; 0x28
			if( len == 0 )
 800cf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d053      	beq.n	800d010 <prvCheckOptions+0x1d8>
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				/* Selective ACK: the peer has received a packet but it is missing earlier
				packets.  At least this packet does not need retransmission anymore
				ulTCPWindowTxSack( ) takes care of this administration. */
				if( pucPtr[0] == TCP_OPT_SACK_A )
 800cf68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	2b05      	cmp	r3, #5
 800cf6e:	d143      	bne.n	800cff8 <prvCheckOptions+0x1c0>
				{
					len -= 2;
 800cf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf72:	3b02      	subs	r3, #2
 800cf74:	62bb      	str	r3, [r7, #40]	; 0x28
					pucPtr += 2;
 800cf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf78:	3302      	adds	r3, #2
 800cf7a:	62fb      	str	r3, [r7, #44]	; 0x2c

					while( len >= 8 )
 800cf7c:	e039      	b.n	800cff2 <prvCheckOptions+0x1ba>
					{
					uint32_t ulFirst = ulChar2u32( pucPtr );
 800cf7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf80:	f7ff fb14 	bl	800c5ac <ulChar2u32>
 800cf84:	6138      	str	r0, [r7, #16]
					uint32_t ulLast  = ulChar2u32( pucPtr + 4 );
 800cf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf88:	3304      	adds	r3, #4
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7ff fb0e 	bl	800c5ac <ulChar2u32>
 800cf90:	60f8      	str	r0, [r7, #12]
					uint32_t ulCount = ulTCPWindowTxSack( &pxSocket->u.xTCP.xTCPWindow, ulFirst, ulLast );
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	33dc      	adds	r3, #220	; 0xdc
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	6939      	ldr	r1, [r7, #16]
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f002 fc1a 	bl	800f7d4 <ulTCPWindowTxSack>
 800cfa0:	60b8      	str	r0, [r7, #8]
						/* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
						starting from the head position.
						Advance the tail pointer in txStream. */
						if( ( pxSocket->u.xTCP.txStream  != NULL ) && ( ulCount > 0 ) )
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d01d      	beq.n	800cfe6 <prvCheckOptions+0x1ae>
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d01a      	beq.n	800cfe6 <prvCheckOptions+0x1ae>
						{
							/* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
							uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	9300      	str	r3, [sp, #0]
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	2100      	movs	r1, #0
 800cfbe:	f7ff f9b2 	bl	800c326 <uxStreamBufferGet>
							pxSocket->xEventBits |= eSOCKET_SEND;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f043 0202 	orr.w	r2, r3, #2
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	601a      	str	r2, [r3, #0]

							#if ipconfigSUPPORT_SELECT_FUNCTION == 1
							{
								if( pxSocket->xSelectBits & eSELECT_WRITE )
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd2:	f003 0302 	and.w	r3, r3, #2
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d005      	beq.n	800cfe6 <prvCheckOptions+0x1ae>
								{
									/* The field 'xEventBits' is used to store regular socket events (at most 8),
									as well as 'select events', which will be left-shifted */
									pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	601a      	str	r2, [r3, #0]
									pxSocket->u.xTCP.pxHandleSent( (Socket_t *)pxSocket, ulCount );
								}
							}
							#endif /* ipconfigUSE_CALLBACKS == 1  */
						}
						pucPtr += 8;
 800cfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe8:	3308      	adds	r3, #8
 800cfea:	62fb      	str	r3, [r7, #44]	; 0x2c
						len -= 8;
 800cfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfee:	3b08      	subs	r3, #8
 800cff0:	62bb      	str	r3, [r7, #40]	; 0x28
					while( len >= 8 )
 800cff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff4:	2b07      	cmp	r3, #7
 800cff6:	dcc2      	bgt.n	800cf7e <prvCheckOptions+0x146>
					}
				#endif	/* ipconfigUSE_TCP_TIMESTAMPS == 1 */
			}
			#endif	/* ipconfigUSE_TCP_WIN == 1 */

			pucPtr += len;
 800cff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cffc:	4413      	add	r3, r2
 800cffe:	62fb      	str	r3, [r7, #44]	; 0x2c
	while( pucPtr < pucLast )
 800d000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	429a      	cmp	r2, r3
 800d006:	f4ff af33 	bcc.w	800ce70 <prvCheckOptions+0x38>
 800d00a:	e002      	b.n	800d012 <prvCheckOptions+0x1da>
			return;
 800d00c:	bf00      	nop
 800d00e:	e000      	b.n	800d012 <prvCheckOptions+0x1da>
				break;
 800d010:	bf00      	nop
		}
	}
}
 800d012:	3730      	adds	r7, #48	; 0x30
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <prvWinScaleFactor>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN != 0 )

	static uint8_t prvWinScaleFactor( FreeRTOS_Socket_t *pxSocket )
	{
 800d018:	b480      	push	{r7}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
	size_t uxWinSize;
	uint8_t ucFactor;

		/* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800d02c:	fb02 f303 	mul.w	r3, r2, r3
 800d030:	60fb      	str	r3, [r7, #12]
		ucFactor = 0u;
 800d032:	2300      	movs	r3, #0
 800d034:	72fb      	strb	r3, [r7, #11]
		while( uxWinSize > 0xfffful )
 800d036:	e005      	b.n	800d044 <prvWinScaleFactor+0x2c>
		{
			/* Divide by two and increase the binary factor by 1. */
			uxWinSize >>= 1;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	085b      	lsrs	r3, r3, #1
 800d03c:	60fb      	str	r3, [r7, #12]
			ucFactor++;
 800d03e:	7afb      	ldrb	r3, [r7, #11]
 800d040:	3301      	adds	r3, #1
 800d042:	72fb      	strb	r3, [r7, #11]
		while( uxWinSize > 0xfffful )
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d04a:	d2f5      	bcs.n	800d038 <prvWinScaleFactor+0x20>
		FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %lu MSS %lu Factor %u\n",
			pxSocket->u.xTCP.uxRxWinSize,
			pxSocket->u.xTCP.usInitMSS,
			ucFactor ) );

		return ucFactor;
 800d04c:	7afb      	ldrb	r3, [r7, #11]
	}
 800d04e:	4618      	mov	r0, r3
 800d050:	3714      	adds	r7, #20
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr

0800d05a <prvSetSynAckOptions>:
 * When opening a TCP connection, while SYN's are being sent, the  parties may
 * communicate what MSS (Maximum Segment Size) they intend to use.   MSS is the
 * nett size of the payload, always smaller than MTU.
*/
static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t *pxSocket, TCPPacket_t * pxTCPPacket )
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b086      	sub	sp, #24
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
 800d062:	6039      	str	r1, [r7, #0]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	3322      	adds	r3, #34	; 0x22
 800d068:	617b      	str	r3, [r7, #20]
uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800d070:	827b      	strh	r3, [r7, #18]
	UBaseType_t uxOptionsLength;
#endif

	/* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) TCP_OPT_MSS;
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	2202      	movs	r2, #2
 800d076:	751a      	strb	r2, [r3, #20]
	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	2204      	movs	r2, #4
 800d07c:	755a      	strb	r2, [r3, #21]
	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800d07e:	8a7b      	ldrh	r3, [r7, #18]
 800d080:	0a1b      	lsrs	r3, r3, #8
 800d082:	b29b      	uxth	r3, r3
 800d084:	b2da      	uxtb	r2, r3
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	759a      	strb	r2, [r3, #22]
	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
 800d08a:	8a7b      	ldrh	r3, [r7, #18]
 800d08c:	b2da      	uxtb	r2, r3
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	75da      	strb	r2, [r3, #23]

	#if( ipconfigUSE_TCP_WIN != 0 )
	{
		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7ff ffc0 	bl	800d018 <prvWinScaleFactor>
 800d098:	4603      	mov	r3, r0
 800d09a:	461a      	mov	r2, r3
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	761a      	strb	r2, [r3, #24]
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	2203      	movs	r2, #3
 800d0ac:	765a      	strb	r2, [r3, #25]
		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	2203      	movs	r2, #3
 800d0b2:	769a      	strb	r2, [r3, #26]
		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	76da      	strb	r2, [r3, #27]
		uxOptionsLength = 8u;
 800d0be:	2308      	movs	r3, #8
 800d0c0:	60fb      	str	r3, [r7, #12]
				uxOptionsLength += 2u;
			}
			else
		#endif
		{
			pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_NOOP;
 800d0c2:	697a      	ldr	r2, [r7, #20]
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	3314      	adds	r3, #20
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	701a      	strb	r2, [r3, #0]
			pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	697a      	ldr	r2, [r7, #20]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	751a      	strb	r2, [r3, #20]
			pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	3302      	adds	r3, #2
 800d0de:	697a      	ldr	r2, [r7, #20]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	2204      	movs	r2, #4
 800d0e4:	751a      	strb	r2, [r3, #20]
			pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	3303      	adds	r3, #3
 800d0ea:	697a      	ldr	r2, [r7, #20]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	2202      	movs	r2, #2
 800d0f0:	751a      	strb	r2, [r3, #20]
			uxOptionsLength += 4u;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	3304      	adds	r3, #4
 800d0f6:	60fb      	str	r3, [r7, #12]
		}
		return uxOptionsLength; /* bytes, not words. */
 800d0f8:	68fb      	ldr	r3, [r7, #12]
	}
	#endif	/* ipconfigUSE_TCP_WIN == 0 */
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3718      	adds	r7, #24
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <prvTCPTouchSocket>:
 * For anti-hanging protection and TCP keep-alive messages.  Called in two
 * places: after receiving a packet and after a state change.  The socket's
 * alive timer may be reset.
 */
static void prvTCPTouchSocket( FreeRTOS_Socket_t *pxSocket )
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b082      	sub	sp, #8
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
	#if( ipconfigTCP_HANG_PROTECTION == 1 )
	{
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 800d10a:	f7fa fb9f 	bl	800784c <xTaskGetTickCount>
 800d10e:	4602      	mov	r2, r0
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif

	#if( ipconfigTCP_KEEP_ALIVE == 1 )
	{
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d11a:	f36f 0382 	bfc	r3, #2, #1
 800d11e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d128:	f36f 0341 	bfc	r3, #1, #1
 800d12c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 800d138:	f7fa fb88 	bl	800784c <xTaskGetTickCount>
 800d13c:	4602      	mov	r2, r0
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	( void ) pxSocket;
}
 800d142:	bf00      	nop
 800d144:	3708      	adds	r7, #8
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <vTCPStateChange>:
 * resetting the alive timer, calling the user's OnConnect handler to notify
 * that a socket has got (dis)connected, and setting bit to unblock a call to
 * FreeRTOS_select()
 */
void vTCPStateChange( FreeRTOS_Socket_t *pxSocket, enum eTCP_STATE eTCPState )
{
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b086      	sub	sp, #24
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
 800d152:	460b      	mov	r3, r1
 800d154:	70fb      	strb	r3, [r7, #3]
FreeRTOS_Socket_t *xParent = NULL;
 800d156:	2300      	movs	r3, #0
 800d158:	617b      	str	r3, [r7, #20]
BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connected ? */
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d160:	2b04      	cmp	r3, #4
 800d162:	d906      	bls.n	800d172 <vTCPStateChange+0x28>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d16a:	2b08      	cmp	r3, #8
 800d16c:	d001      	beq.n	800d172 <vTCPStateChange+0x28>
 800d16e:	2301      	movs	r3, #1
 800d170:	e000      	b.n	800d174 <vTCPStateChange+0x2a>
 800d172:	2300      	movs	r3, #0
 800d174:	613b      	str	r3, [r7, #16]
BaseType_t bAfter  = ( BaseType_t ) NOW_CONNECTED( eTCPState );						/* Is it connected now ? */
 800d176:	78fb      	ldrb	r3, [r7, #3]
 800d178:	2b04      	cmp	r3, #4
 800d17a:	d904      	bls.n	800d186 <vTCPStateChange+0x3c>
 800d17c:	78fb      	ldrb	r3, [r7, #3]
 800d17e:	2b08      	cmp	r3, #8
 800d180:	d001      	beq.n	800d186 <vTCPStateChange+0x3c>
 800d182:	2301      	movs	r3, #1
 800d184:	e000      	b.n	800d188 <vTCPStateChange+0x3e>
 800d186:	2300      	movs	r3, #0
 800d188:	60fb      	str	r3, [r7, #12]
#if( ipconfigUSE_CALLBACKS == 1 )
	FreeRTOS_Socket_t *xConnected = NULL;
#endif

	/* Has the connected status changed? */
	if( bBefore != bAfter )
 800d18a:	693a      	ldr	r2, [r7, #16]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	429a      	cmp	r2, r3
 800d190:	f000 8087 	beq.w	800d2a2 <vTCPStateChange+0x158>
	{
		/* Is the socket connected now ? */
		if( bAfter != pdFALSE )
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d063      	beq.n	800d262 <vTCPStateChange+0x118>
		{
			/* if bPassQueued is true, this socket is an orphan until it gets connected. */
			if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d1a0:	f003 0304 	and.w	r3, r3, #4
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d048      	beq.n	800d23c <vTCPStateChange+0xf2>
			{
				/* Now that it is connected, find it's parent. */
				if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d1b0:	f003 0308 	and.w	r3, r3, #8
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d002      	beq.n	800d1c0 <vTCPStateChange+0x76>
				{
					xParent = pxSocket;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	617b      	str	r3, [r7, #20]
 800d1be:	e00f      	b.n	800d1e0 <vTCPStateChange+0x96>
				}
				else
				{
					xParent = pxSocket->u.xTCP.pxPeerSocket;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1c4:	617b      	str	r3, [r7, #20]
					configASSERT( xParent != NULL );
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d109      	bne.n	800d1e0 <vTCPStateChange+0x96>
 800d1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d0:	f383 8811 	msr	BASEPRI, r3
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	f3bf 8f4f 	dsb	sy
 800d1dc:	60bb      	str	r3, [r7, #8]
 800d1de:	e7fe      	b.n	800d1de <vTCPStateChange+0x94>
				}
				if( xParent != NULL )
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d018      	beq.n	800d218 <vTCPStateChange+0xce>
				{
					if( xParent->u.xTCP.pxPeerSocket == NULL )
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d102      	bne.n	800d1f4 <vTCPStateChange+0xaa>
					{
						xParent->u.xTCP.pxPeerSocket = pxSocket;
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	655a      	str	r2, [r3, #84]	; 0x54
					}

					xParent->xEventBits |= eSOCKET_ACCEPT;
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f043 0204 	orr.w	r2, r3, #4
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	601a      	str	r2, [r3, #0]

					#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
					{
						/* Library support FreeRTOS_select().  Receiving a new
						connection is being translated as a READ event. */
						if( ( xParent->xSelectBits & eSELECT_READ ) != 0 )
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d204:	f003 0301 	and.w	r3, r3, #1
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d005      	beq.n	800d218 <vTCPStateChange+0xce>
						{
							xParent->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	601a      	str	r2, [r3, #0]
					#endif
				}

				/* Don't need to access the parent socket anymore, so the
				reference 'pxPeerSocket' may be cleared. */
				pxSocket->u.xTCP.pxPeerSocket = NULL;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	655a      	str	r2, [r3, #84]	; 0x54
				pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d224:	f36f 0382 	bfc	r3, #2, #1
 800d228:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

				/* When true, this socket may be returned in a call to accept(). */
				pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800d22c:	687a      	ldr	r2, [r7, #4]
 800d22e:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d232:	f043 0302 	orr.w	r3, r3, #2
 800d236:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800d23a:	e024      	b.n	800d286 <vTCPStateChange+0x13c>
			}
			else
			{
				pxSocket->xEventBits |= eSOCKET_CONNECT;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f043 0208 	orr.w	r2, r3, #8
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	601a      	str	r2, [r3, #0]

				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
				{
					if( pxSocket->xSelectBits & eSELECT_WRITE )
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24c:	f003 0302 	and.w	r3, r3, #2
 800d250:	2b00      	cmp	r3, #0
 800d252:	d018      	beq.n	800d286 <vTCPStateChange+0x13c>
					{
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	601a      	str	r2, [r3, #0]
 800d260:	e011      	b.n	800d286 <vTCPStateChange+0x13c>
			}
		}
		else  /* bAfter == pdFALSE, connection is closed. */
		{
			/* Notify/wake-up the socket-owner by setting a semaphore. */
			pxSocket->xEventBits |= eSOCKET_CLOSED;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f043 0220 	orr.w	r2, r3, #32
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	601a      	str	r2, [r3, #0]

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d272:	f003 0304 	and.w	r3, r3, #4
 800d276:	2b00      	cmp	r3, #0
 800d278:	d005      	beq.n	800d286 <vTCPStateChange+0x13c>
				{
					pxSocket->xEventBits |= ( eSELECT_EXCEPT << SOCKET_EVENT_BIT_COUNT );
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	601a      	str	r2, [r3, #0]
				xConnected = pxSocket;
			}
		}
		#endif /* ipconfigUSE_CALLBACKS */

		if( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE )
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7ff f9bd 	bl	800c60c <prvTCPSocketIsActive>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d122      	bne.n	800d2de <vTCPStateChange+0x194>
		{
			/* Now the socket isn't in an active state anymore so it
			won't need further attention of the IP-task.
			Setting time-out to zero means that the socket won't get checked during
			timer events. */
			pxSocket->u.xTCP.usTimeout = 0u;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d2a0:	e01d      	b.n	800d2de <vTCPStateChange+0x194>
		}
	}
	else
	{
		if( eTCPState == eCLOSED )
 800d2a2:	78fb      	ldrb	r3, [r7, #3]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d11a      	bne.n	800d2de <vTCPStateChange+0x194>
		{
			/* Socket goes to status eCLOSED because of a RST.
			When nobody owns the socket yet, delete it. */
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d2ae:	f003 0304 	and.w	r3, r3, #4
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d107      	bne.n	800d2c8 <vTCPStateChange+0x17e>
				( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d2be:	f003 0302 	and.w	r3, r3, #2
 800d2c2:	b2db      	uxtb	r3, r3
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00a      	beq.n	800d2de <vTCPStateChange+0x194>
			{
				FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );
				if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d2ce:	f003 0308 	and.w	r3, r3, #8
 800d2d2:	b2db      	uxtb	r3, r3
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d102      	bne.n	800d2de <vTCPStateChange+0x194>
				{
					FreeRTOS_closesocket( pxSocket );
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f7fe f8a3 	bl	800b424 <FreeRTOS_closesocket>
			}
		}
	}

	/* Fill in the new state. */
	pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	78fa      	ldrb	r2, [r7, #3]
 800d2e2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* touch the alive timers because moving to another state. */
	prvTCPTouchSocket( pxSocket );
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f7ff ff0b 	bl	800d102 <prvTCPTouchSocket>
			/* The 'connected' state has changed, call the OnConnect handler of the parent. */
			xConnected->u.xTCP.pxHandleConnected( ( Socket_t * ) xConnected, bAfter );
		}
	}
	#endif
	if( xParent != NULL )
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d002      	beq.n	800d2f8 <vTCPStateChange+0x1ae>
	{
		vSocketWakeUpUser( xParent );
 800d2f2:	6978      	ldr	r0, [r7, #20]
 800d2f4:	f7fe fb92 	bl	800ba1c <vSocketWakeUpUser>
	}
}
 800d2f8:	bf00      	nop
 800d2fa:	3718      	adds	r7, #24
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <prvTCPBufferResize>:
/*-----------------------------------------------------------*/

static NetworkBufferDescriptor_t *prvTCPBufferResize( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer,
	int32_t lDataLen, UBaseType_t uxOptionsLength )
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b088      	sub	sp, #32
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	607a      	str	r2, [r7, #4]
 800d30c:	603b      	str	r3, [r7, #0]
NetworkBufferDescriptor_t *pxReturn;
int32_t lNeeded;
BaseType_t xResize;

	if( xBufferAllocFixedSize != pdFALSE )
 800d30e:	4b2b      	ldr	r3, [pc, #172]	; (800d3bc <prvTCPBufferResize+0xbc>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00a      	beq.n	800d32c <prvTCPBufferResize+0x2c>
	{
		/* Network buffers are created with a fixed size and can hold the largest
		MTU. */
		lNeeded = ( int32_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 800d316:	f240 53f2 	movw	r3, #1522	; 0x5f2
 800d31a:	61bb      	str	r3, [r7, #24]
		/* and therefore, the buffer won't be too small.
		Only ask for a new network buffer in case none was supplied. */
		xResize = ( pxNetworkBuffer == NULL );
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	bf0c      	ite	eq
 800d322:	2301      	moveq	r3, #1
 800d324:	2300      	movne	r3, #0
 800d326:	b2db      	uxtb	r3, r3
 800d328:	617b      	str	r3, [r7, #20]
 800d32a:	e014      	b.n	800d356 <prvTCPBufferResize+0x56>
	else
	{
		/* Network buffers are created with a variable size. See if it must
		grow. */
		lNeeded = FreeRTOS_max_int32( ( int32_t ) sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ),
			( int32_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen );
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	4413      	add	r3, r2
 800d332:	3336      	adds	r3, #54	; 0x36
		lNeeded = FreeRTOS_max_int32( ( int32_t ) sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ),
 800d334:	4619      	mov	r1, r3
 800d336:	2046      	movs	r0, #70	; 0x46
 800d338:	f7ff f869 	bl	800c40e <FreeRTOS_max_int32>
 800d33c:	61b8      	str	r0, [r7, #24]
		/* In case we were called from a TCP timer event, a buffer must be
		created.  Otherwise, test 'xDataLength' of the provided buffer. */
		xResize = ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < (size_t)lNeeded );
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d004      	beq.n	800d34e <prvTCPBufferResize+0x4e>
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	69da      	ldr	r2, [r3, #28]
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d201      	bcs.n	800d352 <prvTCPBufferResize+0x52>
 800d34e:	2301      	movs	r3, #1
 800d350:	e000      	b.n	800d354 <prvTCPBufferResize+0x54>
 800d352:	2300      	movs	r3, #0
 800d354:	617b      	str	r3, [r7, #20]
	}

	if( xResize != pdFALSE )
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d021      	beq.n	800d3a0 <prvTCPBufferResize+0xa0>
	{
		/* The caller didn't provide a network buffer or the provided buffer is
		too small.  As we must send-out a data packet, a buffer will be created
		here. */
		pxReturn = pxGetNetworkBufferWithDescriptor( ( uint32_t ) lNeeded, 0u );
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	2100      	movs	r1, #0
 800d360:	4618      	mov	r0, r3
 800d362:	f002 fc33 	bl	800fbcc <pxGetNetworkBufferWithDescriptor>
 800d366:	61f8      	str	r0, [r7, #28]

		if( pxReturn != NULL )
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d021      	beq.n	800d3b2 <prvTCPBufferResize+0xb2>
		{
			/* Copy the existing data to the new created buffer. */
			if( pxNetworkBuffer )
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d00c      	beq.n	800d38e <prvTCPBufferResize+0x8e>
			{
				/* Either from the previous buffer... */
				memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	6998      	ldr	r0, [r3, #24]
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	6999      	ldr	r1, [r3, #24]
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	69db      	ldr	r3, [r3, #28]
 800d380:	461a      	mov	r2, r3
 800d382:	f003 fc4a 	bl	8010c1a <memcpy>

				/* ...and release it. */
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800d386:	68b8      	ldr	r0, [r7, #8]
 800d388:	f002 fc98 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
 800d38c:	e011      	b.n	800d3b2 <prvTCPBufferResize+0xb2>
			}
			else
			{
				/* Or from the socket field 'xTCP.xPacket'. */
				memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	6998      	ldr	r0, [r3, #24]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	3382      	adds	r3, #130	; 0x82
 800d396:	2246      	movs	r2, #70	; 0x46
 800d398:	4619      	mov	r1, r3
 800d39a:	f003 fc3e 	bl	8010c1a <memcpy>
 800d39e:	e008      	b.n	800d3b2 <prvTCPBufferResize+0xb2>
		}
	}
	else
	{
		/* xResize is false, the network buffer provided was big enough. */
		pxReturn = pxNetworkBuffer;
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	61fb      	str	r3, [r7, #28]

		/* Thanks to Andrey Ivanov from swissEmbedded for reporting that the
		xDataLength member must get the correct length too! */
		pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	4413      	add	r3, r2
 800d3aa:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	61da      	str	r2, [r3, #28]
	}

	return pxReturn;
 800d3b2:	69fb      	ldr	r3, [r7, #28]
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3720      	adds	r7, #32
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	080110b8 	.word	0x080110b8

0800d3c0 <prvTCPPrepareSend>:

/*
 * Prepare an outgoing message, in case anything has to be sent.
 */
static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer, UBaseType_t uxOptionsLength )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b092      	sub	sp, #72	; 0x48
 800d3c4:	af02      	add	r7, sp, #8
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	607a      	str	r2, [r7, #4]
uint32_t ulDataGot, ulDistance;
TCPWindow_t *pxTCPWindow;
NetworkBufferDescriptor_t *pxNewBuffer;
int32_t lStreamPos;

	if( ( *ppxNetworkBuffer ) != NULL )
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d004      	beq.n	800d3de <prvTCPPrepareSend+0x1e>
	{
		/* A network buffer descriptor was already supplied */
		pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	699b      	ldr	r3, [r3, #24]
 800d3da:	63bb      	str	r3, [r7, #56]	; 0x38
 800d3dc:	e002      	b.n	800d3e4 <prvTCPPrepareSend+0x24>
	}
	else
	{
		/* For now let it point to the last packet header */
		pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	3382      	adds	r3, #130	; 0x82
 800d3e2:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
 800d3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e6:	637b      	str	r3, [r7, #52]	; 0x34
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	33dc      	adds	r3, #220	; 0xdc
 800d3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	lDataLen = 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	lStreamPos = 0;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	613b      	str	r3, [r7, #16]
	pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_ACK;
 800d3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d3fc:	f043 0310 	orr.w	r3, r3, #16
 800d400:	b2da      	uxtb	r2, r3
 800d402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d404:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	if( pxSocket->u.xTCP.txStream != NULL )
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d078      	beq.n	800d502 <prvTCPPrepareSend+0x142>
	{
		/* ulTCPWindowTxGet will return the amount of data which may be sent
		along with the position in the txStream.
		Why check for MSS > 1 ?
		Because some TCP-stacks (like uIP) use it for flow-control. */
		if( pxSocket->u.xTCP.usCurMSS > 1u )
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d416:	2b01      	cmp	r3, #1
 800d418:	d90a      	bls.n	800d430 <prvTCPPrepareSend+0x70>
		{
			lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d420:	f107 0210 	add.w	r2, r7, #16
 800d424:	4619      	mov	r1, r3
 800d426:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d428:	f001 ffc8 	bl	800f3bc <ulTCPWindowTxGet>
 800d42c:	4603      	mov	r3, r0
 800d42e:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		if( lDataLen > 0 )
 800d430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d432:	2b00      	cmp	r3, #0
 800d434:	dd65      	ble.n	800d502 <prvTCPPrepareSend+0x142>
		{
			/* Check if the current network buffer is big enough, if not,
			resize it. */
			pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	6819      	ldr	r1, [r3, #0]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f7ff ff5e 	bl	800d300 <prvTCPBufferResize>
 800d444:	62b8      	str	r0, [r7, #40]	; 0x28

			if( pxNewBuffer != NULL )
 800d446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d057      	beq.n	800d4fc <prvTCPPrepareSend+0x13c>
			{
				*ppxNetworkBuffer = pxNewBuffer;
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d450:	601a      	str	r2, [r3, #0]
				pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 800d452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d454:	699b      	ldr	r3, [r3, #24]
 800d456:	63bb      	str	r3, [r7, #56]	; 0x38
				pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
 800d458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45a:	637b      	str	r3, [r7, #52]	; 0x34

				pucSendData = pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	3336      	adds	r3, #54	; 0x36
 800d460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d462:	4413      	add	r3, r2
 800d464:	627b      	str	r3, [r7, #36]	; 0x24

				/* Translate the position in txStream to an offset from the tail
				marker. */
				uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	693a      	ldr	r2, [r7, #16]
 800d472:	4619      	mov	r1, r3
 800d474:	f7ff f81a 	bl	800c4ac <uxStreamBufferDistance>
 800d478:	6238      	str	r0, [r7, #32]

				/* Here data is copied from the txStream in 'peek' mode.  Only
				when the packets are acked, the tail marker will be updated. */
				ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d47e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d480:	2301      	movs	r3, #1
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	4613      	mov	r3, r2
 800d486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d488:	6a39      	ldr	r1, [r7, #32]
 800d48a:	f7fe ff4c 	bl	800c326 <uxStreamBufferGet>
 800d48e:	61f8      	str	r0, [r7, #28]
				}
				#endif

				/* If the owner of the socket requests a closure, add the FIN
				flag to the last packet. */
				if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d030      	beq.n	800d502 <prvTCPPrepareSend+0x142>
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d128      	bne.n	800d502 <prvTCPPrepareSend+0x142>
				{
					ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4bc:	689b      	ldr	r3, [r3, #8]
 800d4be:	461a      	mov	r2, r3
 800d4c0:	f7fe fff4 	bl	800c4ac <uxStreamBufferDistance>
 800d4c4:	61b8      	str	r0, [r7, #24]

					if( ulDistance == ulDataGot )
 800d4c6:	69ba      	ldr	r2, [r7, #24]
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d119      	bne.n	800d502 <prvTCPPrepareSend+0x142>
						}
						#endif
						/* Although the socket sends a FIN, it will stay in
						ESTABLISHED until all current data has been received or
						delivered. */
						pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 800d4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d4d4:	f043 0301 	orr.w	r3, r3, #1
 800d4d8:	b2da      	uxtb	r2, r3
 800d4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800d4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4e6:	441a      	add	r2, r3
 800d4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ea:	625a      	str	r2, [r3, #36]	; 0x24
						pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d4f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4f6:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800d4fa:	e002      	b.n	800d502 <prvTCPPrepareSend+0x142>
					}
				}
			}
			else
			{
				lDataLen = -1;
 800d4fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d500:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
	}

	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) )
 800d502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d504:	2b00      	cmp	r3, #0
 800d506:	db7e      	blt.n	800d606 <prvTCPPrepareSend+0x246>
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d50e:	2b05      	cmp	r3, #5
 800d510:	d179      	bne.n	800d606 <prvTCPPrepareSend+0x246>
	{
		/* See if the socket owner wants to shutdown this connection. */
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d518:	f003 0320 	and.w	r3, r3, #32
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d02b      	beq.n	800d57a <prvTCPPrepareSend+0x1ba>
			( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 800d522:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d524:	f001 fe92 	bl	800f24c <xTCPWindowTxDone>
 800d528:	4603      	mov	r3, r0
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d025      	beq.n	800d57a <prvTCPPrepareSend+0x1ba>
		{
			pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d534:	f36f 1345 	bfc	r3, #5, #1
 800d538:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 800d53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d53e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d542:	f043 0301 	orr.w	r3, r3, #1
 800d546:	b2da      	uxtb	r2, r3
 800d548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d54a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d54e:	68fa      	ldr	r2, [r7, #12]
 800d550:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d558:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800d55c:	68fa      	ldr	r2, [r7, #12]
 800d55e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d562:	f043 0301 	orr.w	r3, r3, #1
 800d566:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56c:	6a1a      	ldr	r2, [r3, #32]
 800d56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d570:	625a      	str	r2, [r3, #36]	; 0x24
			vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800d572:	2106      	movs	r1, #6
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f7ff fde8 	bl	800d14a <vTCPStateChange>
		}

		#if( ipconfigTCP_KEEP_ALIVE != 0 )
		{
			if( pxSocket->u.xTCP.ucKeepRepCount > 3u )
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d580:	2b03      	cmp	r3, #3
 800d582:	d906      	bls.n	800d592 <prvTCPPrepareSend+0x1d2>
			{
				FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
					pxSocket->u.xTCP.ulRemoteIP,			/* IP address of remote machine. */
					pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d584:	2108      	movs	r1, #8
 800d586:	68f8      	ldr	r0, [r7, #12]
 800d588:	f7ff fddf 	bl	800d14a <vTCPStateChange>
				lDataLen = -1;
 800d58c:	f04f 33ff 	mov.w	r3, #4294967295
 800d590:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 800d592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d594:	2b00      	cmp	r3, #0
 800d596:	d136      	bne.n	800d606 <prvTCPPrepareSend+0x246>
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d59e:	f003 0301 	and.w	r3, r3, #1
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d12e      	bne.n	800d606 <prvTCPPrepareSend+0x246>
			{
				/* If there is no data to be sent, and no window-update message,
				we might want to send a keep-alive message. */
				TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastAliveTime;
 800d5a8:	f7fa f950 	bl	800784c <xTaskGetTickCount>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	617b      	str	r3, [r7, #20]
				TickType_t xMax;
				xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * configTICK_RATE_HZ );
 800d5b6:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d5ba:	633b      	str	r3, [r7, #48]	; 0x30
				if( pxSocket->u.xTCP.ucKeepRepCount )
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d002      	beq.n	800d5cc <prvTCPPrepareSend+0x20c>
				{
					xMax = ( 3u * configTICK_RATE_HZ );
 800d5c6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d5ca:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if( xAge > xMax )
 800d5cc:	697a      	ldr	r2, [r7, #20]
 800d5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d918      	bls.n	800d606 <prvTCPPrepareSend+0x246>
				{
					pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 800d5d4:	f7fa f93a 	bl	800784c <xTaskGetTickCount>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	65da      	str	r2, [r3, #92]	; 0x5c
					if( xTCPWindowLoggingLevel )
						FreeRTOS_debug_printf( ( "keep-alive: %lxip:%u count %u\n",
							pxSocket->u.xTCP.ulRemoteIP,
							pxSocket->u.xTCP.usRemotePort,
							pxSocket->u.xTCP.ucKeepRepCount ) );
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d5e4:	f043 0302 	orr.w	r3, r3, #2
 800d5e8:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500 ) );
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800d5f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
					pxSocket->u.xTCP.ucKeepRepCount++;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	b2da      	uxtb	r2, r3
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		#endif /* ipconfigTCP_KEEP_ALIVE */
	}

	/* Anything to send, a change of the advertised window size, or maybe send a
	keep-alive message? */
	if( ( lDataLen > 0 ) ||
 800d606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d608:	2b00      	cmp	r3, #0
 800d60a:	dc0f      	bgt.n	800d62c <prvTCPPrepareSend+0x26c>
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d612:	f003 0301 	and.w	r3, r3, #1
 800d616:	b2db      	uxtb	r3, r3
	if( ( lDataLen > 0 ) ||
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d107      	bne.n	800d62c <prvTCPPrepareSend+0x26c>
		( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d622:	f003 0302 	and.w	r3, r3, #2
 800d626:	b2db      	uxtb	r3, r3
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d02b      	beq.n	800d684 <prvTCPPrepareSend+0x2c4>
	{
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
 800d62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d62e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d632:	f023 0308 	bic.w	r3, r3, #8
 800d636:	b2da      	uxtb	r2, r3
 800d638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d63a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	b2db      	uxtb	r3, r3
 800d642:	3314      	adds	r3, #20
 800d644:	b2db      	uxtb	r3, r3
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	b2da      	uxtb	r2, r3
 800d64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d64c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
 800d650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d652:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d656:	f043 0310 	orr.w	r3, r3, #16
 800d65a:	b2da      	uxtb	r2, r3
 800d65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d65e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		if( lDataLen != 0l )
 800d662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d664:	2b00      	cmp	r3, #0
 800d666:	d008      	beq.n	800d67a <prvTCPPrepareSend+0x2ba>
		{
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_PSH;
 800d668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d66a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d66e:	f043 0308 	orr.w	r3, r3, #8
 800d672:	b2da      	uxtb	r2, r3
 800d674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d676:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				}
			}
		}
		#endif

		lDataLen += ( int32_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800d67a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	4413      	add	r3, r2
 800d680:	3328      	adds	r3, #40	; 0x28
 800d682:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	return lDataLen;
 800d684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d686:	4618      	mov	r0, r3
 800d688:	3740      	adds	r7, #64	; 0x40
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
	...

0800d690 <prvTCPNextTimeout>:

/*
 * Calculate after how much time this socket needs to be checked again.
 */
static TickType_t prvTCPNextTimeout ( FreeRTOS_Socket_t *pxSocket )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
TickType_t ulDelayMs = ( TickType_t ) 20000;
 800d698:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d69c:	60bb      	str	r3, [r7, #8]

	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	d135      	bne.n	800d714 <prvTCPNextTimeout+0x84>
	{
		/* The socket is actively connecting to a peer. */
		if( pxSocket->u.xTCP.bits.bConnPrepared )
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6ae:	f003 0308 	and.w	r3, r3, #8
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d012      	beq.n	800d6de <prvTCPNextTimeout+0x4e>
		{
			/* Ethernet address has been found, use progressive timeout for
			active connect(). */
			if( pxSocket->u.xTCP.ucRepCount < 3u )
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	d809      	bhi.n	800d6d6 <prvTCPNextTimeout+0x46>
			{
				ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1u ) );
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d6c8:	3b01      	subs	r3, #1
 800d6ca:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800d6ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d6d2:	60bb      	str	r3, [r7, #8]
 800d6d4:	e006      	b.n	800d6e4 <prvTCPNextTimeout+0x54>
			}
			else
			{
				ulDelayMs = 11000UL;
 800d6d6:	f642 23f8 	movw	r3, #11000	; 0x2af8
 800d6da:	60bb      	str	r3, [r7, #8]
 800d6dc:	e002      	b.n	800d6e4 <prvTCPNextTimeout+0x54>
			}
		}
		else
		{
			/* Still in the ARP phase: check every half second. */
			ulDelayMs = 500UL;
 800d6de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d6e2:	60bb      	str	r3, [r7, #8]
		}

		FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
			pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort,
			pxSocket->u.xTCP.ucRepCount, ulDelayMs ) );
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d6ea:	fb02 f303 	mul.w	r3, r2, r3
 800d6ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6f2:	d30a      	bcc.n	800d70a <prvTCPNextTimeout+0x7a>
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d6fa:	fb02 f303 	mul.w	r3, r2, r3
 800d6fe:	4a22      	ldr	r2, [pc, #136]	; (800d788 <prvTCPNextTimeout+0xf8>)
 800d700:	fba2 2303 	umull	r2, r3, r2, r3
 800d704:	099b      	lsrs	r3, r3, #6
 800d706:	b29a      	uxth	r2, r3
 800d708:	e000      	b.n	800d70c <prvTCPNextTimeout+0x7c>
 800d70a:	2201      	movs	r2, #1
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d712:	e032      	b.n	800d77a <prvTCPNextTimeout+0xea>
	}
	else if( pxSocket->u.xTCP.usTimeout == 0u )
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d12d      	bne.n	800d77a <prvTCPNextTimeout+0xea>
	{
		/* Let the sliding window mechanism decide what time-out is appropriate. */
		BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d72a:	f107 0208 	add.w	r2, r7, #8
 800d72e:	4619      	mov	r1, r3
 800d730:	f001 fde4 	bl	800f2fc <xTCPWindowTxHasData>
 800d734:	60f8      	str	r0, [r7, #12]
		if( ulDelayMs == 0u )
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d107      	bne.n	800d74c <prvTCPNextTimeout+0xbc>
		{
			ulDelayMs = xResult ? 1UL : 20000UL;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d001      	beq.n	800d746 <prvTCPNextTimeout+0xb6>
 800d742:	2301      	movs	r3, #1
 800d744:	e001      	b.n	800d74a <prvTCPNextTimeout+0xba>
 800d746:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d74a:	60bb      	str	r3, [r7, #8]
		}
		else
		{
			/* ulDelayMs contains the time to wait before a re-transmission. */
		}
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d752:	fb02 f303 	mul.w	r3, r2, r3
 800d756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d75a:	d30a      	bcc.n	800d772 <prvTCPNextTimeout+0xe2>
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d762:	fb02 f303 	mul.w	r3, r2, r3
 800d766:	4a08      	ldr	r2, [pc, #32]	; (800d788 <prvTCPNextTimeout+0xf8>)
 800d768:	fba2 2303 	umull	r2, r3, r2, r3
 800d76c:	099b      	lsrs	r3, r3, #6
 800d76e:	b29a      	uxth	r2, r3
 800d770:	e000      	b.n	800d774 <prvTCPNextTimeout+0xe4>
 800d772:	2201      	movs	r2, #1
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		/* field '.usTimeout' has already been set (by the
		keep-alive/delayed-ACK mechanism). */
	}

	/* Return the number of clock ticks before the timer expires. */
	return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
}
 800d780:	4618      	mov	r0, r3
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	10624dd3 	.word	0x10624dd3

0800d78c <prvTCPAddTxData>:
/*-----------------------------------------------------------*/

static void prvTCPAddTxData( FreeRTOS_Socket_t *pxSocket )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
	the sliding window.

	uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It contains new
	Tx data which has not been passed to the sliding window yet.  The oldest
	data not-yet-confirmed can be found at rxTail. */
	lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d798:	4618      	mov	r0, r3
 800d79a:	f7fe fecd 	bl	800c538 <uxStreamBufferMidSpace>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	60fb      	str	r3, [r7, #12]

	if( lLength > 0 )
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	dd17      	ble.n	800d7d8 <prvTCPAddTxData+0x4c>
		window manager, so it can start transmitting them.

		Hand over the new data to the sliding window handler.  It will be
		split-up in chunks of 1460 bytes each (or less, depending on
		ipconfigTCP_MSS). */
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800d7ae:	68f9      	ldr	r1, [r7, #12]
								( uint32_t ) lLength,
								( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7b4:	685b      	ldr	r3, [r3, #4]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800d7b6:	461a      	mov	r2, r3
								( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7bc:	691b      	ldr	r3, [r3, #16]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800d7be:	f001 fc91 	bl	800f0e4 <lTCPWindowTxAdd>
 800d7c2:	60b8      	str	r0, [r7, #8]

		/* Move the rxMid pointer forward up to rxHead. */
		if( lCount > 0 )
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	dd06      	ble.n	800d7d8 <prvTCPAddTxData+0x4c>
		{
			vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7ce:	68ba      	ldr	r2, [r7, #8]
 800d7d0:	4611      	mov	r1, r2
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7fe fec4 	bl	800c560 <vStreamBufferMoveMid>
		}
	}
}
 800d7d8:	bf00      	nop
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <prvTCPHandleFin>:
 * Or when the socket has sent a FIN flag to the peer
 * Before being called, it has been checked that both reception and transmission
 * are complete.
 */
static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b088      	sub	sp, #32
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	61bb      	str	r3, [r7, #24]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	3322      	adds	r3, #34	; 0x22
 800d7f4:	617b      	str	r3, [r7, #20]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	7b5b      	ldrb	r3, [r3, #13]
 800d7fa:	74fb      	strb	r3, [r7, #19]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	33dc      	adds	r3, #220	; 0xdc
 800d800:	60fb      	str	r3, [r7, #12]
BaseType_t xSendLength = 0;
 800d802:	2300      	movs	r3, #0
 800d804:	61fb      	str	r3, [r7, #28]
uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	689b      	ldr	r3, [r3, #8]
 800d80a:	061a      	lsls	r2, r3, #24
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	689b      	ldr	r3, [r3, #8]
 800d810:	021b      	lsls	r3, r3, #8
 800d812:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d816:	431a      	orrs	r2, r3
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	689b      	ldr	r3, [r3, #8]
 800d81c:	0a1b      	lsrs	r3, r3, #8
 800d81e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d822:	431a      	orrs	r2, r3
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	689b      	ldr	r3, [r3, #8]
 800d828:	0e1b      	lsrs	r3, r3, #24
 800d82a:	4313      	orrs	r3, r2
 800d82c:	60bb      	str	r3, [r7, #8]

	if( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u )
 800d82e:	7cfb      	ldrb	r3, [r7, #19]
 800d830:	f003 0301 	and.w	r3, r3, #1
 800d834:	2b00      	cmp	r3, #0
 800d836:	d004      	beq.n	800d842 <prvTCPHandleFin+0x62>
	{
		pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1u;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	695b      	ldr	r3, [r3, #20]
 800d83c:	1c5a      	adds	r2, r3, #1
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	611a      	str	r2, [r3, #16]
	}
	if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d10b      	bne.n	800d86a <prvTCPHandleFin+0x8a>
	{
		/* We haven't yet replied with a FIN, do so now. */
		pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	6a1a      	ldr	r2, [r3, #32]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	625a      	str	r2, [r3, #36]	; 0x24
		pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d864:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800d868:	e00c      	b.n	800d884 <prvTCPHandleFin+0xa4>
	}
	else
	{
		/* We did send a FIN already, see if it's ACK'd. */
		if( ulAckNr == pxTCPWindow->tx.ulFINSequenceNumber + 1u )
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d86e:	1c5a      	adds	r2, r3, #1
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	429a      	cmp	r2, r3
 800d874:	d106      	bne.n	800d884 <prvTCPHandleFin+0xa4>
		{
			pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d87c:	f043 0301 	orr.w	r3, r3, #1
 800d880:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
		}
	}

	if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d88a:	f003 0301 	and.w	r3, r3, #1
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10b      	bne.n	800d8ac <prvTCPHandleFin+0xcc>
	{
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	621a      	str	r2, [r3, #32]
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_FIN;
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	2211      	movs	r2, #17
 800d8a0:	735a      	strb	r2, [r3, #13]

		/* And wait for the final ACK. */
		vTCPStateChange( pxSocket, eLAST_ACK );
 800d8a2:	210a      	movs	r1, #10
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7ff fc50 	bl	800d14a <vTCPStateChange>
 800d8aa:	e023      	b.n	800d8f4 <prvTCPHandleFin+0x114>
	}
	else
	{
		/* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1u;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b0:	1c5a      	adds	r2, r3, #1
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	621a      	str	r2, [r3, #32]
		if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d103      	bne.n	800d8ce <prvTCPHandleFin+0xee>
		{
			/* We have sent out a FIN but the peer hasn't replied with a FIN
			yet. Do nothing for the moment. */
			pxTCPHeader->ucTCPFlags = 0u;
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	735a      	strb	r2, [r3, #13]
 800d8cc:	e012      	b.n	800d8f4 <prvTCPHandleFin+0x114>
		}
		else
		{
			if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d8d4:	f003 0302 	and.w	r3, r3, #2
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d103      	bne.n	800d8e6 <prvTCPHandleFin+0x106>
			{
				/* This is the third of the three-way hand shake: the last
				ACK. */
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	2210      	movs	r2, #16
 800d8e2:	735a      	strb	r2, [r3, #13]
 800d8e4:	e002      	b.n	800d8ec <prvTCPHandleFin+0x10c>
			}
			else
			{
				/* The other party started the closure, so we just wait for the
				last ACK. */
				pxTCPHeader->ucTCPFlags = 0u;
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	735a      	strb	r2, [r3, #13]
			}

			/* And wait for the user to close this socket. */
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d8ec:	2108      	movs	r1, #8
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f7ff fc2b 	bl	800d14a <vTCPStateChange>
		}
	}

	pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	6a1a      	ldr	r2, [r3, #32]
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	62da      	str	r2, [r3, #44]	; 0x2c

	if( pxTCPHeader->ucTCPFlags != 0u )
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	7b5b      	ldrb	r3, [r3, #13]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d004      	beq.n	800d90e <prvTCPHandleFin+0x12e>
	{
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d90a:	3328      	adds	r3, #40	; 0x28
 800d90c:	61fb      	str	r3, [r7, #28]
	}

	pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d914:	3314      	adds	r3, #20
 800d916:	b2db      	uxtb	r3, r3
 800d918:	009b      	lsls	r3, r3, #2
 800d91a:	b2da      	uxtb	r2, r3
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	731a      	strb	r2, [r3, #12]
			pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
			pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
			pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
	}

	return xSendLength;
 800d920:	69fb      	ldr	r3, [r7, #28]
}
 800d922:	4618      	mov	r0, r3
 800d924:	3720      	adds	r7, #32
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <prvCheckRxData>:
 *
 * The first thing that will be done is find the TCP payload data
 * and check the length of this data.
 */
static BaseType_t prvCheckRxData( NetworkBufferDescriptor_t *pxNetworkBuffer, uint8_t **ppucRecvData )
{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b088      	sub	sp, #32
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
 800d932:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	699b      	ldr	r3, [r3, #24]
 800d938:	61bb      	str	r3, [r7, #24]
TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
 800d93a:	69bb      	ldr	r3, [r7, #24]
 800d93c:	3322      	adds	r3, #34	; 0x22
 800d93e:	617b      	str	r3, [r7, #20]
	node.

	The size of the TCP header is given in a multiple of 4-byte words (single
	byte, needs no ntoh() translation).  A shift-right 2: is the same as
	(offset >> 4) * 4. */
    lTCPHeaderLength = ( BaseType_t ) ( ( pxTCPHeader->ucTCPOffset & VALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2 );
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	7b1b      	ldrb	r3, [r3, #12]
 800d944:	089b      	lsrs	r3, r3, #2
 800d946:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800d94a:	613b      	str	r3, [r7, #16]

	/* Let pucRecvData point to the first byte received. */
	*ppucRecvData = pxNetworkBuffer->pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + lTCPHeaderLength;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	699a      	ldr	r2, [r3, #24]
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	3322      	adds	r3, #34	; 0x22
 800d954:	441a      	add	r2, r3
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	601a      	str	r2, [r3, #0]

	/* Calculate lReceiveLength - the length of the TCP data received.  This is
	equal to the total packet length minus:
	( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
	lReceiveLength = ( ( int32_t ) pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	69db      	ldr	r3, [r3, #28]
 800d95e:	3b0e      	subs	r3, #14
 800d960:	61fb      	str	r3, [r7, #28]
	lLength =  ( int32_t )FreeRTOS_htons( pxTCPPacket->xIPHeader.usLength );
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	8a1b      	ldrh	r3, [r3, #16]
 800d966:	b29b      	uxth	r3, r3
 800d968:	021b      	lsls	r3, r3, #8
 800d96a:	b21a      	sxth	r2, r3
 800d96c:	69bb      	ldr	r3, [r7, #24]
 800d96e:	8a1b      	ldrh	r3, [r3, #16]
 800d970:	b29b      	uxth	r3, r3
 800d972:	0a1b      	lsrs	r3, r3, #8
 800d974:	b29b      	uxth	r3, r3
 800d976:	b21b      	sxth	r3, r3
 800d978:	4313      	orrs	r3, r2
 800d97a:	b21b      	sxth	r3, r3
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	60fb      	str	r3, [r7, #12]

	if( lReceiveLength > lLength )
 800d980:	69fa      	ldr	r2, [r7, #28]
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	429a      	cmp	r2, r3
 800d986:	dd01      	ble.n	800d98c <prvCheckRxData+0x62>
	{
		/* More bytes were received than the reported length, often because of
		padding bytes at the end. */
		lReceiveLength = lLength;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	61fb      	str	r3, [r7, #28]
	}

	/* Subtract the size of the TCP and IP headers and the actual data size is
	known. */
	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER ) )
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	f103 0214 	add.w	r2, r3, #20
 800d992:	69fb      	ldr	r3, [r7, #28]
 800d994:	429a      	cmp	r2, r3
 800d996:	da05      	bge.n	800d9a4 <prvCheckRxData+0x7a>
	{
		lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER );
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	3314      	adds	r3, #20
 800d99c:	69fa      	ldr	r2, [r7, #28]
 800d99e:	1ad3      	subs	r3, r2, r3
 800d9a0:	61fb      	str	r3, [r7, #28]
 800d9a2:	e001      	b.n	800d9a8 <prvCheckRxData+0x7e>
	}
	else
	{
		lReceiveLength = 0;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	61fb      	str	r3, [r7, #28]
	This field communicates the current value of the urgent pointer as a
	positive offset from the sequence number in this segment.  The urgent
	pointer points to the sequence number of the octet following the urgent
	data.  This field is only be interpreted in segments with the URG control
	bit set. */
	if( ( pxTCPHeader->ucTCPFlags & ipTCP_FLAG_URG ) != 0u )
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	7b5b      	ldrb	r3, [r3, #13]
 800d9ac:	f003 0320 	and.w	r3, r3, #32
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d01c      	beq.n	800d9ee <prvCheckRxData+0xc4>
	{
		/* Although we ignore the urgent data, we have to skip it. */
		lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	8a5b      	ldrh	r3, [r3, #18]
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	021b      	lsls	r3, r3, #8
 800d9bc:	b21a      	sxth	r2, r3
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	8a5b      	ldrh	r3, [r3, #18]
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	0a1b      	lsrs	r3, r3, #8
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	b21b      	sxth	r3, r3
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	b21b      	sxth	r3, r3
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	60bb      	str	r3, [r7, #8]
		*ppucRecvData += lUrgentLength;
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	441a      	add	r2, r3
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	601a      	str	r2, [r3, #0]
		lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 800d9de:	68b9      	ldr	r1, [r7, #8]
 800d9e0:	69f8      	ldr	r0, [r7, #28]
 800d9e2:	f7fe fd24 	bl	800c42e <FreeRTOS_min_int32>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	69fb      	ldr	r3, [r7, #28]
 800d9ea:	1a9b      	subs	r3, r3, r2
 800d9ec:	61fb      	str	r3, [r7, #28]
	}

	return ( BaseType_t ) lReceiveLength;
 800d9ee:	69fb      	ldr	r3, [r7, #28]
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3720      	adds	r7, #32
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <prvStoreRxData>:
 * The second thing is to do is check if the payload data may be accepted
 * If so, they will be added to the reception queue.
 */
static BaseType_t prvStoreRxData( FreeRTOS_Socket_t *pxSocket, uint8_t *pucRecvData,
	NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulReceiveLength )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b08c      	sub	sp, #48	; 0x30
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
 800da04:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	699b      	ldr	r3, [r3, #24]
 800da0a:	627b      	str	r3, [r7, #36]	; 0x24
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800da0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0e:	3322      	adds	r3, #34	; 0x22
 800da10:	623b      	str	r3, [r7, #32]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	33dc      	adds	r3, #220	; 0xdc
 800da16:	61fb      	str	r3, [r7, #28]
uint32_t ulSequenceNumber, ulSpace;
int32_t lOffset, lStored;
BaseType_t xResult = 0;
 800da18:	2300      	movs	r3, #0
 800da1a:	62bb      	str	r3, [r7, #40]	; 0x28

	ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800da1c:	6a3b      	ldr	r3, [r7, #32]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	061a      	lsls	r2, r3, #24
 800da22:	6a3b      	ldr	r3, [r7, #32]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	021b      	lsls	r3, r3, #8
 800da28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800da2c:	431a      	orrs	r2, r3
 800da2e:	6a3b      	ldr	r3, [r7, #32]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	0a1b      	lsrs	r3, r3, #8
 800da34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800da38:	431a      	orrs	r2, r3
 800da3a:	6a3b      	ldr	r3, [r7, #32]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	0e1b      	lsrs	r3, r3, #24
 800da40:	4313      	orrs	r3, r2
 800da42:	61bb      	str	r3, [r7, #24]

	if( ( ulReceiveLength > 0u ) && ( pxSocket->u.xTCP.ucTCPState >= eSYN_RECEIVED ) )
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d03f      	beq.n	800daca <prvStoreRxData+0xd2>
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800da50:	2b03      	cmp	r3, #3
 800da52:	d93a      	bls.n	800daca <prvStoreRxData+0xd2>

		If it can't be "accept"ed it may have to be stored and send a selective
		ack (SACK) option to confirm it.  In that case, xTCPWindowRxStore() will be
		called later to store an out-of-order packet (in case lOffset is
		negative). */
		if ( pxSocket->u.xTCP.rxStream )
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d006      	beq.n	800da6a <prvStoreRxData+0x72>
		{
			ulSpace = ( uint32_t )uxStreamBufferGetSpace ( pxSocket->u.xTCP.rxStream );
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da60:	4618      	mov	r0, r3
 800da62:	f7fe fd41 	bl	800c4e8 <uxStreamBufferGetSpace>
 800da66:	62f8      	str	r0, [r7, #44]	; 0x2c
 800da68:	e002      	b.n	800da70 <prvStoreRxData+0x78>
		}
		else
		{
			ulSpace = ( uint32_t )pxSocket->u.xTCP.uxRxStreamSize;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 800da70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da72:	683a      	ldr	r2, [r7, #0]
 800da74:	69b9      	ldr	r1, [r7, #24]
 800da76:	69f8      	ldr	r0, [r7, #28]
 800da78:	f001 fa3c 	bl	800eef4 <lTCPWindowRxCheck>
 800da7c:	6178      	str	r0, [r7, #20]

		if( lOffset >= 0 )
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	2b00      	cmp	r3, #0
 800da82:	db10      	blt.n	800daa6 <prvStoreRxData+0xae>
		{
			/* New data has arrived and may be made available to the user.  See
			if the head marker in rxStream may be advanced,	only if lOffset == 0.
			In case the low-water mark is reached, bLowWater will be set
			"low-water" here stands for "little space". */
			lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 800da84:	6979      	ldr	r1, [r7, #20]
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	68ba      	ldr	r2, [r7, #8]
 800da8a:	68f8      	ldr	r0, [r7, #12]
 800da8c:	f7fe f918 	bl	800bcc0 <lTCPAddRxdata>
 800da90:	6138      	str	r0, [r7, #16]

			if( lStored != ( int32_t ) ulReceiveLength )
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	693a      	ldr	r2, [r7, #16]
 800da96:	429a      	cmp	r2, r3
 800da98:	d005      	beq.n	800daa6 <prvStoreRxData+0xae>
				FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes??\n", lStored, ulReceiveLength ) );

				/* Received data could not be stored.  The socket's flag
				bMallocError has been set.  The socket now has the status
				eCLOSE_WAIT and a RST packet will be sent back. */
				prvTCPSendReset( pxNetworkBuffer );
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 fc24 	bl	800e2e8 <prvTCPSendReset>
				xResult = -1;
 800daa0:	f04f 33ff 	mov.w	r3, #4294967295
 800daa4:	62bb      	str	r3, [r7, #40]	; 0x28
		#if( ipconfigUSE_TCP_WIN == 1 )
		{
			/* Now lTCPAddRxdata() will move the rxHead pointer forward
			so data becomes available to the user immediately
			In case the low-water mark is reached, bLowWater will be set. */
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800daa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d113      	bne.n	800dad4 <prvStoreRxData+0xdc>
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d00f      	beq.n	800dad4 <prvStoreRxData+0xdc>
			{
				lTCPAddRxdata( pxSocket, 0ul, NULL, pxTCPWindow->ulUserDataLength );
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dab8:	2200      	movs	r2, #0
 800daba:	2100      	movs	r1, #0
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f7fe f8ff 	bl	800bcc0 <lTCPAddRxdata>
				pxTCPWindow->ulUserDataLength = 0;
 800dac2:	69fb      	ldr	r3, [r7, #28]
 800dac4:	2200      	movs	r2, #0
 800dac6:	631a      	str	r2, [r3, #48]	; 0x30
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800dac8:	e004      	b.n	800dad4 <prvStoreRxData+0xdc>
		}
		#endif /* ipconfigUSE_TCP_WIN */
	}
	else
	{
		pxTCPWindow->ucOptionLength = 0u;
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	2200      	movs	r2, #0
 800dace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800dad2:	e000      	b.n	800dad6 <prvStoreRxData+0xde>
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800dad4:	bf00      	nop
	}

	return xResult;
 800dad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3730      	adds	r7, #48	; 0x30
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <prvSetOptions>:
/*-----------------------------------------------------------*/

/* Set the TCP options (if any) for the outgoing packet. */
static UBaseType_t prvSetOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b086      	sub	sp, #24
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	699b      	ldr	r3, [r3, #24]
 800daee:	613b      	str	r3, [r7, #16]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	3322      	adds	r3, #34	; 0x22
 800daf4:	60fb      	str	r3, [r7, #12]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	33dc      	adds	r3, #220	; 0xdc
 800dafa:	60bb      	str	r3, [r7, #8]
UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db02:	617b      	str	r3, [r7, #20]

	#if(	ipconfigUSE_TCP_WIN == 1 )
		if( uxOptionsLength != 0u )
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d011      	beq.n	800db2e <prvSetOptions+0x4e>
					pxSocket->usLocalPort,
					pxSocket->u.xTCP.usRemotePort,
					uxOptionsLength,
					FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 1 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
					FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 2 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ) );
			memcpy( pxTCPHeader->ucOptdata, pxTCPWindow->ulOptionsData, ( size_t ) uxOptionsLength );
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f103 0014 	add.w	r0, r3, #20
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	3380      	adds	r3, #128	; 0x80
 800db14:	697a      	ldr	r2, [r7, #20]
 800db16:	4619      	mov	r1, r3
 800db18:	f003 f87f 	bl	8010c1a <memcpy>

			/* The header length divided by 4, goes into the higher nibble,
			effectively a shift-left 2. */
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	3314      	adds	r3, #20
 800db22:	b2db      	uxtb	r3, r3
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	b2da      	uxtb	r2, r3
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	731a      	strb	r2, [r3, #12]
 800db2c:	e031      	b.n	800db92 <prvSetOptions+0xb2>
		}
		else
	#endif	/* ipconfigUSE_TCP_WIN */
	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800db34:	2b04      	cmp	r3, #4
 800db36:	d92c      	bls.n	800db92 <prvSetOptions+0xb2>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800db3e:	f003 0301 	and.w	r3, r3, #1
 800db42:	b2db      	uxtb	r3, r3
 800db44:	2b00      	cmp	r3, #0
 800db46:	d024      	beq.n	800db92 <prvSetOptions+0xb2>
	{
		/* TCP options must be sent because the MSS has changed. */
		pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800db4e:	f36f 0300 	bfc	r3, #0, #1
 800db52:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		if( xTCPWindowLoggingLevel >= 0 )
		{
			FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
		}

		pxTCPHeader->ucOptdata[ 0 ] = TCP_OPT_MSS;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2202      	movs	r2, #2
 800db5a:	751a      	strb	r2, [r3, #20]
		pxTCPHeader->ucOptdata[ 1 ] = TCP_OPT_MSS_LEN;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2204      	movs	r2, #4
 800db60:	755a      	strb	r2, [r3, #21]
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800db68:	0a1b      	lsrs	r3, r3, #8
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	b2da      	uxtb	r2, r3
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	759a      	strb	r2, [r3, #22]
		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffu );
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800db78:	b2da      	uxtb	r2, r3
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	75da      	strb	r2, [r3, #23]
		uxOptionsLength = 4u;
 800db7e:	2304      	movs	r3, #4
 800db80:	617b      	str	r3, [r7, #20]
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	b2db      	uxtb	r3, r3
 800db86:	3314      	adds	r3, #20
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	b2da      	uxtb	r2, r3
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	731a      	strb	r2, [r3, #12]
			uxOptionsLength += prvTCPSetTimeStamp( xOptionsLength, pxSocket, pxTCPHeader );
		}
	}
	#endif	/* ipconfigUSE_TCP_TIMESTAMPS == 1 */

	return uxOptionsLength;
 800db92:	697b      	ldr	r3, [r7, #20]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3718      	adds	r7, #24
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <prvHandleSynReceived>:
 * Called from the states: eSYN_RECEIVED and eCONNECT_SYN
 * If the flags received are correct, the socket will move to eESTABLISHED.
 */
static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b08c      	sub	sp, #48	; 0x30
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	60f8      	str	r0, [r7, #12]
 800dba4:	60b9      	str	r1, [r7, #8]
 800dba6:	607a      	str	r2, [r7, #4]
 800dba8:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	699b      	ldr	r3, [r3, #24]
 800dbb0:	627b      	str	r3, [r7, #36]	; 0x24
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800dbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb4:	3322      	adds	r3, #34	; 0x22
 800dbb6:	623b      	str	r3, [r7, #32]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	33dc      	adds	r3, #220	; 0xdc
 800dbbc:	61fb      	str	r3, [r7, #28]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800dbbe:	6a3b      	ldr	r3, [r7, #32]
 800dbc0:	7b5b      	ldrb	r3, [r3, #13]
 800dbc2:	76fb      	strb	r3, [r7, #27]
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800dbc4:	6a3b      	ldr	r3, [r7, #32]
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	061a      	lsls	r2, r3, #24
 800dbca:	6a3b      	ldr	r3, [r7, #32]
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	021b      	lsls	r3, r3, #8
 800dbd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dbd4:	431a      	orrs	r2, r3
 800dbd6:	6a3b      	ldr	r3, [r7, #32]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	0a1b      	lsrs	r3, r3, #8
 800dbdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dbe0:	431a      	orrs	r2, r3
 800dbe2:	6a3b      	ldr	r3, [r7, #32]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	0e1b      	lsrs	r3, r3, #24
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	617b      	str	r3, [r7, #20]
BaseType_t xSendLength = 0;
 800dbec:	2300      	movs	r3, #0
 800dbee:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Either expect a ACK or a SYN+ACK. */
	uint16_t usExpect = ( uint16_t ) ipTCP_FLAG_ACK;
 800dbf0:	2310      	movs	r3, #16
 800dbf2:	857b      	strh	r3, [r7, #42]	; 0x2a
	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dbfa:	2b02      	cmp	r3, #2
 800dbfc:	d103      	bne.n	800dc06 <prvHandleSynReceived+0x6a>
	{
		usExpect |= ( uint16_t ) ipTCP_FLAG_SYN;
 800dbfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dc00:	f043 0302 	orr.w	r3, r3, #2
 800dc04:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	if( ( ucTCPFlags & 0x17u ) != usExpect )
 800dc06:	7efb      	ldrb	r3, [r7, #27]
 800dc08:	f003 0217 	and.w	r2, r3, #23
 800dc0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d016      	beq.n	800dc40 <prvHandleSynReceived+0xa4>
		/* eSYN_RECEIVED: flags 0010 expected, not 0002. */
		/* eSYN_RECEIVED: flags ACK  expected, not SYN. */
		FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
			pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ? "eSYN_RECEIVED" : "eCONNECT_SYN",
			usExpect, ucTCPFlags ) );
		vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800dc12:	2108      	movs	r1, #8
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f7ff fa98 	bl	800d14a <vTCPStateChange>
		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
 800dc1a:	6a3b      	ldr	r3, [r7, #32]
 800dc1c:	7b5b      	ldrb	r3, [r3, #13]
 800dc1e:	f043 0304 	orr.w	r3, r3, #4
 800dc22:	b2da      	uxtb	r2, r3
 800dc24:	6a3b      	ldr	r3, [r7, #32]
 800dc26:	735a      	strb	r2, [r3, #13]
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	3328      	adds	r3, #40	; 0x28
 800dc2c:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	3314      	adds	r3, #20
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	009b      	lsls	r3, r3, #2
 800dc38:	b2da      	uxtb	r2, r3
 800dc3a:	6a3b      	ldr	r3, [r7, #32]
 800dc3c:	731a      	strb	r2, [r3, #12]
 800dc3e:	e069      	b.n	800dd14 <prvHandleSynReceived+0x178>
	}
	else
	{
		pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

		if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dc5a:	2b02      	cmp	r3, #2
 800dc5c:	d125      	bne.n	800dcaa <prvHandleSynReceived+0x10e>
		{
			TCPPacket_t *pxLastTCPPacket = ( TCPPacket_t * ) ( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	3382      	adds	r3, #130	; 0x82
 800dc62:	613b      	str	r3, [r7, #16]

			/* Clear the SYN flag in lastPacket. */
			pxLastTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK;
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	2210      	movs	r2, #16
 800dc68:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

			/* This socket was the one connecting actively so now perofmr the
			synchronisation. */
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
				ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usCurMSS );
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800dc7e:	6979      	ldr	r1, [r7, #20]
 800dc80:	f001 f892 	bl	800eda8 <vTCPWindowInit>
			pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	1c5a      	adds	r2, r3, #1
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	619a      	str	r2, [r3, #24]
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	699a      	ldr	r2, [r3, #24]
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	611a      	str	r2, [r3, #16]
			pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	6a1b      	ldr	r3, [r3, #32]
 800dc98:	1c5a      	adds	r2, r3, #1
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	621a      	str	r2, [r3, #32]
			pxTCPWindow->ulNextTxSequenceNumber++;
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dca2:	1c5a      	adds	r2, r3, #1
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	635a      	str	r2, [r3, #52]	; 0x34
 800dca8:	e005      	b.n	800dcb6 <prvHandleSynReceived+0x11a>
		}
		else if( ulReceiveLength == 0u )
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d102      	bne.n	800dcb6 <prvHandleSynReceived+0x11a>
		{
			pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	697a      	ldr	r2, [r7, #20]
 800dcb4:	611a      	str	r2, [r3, #16]
		}

		/* The SYN+ACK has been confirmed, increase the next sequence number by
		1. */
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u;
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	69db      	ldr	r3, [r3, #28]
 800dcba:	1c5a      	adds	r2, r3, #1
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	62da      	str	r2, [r3, #44]	; 0x2c
				pxSocket->u.xTCP.usRemotePort,
				( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
		}
		#endif /* ipconfigUSE_TCP_WIN */

		if( ( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0u ) )
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	d002      	beq.n	800dcd0 <prvHandleSynReceived+0x134>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d00d      	beq.n	800dcec <prvHandleSynReceived+0x150>
		{
			pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800dcd0:	6a3b      	ldr	r3, [r7, #32]
 800dcd2:	2210      	movs	r2, #16
 800dcd4:	735a      	strb	r2, [r3, #13]
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	3328      	adds	r3, #40	; 0x28
 800dcda:	62fb      	str	r3, [r7, #44]	; 0x2c
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	3314      	adds	r3, #20
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	009b      	lsls	r3, r3, #2
 800dce6:	b2da      	uxtb	r2, r3
 800dce8:	6a3b      	ldr	r3, [r7, #32]
 800dcea:	731a      	strb	r2, [r3, #12]
		}

		if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dcf2:	f003 0310 	and.w	r3, r3, #16
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d107      	bne.n	800dd0c <prvHandleSynReceived+0x170>
		{
			/* The other party did not send a scaling factor.
			A shifting factor in this side must be canceled. */
			pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2200      	movs	r2, #0
 800dd08:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		}
		/* This was the third step of connecting: SYN, SYN+ACK, ACK	so now the
		connection is established. */
		vTCPStateChange( pxSocket, eESTABLISHED );
 800dd0c:	2105      	movs	r1, #5
 800dd0e:	68f8      	ldr	r0, [r7, #12]
 800dd10:	f7ff fa1b 	bl	800d14a <vTCPStateChange>
	}

	return xSendLength;
 800dd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3730      	adds	r7, #48	; 0x30
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}

0800dd1e <prvHandleEstablished>:
 * the code will check if it may be accepted, i.e. if all expected data has been
 * completely received.
 */
static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b092      	sub	sp, #72	; 0x48
 800dd22:	af02      	add	r7, sp, #8
 800dd24:	60f8      	str	r0, [r7, #12]
 800dd26:	60b9      	str	r1, [r7, #8]
 800dd28:	607a      	str	r2, [r7, #4]
 800dd2a:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	699b      	ldr	r3, [r3, #24]
 800dd32:	637b      	str	r3, [r7, #52]	; 0x34
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800dd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd36:	3322      	adds	r3, #34	; 0x22
 800dd38:	633b      	str	r3, [r7, #48]	; 0x30
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	33dc      	adds	r3, #220	; 0xdc
 800dd3e:	62fb      	str	r3, [r7, #44]	; 0x2c
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800dd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd42:	7b5b      	ldrb	r3, [r3, #13]
 800dd44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
 800dd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	061a      	lsls	r2, r3, #24
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd50:	685b      	ldr	r3, [r3, #4]
 800dd52:	021b      	lsls	r3, r3, #8
 800dd54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd58:	431a      	orrs	r2, r3
 800dd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	0a1b      	lsrs	r3, r3, #8
 800dd60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dd64:	431a      	orrs	r2, r3
 800dd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	0e1b      	lsrs	r3, r3, #24
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 800dd70:	2300      	movs	r3, #0
 800dd72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd74:	2300      	movs	r3, #0
 800dd76:	63bb      	str	r3, [r7, #56]	; 0x38
int32_t lDistance, lSendResult;

	/* Remember the window size the peer is advertising. */
	pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800dd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7a:	89db      	ldrh	r3, [r3, #14]
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	021b      	lsls	r3, r3, #8
 800dd80:	b21a      	sxth	r2, r3
 800dd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd84:	89db      	ldrh	r3, [r3, #14]
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	0a1b      	lsrs	r3, r3, #8
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	b21b      	sxth	r3, r3
 800dd8e:	4313      	orrs	r3, r2
 800dd90:	b21b      	sxth	r3, r3
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	461a      	mov	r2, r3
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	pxSocket->u.xTCP.ulWindowSize =
		( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dda2:	68fa      	ldr	r2, [r7, #12]
 800dda4:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800dda8:	fa03 f202 	lsl.w	r2, r3, r2
	pxSocket->u.xTCP.ulWindowSize =
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	if( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_ACK ) != 0u )
 800ddb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ddb6:	f003 0310 	and.w	r3, r3, #16
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d040      	beq.n	800de40 <prvHandleEstablished+0x122>
	{
		ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulAckNr ) );
 800ddbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddc0:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800ddc4:	061a      	lsls	r2, r3, #24
 800ddc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddc8:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800ddcc:	021b      	lsls	r3, r3, #8
 800ddce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ddd2:	431a      	orrs	r2, r3
 800ddd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddd6:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800ddda:	0a1b      	lsrs	r3, r3, #8
 800dddc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dde0:	431a      	orrs	r2, r3
 800dde2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dde4:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800dde8:	0e1b      	lsrs	r3, r3, #24
 800ddea:	4313      	orrs	r3, r2
 800ddec:	4619      	mov	r1, r3
 800ddee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ddf0:	f001 fcd2 	bl	800f798 <ulTCPWindowTxAck>
 800ddf4:	6238      	str	r0, [r7, #32]

		/* ulTCPWindowTxAck() returns the number of bytes which have been acked,
		starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
		txStream. */
		if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0u ) )
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d020      	beq.n	800de40 <prvHandleEstablished+0x122>
 800ddfe:	6a3b      	ldr	r3, [r7, #32]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d01d      	beq.n	800de40 <prvHandleEstablished+0x122>
		{
			/* Just advancing the tail index, 'ulCount' bytes have been
			confirmed, and because there is new space in the txStream, the
			user/owner should be woken up. */
			/* _HT_ : only in case the socket's waiting? */
			if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0u, NULL, ( size_t ) ulCount, pdFALSE ) != 0u )
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800de08:	2300      	movs	r3, #0
 800de0a:	9300      	str	r3, [sp, #0]
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	2200      	movs	r2, #0
 800de10:	2100      	movs	r1, #0
 800de12:	f7fe fa88 	bl	800c326 <uxStreamBufferGet>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d011      	beq.n	800de40 <prvHandleEstablished+0x122>
			{
				pxSocket->xEventBits |= eSOCKET_SEND;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f043 0202 	orr.w	r2, r3, #2
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	601a      	str	r2, [r3, #0]

				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
				{
					if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de2c:	f003 0302 	and.w	r3, r3, #2
 800de30:	2b00      	cmp	r3, #0
 800de32:	d005      	beq.n	800de40 <prvHandleEstablished+0x122>
					{
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	601a      	str	r2, [r3, #0]
		}
	}

	/* If this socket has a stream for transmission, add the data to the
	outgoing segment(s). */
	if( pxSocket->u.xTCP.txStream != NULL )
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de44:	2b00      	cmp	r3, #0
 800de46:	d002      	beq.n	800de4e <prvHandleEstablished+0x130>
	{
		prvTCPAddTxData( pxSocket );
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f7ff fc9f 	bl	800d78c <prvTCPAddTxData>
	}

	pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800de4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de50:	6a1a      	ldr	r2, [r3, #32]
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u ) )
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de5e:	f003 0320 	and.w	r3, r3, #32
 800de62:	b2db      	uxtb	r3, r3
 800de64:	2b00      	cmp	r3, #0
 800de66:	d105      	bne.n	800de74 <prvHandleEstablished+0x156>
 800de68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800de6c:	f003 0301 	and.w	r3, r3, #1
 800de70:	2b00      	cmp	r3, #0
 800de72:	d037      	beq.n	800dee4 <prvHandleEstablished+0x1c6>
	{
		/* Peer is requesting to stop, see if we're really finished. */
		xMayClose = pdTRUE;
 800de74:	2301      	movs	r3, #1
 800de76:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Checks are only necessary if we haven't sent a FIN yet. */
		if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de82:	b2db      	uxtb	r3, r3
 800de84:	2b00      	cmp	r3, #0
 800de86:	d11c      	bne.n	800dec2 <prvHandleEstablished+0x1a4>
		{
			/* xTCPWindowTxDone returns true when all Tx queues are empty. */
			bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 800de88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de8a:	f000 fe9b 	bl	800ebc4 <xTCPWindowRxEmpty>
 800de8e:	61f8      	str	r0, [r7, #28]
			bTxDone     = xTCPWindowTxDone( pxTCPWindow );
 800de90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de92:	f001 f9db 	bl	800f24c <xTCPWindowTxDone>
 800de96:	61b8      	str	r0, [r7, #24]

			if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d002      	beq.n	800dea4 <prvHandleEstablished+0x186>
 800de9e:	69bb      	ldr	r3, [r7, #24]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d102      	bne.n	800deaa <prvHandleEstablished+0x18c>
				/* Refusing FIN: Rx incomp 1 optlen 4 tx done 1. */
				FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
					pxSocket->usLocalPort,
					pxSocket->u.xTCP.usRemotePort,
					bRxComplete, bTxDone ) );
				xMayClose = pdFALSE;
 800dea4:	2300      	movs	r3, #0
 800dea6:	63bb      	str	r3, [r7, #56]	; 0x38
 800dea8:	e00b      	b.n	800dec2 <prvHandleEstablished+0x1a4>
			}
			else
			{
				lDistance = ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800deaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	441a      	add	r2, r3
 800deb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb2:	691b      	ldr	r3, [r3, #16]
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	617b      	str	r3, [r7, #20]

				if( lDistance > 1 )
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	2b01      	cmp	r3, #1
 800debc:	dd01      	ble.n	800dec2 <prvHandleEstablished+0x1a4>
				{
					FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
						lDistance, pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
						pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );

					xMayClose = pdFALSE;
 800debe:	2300      	movs	r3, #0
 800dec0:	63bb      	str	r3, [r7, #56]	; 0x38
			FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
				xMayClose, ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber, ulReceiveLength,
				pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) );
		}

		if( xMayClose != pdFALSE )
 800dec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d00d      	beq.n	800dee4 <prvHandleEstablished+0x1c6>
		{
			pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800dece:	f043 0320 	orr.w	r3, r3, #32
 800ded2:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4619      	mov	r1, r3
 800dedc:	68f8      	ldr	r0, [r7, #12]
 800dede:	f7ff fc7f 	bl	800d7e0 <prvTCPHandleFin>
 800dee2:	63f8      	str	r0, [r7, #60]	; 0x3c
		}
	}

	if( xMayClose == pdFALSE )
 800dee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d12a      	bne.n	800df40 <prvHandleEstablished+0x222>
	{
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800deea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deec:	2210      	movs	r2, #16
 800deee:	735a      	strb	r2, [r3, #13]

		if( ulReceiveLength != 0u )
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d016      	beq.n	800df24 <prvHandleEstablished+0x206>
		{
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	3328      	adds	r3, #40	; 0x28
 800defa:	63fb      	str	r3, [r7, #60]	; 0x3c
			/* TCP-offsett equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	b2db      	uxtb	r3, r3
 800df00:	3314      	adds	r3, #20
 800df02:	b2db      	uxtb	r3, r3
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	b2da      	uxtb	r2, r3
 800df08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0a:	731a      	strb	r2, [r3, #12]

			if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df16:	b2db      	uxtb	r3, r3
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d003      	beq.n	800df24 <prvHandleEstablished+0x206>
			{
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800df1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df22:	621a      	str	r2, [r3, #32]
		/* Now get data to be transmitted. */
		/* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
		can not	send-out both TCP options and also a full packet. Sending
		options (SACK) is always more urgent than sending data, which can be
		sent later. */
		if( uxOptionsLength == 0u )
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d10a      	bne.n	800df40 <prvHandleEstablished+0x222>
		{
			/* prvTCPPrepareSend might allocate a bigger network buffer, if
			necessary. */
			lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800df2a:	683a      	ldr	r2, [r7, #0]
 800df2c:	68b9      	ldr	r1, [r7, #8]
 800df2e:	68f8      	ldr	r0, [r7, #12]
 800df30:	f7ff fa46 	bl	800d3c0 <prvTCPPrepareSend>
 800df34:	6138      	str	r0, [r7, #16]
			if( lSendResult > 0 )
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	dd01      	ble.n	800df40 <prvHandleEstablished+0x222>
			{
				xSendLength = ( BaseType_t ) lSendResult;
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
	}

	return xSendLength;
 800df40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800df42:	4618      	mov	r0, r3
 800df44:	3740      	adds	r7, #64	; 0x40
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
	...

0800df4c <prvSendData>:
 * ipconfigUSE_TCP_WIN is defined, and if only an ACK must be sent, it will be
 * checked if it would better be postponed for efficiency.
 */
static BaseType_t prvSendData( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, BaseType_t xSendLength )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b08a      	sub	sp, #40	; 0x28
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	607a      	str	r2, [r7, #4]
 800df58:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	699b      	ldr	r3, [r3, #24]
 800df60:	623b      	str	r3, [r7, #32]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800df62:	6a3b      	ldr	r3, [r7, #32]
 800df64:	3322      	adds	r3, #34	; 0x22
 800df66:	61fb      	str	r3, [r7, #28]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	33dc      	adds	r3, #220	; 0xdc
 800df6c:	61bb      	str	r3, [r7, #24]
		const int32_t lMinLength = 0;
	#else
		int32_t lMinLength;
	#endif
#endif
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	685a      	ldr	r2, [r3, #4]
									 ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800df72:	69bb      	ldr	r3, [r7, #24]
 800df74:	6919      	ldr	r1, [r3, #16]
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	699b      	ldr	r3, [r3, #24]
 800df7a:	1acb      	subs	r3, r1, r3
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 800df7c:	441a      	add	r2, r3
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	/* Free space in rxStream. */
	if( pxSocket->u.xTCP.rxStream != NULL )
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d006      	beq.n	800df9a <prvSendData+0x4e>
	{
		ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df90:	4618      	mov	r0, r3
 800df92:	f7fe fabd 	bl	800c510 <uxStreamBufferFrontSpace>
 800df96:	6278      	str	r0, [r7, #36]	; 0x24
 800df98:	e002      	b.n	800dfa0 <prvSendData+0x54>
	}
	else
	{
		ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df9e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	pxSocket->u.xTCP.ulRxCurWinSize = FreeRTOS_min_uint32( ulFrontSpace, pxSocket->u.xTCP.ulRxCurWinSize );
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfaa:	f7fe fa50 	bl	800c44e <FreeRTOS_min_uint32>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	/* Set the time-out field, so that we'll be called by the IP-task in case no
	next message will be received. */
	lRxSpace = (int32_t)( pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	691b      	ldr	r3, [r3, #16]
 800dfbe:	1ad3      	subs	r3, r2, r3
 800dfc0:	617b      	str	r3, [r7, #20]
	#if ipconfigUSE_TCP_WIN == 1
	{

		#if( ipconfigTCP_ACK_EARLIER_PACKET != 0 )
		{
			lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dfc8:	005b      	lsls	r3, r3, #1
 800dfca:	613b      	str	r3, [r7, #16]
		}
		#endif /* ipconfigTCP_ACK_EARLIER_PACKET */

		/* In case we're receiving data continuously, we might postpone sending
		an ACK to gain performance. */
		if( ( ulReceiveLength > 0 ) &&							/* Data was sent to this socket. */
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d04f      	beq.n	800e072 <prvSendData+0x126>
 800dfd2:	697a      	ldr	r2, [r7, #20]
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	db4b      	blt.n	800e072 <prvSendData+0x126>
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dfe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfe4:	b2db      	uxtb	r3, r3
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d143      	bne.n	800e072 <prvSendData+0x126>
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	2b28      	cmp	r3, #40	; 0x28
 800dfee:	d140      	bne.n	800e072 <prvSendData+0x126>
			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
 800dff6:	2b05      	cmp	r3, #5
 800dff8:	d13b      	bne.n	800e072 <prvSendData+0x126>
			( pxTCPHeader->ucTCPFlags == ipTCP_FLAG_ACK ) )		/* There are no other flags than an ACK. */
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	7b5b      	ldrb	r3, [r3, #13]
			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 800dffe:	2b10      	cmp	r3, #16
 800e000:	d137      	bne.n	800e072 <prvSendData+0x126>
		{
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d00c      	beq.n	800e028 <prvSendData+0xdc>
			{
				/* There was still a delayed in queue, delete it. */
				if( pxSocket->u.xTCP.pxAckMessage != 0 )
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e012:	2b00      	cmp	r3, #0
 800e014:	d004      	beq.n	800e020 <prvSendData+0xd4>
				{
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e01a:	4618      	mov	r0, r3
 800e01c:	f001 fe4e 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
				}

				pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	67da      	str	r2, [r3, #124]	; 0x7c
			}
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e02e:	461a      	mov	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	429a      	cmp	r2, r3
 800e034:	d807      	bhi.n	800e046 <prvSendData+0xfa>
				( lRxSpace < ( int32_t ) ( 2U * pxSocket->u.xTCP.usCurMSS ) ) )	/* There are less than 2 x MSS space in the Rx buffer. */
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e03c:	005b      	lsls	r3, r3, #1
 800e03e:	461a      	mov	r2, r3
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	429a      	cmp	r2, r3
 800e044:	dd04      	ble.n	800e050 <prvSendData+0x104>
			{
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_SHORT_DELAY_MS );
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2202      	movs	r2, #2
 800e04a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e04e:	e003      	b.n	800e058 <prvSendData+0x10c>
			else
			{
				/* Normally a delayed ACK should wait 200 ms for a next incoming
				packet.  Only wait 20 ms here to gain performance.  A slow ACK
				for full-size message. */
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_LONGER_DELAY_MS );
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2214      	movs	r2, #20
 800e054:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			}

			if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE ) )
 800e058:	4b1a      	ldr	r3, [pc, #104]	; (800e0c4 <prvSendData+0x178>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	dd02      	ble.n	800e066 <prvSendData+0x11a>
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e064:	2b17      	cmp	r3, #23
					pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
					xSendLength,
					pxSocket->u.xTCP.usTimeout, lRxSpace ) );
			}

			*ppxNetworkBuffer = NULL;
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	2200      	movs	r2, #0
 800e06a:	601a      	str	r2, [r3, #0]
			xSendLength = 0;
 800e06c:	2300      	movs	r3, #0
 800e06e:	603b      	str	r3, [r7, #0]
 800e070:	e011      	b.n	800e096 <prvSendData+0x14a>
		}
		else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e076:	2b00      	cmp	r3, #0
 800e078:	d00d      	beq.n	800e096 <prvSendData+0x14a>
		{
			/* As an ACK is not being delayed, remove any earlier delayed ACK
			message. */
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	429a      	cmp	r2, r3
 800e084:	d004      	beq.n	800e090 <prvSendData+0x144>
			{
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e08a:	4618      	mov	r0, r3
 800e08c:	f001 fe16 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
			}

			pxSocket->u.xTCP.pxAckMessage = NULL;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	2200      	movs	r2, #0
 800e094:	67da      	str	r2, [r3, #124]	; 0x7c
		( void ) pxTCPHeader;
		( void ) lRxSpace;
	}
	#endif /* ipconfigUSE_TCP_WIN */

	if( xSendLength != 0 )
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d00d      	beq.n	800e0b8 <prvSendData+0x16c>
	{
		if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE ) )
 800e09c:	4b09      	ldr	r3, [pc, #36]	; (800e0c4 <prvSendData+0x178>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	dd02      	ble.n	800e0aa <prvSendData+0x15e>
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e0a8:	2b17      	cmp	r3, #23
				xSendLength ) );
		}

		/* Set the parameter 'xReleaseAfterSend' to the value of
		ipconfigZERO_COPY_TX_DRIVER. */
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	6819      	ldr	r1, [r3, #0]
 800e0ae:	683a      	ldr	r2, [r7, #0]
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	68f8      	ldr	r0, [r7, #12]
 800e0b4:	f7fe fc16 	bl	800c8e4 <prvTCPReturnPacket>
			*ppxNetworkBuffer = NULL;
		}
		#endif
	}

	return xSendLength;
 800e0b8:	683b      	ldr	r3, [r7, #0]
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3728      	adds	r7, #40	; 0x28
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	20004250 	.word	0x20004250

0800e0c8 <prvTCPHandleState>:
 *
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer )
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b08c      	sub	sp, #48	; 0x30
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	699b      	ldr	r3, [r3, #24]
 800e0d8:	62bb      	str	r3, [r7, #40]	; 0x28
TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
 800e0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0dc:	3322      	adds	r3, #34	; 0x22
 800e0de:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t xSendLength = 0;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t ulReceiveLength;	/* Number of bytes contained in the TCP message. */
uint8_t *pucRecvData;
uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
 800e0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	061a      	lsls	r2, r3, #24
 800e0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	021b      	lsls	r3, r3, #8
 800e0f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e0f4:	431a      	orrs	r2, r3
 800e0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f8:	685b      	ldr	r3, [r3, #4]
 800e0fa:	0a1b      	lsrs	r3, r3, #8
 800e0fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e100:	431a      	orrs	r2, r3
 800e102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	0e1b      	lsrs	r3, r3, #24
 800e108:	4313      	orrs	r3, r2
 800e10a:	623b      	str	r3, [r7, #32]
	/* xOptionsLength: the size of the options to be sent (always a multiple of
	4 bytes)
	1. in the SYN phase, we shall communicate the MSS
	2. in case of a SACK, Selective ACK, ack a segment which comes in
	out-of-order. */
UBaseType_t uxOptionsLength = 0u;
 800e10c:	2300      	movs	r3, #0
 800e10e:	61fb      	str	r3, [r7, #28]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e112:	7b5b      	ldrb	r3, [r3, #13]
 800e114:	76fb      	strb	r3, [r7, #27]
TCPWindow_t *pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	33dc      	adds	r3, #220	; 0xdc
 800e11a:	617b      	str	r3, [r7, #20]

	/* First get the length and the position of the received data, if any.
	pucRecvData will point to the first byte of the TCP payload. */
	ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f107 020c 	add.w	r2, r7, #12
 800e124:	4611      	mov	r1, r2
 800e126:	4618      	mov	r0, r3
 800e128:	f7ff fbff 	bl	800d92a <prvCheckRxData>
 800e12c:	4603      	mov	r3, r0
 800e12e:	613b      	str	r3, [r7, #16]

	if( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED )
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e136:	2b04      	cmp	r3, #4
 800e138:	d90c      	bls.n	800e154 <prvTCPHandleState+0x8c>
	{
		if ( pxTCPWindow->rx.ulCurrentSequenceNumber == ulSequenceNumber + 1u )
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	691a      	ldr	r2, [r3, #16]
 800e13e:	6a3b      	ldr	r3, [r7, #32]
 800e140:	3301      	adds	r3, #1
 800e142:	429a      	cmp	r2, r3
 800e144:	d106      	bne.n	800e154 <prvTCPHandleState+0x8c>
		{
			/* This is most probably a keep-alive message from peer.  Setting
			'bWinChange' doesn't cause a window-size-change, the flag is used
			here to force sending an immediate ACK. */
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e14c:	f043 0301 	orr.w	r3, r3, #1
 800e150:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		}
	}

	/* Keep track of the highest sequence number that might be expected within
	this connection. */
	if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0 )
 800e154:	6a3a      	ldr	r2, [r7, #32]
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	441a      	add	r2, r3
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	699b      	ldr	r3, [r3, #24]
 800e15e:	1ad3      	subs	r3, r2, r3
 800e160:	2b00      	cmp	r3, #0
 800e162:	dd04      	ble.n	800e16e <prvTCPHandleState+0xa6>
	{
		pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800e164:	6a3a      	ldr	r2, [r7, #32]
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	441a      	add	r2, r3
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	619a      	str	r2, [r3, #24]
	}

	/* Storing data may result in a fatal error if malloc() fails. */
	if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 800e16e:	68f9      	ldr	r1, [r7, #12]
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f7ff fc3e 	bl	800d9f8 <prvStoreRxData>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	da03      	bge.n	800e18a <prvTCPHandleState+0xc2>
	{
		xSendLength = -1;
 800e182:	f04f 33ff 	mov.w	r3, #4294967295
 800e186:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e188:	e09e      	b.n	800e2c8 <prvTCPHandleState+0x200>
	}
	else
	{
		uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	4619      	mov	r1, r3
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f7ff fca5 	bl	800dae0 <prvSetOptions>
 800e196:	61f8      	str	r0, [r7, #28]

		if( ( pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) )
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e19e:	2b04      	cmp	r3, #4
 800e1a0:	d108      	bne.n	800e1b4 <prvTCPHandleState+0xec>
 800e1a2:	7efb      	ldrb	r3, [r7, #27]
 800e1a4:	f003 031f 	and.w	r3, r3, #31
 800e1a8:	2b02      	cmp	r3, #2
 800e1aa:	d103      	bne.n	800e1b4 <prvTCPHandleState+0xec>

			/* In eSYN_RECEIVED a simple ACK is expected, but apparently the
			'SYN+ACK' didn't arrive.  Step back to the previous state in which
			a first incoming SYN is handled.  The SYN was counted already so
			decrease it first. */
			vTCPStateChange( pxSocket, eSYN_FIRST );
 800e1ac:	2103      	movs	r1, #3
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f7fe ffcb 	bl	800d14a <vTCPStateChange>
		}

		if( ( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800e1b4:	7efb      	ldrb	r3, [r7, #27]
 800e1b6:	f003 0301 	and.w	r3, r3, #1
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d022      	beq.n	800e204 <prvTCPHandleState+0x13c>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e1c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d11a      	bne.n	800e204 <prvTCPHandleState+0x13c>
		{
			/* It's the first time a FIN has been received, remember its
			sequence number. */
			pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800e1ce:	6a3a      	ldr	r2, [r7, #32]
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	441a      	add	r2, r3
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	615a      	str	r2, [r3, #20]
			pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e1de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1e2:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

			/* Was peer the first one to send a FIN? */
			if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1f0:	b2db      	uxtb	r3, r3
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d106      	bne.n	800e204 <prvTCPHandleState+0x13c>
			{
				/* If so, don't send the-last-ACK. */
				pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800e1fc:	f043 0302 	orr.w	r3, r3, #2
 800e200:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			}
		}

		switch (pxSocket->u.xTCP.ucTCPState)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e20a:	2b0b      	cmp	r3, #11
 800e20c:	d85b      	bhi.n	800e2c6 <prvTCPHandleState+0x1fe>
 800e20e:	a201      	add	r2, pc, #4	; (adr r2, 800e214 <prvTCPHandleState+0x14c>)
 800e210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e214:	0800e2c7 	.word	0x0800e2c7
 800e218:	0800e2c7 	.word	0x0800e2c7
 800e21c:	0800e297 	.word	0x0800e297
 800e220:	0800e245 	.word	0x0800e245
 800e224:	0800e297 	.word	0x0800e297
 800e228:	0800e2a7 	.word	0x0800e2a7
 800e22c:	0800e2b7 	.word	0x0800e2b7
 800e230:	0800e2b7 	.word	0x0800e2b7
 800e234:	0800e2c7 	.word	0x0800e2c7
 800e238:	0800e2c7 	.word	0x0800e2c7
 800e23c:	0800e2b7 	.word	0x0800e2b7
 800e240:	0800e2c7 	.word	0x0800e2c7
							socket. */
			{
				/* A new socket has been created, reply with a SYN+ACK.
				Acknowledge with seq+1 because the SYN is seen as pseudo data
				with len = 1. */
				uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPPacket );
 800e244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f7fe ff07 	bl	800d05a <prvSetSynAckOptions>
 800e24c:	61f8      	str	r0, [r7, #28]
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_SYN | ipTCP_FLAG_ACK;
 800e24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e250:	2212      	movs	r2, #18
 800e252:	735a      	strb	r2, [r3, #13]

				xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800e254:	69fb      	ldr	r3, [r7, #28]
 800e256:	3328      	adds	r3, #40	; 0x28
 800e258:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
				xOptionsLength is a multiple of 4.  The complete expression is:
				ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + xOptionsLength ) / 4 ) << 4 */
				pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	3314      	adds	r3, #20
 800e260:	b2db      	uxtb	r3, r3
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	b2da      	uxtb	r2, r3
 800e266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e268:	731a      	strb	r2, [r3, #12]
				vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800e26a:	2104      	movs	r1, #4
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f7fe ff6c 	bl	800d14a <vTCPStateChange>

				pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 800e272:	6a3b      	ldr	r3, [r7, #32]
 800e274:	1c5a      	adds	r2, r3, #1
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	619a      	str	r2, [r3, #24]
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	699a      	ldr	r2, [r3, #24]
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	611a      	str	r2, [r3, #16]
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u; /* because we send a TCP_SYN. */
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	69db      	ldr	r3, [r3, #28]
 800e286:	1c5a      	adds	r2, r3, #1
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	635a      	str	r2, [r3, #52]	; 0x34
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	621a      	str	r2, [r3, #32]
			}
			break;
 800e294:	e018      	b.n	800e2c8 <prvTCPHandleState+0x200>
		case eCONNECT_SYN:	/* (client) also called SYN_SENT: we've just send a
							SYN, expect	a SYN+ACK and send a ACK now. */
			/* Fall through */
		case eSYN_RECEIVED:	/* (server) we've had a SYN, replied with SYN+SCK
							expect a ACK and do nothing. */
			xSendLength = prvHandleSynReceived( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	693a      	ldr	r2, [r7, #16]
 800e29a:	6839      	ldr	r1, [r7, #0]
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f7ff fc7d 	bl	800db9c <prvHandleSynReceived>
 800e2a2:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800e2a4:	e010      	b.n	800e2c8 <prvTCPHandleState+0x200>
		case eESTABLISHED:	/* (server + client) an open connection, data
							received can be	delivered to the user. The normal
							state for the data transfer phase of the connection
							The closing states are also handled here with the
							use of some flags. */
			xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800e2a6:	69fb      	ldr	r3, [r7, #28]
 800e2a8:	693a      	ldr	r2, [r7, #16]
 800e2aa:	6839      	ldr	r1, [r7, #0]
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f7ff fd36 	bl	800dd1e <prvHandleEstablished>
 800e2b2:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800e2b4:	e008      	b.n	800e2c8 <prvTCPHandleState+0x200>
			/* Fall through */
		case eFIN_WAIT_1:	/* (server + client) waiting for a connection termination request from the remote TCP,
							 * or an acknowledgement of the connection termination request previously sent. */
			/* Fall through */
		case eFIN_WAIT_2:	/* (server + client) waiting for a connection termination request from the remote TCP. */
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f7ff fa8f 	bl	800d7e0 <prvTCPHandleFin>
 800e2c2:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800e2c4:	e000      	b.n	800e2c8 <prvTCPHandleState+0x200>
							a MSL (maximum segment lifetime).]  These states are
							implemented implicitly by settings flags like
							'bFinSent', 'bFinRecv', and 'bFinAcked'. */
			break;
		default:
			break;
 800e2c6:	bf00      	nop
		}
	}

	if( xSendLength > 0 )
 800e2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	dd06      	ble.n	800e2dc <prvTCPHandleState+0x214>
	{
		xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 800e2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d0:	693a      	ldr	r2, [r7, #16]
 800e2d2:	6839      	ldr	r1, [r7, #0]
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7ff fe39 	bl	800df4c <prvSendData>
 800e2da:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	return xSendLength;
 800e2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3730      	adds	r7, #48	; 0x30
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop

0800e2e8 <prvTCPSendReset>:
/*-----------------------------------------------------------*/

static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b084      	sub	sp, #16
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
	#if( ipconfigIGNORE_UNKNOWN_PACKETS == 0 )
	{
	TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	699b      	ldr	r3, [r3, #24]
 800e2f4:	60fb      	str	r3, [r7, #12]
	const BaseType_t xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + 0u );	/* Plus 0 options. */
 800e2f6:	2328      	movs	r3, #40	; 0x28
 800e2f8:	60bb      	str	r3, [r7, #8]

		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_RST;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2214      	movs	r2, #20
 800e2fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER + 0u ) << 2;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2250      	movs	r2, #80	; 0x50
 800e306:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		prvTCPReturnPacket( NULL, pxNetworkBuffer, ( uint32_t ) xSendLength, pdFALSE );
 800e30a:	68ba      	ldr	r2, [r7, #8]
 800e30c:	2300      	movs	r3, #0
 800e30e:	6879      	ldr	r1, [r7, #4]
 800e310:	2000      	movs	r0, #0
 800e312:	f7fe fae7 	bl	800c8e4 <prvTCPReturnPacket>

	/* Remove compiler warnings if ipconfigIGNORE_UNKNOWN_PACKETS == 1. */
	( void ) pxNetworkBuffer;

	/* The packet was not consumed. */
	return pdFAIL;
 800e316:	2300      	movs	r3, #0
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3710      	adds	r7, #16
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <prvSocketSetMSS>:
/*-----------------------------------------------------------*/

static void prvSocketSetMSS( FreeRTOS_Socket_t *pxSocket )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
uint32_t ulMSS = ipconfigTCP_MSS;
 800e328:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800e32c:	60fb      	str	r3, [r7, #12]

	if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0ul )
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e332:	061a      	lsls	r2, r3, #24
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e338:	021b      	lsls	r3, r3, #8
 800e33a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e33e:	431a      	orrs	r2, r3
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e344:	0a1b      	lsrs	r3, r3, #8
 800e346:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e34a:	431a      	orrs	r2, r3
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e350:	0e1b      	lsrs	r3, r3, #24
 800e352:	431a      	orrs	r2, r3
 800e354:	4b0e      	ldr	r3, [pc, #56]	; (800e390 <prvSocketSetMSS+0x70>)
 800e356:	695b      	ldr	r3, [r3, #20]
 800e358:	405a      	eors	r2, r3
 800e35a:	4b0e      	ldr	r3, [pc, #56]	; (800e394 <prvSocketSetMSS+0x74>)
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	4013      	ands	r3, r2
 800e360:	2b00      	cmp	r3, #0
 800e362:	d005      	beq.n	800e370 <prvSocketSetMSS+0x50>
	{
		/* Data for this peer will pass through a router, and maybe through
		the internet.  Limit the MSS to 1400 bytes or less. */
		ulMSS = FreeRTOS_min_uint32( ( uint32_t ) REDUCED_MSS_THROUGH_INTERNET, ulMSS );
 800e364:	68f9      	ldr	r1, [r7, #12]
 800e366:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800e36a:	f7fe f870 	bl	800c44e <FreeRTOS_min_uint32>
 800e36e:	60f8      	str	r0, [r7, #12]
	}

	FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );

	pxSocket->u.xTCP.usInitMSS = pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	b29a      	uxth	r2, r3
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800e386:	bf00      	nop
 800e388:	3710      	adds	r7, #16
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	200000a0 	.word	0x200000a0
 800e394:	20004198 	.word	0x20004198

0800e398 <xProcessReceivedTCPPacket>:
 *		prvTCPSendRepeated()
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC
*/
BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b08c      	sub	sp, #48	; 0x30
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
FreeRTOS_Socket_t *pxSocket;
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	699b      	ldr	r3, [r3, #24]
 800e3a4:	627b      	str	r3, [r7, #36]	; 0x24
uint16_t ucTCPFlags = pxTCPPacket->xTCPHeader.ucTCPFlags;
 800e3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e3ac:	847b      	strh	r3, [r7, #34]	; 0x22
uint32_t ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 800e3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b0:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e3b4:	061a      	lsls	r2, r3, #24
 800e3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b8:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e3bc:	021b      	lsls	r3, r3, #8
 800e3be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e3c2:	431a      	orrs	r2, r3
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c6:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e3ca:	0a1b      	lsrs	r3, r3, #8
 800e3cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e3d0:	431a      	orrs	r2, r3
 800e3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d4:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e3d8:	0e1b      	lsrs	r3, r3, #24
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	61fb      	str	r3, [r7, #28]
uint16_t xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 800e3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	021b      	lsls	r3, r3, #8
 800e3e6:	b21a      	sxth	r2, r3
 800e3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	0a1b      	lsrs	r3, r3, #8
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	b21b      	sxth	r3, r3
 800e3f4:	4313      	orrs	r3, r2
 800e3f6:	b21b      	sxth	r3, r3
 800e3f8:	837b      	strh	r3, [r7, #26]
uint32_t ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800e3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fc:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e400:	061a      	lsls	r2, r3, #24
 800e402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e404:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e408:	021b      	lsls	r3, r3, #8
 800e40a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e40e:	431a      	orrs	r2, r3
 800e410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e412:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e416:	0a1b      	lsrs	r3, r3, #8
 800e418:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e41c:	431a      	orrs	r2, r3
 800e41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e420:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e424:	0e1b      	lsrs	r3, r3, #24
 800e426:	4313      	orrs	r3, r2
 800e428:	617b      	str	r3, [r7, #20]
uint16_t xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800e42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e42e:	b29b      	uxth	r3, r3
 800e430:	021b      	lsls	r3, r3, #8
 800e432:	b21a      	sxth	r2, r3
 800e434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e436:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e438:	b29b      	uxth	r3, r3
 800e43a:	0a1b      	lsrs	r3, r3, #8
 800e43c:	b29b      	uxth	r3, r3
 800e43e:	b21b      	sxth	r3, r3
 800e440:	4313      	orrs	r3, r2
 800e442:	b21b      	sxth	r3, r3
 800e444:	827b      	strh	r3, [r7, #18]
BaseType_t xResult = pdPASS;
 800e446:	2301      	movs	r3, #1
 800e448:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Find the destination socket, and if not found: return a socket listing to
	the destination PORT. */
	pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 800e44a:	8b79      	ldrh	r1, [r7, #26]
 800e44c:	8a7b      	ldrh	r3, [r7, #18]
 800e44e:	697a      	ldr	r2, [r7, #20]
 800e450:	69f8      	ldr	r0, [r7, #28]
 800e452:	f7fd fb91 	bl	800bb78 <pxTCPSocketLookup>
 800e456:	62f8      	str	r0, [r7, #44]	; 0x2c

	if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE ) )
 800e458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d008      	beq.n	800e470 <xProcessReceivedTCPPacket+0xd8>
 800e45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e460:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e464:	4618      	mov	r0, r3
 800e466:	f7fe f8d1 	bl	800c60c <prvTCPSocketIsActive>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d110      	bne.n	800e492 <xProcessReceivedTCPPacket+0xfa>
		the other party will get a ECONN error.  There are two exceptions:
		1) A packet that already has the RST flag set.
		2) A packet that only has the ACK flag set.
		A packet with only the ACK flag set might be the last ACK in
	 	a three-way hand-shake that closes a connection. */
		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
 800e470:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e472:	f003 031f 	and.w	r3, r3, #31
 800e476:	2b10      	cmp	r3, #16
 800e478:	d008      	beq.n	800e48c <xProcessReceivedTCPPacket+0xf4>
			( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u ) )
 800e47a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e47c:	f003 0304 	and.w	r3, r3, #4
		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
 800e480:	2b00      	cmp	r3, #0
 800e482:	d103      	bne.n	800e48c <xProcessReceivedTCPPacket+0xf4>
		{
			prvTCPSendReset( pxNetworkBuffer );
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	4618      	mov	r0, r3
 800e488:	f7ff ff2e 	bl	800e2e8 <prvTCPSendReset>
		}

		/* The packet can't be handled. */
		xResult = pdFAIL;
 800e48c:	2300      	movs	r3, #0
 800e48e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e490:	e04d      	b.n	800e52e <xProcessReceivedTCPPacket+0x196>
	}
	else
	{
		pxSocket->u.xTCP.ucRepCount = 0u;
 800e492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e494:	2200      	movs	r2, #0
 800e496:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

		if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800e49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e49c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d11c      	bne.n	800e4de <xProcessReceivedTCPPacket+0x146>
		{
			/* The matching socket is in a listening state.  Test if the peer
			has set the SYN flag. */
			if( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_SYN )
 800e4a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4a6:	f003 031f 	and.w	r3, r3, #31
 800e4aa:	2b02      	cmp	r3, #2
 800e4ac:	d00b      	beq.n	800e4c6 <xProcessReceivedTCPPacket+0x12e>
				FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
					prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
				}
				#endif /* ipconfigHAS_DEBUG_PRINTF */

				if( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u )
 800e4ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4b0:	f003 0304 	and.w	r3, r3, #4
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d103      	bne.n	800e4c0 <xProcessReceivedTCPPacket+0x128>
				{
					prvTCPSendReset( pxNetworkBuffer );
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7ff ff14 	bl	800e2e8 <prvTCPSendReset>
				}
				xResult = pdFAIL;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4c4:	e033      	b.n	800e52e <xProcessReceivedTCPPacket+0x196>
			else
			{
				/* prvHandleListen() will either return a newly created socket
				(if bReuseSocket is false), otherwise it returns the current
				socket which will later get connected. */
				pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4cc:	f000 f87e 	bl	800e5cc <prvHandleListen>
 800e4d0:	62f8      	str	r0, [r7, #44]	; 0x2c

				if( pxSocket == NULL )
 800e4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d12a      	bne.n	800e52e <xProcessReceivedTCPPacket+0x196>
				{
					xResult = pdFAIL;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4dc:	e027      	b.n	800e52e <xProcessReceivedTCPPacket+0x196>
		}	/* if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN ). */
		else
		{
			/* This is not a socket in listening mode. Check for the RST
			flag. */
			if( ( ucTCPFlags & ipTCP_FLAG_RST ) != 0u )
 800e4de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4e0:	f003 0304 	and.w	r3, r3, #4
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d006      	beq.n	800e4f6 <xProcessReceivedTCPPacket+0x15e>
			{
				/* The target socket is not in a listening state, any RST packet
				will cause the socket to be closed. */
				FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );
				vTCPStateChange( pxSocket, eCLOSED );
 800e4e8:	2100      	movs	r1, #0
 800e4ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4ec:	f7fe fe2d 	bl	800d14a <vTCPStateChange>

				/* The packet cannot be handled. */
				xResult = pdFAIL;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4f4:	e01b      	b.n	800e52e <xProcessReceivedTCPPacket+0x196>
			}
			else if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) )
 800e4f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4f8:	f003 031f 	and.w	r3, r3, #31
 800e4fc:	2b02      	cmp	r3, #2
 800e4fe:	d107      	bne.n	800e510 <xProcessReceivedTCPPacket+0x178>
 800e500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e502:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e506:	2b04      	cmp	r3, #4
 800e508:	d902      	bls.n	800e510 <xProcessReceivedTCPPacket+0x178>
			{
				/* SYN flag while this socket is already connected. */
				FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );

				/* The packet cannot be handled. */
				xResult = pdFAIL;
 800e50a:	2300      	movs	r3, #0
 800e50c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e50e:	e00e      	b.n	800e52e <xProcessReceivedTCPPacket+0x196>
			else
			{
				/* Update the copy of the TCP header only (skipping eth and IP
				headers).  It might be used later on, whenever data must be sent
				to the peer. */
				const BaseType_t lOffset = ( BaseType_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER );
 800e510:	2322      	movs	r3, #34	; 0x22
 800e512:	60fb      	str	r3, [r7, #12]
				memcpy( pxSocket->u.xTCP.xPacket.u.ucLastPacket + lOffset, pxNetworkBuffer->pucEthernetBuffer + lOffset, ipSIZE_OF_TCP_HEADER );
 800e514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e516:	f103 0282 	add.w	r2, r3, #130	; 0x82
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	18d0      	adds	r0, r2, r3
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	699a      	ldr	r2, [r3, #24]
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	4413      	add	r3, r2
 800e526:	2214      	movs	r2, #20
 800e528:	4619      	mov	r1, r3
 800e52a:	f002 fb76 	bl	8010c1a <memcpy>
			}
		}
	}

	if( xResult != pdFAIL )
 800e52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e530:	2b00      	cmp	r3, #0
 800e532:	d046      	beq.n	800e5c2 <xProcessReceivedTCPPacket+0x22a>
	{
		/* Touch the alive timers because we received a message	for this
		socket. */
		prvTCPTouchSocket( pxSocket );
 800e534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e536:	f7fe fde4 	bl	800d102 <prvTCPTouchSocket>
		/* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
		then we MUST assume an MSS size of 536 bytes for backward compatibility. */

		/* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
		the number 5 (words) in the higher niblle of the TCP-offset byte. */
		if( ( pxTCPPacket->xTCPHeader.ucTCPOffset & TCP_OFFSET_LENGTH_BITS ) > TCP_OFFSET_STANDARD_LENGTH )
 800e53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e544:	2b50      	cmp	r3, #80	; 0x50
 800e546:	d904      	bls.n	800e552 <xProcessReceivedTCPPacket+0x1ba>
		{
			prvCheckOptions( pxSocket, pxNetworkBuffer );
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	4619      	mov	r1, r3
 800e54c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e54e:	f7fe fc73 	bl	800ce38 <prvCheckOptions>
		}


		#if( ipconfigUSE_TCP_WIN == 1 )
		{
			pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usWindow );
 800e552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e554:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e556:	b29b      	uxth	r3, r3
 800e558:	021b      	lsls	r3, r3, #8
 800e55a:	b21a      	sxth	r2, r3
 800e55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e560:	b29b      	uxth	r3, r3
 800e562:	0a1b      	lsrs	r3, r3, #8
 800e564:	b29b      	uxth	r3, r3
 800e566:	b21b      	sxth	r3, r3
 800e568:	4313      	orrs	r3, r2
 800e56a:	b21b      	sxth	r3, r3
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	461a      	mov	r2, r3
 800e570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e572:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			pxSocket->u.xTCP.ulWindowSize =
				( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800e576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e578:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e57c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e57e:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800e582:	fa03 f202 	lsl.w	r2, r3, r2
			pxSocket->u.xTCP.ulWindowSize =
 800e586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e588:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		}
		#endif

		/* In prvTCPHandleState() the incoming messages will be handled
		depending on the current state of the connection. */
		if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 800e58c:	1d3b      	adds	r3, r7, #4
 800e58e:	4619      	mov	r1, r3
 800e590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e592:	f7ff fd99 	bl	800e0c8 <prvTCPHandleState>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	dd04      	ble.n	800e5a6 <xProcessReceivedTCPPacket+0x20e>
		{
			/* prvTCPHandleState() has sent a message, see if there are more to
			be transmitted. */
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800e59c:	1d3b      	adds	r3, r7, #4
 800e59e:	4619      	mov	r1, r3
 800e5a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5a2:	f7fe f972 	bl	800c88a <prvTCPSendRepeated>
			}
			#endif /* ipconfigUSE_TCP_WIN */
		}

		if( pxNetworkBuffer != NULL )
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d005      	beq.n	800e5b8 <xProcessReceivedTCPPacket+0x220>
		{
			/* We must check if the buffer is unequal to NULL, because the
			socket might keep a reference to it in case a delayed ACK must be
			sent. */
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f001 fb84 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
			pxNetworkBuffer = NULL;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	607b      	str	r3, [r7, #4]
		}

		/* And finally, calculate when this socket wants to be woken up. */
		prvTCPNextTimeout ( pxSocket );
 800e5b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5ba:	f7ff f869 	bl	800d690 <prvTCPNextTimeout>
		/* Return pdPASS to tell that the network buffer is 'consumed'. */
		xResult = pdPASS;
 800e5be:	2301      	movs	r3, #1
 800e5c0:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* pdPASS being returned means the buffer has been consumed. */
	return xResult;
 800e5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3730      	adds	r7, #48	; 0x30
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <prvHandleListen>:
/*-----------------------------------------------------------*/

static FreeRTOS_Socket_t *prvHandleListen( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b086      	sub	sp, #24
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	699b      	ldr	r3, [r3, #24]
 800e5da:	613b      	str	r3, [r7, #16]
FreeRTOS_Socket_t *pxReturn;

	/* A pure SYN (without ACK) has come in, create a new socket to answer
	it. */
	if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e5e2:	f003 0308 	and.w	r3, r3, #8
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00c      	beq.n	800e606 <prvHandleListen+0x3a>
	{
		/* The flag bReuseSocket indicates that the same instance of the
		listening socket should be used for the connection. */
		pxReturn = pxSocket;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	617b      	str	r3, [r7, #20]
		pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800e5f6:	f043 0304 	orr.w	r3, r3, #4
 800e5fa:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	687a      	ldr	r2, [r7, #4]
 800e602:	655a      	str	r2, [r3, #84]	; 0x54
 800e604:	e027      	b.n	800e656 <prvHandleListen+0x8a>
	}
	else
	{
		/* The socket does not have the bReuseSocket flag set meaning create a
		new socket when a connection comes in. */
		pxReturn = NULL;
 800e606:	2300      	movs	r3, #0
 800e608:	617b      	str	r3, [r7, #20]

		if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e616:	429a      	cmp	r2, r3
 800e618:	d303      	bcc.n	800e622 <prvHandleListen+0x56>
			FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
				pxSocket->usLocalPort,
				pxSocket->u.xTCP.usChildCount,
				pxSocket->u.xTCP.usBacklog,
				pxSocket->u.xTCP.usChildCount == 1 ? "" : "ren" ) );
			prvTCPSendReset( pxNetworkBuffer );
 800e61a:	6838      	ldr	r0, [r7, #0]
 800e61c:	f7ff fe64 	bl	800e2e8 <prvTCPSendReset>
 800e620:	e019      	b.n	800e656 <prvHandleListen+0x8a>
		}
		else
		{
			FreeRTOS_Socket_t *pxNewSocket = (FreeRTOS_Socket_t *)
 800e622:	2206      	movs	r2, #6
 800e624:	2101      	movs	r1, #1
 800e626:	2002      	movs	r0, #2
 800e628:	f7fc fc0a 	bl	800ae40 <FreeRTOS_socket>
 800e62c:	60f8      	str	r0, [r7, #12]
				FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );

			if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d003      	beq.n	800e63c <prvHandleListen+0x70>
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e63a:	d103      	bne.n	800e644 <prvHandleListen+0x78>
			{
				FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
				prvTCPSendReset( pxNetworkBuffer );
 800e63c:	6838      	ldr	r0, [r7, #0]
 800e63e:	f7ff fe53 	bl	800e2e8 <prvTCPSendReset>
 800e642:	e008      	b.n	800e656 <prvHandleListen+0x8a>
			}
			else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 800e644:	6879      	ldr	r1, [r7, #4]
 800e646:	68f8      	ldr	r0, [r7, #12]
 800e648:	f000 f870 	bl	800e72c <prvTCPSocketCopy>
 800e64c:	4603      	mov	r3, r0
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d001      	beq.n	800e656 <prvHandleListen+0x8a>
			{
				/* The socket will be connected immediately, no time for the
				owner to setsockopt's, therefore copy properties of the server
				socket to the new socket.  Only the binding might fail (due to
				lack of resources). */
				pxReturn = pxNewSocket;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	617b      	str	r3, [r7, #20]
			}
		}
	}

	if( pxReturn != NULL )
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d060      	beq.n	800e71e <prvHandleListen+0x152>
	{
		pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e660:	b29b      	uxth	r3, r3
 800e662:	021b      	lsls	r3, r3, #8
 800e664:	b21a      	sxth	r2, r3
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	0a1b      	lsrs	r3, r3, #8
 800e66e:	b29b      	uxth	r3, r3
 800e670:	b21b      	sxth	r3, r3
 800e672:	4313      	orrs	r3, r2
 800e674:	b21b      	sxth	r3, r3
 800e676:	b29a      	uxth	r2, r3
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	879a      	strh	r2, [r3, #60]	; 0x3c
		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e682:	061a      	lsls	r2, r3, #24
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e68a:	021b      	lsls	r3, r3, #8
 800e68c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e690:	431a      	orrs	r2, r3
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e698:	0a1b      	lsrs	r3, r3, #8
 800e69a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e69e:	431a      	orrs	r2, r3
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e6a6:	0e1b      	lsrs	r3, r3, #24
 800e6a8:	431a      	orrs	r2, r3
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulNextInitialSequenceNumber;
 800e6ae:	4b1e      	ldr	r3, [pc, #120]	; (800e728 <prvHandleListen+0x15c>)
 800e6b0:	681a      	ldr	r2, [r3, #0]
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

		/* Here is the SYN action. */
		pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800e6be:	061a      	lsls	r2, r3, #24
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800e6c6:	021b      	lsls	r3, r3, #8
 800e6c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e6cc:	431a      	orrs	r2, r3
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800e6d4:	0a1b      	lsrs	r3, r3, #8
 800e6d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e6da:	431a      	orrs	r2, r3
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800e6e2:	0e1b      	lsrs	r3, r3, #24
 800e6e4:	431a      	orrs	r2, r3
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
		prvSocketSetMSS( pxReturn );
 800e6ec:	6978      	ldr	r0, [r7, #20]
 800e6ee:	f7ff fe17 	bl	800e320 <prvSocketSetMSS>

		prvTCPCreateWindow( pxReturn );
 800e6f2:	6978      	ldr	r0, [r7, #20]
 800e6f4:	f7fe faa0 	bl	800cc38 <prvTCPCreateWindow>

		/* It is recommended to increase the ISS for each new connection with a value of 0x102. */
		ulNextInitialSequenceNumber += INITIAL_SEQUENCE_NUMBER_INCREMENT;
 800e6f8:	4b0b      	ldr	r3, [pc, #44]	; (800e728 <prvHandleListen+0x15c>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800e700:	4a09      	ldr	r2, [pc, #36]	; (800e728 <prvHandleListen+0x15c>)
 800e702:	6013      	str	r3, [r2, #0]

		vTCPStateChange( pxReturn, eSYN_FIRST );
 800e704:	2103      	movs	r1, #3
 800e706:	6978      	ldr	r0, [r7, #20]
 800e708:	f7fe fd1f 	bl	800d14a <vTCPStateChange>

		/* Make a copy of the header up to the TCP header.  It is needed later
		on, whenever data must be sent to the peer. */
		memcpy( pxReturn->u.xTCP.xPacket.u.ucLastPacket, pxNetworkBuffer->pucEthernetBuffer, sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	f103 0082 	add.w	r0, r3, #130	; 0x82
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	699b      	ldr	r3, [r3, #24]
 800e716:	2246      	movs	r2, #70	; 0x46
 800e718:	4619      	mov	r1, r3
 800e71a:	f002 fa7e 	bl	8010c1a <memcpy>
	}
	return pxReturn;
 800e71e:	697b      	ldr	r3, [r7, #20]
}
 800e720:	4618      	mov	r0, r3
 800e722:	3718      	adds	r7, #24
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	20004234 	.word	0x20004234

0800e72c <prvTCPSocketCopy>:

/*
 * Duplicates a socket after a listening socket receives a connection.
 */
static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t *pxNewSocket, FreeRTOS_Socket_t *pxSocket )
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b084      	sub	sp, #16
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
struct freertos_sockaddr xAddress;

	pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	69da      	ldr	r2, [r3, #28]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	61da      	str	r2, [r3, #28]
	pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	6a1a      	ldr	r2, [r3, #32]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	621a      	str	r2, [r3, #32]
	pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	66da      	str	r2, [r3, #108]	; 0x6c
	pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	671a      	str	r2, [r3, #112]	; 0x70
	pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	665a      	str	r2, [r3, #100]	; 0x64
	pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	669a      	str	r2, [r3, #104]	; 0x68
	pxNewSocket->u.xTCP.uxRxWinSize  = pxSocket->u.xTCP.uxRxWinSize;
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	pxNewSocket->u.xTCP.uxTxWinSize  = pxSocket->u.xTCP.uxTxWinSize;
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		/* Child socket of listening sockets will inherit the Socket Set
		Otherwise the owner has no chance of including it into the set. */
		if( pxSocket->pxSocketSet )
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d009      	beq.n	800e7a6 <prvTCPSocketCopy+0x7a>
		{
			pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	629a      	str	r2, [r3, #40]	; 0x28
			pxNewSocket->xSelectBits = pxSocket->xSelectBits | eSELECT_READ | eSELECT_EXCEPT;
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e79e:	f043 0205 	orr.w	r2, r3, #5
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	/* And bind it to the same local port as its parent. */
	xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 800e7a6:	4b1b      	ldr	r3, [pc, #108]	; (800e814 <prvTCPSocketCopy+0xe8>)
 800e7a8:	695b      	ldr	r3, [r3, #20]
 800e7aa:	60fb      	str	r3, [r7, #12]
	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e7b0:	021b      	lsls	r3, r3, #8
 800e7b2:	b21a      	sxth	r2, r3
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e7b8:	0a1b      	lsrs	r3, r3, #8
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	b21b      	sxth	r3, r3
 800e7be:	4313      	orrs	r3, r2
 800e7c0:	b21b      	sxth	r3, r3
 800e7c2:	b29b      	uxth	r3, r3
 800e7c4:	817b      	strh	r3, [r7, #10]
		orphan temporarily.  Once this socket is really connected, the owner of
		the server socket will be notified. */

		/* When bPassQueued is true, the socket is an orphan until it gets
		connected. */
		pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800e7cc:	f043 0304 	orr.w	r3, r3, #4
 800e7d0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	683a      	ldr	r2, [r7, #0]
 800e7d8:	655a      	str	r2, [r3, #84]	; 0x54
			pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
		}
	}
	#endif

	pxSocket->u.xTCP.usChildCount++;
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	b29a      	uxth	r2, r3
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		pxSocket->u.xTCP.usChildCount,
		pxSocket->u.xTCP.usBacklog,
		pxSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );

	/* Now bind the child socket to the same port as the listening socket. */
	if( vSocketBind ( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800e7ea:	f107 0108 	add.w	r1, r7, #8
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	2208      	movs	r2, #8
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f7fc fd86 	bl	800b304 <vSocketBind>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d004      	beq.n	800e808 <prvTCPSocketCopy+0xdc>
	{
		FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
		vSocketClose( pxNewSocket );
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f7fc fe36 	bl	800b470 <vSocketClose>
		return pdFALSE;
 800e804:	2300      	movs	r3, #0
 800e806:	e000      	b.n	800e80a <prvTCPSocketCopy+0xde>
	}

	return pdTRUE;
 800e808:	2301      	movs	r3, #1
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3710      	adds	r7, #16
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
 800e812:	bf00      	nop
 800e814:	200000a0 	.word	0x200000a0

0800e818 <xTCPCheckNewClient>:
/*
 * In the API accept(), the user asks is there is a new client?  As API's can
 * not walk through the xBoundTCPSocketsList the IP-task will do this.
 */
BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t *pxSocket )
{
 800e818:	b480      	push	{r7}
 800e81a:	b087      	sub	sp, #28
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e824:	021b      	lsls	r3, r3, #8
 800e826:	b21a      	sxth	r2, r3
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e82c:	0a1b      	lsrs	r3, r3, #8
 800e82e:	b29b      	uxth	r3, r3
 800e830:	b21b      	sxth	r3, r3
 800e832:	4313      	orrs	r3, r2
 800e834:	b21b      	sxth	r3, r3
 800e836:	b29b      	uxth	r3, r3
 800e838:	60fb      	str	r3, [r7, #12]
ListItem_t *pxIterator;
FreeRTOS_Socket_t *pxFound;
BaseType_t xResult = pdFALSE;
 800e83a:	2300      	movs	r3, #0
 800e83c:	613b      	str	r3, [r7, #16]

	/* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
	who has access. */
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800e83e:	4b16      	ldr	r3, [pc, #88]	; (800e898 <xTCPCheckNewClient+0x80>)
 800e840:	68db      	ldr	r3, [r3, #12]
 800e842:	617b      	str	r3, [r7, #20]
 800e844:	e01d      	b.n	800e882 <xTCPCheckNewClient+0x6a>
		pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
	{
		if( listGET_LIST_ITEM_VALUE( pxIterator ) == xLocalPort )
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d115      	bne.n	800e87c <xTCPCheckNewClient+0x64>
		{
			pxFound = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	60bb      	str	r3, [r7, #8]
			if( ( pxFound->ucProtocol == FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e85c:	2b06      	cmp	r3, #6
 800e85e:	d10d      	bne.n	800e87c <xTCPCheckNewClient+0x64>
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e866:	f003 0302 	and.w	r3, r3, #2
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d005      	beq.n	800e87c <xTCPCheckNewClient+0x64>
			{
				pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	68ba      	ldr	r2, [r7, #8]
 800e874:	655a      	str	r2, [r3, #84]	; 0x54
				FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
				xResult = pdTRUE;
 800e876:	2301      	movs	r3, #1
 800e878:	613b      	str	r3, [r7, #16]
				break;
 800e87a:	e006      	b.n	800e88a <xTCPCheckNewClient+0x72>
		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	617b      	str	r3, [r7, #20]
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	4a05      	ldr	r2, [pc, #20]	; (800e89c <xTCPCheckNewClient+0x84>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d1dd      	bne.n	800e846 <xTCPCheckNewClient+0x2e>
			}
		}
	}
	return xResult;
 800e88a:	693b      	ldr	r3, [r7, #16]
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	371c      	adds	r7, #28
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr
 800e898:	20005924 	.word	0x20005924
 800e89c:	2000592c 	.word	0x2000592c

0800e8a0 <FreeRTOS_min_int32>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	bfa8      	it	ge
 800e8b2:	4613      	movge	r3, r2
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	bf28      	it	cs
 800e8d2:	4613      	movcs	r3, r2
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	370c      	adds	r7, #12
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr

0800e8e0 <xSequenceLessThanOrEqual>:

#if( ipconfigUSE_TCP_WIN == 1 )
	/* Some 32-bit arithmetic: comparing sequence numbers */
	static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a, uint32_t b )
	{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	6039      	str	r1, [r7, #0]
		/* Test if a <= b
		Return true if the unsigned subtraction of (b-a) doesn't generate an
		arithmetic overflow. */
		return ( ( b - a ) & 0x80000000UL ) == 0UL;
 800e8ea:	683a      	ldr	r2, [r7, #0]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	1ad3      	subs	r3, r2, r3
 800e8f0:	43db      	mvns	r3, r3
 800e8f2:	0fdb      	lsrs	r3, r3, #31
 800e8f4:	b2db      	uxtb	r3, r3
	}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	370c      	adds	r7, #12
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr

0800e902 <xSequenceLessThan>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE BaseType_t xSequenceLessThan( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceLessThan( uint32_t a, uint32_t b )
	{
 800e902:	b480      	push	{r7}
 800e904:	b083      	sub	sp, #12
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
 800e90a:	6039      	str	r1, [r7, #0]
		/* Test if a < b */
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 800e90c:	683a      	ldr	r2, [r7, #0]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	1ad3      	subs	r3, r2, r3
 800e912:	3b01      	subs	r3, #1
 800e914:	43db      	mvns	r3, r3
 800e916:	0fdb      	lsrs	r3, r3, #31
 800e918:	b2db      	uxtb	r3, r3
	}
 800e91a:	4618      	mov	r0, r3
 800e91c:	370c      	adds	r7, #12
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr

0800e926 <xSequenceGreaterThan>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a, uint32_t b )
	{
 800e926:	b480      	push	{r7}
 800e928:	b083      	sub	sp, #12
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
 800e92e:	6039      	str	r1, [r7, #0]
		/* Test if a > b */
		return ( ( a - b - 1UL ) & 0x80000000UL ) == 0UL;
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	1ad3      	subs	r3, r2, r3
 800e936:	3b01      	subs	r3, #1
 800e938:	43db      	mvns	r3, r3
 800e93a:	0fdb      	lsrs	r3, r3, #31
 800e93c:	b2db      	uxtb	r3, r3
	}
 800e93e:	4618      	mov	r0, r3
 800e940:	370c      	adds	r7, #12
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr

0800e94a <xSequenceGreaterThanOrEqual>:
#endif /* ipconfigUSE_TCP_WIN */

/*-----------------------------------------------------------*/
static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a, uint32_t b );
static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a, uint32_t b )
{
 800e94a:	b480      	push	{r7}
 800e94c:	b083      	sub	sp, #12
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
 800e952:	6039      	str	r1, [r7, #0]
	/* Test if a >= b */
	return ( ( a - b ) & 0x80000000UL ) == 0UL;
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	1ad3      	subs	r3, r2, r3
 800e95a:	43db      	mvns	r3, r3
 800e95c:	0fdb      	lsrs	r3, r3, #31
 800e95e:	b2db      	uxtb	r3, r3
}
 800e960:	4618      	mov	r0, r3
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <vListInsertFifo>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE void vListInsertFifo( List_t * const pxList, ListItem_t * const pxNewListItem );
	static portINLINE void vListInsertFifo( List_t * const pxList, ListItem_t * const pxNewListItem )
	{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	3308      	adds	r3, #8
 800e97a:	461a      	mov	r2, r3
 800e97c:	6839      	ldr	r1, [r7, #0]
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f000 f81f 	bl	800e9c2 <vListInsertGeneric>
	}
 800e984:	bf00      	nop
 800e986:	3708      	adds	r7, #8
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <vTCPTimerSet>:
#endif
/*-----------------------------------------------------------*/

static portINLINE void vTCPTimerSet( TCPTimer_t *pxTimer );
static portINLINE void vTCPTimerSet( TCPTimer_t *pxTimer )
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
	pxTimer->ulBorn = xTaskGetTickCount ( );
 800e994:	f7f8 ff5a 	bl	800784c <xTaskGetTickCount>
 800e998:	4602      	mov	r2, r0
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	601a      	str	r2, [r3, #0]
}
 800e99e:	bf00      	nop
 800e9a0:	3708      	adds	r7, #8
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <ulTimerGetAge>:
/*-----------------------------------------------------------*/

static portINLINE uint32_t ulTimerGetAge( TCPTimer_t *pxTimer );
static portINLINE uint32_t ulTimerGetAge( TCPTimer_t *pxTimer )
{
 800e9a6:	b580      	push	{r7, lr}
 800e9a8:	b082      	sub	sp, #8
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 800e9ae:	f7f8 ff4d 	bl	800784c <xTaskGetTickCount>
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	1ad3      	subs	r3, r2, r3
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3708      	adds	r7, #8
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <vListInsertGeneric>:
preceded by a prototype. Later this prototype will be located in list.h? */

extern void vListInsertGeneric( List_t * const pxList, ListItem_t * const pxNewListItem, MiniListItem_t * const pxWhere );

void vListInsertGeneric( List_t * const pxList, ListItem_t * const pxNewListItem, MiniListItem_t * const pxWhere )
{
 800e9c2:	b480      	push	{r7}
 800e9c4:	b085      	sub	sp, #20
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	60f8      	str	r0, [r7, #12]
 800e9ca:	60b9      	str	r1, [r7, #8]
 800e9cc:	607a      	str	r2, [r7, #4]
	/* Insert a new list item into pxList, it does not sort the list,
	but it puts the item just before xListEnd, so it will be the last item
	returned by listGET_HEAD_ENTRY() */
	pxNewListItem->pxNext = (struct xLIST_ITEM * configLIST_VOLATILE)pxWhere;
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	689a      	ldr	r2, [r3, #8]
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	609a      	str	r2, [r3, #8]
	pxWhere->pxPrevious->pxNext = pxNewListItem;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	689b      	ldr	r3, [r3, #8]
 800e9e0:	68ba      	ldr	r2, [r7, #8]
 800e9e2:	605a      	str	r2, [r3, #4]
	pxWhere->pxPrevious = pxNewListItem;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	68ba      	ldr	r2, [r7, #8]
 800e9e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	1c5a      	adds	r2, r3, #1
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	601a      	str	r2, [r3, #0]
}
 800e9fa:	bf00      	nop
 800e9fc:	3714      	adds	r7, #20
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea04:	4770      	bx	lr
	...

0800ea08 <prvCreateSectors>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvCreateSectors( void )
	{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
	BaseType_t xIndex, xReturn;

		/* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

		vListInitialise( &xSegmentList );
 800ea0e:	4824      	ldr	r0, [pc, #144]	; (800eaa0 <prvCreateSectors+0x98>)
 800ea10:	f7f7 f9f3 	bl	8005dfa <vListInitialise>
		xTCPSegments = ( TCPSegment_t * ) pvPortMallocLarge( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800ea14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ea18:	f7f7 fce2 	bl	80063e0 <pvPortMalloc>
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	4b21      	ldr	r3, [pc, #132]	; (800eaa4 <prvCreateSectors+0x9c>)
 800ea20:	601a      	str	r2, [r3, #0]

		if( xTCPSegments == NULL )
 800ea22:	4b20      	ldr	r3, [pc, #128]	; (800eaa4 <prvCreateSectors+0x9c>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d102      	bne.n	800ea30 <prvCreateSectors+0x28>
		{
			FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %lu failed\n",
				ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );

			xReturn = pdFAIL;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	603b      	str	r3, [r7, #0]
 800ea2e:	e032      	b.n	800ea96 <prvCreateSectors+0x8e>
		}
		else
		{
			/* Clear the allocated space. */
			memset( xTCPSegments, '\0', ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800ea30:	4b1c      	ldr	r3, [pc, #112]	; (800eaa4 <prvCreateSectors+0x9c>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ea38:	2100      	movs	r1, #0
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f002 f912 	bl	8010c64 <memset>

			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800ea40:	2300      	movs	r3, #0
 800ea42:	607b      	str	r3, [r7, #4]
 800ea44:	e022      	b.n	800ea8c <prvCreateSectors+0x84>
			{
				/* Could call vListInitialiseItem here but all data has been
				nulled already.  Set the owner to a segment descriptor. */
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xListItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 800ea46:	4b17      	ldr	r3, [pc, #92]	; (800eaa4 <prvCreateSectors+0x9c>)
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	019b      	lsls	r3, r3, #6
 800ea4e:	4413      	add	r3, r2
 800ea50:	4a14      	ldr	r2, [pc, #80]	; (800eaa4 <prvCreateSectors+0x9c>)
 800ea52:	6811      	ldr	r1, [r2, #0]
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	0192      	lsls	r2, r2, #6
 800ea58:	440a      	add	r2, r1
 800ea5a:	639a      	str	r2, [r3, #56]	; 0x38
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 800ea5c:	4b11      	ldr	r3, [pc, #68]	; (800eaa4 <prvCreateSectors+0x9c>)
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	019b      	lsls	r3, r3, #6
 800ea64:	4413      	add	r3, r2
 800ea66:	4a0f      	ldr	r2, [pc, #60]	; (800eaa4 <prvCreateSectors+0x9c>)
 800ea68:	6811      	ldr	r1, [r2, #0]
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	0192      	lsls	r2, r2, #6
 800ea6e:	440a      	add	r2, r1
 800ea70:	625a      	str	r2, [r3, #36]	; 0x24

				/* And add it to the pool of available segments */
				vListInsertFifo( &xSegmentList, &( xTCPSegments[xIndex].xListItem ) );
 800ea72:	4b0c      	ldr	r3, [pc, #48]	; (800eaa4 <prvCreateSectors+0x9c>)
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	019b      	lsls	r3, r3, #6
 800ea7a:	4413      	add	r3, r2
 800ea7c:	332c      	adds	r3, #44	; 0x2c
 800ea7e:	4619      	mov	r1, r3
 800ea80:	4807      	ldr	r0, [pc, #28]	; (800eaa0 <prvCreateSectors+0x98>)
 800ea82:	f7ff ff73 	bl	800e96c <vListInsertFifo>
			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	607b      	str	r3, [r7, #4]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2b3f      	cmp	r3, #63	; 0x3f
 800ea90:	ddd9      	ble.n	800ea46 <prvCreateSectors+0x3e>
			}

			xReturn = pdPASS;
 800ea92:	2301      	movs	r3, #1
 800ea94:	603b      	str	r3, [r7, #0]
		}

		return xReturn;
 800ea96:	683b      	ldr	r3, [r7, #0]
	}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	2000423c 	.word	0x2000423c
 800eaa4:	20004238 	.word	0x20004238

0800eaa8 <xTCPWindowRxFind>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxFind( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b087      	sub	sp, #28
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
	const ListItem_t *pxIterator;
	const MiniListItem_t* pxEnd;
	TCPSegment_t *pxSegment, *pxReturn = NULL;
 800eab2:	2300      	movs	r3, #0
 800eab4:	613b      	str	r3, [r7, #16]

		/* Find a segment with a given sequence number in the list of received
		segments. */

		pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xRxSegments );
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	33ac      	adds	r3, #172	; 0xac
 800eaba:	60fb      	str	r3, [r7, #12]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	685b      	ldr	r3, [r3, #4]
 800eac0:	617b      	str	r3, [r7, #20]
 800eac2:	e00d      	b.n	800eae0 <xTCPWindowRxFind+0x38>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	68db      	ldr	r3, [r3, #12]
 800eac8:	60bb      	str	r3, [r7, #8]

			if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	681a      	ldr	r2, [r3, #0]
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d102      	bne.n	800eada <xTCPWindowRxFind+0x32>
			{
				pxReturn = pxSegment;
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	613b      	str	r3, [r7, #16]
				break;
 800ead8:	e006      	b.n	800eae8 <xTCPWindowRxFind+0x40>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	617b      	str	r3, [r7, #20]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800eae0:	697a      	ldr	r2, [r7, #20]
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d1ed      	bne.n	800eac4 <xTCPWindowRxFind+0x1c>
			}
		}

		return pxReturn;
 800eae8:	693b      	ldr	r3, [r7, #16]
	}
 800eaea:	4618      	mov	r0, r3
 800eaec:	371c      	adds	r7, #28
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr
	...

0800eaf8 <xTCPWindowNew>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowNew( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, int32_t lCount, BaseType_t xIsForRx )
	{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b088      	sub	sp, #32
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
 800eb04:	603b      	str	r3, [r7, #0]
	TCPSegment_t *pxSegment;
	ListItem_t * pxItem;

		/* Allocate a new segment.  The socket will borrow all segments from a
		common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
		if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 800eb06:	4b2e      	ldr	r3, [pc, #184]	; (800ebc0 <xTCPWindowNew+0xc8>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d101      	bne.n	800eb12 <xTCPWindowNew+0x1a>
 800eb0e:	2301      	movs	r3, #1
 800eb10:	e000      	b.n	800eb14 <xTCPWindowNew+0x1c>
 800eb12:	2300      	movs	r3, #0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d002      	beq.n	800eb1e <xTCPWindowNew+0x26>
		{
			/* If the TCP-stack runs out of segments, you might consider
			increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
			FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", xIsForRx ? 'R' : 'T' ) );
			pxSegment = NULL;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	61fb      	str	r3, [r7, #28]
 800eb1c:	e04a      	b.n	800ebb4 <xTCPWindowNew+0xbc>
		}
		else
		{
			/* Pop the item at the head of the list.  Semaphore protection is
			not required as only the IP task will call these functions.  */
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 800eb1e:	4b28      	ldr	r3, [pc, #160]	; (800ebc0 <xTCPWindowNew+0xc8>)
 800eb20:	68db      	ldr	r3, [r3, #12]
 800eb22:	61bb      	str	r3, [r7, #24]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800eb24:	69bb      	ldr	r3, [r7, #24]
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	61fb      	str	r3, [r7, #28]

			configASSERT( pxItem != NULL );
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d109      	bne.n	800eb44 <xTCPWindowNew+0x4c>
 800eb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb34:	f383 8811 	msr	BASEPRI, r3
 800eb38:	f3bf 8f6f 	isb	sy
 800eb3c:	f3bf 8f4f 	dsb	sy
 800eb40:	617b      	str	r3, [r7, #20]
 800eb42:	e7fe      	b.n	800eb42 <xTCPWindowNew+0x4a>
			configASSERT( pxSegment != NULL );
 800eb44:	69fb      	ldr	r3, [r7, #28]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d109      	bne.n	800eb5e <xTCPWindowNew+0x66>
 800eb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb4e:	f383 8811 	msr	BASEPRI, r3
 800eb52:	f3bf 8f6f 	isb	sy
 800eb56:	f3bf 8f4f 	dsb	sy
 800eb5a:	613b      	str	r3, [r7, #16]
 800eb5c:	e7fe      	b.n	800eb5c <xTCPWindowNew+0x64>

			/* Remove the item from xSegmentList. */
			uxListRemove( pxItem );
 800eb5e:	69b8      	ldr	r0, [r7, #24]
 800eb60:	f7f7 f9d5 	bl	8005f0e <uxListRemove>

			/* Add it to either the connections' Rx or Tx queue. */
			vListInsertFifo( xIsForRx ? &pxWindow->xRxSegments : &pxWindow->xTxSegments, pxItem );
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d002      	beq.n	800eb70 <xTCPWindowNew+0x78>
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	33a4      	adds	r3, #164	; 0xa4
 800eb6e:	e001      	b.n	800eb74 <xTCPWindowNew+0x7c>
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	3390      	adds	r3, #144	; 0x90
 800eb74:	69b9      	ldr	r1, [r7, #24]
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7ff fef8 	bl	800e96c <vListInsertFifo>

			/* And set the segment's timer to zero */
			vTCPTimerSet( &pxSegment->xTransmitTimer );
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	3310      	adds	r3, #16
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7ff ff03 	bl	800e98c <vTCPTimerSet>

			pxSegment->u.ulFlags = 0;
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	615a      	str	r2, [r3, #20]
			pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 );
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	bf14      	ite	ne
 800eb92:	2301      	movne	r3, #1
 800eb94:	2300      	moveq	r3, #0
 800eb96:	b2d9      	uxtb	r1, r3
 800eb98:	69fa      	ldr	r2, [r7, #28]
 800eb9a:	7d93      	ldrb	r3, [r2, #22]
 800eb9c:	f361 0382 	bfi	r3, r1, #2, #1
 800eba0:	7593      	strb	r3, [r2, #22]
			pxSegment->lMaxLength = lCount;
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	687a      	ldr	r2, [r7, #4]
 800eba6:	605a      	str	r2, [r3, #4]
			pxSegment->lDataLength = lCount;
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	609a      	str	r2, [r3, #8]
			pxSegment->ulSequenceNumber = ulSequenceNumber;
 800ebae:	69fb      	ldr	r3, [r7, #28]
 800ebb0:	68ba      	ldr	r2, [r7, #8]
 800ebb2:	601a      	str	r2, [r3, #0]
				}
			}
			#endif /* ipconfigHAS_DEBUG_PRINTF */
		}

		return pxSegment;
 800ebb4:	69fb      	ldr	r3, [r7, #28]
	}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3720      	adds	r7, #32
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	2000423c 	.word	0x2000423c

0800ebc4 <xTCPWindowRxEmpty>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowRxEmpty( TCPWindow_t *pxWindow )
	{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
		/* When the peer has a close request (FIN flag), the driver will check
		if there are missing packets in the Rx-queue.  It will accept the
		closure of the connection if both conditions are true:
		  - the Rx-queue is empty
		  - the highest Rx sequence number has been ACK'ed */
		if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d002      	beq.n	800ebdc <xTCPWindowRxEmpty+0x18>
		{
			/* Rx data has been stored while earlier packets were missing. */
			xReturn = pdFALSE;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	60fb      	str	r3, [r7, #12]
 800ebda:	e00f      	b.n	800ebfc <xTCPWindowRxEmpty+0x38>
		}
		else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	691a      	ldr	r2, [r3, #16]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	699b      	ldr	r3, [r3, #24]
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	4610      	mov	r0, r2
 800ebe8:	f7ff feaf 	bl	800e94a <xSequenceGreaterThanOrEqual>
 800ebec:	4603      	mov	r3, r0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d002      	beq.n	800ebf8 <xTCPWindowRxEmpty+0x34>
		{
			/* No Rx packets are being stored and the highest sequence number
			that has been received has been ACKed. */
			xReturn = pdTRUE;
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	60fb      	str	r3, [r7, #12]
 800ebf6:	e001      	b.n	800ebfc <xTCPWindowRxEmpty+0x38>
		else
		{
			FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
				( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
				( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
			xReturn = pdFALSE;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
	}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3710      	adds	r7, #16
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <xTCPWindowGetHead>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowGetHead( List_t *pxList )
	{
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b084      	sub	sp, #16
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
	TCPSegment_t *pxSegment;
	ListItem_t * pxItem;

		/* Detaches and returns the head of a queue. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d101      	bne.n	800ec1a <xTCPWindowGetHead+0x14>
 800ec16:	2301      	movs	r3, #1
 800ec18:	e000      	b.n	800ec1c <xTCPWindowGetHead+0x16>
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d002      	beq.n	800ec26 <xTCPWindowGetHead+0x20>
		{
			pxSegment = NULL;
 800ec20:	2300      	movs	r3, #0
 800ec22:	60fb      	str	r3, [r7, #12]
 800ec24:	e008      	b.n	800ec38 <xTCPWindowGetHead+0x32>
		}
		else
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	68db      	ldr	r3, [r3, #12]
 800ec2a:	60bb      	str	r3, [r7, #8]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	68db      	ldr	r3, [r3, #12]
 800ec30:	60fb      	str	r3, [r7, #12]

			uxListRemove( pxItem );
 800ec32:	68b8      	ldr	r0, [r7, #8]
 800ec34:	f7f7 f96b 	bl	8005f0e <uxListRemove>
		}

		return pxSegment;
 800ec38:	68fb      	ldr	r3, [r7, #12]
	}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3710      	adds	r7, #16
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <xTCPWindowPeekHead>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowPeekHead( List_t *pxList )
	{
 800ec42:	b480      	push	{r7}
 800ec44:	b085      	sub	sp, #20
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
	ListItem_t *pxItem;
	TCPSegment_t *pxReturn;

		/* Returns the head of a queue but it won't be detached. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d101      	bne.n	800ec56 <xTCPWindowPeekHead+0x14>
 800ec52:	2301      	movs	r3, #1
 800ec54:	e000      	b.n	800ec58 <xTCPWindowPeekHead+0x16>
 800ec56:	2300      	movs	r3, #0
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d002      	beq.n	800ec62 <xTCPWindowPeekHead+0x20>
		{
			pxReturn = NULL;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	60fb      	str	r3, [r7, #12]
 800ec60:	e005      	b.n	800ec6e <xTCPWindowPeekHead+0x2c>
		}
		else
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	68db      	ldr	r3, [r3, #12]
 800ec66:	60bb      	str	r3, [r7, #8]
			pxReturn = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	60fb      	str	r3, [r7, #12]
		}

		return pxReturn;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
	}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3714      	adds	r7, #20
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <vTCPWindowFree>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static void vTCPWindowFree( TCPSegment_t *pxSegment )
	{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
		/*  Free entry pxSegment because it's not used any more.  The ownership
		will be passed back to the segment pool.

		Unlink it from one of the queues, if any. */
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d004      	beq.n	800ec96 <vTCPWindowFree+0x1a>
		{
			uxListRemove( &( pxSegment->xQueueItem ) );
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	3318      	adds	r3, #24
 800ec90:	4618      	mov	r0, r3
 800ec92:	f7f7 f93c 	bl	8005f0e <uxListRemove>
		}

		pxSegment->ulSequenceNumber = 0u;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	601a      	str	r2, [r3, #0]
		pxSegment->lDataLength = 0l;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	609a      	str	r2, [r3, #8]
		pxSegment->u.ulFlags = 0u;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2200      	movs	r2, #0
 800eca6:	615a      	str	r2, [r3, #20]

		/* Take it out of xRxSegments/xTxSegments */
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xListItem ) ) != NULL )
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d004      	beq.n	800ecba <vTCPWindowFree+0x3e>
		{
			uxListRemove( &( pxSegment->xListItem ) );
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	332c      	adds	r3, #44	; 0x2c
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7f7 f92a 	bl	8005f0e <uxListRemove>
		}

		/* Return it to xSegmentList */
		vListInsertFifo( &xSegmentList, &( pxSegment->xListItem ) );
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	332c      	adds	r3, #44	; 0x2c
 800ecbe:	4619      	mov	r1, r3
 800ecc0:	4803      	ldr	r0, [pc, #12]	; (800ecd0 <vTCPWindowFree+0x54>)
 800ecc2:	f7ff fe53 	bl	800e96c <vListInsertFifo>
	}
 800ecc6:	bf00      	nop
 800ecc8:	3708      	adds	r7, #8
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	2000423c 	.word	0x2000423c

0800ecd4 <vTCPWindowDestroy>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	void vTCPWindowDestroy( TCPWindow_t *pxWindow )
	{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b086      	sub	sp, #24
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]

		/*  Destroy a window.  A TCP window doesn't serve any more.  Return all
		owned segments to the pool.  In order to save code, it will make 2 rounds,
		one to remove the segments from xRxSegments, and a second round to clear
		xTxSegments*/
		for( xRound = 0; xRound < 2; xRound++ )
 800ecdc:	2300      	movs	r3, #0
 800ecde:	613b      	str	r3, [r7, #16]
 800ece0:	e022      	b.n	800ed28 <vTCPWindowDestroy+0x54>
		{
			if( xRound != 0 )
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d003      	beq.n	800ecf0 <vTCPWindowDestroy+0x1c>
			{
				pxSegments = &( pxWindow->xRxSegments );
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	33a4      	adds	r3, #164	; 0xa4
 800ecec:	617b      	str	r3, [r7, #20]
 800ecee:	e002      	b.n	800ecf6 <vTCPWindowDestroy+0x22>
			}
			else
			{
				pxSegments = &( pxWindow->xTxSegments );
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	3390      	adds	r3, #144	; 0x90
 800ecf4:	617b      	str	r3, [r7, #20]
			}

			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	689b      	ldr	r3, [r3, #8]
 800ecfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecfe:	d101      	bne.n	800ed04 <vTCPWindowDestroy+0x30>
 800ed00:	2301      	movs	r3, #1
 800ed02:	e000      	b.n	800ed06 <vTCPWindowDestroy+0x32>
 800ed04:	2300      	movs	r3, #0
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00b      	beq.n	800ed22 <vTCPWindowDestroy+0x4e>
			{
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800ed0a:	e006      	b.n	800ed1a <vTCPWindowDestroy+0x46>
				{
					pxSegment = ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments );
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	68db      	ldr	r3, [r3, #12]
 800ed10:	68db      	ldr	r3, [r3, #12]
 800ed12:	60fb      	str	r3, [r7, #12]
					vTCPWindowFree( pxSegment );
 800ed14:	68f8      	ldr	r0, [r7, #12]
 800ed16:	f7ff ffb1 	bl	800ec7c <vTCPWindowFree>
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d1f4      	bne.n	800ed0c <vTCPWindowDestroy+0x38>
		for( xRound = 0; xRound < 2; xRound++ )
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	3301      	adds	r3, #1
 800ed26:	613b      	str	r3, [r7, #16]
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	ddd9      	ble.n	800ece2 <vTCPWindowDestroy+0xe>
				}
			}
		}
	}
 800ed2e:	bf00      	nop
 800ed30:	3718      	adds	r7, #24
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
	...

0800ed38 <vTCPWindowCreate>:
#endif /* ipconfigUSE_TCP_WIN == 1 */
/*-----------------------------------------------------------*/

void vTCPWindowCreate( TCPWindow_t *pxWindow, uint32_t ulRxWindowLength,
	uint32_t ulTxWindowLength, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS )
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	60f8      	str	r0, [r7, #12]
 800ed40:	60b9      	str	r1, [r7, #8]
 800ed42:	607a      	str	r2, [r7, #4]
 800ed44:	603b      	str	r3, [r7, #0]
	/* Create and initialize a window. */

	#if( ipconfigUSE_TCP_WIN == 1 )
	{
		if( xTCPSegments == NULL )
 800ed46:	4b17      	ldr	r3, [pc, #92]	; (800eda4 <vTCPWindowCreate+0x6c>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d101      	bne.n	800ed52 <vTCPWindowCreate+0x1a>
		{
			prvCreateSectors();
 800ed4e:	f7ff fe5b 	bl	800ea08 <prvCreateSectors>
		}

		vListInitialise( &pxWindow->xTxSegments );
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	3390      	adds	r3, #144	; 0x90
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7f7 f84f 	bl	8005dfa <vListInitialise>
		vListInitialise( &pxWindow->xRxSegments );
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	33a4      	adds	r3, #164	; 0xa4
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7f7 f84a 	bl	8005dfa <vListInitialise>

		vListInitialise( &pxWindow->xPriorityQueue );			/* Priority queue: segments which must be sent immediately */
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	3340      	adds	r3, #64	; 0x40
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7f7 f845 	bl	8005dfa <vListInitialise>
		vListInitialise( &pxWindow->xTxQueue   );			/* Transmit queue: segments queued for transmission */
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	3354      	adds	r3, #84	; 0x54
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7f7 f840 	bl	8005dfa <vListInitialise>
		vListInitialise( &pxWindow->xWaitQueue );			/* Waiting queue:  outstanding segments */
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	3368      	adds	r3, #104	; 0x68
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7f7 f83b 	bl	8005dfa <vListInitialise>
	{
		FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
			ulRxWindowLength, ulTxWindowLength ) );
	}

	pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	68ba      	ldr	r2, [r7, #8]
 800ed88:	605a      	str	r2, [r3, #4]
	pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	609a      	str	r2, [r3, #8]

	vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	69ba      	ldr	r2, [r7, #24]
 800ed94:	6839      	ldr	r1, [r7, #0]
 800ed96:	68f8      	ldr	r0, [r7, #12]
 800ed98:	f000 f806 	bl	800eda8 <vTCPWindowInit>
}
 800ed9c:	bf00      	nop
 800ed9e:	3710      	adds	r7, #16
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}
 800eda4:	20004238 	.word	0x20004238

0800eda8 <vTCPWindowInit>:
/*-----------------------------------------------------------*/

void vTCPWindowInit( TCPWindow_t *pxWindow, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS )
{
 800eda8:	b480      	push	{r7}
 800edaa:	b087      	sub	sp, #28
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	603b      	str	r3, [r7, #0]
const int32_t l500ms = 500;
 800edb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800edba:	617b      	str	r3, [r7, #20]

	pxWindow->u.ulFlags = 0ul;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2200      	movs	r2, #0
 800edc0:	601a      	str	r2, [r3, #0]
	pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 800edc2:	68fa      	ldr	r2, [r7, #12]
 800edc4:	7813      	ldrb	r3, [r2, #0]
 800edc6:	f043 0301 	orr.w	r3, r3, #1
 800edca:	7013      	strb	r3, [r2, #0]

	if( ulMSS != 0ul )
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d024      	beq.n	800ee1c <vTCPWindowInit+0x74>
	{
		if( pxWindow->usMSSInit != 0u )
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d004      	beq.n	800ede6 <vTCPWindowInit+0x3e>
		{
			pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	b29a      	uxth	r2, r3
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		}

		if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0u ) )
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800edec:	461a      	mov	r2, r3
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d804      	bhi.n	800edfe <vTCPWindowInit+0x56>
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d10e      	bne.n	800ee1c <vTCPWindowInit+0x74>
		{
			pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	685a      	ldr	r2, [r3, #4]
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee08:	683a      	ldr	r2, [r7, #0]
 800ee0a:	fb02 f203 	mul.w	r2, r2, r3
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	605a      	str	r2, [r3, #4]
			pxWindow->usMSS = ( uint16_t ) ulMSS;
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	b29a      	uxth	r2, r3
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
	}
	#endif /* ipconfigUSE_TCP_WIN == 1 */

	/*Start with a timeout of 2 * 500 ms (1 sec). */
	pxWindow->lSRTT = l500ms;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	697a      	ldr	r2, [r7, #20]
 800ee20:	639a      	str	r2, [r3, #56]	; 0x38

	/* Just for logging, to print relative sequence numbers. */
	pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	68ba      	ldr	r2, [r7, #8]
 800ee26:	60da      	str	r2, [r3, #12]

	/* The segment asked for in the next transmission. */
	pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	68ba      	ldr	r2, [r7, #8]
 800ee2c:	611a      	str	r2, [r3, #16]

	/* The right-hand side of the receive window. */
	pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	68ba      	ldr	r2, [r7, #8]
 800ee32:	619a      	str	r2, [r3, #24]

	pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	61da      	str	r2, [r3, #28]

	/* The segment asked for in next transmission. */
	pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	621a      	str	r2, [r3, #32]

	/* The sequence number given to the next outgoing byte to be added is
	maintained by lTCPWindowTxAdd(). */
	pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	635a      	str	r2, [r3, #52]	; 0x34

	/* The right-hand side of the transmit window. */
	pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	687a      	ldr	r2, [r7, #4]
 800ee4a:	629a      	str	r2, [r3, #40]	; 0x28
	pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ee52:	bf00      	nop
 800ee54:	371c      	adds	r7, #28
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr

0800ee5e <xTCPWindowRxConfirm>:
 *=============================================================================*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxConfirm( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength )
	{
 800ee5e:	b580      	push	{r7, lr}
 800ee60:	b08a      	sub	sp, #40	; 0x28
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	60f8      	str	r0, [r7, #12]
 800ee66:	60b9      	str	r1, [r7, #8]
 800ee68:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxBest = NULL;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	627b      	str	r3, [r7, #36]	; 0x24
	const ListItem_t *pxIterator;
	uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 800ee6e:	68ba      	ldr	r2, [r7, #8]
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	4413      	add	r3, r2
 800ee74:	61fb      	str	r3, [r7, #28]
	const MiniListItem_t* pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &pxWindow->xRxSegments );
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	33ac      	adds	r3, #172	; 0xac
 800ee7a:	61bb      	str	r3, [r7, #24]
		and (ulSequenceNumber+ulLength).  Normally none will be found, because
		the next RX segment should have a sequence number equal to
		'(ulSequenceNumber+ulLength)'. */

		/* Iterate through all RX segments that are stored: */
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	623b      	str	r3, [r7, #32]
 800ee82:	e027      	b.n	800eed4 <xTCPWindowRxConfirm+0x76>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800ee84:	6a3b      	ldr	r3, [r7, #32]
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	617b      	str	r3, [r7, #20]
			/* And see if there is a segment for which:
			'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
			If there are more matching segments, the one with the lowest sequence number
			shall be taken */
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	68b9      	ldr	r1, [r7, #8]
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7ff fd5a 	bl	800e94a <xSequenceGreaterThanOrEqual>
 800ee96:	4603      	mov	r3, r0
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d018      	beq.n	800eece <xTCPWindowRxConfirm+0x70>
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	69f9      	ldr	r1, [r7, #28]
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7ff fd2d 	bl	800e902 <xSequenceLessThan>
 800eea8:	4603      	mov	r3, r0
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00f      	beq.n	800eece <xTCPWindowRxConfirm+0x70>
			{
				if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 800eeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d00a      	beq.n	800eeca <xTCPWindowRxConfirm+0x6c>
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	681a      	ldr	r2, [r3, #0]
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4619      	mov	r1, r3
 800eebe:	4610      	mov	r0, r2
 800eec0:	f7ff fd1f 	bl	800e902 <xSequenceLessThan>
 800eec4:	4603      	mov	r3, r0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d001      	beq.n	800eece <xTCPWindowRxConfirm+0x70>
				{
					pxBest = pxSegment;
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	627b      	str	r3, [r7, #36]	; 0x24
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800eece:	6a3b      	ldr	r3, [r7, #32]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	623b      	str	r3, [r7, #32]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800eed4:	6a3a      	ldr	r2, [r7, #32]
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d1d3      	bne.n	800ee84 <xTCPWindowRxConfirm+0x26>
				}
			}
		}

		if( ( pxBest != NULL ) &&
 800eedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d003      	beq.n	800eeea <xTCPWindowRxConfirm+0x8c>
			( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 800eee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee4:	681a      	ldr	r2, [r3, #0]
		if( ( pxBest != NULL ) &&
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	429a      	cmp	r2, r3
				pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
				pxBest->lDataLength,
				pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) );
		}

		return pxBest;
 800eeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3728      	adds	r7, #40	; 0x28
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <lTCPWindowRxCheck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	int32_t lTCPWindowRxCheck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength, uint32_t ulSpace )
	{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b08a      	sub	sp, #40	; 0x28
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	607a      	str	r2, [r7, #4]
 800ef00:	603b      	str	r3, [r7, #0]
		or there is not enough space.

		As a side-effect, pxWindow->ulUserDataLength will get set to non-zero,
		if more Rx data may be passed to the user after this packet. */

		ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	691b      	ldr	r3, [r3, #16]
 800ef06:	627b      	str	r3, [r7, #36]	; 0x24

		/* For Selective Ack (SACK), used when out-of-sequence data come in. */
		pxWindow->ucOptionLength = 0u;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Non-zero if TCP-windows contains data which must be popped. */
		pxWindow->ulUserDataLength = 0ul;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	2200      	movs	r2, #0
 800ef14:	631a      	str	r2, [r3, #48]	; 0x30

		if( ulCurrentSequenceNumber == ulSequenceNumber )
 800ef16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d145      	bne.n	800efaa <lTCPWindowRxCheck+0xb6>
		{
			/* This is the packet with the lowest sequence number we're waiting
			for.  It can be passed directly to the rx stream. */
			if( ulLength > ulSpace )
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d903      	bls.n	800ef2e <lTCPWindowRxCheck+0x3a>
			{
				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
				lReturn = -1;
 800ef26:	f04f 33ff 	mov.w	r3, #4294967295
 800ef2a:	61fb      	str	r3, [r7, #28]
 800ef2c:	e0b9      	b.n	800f0a2 <lTCPWindowRxCheck+0x1ae>
			}
			else
			{
				ulCurrentSequenceNumber += ulLength;
 800ef2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	4413      	add	r3, r2
 800ef34:	627b      	str	r3, [r7, #36]	; 0x24

				if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0 )
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d02e      	beq.n	800ef9e <lTCPWindowRxCheck+0xaa>
				{
					ulSavedSequenceNumber = ulCurrentSequenceNumber;
 800ef40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef42:	61bb      	str	r3, [r7, #24]

					/* See if (part of) this segment has been stored already,
					but this rarely happens. */
					pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 800ef44:	687a      	ldr	r2, [r7, #4]
 800ef46:	68b9      	ldr	r1, [r7, #8]
 800ef48:	68f8      	ldr	r0, [r7, #12]
 800ef4a:	f7ff ff88 	bl	800ee5e <xTCPWindowRxConfirm>
 800ef4e:	6178      	str	r0, [r7, #20]
					if( pxFound != NULL )
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d012      	beq.n	800ef7c <lTCPWindowRxCheck+0x88>
					{
						ulCurrentSequenceNumber = pxFound->ulSequenceNumber + ( ( uint32_t ) pxFound->lDataLength );
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	697a      	ldr	r2, [r7, #20]
 800ef5c:	6892      	ldr	r2, [r2, #8]
 800ef5e:	4413      	add	r3, r2
 800ef60:	627b      	str	r3, [r7, #36]	; 0x24

						/* Remove it because it will be passed to user directly. */
						vTCPWindowFree( pxFound );
 800ef62:	6978      	ldr	r0, [r7, #20]
 800ef64:	f7ff fe8a 	bl	800ec7c <vTCPWindowFree>
					}

					/*  Check for following segments that are already in the
					queue and increment ulCurrentSequenceNumber. */
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
 800ef68:	e008      	b.n	800ef7c <lTCPWindowRxCheck+0x88>
					{
						ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	689b      	ldr	r3, [r3, #8]
 800ef6e:	461a      	mov	r2, r3
 800ef70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef72:	4413      	add	r3, r2
 800ef74:	627b      	str	r3, [r7, #36]	; 0x24

						/* As all packet below this one have been passed to the
						user it can be discarded. */
						vTCPWindowFree( pxFound );
 800ef76:	6978      	ldr	r0, [r7, #20]
 800ef78:	f7ff fe80 	bl	800ec7c <vTCPWindowFree>
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
 800ef7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef7e:	68f8      	ldr	r0, [r7, #12]
 800ef80:	f7ff fd92 	bl	800eaa8 <xTCPWindowRxFind>
 800ef84:	6178      	str	r0, [r7, #20]
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d1ee      	bne.n	800ef6a <lTCPWindowRxCheck+0x76>
					}

					if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 800ef8c:	69ba      	ldr	r2, [r7, #24]
 800ef8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d004      	beq.n	800ef9e <lTCPWindowRxCheck+0xaa>
					{
						/*  After the current data-package, there is more data
						to be popped. */
						pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 800ef94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	1ad2      	subs	r2, r2, r3
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	631a      	str	r2, [r3, #48]	; 0x30
								listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
						}
					}
				}

				pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efa2:	611a      	str	r2, [r3, #16]

				/* Packet was expected, may be passed directly to the socket
				buffer or application.  Store the packet at offset 0. */
				lReturn = 0;
 800efa4:	2300      	movs	r3, #0
 800efa6:	61fb      	str	r3, [r7, #28]
 800efa8:	e07b      	b.n	800f0a2 <lTCPWindowRxCheck+0x1ae>
			}
		}
		else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	1c5a      	adds	r2, r3, #1
 800efae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d103      	bne.n	800efbc <lTCPWindowRxCheck+0xc8>
		{
			/* Looks like a TCP keep-alive message.  Do not accept/store Rx data
			ulUserDataLength = 0. Not packet out-of-sync.  Just reply to it. */
			lReturn = -1;
 800efb4:	f04f 33ff 	mov.w	r3, #4294967295
 800efb8:	61fb      	str	r3, [r7, #28]
 800efba:	e072      	b.n	800f0a2 <lTCPWindowRxCheck+0x1ae>
			/* The packet is not the one expected.  See if it falls within the Rx
			window so it can be stored. */

			/*  An "out-of-sequence" segment was received, must have missed one.
			Prepare a SACK (Selective ACK). */
			ulLast = ulSequenceNumber + ulLength;
 800efbc:	68ba      	ldr	r2, [r7, #8]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	4413      	add	r3, r2
 800efc2:	623b      	str	r3, [r7, #32]
			lDistance = ( int32_t ) ( ulLast - ulCurrentSequenceNumber );
 800efc4:	6a3a      	ldr	r2, [r7, #32]
 800efc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc8:	1ad3      	subs	r3, r2, r3
 800efca:	613b      	str	r3, [r7, #16]

			if( lDistance <= 0 )
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	dc03      	bgt.n	800efda <lTCPWindowRxCheck+0xe6>
			{
				/* An earlier has been received, must be a retransmission of a
				packet that has been accepted already.  No need to send out a
				Selective ACK (SACK). */
				lReturn = -1;
 800efd2:	f04f 33ff 	mov.w	r3, #4294967295
 800efd6:	61fb      	str	r3, [r7, #28]
 800efd8:	e063      	b.n	800f0a2 <lTCPWindowRxCheck+0x1ae>
			}
			else if( lDistance > ( int32_t ) ulSpace )
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	693a      	ldr	r2, [r7, #16]
 800efde:	429a      	cmp	r2, r3
 800efe0:	dd09      	ble.n	800eff6 <lTCPWindowRxCheck+0x102>
			{
				/* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
				sequence number of this packet is too far ahead, ignore it. */
				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
				lReturn = -1;
 800efe2:	f04f 33ff 	mov.w	r3, #4294967295
 800efe6:	61fb      	str	r3, [r7, #28]
 800efe8:	e05b      	b.n	800f0a2 <lTCPWindowRxCheck+0x1ae>
				 * This is useful because subsequent packets will be SACK'd with
				 * single one message
				 */
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
				{
					ulLast += ( uint32_t ) pxFound->lDataLength;
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	689b      	ldr	r3, [r3, #8]
 800efee:	461a      	mov	r2, r3
 800eff0:	6a3b      	ldr	r3, [r7, #32]
 800eff2:	4413      	add	r3, r2
 800eff4:	623b      	str	r3, [r7, #32]
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
 800eff6:	6a39      	ldr	r1, [r7, #32]
 800eff8:	68f8      	ldr	r0, [r7, #12]
 800effa:	f7ff fd55 	bl	800eaa8 <xTCPWindowRxFind>
 800effe:	6178      	str	r0, [r7, #20]
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d1f1      	bne.n	800efea <lTCPWindowRxCheck+0xf6>
						ulLast - pxWindow->rx.ulFirstSequenceNumber ) );
				}

				/* Now prepare the SACK message.
				Code OPTION_CODE_SINGLE_SACK already in network byte order. */
				pxWindow->ulOptionsData[0] = OPTION_CODE_SINGLE_SACK;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	4a28      	ldr	r2, [pc, #160]	; (800f0ac <lTCPWindowRxCheck+0x1b8>)
 800f00a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				/* First sequence number that we received. */
				pxWindow->ulOptionsData[1] = FreeRTOS_htonl( ulSequenceNumber );
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	061a      	lsls	r2, r3, #24
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	021b      	lsls	r3, r3, #8
 800f016:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f01a:	431a      	orrs	r2, r3
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	0a1b      	lsrs	r3, r3, #8
 800f020:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f024:	431a      	orrs	r2, r3
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	0e1b      	lsrs	r3, r3, #24
 800f02a:	431a      	orrs	r2, r3
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

				/* Last + 1 */
				pxWindow->ulOptionsData[2] = FreeRTOS_htonl( ulLast );
 800f032:	6a3b      	ldr	r3, [r7, #32]
 800f034:	061a      	lsls	r2, r3, #24
 800f036:	6a3b      	ldr	r3, [r7, #32]
 800f038:	021b      	lsls	r3, r3, #8
 800f03a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f03e:	431a      	orrs	r2, r3
 800f040:	6a3b      	ldr	r3, [r7, #32]
 800f042:	0a1b      	lsrs	r3, r3, #8
 800f044:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f048:	431a      	orrs	r2, r3
 800f04a:	6a3b      	ldr	r3, [r7, #32]
 800f04c:	0e1b      	lsrs	r3, r3, #24
 800f04e:	431a      	orrs	r2, r3
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				/* Which make 12 (3*4) option bytes. */
				pxWindow->ucOptionLength = 3 * sizeof( pxWindow->ulOptionsData[ 0 ] );
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	220c      	movs	r2, #12
 800f05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 800f05e:	68b9      	ldr	r1, [r7, #8]
 800f060:	68f8      	ldr	r0, [r7, #12]
 800f062:	f7ff fd21 	bl	800eaa8 <xTCPWindowRxFind>
 800f066:	6178      	str	r0, [r7, #20]

				if( pxFound != NULL )
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d003      	beq.n	800f076 <lTCPWindowRxCheck+0x182>
				{
					/* This out-of-sequence packet has been received for a
					second time.  It is already stored but do send a SACK
					again. */
					lReturn = -1;
 800f06e:	f04f 33ff 	mov.w	r3, #4294967295
 800f072:	61fb      	str	r3, [r7, #28]
 800f074:	e015      	b.n	800f0a2 <lTCPWindowRxCheck+0x1ae>
				}
				else
				{
					pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	2301      	movs	r3, #1
 800f07a:	68b9      	ldr	r1, [r7, #8]
 800f07c:	68f8      	ldr	r0, [r7, #12]
 800f07e:	f7ff fd3b 	bl	800eaf8 <xTCPWindowNew>
 800f082:	6178      	str	r0, [r7, #20]

					if( pxFound == NULL )
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d107      	bne.n	800f09a <lTCPWindowRxCheck+0x1a6>
					{
						/* Can not send a SACK, because the segment cannot be
						stored. */
						pxWindow->ucOptionLength = 0u;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2200      	movs	r2, #0
 800f08e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

						/* Needs to be stored but there is no segment
						available. */
						lReturn = -1;
 800f092:	f04f 33ff 	mov.w	r3, #4294967295
 800f096:	61fb      	str	r3, [r7, #28]
 800f098:	e003      	b.n	800f0a2 <lTCPWindowRxCheck+0x1ae>
							FreeRTOS_flush_logging( );
						}

						/* Return a positive value.  The packet may be accepted
						and stored but an earlier packet is still missing. */
						lReturn = ( int32_t ) ( ulSequenceNumber - ulCurrentSequenceNumber );
 800f09a:	68ba      	ldr	r2, [r7, #8]
 800f09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09e:	1ad3      	subs	r3, r2, r3
 800f0a0:	61fb      	str	r3, [r7, #28]
					}
				}
			}
		}

		return lReturn;
 800f0a2:	69fb      	ldr	r3, [r7, #28]
	}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3728      	adds	r7, #40	; 0x28
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	0a050101 	.word	0x0a050101

0800f0b0 <lTCPIncrementTxPosition>:
 *=============================================================================*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static int32_t lTCPIncrementTxPosition( int32_t lPosition, int32_t lMax, int32_t lCount )
	{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b085      	sub	sp, #20
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	60b9      	str	r1, [r7, #8]
 800f0ba:	607a      	str	r2, [r7, #4]
		/* +TCP stores data in circular buffers.  Calculate the next position to
		store. */
		lPosition += lCount;
 800f0bc:	68fa      	ldr	r2, [r7, #12]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4413      	add	r3, r2
 800f0c2:	60fb      	str	r3, [r7, #12]
		if( lPosition >= lMax )
 800f0c4:	68fa      	ldr	r2, [r7, #12]
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	db03      	blt.n	800f0d4 <lTCPIncrementTxPosition+0x24>
		{
			lPosition -= lMax;
 800f0cc:	68fa      	ldr	r2, [r7, #12]
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	1ad3      	subs	r3, r2, r3
 800f0d2:	60fb      	str	r3, [r7, #12]
		}

		return lPosition;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
	}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3714      	adds	r7, #20
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr
	...

0800f0e4 <lTCPWindowTxAdd>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	int32_t lTCPWindowTxAdd( TCPWindow_t *pxWindow, uint32_t ulLength, int32_t lPosition, int32_t lMax )
	{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b088      	sub	sp, #32
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	60f8      	str	r0, [r7, #12]
 800f0ec:	60b9      	str	r1, [r7, #8]
 800f0ee:	607a      	str	r2, [r7, #4]
 800f0f0:	603b      	str	r3, [r7, #0]
	int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	61fb      	str	r3, [r7, #28]
	int32_t lDone = 0;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	61bb      	str	r3, [r7, #24]
	TCPSegment_t *pxSegment = pxWindow->pxHeadSegment;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0fe:	617b      	str	r3, [r7, #20]

		/* Puts a message in the Tx-window (after buffer size has been
		verified). */
		if( pxSegment != NULL )
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	2b00      	cmp	r3, #0
 800f104:	f000 8096 	beq.w	800f234 <lTCPWindowTxAdd+0x150>
		{
			if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	689a      	ldr	r2, [r3, #8]
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	685b      	ldr	r3, [r3, #4]
 800f110:	429a      	cmp	r2, r3
 800f112:	f280 808f 	bge.w	800f234 <lTCPWindowTxAdd+0x150>
			{
				if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	7d9b      	ldrb	r3, [r3, #22]
 800f11a:	f003 0301 	and.w	r3, r3, #1
 800f11e:	b2db      	uxtb	r3, r3
 800f120:	2b00      	cmp	r3, #0
 800f122:	f040 8087 	bne.w	800f234 <lTCPWindowTxAdd+0x150>
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	689b      	ldr	r3, [r3, #8]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	f000 8082 	beq.w	800f234 <lTCPWindowTxAdd+0x150>
				{
					/* Adding data to a segment that was already in the TX queue.  It
					will be filled-up to a maximum of MSS (maximum segment size). */
					lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	685a      	ldr	r2, [r3, #4]
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	689b      	ldr	r3, [r3, #8]
 800f138:	1ad3      	subs	r3, r2, r3
 800f13a:	4619      	mov	r1, r3
 800f13c:	69f8      	ldr	r0, [r7, #28]
 800f13e:	f7ff fbaf 	bl	800e8a0 <FreeRTOS_min_int32>
 800f142:	6138      	str	r0, [r7, #16]

					pxSegment->lDataLength += lToWrite;
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	689a      	ldr	r2, [r3, #8]
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	441a      	add	r2, r3
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	609a      	str	r2, [r3, #8]

					if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	689a      	ldr	r2, [r3, #8]
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	429a      	cmp	r2, r3
 800f15a:	db02      	blt.n	800f162 <lTCPWindowTxAdd+0x7e>
					{
						/* This segment is full, don't add more bytes. */
						pxWindow->pxHeadSegment = NULL;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2200      	movs	r2, #0
 800f160:	67da      	str	r2, [r3, #124]	; 0x7c
					}

					lBytesLeft -= lToWrite;
 800f162:	69fa      	ldr	r2, [r7, #28]
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	1ad3      	subs	r3, r2, r3
 800f168:	61fb      	str	r3, [r7, #28]

					/* ulNextTxSequenceNumber is the sequence number of the next byte to
					be stored for transmission. */
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	441a      	add	r2, r3
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	635a      	str	r2, [r3, #52]	; 0x34

					/* Increased the return value. */
					lDone += lToWrite;
 800f176:	69ba      	ldr	r2, [r7, #24]
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	4413      	add	r3, r2
 800f17c:	61bb      	str	r3, [r7, #24]

					/* Some detailed logging, for those who're interested. */
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 ) )
 800f17e:	4b32      	ldr	r3, [pc, #200]	; (800f248 <lTCPWindowTxAdd+0x164>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	2b01      	cmp	r3, #1
						FreeRTOS_flush_logging( );
					}

					/* Calculate the next position in the circular data buffer, knowing
					its maximum length 'lMax'. */
					lPosition = lTCPIncrementTxPosition( lPosition, lMax, lToWrite );
 800f184:	693a      	ldr	r2, [r7, #16]
 800f186:	6839      	ldr	r1, [r7, #0]
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f7ff ff91 	bl	800f0b0 <lTCPIncrementTxPosition>
 800f18e:	6078      	str	r0, [r7, #4]
				}
			}
		}

		while( lBytesLeft > 0 )
 800f190:	e050      	b.n	800f234 <lTCPWindowTxAdd+0x150>
		{
			/* The current transmission segment is full, create new segments as
			needed. */
			pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, pxWindow->usMSS );
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f19c:	461a      	mov	r2, r3
 800f19e:	2300      	movs	r3, #0
 800f1a0:	68f8      	ldr	r0, [r7, #12]
 800f1a2:	f7ff fca9 	bl	800eaf8 <xTCPWindowNew>
 800f1a6:	6178      	str	r0, [r7, #20]

			if( pxSegment != NULL )
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d046      	beq.n	800f23c <lTCPWindowTxAdd+0x158>
			{
				/* Store as many as needed, but no more than the maximum
				(MSS). */
				lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	69f8      	ldr	r0, [r7, #28]
 800f1b6:	f7ff fb73 	bl	800e8a0 <FreeRTOS_min_int32>
 800f1ba:	6138      	str	r0, [r7, #16]

				pxSegment->lDataLength = lToWrite;
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	693a      	ldr	r2, [r7, #16]
 800f1c0:	609a      	str	r2, [r3, #8]
				pxSegment->lStreamPos = lPosition;
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	60da      	str	r2, [r3, #12]
				lBytesLeft -= lToWrite;
 800f1c8:	69fa      	ldr	r2, [r7, #28]
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	1ad3      	subs	r3, r2, r3
 800f1ce:	61fb      	str	r3, [r7, #28]
				lPosition = lTCPIncrementTxPosition( lPosition, lMax, lToWrite );
 800f1d0:	693a      	ldr	r2, [r7, #16]
 800f1d2:	6839      	ldr	r1, [r7, #0]
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7ff ff6b 	bl	800f0b0 <lTCPIncrementTxPosition>
 800f1da:	6078      	str	r0, [r7, #4]
				pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	441a      	add	r2, r3
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	635a      	str	r2, [r3, #52]	; 0x34
				lDone += lToWrite;
 800f1e8:	69ba      	ldr	r2, [r7, #24]
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	4413      	add	r3, r2
 800f1ee:	61bb      	str	r3, [r7, #24]

				/* Link this segment in the Tx-Queue. */
				vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	3318      	adds	r3, #24
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	4610      	mov	r0, r2
 800f1fe:	f7ff fbb5 	bl	800e96c <vListInsertFifo>

				/* Let 'pxHeadSegment' point to this segment if there is still
				space. */
				if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	689a      	ldr	r2, [r3, #8]
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	da03      	bge.n	800f216 <lTCPWindowTxAdd+0x132>
				{
					pxWindow->pxHeadSegment = pxSegment;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	697a      	ldr	r2, [r7, #20]
 800f212:	67da      	str	r2, [r3, #124]	; 0x7c
 800f214:	e002      	b.n	800f21c <lTCPWindowTxAdd+0x138>
				}
				else
				{
					pxWindow->pxHeadSegment = NULL;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2200      	movs	r2, #0
 800f21a:	67da      	str	r2, [r3, #124]	; 0x7c
				}

				if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 )
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f222:	2b17      	cmp	r3, #23
 800f224:	d006      	beq.n	800f234 <lTCPWindowTxAdd+0x150>
				{
					if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800f226:	4b08      	ldr	r3, [pc, #32]	; (800f248 <lTCPWindowTxAdd+0x164>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	2b02      	cmp	r3, #2
 800f22c:	dc02      	bgt.n	800f234 <lTCPWindowTxAdd+0x150>
						( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 800f22e:	4b06      	ldr	r3, [pc, #24]	; (800f248 <lTCPWindowTxAdd+0x164>)
 800f230:	681b      	ldr	r3, [r3, #0]
					if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800f232:	2b01      	cmp	r3, #1
		while( lBytesLeft > 0 )
 800f234:	69fb      	ldr	r3, [r7, #28]
 800f236:	2b00      	cmp	r3, #0
 800f238:	dcab      	bgt.n	800f192 <lTCPWindowTxAdd+0xae>
 800f23a:	e000      	b.n	800f23e <lTCPWindowTxAdd+0x15a>
				No more data can be sent at the moment. */
				if( lDone != 0 )
				{
					FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
				}
				break;
 800f23c:	bf00      	nop
			}
		}

		return lDone;
 800f23e:	69bb      	ldr	r3, [r7, #24]
	}
 800f240:	4618      	mov	r0, r3
 800f242:	3720      	adds	r7, #32
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	20004250 	.word	0x20004250

0800f24c <xTCPWindowTxDone>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowTxDone( TCPWindow_t *pxWindow )
	{
 800f24c:	b480      	push	{r7}
 800f24e:	b083      	sub	sp, #12
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
		return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments) );
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	bf0c      	ite	eq
 800f25e:	2301      	moveq	r3, #1
 800f260:	2300      	movne	r3, #0
 800f262:	b2db      	uxtb	r3, r3
	}
 800f264:	4618      	mov	r0, r3
 800f266:	370c      	adds	r7, #12
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr

0800f270 <prvTCPWindowTxHasSpace>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t *pxWindow, uint32_t ulWindowSize )
	{
 800f270:	b580      	push	{r7, lr}
 800f272:	b086      	sub	sp, #24
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
	TCPSegment_t *pxSegment;

		/* This function will look if there is new transmission data.  It will
		return true if there is data to be sent. */

		pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	3354      	adds	r3, #84	; 0x54
 800f27e:	4618      	mov	r0, r3
 800f280:	f7ff fcdf 	bl	800ec42 <xTCPWindowPeekHead>
 800f284:	60f8      	str	r0, [r7, #12]

		if( pxSegment == NULL )
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d102      	bne.n	800f292 <prvTCPWindowTxHasSpace+0x22>
		{
			xHasSpace = pdFALSE;
 800f28c:	2300      	movs	r3, #0
 800f28e:	613b      	str	r3, [r7, #16]
 800f290:	e02f      	b.n	800f2f2 <prvTCPWindowTxHasSpace+0x82>
		}
		else
		{
			/* How much data is outstanding, i.e. how much data has been sent
			but not yet acknowledged ? */
			if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6a1b      	ldr	r3, [r3, #32]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d306      	bcc.n	800f2ac <prvTCPWindowTxHasSpace+0x3c>
			{
				ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6a1b      	ldr	r3, [r3, #32]
 800f2a6:	1ad3      	subs	r3, r2, r3
 800f2a8:	617b      	str	r3, [r7, #20]
 800f2aa:	e001      	b.n	800f2b0 <prvTCPWindowTxHasSpace+0x40>
			}
			else
			{
				ulTxOutstanding = 0UL;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	617b      	str	r3, [r7, #20]
			}

			/* Subtract this from the peer's space. */
			ulWindowSize -= FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 800f2b0:	6979      	ldr	r1, [r7, #20]
 800f2b2:	6838      	ldr	r0, [r7, #0]
 800f2b4:	f7ff fb04 	bl	800e8c0 <FreeRTOS_min_uint32>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	1a9b      	subs	r3, r3, r2
 800f2be:	603b      	str	r3, [r7, #0]

			/* See if the next segment may be sent. */
			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	689b      	ldr	r3, [r3, #8]
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d802      	bhi.n	800f2d2 <prvTCPWindowTxHasSpace+0x62>
			{
				xHasSpace = pdTRUE;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	613b      	str	r3, [r7, #16]
 800f2d0:	e001      	b.n	800f2d6 <prvTCPWindowTxHasSpace+0x66>
			}
			else
			{
				xHasSpace = pdFALSE;
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	613b      	str	r3, [r7, #16]

			/* If 'xHasSpace', it looks like the peer has at least space for 1
			more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
			limitation of the transmission window (in case of many resends it
			may be decreased). */
			if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) )
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d00a      	beq.n	800f2f2 <prvTCPWindowTxHasSpace+0x82>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	689a      	ldr	r2, [r3, #8]
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	689b      	ldr	r3, [r3, #8]
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	440b      	add	r3, r1
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d201      	bcs.n	800f2f2 <prvTCPWindowTxHasSpace+0x82>
			{
				xHasSpace = pdFALSE;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	613b      	str	r3, [r7, #16]
			}
		}

		return xHasSpace;
 800f2f2:	693b      	ldr	r3, [r7, #16]
	}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3718      	adds	r7, #24
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <xTCPWindowTxHasData>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowTxHasData( TCPWindow_t *pxWindow, uint32_t ulWindowSize, TickType_t *pulDelay )
	{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b088      	sub	sp, #32
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxSegment;
	BaseType_t xReturn;
	TickType_t ulAge, ulMaxAge;

		*pulDelay = 0u;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2200      	movs	r2, #0
 800f30c:	601a      	str	r2, [r3, #0]

		if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f312:	2b00      	cmp	r3, #0
 800f314:	d002      	beq.n	800f31c <xTCPWindowTxHasData+0x20>
		{
			/* No need to look at retransmissions or new transmission as long as
			there are priority segments.  *pulDelay equals zero, meaning it must
			be sent out immediately. */
			xReturn = pdTRUE;
 800f316:	2301      	movs	r3, #1
 800f318:	61fb      	str	r3, [r7, #28]
 800f31a:	e04a      	b.n	800f3b2 <xTCPWindowTxHasData+0xb6>
		}
		else
		{
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	3368      	adds	r3, #104	; 0x68
 800f320:	4618      	mov	r0, r3
 800f322:	f7ff fc8e 	bl	800ec42 <xTCPWindowPeekHead>
 800f326:	61b8      	str	r0, [r7, #24]

			if( pxSegment != NULL )
 800f328:	69bb      	ldr	r3, [r7, #24]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d019      	beq.n	800f362 <xTCPWindowTxHasData+0x66>
			{
				/* There is an outstanding segment, see if it is time to resend
				it. */
				ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 800f32e:	69bb      	ldr	r3, [r7, #24]
 800f330:	3310      	adds	r3, #16
 800f332:	4618      	mov	r0, r3
 800f334:	f7ff fb37 	bl	800e9a6 <ulTimerGetAge>
 800f338:	6178      	str	r0, [r7, #20]

				/* After a packet has been sent for the first time, it will wait
				'1 * lSRTT' ms for an ACK. A second time it will wait '2 * lSRTT' ms,
				each time doubling the time-out */
				ulMaxAge = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f33e:	461a      	mov	r2, r3
 800f340:	69bb      	ldr	r3, [r7, #24]
 800f342:	7d1b      	ldrb	r3, [r3, #20]
 800f344:	fa02 f303 	lsl.w	r3, r2, r3
 800f348:	613b      	str	r3, [r7, #16]

				if( ulMaxAge > ulAge )
 800f34a:	693a      	ldr	r2, [r7, #16]
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	429a      	cmp	r2, r3
 800f350:	d904      	bls.n	800f35c <xTCPWindowTxHasData+0x60>
				{
					/* A segment must be sent after this amount of msecs */
					*pulDelay = ulMaxAge - ulAge;
 800f352:	693a      	ldr	r2, [r7, #16]
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	1ad2      	subs	r2, r2, r3
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	601a      	str	r2, [r3, #0]
				}

				xReturn = pdTRUE;
 800f35c:	2301      	movs	r3, #1
 800f35e:	61fb      	str	r3, [r7, #28]
 800f360:	e027      	b.n	800f3b2 <xTCPWindowTxHasData+0xb6>
			}
			else
			{
				/* No priority segment, no outstanding data, see if there is new
				transmission data. */
				pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	3354      	adds	r3, #84	; 0x54
 800f366:	4618      	mov	r0, r3
 800f368:	f7ff fc6b 	bl	800ec42 <xTCPWindowPeekHead>
 800f36c:	61b8      	str	r0, [r7, #24]

				/* See if it fits in the peer's reception window. */
				if( pxSegment == NULL )
 800f36e:	69bb      	ldr	r3, [r7, #24]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d102      	bne.n	800f37a <xTCPWindowTxHasData+0x7e>
				{
					xReturn = pdFALSE;
 800f374:	2300      	movs	r3, #0
 800f376:	61fb      	str	r3, [r7, #28]
 800f378:	e01b      	b.n	800f3b2 <xTCPWindowTxHasData+0xb6>
				}
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800f37a:	68b9      	ldr	r1, [r7, #8]
 800f37c:	68f8      	ldr	r0, [r7, #12]
 800f37e:	f7ff ff77 	bl	800f270 <prvTCPWindowTxHasSpace>
 800f382:	4603      	mov	r3, r0
 800f384:	2b00      	cmp	r3, #0
 800f386:	d102      	bne.n	800f38e <xTCPWindowTxHasData+0x92>
				{
					/* Too many outstanding messages. */
					xReturn = pdFALSE;
 800f388:	2300      	movs	r3, #0
 800f38a:	61fb      	str	r3, [r7, #28]
 800f38c:	e011      	b.n	800f3b2 <xTCPWindowTxHasData+0xb6>
				}
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	f003 0302 	and.w	r3, r3, #2
 800f396:	b2db      	uxtb	r3, r3
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d008      	beq.n	800f3ae <xTCPWindowTxHasData+0xb2>
 800f39c:	69bb      	ldr	r3, [r7, #24]
 800f39e:	689a      	ldr	r2, [r3, #8]
 800f3a0:	69bb      	ldr	r3, [r7, #24]
 800f3a2:	685b      	ldr	r3, [r3, #4]
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	da02      	bge.n	800f3ae <xTCPWindowTxHasData+0xb2>
				{
					/* 'bSendFullSize' is a special optimisation.  If true, the
					driver will only sent completely filled packets (of MSS
					bytes). */
					xReturn = pdFALSE;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	61fb      	str	r3, [r7, #28]
 800f3ac:	e001      	b.n	800f3b2 <xTCPWindowTxHasData+0xb6>
				}
				else
				{
					xReturn = pdTRUE;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	61fb      	str	r3, [r7, #28]
				}
			}
		}

		return xReturn;
 800f3b2:	69fb      	ldr	r3, [r7, #28]
	}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3720      	adds	r7, #32
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <ulTCPWindowTxGet>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxGet( TCPWindow_t *pxWindow, uint32_t ulWindowSize, int32_t *plPosition )
	{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b088      	sub	sp, #32
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	60f8      	str	r0, [r7, #12]
 800f3c4:	60b9      	str	r1, [r7, #8]
 800f3c6:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxSegment;
	uint32_t ulMaxTime;
	uint32_t ulReturn  = ~0UL;
 800f3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f3cc:	61bb      	str	r3, [r7, #24]

		/* Fetches data to be sent-out now.

		Priority messages: segments with a resend need no check current sliding
		window size. */
		pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	3340      	adds	r3, #64	; 0x40
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7ff fc17 	bl	800ec06 <xTCPWindowGetHead>
 800f3d8:	61f8      	str	r0, [r7, #28]
		pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	62da      	str	r2, [r3, #44]	; 0x2c

		if( pxSegment == NULL )
 800f3e2:	69fb      	ldr	r3, [r7, #28]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d16e      	bne.n	800f4c6 <ulTCPWindowTxGet+0x10a>
		{
			/* Waiting messages: outstanding messages with a running timer
			neither check peer's reception window size because these packets
			have been sent earlier. */
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	3368      	adds	r3, #104	; 0x68
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7ff fc28 	bl	800ec42 <xTCPWindowPeekHead>
 800f3f2:	61f8      	str	r0, [r7, #28]

			if( pxSegment != NULL )
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d01f      	beq.n	800f43a <ulTCPWindowTxGet+0x7e>
			{
				/* Do check the timing. */
				ulMaxTime = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3fe:	461a      	mov	r2, r3
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	7d1b      	ldrb	r3, [r3, #20]
 800f404:	fa02 f303 	lsl.w	r3, r2, r3
 800f408:	617b      	str	r3, [r7, #20]

				if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 800f40a:	69fb      	ldr	r3, [r7, #28]
 800f40c:	3310      	adds	r3, #16
 800f40e:	4618      	mov	r0, r3
 800f410:	f7ff fac9 	bl	800e9a6 <ulTimerGetAge>
 800f414:	4602      	mov	r2, r0
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	429a      	cmp	r2, r3
 800f41a:	d90c      	bls.n	800f436 <ulTCPWindowTxGet+0x7a>
				{
					/* A normal (non-fast) retransmission.  Move it from the
					head of the waiting queue. */
					pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	3368      	adds	r3, #104	; 0x68
 800f420:	4618      	mov	r0, r3
 800f422:	f7ff fbf0 	bl	800ec06 <xTCPWindowGetHead>
 800f426:	61f8      	str	r0, [r7, #28]
					pxSegment->u.bits.ucDupAckCount = pdFALSE_UNSIGNED;
 800f428:	69fb      	ldr	r3, [r7, #28]
 800f42a:	2200      	movs	r2, #0
 800f42c:	755a      	strb	r2, [r3, #21]

					/* Some detailed logging. */
					if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 ) )
 800f42e:	4b4c      	ldr	r3, [pc, #304]	; (800f560 <ulTCPWindowTxGet+0x1a4>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	2b00      	cmp	r3, #0
 800f434:	e001      	b.n	800f43a <ulTCPWindowTxGet+0x7e>
						FreeRTOS_flush_logging( );
					}
				}
				else
				{
					pxSegment = NULL;
 800f436:	2300      	movs	r3, #0
 800f438:	61fb      	str	r3, [r7, #28]
				}
			}

			if( pxSegment == NULL )
 800f43a:	69fb      	ldr	r3, [r7, #28]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d142      	bne.n	800f4c6 <ulTCPWindowTxGet+0x10a>
			{
				/* New messages: sent-out for the first time.  Check current
				sliding window size of peer. */
				pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	3354      	adds	r3, #84	; 0x54
 800f444:	4618      	mov	r0, r3
 800f446:	f7ff fbfc 	bl	800ec42 <xTCPWindowPeekHead>
 800f44a:	61f8      	str	r0, [r7, #28]

				if( pxSegment == NULL )
 800f44c:	69fb      	ldr	r3, [r7, #28]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d102      	bne.n	800f458 <ulTCPWindowTxGet+0x9c>
				{
					/* No segments queued. */
					ulReturn = 0UL;
 800f452:	2300      	movs	r3, #0
 800f454:	61bb      	str	r3, [r7, #24]
 800f456:	e036      	b.n	800f4c6 <ulTCPWindowTxGet+0x10a>
				}
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	f003 0302 	and.w	r3, r3, #2
 800f460:	b2db      	uxtb	r3, r3
 800f462:	2b00      	cmp	r3, #0
 800f464:	d008      	beq.n	800f478 <ulTCPWindowTxGet+0xbc>
 800f466:	69fb      	ldr	r3, [r7, #28]
 800f468:	689a      	ldr	r2, [r3, #8]
 800f46a:	69fb      	ldr	r3, [r7, #28]
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	429a      	cmp	r2, r3
 800f470:	da02      	bge.n	800f478 <ulTCPWindowTxGet+0xbc>
				{
					/* A segment has been queued but the driver waits until it
					has a full size of MSS. */
					ulReturn = 0;
 800f472:	2300      	movs	r3, #0
 800f474:	61bb      	str	r3, [r7, #24]
 800f476:	e026      	b.n	800f4c6 <ulTCPWindowTxGet+0x10a>
				}
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800f478:	68b9      	ldr	r1, [r7, #8]
 800f47a:	68f8      	ldr	r0, [r7, #12]
 800f47c:	f7ff fef8 	bl	800f270 <prvTCPWindowTxHasSpace>
 800f480:	4603      	mov	r3, r0
 800f482:	2b00      	cmp	r3, #0
 800f484:	d102      	bne.n	800f48c <ulTCPWindowTxGet+0xd0>
				{
					/* Peer has no more space at this moment. */
					ulReturn = 0;
 800f486:	2300      	movs	r3, #0
 800f488:	61bb      	str	r3, [r7, #24]
 800f48a:	e01c      	b.n	800f4c6 <ulTCPWindowTxGet+0x10a>
				}
				else
				{
					/* Move it out of the Tx queue. */
					pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	3354      	adds	r3, #84	; 0x54
 800f490:	4618      	mov	r0, r3
 800f492:	f7ff fbb8 	bl	800ec06 <xTCPWindowGetHead>
 800f496:	61f8      	str	r0, [r7, #28]

					/* Don't let pxHeadSegment point to this segment any more,
					so no more data will be added. */
					if( pxWindow->pxHeadSegment == pxSegment )
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d102      	bne.n	800f4a8 <ulTCPWindowTxGet+0xec>
					{
						pxWindow->pxHeadSegment = NULL;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	67da      	str	r2, [r3, #124]	; 0x7c
					}

					/* pxWindow->tx.highest registers the highest sequence
					number in our transmission window. */
					pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 800f4a8:	69fb      	ldr	r3, [r7, #28]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	69fa      	ldr	r2, [r7, #28]
 800f4ae:	6892      	ldr	r2, [r2, #8]
 800f4b0:	441a      	add	r2, r3
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	629a      	str	r2, [r3, #40]	; 0x28

					/* ...and more detailed logging */
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 800f4b6:	4b2a      	ldr	r3, [pc, #168]	; (800f560 <ulTCPWindowTxGet+0x1a4>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b01      	cmp	r3, #1
 800f4bc:	dd03      	ble.n	800f4c6 <ulTCPWindowTxGet+0x10a>
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f4c4:	2b17      	cmp	r3, #23
				FreeRTOS_flush_logging( );
			}
		}

		/* See if it has already been determined to return 0. */
		if( ulReturn != 0UL )
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d043      	beq.n	800f554 <ulTCPWindowTxGet+0x198>
		{
			configASSERT( listLIST_ITEM_CONTAINER( &(pxSegment->xQueueItem ) ) == NULL );
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d009      	beq.n	800f4e8 <ulTCPWindowTxGet+0x12c>
 800f4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d8:	f383 8811 	msr	BASEPRI, r3
 800f4dc:	f3bf 8f6f 	isb	sy
 800f4e0:	f3bf 8f4f 	dsb	sy
 800f4e4:	613b      	str	r3, [r7, #16]
 800f4e6:	e7fe      	b.n	800f4e6 <ulTCPWindowTxGet+0x12a>

			/* Now that the segment will be transmitted, add it to the tail of
			the waiting queue. */
			vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	3318      	adds	r3, #24
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	4610      	mov	r0, r2
 800f4f6:	f7ff fa39 	bl	800e96c <vListInsertFifo>

			/* And mark it as outstanding. */
			pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 800f4fa:	69fa      	ldr	r2, [r7, #28]
 800f4fc:	7d93      	ldrb	r3, [r2, #22]
 800f4fe:	f043 0301 	orr.w	r3, r3, #1
 800f502:	7593      	strb	r3, [r2, #22]

			/* Administer the transmit count, needed for fast
			retransmissions. */
			( pxSegment->u.bits.ucTransmitCount )++;
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	7d1b      	ldrb	r3, [r3, #20]
 800f508:	3301      	adds	r3, #1
 800f50a:	b2da      	uxtb	r2, r3
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	751a      	strb	r2, [r3, #20]

			/* If there have been several retransmissions (4), decrease the
			size of the transmission window to at most 2 times MSS. */
			if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 800f510:	69fb      	ldr	r3, [r7, #28]
 800f512:	7d1b      	ldrb	r3, [r3, #20]
 800f514:	2b04      	cmp	r3, #4
 800f516:	d10d      	bne.n	800f534 <ulTCPWindowTxGet+0x178>
			{
				if( pxWindow->xSize.ulTxWindowLength > ( 2U * pxWindow->usMSS ) )
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	689a      	ldr	r2, [r3, #8]
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f522:	005b      	lsls	r3, r3, #1
 800f524:	429a      	cmp	r2, r3
 800f526:	d905      	bls.n	800f534 <ulTCPWindowTxGet+0x178>
				{
					FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
						pxWindow->usPeerPortNumber, pxWindow->usOurPortNumber,
						pxWindow->xSize.ulTxWindowLength, 2 * pxWindow->usMSS ) );
					pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f52e:	005a      	lsls	r2, r3, #1
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	609a      	str	r2, [r3, #8]
				}
			}

			/* Clear the transmit timer. */
			vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	3310      	adds	r3, #16
 800f538:	4618      	mov	r0, r3
 800f53a:	f7ff fa27 	bl	800e98c <vTCPTimerSet>

			pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 800f53e:	69fb      	ldr	r3, [r7, #28]
 800f540:	681a      	ldr	r2, [r3, #0]
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	62da      	str	r2, [r3, #44]	; 0x2c

			/* Inform the caller where to find the data within the queue. */
			*plPosition = pxSegment->lStreamPos;
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	68da      	ldr	r2, [r3, #12]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	601a      	str	r2, [r3, #0]

			/* And return the length of the data segment */
			ulReturn = ( uint32_t ) pxSegment->lDataLength;
 800f54e:	69fb      	ldr	r3, [r7, #28]
 800f550:	689b      	ldr	r3, [r3, #8]
 800f552:	61bb      	str	r3, [r7, #24]
		}

		return ulReturn;
 800f554:	69bb      	ldr	r3, [r7, #24]
	}
 800f556:	4618      	mov	r0, r3
 800f558:	3720      	adds	r7, #32
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	20004250 	.word	0x20004250

0800f564 <prvTCPWindowTxCheckAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 800f564:	b580      	push	{r7, lr}
 800f566:	b08c      	sub	sp, #48	; 0x30
 800f568:	af00      	add	r7, sp, #0
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	607a      	str	r2, [r7, #4]
	uint32_t ulBytesConfirmed = 0u;
 800f570:	2300      	movs	r3, #0
 800f572:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	62bb      	str	r3, [r7, #40]	; 0x28
	const ListItem_t *pxIterator;
	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xTxSegments );
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	3398      	adds	r3, #152	; 0x98
 800f57c:	61fb      	str	r3, [r7, #28]

		 A Smoothed RTT will increase quickly, but it is conservative when
		 becoming smaller. */

		for(
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	685b      	ldr	r3, [r3, #4]
 800f582:	627b      	str	r3, [r7, #36]	; 0x24
		for(
 800f584:	e09b      	b.n	800f6be <prvTCPWindowTxCheckAck+0x15a>
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
			)
		{
			xDoUnlink = pdFALSE;
 800f586:	2300      	movs	r3, #0
 800f588:	623b      	str	r3, [r7, #32]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800f58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	61bb      	str	r3, [r7, #24]

			/* Move to the next item because the current item might get
			removed. */
			pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800f590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f592:	685b      	ldr	r3, [r3, #4]
 800f594:	627b      	str	r3, [r7, #36]	; 0x24

			/* Continue if this segment does not fall within the ACK'd range. */
			if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	4619      	mov	r1, r3
 800f59c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f59e:	f7ff f9c2 	bl	800e926 <xSequenceGreaterThan>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d000      	beq.n	800f5aa <prvTCPWindowTxCheckAck+0x46>
			{
				continue;
 800f5a8:	e089      	b.n	800f6be <prvTCPWindowTxCheckAck+0x15a>
			}

			/* Is it ready? */
			if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 800f5aa:	69bb      	ldr	r3, [r7, #24]
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	f040 8091 	bne.w	800f6d8 <prvTCPWindowTxCheckAck+0x174>
			{
				break;
			}

			ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 800f5b6:	69bb      	ldr	r3, [r7, #24]
 800f5b8:	689b      	ldr	r3, [r3, #8]
 800f5ba:	617b      	str	r3, [r7, #20]

			if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800f5bc:	69bb      	ldr	r3, [r7, #24]
 800f5be:	7d9b      	ldrb	r3, [r3, #22]
 800f5c0:	f003 0302 	and.w	r3, r3, #2
 800f5c4:	b2db      	uxtb	r3, r3
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d14d      	bne.n	800f666 <prvTCPWindowTxCheckAck+0x102>
			{
				if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t )ulDataLength, ulLast ) != pdFALSE )
 800f5ca:	69bb      	ldr	r3, [r7, #24]
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	6879      	ldr	r1, [r7, #4]
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7ff f9a6 	bl	800e926 <xSequenceGreaterThan>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d17d      	bne.n	800f6dc <prvTCPWindowTxCheckAck+0x178>
					#endif /* ipconfigHAS_DEBUG_PRINTF */
					break;
				}

				/* This segment is fully ACK'd, set the flag. */
				pxSegment->u.bits.bAcked = pdTRUE_UNSIGNED;
 800f5e0:	69ba      	ldr	r2, [r7, #24]
 800f5e2:	7d93      	ldrb	r3, [r2, #22]
 800f5e4:	f043 0302 	orr.w	r3, r3, #2
 800f5e8:	7593      	strb	r3, [r2, #22]

				/* Calculate the RTT only if the segment was sent-out for the
				first time and if this is the last ACK'd segment in a range. */
				if( ( pxSegment->u.bits.ucTransmitCount == 1 ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	7d1b      	ldrb	r3, [r3, #20]
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	d137      	bne.n	800f662 <prvTCPWindowTxCheckAck+0xfe>
 800f5f2:	69bb      	ldr	r3, [r7, #24]
 800f5f4:	681a      	ldr	r2, [r3, #0]
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	441a      	add	r2, r3
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d130      	bne.n	800f662 <prvTCPWindowTxCheckAck+0xfe>
				{
					int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 800f600:	69bb      	ldr	r3, [r7, #24]
 800f602:	3310      	adds	r3, #16
 800f604:	4618      	mov	r0, r3
 800f606:	f7ff f9ce 	bl	800e9a6 <ulTimerGetAge>
 800f60a:	4603      	mov	r3, r0
 800f60c:	613b      	str	r3, [r7, #16]

					if( pxWindow->lSRTT >= mS )
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	429a      	cmp	r2, r3
 800f616:	db0e      	blt.n	800f636 <prvTCPWindowTxCheckAck+0xd2>
					{
						/* RTT becomes smaller: adapt slowly. */
						pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f61c:	4613      	mov	r3, r2
 800f61e:	00db      	lsls	r3, r3, #3
 800f620:	1a9a      	subs	r2, r3, r2
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	4413      	add	r3, r2
 800f626:	2b00      	cmp	r3, #0
 800f628:	da00      	bge.n	800f62c <prvTCPWindowTxCheckAck+0xc8>
 800f62a:	3307      	adds	r3, #7
 800f62c:	10db      	asrs	r3, r3, #3
 800f62e:	461a      	mov	r2, r3
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	639a      	str	r2, [r3, #56]	; 0x38
 800f634:	e00e      	b.n	800f654 <prvTCPWindowTxCheckAck+0xf0>
					}
					else
					{
						/* RTT becomes larger: adapt quicker */
						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f63a:	4613      	mov	r3, r2
 800f63c:	005b      	lsls	r3, r3, #1
 800f63e:	441a      	add	r2, r3
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	4413      	add	r3, r2
 800f644:	005b      	lsls	r3, r3, #1
 800f646:	2b00      	cmp	r3, #0
 800f648:	da00      	bge.n	800f64c <prvTCPWindowTxCheckAck+0xe8>
 800f64a:	3307      	adds	r3, #7
 800f64c:	10db      	asrs	r3, r3, #3
 800f64e:	461a      	mov	r2, r3
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	639a      	str	r2, [r3, #56]	; 0x38
					}

					/* Cap to the minimum of 50ms. */
					if( pxWindow->lSRTT < winSRTT_CAP_mS )
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f658:	2b31      	cmp	r3, #49	; 0x31
 800f65a:	dc02      	bgt.n	800f662 <prvTCPWindowTxCheckAck+0xfe>
					{
						pxWindow->lSRTT = winSRTT_CAP_mS;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2232      	movs	r2, #50	; 0x32
 800f660:	639a      	str	r2, [r3, #56]	; 0x38
					}
				}

				/* Unlink it from the 3 queues, but do not destroy it (yet). */
				xDoUnlink = pdTRUE;
 800f662:	2301      	movs	r3, #1
 800f664:	623b      	str	r3, [r7, #32]
			}

			/* pxSegment->u.bits.bAcked is now true.  Is it located at the left
			side of the transmission queue?  If so, it may be freed. */
			if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	6a1a      	ldr	r2, [r3, #32]
 800f66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d116      	bne.n	800f69e <prvTCPWindowTxCheckAck+0x13a>
			{
				if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 800f670:	4b1d      	ldr	r3, [pc, #116]	; (800f6e8 <prvTCPWindowTxCheckAck+0x184>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	2b01      	cmp	r3, #1
 800f676:	dd03      	ble.n	800f680 <prvTCPWindowTxCheckAck+0x11c>
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f67e:	2b17      	cmp	r3, #23
						ulLast - pxWindow->tx.ulFirstSequenceNumber,
						pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
				}

				/* Increase the left-hand value of the transmission window. */
				pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	6a1a      	ldr	r2, [r3, #32]
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	441a      	add	r2, r3
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	621a      	str	r2, [r3, #32]

				/* This function will return the number of bytes that the tail
				of txStream may be advanced. */
				ulBytesConfirmed += ulDataLength;
 800f68c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	4413      	add	r3, r2
 800f692:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* All segments below tx.ulCurrentSequenceNumber may be freed. */
				vTCPWindowFree( pxSegment );
 800f694:	69b8      	ldr	r0, [r7, #24]
 800f696:	f7ff faf1 	bl	800ec7c <vTCPWindowFree>

				/* No need to unlink it any more. */
				xDoUnlink = pdFALSE;
 800f69a:	2300      	movs	r3, #0
 800f69c:	623b      	str	r3, [r7, #32]
			}

			if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 800f69e:	6a3b      	ldr	r3, [r7, #32]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d008      	beq.n	800f6b6 <prvTCPWindowTxCheckAck+0x152>
 800f6a4:	69bb      	ldr	r3, [r7, #24]
 800f6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d004      	beq.n	800f6b6 <prvTCPWindowTxCheckAck+0x152>
			{
				/* Remove item from its queues. */
				uxListRemove( &pxSegment->xQueueItem );
 800f6ac:	69bb      	ldr	r3, [r7, #24]
 800f6ae:	3318      	adds	r3, #24
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7f6 fc2c 	bl	8005f0e <uxListRemove>
			}

			ulSequenceNumber += ulDataLength;
 800f6b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	4413      	add	r3, r2
 800f6bc:	62bb      	str	r3, [r7, #40]	; 0x28
		for(
 800f6be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6c0:	69fb      	ldr	r3, [r7, #28]
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d00b      	beq.n	800f6de <prvTCPWindowTxCheckAck+0x17a>
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
 800f6c6:	6879      	ldr	r1, [r7, #4]
 800f6c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6ca:	f7ff f91a 	bl	800e902 <xSequenceLessThan>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	f47f af58 	bne.w	800f586 <prvTCPWindowTxCheckAck+0x22>
 800f6d6:	e002      	b.n	800f6de <prvTCPWindowTxCheckAck+0x17a>
				break;
 800f6d8:	bf00      	nop
 800f6da:	e000      	b.n	800f6de <prvTCPWindowTxCheckAck+0x17a>
					break;
 800f6dc:	bf00      	nop
		}

		return ulBytesConfirmed;
 800f6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3730      	adds	r7, #48	; 0x30
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	20004250 	.word	0x20004250

0800f6ec <prvTCPWindowFastRetransmit>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t *pxWindow, uint32_t ulFirst )
	{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b086      	sub	sp, #24
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6039      	str	r1, [r7, #0]
	const ListItem_t *pxIterator;
	const MiniListItem_t* pxEnd;
	TCPSegment_t *pxSegment;
	uint32_t ulCount = 0UL;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	613b      	str	r3, [r7, #16]

		/* A higher Tx block has been acknowledged.  Now iterate through the
		 xWaitQueue to find a possible condition for a FAST retransmission. */

		pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	3370      	adds	r3, #112	; 0x70
 800f6fe:	60fb      	str	r3, [r7, #12]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	617b      	str	r3, [r7, #20]
 800f706:	e03b      	b.n	800f780 <prvTCPWindowFastRetransmit+0x94>
			 pxIterator != ( const ListItem_t * ) pxEnd; )
		{
			/* Get the owner, which is a TCP segment. */
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	60bb      	str	r3, [r7, #8]

			/* Hop to the next item before the current gets unlinked. */
			pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	617b      	str	r3, [r7, #20]

			/* Fast retransmission:
			When 3 packets with a higher sequence number have been acknowledged
			by the peer, it is very unlikely a current packet will ever arrive.
			It will be retransmitted far before the RTO. */
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	7d9b      	ldrb	r3, [r3, #22]
 800f718:	f003 0302 	and.w	r3, r3, #2
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d12e      	bne.n	800f780 <prvTCPWindowFastRetransmit+0x94>
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	6839      	ldr	r1, [r7, #0]
 800f728:	4618      	mov	r0, r3
 800f72a:	f7ff f8ea 	bl	800e902 <xSequenceLessThan>
 800f72e:	4603      	mov	r3, r0
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 800f730:	2b00      	cmp	r3, #0
 800f732:	d025      	beq.n	800f780 <prvTCPWindowFastRetransmit+0x94>
				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	7d5b      	ldrb	r3, [r3, #21]
 800f738:	3301      	adds	r3, #1
 800f73a:	b2da      	uxtb	r2, r3
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	755a      	strb	r2, [r3, #21]
				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	7d5b      	ldrb	r3, [r3, #21]
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 800f744:	2b03      	cmp	r3, #3
 800f746:	d11b      	bne.n	800f780 <prvTCPWindowFastRetransmit+0x94>
			{
				pxSegment->u.bits.ucTransmitCount = pdFALSE_UNSIGNED;
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	2200      	movs	r2, #0
 800f74c:	751a      	strb	r2, [r3, #20]

				/* Not clearing 'ucDupAckCount' yet as more SACK's might come in
				which might lead to a second fast rexmit. */
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 800f74e:	4b11      	ldr	r3, [pc, #68]	; (800f794 <prvTCPWindowFastRetransmit+0xa8>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	db03      	blt.n	800f75e <prvTCPWindowFastRetransmit+0x72>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f75c:	2b17      	cmp	r3, #23
						ulFirst - pxWindow->tx.ulFirstSequenceNumber ) );
					FreeRTOS_flush_logging( );
				}

				/* Remove it from xWaitQueue. */
				uxListRemove( &pxSegment->xQueueItem );
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	3318      	adds	r3, #24
 800f762:	4618      	mov	r0, r3
 800f764:	f7f6 fbd3 	bl	8005f0e <uxListRemove>

				/* Add this segment to the priority queue so it gets
				retransmitted immediately. */
				vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	3318      	adds	r3, #24
 800f772:	4619      	mov	r1, r3
 800f774:	4610      	mov	r0, r2
 800f776:	f7ff f8f9 	bl	800e96c <vListInsertFifo>
				ulCount++;
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	3301      	adds	r3, #1
 800f77e:	613b      	str	r3, [r7, #16]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f780:	697a      	ldr	r2, [r7, #20]
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	429a      	cmp	r2, r3
 800f786:	d1bf      	bne.n	800f708 <prvTCPWindowFastRetransmit+0x1c>
			}
		}

		return ulCount;
 800f788:	693b      	ldr	r3, [r7, #16]
	}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3718      	adds	r7, #24
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
 800f792:	bf00      	nop
 800f794:	20004250 	.word	0x20004250

0800f798 <ulTCPWindowTxAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxAck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	6039      	str	r1, [r7, #0]
	uint32_t ulFirstSequence, ulReturn;

		/* Receive a normal ACK. */

		ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6a1b      	ldr	r3, [r3, #32]
 800f7a6:	60bb      	str	r3, [r7, #8]

		if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 800f7a8:	68b9      	ldr	r1, [r7, #8]
 800f7aa:	6838      	ldr	r0, [r7, #0]
 800f7ac:	f7ff f898 	bl	800e8e0 <xSequenceLessThanOrEqual>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d002      	beq.n	800f7bc <ulTCPWindowTxAck+0x24>
		{
			ulReturn = 0UL;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	60fb      	str	r3, [r7, #12]
 800f7ba:	e005      	b.n	800f7c8 <ulTCPWindowTxAck+0x30>
		}
		else
		{
			ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 800f7bc:	683a      	ldr	r2, [r7, #0]
 800f7be:	68b9      	ldr	r1, [r7, #8]
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f7ff fecf 	bl	800f564 <prvTCPWindowTxCheckAck>
 800f7c6:	60f8      	str	r0, [r7, #12]
		}

		return ulReturn;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
	}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3710      	adds	r7, #16
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
	...

0800f7d4 <ulTCPWindowTxSack>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxSack( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b086      	sub	sp, #24
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	60b9      	str	r1, [r7, #8]
 800f7de:	607a      	str	r2, [r7, #4]
	uint32_t ulAckCount = 0UL;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	617b      	str	r3, [r7, #20]
	uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	6a1b      	ldr	r3, [r3, #32]
 800f7e8:	613b      	str	r3, [r7, #16]

		/* Receive a SACK option. */
		ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 800f7ea:	687a      	ldr	r2, [r7, #4]
 800f7ec:	68b9      	ldr	r1, [r7, #8]
 800f7ee:	68f8      	ldr	r0, [r7, #12]
 800f7f0:	f7ff feb8 	bl	800f564 <prvTCPWindowTxCheckAck>
 800f7f4:	6178      	str	r0, [r7, #20]
		prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 800f7f6:	68b9      	ldr	r1, [r7, #8]
 800f7f8:	68f8      	ldr	r0, [r7, #12]
 800f7fa:	f7ff ff77 	bl	800f6ec <prvTCPWindowFastRetransmit>

		if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 800f7fe:	4b06      	ldr	r3, [pc, #24]	; (800f818 <ulTCPWindowTxSack+0x44>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	dd03      	ble.n	800f80e <ulTCPWindowTxSack+0x3a>
 800f806:	6939      	ldr	r1, [r7, #16]
 800f808:	68b8      	ldr	r0, [r7, #8]
 800f80a:	f7ff f88c 	bl	800e926 <xSequenceGreaterThan>
				ulLast - pxWindow->tx.ulFirstSequenceNumber,
				pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
			FreeRTOS_flush_logging( );
		}

		return ulAckCount;
 800f80e:	697b      	ldr	r3, [r7, #20]
	}
 800f810:	4618      	mov	r0, r3
 800f812:	3718      	adds	r7, #24
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}
 800f818:	20004250 	.word	0x20004250

0800f81c <vProcessGeneratedUDPPacket>:
	}
};
/*-----------------------------------------------------------*/

void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800f81c:	b5b0      	push	{r4, r5, r7, lr}
 800f81e:	b088      	sub	sp, #32
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
UDPPacket_t *pxUDPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	695b      	ldr	r3, [r3, #20]
 800f828:	60fb      	str	r3, [r7, #12]

	/* Map the UDP packet onto the start of the frame. */
	pxUDPPacket = ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	699b      	ldr	r3, [r3, #24]
 800f82e:	61bb      	str	r3, [r7, #24]

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 800f830:	69ba      	ldr	r2, [r7, #24]
 800f832:	f107 030c 	add.w	r3, r7, #12
 800f836:	4611      	mov	r1, r2
 800f838:	4618      	mov	r0, r3
 800f83a:	f7f9 f867 	bl	800890c <eARPGetCacheEntry>
 800f83e:	4603      	mov	r3, r0
 800f840:	77fb      	strb	r3, [r7, #31]

	if( eReturned != eCantSendPacket )
 800f842:	7ffb      	ldrb	r3, [r7, #31]
 800f844:	2b02      	cmp	r3, #2
 800f846:	f000 8089 	beq.w	800f95c <vProcessGeneratedUDPPacket+0x140>
	{
		if( eReturned == eARPCacheHit )
 800f84a:	7ffb      	ldrb	r3, [r7, #31]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d174      	bne.n	800f93a <vProcessGeneratedUDPPacket+0x11e>
				uint8_t ucSocketOptions;
			#endif
			iptraceSENDING_UDP_PACKET( pxNetworkBuffer->ulIPAddress );

			/* Create short cuts to the data within the packet. */
			pxIPHeader = &( pxUDPPacket->xIPHeader );
 800f850:	69bb      	ldr	r3, [r7, #24]
 800f852:	330e      	adds	r3, #14
 800f854:	617b      	str	r3, [r7, #20]

		#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
			/* Is it possible that the packet is not actually a UDP packet
			after all, but an ICMP packet. */
			if( pxNetworkBuffer->usPort != ipPACKET_CONTAINS_ICMP_DATA )
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	8c1b      	ldrh	r3, [r3, #32]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d026      	beq.n	800f8ac <vProcessGeneratedUDPPacket+0x90>
		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
			{
			UDPHeader_t *pxUDPHeader;

				pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 800f85e:	69bb      	ldr	r3, [r7, #24]
 800f860:	3322      	adds	r3, #34	; 0x22
 800f862:	613b      	str	r3, [r7, #16]

				pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	8c1a      	ldrh	r2, [r3, #32]
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	805a      	strh	r2, [r3, #2]
				pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	801a      	strh	r2, [r3, #0]
				pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) );
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	69db      	ldr	r3, [r3, #28]
 800f878:	b29b      	uxth	r3, r3
 800f87a:	3308      	adds	r3, #8
 800f87c:	b29a      	uxth	r2, r3
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	809a      	strh	r2, [r3, #4]
				pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	889b      	ldrh	r3, [r3, #4]
 800f886:	b29b      	uxth	r3, r3
 800f888:	021b      	lsls	r3, r3, #8
 800f88a:	b21a      	sxth	r2, r3
 800f88c:	693b      	ldr	r3, [r7, #16]
 800f88e:	889b      	ldrh	r3, [r3, #4]
 800f890:	b29b      	uxth	r3, r3
 800f892:	0a1b      	lsrs	r3, r3, #8
 800f894:	b29b      	uxth	r3, r3
 800f896:	b21b      	sxth	r3, r3
 800f898:	4313      	orrs	r3, r2
 800f89a:	b21b      	sxth	r3, r3
 800f89c:	b29a      	uxth	r2, r3
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	809a      	strh	r2, [r3, #4]
				pxUDPHeader->usChecksum = 0u;
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	719a      	strb	r2, [r3, #6]
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	71da      	strb	r2, [r3, #7]
			*/
			/* Save options now, as they will be overwritten by memcpy */
			#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
				ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
			#endif
			memcpy( ( void *) &( pxUDPPacket->xEthernetHeader.xSourceAddress ), ( void * ) xDefaultPartUDPPacketHeader.ucBytes, sizeof( xDefaultPartUDPPacketHeader ) );
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	3306      	adds	r3, #6
 800f8b0:	4a32      	ldr	r2, [pc, #200]	; (800f97c <vProcessGeneratedUDPPacket+0x160>)
 800f8b2:	461d      	mov	r5, r3
 800f8b4:	4614      	mov	r4, r2
 800f8b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f8b8:	6028      	str	r0, [r5, #0]
 800f8ba:	6069      	str	r1, [r5, #4]
 800f8bc:	60aa      	str	r2, [r5, #8]
 800f8be:	60eb      	str	r3, [r5, #12]
 800f8c0:	cc03      	ldmia	r4!, {r0, r1}
 800f8c2:	6128      	str	r0, [r5, #16]
 800f8c4:	6169      	str	r1, [r5, #20]

		#if ipconfigSUPPORT_OUTGOING_PINGS == 1
			if( pxNetworkBuffer->usPort == ipPACKET_CONTAINS_ICMP_DATA )
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	8c1b      	ldrh	r3, [r3, #32]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d10a      	bne.n	800f8e4 <vProcessGeneratedUDPPacket+0xc8>
			{
				pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	725a      	strb	r2, [r3, #9]
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) );
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	69db      	ldr	r3, [r3, #28]
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	3314      	adds	r3, #20
 800f8dc:	b29a      	uxth	r2, r3
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	805a      	strh	r2, [r3, #2]
 800f8e2:	e006      	b.n	800f8f2 <vProcessGeneratedUDPPacket+0xd6>
			}
			else
		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
			{
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	69db      	ldr	r3, [r3, #28]
 800f8e8:	b29b      	uxth	r3, r3
 800f8ea:	331c      	adds	r3, #28
 800f8ec:	b29a      	uxth	r2, r3
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	805a      	strh	r2, [r3, #2]
			}

			/* The total transmit size adds on the Ethernet header. */
			pxNetworkBuffer->xDataLength = pxIPHeader->usLength + sizeof( EthernetHeader_t );
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	885b      	ldrh	r3, [r3, #2]
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	f103 020e 	add.w	r2, r3, #14
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	61da      	str	r2, [r3, #28]
			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	885b      	ldrh	r3, [r3, #2]
 800f904:	b29b      	uxth	r3, r3
 800f906:	021b      	lsls	r3, r3, #8
 800f908:	b21a      	sxth	r2, r3
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	885b      	ldrh	r3, [r3, #2]
 800f90e:	b29b      	uxth	r3, r3
 800f910:	0a1b      	lsrs	r3, r3, #8
 800f912:	b29b      	uxth	r3, r3
 800f914:	b21b      	sxth	r3, r3
 800f916:	4313      	orrs	r3, r2
 800f918:	b21b      	sxth	r3, r3
 800f91a:	b29a      	uxth	r2, r3
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	805a      	strh	r2, [r3, #2]
			/* HT:endian: changed back to network endian */
			pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	695a      	ldr	r2, [r3, #20]
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	611a      	str	r2, [r3, #16]

			#if( ipconfigUSE_LLMNR == 1 )
			{
				/* LLMNR messages are typically used on a LAN and they're
				 * not supposed to cross routers */
				if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	695b      	ldr	r3, [r3, #20]
 800f92c:	4a14      	ldr	r2, [pc, #80]	; (800f980 <vProcessGeneratedUDPPacket+0x164>)
 800f92e:	4293      	cmp	r3, r2
 800f930:	d114      	bne.n	800f95c <vProcessGeneratedUDPPacket+0x140>
				{
					pxIPHeader->ucTimeToLive = 0x01;
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	2201      	movs	r2, #1
 800f936:	721a      	strb	r2, [r3, #8]
 800f938:	e010      	b.n	800f95c <vProcessGeneratedUDPPacket+0x140>
					pxUDPPacket->xUDPHeader.usChecksum = 0u;
				}
			}
			#endif
		}
		else if( eReturned == eARPCacheMiss )
 800f93a:	7ffb      	ldrb	r3, [r7, #31]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d10b      	bne.n	800f958 <vProcessGeneratedUDPPacket+0x13c>
		{
			/* Add an entry to the ARP table with a null hardware address.
			This allows the ARP timer to know that an ARP reply is
			outstanding, and perform retransmissions if necessary. */
			vARPRefreshCacheEntry( NULL, ulIPAddress );
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	4619      	mov	r1, r3
 800f944:	2000      	movs	r0, #0
 800f946:	f7f8 fee9 	bl	800871c <vARPRefreshCacheEntry>

			/* Generate an ARP for the required IP address. */
			iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->ulIPAddress );
			pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800f94a:	68fa      	ldr	r2, [r7, #12]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	615a      	str	r2, [r3, #20]
			vARPGenerateRequestPacket( pxNetworkBuffer );
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7f9 f935 	bl	8008bc0 <vARPGenerateRequestPacket>
 800f956:	e001      	b.n	800f95c <vProcessGeneratedUDPPacket+0x140>
		}
		else
		{
			/* The lookup indicated that an ARP request has already been
			sent out for the queried IP address. */
			eReturned = eCantSendPacket;
 800f958:	2302      	movs	r3, #2
 800f95a:	77fb      	strb	r3, [r7, #31]
		}
	}

	if( eReturned != eCantSendPacket )
 800f95c:	7ffb      	ldrb	r3, [r7, #31]
 800f95e:	2b02      	cmp	r3, #2
 800f960:	d004      	beq.n	800f96c <vProcessGeneratedUDPPacket+0x150>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
			}
		}
		#endif

		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800f962:	2101      	movs	r1, #1
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f7f4 ffc3 	bl	80048f0 <xNetworkInterfaceOutput>
	{
		/* The packet can't be sent (DHCP not completed?).  Just drop the
		packet. */
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
	}
}
 800f96a:	e002      	b.n	800f972 <vProcessGeneratedUDPPacket+0x156>
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f000 f9a5 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
}
 800f972:	bf00      	nop
 800f974:	3720      	adds	r7, #32
 800f976:	46bd      	mov	sp, r7
 800f978:	bdb0      	pop	{r4, r5, r7, pc}
 800f97a:	bf00      	nop
 800f97c:	200000a0 	.word	0x200000a0
 800f980:	fc0000e0 	.word	0xfc0000e0

0800f984 <xProcessReceivedUDPPacket>:
/*-----------------------------------------------------------*/

BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer, uint16_t usPort )
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b086      	sub	sp, #24
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	460b      	mov	r3, r1
 800f98e:	807b      	strh	r3, [r7, #2]
BaseType_t xReturn = pdPASS;
 800f990:	2301      	movs	r3, #1
 800f992:	617b      	str	r3, [r7, #20]
FreeRTOS_Socket_t *pxSocket;

UDPPacket_t *pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	699b      	ldr	r3, [r3, #24]
 800f998:	613b      	str	r3, [r7, #16]

	pxSocket = pxUDPSocketLookup( usPort );
 800f99a:	887b      	ldrh	r3, [r7, #2]
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7fc f817 	bl	800b9d0 <pxUDPSocketLookup>
 800f9a2:	60f8      	str	r0, [r7, #12]

	if( pxSocket )
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d042      	beq.n	800fa30 <xProcessReceivedUDPPacket+0xac>
	{

		/* When refreshing the ARP cache with received UDP packets we must be
		careful;  hundreds of broadcast messages may pass and if we're not
		handling them, no use to fill the ARP cache with those IP addresses. */
		vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800f9aa:	693b      	ldr	r3, [r7, #16]
 800f9ac:	1d9a      	adds	r2, r3, #6
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	4610      	mov	r0, r2
 800f9b8:	f7f8 feb0 	bl	800871c <vARPRefreshCacheEntry>
				}
			}
		}
		#endif

		if( xReturn == pdPASS )
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	d171      	bne.n	800faa6 <xProcessReceivedUDPPacket+0x122>
		{
			vTaskSuspendAll();
 800f9c2:	f7f7 fe99 	bl	80076f8 <vTaskSuspendAll>
			{
				if( xReturn == pdPASS )
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d10a      	bne.n	800f9e2 <xProcessReceivedUDPPacket+0x5e>
				{
					taskENTER_CRITICAL();
 800f9cc:	f7f6 fbee 	bl	80061ac <vPortEnterCritical>
					{
						/* Add the network packet to the list of packets to be
						processed by the socket. */
						vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	3338      	adds	r3, #56	; 0x38
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	4611      	mov	r1, r2
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7f6 fa3b 	bl	8005e54 <vListInsertEnd>
					}
					taskEXIT_CRITICAL();
 800f9de:	f7f6 fc13 	bl	8006208 <vPortExitCritical>
				}
			}
			xTaskResumeAll();
 800f9e2:	f7f7 fe97 	bl	8007714 <xTaskResumeAll>

			/* Set the socket's receive event */
			if( pxSocket->xEventGroup != NULL )
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d005      	beq.n	800f9fa <xProcessReceivedUDPPacket+0x76>
			{
				xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	2101      	movs	r1, #1
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7f6 f925 	bl	8005c44 <xEventGroupSetBits>
			}

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) )
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d00c      	beq.n	800fa1c <xProcessReceivedUDPPacket+0x98>
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa06:	f003 0301 	and.w	r3, r3, #1
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d006      	beq.n	800fa1c <xProcessReceivedUDPPacket+0x98>
				{
					xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_READ );
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	2101      	movs	r1, #1
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7f6 f914 	bl	8005c44 <xEventGroupSetBits>
			}
			#endif

			#if( ipconfigUSE_DHCP == 1 )
			{
				if( xIsDHCPSocket( pxSocket ) )
 800fa1c:	68f8      	ldr	r0, [r7, #12]
 800fa1e:	f7f9 f911 	bl	8008c44 <xIsDHCPSocket>
 800fa22:	4603      	mov	r3, r0
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d03e      	beq.n	800faa6 <xProcessReceivedUDPPacket+0x122>
				{
					xSendEventToIPTask( eDHCPEvent );
 800fa28:	2004      	movs	r0, #4
 800fa2a:	f7fa fd41 	bl	800a4b0 <xSendEventToIPTask>
 800fa2e:	e03a      	b.n	800faa6 <xProcessReceivedUDPPacket+0x122>
		#if( ipconfigUSE_DNS == 1 )
			/* a DNS reply, check for the source port.  Although the DNS client
			does open a UDP socket to send a messages, this socket will be
			closed after a short timeout.  Messages that come late (after the
			socket is closed) will be treated here. */
			if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ipDNS_PORT )
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	021b      	lsls	r3, r3, #8
 800fa38:	b21a      	sxth	r2, r3
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	0a1b      	lsrs	r3, r3, #8
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	b21b      	sxth	r3, r3
 800fa46:	4313      	orrs	r3, r2
 800fa48:	b21b      	sxth	r3, r3
 800fa4a:	2b35      	cmp	r3, #53	; 0x35
 800fa4c:	d10e      	bne.n	800fa6c <xProcessReceivedUDPPacket+0xe8>
			{
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	1d9a      	adds	r2, r3, #6
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800fa58:	4619      	mov	r1, r3
 800fa5a:	4610      	mov	r0, r2
 800fa5c:	f7f8 fe5e 	bl	800871c <vARPRefreshCacheEntry>
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f7f9 fe5d 	bl	8009720 <ulDNSHandlePacket>
 800fa66:	4603      	mov	r3, r0
 800fa68:	617b      	str	r3, [r7, #20]
 800fa6a:	e01c      	b.n	800faa6 <xProcessReceivedUDPPacket+0x122>
			else
		#endif

		#if( ipconfigUSE_LLMNR == 1 )
			/* a LLMNR request, check for the destination port. */
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 800fa6c:	887b      	ldrh	r3, [r7, #2]
 800fa6e:	f64e 3214 	movw	r2, #60180	; 0xeb14
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d006      	beq.n	800fa84 <xProcessReceivedUDPPacket+0x100>
				( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800fa7a:	b29b      	uxth	r3, r3
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 800fa7c:	f64e 3214 	movw	r2, #60180	; 0xeb14
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d10e      	bne.n	800faa2 <xProcessReceivedUDPPacket+0x11e>
			{
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	1d9a      	adds	r2, r3, #6
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800fa8e:	4619      	mov	r1, r3
 800fa90:	4610      	mov	r0, r2
 800fa92:	f7f8 fe43 	bl	800871c <vARPRefreshCacheEntry>
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f7f9 fe42 	bl	8009720 <ulDNSHandlePacket>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	617b      	str	r3, [r7, #20]
 800faa0:	e001      	b.n	800faa6 <xProcessReceivedUDPPacket+0x122>
				xReturn = ( BaseType_t )ulNBNSHandlePacket( pxNetworkBuffer );
			}
			else
		#endif /* ipconfigUSE_NBNS */
		{
			xReturn = pdFAIL;
 800faa2:	2300      	movs	r3, #0
 800faa4:	617b      	str	r3, [r7, #20]
		}
	}

	return xReturn;
 800faa6:	697b      	ldr	r3, [r7, #20]
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3718      	adds	r7, #24
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b084      	sub	sp, #16
 800fab4:	af00      	add	r7, sp, #0
BaseType_t xReturn, x;

	/* Only initialise the buffers and their associated kernel objects if they
	have not been initialised before. */
	if( xNetworkBufferSemaphore == NULL )
 800fab6:	4b37      	ldr	r3, [pc, #220]	; (800fb94 <xNetworkBuffersInitialise+0xe4>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d15c      	bne.n	800fb78 <xNetworkBuffersInitialise+0xc8>
	{
		xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 800fabe:	2119      	movs	r1, #25
 800fac0:	2019      	movs	r0, #25
 800fac2:	f7f6 ff23 	bl	800690c <xQueueCreateCountingSemaphore>
 800fac6:	4602      	mov	r2, r0
 800fac8:	4b32      	ldr	r3, [pc, #200]	; (800fb94 <xNetworkBuffersInitialise+0xe4>)
 800faca:	601a      	str	r2, [r3, #0]
		configASSERT( xNetworkBufferSemaphore );
 800facc:	4b31      	ldr	r3, [pc, #196]	; (800fb94 <xNetworkBuffersInitialise+0xe4>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d109      	bne.n	800fae8 <xNetworkBuffersInitialise+0x38>
 800fad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad8:	f383 8811 	msr	BASEPRI, r3
 800fadc:	f3bf 8f6f 	isb	sy
 800fae0:	f3bf 8f4f 	dsb	sy
 800fae4:	607b      	str	r3, [r7, #4]
 800fae6:	e7fe      	b.n	800fae6 <xNetworkBuffersInitialise+0x36>
		#if ( configQUEUE_REGISTRY_SIZE > 0 )
		{
			vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 800fae8:	4b2a      	ldr	r3, [pc, #168]	; (800fb94 <xNetworkBuffersInitialise+0xe4>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	492a      	ldr	r1, [pc, #168]	; (800fb98 <xNetworkBuffersInitialise+0xe8>)
 800faee:	4618      	mov	r0, r3
 800faf0:	f7f7 fb7e 	bl	80071f0 <vQueueAddToRegistry>
			vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
			vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
		}
		#endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

		if( xNetworkBufferSemaphore != NULL )
 800faf4:	4b27      	ldr	r3, [pc, #156]	; (800fb94 <xNetworkBuffersInitialise+0xe4>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d03d      	beq.n	800fb78 <xNetworkBuffersInitialise+0xc8>
		{
			vListInitialise( &xFreeBuffersList );
 800fafc:	4827      	ldr	r0, [pc, #156]	; (800fb9c <xNetworkBuffersInitialise+0xec>)
 800fafe:	f7f6 f97c 	bl	8005dfa <vListInitialise>

			/* Initialise all the network buffers.  No storage is allocated to
			the buffers yet. */
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 800fb02:	2300      	movs	r3, #0
 800fb04:	60bb      	str	r3, [r7, #8]
 800fb06:	e031      	b.n	800fb6c <xNetworkBuffersInitialise+0xbc>
			{
				/* Initialise and set the owner of the buffer list items. */
				xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 800fb08:	4925      	ldr	r1, [pc, #148]	; (800fba0 <xNetworkBuffersInitialise+0xf0>)
 800fb0a:	68ba      	ldr	r2, [r7, #8]
 800fb0c:	4613      	mov	r3, r2
 800fb0e:	00db      	lsls	r3, r3, #3
 800fb10:	4413      	add	r3, r2
 800fb12:	009b      	lsls	r3, r3, #2
 800fb14:	440b      	add	r3, r1
 800fb16:	3318      	adds	r3, #24
 800fb18:	2200      	movs	r2, #0
 800fb1a:	601a      	str	r2, [r3, #0]
				vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 800fb1c:	68ba      	ldr	r2, [r7, #8]
 800fb1e:	4613      	mov	r3, r2
 800fb20:	00db      	lsls	r3, r3, #3
 800fb22:	4413      	add	r3, r2
 800fb24:	009b      	lsls	r3, r3, #2
 800fb26:	4a1e      	ldr	r2, [pc, #120]	; (800fba0 <xNetworkBuffersInitialise+0xf0>)
 800fb28:	4413      	add	r3, r2
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7f6 f985 	bl	8005e3a <vListInitialiseItem>
				listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 800fb30:	68ba      	ldr	r2, [r7, #8]
 800fb32:	4613      	mov	r3, r2
 800fb34:	00db      	lsls	r3, r3, #3
 800fb36:	4413      	add	r3, r2
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	4a19      	ldr	r2, [pc, #100]	; (800fba0 <xNetworkBuffersInitialise+0xf0>)
 800fb3c:	1899      	adds	r1, r3, r2
 800fb3e:	4818      	ldr	r0, [pc, #96]	; (800fba0 <xNetworkBuffersInitialise+0xf0>)
 800fb40:	68ba      	ldr	r2, [r7, #8]
 800fb42:	4613      	mov	r3, r2
 800fb44:	00db      	lsls	r3, r3, #3
 800fb46:	4413      	add	r3, r2
 800fb48:	009b      	lsls	r3, r3, #2
 800fb4a:	4403      	add	r3, r0
 800fb4c:	330c      	adds	r3, #12
 800fb4e:	6019      	str	r1, [r3, #0]

				/* Currently, all buffers are available for use. */
				vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 800fb50:	68ba      	ldr	r2, [r7, #8]
 800fb52:	4613      	mov	r3, r2
 800fb54:	00db      	lsls	r3, r3, #3
 800fb56:	4413      	add	r3, r2
 800fb58:	009b      	lsls	r3, r3, #2
 800fb5a:	4a11      	ldr	r2, [pc, #68]	; (800fba0 <xNetworkBuffersInitialise+0xf0>)
 800fb5c:	4413      	add	r3, r2
 800fb5e:	4619      	mov	r1, r3
 800fb60:	480e      	ldr	r0, [pc, #56]	; (800fb9c <xNetworkBuffersInitialise+0xec>)
 800fb62:	f7f6 f99b 	bl	8005e9c <vListInsert>
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	3301      	adds	r3, #1
 800fb6a:	60bb      	str	r3, [r7, #8]
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	2b18      	cmp	r3, #24
 800fb70:	ddca      	ble.n	800fb08 <xNetworkBuffersInitialise+0x58>
			}

			uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 800fb72:	4b0c      	ldr	r3, [pc, #48]	; (800fba4 <xNetworkBuffersInitialise+0xf4>)
 800fb74:	2219      	movs	r2, #25
 800fb76:	601a      	str	r2, [r3, #0]
		}
	}

	if( xNetworkBufferSemaphore == NULL )
 800fb78:	4b06      	ldr	r3, [pc, #24]	; (800fb94 <xNetworkBuffersInitialise+0xe4>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d102      	bne.n	800fb86 <xNetworkBuffersInitialise+0xd6>
	{
		xReturn = pdFAIL;
 800fb80:	2300      	movs	r3, #0
 800fb82:	60fb      	str	r3, [r7, #12]
 800fb84:	e001      	b.n	800fb8a <xNetworkBuffersInitialise+0xda>
	}
	else
	{
		xReturn = pdPASS;
 800fb86:	2301      	movs	r3, #1
 800fb88:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3710      	adds	r7, #16
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	200045f0 	.word	0x200045f0
 800fb98:	08010f28 	.word	0x08010f28
 800fb9c:	20004254 	.word	0x20004254
 800fba0:	2000426c 	.word	0x2000426c
 800fba4:	20004268 	.word	0x20004268

0800fba8 <vReleaseNetworkBuffer>:
	return pucEthernetBuffer;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBuffer( uint8_t *pucEthernetBuffer )
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
	/* There is space before the Ethernet buffer in which a pointer to the
	network buffer that references this Ethernet buffer is stored.  Remove the
	space before freeing the buffer. */
	if( pucEthernetBuffer != NULL )
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d005      	beq.n	800fbc2 <vReleaseNetworkBuffer+0x1a>
	{
		pucEthernetBuffer -= ipBUFFER_PADDING;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	3b0a      	subs	r3, #10
 800fbba:	607b      	str	r3, [r7, #4]
		vPortFree( ( void * ) pucEthernetBuffer );
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f7f6 fcd1 	bl	8006564 <vPortFree>
	}
}
 800fbc2:	bf00      	nop
 800fbc4:	3708      	adds	r7, #8
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}
	...

0800fbcc <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b086      	sub	sp, #24
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
NetworkBufferDescriptor_t *pxReturn = NULL;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	617b      	str	r3, [r7, #20]
size_t uxCount;

	if( ( xRequestedSizeBytes != 0u ) && ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d004      	beq.n	800fbea <pxGetNetworkBufferWithDescriptor+0x1e>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2b45      	cmp	r3, #69	; 0x45
 800fbe4:	d801      	bhi.n	800fbea <pxGetNetworkBufferWithDescriptor+0x1e>
	{
		/* ARP packets can replace application packets, so the storage must be
		at least large enough to hold an ARP. */
		xRequestedSizeBytes = baMINIMAL_BUFFER_SIZE;
 800fbe6:	2346      	movs	r3, #70	; 0x46
 800fbe8:	607b      	str	r3, [r7, #4]
	}
	xRequestedSizeBytes += 2u;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	3302      	adds	r3, #2
 800fbee:	607b      	str	r3, [r7, #4]
	if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1u ) ) != 0u )
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f003 0303 	and.w	r3, r3, #3
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d004      	beq.n	800fc04 <pxGetNetworkBufferWithDescriptor+0x38>
	{
		xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1u ) ) + 1u;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f043 0303 	orr.w	r3, r3, #3
 800fc00:	3301      	adds	r3, #1
 800fc02:	607b      	str	r3, [r7, #4]
	}

	/* If there is a semaphore available, there is a network buffer available. */
	if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 800fc04:	4b2a      	ldr	r3, [pc, #168]	; (800fcb0 <pxGetNetworkBufferWithDescriptor+0xe4>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	6839      	ldr	r1, [r7, #0]
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7f7 f886 	bl	8006d1c <xQueueSemaphoreTake>
 800fc10:	4603      	mov	r3, r0
 800fc12:	2b01      	cmp	r3, #1
 800fc14:	d146      	bne.n	800fca4 <pxGetNetworkBufferWithDescriptor+0xd8>
	{
		/* Protect the structure as it is accessed from tasks and interrupts. */
		taskENTER_CRITICAL();
 800fc16:	f7f6 fac9 	bl	80061ac <vPortEnterCritical>
		{
			pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 800fc1a:	4b26      	ldr	r3, [pc, #152]	; (800fcb4 <pxGetNetworkBufferWithDescriptor+0xe8>)
 800fc1c:	68db      	ldr	r3, [r3, #12]
 800fc1e:	68db      	ldr	r3, [r3, #12]
 800fc20:	617b      	str	r3, [r7, #20]
			uxListRemove( &( pxReturn->xBufferListItem ) );
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7f6 f972 	bl	8005f0e <uxListRemove>
		}
		taskEXIT_CRITICAL();
 800fc2a:	f7f6 faed 	bl	8006208 <vPortExitCritical>

		/* Reading UBaseType_t, no critical section needed. */
		uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 800fc2e:	4b21      	ldr	r3, [pc, #132]	; (800fcb4 <pxGetNetworkBufferWithDescriptor+0xe8>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	613b      	str	r3, [r7, #16]

		if( uxMinimumFreeNetworkBuffers > uxCount )
 800fc34:	4b20      	ldr	r3, [pc, #128]	; (800fcb8 <pxGetNetworkBufferWithDescriptor+0xec>)
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d902      	bls.n	800fc44 <pxGetNetworkBufferWithDescriptor+0x78>
		{
			uxMinimumFreeNetworkBuffers = uxCount;
 800fc3e:	4a1e      	ldr	r2, [pc, #120]	; (800fcb8 <pxGetNetworkBufferWithDescriptor+0xec>)
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	6013      	str	r3, [r2, #0]
		}

		/* Allocate storage of exactly the requested size to the buffer. */
		configASSERT( pxReturn->pucEthernetBuffer == NULL );
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	699b      	ldr	r3, [r3, #24]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d009      	beq.n	800fc60 <pxGetNetworkBufferWithDescriptor+0x94>
 800fc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc50:	f383 8811 	msr	BASEPRI, r3
 800fc54:	f3bf 8f6f 	isb	sy
 800fc58:	f3bf 8f4f 	dsb	sy
 800fc5c:	60fb      	str	r3, [r7, #12]
 800fc5e:	e7fe      	b.n	800fc5e <pxGetNetworkBufferWithDescriptor+0x92>
		if( xRequestedSizeBytes > 0 )
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d01e      	beq.n	800fca4 <pxGetNetworkBufferWithDescriptor+0xd8>
		{
			/* Extra space is obtained so a pointer to the network buffer can
			be stored at the beginning of the buffer. */
			pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	330a      	adds	r3, #10
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7f6 fbb8 	bl	80063e0 <pvPortMalloc>
 800fc70:	4602      	mov	r2, r0
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	619a      	str	r2, [r3, #24]

			if( pxReturn->pucEthernetBuffer == NULL )
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	699b      	ldr	r3, [r3, #24]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d105      	bne.n	800fc8a <pxGetNetworkBufferWithDescriptor+0xbe>
			{
				/* The attempt to allocate storage for the buffer payload failed,
				so the network buffer structure cannot be used and must be
				released. */
				vReleaseNetworkBufferAndDescriptor( pxReturn );
 800fc7e:	6978      	ldr	r0, [r7, #20]
 800fc80:	f000 f81c 	bl	800fcbc <vReleaseNetworkBufferAndDescriptor>
				pxReturn = NULL;
 800fc84:	2300      	movs	r3, #0
 800fc86:	617b      	str	r3, [r7, #20]
 800fc88:	e00c      	b.n	800fca4 <pxGetNetworkBufferWithDescriptor+0xd8>
			{
				/* Store a pointer to the network buffer structure in the
				buffer storage area, then move the buffer pointer on past the
				stored pointer so the pointer value is not overwritten by the
				application when the buffer is used. */
				*( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	699b      	ldr	r3, [r3, #24]
 800fc8e:	697a      	ldr	r2, [r7, #20]
 800fc90:	601a      	str	r2, [r3, #0]
				pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	699b      	ldr	r3, [r3, #24]
 800fc96:	f103 020a 	add.w	r2, r3, #10
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	619a      	str	r2, [r3, #24]

				/* Store the actual size of the allocated buffer, which may be
				greater than the original requested size. */
				pxReturn->xDataLength = xRequestedSizeBytes;
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	687a      	ldr	r2, [r7, #4]
 800fca2:	61da      	str	r2, [r3, #28]
	else
	{
		iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
	}

	return pxReturn;
 800fca4:	697b      	ldr	r3, [r7, #20]
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3718      	adds	r7, #24
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	200045f0 	.word	0x200045f0
 800fcb4:	20004254 	.word	0x20004254
 800fcb8:	20004268 	.word	0x20004268

0800fcbc <vReleaseNetworkBufferAndDescriptor>:
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b084      	sub	sp, #16
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
	/* Ensure the buffer is returned to the list of free buffers before the
	counting semaphore is 'given' to say a buffer is available.  Release the
	storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
	IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
	MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
	vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	699b      	ldr	r3, [r3, #24]
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7ff ff6d 	bl	800fba8 <vReleaseNetworkBuffer>
	pxNetworkBuffer->pucEthernetBuffer = NULL;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	619a      	str	r2, [r3, #24]

	taskENTER_CRITICAL();
 800fcd4:	f7f6 fa6a 	bl	80061ac <vPortEnterCritical>
	{
		xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	691b      	ldr	r3, [r3, #16]
 800fcdc:	4a0f      	ldr	r2, [pc, #60]	; (800fd1c <vReleaseNetworkBufferAndDescriptor+0x60>)
 800fcde:	4293      	cmp	r3, r2
 800fce0:	bf0c      	ite	eq
 800fce2:	2301      	moveq	r3, #1
 800fce4:	2300      	movne	r3, #0
 800fce6:	b2db      	uxtb	r3, r3
 800fce8:	60fb      	str	r3, [r7, #12]

		if( xListItemAlreadyInFreeList == pdFALSE )
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d104      	bne.n	800fcfa <vReleaseNetworkBufferAndDescriptor+0x3e>
		{
			vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	4809      	ldr	r0, [pc, #36]	; (800fd1c <vReleaseNetworkBufferAndDescriptor+0x60>)
 800fcf6:	f7f6 f8ad 	bl	8005e54 <vListInsertEnd>
		}
	}
	taskEXIT_CRITICAL();
 800fcfa:	f7f6 fa85 	bl	8006208 <vPortExitCritical>

	if( xListItemAlreadyInFreeList == pdFALSE )
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d106      	bne.n	800fd12 <vReleaseNetworkBufferAndDescriptor+0x56>
	{
		xSemaphoreGive( xNetworkBufferSemaphore );
 800fd04:	4b06      	ldr	r3, [pc, #24]	; (800fd20 <vReleaseNetworkBufferAndDescriptor+0x64>)
 800fd06:	6818      	ldr	r0, [r3, #0]
 800fd08:	2300      	movs	r3, #0
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	2100      	movs	r1, #0
 800fd0e:	f7f6 fe2f 	bl	8006970 <xQueueGenericSend>
	}

	iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
}
 800fd12:	bf00      	nop
 800fd14:	3710      	adds	r7, #16
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	20004254 	.word	0x20004254
 800fd20:	200045f0 	.word	0x200045f0

0800fd24 <main>:
static void MX_GPIO_Init(void);
void StartDefaultTask(void const * argument);
void ipInitHandlerTask( void *pvParameters );

int main(void)
{
 800fd24:	b5b0      	push	{r4, r5, r7, lr}
 800fd26:	b088      	sub	sp, #32
 800fd28:	af02      	add	r7, sp, #8
  HAL_Init();
 800fd2a:	f7f0 fbe9 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 800fd2e:	f000 f8a5 	bl	800fe7c <SystemClock_Config>
  MX_GPIO_Init();
 800fd32:	f000 f917 	bl	800ff64 <MX_GPIO_Init>

  /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
  are created in the vApplicationIPNetworkEventHook() hook function
  below.  The hook function is called when the network connects. */

  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800fd36:	4b0e      	ldr	r3, [pc, #56]	; (800fd70 <main+0x4c>)
 800fd38:	1d3c      	adds	r4, r7, #4
 800fd3a:	461d      	mov	r5, r3
 800fd3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd40:	682b      	ldr	r3, [r5, #0]
 800fd42:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800fd44:	1d3b      	adds	r3, r7, #4
 800fd46:	2100      	movs	r1, #0
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7f5 fe1e 	bl	800598a <osThreadCreate>
 800fd4e:	4602      	mov	r2, r0
 800fd50:	4b08      	ldr	r3, [pc, #32]	; (800fd74 <main+0x50>)
 800fd52:	601a      	str	r2, [r3, #0]
  xTaskCreate( ipInitHandlerTask, "IPINIT",  configIPINIT_TASK_STACK_SIZE , NULL, configMAX_PRIORITIES - 1, &xipInitTaskHandle );
 800fd54:	4b08      	ldr	r3, [pc, #32]	; (800fd78 <main+0x54>)
 800fd56:	9301      	str	r3, [sp, #4]
 800fd58:	2306      	movs	r3, #6
 800fd5a:	9300      	str	r3, [sp, #0]
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd62:	4906      	ldr	r1, [pc, #24]	; (800fd7c <main+0x58>)
 800fd64:	4806      	ldr	r0, [pc, #24]	; (800fd80 <main+0x5c>)
 800fd66:	f7f7 fa95 	bl	8007294 <xTaskCreate>

  osKernelStart();
 800fd6a:	f7f5 fe07 	bl	800597c <osKernelStart>
  
  while (1)
 800fd6e:	e7fe      	b.n	800fd6e <main+0x4a>
 800fd70:	08010f48 	.word	0x08010f48
 800fd74:	2000594c 	.word	0x2000594c
 800fd78:	200058d8 	.word	0x200058d8
 800fd7c:	08010f34 	.word	0x08010f34
 800fd80:	0800fd85 	.word	0x0800fd85

0800fd84 <ipInitHandlerTask>:

  }
}

void ipInitHandlerTask( void *pvParameters )
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af02      	add	r7, sp, #8
 800fd8a:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
    ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 800fd8c:	f04f 31ff 	mov.w	r1, #4294967295
 800fd90:	2000      	movs	r0, #0
 800fd92:	f7f8 fb05 	bl	80083a0 <ulTaskNotifyTake>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800fd96:	2201      	movs	r2, #1
 800fd98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fd9c:	4808      	ldr	r0, [pc, #32]	; (800fdc0 <ipInitHandlerTask+0x3c>)
 800fd9e:	f7f0 febd 	bl	8000b1c <HAL_GPIO_WritePin>
	FreeRTOS_IPInit( ucIPAddress,
 800fda2:	4b08      	ldr	r3, [pc, #32]	; (800fdc4 <ipInitHandlerTask+0x40>)
 800fda4:	9300      	str	r3, [sp, #0]
 800fda6:	4b08      	ldr	r3, [pc, #32]	; (800fdc8 <ipInitHandlerTask+0x44>)
 800fda8:	4a08      	ldr	r2, [pc, #32]	; (800fdcc <ipInitHandlerTask+0x48>)
 800fdaa:	4909      	ldr	r1, [pc, #36]	; (800fdd0 <ipInitHandlerTask+0x4c>)
 800fdac:	4809      	ldr	r0, [pc, #36]	; (800fdd4 <ipInitHandlerTask+0x50>)
 800fdae:	f7fa fa95 	bl	800a2dc <FreeRTOS_IPInit>
				   ucNetMask,
				   ucGatewayAddress,
				   ucDNSServerAddress,
				   ucMACAddress );
	vTaskDelete( NULL );
 800fdb2:	2000      	movs	r0, #0
 800fdb4:	f7f7 fb98 	bl	80074e8 <vTaskDelete>
}
 800fdb8:	bf00      	nop
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	40020c00 	.word	0x40020c00
 800fdc4:	200000b8 	.word	0x200000b8
 800fdc8:	080110c8 	.word	0x080110c8
 800fdcc:	080110c4 	.word	0x080110c4
 800fdd0:	080110c0 	.word	0x080110c0
 800fdd4:	080110bc 	.word	0x080110bc

0800fdd8 <vApplicationPingReplyHook>:

/*-----------------------------------------------------------*/

void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b083      	sub	sp, #12
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	4603      	mov	r3, r0
 800fde0:	460a      	mov	r2, r1
 800fde2:	71fb      	strb	r3, [r7, #7]
 800fde4:	4613      	mov	r3, r2
 800fde6:	80bb      	strh	r3, [r7, #4]
}
 800fde8:	bf00      	nop
 800fdea:	370c      	adds	r7, #12
 800fdec:	46bd      	mov	sp, r7
 800fdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf2:	4770      	bx	lr

0800fdf4 <vApplicationIPNetworkEventHook>:


/* Called by FreeRTOS+TCP when the network connects or disconnects.  Disconnect
events are only received if implemented in the MAC driver. */
void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 800fdf4:	b480      	push	{r7}
 800fdf6:	b083      	sub	sp, #12
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	71fb      	strb	r3, [r7, #7]

}
 800fdfe:	bf00      	nop
 800fe00:	370c      	adds	r7, #12
 800fe02:	46bd      	mov	sp, r7
 800fe04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe08:	4770      	bx	lr
	...

0800fe0c <pcApplicationHostnameHook>:

const char *pcApplicationHostnameHook( void )
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	af00      	add	r7, sp, #0
	/* Assign the name "rtosdemo" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return mainHOST_NAME;
 800fe10:	4b02      	ldr	r3, [pc, #8]	; (800fe1c <pcApplicationHostnameHook+0x10>)
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	46bd      	mov	sp, r7
 800fe16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1a:	4770      	bx	lr
 800fe1c:	08010f5c 	.word	0x08010f5c

0800fe20 <uxRand>:

UBaseType_t uxRand( void )
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	af00      	add	r7, sp, #0
	return( ( int ) ( rand() >> 16UL ) & 0x7fffUL );
 800fe24:	f000 ff26 	bl	8010c74 <rand>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	141b      	asrs	r3, r3, #16
 800fe2c:	f3c3 030e 	ubfx	r3, r3, #0, #15
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <xApplicationDNSQueryHook>:



BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b084      	sub	sp, #16
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 800fe3c:	f7ff ffe6 	bl	800fe0c <pcApplicationHostnameHook>
 800fe40:	4603      	mov	r3, r0
 800fe42:	4619      	mov	r1, r3
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f000 ff4f 	bl	8010ce8 <strcasecmp>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d102      	bne.n	800fe56 <xApplicationDNSQueryHook+0x22>
	{
		xReturn = pdPASS;
 800fe50:	2301      	movs	r3, #1
 800fe52:	60fb      	str	r3, [r7, #12]
 800fe54:	e00b      	b.n	800fe6e <xApplicationDNSQueryHook+0x3a>
	}
	else if( strcasecmp( pcName, mainDEVICE_NICK_NAME ) == 0 )
 800fe56:	4908      	ldr	r1, [pc, #32]	; (800fe78 <xApplicationDNSQueryHook+0x44>)
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f000 ff45 	bl	8010ce8 <strcasecmp>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d102      	bne.n	800fe6a <xApplicationDNSQueryHook+0x36>
	{
		xReturn = pdPASS;
 800fe64:	2301      	movs	r3, #1
 800fe66:	60fb      	str	r3, [r7, #12]
 800fe68:	e001      	b.n	800fe6e <xApplicationDNSQueryHook+0x3a>
	}
	else
	{
		xReturn = pdFAIL;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3710      	adds	r7, #16
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}
 800fe78:	08010f68 	.word	0x08010f68

0800fe7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b094      	sub	sp, #80	; 0x50
 800fe80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800fe82:	2300      	movs	r3, #0
 800fe84:	60bb      	str	r3, [r7, #8]
 800fe86:	4a33      	ldr	r2, [pc, #204]	; (800ff54 <SystemClock_Config+0xd8>)
 800fe88:	4b32      	ldr	r3, [pc, #200]	; (800ff54 <SystemClock_Config+0xd8>)
 800fe8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe90:	6413      	str	r3, [r2, #64]	; 0x40
 800fe92:	4b30      	ldr	r3, [pc, #192]	; (800ff54 <SystemClock_Config+0xd8>)
 800fe94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fe9a:	60bb      	str	r3, [r7, #8]
 800fe9c:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800fe9e:	2300      	movs	r3, #0
 800fea0:	607b      	str	r3, [r7, #4]
 800fea2:	4a2d      	ldr	r2, [pc, #180]	; (800ff58 <SystemClock_Config+0xdc>)
 800fea4:	4b2c      	ldr	r3, [pc, #176]	; (800ff58 <SystemClock_Config+0xdc>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800feac:	6013      	str	r3, [r2, #0]
 800feae:	4b2a      	ldr	r3, [pc, #168]	; (800ff58 <SystemClock_Config+0xdc>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800feb6:	607b      	str	r3, [r7, #4]
 800feb8:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800feba:	2301      	movs	r3, #1
 800febc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800febe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fec2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800fec4:	2302      	movs	r3, #2
 800fec6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800fec8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800fece:	2304      	movs	r3, #4
 800fed0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800fed2:	2360      	movs	r3, #96	; 0x60
 800fed4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800fed6:	2306      	movs	r3, #6
 800fed8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800feda:	2304      	movs	r3, #4
 800fedc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800fede:	f107 0320 	add.w	r3, r7, #32
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7f1 fefc 	bl	8001ce0 <HAL_RCC_OscConfig>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	d003      	beq.n	800fef6 <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800feee:	21d4      	movs	r1, #212	; 0xd4
 800fef0:	481a      	ldr	r0, [pc, #104]	; (800ff5c <SystemClock_Config+0xe0>)
 800fef2:	f000 f8bf 	bl	8010074 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800fef6:	230f      	movs	r3, #15
 800fef8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800fefa:	2302      	movs	r3, #2
 800fefc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800fefe:	2300      	movs	r3, #0
 800ff00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800ff02:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ff06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800ff0c:	f107 030c 	add.w	r3, r7, #12
 800ff10:	2101      	movs	r1, #1
 800ff12:	4618      	mov	r0, r3
 800ff14:	f7f2 f926 	bl	8002164 <HAL_RCC_ClockConfig>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d003      	beq.n	800ff26 <SystemClock_Config+0xaa>
  {
    _Error_Handler(__FILE__, __LINE__);
 800ff1e:	21e2      	movs	r1, #226	; 0xe2
 800ff20:	480e      	ldr	r0, [pc, #56]	; (800ff5c <SystemClock_Config+0xe0>)
 800ff22:	f000 f8a7 	bl	8010074 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800ff26:	f7f2 fad7 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 800ff2a:	4602      	mov	r2, r0
 800ff2c:	4b0c      	ldr	r3, [pc, #48]	; (800ff60 <SystemClock_Config+0xe4>)
 800ff2e:	fba3 2302 	umull	r2, r3, r3, r2
 800ff32:	099b      	lsrs	r3, r3, #6
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7f0 fc46 	bl	80007c6 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800ff3a:	2004      	movs	r0, #4
 800ff3c:	f7f0 fc50 	bl	80007e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800ff40:	2200      	movs	r2, #0
 800ff42:	210f      	movs	r1, #15
 800ff44:	f04f 30ff 	mov.w	r0, #4294967295
 800ff48:	f7f0 fc13 	bl	8000772 <HAL_NVIC_SetPriority>
}
 800ff4c:	bf00      	nop
 800ff4e:	3750      	adds	r7, #80	; 0x50
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	40023800 	.word	0x40023800
 800ff58:	40007000 	.word	0x40007000
 800ff5c:	08010f70 	.word	0x08010f70
 800ff60:	10624dd3 	.word	0x10624dd3

0800ff64 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
*/

static void MX_GPIO_Init(void)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b088      	sub	sp, #32
 800ff68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	60bb      	str	r3, [r7, #8]
 800ff6e:	4a2b      	ldr	r2, [pc, #172]	; (801001c <MX_GPIO_Init+0xb8>)
 800ff70:	4b2a      	ldr	r3, [pc, #168]	; (801001c <MX_GPIO_Init+0xb8>)
 800ff72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff78:	6313      	str	r3, [r2, #48]	; 0x30
 800ff7a:	4b28      	ldr	r3, [pc, #160]	; (801001c <MX_GPIO_Init+0xb8>)
 800ff7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff82:	60bb      	str	r3, [r7, #8]
 800ff84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ff86:	2300      	movs	r3, #0
 800ff88:	607b      	str	r3, [r7, #4]
 800ff8a:	4a24      	ldr	r2, [pc, #144]	; (801001c <MX_GPIO_Init+0xb8>)
 800ff8c:	4b23      	ldr	r3, [pc, #140]	; (801001c <MX_GPIO_Init+0xb8>)
 800ff8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff90:	f043 0308 	orr.w	r3, r3, #8
 800ff94:	6313      	str	r3, [r2, #48]	; 0x30
 800ff96:	4b21      	ldr	r3, [pc, #132]	; (801001c <MX_GPIO_Init+0xb8>)
 800ff98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff9a:	f003 0308 	and.w	r3, r3, #8
 800ff9e:	607b      	str	r3, [r7, #4]
 800ffa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	603b      	str	r3, [r7, #0]
 800ffa6:	4a1d      	ldr	r2, [pc, #116]	; (801001c <MX_GPIO_Init+0xb8>)
 800ffa8:	4b1c      	ldr	r3, [pc, #112]	; (801001c <MX_GPIO_Init+0xb8>)
 800ffaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffac:	f043 0301 	orr.w	r3, r3, #1
 800ffb0:	6313      	str	r3, [r2, #48]	; 0x30
 800ffb2:	4b1a      	ldr	r3, [pc, #104]	; (801001c <MX_GPIO_Init+0xb8>)
 800ffb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffb6:	f003 0301 	and.w	r3, r3, #1
 800ffba:	603b      	str	r3, [r7, #0]
 800ffbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ffc4:	4816      	ldr	r0, [pc, #88]	; (8010020 <MX_GPIO_Init+0xbc>)
 800ffc6:	f7f0 fda9 	bl	8000b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800ffca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ffce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ffdc:	f107 030c 	add.w	r3, r7, #12
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	480f      	ldr	r0, [pc, #60]	; (8010020 <MX_GPIO_Init+0xbc>)
 800ffe4:	f7f0 fc18 	bl	8000818 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800ffe8:	2200      	movs	r2, #0
 800ffea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ffee:	480c      	ldr	r0, [pc, #48]	; (8010020 <MX_GPIO_Init+0xbc>)
 800fff0:	f7f0 fd94 	bl	8000b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800fff4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fff8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fffa:	2301      	movs	r3, #1
 800fffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fffe:	2300      	movs	r3, #0
 8010000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010002:	2300      	movs	r3, #0
 8010004:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010006:	f107 030c 	add.w	r3, r7, #12
 801000a:	4619      	mov	r1, r3
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <MX_GPIO_Init+0xbc>)
 801000e:	f7f0 fc03 	bl	8000818 <HAL_GPIO_Init>

}
 8010012:	bf00      	nop
 8010014:	3720      	adds	r7, #32
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	40023800 	.word	0x40023800
 8010020:	40020c00 	.word	0x40020c00

08010024 <StartDefaultTask>:
/* USER CODE END 4 */

/* StartDefaultTask function */

void StartDefaultTask(void const * argument)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 801002c:	f000 f93c 	bl	80102a8 <MX_USB_DEVICE_Init>
  osDelay(2000);
 8010030:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8010034:	f7f5 fcd0 	bl	80059d8 <osDelay>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8010038:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801003c:	4803      	ldr	r0, [pc, #12]	; (801004c <StartDefaultTask+0x28>)
 801003e:	f7f0 fd86 	bl	8000b4e <HAL_GPIO_TogglePin>
    osDelay(1000);
 8010042:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010046:	f7f5 fcc7 	bl	80059d8 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 801004a:	e7f5      	b.n	8010038 <StartDefaultTask+0x14>
 801004c:	40020c00 	.word	0x40020c00

08010050 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	4a04      	ldr	r2, [pc, #16]	; (8010070 <HAL_TIM_PeriodElapsedCallback+0x20>)
 801005e:	4293      	cmp	r3, r2
 8010060:	d101      	bne.n	8010066 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8010062:	f7f0 fa6f 	bl	8000544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8010066:	bf00      	nop
 8010068:	3708      	adds	r7, #8
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
 801006e:	bf00      	nop
 8010070:	40010000 	.word	0x40010000

08010074 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8010074:	b480      	push	{r7}
 8010076:	b083      	sub	sp, #12
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 801007e:	e7fe      	b.n	801007e <_Error_Handler+0xa>

08010080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010086:	2300      	movs	r3, #0
 8010088:	607b      	str	r3, [r7, #4]
 801008a:	4a25      	ldr	r2, [pc, #148]	; (8010120 <HAL_MspInit+0xa0>)
 801008c:	4b24      	ldr	r3, [pc, #144]	; (8010120 <HAL_MspInit+0xa0>)
 801008e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010094:	6453      	str	r3, [r2, #68]	; 0x44
 8010096:	4b22      	ldr	r3, [pc, #136]	; (8010120 <HAL_MspInit+0xa0>)
 8010098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801009a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801009e:	607b      	str	r3, [r7, #4]
 80100a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80100a2:	2300      	movs	r3, #0
 80100a4:	603b      	str	r3, [r7, #0]
 80100a6:	4a1e      	ldr	r2, [pc, #120]	; (8010120 <HAL_MspInit+0xa0>)
 80100a8:	4b1d      	ldr	r3, [pc, #116]	; (8010120 <HAL_MspInit+0xa0>)
 80100aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100b0:	6413      	str	r3, [r2, #64]	; 0x40
 80100b2:	4b1b      	ldr	r3, [pc, #108]	; (8010120 <HAL_MspInit+0xa0>)
 80100b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80100ba:	603b      	str	r3, [r7, #0]
 80100bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80100be:	2003      	movs	r0, #3
 80100c0:	f7f0 fb4c 	bl	800075c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80100c4:	2200      	movs	r2, #0
 80100c6:	2100      	movs	r1, #0
 80100c8:	f06f 000b 	mvn.w	r0, #11
 80100cc:	f7f0 fb51 	bl	8000772 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80100d0:	2200      	movs	r2, #0
 80100d2:	2100      	movs	r1, #0
 80100d4:	f06f 000a 	mvn.w	r0, #10
 80100d8:	f7f0 fb4b 	bl	8000772 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80100dc:	2200      	movs	r2, #0
 80100de:	2100      	movs	r1, #0
 80100e0:	f06f 0009 	mvn.w	r0, #9
 80100e4:	f7f0 fb45 	bl	8000772 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80100e8:	2200      	movs	r2, #0
 80100ea:	2100      	movs	r1, #0
 80100ec:	f06f 0004 	mvn.w	r0, #4
 80100f0:	f7f0 fb3f 	bl	8000772 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80100f4:	2200      	movs	r2, #0
 80100f6:	2100      	movs	r1, #0
 80100f8:	f06f 0003 	mvn.w	r0, #3
 80100fc:	f7f0 fb39 	bl	8000772 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8010100:	2200      	movs	r2, #0
 8010102:	210f      	movs	r1, #15
 8010104:	f06f 0001 	mvn.w	r0, #1
 8010108:	f7f0 fb33 	bl	8000772 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 801010c:	2200      	movs	r2, #0
 801010e:	210f      	movs	r1, #15
 8010110:	f04f 30ff 	mov.w	r0, #4294967295
 8010114:	f7f0 fb2d 	bl	8000772 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010118:	bf00      	nop
 801011a:	3708      	adds	r7, #8
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}
 8010120:	40023800 	.word	0x40023800

08010124 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b08c      	sub	sp, #48	; 0x30
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 801012c:	2300      	movs	r3, #0
 801012e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8010130:	2300      	movs	r3, #0
 8010132:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8010134:	2200      	movs	r2, #0
 8010136:	6879      	ldr	r1, [r7, #4]
 8010138:	2019      	movs	r0, #25
 801013a:	f7f0 fb1a 	bl	8000772 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 801013e:	2019      	movs	r0, #25
 8010140:	f7f0 fb33 	bl	80007aa <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8010144:	2300      	movs	r3, #0
 8010146:	60fb      	str	r3, [r7, #12]
 8010148:	4a1e      	ldr	r2, [pc, #120]	; (80101c4 <HAL_InitTick+0xa0>)
 801014a:	4b1e      	ldr	r3, [pc, #120]	; (80101c4 <HAL_InitTick+0xa0>)
 801014c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801014e:	f043 0301 	orr.w	r3, r3, #1
 8010152:	6453      	str	r3, [r2, #68]	; 0x44
 8010154:	4b1b      	ldr	r3, [pc, #108]	; (80101c4 <HAL_InitTick+0xa0>)
 8010156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010158:	f003 0301 	and.w	r3, r3, #1
 801015c:	60fb      	str	r3, [r7, #12]
 801015e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010160:	f107 0210 	add.w	r2, r7, #16
 8010164:	f107 0314 	add.w	r3, r7, #20
 8010168:	4611      	mov	r1, r2
 801016a:	4618      	mov	r0, r3
 801016c:	f7f2 f9d4 	bl	8002518 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8010170:	f7f2 f9be 	bl	80024f0 <HAL_RCC_GetPCLK2Freq>
 8010174:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8010176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010178:	4a13      	ldr	r2, [pc, #76]	; (80101c8 <HAL_InitTick+0xa4>)
 801017a:	fba2 2303 	umull	r2, r3, r2, r3
 801017e:	0c9b      	lsrs	r3, r3, #18
 8010180:	3b01      	subs	r3, #1
 8010182:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8010184:	4b11      	ldr	r3, [pc, #68]	; (80101cc <HAL_InitTick+0xa8>)
 8010186:	4a12      	ldr	r2, [pc, #72]	; (80101d0 <HAL_InitTick+0xac>)
 8010188:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 801018a:	4b10      	ldr	r3, [pc, #64]	; (80101cc <HAL_InitTick+0xa8>)
 801018c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010190:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8010192:	4a0e      	ldr	r2, [pc, #56]	; (80101cc <HAL_InitTick+0xa8>)
 8010194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010196:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8010198:	4b0c      	ldr	r3, [pc, #48]	; (80101cc <HAL_InitTick+0xa8>)
 801019a:	2200      	movs	r2, #0
 801019c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801019e:	4b0b      	ldr	r3, [pc, #44]	; (80101cc <HAL_InitTick+0xa8>)
 80101a0:	2200      	movs	r2, #0
 80101a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80101a4:	4809      	ldr	r0, [pc, #36]	; (80101cc <HAL_InitTick+0xa8>)
 80101a6:	f7f2 f9e9 	bl	800257c <HAL_TIM_Base_Init>
 80101aa:	4603      	mov	r3, r0
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d104      	bne.n	80101ba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80101b0:	4806      	ldr	r0, [pc, #24]	; (80101cc <HAL_InitTick+0xa8>)
 80101b2:	f7f2 fa18 	bl	80025e6 <HAL_TIM_Base_Start_IT>
 80101b6:	4603      	mov	r3, r0
 80101b8:	e000      	b.n	80101bc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80101ba:	2301      	movs	r3, #1
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3730      	adds	r7, #48	; 0x30
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	40023800 	.word	0x40023800
 80101c8:	431bde83 	.word	0x431bde83
 80101cc:	20005950 	.word	0x20005950
 80101d0:	40010000 	.word	0x40010000

080101d4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80101d4:	b480      	push	{r7}
 80101d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80101d8:	bf00      	nop
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr

080101e2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80101e2:	b480      	push	{r7}
 80101e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80101e6:	e7fe      	b.n	80101e6 <HardFault_Handler+0x4>

080101e8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80101e8:	b480      	push	{r7}
 80101ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80101ec:	e7fe      	b.n	80101ec <MemManage_Handler+0x4>

080101ee <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80101ee:	b480      	push	{r7}
 80101f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80101f2:	e7fe      	b.n	80101f2 <BusFault_Handler+0x4>

080101f4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80101f4:	b480      	push	{r7}
 80101f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80101f8:	e7fe      	b.n	80101f8 <UsageFault_Handler+0x4>

080101fa <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80101fa:	b480      	push	{r7}
 80101fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80101fe:	bf00      	nop
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr

08010208 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 801020c:	f7f5 fbf8 	bl	8005a00 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010210:	bf00      	nop
 8010212:	bd80      	pop	{r7, pc}

08010214 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8010218:	4802      	ldr	r0, [pc, #8]	; (8010224 <TIM1_UP_TIM10_IRQHandler+0x10>)
 801021a:	f7f2 f9ff 	bl	800261c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 801021e:	bf00      	nop
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	20005950 	.word	0x20005950

08010228 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 801022c:	4802      	ldr	r0, [pc, #8]	; (8010238 <OTG_FS_IRQHandler+0x10>)
 801022e:	f7f0 fdc9 	bl	8000dc4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8010232:	bf00      	nop
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	20005bb0 	.word	0x20005bb0

0801023c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801023c:	b480      	push	{r7}
 801023e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010240:	4a16      	ldr	r2, [pc, #88]	; (801029c <SystemInit+0x60>)
 8010242:	4b16      	ldr	r3, [pc, #88]	; (801029c <SystemInit+0x60>)
 8010244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801024c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8010250:	4a13      	ldr	r2, [pc, #76]	; (80102a0 <SystemInit+0x64>)
 8010252:	4b13      	ldr	r3, [pc, #76]	; (80102a0 <SystemInit+0x64>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	f043 0301 	orr.w	r3, r3, #1
 801025a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801025c:	4b10      	ldr	r3, [pc, #64]	; (80102a0 <SystemInit+0x64>)
 801025e:	2200      	movs	r2, #0
 8010260:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010262:	4a0f      	ldr	r2, [pc, #60]	; (80102a0 <SystemInit+0x64>)
 8010264:	4b0e      	ldr	r3, [pc, #56]	; (80102a0 <SystemInit+0x64>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 801026c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010270:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010272:	4b0b      	ldr	r3, [pc, #44]	; (80102a0 <SystemInit+0x64>)
 8010274:	4a0b      	ldr	r2, [pc, #44]	; (80102a4 <SystemInit+0x68>)
 8010276:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010278:	4a09      	ldr	r2, [pc, #36]	; (80102a0 <SystemInit+0x64>)
 801027a:	4b09      	ldr	r3, [pc, #36]	; (80102a0 <SystemInit+0x64>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010282:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010284:	4b06      	ldr	r3, [pc, #24]	; (80102a0 <SystemInit+0x64>)
 8010286:	2200      	movs	r2, #0
 8010288:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801028a:	4b04      	ldr	r3, [pc, #16]	; (801029c <SystemInit+0x60>)
 801028c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010290:	609a      	str	r2, [r3, #8]
#endif
}
 8010292:	bf00      	nop
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr
 801029c:	e000ed00 	.word	0xe000ed00
 80102a0:	40023800 	.word	0x40023800
 80102a4:	24003010 	.word	0x24003010

080102a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80102ac:	2200      	movs	r2, #0
 80102ae:	4906      	ldr	r1, [pc, #24]	; (80102c8 <MX_USB_DEVICE_Init+0x20>)
 80102b0:	4806      	ldr	r0, [pc, #24]	; (80102cc <MX_USB_DEVICE_Init+0x24>)
 80102b2:	f7f4 fbeb 	bl	8004a8c <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80102b6:	4906      	ldr	r1, [pc, #24]	; (80102d0 <MX_USB_DEVICE_Init+0x28>)
 80102b8:	4804      	ldr	r0, [pc, #16]	; (80102cc <MX_USB_DEVICE_Init+0x24>)
 80102ba:	f7f4 fc12 	bl	8004ae2 <USBD_RegisterClass>

  //USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);

  USBD_Start(&hUsbDeviceFS);
 80102be:	4803      	ldr	r0, [pc, #12]	; (80102cc <MX_USB_DEVICE_Init+0x24>)
 80102c0:	f7f4 fc29 	bl	8004b16 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80102c4:	bf00      	nop
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	200000c4 	.word	0x200000c4
 80102cc:	2000598c 	.word	0x2000598c
 80102d0:	20000008 	.word	0x20000008

080102d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b088      	sub	sp, #32
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80102e4:	d139      	bne.n	801035a <HAL_PCD_MspInit+0x86>
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80102e6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80102ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80102ec:	2302      	movs	r3, #2
 80102ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102f0:	2300      	movs	r3, #0
 80102f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80102f4:	2303      	movs	r3, #3
 80102f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80102f8:	230a      	movs	r3, #10
 80102fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80102fc:	f107 030c 	add.w	r3, r7, #12
 8010300:	4619      	mov	r1, r3
 8010302:	4818      	ldr	r0, [pc, #96]	; (8010364 <HAL_PCD_MspInit+0x90>)
 8010304:	f7f0 fa88 	bl	8000818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010308:	f44f 7300 	mov.w	r3, #512	; 0x200
 801030c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801030e:	2300      	movs	r3, #0
 8010310:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010312:	2300      	movs	r3, #0
 8010314:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010316:	f107 030c 	add.w	r3, r7, #12
 801031a:	4619      	mov	r1, r3
 801031c:	4811      	ldr	r0, [pc, #68]	; (8010364 <HAL_PCD_MspInit+0x90>)
 801031e:	f7f0 fa7b 	bl	8000818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010322:	4a11      	ldr	r2, [pc, #68]	; (8010368 <HAL_PCD_MspInit+0x94>)
 8010324:	4b10      	ldr	r3, [pc, #64]	; (8010368 <HAL_PCD_MspInit+0x94>)
 8010326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801032c:	6353      	str	r3, [r2, #52]	; 0x34
 801032e:	2300      	movs	r3, #0
 8010330:	60bb      	str	r3, [r7, #8]
 8010332:	4a0d      	ldr	r2, [pc, #52]	; (8010368 <HAL_PCD_MspInit+0x94>)
 8010334:	4b0c      	ldr	r3, [pc, #48]	; (8010368 <HAL_PCD_MspInit+0x94>)
 8010336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801033c:	6453      	str	r3, [r2, #68]	; 0x44
 801033e:	4b0a      	ldr	r3, [pc, #40]	; (8010368 <HAL_PCD_MspInit+0x94>)
 8010340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010346:	60bb      	str	r3, [r7, #8]
 8010348:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801034a:	2200      	movs	r2, #0
 801034c:	2105      	movs	r1, #5
 801034e:	2043      	movs	r0, #67	; 0x43
 8010350:	f7f0 fa0f 	bl	8000772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010354:	2043      	movs	r0, #67	; 0x43
 8010356:	f7f0 fa28 	bl	80007aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801035a:	bf00      	nop
 801035c:	3720      	adds	r7, #32
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
 8010362:	bf00      	nop
 8010364:	40020000 	.word	0x40020000
 8010368:	40023800 	.word	0x40023800

0801036c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8010380:	4619      	mov	r1, r3
 8010382:	4610      	mov	r0, r2
 8010384:	f7f4 fc10 	bl	8004ba8 <USBD_LL_SetupStage>
}
 8010388:	bf00      	nop
 801038a:	3708      	adds	r7, #8
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	460b      	mov	r3, r1
 801039a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 80103a2:	78fa      	ldrb	r2, [r7, #3]
 80103a4:	6879      	ldr	r1, [r7, #4]
 80103a6:	4613      	mov	r3, r2
 80103a8:	00db      	lsls	r3, r3, #3
 80103aa:	1a9b      	subs	r3, r3, r2
 80103ac:	009b      	lsls	r3, r3, #2
 80103ae:	440b      	add	r3, r1
 80103b0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80103b4:	681a      	ldr	r2, [r3, #0]
 80103b6:	78fb      	ldrb	r3, [r7, #3]
 80103b8:	4619      	mov	r1, r3
 80103ba:	f7f4 fc3f 	bl	8004c3c <USBD_LL_DataOutStage>
}
 80103be:	bf00      	nop
 80103c0:	3708      	adds	r7, #8
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}

080103c6 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80103c6:	b580      	push	{r7, lr}
 80103c8:	b082      	sub	sp, #8
 80103ca:	af00      	add	r7, sp, #0
 80103cc:	6078      	str	r0, [r7, #4]
 80103ce:	460b      	mov	r3, r1
 80103d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 80103d8:	78fa      	ldrb	r2, [r7, #3]
 80103da:	6879      	ldr	r1, [r7, #4]
 80103dc:	4613      	mov	r3, r2
 80103de:	00db      	lsls	r3, r3, #3
 80103e0:	1a9b      	subs	r3, r3, r2
 80103e2:	009b      	lsls	r3, r3, #2
 80103e4:	440b      	add	r3, r1
 80103e6:	3344      	adds	r3, #68	; 0x44
 80103e8:	681a      	ldr	r2, [r3, #0]
 80103ea:	78fb      	ldrb	r3, [r7, #3]
 80103ec:	4619      	mov	r1, r3
 80103ee:	f7f4 fc80 	bl	8004cf2 <USBD_LL_DataInStage>
}
 80103f2:	bf00      	nop
 80103f4:	3708      	adds	r7, #8
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80103fa:	b580      	push	{r7, lr}
 80103fc:	b082      	sub	sp, #8
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8010408:	4618      	mov	r0, r3
 801040a:	f7f4 fd66 	bl	8004eda <USBD_LL_SOF>
}
 801040e:	bf00      	nop
 8010410:	3708      	adds	r7, #8
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}

08010416 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8010416:	b580      	push	{r7, lr}
 8010418:	b084      	sub	sp, #16
 801041a:	af00      	add	r7, sp, #0
 801041c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801041e:	2301      	movs	r3, #1
 8010420:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	68db      	ldr	r3, [r3, #12]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d002      	beq.n	8010430 <HAL_PCD_ResetCallback+0x1a>
 801042a:	2b02      	cmp	r3, #2
 801042c:	d003      	beq.n	8010436 <HAL_PCD_ResetCallback+0x20>
 801042e:	e005      	b.n	801043c <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8010430:	2300      	movs	r3, #0
 8010432:	73fb      	strb	r3, [r7, #15]
    break;
 8010434:	e005      	b.n	8010442 <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8010436:	2301      	movs	r3, #1
 8010438:	73fb      	strb	r3, [r7, #15]
    break;
 801043a:	e002      	b.n	8010442 <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 801043c:	2301      	movs	r3, #1
 801043e:	73fb      	strb	r3, [r7, #15]
    break;    
 8010440:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8010448:	7bfa      	ldrb	r2, [r7, #15]
 801044a:	4611      	mov	r1, r2
 801044c:	4618      	mov	r0, r3
 801044e:	f7f4 fd0e 	bl	8004e6e <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8010458:	4618      	mov	r0, r3
 801045a:	f7f4 fcd9 	bl	8004e10 <USBD_LL_Reset>
}
 801045e:	bf00      	nop
 8010460:	3710      	adds	r7, #16
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
	...

08010468 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b082      	sub	sp, #8
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8010476:	4618      	mov	r0, r3
 8010478:	f7f4 fd09 	bl	8004e8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010484:	461a      	mov	r2, r3
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	f043 0301 	orr.w	r3, r3, #1
 8010494:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6a1b      	ldr	r3, [r3, #32]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d005      	beq.n	80104aa <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801049e:	4a05      	ldr	r2, [pc, #20]	; (80104b4 <HAL_PCD_SuspendCallback+0x4c>)
 80104a0:	4b04      	ldr	r3, [pc, #16]	; (80104b4 <HAL_PCD_SuspendCallback+0x4c>)
 80104a2:	691b      	ldr	r3, [r3, #16]
 80104a4:	f043 0306 	orr.w	r3, r3, #6
 80104a8:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80104aa:	bf00      	nop
 80104ac:	3708      	adds	r7, #8
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
 80104b2:	bf00      	nop
 80104b4:	e000ed00 	.word	0xe000ed00

080104b8 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7f4 fcf6 	bl	8004eb8 <USBD_LL_Resume>
}
 80104cc:	bf00      	nop
 80104ce:	3708      	adds	r7, #8
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}

080104d4 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b082      	sub	sp, #8
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	460b      	mov	r3, r1
 80104de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80104e6:	78fa      	ldrb	r2, [r7, #3]
 80104e8:	4611      	mov	r1, r2
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7f4 fd1c 	bl	8004f28 <USBD_LL_IsoOUTIncomplete>
}
 80104f0:	bf00      	nop
 80104f2:	3708      	adds	r7, #8
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}

080104f8 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b082      	sub	sp, #8
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	460b      	mov	r3, r1
 8010502:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 801050a:	78fa      	ldrb	r2, [r7, #3]
 801050c:	4611      	mov	r1, r2
 801050e:	4618      	mov	r0, r3
 8010510:	f7f4 fcfd 	bl	8004f0e <USBD_LL_IsoINIncomplete>
}
 8010514:	bf00      	nop
 8010516:	3708      	adds	r7, #8
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}

0801051c <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 801052a:	4618      	mov	r0, r3
 801052c:	f7f4 fd09 	bl	8004f42 <USBD_LL_DevConnected>
}
 8010530:	bf00      	nop
 8010532:	3708      	adds	r7, #8
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8010546:	4618      	mov	r0, r3
 8010548:	f7f4 fd06 	bl	8004f58 <USBD_LL_DevDisconnected>
}
 801054c:	bf00      	nop
 801054e:	3708      	adds	r7, #8
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d147      	bne.n	80105f4 <USBD_LL_Init+0xa0>
	  /* Link the driver to the stack. */
	  hpcd_USB_OTG_FS.pData = pdev;
 8010564:	4a26      	ldr	r2, [pc, #152]	; (8010600 <USBD_LL_Init+0xac>)
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
	  pdev->pData = &hpcd_USB_OTG_FS;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	4a24      	ldr	r2, [pc, #144]	; (8010600 <USBD_LL_Init+0xac>)
 8010570:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

	  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010574:	4b22      	ldr	r3, [pc, #136]	; (8010600 <USBD_LL_Init+0xac>)
 8010576:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801057a:	601a      	str	r2, [r3, #0]
	  hpcd_USB_OTG_FS.Init.dev_endpoints = 3;
 801057c:	4b20      	ldr	r3, [pc, #128]	; (8010600 <USBD_LL_Init+0xac>)
 801057e:	2203      	movs	r2, #3
 8010580:	605a      	str	r2, [r3, #4]
	  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010582:	4b1f      	ldr	r3, [pc, #124]	; (8010600 <USBD_LL_Init+0xac>)
 8010584:	2202      	movs	r2, #2
 8010586:	60da      	str	r2, [r3, #12]
	  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010588:	4b1d      	ldr	r3, [pc, #116]	; (8010600 <USBD_LL_Init+0xac>)
 801058a:	2200      	movs	r2, #0
 801058c:	611a      	str	r2, [r3, #16]
	  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 801058e:	4b1c      	ldr	r3, [pc, #112]	; (8010600 <USBD_LL_Init+0xac>)
 8010590:	2200      	movs	r2, #0
 8010592:	615a      	str	r2, [r3, #20]
	  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010594:	4b1a      	ldr	r3, [pc, #104]	; (8010600 <USBD_LL_Init+0xac>)
 8010596:	2202      	movs	r2, #2
 8010598:	619a      	str	r2, [r3, #24]
	  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801059a:	4b19      	ldr	r3, [pc, #100]	; (8010600 <USBD_LL_Init+0xac>)
 801059c:	2200      	movs	r2, #0
 801059e:	61da      	str	r2, [r3, #28]
	  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80105a0:	4b17      	ldr	r3, [pc, #92]	; (8010600 <USBD_LL_Init+0xac>)
 80105a2:	2200      	movs	r2, #0
 80105a4:	621a      	str	r2, [r3, #32]
	  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80105a6:	4b16      	ldr	r3, [pc, #88]	; (8010600 <USBD_LL_Init+0xac>)
 80105a8:	2200      	movs	r2, #0
 80105aa:	625a      	str	r2, [r3, #36]	; 0x24
	  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80105ac:	4b14      	ldr	r3, [pc, #80]	; (8010600 <USBD_LL_Init+0xac>)
 80105ae:	2200      	movs	r2, #0
 80105b0:	62da      	str	r2, [r3, #44]	; 0x2c
	  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80105b2:	4b13      	ldr	r3, [pc, #76]	; (8010600 <USBD_LL_Init+0xac>)
 80105b4:	2200      	movs	r2, #0
 80105b6:	631a      	str	r2, [r3, #48]	; 0x30
	  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK){
 80105b8:	4811      	ldr	r0, [pc, #68]	; (8010600 <USBD_LL_Init+0xac>)
 80105ba:	f7f0 fada 	bl	8000b72 <HAL_PCD_Init>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d004      	beq.n	80105ce <USBD_LL_Init+0x7a>
		_Error_Handler(__FILE__, __LINE__);
 80105c4:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80105c8:	480e      	ldr	r0, [pc, #56]	; (8010604 <USBD_LL_Init+0xb0>)
 80105ca:	f7ff fd53 	bl	8010074 <_Error_Handler>
	  }

	  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80105ce:	2180      	movs	r1, #128	; 0x80
 80105d0:	480b      	ldr	r0, [pc, #44]	; (8010600 <USBD_LL_Init+0xac>)
 80105d2:	f7f1 fb73 	bl	8001cbc <HAL_PCDEx_SetRxFiFo>
	  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80105d6:	2240      	movs	r2, #64	; 0x40
 80105d8:	2100      	movs	r1, #0
 80105da:	4809      	ldr	r0, [pc, #36]	; (8010600 <USBD_LL_Init+0xac>)
 80105dc:	f7f1 fb23 	bl	8001c26 <HAL_PCDEx_SetTxFiFo>
	  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x40);
 80105e0:	2240      	movs	r2, #64	; 0x40
 80105e2:	2101      	movs	r1, #1
 80105e4:	4806      	ldr	r0, [pc, #24]	; (8010600 <USBD_LL_Init+0xac>)
 80105e6:	f7f1 fb1e 	bl	8001c26 <HAL_PCDEx_SetTxFiFo>
	  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 0x64);
 80105ea:	2264      	movs	r2, #100	; 0x64
 80105ec:	2102      	movs	r1, #2
 80105ee:	4804      	ldr	r0, [pc, #16]	; (8010600 <USBD_LL_Init+0xac>)
 80105f0:	f7f1 fb19 	bl	8001c26 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80105f4:	2300      	movs	r3, #0
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3708      	adds	r7, #8
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
 80105fe:	bf00      	nop
 8010600:	20005bb0 	.word	0x20005bb0
 8010604:	08010f80 	.word	0x08010f80

08010608 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b084      	sub	sp, #16
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010610:	2300      	movs	r3, #0
 8010612:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010614:	2300      	movs	r3, #0
 8010616:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801061e:	4618      	mov	r0, r3
 8010620:	f7f0 fbae 	bl	8000d80 <HAL_PCD_Start>
 8010624:	4603      	mov	r3, r0
 8010626:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8010628:	7bbb      	ldrb	r3, [r7, #14]
 801062a:	2b03      	cmp	r3, #3
 801062c:	d816      	bhi.n	801065c <USBD_LL_Start+0x54>
 801062e:	a201      	add	r2, pc, #4	; (adr r2, 8010634 <USBD_LL_Start+0x2c>)
 8010630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010634:	08010645 	.word	0x08010645
 8010638:	0801064b 	.word	0x0801064b
 801063c:	08010651 	.word	0x08010651
 8010640:	08010657 	.word	0x08010657
    case HAL_OK :
      usb_status = USBD_OK;
 8010644:	2300      	movs	r3, #0
 8010646:	73fb      	strb	r3, [r7, #15]
    break;
 8010648:	e00b      	b.n	8010662 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801064a:	2302      	movs	r3, #2
 801064c:	73fb      	strb	r3, [r7, #15]
    break;
 801064e:	e008      	b.n	8010662 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010650:	2301      	movs	r3, #1
 8010652:	73fb      	strb	r3, [r7, #15]
    break;
 8010654:	e005      	b.n	8010662 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010656:	2302      	movs	r3, #2
 8010658:	73fb      	strb	r3, [r7, #15]
    break;
 801065a:	e002      	b.n	8010662 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 801065c:	2302      	movs	r3, #2
 801065e:	73fb      	strb	r3, [r7, #15]
    break;
 8010660:	bf00      	nop
  }
  return usb_status;
 8010662:	7bfb      	ldrb	r3, [r7, #15]
}
 8010664:	4618      	mov	r0, r3
 8010666:	3710      	adds	r7, #16
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b084      	sub	sp, #16
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	4608      	mov	r0, r1
 8010676:	4611      	mov	r1, r2
 8010678:	461a      	mov	r2, r3
 801067a:	4603      	mov	r3, r0
 801067c:	70fb      	strb	r3, [r7, #3]
 801067e:	460b      	mov	r3, r1
 8010680:	70bb      	strb	r3, [r7, #2]
 8010682:	4613      	mov	r3, r2
 8010684:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010686:	2300      	movs	r3, #0
 8010688:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801068a:	2300      	movs	r3, #0
 801068c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8010694:	78bb      	ldrb	r3, [r7, #2]
 8010696:	883a      	ldrh	r2, [r7, #0]
 8010698:	78f9      	ldrb	r1, [r7, #3]
 801069a:	f7f1 f83e 	bl	800171a <HAL_PCD_EP_Open>
 801069e:	4603      	mov	r3, r0
 80106a0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80106a2:	7bbb      	ldrb	r3, [r7, #14]
 80106a4:	2b03      	cmp	r3, #3
 80106a6:	d817      	bhi.n	80106d8 <USBD_LL_OpenEP+0x6c>
 80106a8:	a201      	add	r2, pc, #4	; (adr r2, 80106b0 <USBD_LL_OpenEP+0x44>)
 80106aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ae:	bf00      	nop
 80106b0:	080106c1 	.word	0x080106c1
 80106b4:	080106c7 	.word	0x080106c7
 80106b8:	080106cd 	.word	0x080106cd
 80106bc:	080106d3 	.word	0x080106d3
    case HAL_OK :
      usb_status = USBD_OK;
 80106c0:	2300      	movs	r3, #0
 80106c2:	73fb      	strb	r3, [r7, #15]
    break;
 80106c4:	e00b      	b.n	80106de <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80106c6:	2302      	movs	r3, #2
 80106c8:	73fb      	strb	r3, [r7, #15]
    break;
 80106ca:	e008      	b.n	80106de <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80106cc:	2301      	movs	r3, #1
 80106ce:	73fb      	strb	r3, [r7, #15]
    break;
 80106d0:	e005      	b.n	80106de <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80106d2:	2302      	movs	r3, #2
 80106d4:	73fb      	strb	r3, [r7, #15]
    break;
 80106d6:	e002      	b.n	80106de <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80106d8:	2302      	movs	r3, #2
 80106da:	73fb      	strb	r3, [r7, #15]
    break;
 80106dc:	bf00      	nop
  }
  return usb_status;
 80106de:	7bfb      	ldrb	r3, [r7, #15]
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	3710      	adds	r7, #16
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}

080106e8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b084      	sub	sp, #16
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	460b      	mov	r3, r1
 80106f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106f4:	2300      	movs	r3, #0
 80106f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106f8:	2300      	movs	r3, #0
 80106fa:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010702:	78fa      	ldrb	r2, [r7, #3]
 8010704:	4611      	mov	r1, r2
 8010706:	4618      	mov	r0, r3
 8010708:	f7f1 f86f 	bl	80017ea <HAL_PCD_EP_Close>
 801070c:	4603      	mov	r3, r0
 801070e:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8010710:	7bbb      	ldrb	r3, [r7, #14]
 8010712:	2b03      	cmp	r3, #3
 8010714:	d816      	bhi.n	8010744 <USBD_LL_CloseEP+0x5c>
 8010716:	a201      	add	r2, pc, #4	; (adr r2, 801071c <USBD_LL_CloseEP+0x34>)
 8010718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801071c:	0801072d 	.word	0x0801072d
 8010720:	08010733 	.word	0x08010733
 8010724:	08010739 	.word	0x08010739
 8010728:	0801073f 	.word	0x0801073f
    case HAL_OK :
      usb_status = USBD_OK;
 801072c:	2300      	movs	r3, #0
 801072e:	73fb      	strb	r3, [r7, #15]
    break;
 8010730:	e00b      	b.n	801074a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010732:	2302      	movs	r3, #2
 8010734:	73fb      	strb	r3, [r7, #15]
    break;
 8010736:	e008      	b.n	801074a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010738:	2301      	movs	r3, #1
 801073a:	73fb      	strb	r3, [r7, #15]
    break;
 801073c:	e005      	b.n	801074a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801073e:	2302      	movs	r3, #2
 8010740:	73fb      	strb	r3, [r7, #15]
    break;
 8010742:	e002      	b.n	801074a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010744:	2302      	movs	r3, #2
 8010746:	73fb      	strb	r3, [r7, #15]
    break;
 8010748:	bf00      	nop
  }
  return usb_status;  
 801074a:	7bfb      	ldrb	r3, [r7, #15]
}
 801074c:	4618      	mov	r0, r3
 801074e:	3710      	adds	r7, #16
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}

08010754 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	460b      	mov	r3, r1
 801075e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010760:	2300      	movs	r3, #0
 8010762:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010764:	2300      	movs	r3, #0
 8010766:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801076e:	78fa      	ldrb	r2, [r7, #3]
 8010770:	4611      	mov	r1, r2
 8010772:	4618      	mov	r0, r3
 8010774:	f7f1 f92f 	bl	80019d6 <HAL_PCD_EP_SetStall>
 8010778:	4603      	mov	r3, r0
 801077a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801077c:	7bbb      	ldrb	r3, [r7, #14]
 801077e:	2b03      	cmp	r3, #3
 8010780:	d816      	bhi.n	80107b0 <USBD_LL_StallEP+0x5c>
 8010782:	a201      	add	r2, pc, #4	; (adr r2, 8010788 <USBD_LL_StallEP+0x34>)
 8010784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010788:	08010799 	.word	0x08010799
 801078c:	0801079f 	.word	0x0801079f
 8010790:	080107a5 	.word	0x080107a5
 8010794:	080107ab 	.word	0x080107ab
    case HAL_OK :
      usb_status = USBD_OK;
 8010798:	2300      	movs	r3, #0
 801079a:	73fb      	strb	r3, [r7, #15]
    break;
 801079c:	e00b      	b.n	80107b6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801079e:	2302      	movs	r3, #2
 80107a0:	73fb      	strb	r3, [r7, #15]
    break;
 80107a2:	e008      	b.n	80107b6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80107a4:	2301      	movs	r3, #1
 80107a6:	73fb      	strb	r3, [r7, #15]
    break;
 80107a8:	e005      	b.n	80107b6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80107aa:	2302      	movs	r3, #2
 80107ac:	73fb      	strb	r3, [r7, #15]
    break;
 80107ae:	e002      	b.n	80107b6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80107b0:	2302      	movs	r3, #2
 80107b2:	73fb      	strb	r3, [r7, #15]
    break;
 80107b4:	bf00      	nop
  }
  return usb_status;  
 80107b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3710      	adds	r7, #16
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}

080107c0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b084      	sub	sp, #16
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	460b      	mov	r3, r1
 80107ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107cc:	2300      	movs	r3, #0
 80107ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107d0:	2300      	movs	r3, #0
 80107d2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80107da:	78fa      	ldrb	r2, [r7, #3]
 80107dc:	4611      	mov	r1, r2
 80107de:	4618      	mov	r0, r3
 80107e0:	f7f1 f954 	bl	8001a8c <HAL_PCD_EP_ClrStall>
 80107e4:	4603      	mov	r3, r0
 80107e6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80107e8:	7bbb      	ldrb	r3, [r7, #14]
 80107ea:	2b03      	cmp	r3, #3
 80107ec:	d816      	bhi.n	801081c <USBD_LL_ClearStallEP+0x5c>
 80107ee:	a201      	add	r2, pc, #4	; (adr r2, 80107f4 <USBD_LL_ClearStallEP+0x34>)
 80107f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107f4:	08010805 	.word	0x08010805
 80107f8:	0801080b 	.word	0x0801080b
 80107fc:	08010811 	.word	0x08010811
 8010800:	08010817 	.word	0x08010817
    case HAL_OK :
      usb_status = USBD_OK;
 8010804:	2300      	movs	r3, #0
 8010806:	73fb      	strb	r3, [r7, #15]
    break;
 8010808:	e00b      	b.n	8010822 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801080a:	2302      	movs	r3, #2
 801080c:	73fb      	strb	r3, [r7, #15]
    break;
 801080e:	e008      	b.n	8010822 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010810:	2301      	movs	r3, #1
 8010812:	73fb      	strb	r3, [r7, #15]
    break;
 8010814:	e005      	b.n	8010822 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010816:	2302      	movs	r3, #2
 8010818:	73fb      	strb	r3, [r7, #15]
    break;
 801081a:	e002      	b.n	8010822 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801081c:	2302      	movs	r3, #2
 801081e:	73fb      	strb	r3, [r7, #15]
    break;
 8010820:	bf00      	nop
  }
  return usb_status; 
 8010822:	7bfb      	ldrb	r3, [r7, #15]
}
 8010824:	4618      	mov	r0, r3
 8010826:	3710      	adds	r7, #16
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}

0801082c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801082c:	b480      	push	{r7}
 801082e:	b085      	sub	sp, #20
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	460b      	mov	r3, r1
 8010836:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801083e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8010840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010844:	2b00      	cmp	r3, #0
 8010846:	da0b      	bge.n	8010860 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8010848:	78fb      	ldrb	r3, [r7, #3]
 801084a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801084e:	68f9      	ldr	r1, [r7, #12]
 8010850:	4613      	mov	r3, r2
 8010852:	00db      	lsls	r3, r3, #3
 8010854:	1a9b      	subs	r3, r3, r2
 8010856:	009b      	lsls	r3, r3, #2
 8010858:	440b      	add	r3, r1
 801085a:	333a      	adds	r3, #58	; 0x3a
 801085c:	781b      	ldrb	r3, [r3, #0]
 801085e:	e00b      	b.n	8010878 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8010860:	78fb      	ldrb	r3, [r7, #3]
 8010862:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010866:	68f9      	ldr	r1, [r7, #12]
 8010868:	4613      	mov	r3, r2
 801086a:	00db      	lsls	r3, r3, #3
 801086c:	1a9b      	subs	r3, r3, r2
 801086e:	009b      	lsls	r3, r3, #2
 8010870:	440b      	add	r3, r1
 8010872:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8010876:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010878:	4618      	mov	r0, r3
 801087a:	3714      	adds	r7, #20
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b084      	sub	sp, #16
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	460b      	mov	r3, r1
 801088e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010890:	2300      	movs	r3, #0
 8010892:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010894:	2300      	movs	r3, #0
 8010896:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801089e:	78fa      	ldrb	r2, [r7, #3]
 80108a0:	4611      	mov	r1, r2
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7f0 ff18 	bl	80016d8 <HAL_PCD_SetAddress>
 80108a8:	4603      	mov	r3, r0
 80108aa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80108ac:	7bbb      	ldrb	r3, [r7, #14]
 80108ae:	2b03      	cmp	r3, #3
 80108b0:	d816      	bhi.n	80108e0 <USBD_LL_SetUSBAddress+0x5c>
 80108b2:	a201      	add	r2, pc, #4	; (adr r2, 80108b8 <USBD_LL_SetUSBAddress+0x34>)
 80108b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108b8:	080108c9 	.word	0x080108c9
 80108bc:	080108cf 	.word	0x080108cf
 80108c0:	080108d5 	.word	0x080108d5
 80108c4:	080108db 	.word	0x080108db
    case HAL_OK :
      usb_status = USBD_OK;
 80108c8:	2300      	movs	r3, #0
 80108ca:	73fb      	strb	r3, [r7, #15]
    break;
 80108cc:	e00b      	b.n	80108e6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80108ce:	2302      	movs	r3, #2
 80108d0:	73fb      	strb	r3, [r7, #15]
    break;
 80108d2:	e008      	b.n	80108e6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80108d4:	2301      	movs	r3, #1
 80108d6:	73fb      	strb	r3, [r7, #15]
    break;
 80108d8:	e005      	b.n	80108e6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80108da:	2302      	movs	r3, #2
 80108dc:	73fb      	strb	r3, [r7, #15]
    break;
 80108de:	e002      	b.n	80108e6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80108e0:	2302      	movs	r3, #2
 80108e2:	73fb      	strb	r3, [r7, #15]
    break;
 80108e4:	bf00      	nop
  }
  return usb_status;  
 80108e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	3710      	adds	r7, #16
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}

080108f0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b086      	sub	sp, #24
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	607a      	str	r2, [r7, #4]
 80108fa:	461a      	mov	r2, r3
 80108fc:	460b      	mov	r3, r1
 80108fe:	72fb      	strb	r3, [r7, #11]
 8010900:	4613      	mov	r3, r2
 8010902:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010904:	2300      	movs	r3, #0
 8010906:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010908:	2300      	movs	r3, #0
 801090a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8010912:	893b      	ldrh	r3, [r7, #8]
 8010914:	7af9      	ldrb	r1, [r7, #11]
 8010916:	687a      	ldr	r2, [r7, #4]
 8010918:	f7f1 f814 	bl	8001944 <HAL_PCD_EP_Transmit>
 801091c:	4603      	mov	r3, r0
 801091e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8010920:	7dbb      	ldrb	r3, [r7, #22]
 8010922:	2b03      	cmp	r3, #3
 8010924:	d816      	bhi.n	8010954 <USBD_LL_Transmit+0x64>
 8010926:	a201      	add	r2, pc, #4	; (adr r2, 801092c <USBD_LL_Transmit+0x3c>)
 8010928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801092c:	0801093d 	.word	0x0801093d
 8010930:	08010943 	.word	0x08010943
 8010934:	08010949 	.word	0x08010949
 8010938:	0801094f 	.word	0x0801094f
    case HAL_OK :
      usb_status = USBD_OK;
 801093c:	2300      	movs	r3, #0
 801093e:	75fb      	strb	r3, [r7, #23]
    break;
 8010940:	e00b      	b.n	801095a <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010942:	2302      	movs	r3, #2
 8010944:	75fb      	strb	r3, [r7, #23]
    break;
 8010946:	e008      	b.n	801095a <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010948:	2301      	movs	r3, #1
 801094a:	75fb      	strb	r3, [r7, #23]
    break;
 801094c:	e005      	b.n	801095a <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801094e:	2302      	movs	r3, #2
 8010950:	75fb      	strb	r3, [r7, #23]
    break;
 8010952:	e002      	b.n	801095a <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8010954:	2302      	movs	r3, #2
 8010956:	75fb      	strb	r3, [r7, #23]
    break;
 8010958:	bf00      	nop
  }
  return usb_status;    
 801095a:	7dfb      	ldrb	r3, [r7, #23]
}
 801095c:	4618      	mov	r0, r3
 801095e:	3718      	adds	r7, #24
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b086      	sub	sp, #24
 8010968:	af00      	add	r7, sp, #0
 801096a:	60f8      	str	r0, [r7, #12]
 801096c:	607a      	str	r2, [r7, #4]
 801096e:	461a      	mov	r2, r3
 8010970:	460b      	mov	r3, r1
 8010972:	72fb      	strb	r3, [r7, #11]
 8010974:	4613      	mov	r3, r2
 8010976:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010978:	2300      	movs	r3, #0
 801097a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801097c:	2300      	movs	r3, #0
 801097e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8010986:	893b      	ldrh	r3, [r7, #8]
 8010988:	7af9      	ldrb	r1, [r7, #11]
 801098a:	687a      	ldr	r2, [r7, #4]
 801098c:	f7f0 ff77 	bl	800187e <HAL_PCD_EP_Receive>
 8010990:	4603      	mov	r3, r0
 8010992:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8010994:	7dbb      	ldrb	r3, [r7, #22]
 8010996:	2b03      	cmp	r3, #3
 8010998:	d816      	bhi.n	80109c8 <USBD_LL_PrepareReceive+0x64>
 801099a:	a201      	add	r2, pc, #4	; (adr r2, 80109a0 <USBD_LL_PrepareReceive+0x3c>)
 801099c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109a0:	080109b1 	.word	0x080109b1
 80109a4:	080109b7 	.word	0x080109b7
 80109a8:	080109bd 	.word	0x080109bd
 80109ac:	080109c3 	.word	0x080109c3
    case HAL_OK :
      usb_status = USBD_OK;
 80109b0:	2300      	movs	r3, #0
 80109b2:	75fb      	strb	r3, [r7, #23]
    break;
 80109b4:	e00b      	b.n	80109ce <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80109b6:	2302      	movs	r3, #2
 80109b8:	75fb      	strb	r3, [r7, #23]
    break;
 80109ba:	e008      	b.n	80109ce <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80109bc:	2301      	movs	r3, #1
 80109be:	75fb      	strb	r3, [r7, #23]
    break;
 80109c0:	e005      	b.n	80109ce <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80109c2:	2302      	movs	r3, #2
 80109c4:	75fb      	strb	r3, [r7, #23]
    break;
 80109c6:	e002      	b.n	80109ce <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 80109c8:	2302      	movs	r3, #2
 80109ca:	75fb      	strb	r3, [r7, #23]
    break;
 80109cc:	bf00      	nop
  }
  return usb_status; 
 80109ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3718      	adds	r7, #24
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	460b      	mov	r3, r1
 80109e2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80109ea:	78fa      	ldrb	r2, [r7, #3]
 80109ec:	4611      	mov	r1, r2
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7f0 ff8f 	bl	8001912 <HAL_PCD_EP_GetRxCount>
 80109f4:	4603      	mov	r3, r0
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3708      	adds	r7, #8
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
	...

08010a00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a00:	b480      	push	{r7}
 8010a02:	b083      	sub	sp, #12
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	4603      	mov	r3, r0
 8010a08:	6039      	str	r1, [r7, #0]
 8010a0a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	2212      	movs	r2, #18
 8010a10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010a12:	4b03      	ldr	r3, [pc, #12]	; (8010a20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	370c      	adds	r7, #12
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr
 8010a20:	200000e0 	.word	0x200000e0

08010a24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	6039      	str	r1, [r7, #0]
 8010a2e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	2204      	movs	r2, #4
 8010a34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010a36:	4b03      	ldr	r3, [pc, #12]	; (8010a44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010a38:	4618      	mov	r0, r3
 8010a3a:	370c      	adds	r7, #12
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr
 8010a44:	200000f4 	.word	0x200000f4

08010a48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b082      	sub	sp, #8
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	4603      	mov	r3, r0
 8010a50:	6039      	str	r1, [r7, #0]
 8010a52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010a54:	79fb      	ldrb	r3, [r7, #7]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d105      	bne.n	8010a66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a5a:	683a      	ldr	r2, [r7, #0]
 8010a5c:	4907      	ldr	r1, [pc, #28]	; (8010a7c <USBD_FS_ProductStrDescriptor+0x34>)
 8010a5e:	4808      	ldr	r0, [pc, #32]	; (8010a80 <USBD_FS_ProductStrDescriptor+0x38>)
 8010a60:	f7f4 fe95 	bl	800578e <USBD_GetString>
 8010a64:	e004      	b.n	8010a70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a66:	683a      	ldr	r2, [r7, #0]
 8010a68:	4904      	ldr	r1, [pc, #16]	; (8010a7c <USBD_FS_ProductStrDescriptor+0x34>)
 8010a6a:	4805      	ldr	r0, [pc, #20]	; (8010a80 <USBD_FS_ProductStrDescriptor+0x38>)
 8010a6c:	f7f4 fe8f 	bl	800578e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010a70:	4b02      	ldr	r3, [pc, #8]	; (8010a7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3708      	adds	r7, #8
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	20005fa0 	.word	0x20005fa0
 8010a80:	08010f94 	.word	0x08010f94

08010a84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	6039      	str	r1, [r7, #0]
 8010a8e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010a90:	683a      	ldr	r2, [r7, #0]
 8010a92:	4904      	ldr	r1, [pc, #16]	; (8010aa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010a94:	4804      	ldr	r0, [pc, #16]	; (8010aa8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010a96:	f7f4 fe7a 	bl	800578e <USBD_GetString>
  return USBD_StrDesc;
 8010a9a:	4b02      	ldr	r3, [pc, #8]	; (8010aa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3708      	adds	r7, #8
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	20005fa0 	.word	0x20005fa0
 8010aa8:	08010fa4 	.word	0x08010fa4

08010aac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b082      	sub	sp, #8
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	6039      	str	r1, [r7, #0]
 8010ab6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010ab8:	79fb      	ldrb	r3, [r7, #7]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d105      	bne.n	8010aca <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8010abe:	683a      	ldr	r2, [r7, #0]
 8010ac0:	4907      	ldr	r1, [pc, #28]	; (8010ae0 <USBD_FS_SerialStrDescriptor+0x34>)
 8010ac2:	4808      	ldr	r0, [pc, #32]	; (8010ae4 <USBD_FS_SerialStrDescriptor+0x38>)
 8010ac4:	f7f4 fe63 	bl	800578e <USBD_GetString>
 8010ac8:	e004      	b.n	8010ad4 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8010aca:	683a      	ldr	r2, [r7, #0]
 8010acc:	4904      	ldr	r1, [pc, #16]	; (8010ae0 <USBD_FS_SerialStrDescriptor+0x34>)
 8010ace:	4805      	ldr	r0, [pc, #20]	; (8010ae4 <USBD_FS_SerialStrDescriptor+0x38>)
 8010ad0:	f7f4 fe5d 	bl	800578e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ad4:	4b02      	ldr	r3, [pc, #8]	; (8010ae0 <USBD_FS_SerialStrDescriptor+0x34>)
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3708      	adds	r7, #8
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}
 8010ade:	bf00      	nop
 8010ae0:	20005fa0 	.word	0x20005fa0
 8010ae4:	08010fb4 	.word	0x08010fb4

08010ae8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b082      	sub	sp, #8
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	4603      	mov	r3, r0
 8010af0:	6039      	str	r1, [r7, #0]
 8010af2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010af4:	79fb      	ldrb	r3, [r7, #7]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d105      	bne.n	8010b06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010afa:	683a      	ldr	r2, [r7, #0]
 8010afc:	4907      	ldr	r1, [pc, #28]	; (8010b1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010afe:	4808      	ldr	r0, [pc, #32]	; (8010b20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b00:	f7f4 fe45 	bl	800578e <USBD_GetString>
 8010b04:	e004      	b.n	8010b10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b06:	683a      	ldr	r2, [r7, #0]
 8010b08:	4904      	ldr	r1, [pc, #16]	; (8010b1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b0a:	4805      	ldr	r0, [pc, #20]	; (8010b20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b0c:	f7f4 fe3f 	bl	800578e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b10:	4b02      	ldr	r3, [pc, #8]	; (8010b1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3708      	adds	r7, #8
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	bf00      	nop
 8010b1c:	20005fa0 	.word	0x20005fa0
 8010b20:	08010fc4 	.word	0x08010fc4

08010b24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	6039      	str	r1, [r7, #0]
 8010b2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010b30:	79fb      	ldrb	r3, [r7, #7]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d105      	bne.n	8010b42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b36:	683a      	ldr	r2, [r7, #0]
 8010b38:	4907      	ldr	r1, [pc, #28]	; (8010b58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b3a:	4808      	ldr	r0, [pc, #32]	; (8010b5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b3c:	f7f4 fe27 	bl	800578e <USBD_GetString>
 8010b40:	e004      	b.n	8010b4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b42:	683a      	ldr	r2, [r7, #0]
 8010b44:	4904      	ldr	r1, [pc, #16]	; (8010b58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b46:	4805      	ldr	r0, [pc, #20]	; (8010b5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b48:	f7f4 fe21 	bl	800578e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b4c:	4b02      	ldr	r3, [pc, #8]	; (8010b58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3708      	adds	r7, #8
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop
 8010b58:	20005fa0 	.word	0x20005fa0
 8010b5c:	08010fd4 	.word	0x08010fd4

08010b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8010b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010b98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010b64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010b66:	e003      	b.n	8010b70 <LoopCopyDataInit>

08010b68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010b68:	4b0c      	ldr	r3, [pc, #48]	; (8010b9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010b6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010b6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010b6e:	3104      	adds	r1, #4

08010b70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010b70:	480b      	ldr	r0, [pc, #44]	; (8010ba0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010b72:	4b0c      	ldr	r3, [pc, #48]	; (8010ba4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010b74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010b76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010b78:	d3f6      	bcc.n	8010b68 <CopyDataInit>
  ldr  r2, =_sbss
 8010b7a:	4a0b      	ldr	r2, [pc, #44]	; (8010ba8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010b7c:	e002      	b.n	8010b84 <LoopFillZerobss>

08010b7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010b7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010b80:	f842 3b04 	str.w	r3, [r2], #4

08010b84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010b84:	4b09      	ldr	r3, [pc, #36]	; (8010bac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010b86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010b88:	d3f9      	bcc.n	8010b7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010b8a:	f7ff fb57 	bl	801023c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010b8e:	f000 f811 	bl	8010bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010b92:	f7ff f8c7 	bl	800fd24 <main>
  bx  lr    
 8010b96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8010b98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010b9c:	08011200 	.word	0x08011200
  ldr  r0, =_sdata
 8010ba0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010ba4:	200002c8 	.word	0x200002c8
  ldr  r2, =_sbss
 8010ba8:	200002c8 	.word	0x200002c8
  ldr  r3, = _ebss
 8010bac:	200061a4 	.word	0x200061a4

08010bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010bb0:	e7fe      	b.n	8010bb0 <ADC_IRQHandler>
	...

08010bb4 <__libc_init_array>:
 8010bb4:	b570      	push	{r4, r5, r6, lr}
 8010bb6:	4e0d      	ldr	r6, [pc, #52]	; (8010bec <__libc_init_array+0x38>)
 8010bb8:	4c0d      	ldr	r4, [pc, #52]	; (8010bf0 <__libc_init_array+0x3c>)
 8010bba:	1ba4      	subs	r4, r4, r6
 8010bbc:	10a4      	asrs	r4, r4, #2
 8010bbe:	2500      	movs	r5, #0
 8010bc0:	42a5      	cmp	r5, r4
 8010bc2:	d109      	bne.n	8010bd8 <__libc_init_array+0x24>
 8010bc4:	4e0b      	ldr	r6, [pc, #44]	; (8010bf4 <__libc_init_array+0x40>)
 8010bc6:	4c0c      	ldr	r4, [pc, #48]	; (8010bf8 <__libc_init_array+0x44>)
 8010bc8:	f000 f988 	bl	8010edc <_init>
 8010bcc:	1ba4      	subs	r4, r4, r6
 8010bce:	10a4      	asrs	r4, r4, #2
 8010bd0:	2500      	movs	r5, #0
 8010bd2:	42a5      	cmp	r5, r4
 8010bd4:	d105      	bne.n	8010be2 <__libc_init_array+0x2e>
 8010bd6:	bd70      	pop	{r4, r5, r6, pc}
 8010bd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010bdc:	4798      	blx	r3
 8010bde:	3501      	adds	r5, #1
 8010be0:	e7ee      	b.n	8010bc0 <__libc_init_array+0xc>
 8010be2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010be6:	4798      	blx	r3
 8010be8:	3501      	adds	r5, #1
 8010bea:	e7f2      	b.n	8010bd2 <__libc_init_array+0x1e>
 8010bec:	080111f8 	.word	0x080111f8
 8010bf0:	080111f8 	.word	0x080111f8
 8010bf4:	080111f8 	.word	0x080111f8
 8010bf8:	080111fc 	.word	0x080111fc

08010bfc <memcmp>:
 8010bfc:	b510      	push	{r4, lr}
 8010bfe:	3901      	subs	r1, #1
 8010c00:	4402      	add	r2, r0
 8010c02:	4290      	cmp	r0, r2
 8010c04:	d101      	bne.n	8010c0a <memcmp+0xe>
 8010c06:	2000      	movs	r0, #0
 8010c08:	bd10      	pop	{r4, pc}
 8010c0a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010c0e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010c12:	42a3      	cmp	r3, r4
 8010c14:	d0f5      	beq.n	8010c02 <memcmp+0x6>
 8010c16:	1b18      	subs	r0, r3, r4
 8010c18:	bd10      	pop	{r4, pc}

08010c1a <memcpy>:
 8010c1a:	b510      	push	{r4, lr}
 8010c1c:	1e43      	subs	r3, r0, #1
 8010c1e:	440a      	add	r2, r1
 8010c20:	4291      	cmp	r1, r2
 8010c22:	d100      	bne.n	8010c26 <memcpy+0xc>
 8010c24:	bd10      	pop	{r4, pc}
 8010c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c2e:	e7f7      	b.n	8010c20 <memcpy+0x6>

08010c30 <memmove>:
 8010c30:	4288      	cmp	r0, r1
 8010c32:	b510      	push	{r4, lr}
 8010c34:	eb01 0302 	add.w	r3, r1, r2
 8010c38:	d803      	bhi.n	8010c42 <memmove+0x12>
 8010c3a:	1e42      	subs	r2, r0, #1
 8010c3c:	4299      	cmp	r1, r3
 8010c3e:	d10c      	bne.n	8010c5a <memmove+0x2a>
 8010c40:	bd10      	pop	{r4, pc}
 8010c42:	4298      	cmp	r0, r3
 8010c44:	d2f9      	bcs.n	8010c3a <memmove+0xa>
 8010c46:	1881      	adds	r1, r0, r2
 8010c48:	1ad2      	subs	r2, r2, r3
 8010c4a:	42d3      	cmn	r3, r2
 8010c4c:	d100      	bne.n	8010c50 <memmove+0x20>
 8010c4e:	bd10      	pop	{r4, pc}
 8010c50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c54:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010c58:	e7f7      	b.n	8010c4a <memmove+0x1a>
 8010c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c5e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010c62:	e7eb      	b.n	8010c3c <memmove+0xc>

08010c64 <memset>:
 8010c64:	4402      	add	r2, r0
 8010c66:	4603      	mov	r3, r0
 8010c68:	4293      	cmp	r3, r2
 8010c6a:	d100      	bne.n	8010c6e <memset+0xa>
 8010c6c:	4770      	bx	lr
 8010c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8010c72:	e7f9      	b.n	8010c68 <memset+0x4>

08010c74 <rand>:
 8010c74:	4b19      	ldr	r3, [pc, #100]	; (8010cdc <rand+0x68>)
 8010c76:	b510      	push	{r4, lr}
 8010c78:	681c      	ldr	r4, [r3, #0]
 8010c7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010c7c:	b9d3      	cbnz	r3, 8010cb4 <rand+0x40>
 8010c7e:	2018      	movs	r0, #24
 8010c80:	f000 f886 	bl	8010d90 <malloc>
 8010c84:	f243 330e 	movw	r3, #13070	; 0x330e
 8010c88:	63a0      	str	r0, [r4, #56]	; 0x38
 8010c8a:	8003      	strh	r3, [r0, #0]
 8010c8c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8010c90:	8043      	strh	r3, [r0, #2]
 8010c92:	f241 2334 	movw	r3, #4660	; 0x1234
 8010c96:	8083      	strh	r3, [r0, #4]
 8010c98:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8010c9c:	80c3      	strh	r3, [r0, #6]
 8010c9e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8010ca2:	8103      	strh	r3, [r0, #8]
 8010ca4:	2305      	movs	r3, #5
 8010ca6:	8143      	strh	r3, [r0, #10]
 8010ca8:	230b      	movs	r3, #11
 8010caa:	8183      	strh	r3, [r0, #12]
 8010cac:	2201      	movs	r2, #1
 8010cae:	2300      	movs	r3, #0
 8010cb0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010cb4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010cb6:	480a      	ldr	r0, [pc, #40]	; (8010ce0 <rand+0x6c>)
 8010cb8:	690a      	ldr	r2, [r1, #16]
 8010cba:	694b      	ldr	r3, [r1, #20]
 8010cbc:	4c09      	ldr	r4, [pc, #36]	; (8010ce4 <rand+0x70>)
 8010cbe:	4350      	muls	r0, r2
 8010cc0:	fb04 0003 	mla	r0, r4, r3, r0
 8010cc4:	fba2 2304 	umull	r2, r3, r2, r4
 8010cc8:	3201      	adds	r2, #1
 8010cca:	4403      	add	r3, r0
 8010ccc:	f143 0300 	adc.w	r3, r3, #0
 8010cd0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8010cd4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8010cd8:	bd10      	pop	{r4, pc}
 8010cda:	bf00      	nop
 8010cdc:	200000f8 	.word	0x200000f8
 8010ce0:	5851f42d 	.word	0x5851f42d
 8010ce4:	4c957f2d 	.word	0x4c957f2d

08010ce8 <strcasecmp>:
 8010ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cea:	4606      	mov	r6, r0
 8010cec:	460f      	mov	r7, r1
 8010cee:	f816 4b01 	ldrb.w	r4, [r6], #1
 8010cf2:	f000 f83f 	bl	8010d74 <__locale_ctype_ptr>
 8010cf6:	4420      	add	r0, r4
 8010cf8:	f817 5b01 	ldrb.w	r5, [r7], #1
 8010cfc:	7843      	ldrb	r3, [r0, #1]
 8010cfe:	f003 0303 	and.w	r3, r3, #3
 8010d02:	2b01      	cmp	r3, #1
 8010d04:	bf08      	it	eq
 8010d06:	3420      	addeq	r4, #32
 8010d08:	f000 f834 	bl	8010d74 <__locale_ctype_ptr>
 8010d0c:	4428      	add	r0, r5
 8010d0e:	7843      	ldrb	r3, [r0, #1]
 8010d10:	f003 0303 	and.w	r3, r3, #3
 8010d14:	2b01      	cmp	r3, #1
 8010d16:	bf08      	it	eq
 8010d18:	3520      	addeq	r5, #32
 8010d1a:	1b60      	subs	r0, r4, r5
 8010d1c:	d101      	bne.n	8010d22 <strcasecmp+0x3a>
 8010d1e:	2d00      	cmp	r5, #0
 8010d20:	d1e5      	bne.n	8010cee <strcasecmp+0x6>
 8010d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010d24 <strncmp>:
 8010d24:	b510      	push	{r4, lr}
 8010d26:	b16a      	cbz	r2, 8010d44 <strncmp+0x20>
 8010d28:	3901      	subs	r1, #1
 8010d2a:	1884      	adds	r4, r0, r2
 8010d2c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010d30:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010d34:	4293      	cmp	r3, r2
 8010d36:	d103      	bne.n	8010d40 <strncmp+0x1c>
 8010d38:	42a0      	cmp	r0, r4
 8010d3a:	d001      	beq.n	8010d40 <strncmp+0x1c>
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d1f5      	bne.n	8010d2c <strncmp+0x8>
 8010d40:	1a98      	subs	r0, r3, r2
 8010d42:	bd10      	pop	{r4, pc}
 8010d44:	4610      	mov	r0, r2
 8010d46:	bd10      	pop	{r4, pc}

08010d48 <strncpy>:
 8010d48:	b570      	push	{r4, r5, r6, lr}
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	b902      	cbnz	r2, 8010d50 <strncpy+0x8>
 8010d4e:	bd70      	pop	{r4, r5, r6, pc}
 8010d50:	4623      	mov	r3, r4
 8010d52:	f811 5b01 	ldrb.w	r5, [r1], #1
 8010d56:	f803 5b01 	strb.w	r5, [r3], #1
 8010d5a:	1e56      	subs	r6, r2, #1
 8010d5c:	b91d      	cbnz	r5, 8010d66 <strncpy+0x1e>
 8010d5e:	4414      	add	r4, r2
 8010d60:	42a3      	cmp	r3, r4
 8010d62:	d103      	bne.n	8010d6c <strncpy+0x24>
 8010d64:	bd70      	pop	{r4, r5, r6, pc}
 8010d66:	461c      	mov	r4, r3
 8010d68:	4632      	mov	r2, r6
 8010d6a:	e7ef      	b.n	8010d4c <strncpy+0x4>
 8010d6c:	f803 5b01 	strb.w	r5, [r3], #1
 8010d70:	e7f6      	b.n	8010d60 <strncpy+0x18>
	...

08010d74 <__locale_ctype_ptr>:
 8010d74:	4b04      	ldr	r3, [pc, #16]	; (8010d88 <__locale_ctype_ptr+0x14>)
 8010d76:	4a05      	ldr	r2, [pc, #20]	; (8010d8c <__locale_ctype_ptr+0x18>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	6a1b      	ldr	r3, [r3, #32]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	bf08      	it	eq
 8010d80:	4613      	moveq	r3, r2
 8010d82:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8010d86:	4770      	bx	lr
 8010d88:	200000f8 	.word	0x200000f8
 8010d8c:	2000015c 	.word	0x2000015c

08010d90 <malloc>:
 8010d90:	4b02      	ldr	r3, [pc, #8]	; (8010d9c <malloc+0xc>)
 8010d92:	4601      	mov	r1, r0
 8010d94:	6818      	ldr	r0, [r3, #0]
 8010d96:	f000 b815 	b.w	8010dc4 <_malloc_r>
 8010d9a:	bf00      	nop
 8010d9c:	200000f8 	.word	0x200000f8

08010da0 <__ascii_mbtowc>:
 8010da0:	b082      	sub	sp, #8
 8010da2:	b901      	cbnz	r1, 8010da6 <__ascii_mbtowc+0x6>
 8010da4:	a901      	add	r1, sp, #4
 8010da6:	b142      	cbz	r2, 8010dba <__ascii_mbtowc+0x1a>
 8010da8:	b14b      	cbz	r3, 8010dbe <__ascii_mbtowc+0x1e>
 8010daa:	7813      	ldrb	r3, [r2, #0]
 8010dac:	600b      	str	r3, [r1, #0]
 8010dae:	7812      	ldrb	r2, [r2, #0]
 8010db0:	1c10      	adds	r0, r2, #0
 8010db2:	bf18      	it	ne
 8010db4:	2001      	movne	r0, #1
 8010db6:	b002      	add	sp, #8
 8010db8:	4770      	bx	lr
 8010dba:	4610      	mov	r0, r2
 8010dbc:	e7fb      	b.n	8010db6 <__ascii_mbtowc+0x16>
 8010dbe:	f06f 0001 	mvn.w	r0, #1
 8010dc2:	e7f8      	b.n	8010db6 <__ascii_mbtowc+0x16>

08010dc4 <_malloc_r>:
 8010dc4:	b570      	push	{r4, r5, r6, lr}
 8010dc6:	1ccd      	adds	r5, r1, #3
 8010dc8:	f025 0503 	bic.w	r5, r5, #3
 8010dcc:	3508      	adds	r5, #8
 8010dce:	2d0c      	cmp	r5, #12
 8010dd0:	bf38      	it	cc
 8010dd2:	250c      	movcc	r5, #12
 8010dd4:	2d00      	cmp	r5, #0
 8010dd6:	4606      	mov	r6, r0
 8010dd8:	db01      	blt.n	8010dde <_malloc_r+0x1a>
 8010dda:	42a9      	cmp	r1, r5
 8010ddc:	d903      	bls.n	8010de6 <_malloc_r+0x22>
 8010dde:	230c      	movs	r3, #12
 8010de0:	6033      	str	r3, [r6, #0]
 8010de2:	2000      	movs	r0, #0
 8010de4:	bd70      	pop	{r4, r5, r6, pc}
 8010de6:	f000 f868 	bl	8010eba <__malloc_lock>
 8010dea:	4a23      	ldr	r2, [pc, #140]	; (8010e78 <_malloc_r+0xb4>)
 8010dec:	6814      	ldr	r4, [r2, #0]
 8010dee:	4621      	mov	r1, r4
 8010df0:	b991      	cbnz	r1, 8010e18 <_malloc_r+0x54>
 8010df2:	4c22      	ldr	r4, [pc, #136]	; (8010e7c <_malloc_r+0xb8>)
 8010df4:	6823      	ldr	r3, [r4, #0]
 8010df6:	b91b      	cbnz	r3, 8010e00 <_malloc_r+0x3c>
 8010df8:	4630      	mov	r0, r6
 8010dfa:	f000 f841 	bl	8010e80 <_sbrk_r>
 8010dfe:	6020      	str	r0, [r4, #0]
 8010e00:	4629      	mov	r1, r5
 8010e02:	4630      	mov	r0, r6
 8010e04:	f000 f83c 	bl	8010e80 <_sbrk_r>
 8010e08:	1c43      	adds	r3, r0, #1
 8010e0a:	d126      	bne.n	8010e5a <_malloc_r+0x96>
 8010e0c:	230c      	movs	r3, #12
 8010e0e:	6033      	str	r3, [r6, #0]
 8010e10:	4630      	mov	r0, r6
 8010e12:	f000 f853 	bl	8010ebc <__malloc_unlock>
 8010e16:	e7e4      	b.n	8010de2 <_malloc_r+0x1e>
 8010e18:	680b      	ldr	r3, [r1, #0]
 8010e1a:	1b5b      	subs	r3, r3, r5
 8010e1c:	d41a      	bmi.n	8010e54 <_malloc_r+0x90>
 8010e1e:	2b0b      	cmp	r3, #11
 8010e20:	d90f      	bls.n	8010e42 <_malloc_r+0x7e>
 8010e22:	600b      	str	r3, [r1, #0]
 8010e24:	50cd      	str	r5, [r1, r3]
 8010e26:	18cc      	adds	r4, r1, r3
 8010e28:	4630      	mov	r0, r6
 8010e2a:	f000 f847 	bl	8010ebc <__malloc_unlock>
 8010e2e:	f104 000b 	add.w	r0, r4, #11
 8010e32:	1d23      	adds	r3, r4, #4
 8010e34:	f020 0007 	bic.w	r0, r0, #7
 8010e38:	1ac3      	subs	r3, r0, r3
 8010e3a:	d01b      	beq.n	8010e74 <_malloc_r+0xb0>
 8010e3c:	425a      	negs	r2, r3
 8010e3e:	50e2      	str	r2, [r4, r3]
 8010e40:	bd70      	pop	{r4, r5, r6, pc}
 8010e42:	428c      	cmp	r4, r1
 8010e44:	bf0d      	iteet	eq
 8010e46:	6863      	ldreq	r3, [r4, #4]
 8010e48:	684b      	ldrne	r3, [r1, #4]
 8010e4a:	6063      	strne	r3, [r4, #4]
 8010e4c:	6013      	streq	r3, [r2, #0]
 8010e4e:	bf18      	it	ne
 8010e50:	460c      	movne	r4, r1
 8010e52:	e7e9      	b.n	8010e28 <_malloc_r+0x64>
 8010e54:	460c      	mov	r4, r1
 8010e56:	6849      	ldr	r1, [r1, #4]
 8010e58:	e7ca      	b.n	8010df0 <_malloc_r+0x2c>
 8010e5a:	1cc4      	adds	r4, r0, #3
 8010e5c:	f024 0403 	bic.w	r4, r4, #3
 8010e60:	42a0      	cmp	r0, r4
 8010e62:	d005      	beq.n	8010e70 <_malloc_r+0xac>
 8010e64:	1a21      	subs	r1, r4, r0
 8010e66:	4630      	mov	r0, r6
 8010e68:	f000 f80a 	bl	8010e80 <_sbrk_r>
 8010e6c:	3001      	adds	r0, #1
 8010e6e:	d0cd      	beq.n	8010e0c <_malloc_r+0x48>
 8010e70:	6025      	str	r5, [r4, #0]
 8010e72:	e7d9      	b.n	8010e28 <_malloc_r+0x64>
 8010e74:	bd70      	pop	{r4, r5, r6, pc}
 8010e76:	bf00      	nop
 8010e78:	200045f4 	.word	0x200045f4
 8010e7c:	200045f8 	.word	0x200045f8

08010e80 <_sbrk_r>:
 8010e80:	b538      	push	{r3, r4, r5, lr}
 8010e82:	4c06      	ldr	r4, [pc, #24]	; (8010e9c <_sbrk_r+0x1c>)
 8010e84:	2300      	movs	r3, #0
 8010e86:	4605      	mov	r5, r0
 8010e88:	4608      	mov	r0, r1
 8010e8a:	6023      	str	r3, [r4, #0]
 8010e8c:	f000 f818 	bl	8010ec0 <_sbrk>
 8010e90:	1c43      	adds	r3, r0, #1
 8010e92:	d102      	bne.n	8010e9a <_sbrk_r+0x1a>
 8010e94:	6823      	ldr	r3, [r4, #0]
 8010e96:	b103      	cbz	r3, 8010e9a <_sbrk_r+0x1a>
 8010e98:	602b      	str	r3, [r5, #0]
 8010e9a:	bd38      	pop	{r3, r4, r5, pc}
 8010e9c:	200061a0 	.word	0x200061a0

08010ea0 <__ascii_wctomb>:
 8010ea0:	b149      	cbz	r1, 8010eb6 <__ascii_wctomb+0x16>
 8010ea2:	2aff      	cmp	r2, #255	; 0xff
 8010ea4:	bf85      	ittet	hi
 8010ea6:	238a      	movhi	r3, #138	; 0x8a
 8010ea8:	6003      	strhi	r3, [r0, #0]
 8010eaa:	700a      	strbls	r2, [r1, #0]
 8010eac:	f04f 30ff 	movhi.w	r0, #4294967295
 8010eb0:	bf98      	it	ls
 8010eb2:	2001      	movls	r0, #1
 8010eb4:	4770      	bx	lr
 8010eb6:	4608      	mov	r0, r1
 8010eb8:	4770      	bx	lr

08010eba <__malloc_lock>:
 8010eba:	4770      	bx	lr

08010ebc <__malloc_unlock>:
 8010ebc:	4770      	bx	lr
	...

08010ec0 <_sbrk>:
 8010ec0:	4b04      	ldr	r3, [pc, #16]	; (8010ed4 <_sbrk+0x14>)
 8010ec2:	6819      	ldr	r1, [r3, #0]
 8010ec4:	4602      	mov	r2, r0
 8010ec6:	b909      	cbnz	r1, 8010ecc <_sbrk+0xc>
 8010ec8:	4903      	ldr	r1, [pc, #12]	; (8010ed8 <_sbrk+0x18>)
 8010eca:	6019      	str	r1, [r3, #0]
 8010ecc:	6818      	ldr	r0, [r3, #0]
 8010ece:	4402      	add	r2, r0
 8010ed0:	601a      	str	r2, [r3, #0]
 8010ed2:	4770      	bx	lr
 8010ed4:	200045fc 	.word	0x200045fc
 8010ed8:	200061a4 	.word	0x200061a4

08010edc <_init>:
 8010edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ede:	bf00      	nop
 8010ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ee2:	bc08      	pop	{r3}
 8010ee4:	469e      	mov	lr, r3
 8010ee6:	4770      	bx	lr

08010ee8 <_fini>:
 8010ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eea:	bf00      	nop
 8010eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010eee:	bc08      	pop	{r3}
 8010ef0:	469e      	mov	lr, r3
 8010ef2:	4770      	bx	lr
