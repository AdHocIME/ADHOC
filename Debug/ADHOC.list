
ADHOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009438  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  080095d8  080095d8  000195d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080098ec  080098ec  000198ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080098f4  080098f4  000198f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080098f8  080098f8  000198f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000003a4  20000000  080098fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000061c8  200003a8  08009ca0  000203a8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20006570  08009ca0  00026570  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000203a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003fd3e  00000000  00000000  000203d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007ffd  00000000  00000000  00060112  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00016ed6  00000000  00000000  0006810f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000018a0  00000000  00000000  0007efe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000025f0  00000000  00000000  00080888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000f9dd  00000000  00000000  00082e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000a75a  00000000  00000000  00092855  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0009cfaf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a30  00000000  00000000  0009d02c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003a8 	.word	0x200003a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080095c0 	.word	0x080095c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003ac 	.word	0x200003ac
 80001dc:	080095c0 	.word	0x080095c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x30>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000512:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f82f 	bl	8000580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f008 fdc8 	bl	80090b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f008 fd7e 	bl	8009028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000534:	4a03      	ldr	r2, [pc, #12]	; (8000544 <HAL_IncTick+0x10>)
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <HAL_IncTick+0x14>)
 8000538:	6811      	ldr	r1, [r2, #0]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	440b      	add	r3, r1
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	200052e8 	.word	0x200052e8
 8000548:	20000000 	.word	0x20000000

0800054c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <HAL_GetTick+0x8>)
 800054e:	6818      	ldr	r0, [r3, #0]
}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	200052e8 	.word	0x200052e8

08000558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000558:	b538      	push	{r3, r4, r5, lr}
 800055a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800055c:	f7ff fff6 	bl	800054c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000560:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000562:	bf1c      	itt	ne
 8000564:	4b05      	ldrne	r3, [pc, #20]	; (800057c <HAL_Delay+0x24>)
 8000566:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000568:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800056a:	bf18      	it	ne
 800056c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800056e:	f7ff ffed 	bl	800054c <HAL_GetTick>
 8000572:	1b40      	subs	r0, r0, r5
 8000574:	4284      	cmp	r4, r0
 8000576:	d8fa      	bhi.n	800056e <HAL_Delay+0x16>
  {
  }
}
 8000578:	bd38      	pop	{r3, r4, r5, pc}
 800057a:	bf00      	nop
 800057c:	20000000 	.word	0x20000000

08000580 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000582:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000584:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000588:	041b      	lsls	r3, r3, #16
 800058a:	0c1b      	lsrs	r3, r3, #16
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000590:	0200      	lsls	r0, r0, #8
 8000592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000596:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800059a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800059c:	60d3      	str	r3, [r2, #12]
 800059e:	4770      	bx	lr
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005a6:	b530      	push	{r4, r5, lr}
 80005a8:	68dc      	ldr	r4, [r3, #12]
 80005aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	bf28      	it	cs
 80005b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005bc:	f04f 0501 	mov.w	r5, #1
 80005c0:	fa05 f303 	lsl.w	r3, r5, r3
 80005c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c8:	bf8c      	ite	hi
 80005ca:	3c03      	subhi	r4, #3
 80005cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ce:	4019      	ands	r1, r3
 80005d0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d2:	fa05 f404 	lsl.w	r4, r5, r4
 80005d6:	3c01      	subs	r4, #1
 80005d8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	ea42 0201 	orr.w	r2, r2, r1
 80005e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	bfaf      	iteee	ge
 80005e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	f000 000f 	andlt.w	r0, r0, #15
 80005ee:	4b06      	ldrlt	r3, [pc, #24]	; (8000608 <HAL_NVIC_SetPriority+0x64>)
 80005f0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	bfa5      	ittet	ge
 80005f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005f8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	e000ed14 	.word	0xe000ed14

0800060c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800060c:	0942      	lsrs	r2, r0, #5
 800060e:	2301      	movs	r3, #1
 8000610:	f000 001f 	and.w	r0, r0, #31
 8000614:	fa03 f000 	lsl.w	r0, r3, r0
 8000618:	4b01      	ldr	r3, [pc, #4]	; (8000620 <HAL_NVIC_EnableIRQ+0x14>)
 800061a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800061e:	4770      	bx	lr
 8000620:	e000e100 	.word	0xe000e100

08000624 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000624:	3801      	subs	r0, #1
 8000626:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800062a:	d20a      	bcs.n	8000642 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000630:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	21f0      	movs	r1, #240	; 0xf0
 8000634:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000638:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800063a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800063c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000642:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e010 	.word	0xe000e010
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000652:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000654:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000656:	bf0c      	ite	eq
 8000658:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800065c:	f022 0204 	bicne.w	r2, r2, #4
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	4770      	bx	lr
 8000664:	e000e010 	.word	0xe000e010

08000668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800066c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800066e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000670:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000810 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000674:	4a64      	ldr	r2, [pc, #400]	; (8000808 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000676:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000678:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800067c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800067e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000680:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000684:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000688:	42b7      	cmp	r7, r6
 800068a:	f040 80ad 	bne.w	80007e8 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800068e:	684c      	ldr	r4, [r1, #4]
 8000690:	f024 0a10 	bic.w	sl, r4, #16
 8000694:	f1ba 0f02 	cmp.w	sl, #2
 8000698:	d116      	bne.n	80006c8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800069a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800069e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006a2:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006a6:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006aa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006ae:	f04f 0e0f 	mov.w	lr, #15
 80006b2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80006b6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006ba:	690d      	ldr	r5, [r1, #16]
 80006bc:	fa05 f50b 	lsl.w	r5, r5, fp
 80006c0:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80006c4:	f8cc 5020 	str.w	r5, [ip, #32]
 80006c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006cc:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006ce:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006d2:	fa05 f50c 	lsl.w	r5, r5, ip
 80006d6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006d8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006dc:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006e0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006e8:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ec:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006f0:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80006f2:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f6:	d815      	bhi.n	8000724 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80006f8:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006fc:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000700:	68cd      	ldr	r5, [r1, #12]
 8000702:	fa05 fa0c 	lsl.w	sl, r5, ip
 8000706:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800070a:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800070e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000712:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000716:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800071a:	fa0e fe03 	lsl.w	lr, lr, r3
 800071e:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000722:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000724:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000726:	9d00      	ldr	r5, [sp, #0]
 8000728:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800072a:	688f      	ldr	r7, [r1, #8]
 800072c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000730:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000732:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000734:	00e5      	lsls	r5, r4, #3
 8000736:	d557      	bpl.n	80007e8 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000738:	f04f 0b00 	mov.w	fp, #0
 800073c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000740:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000744:	4d31      	ldr	r5, [pc, #196]	; (800080c <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800074a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800074e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000752:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000756:	9703      	str	r7, [sp, #12]
 8000758:	9f03      	ldr	r7, [sp, #12]
 800075a:	f023 0703 	bic.w	r7, r3, #3
 800075e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000762:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000766:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800076a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800076e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000772:	f04f 0e0f 	mov.w	lr, #15
 8000776:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800077a:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800077c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000780:	d039      	beq.n	80007f6 <HAL_GPIO_Init+0x18e>
 8000782:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000786:	42a8      	cmp	r0, r5
 8000788:	d037      	beq.n	80007fa <HAL_GPIO_Init+0x192>
 800078a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800078e:	42a8      	cmp	r0, r5
 8000790:	d035      	beq.n	80007fe <HAL_GPIO_Init+0x196>
 8000792:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000796:	42a8      	cmp	r0, r5
 8000798:	d033      	beq.n	8000802 <HAL_GPIO_Init+0x19a>
 800079a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800079e:	42a8      	cmp	r0, r5
 80007a0:	bf14      	ite	ne
 80007a2:	2507      	movne	r5, #7
 80007a4:	2504      	moveq	r5, #4
 80007a6:	fa05 f50c 	lsl.w	r5, r5, ip
 80007aa:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007ae:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007b0:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007b2:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007b4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007b8:	bf0c      	ite	eq
 80007ba:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007bc:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80007be:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80007c0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007c2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007c6:	bf0c      	ite	eq
 80007c8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007ca:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80007cc:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007ce:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007d0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007d4:	bf0c      	ite	eq
 80007d6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80007d8:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80007da:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80007dc:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007de:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007e0:	bf54      	ite	pl
 80007e2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007e4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007e6:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007e8:	3301      	adds	r3, #1
 80007ea:	2b10      	cmp	r3, #16
 80007ec:	f47f af47 	bne.w	800067e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007f0:	b005      	add	sp, #20
 80007f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007f6:	465d      	mov	r5, fp
 80007f8:	e7d5      	b.n	80007a6 <HAL_GPIO_Init+0x13e>
 80007fa:	2501      	movs	r5, #1
 80007fc:	e7d3      	b.n	80007a6 <HAL_GPIO_Init+0x13e>
 80007fe:	2502      	movs	r5, #2
 8000800:	e7d1      	b.n	80007a6 <HAL_GPIO_Init+0x13e>
 8000802:	2503      	movs	r5, #3
 8000804:	e7cf      	b.n	80007a6 <HAL_GPIO_Init+0x13e>
 8000806:	bf00      	nop
 8000808:	40013c00 	.word	0x40013c00
 800080c:	40020000 	.word	0x40020000
 8000810:	40023800 	.word	0x40023800

08000814 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000814:	b10a      	cbz	r2, 800081a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000816:	6181      	str	r1, [r0, #24]
 8000818:	4770      	bx	lr
 800081a:	0409      	lsls	r1, r1, #16
 800081c:	e7fb      	b.n	8000816 <HAL_GPIO_WritePin+0x2>

0800081e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800081e:	6943      	ldr	r3, [r0, #20]
 8000820:	4059      	eors	r1, r3
 8000822:	6141      	str	r1, [r0, #20]
 8000824:	4770      	bx	lr

08000826 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000826:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000828:	4606      	mov	r6, r0
{ 
 800082a:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 800082c:	2800      	cmp	r0, #0
 800082e:	d064      	beq.n	80008fa <HAL_PCD_Init+0xd4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000830:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000832:	4634      	mov	r4, r6
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000834:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8000838:	f001 fc18 	bl	800206c <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 800083c:	f854 0b10 	ldr.w	r0, [r4], #16
 8000840:	f001 f81c 	bl	800187c <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000846:	466d      	mov	r5, sp
 8000848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800084a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800084c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800084e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000852:	e885 0003 	stmia.w	r5, {r0, r1}
 8000856:	1d37      	adds	r7, r6, #4
 8000858:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800085c:	6830      	ldr	r0, [r6, #0]
 800085e:	f000 ffcd 	bl	80017fc <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000862:	2100      	movs	r1, #0
 8000864:	6830      	ldr	r0, [r6, #0]
 8000866:	f001 f80f 	bl	8001888 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 800086a:	2100      	movs	r1, #0
 800086c:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 800086e:	4632      	mov	r2, r6
 8000870:	f106 0410 	add.w	r4, r6, #16
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000874:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000876:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8000878:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 800087c:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 800087e:	3101      	adds	r1, #1
 8000880:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 8000882:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000886:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 800088a:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 800088c:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 800088e:	64d0      	str	r0, [r2, #76]	; 0x4c
 8000890:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 8000894:	d1f0      	bne.n	8000878 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000896:	2200      	movs	r2, #0
 8000898:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0U;
 800089c:	4611      	mov	r1, r2
   hpcd->Instance->DIEPTXF[i] = 0U;
 800089e:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 80008a2:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 80008a6:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 80008a8:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 80008ac:	3201      	adds	r2, #1
 80008ae:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 80008b0:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80008b4:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 80008b8:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 80008bc:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 80008c0:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0U;
 80008c4:	6041      	str	r1, [r0, #4]
 80008c6:	f103 031c 	add.w	r3, r3, #28
 for (i = 0U; i < 15U; i++)
 80008ca:	d1e8      	bne.n	800089e <HAL_PCD_Init+0x78>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80008cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ce:	466d      	mov	r5, sp
 80008d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008da:	e885 0003 	stmia.w	r5, {r0, r1}
 80008de:	4670      	mov	r0, lr
 80008e0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80008e4:	f000 ffe8 	bl	80018b8 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 80008e8:	2301      	movs	r3, #1
 80008ea:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 80008ee:	6830      	ldr	r0, [r6, #0]
 80008f0:	f001 fb05 	bl	8001efe <USB_DevDisconnect>
 return HAL_OK;
 80008f4:	2000      	movs	r0, #0
}
 80008f6:	b00b      	add	sp, #44	; 0x2c
 80008f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80008fa:	2001      	movs	r0, #1
 80008fc:	e7fb      	b.n	80008f6 <HAL_PCD_Init+0xd0>

080008fe <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 80008fe:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000902:	2b01      	cmp	r3, #1
{ 
 8000904:	b510      	push	{r4, lr}
 8000906:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000908:	d00c      	beq.n	8000924 <HAL_PCD_Start+0x26>
 800090a:	2301      	movs	r3, #1
 800090c:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8000910:	6800      	ldr	r0, [r0, #0]
 8000912:	f001 fae8 	bl	8001ee6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000916:	6820      	ldr	r0, [r4, #0]
 8000918:	f000 ffaa 	bl	8001870 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 800091c:	2000      	movs	r0, #0
 800091e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000922:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000924:	2002      	movs	r0, #2
}
 8000926:	bd10      	pop	{r4, pc}

08000928 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800092c:	f8d0 9000 	ldr.w	r9, [r0]
{
 8000930:	b087      	sub	sp, #28
 8000932:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000934:	4648      	mov	r0, r9
 8000936:	f001 fb1c 	bl	8001f72 <USB_GetMode>
 800093a:	9002      	str	r0, [sp, #8]
 800093c:	2800      	cmp	r0, #0
 800093e:	f040 812e 	bne.w	8000b9e <HAL_PCD_IRQHandler+0x276>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000942:	6820      	ldr	r0, [r4, #0]
 8000944:	f001 fae7 	bl	8001f16 <USB_ReadInterrupts>
 8000948:	2800      	cmp	r0, #0
 800094a:	f000 8128 	beq.w	8000b9e <HAL_PCD_IRQHandler+0x276>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800094e:	6820      	ldr	r0, [r4, #0]
 8000950:	f001 fae1 	bl	8001f16 <USB_ReadInterrupts>
 8000954:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000956:	bf48      	it	mi
 8000958:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800095a:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800095c:	bf42      	ittt	mi
 800095e:	6953      	ldrmi	r3, [r2, #20]
 8000960:	f003 0302 	andmi.w	r3, r3, #2
 8000964:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000966:	f001 fad6 	bl	8001f16 <USB_ReadInterrupts>
 800096a:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 800096e:	d00a      	beq.n	8000986 <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000970:	6820      	ldr	r0, [r4, #0]
 8000972:	f001 fad4 	bl	8001f1e <USB_ReadDevAllOutEpInterrupt>
 8000976:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 800097a:	4607      	mov	r7, r0
 800097c:	46a2      	mov	sl, r4
      epnum = 0U;
 800097e:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8000980:	2f00      	cmp	r7, #0
 8000982:	f040 810f 	bne.w	8000ba4 <HAL_PCD_IRQHandler+0x27c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000986:	6820      	ldr	r0, [r4, #0]
 8000988:	f001 fac5 	bl	8001f16 <USB_ReadInterrupts>
 800098c:	0341      	lsls	r1, r0, #13
 800098e:	d50b      	bpl.n	80009a8 <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000990:	6820      	ldr	r0, [r4, #0]
 8000992:	f001 facc 	bl	8001f2e <USB_ReadDevAllInEpInterrupt>
 8000996:	4626      	mov	r6, r4
 8000998:	9003      	str	r0, [sp, #12]
 800099a:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 800099e:	2500      	movs	r5, #0
      
      while ( ep_intr )
 80009a0:	9b03      	ldr	r3, [sp, #12]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f040 813f 	bne.w	8000c26 <HAL_PCD_IRQHandler+0x2fe>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80009a8:	6820      	ldr	r0, [r4, #0]
 80009aa:	f001 fab4 	bl	8001f16 <USB_ReadInterrupts>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	da0d      	bge.n	80009ce <HAL_PCD_IRQHandler+0xa6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80009b2:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 80009b6:	f023 0301 	bic.w	r3, r3, #1
 80009ba:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 80009be:	4620      	mov	r0, r4
 80009c0:	f001 fbd4 	bl	800216c <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80009c4:	6822      	ldr	r2, [r4, #0]
 80009c6:	6953      	ldr	r3, [r2, #20]
 80009c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80009cc:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80009ce:	6820      	ldr	r0, [r4, #0]
 80009d0:	f001 faa1 	bl	8001f16 <USB_ReadInterrupts>
 80009d4:	0506      	lsls	r6, r0, #20
 80009d6:	d50b      	bpl.n	80009f0 <HAL_PCD_IRQHandler+0xc8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80009d8:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 80009dc:	07d8      	lsls	r0, r3, #31
 80009de:	d502      	bpl.n	80009e6 <HAL_PCD_IRQHandler+0xbe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80009e0:	4620      	mov	r0, r4
 80009e2:	f001 fbab 	bl	800213c <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80009e6:	6822      	ldr	r2, [r4, #0]
 80009e8:	6953      	ldr	r3, [r2, #20]
 80009ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ee:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80009f0:	6820      	ldr	r0, [r4, #0]
 80009f2:	f001 fa90 	bl	8001f16 <USB_ReadInterrupts>
 80009f6:	04c1      	lsls	r1, r0, #19
 80009f8:	d537      	bpl.n	8000a6a <HAL_PCD_IRQHandler+0x142>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80009fa:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 80009fe:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000a00:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000a02:	f023 0301 	bic.w	r3, r3, #1
 8000a06:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000a08:	2110      	movs	r1, #16
 8000a0a:	f000 fff1 	bl	80019f0 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a0e:	6861      	ldr	r1, [r4, #4]
 8000a10:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000a14:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a16:	9802      	ldr	r0, [sp, #8]
 8000a18:	4288      	cmp	r0, r1
 8000a1a:	f040 8192 	bne.w	8000d42 <HAL_PCD_IRQHandler+0x41a>
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000a24:	69f3      	ldr	r3, [r6, #28]
 8000a26:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000a2a:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8000a2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 818f 	beq.w	8000d52 <HAL_PCD_IRQHandler+0x42a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8000a34:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8000a38:	f043 030b 	orr.w	r3, r3, #11
 8000a3c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8000a40:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000a42:	f043 030b 	orr.w	r3, r3, #11
 8000a46:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000a48:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000a4c:	7c21      	ldrb	r1, [r4, #16]
 8000a4e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000a50:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000a54:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000a58:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000a5c:	f001 faa8 	bl	8001fb0 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000a60:	6822      	ldr	r2, [r4, #0]
 8000a62:	6953      	ldr	r3, [r2, #20]
 8000a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a68:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000a6a:	6820      	ldr	r0, [r4, #0]
 8000a6c:	f001 fa53 	bl	8001f16 <USB_ReadInterrupts>
 8000a70:	0482      	lsls	r2, r0, #18
 8000a72:	d51d      	bpl.n	8000ab0 <HAL_PCD_IRQHandler+0x188>
    {
      USB_ActivateSetup(hpcd->Instance);
 8000a74:	6820      	ldr	r0, [r4, #0]
 8000a76:	f001 fa80 	bl	8001f7a <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000a7a:	6820      	ldr	r0, [r4, #0]
 8000a7c:	68c3      	ldr	r3, [r0, #12]
 8000a7e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000a82:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000a84:	f000 ffdd 	bl	8001a42 <USB_GetDevSpeed>
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	f040 816b 	bne.w	8000d64 <HAL_PCD_IRQHandler+0x43c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000a8e:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8000a90:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8000a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a96:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000a98:	68d3      	ldr	r3, [r2, #12]
 8000a9a:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8000a9e:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8000aa0:	4620      	mov	r0, r4
 8000aa2:	f001 fb3a 	bl	800211a <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000aa6:	6822      	ldr	r2, [r4, #0]
 8000aa8:	6953      	ldr	r3, [r2, #20]
 8000aaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aae:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000ab0:	6820      	ldr	r0, [r4, #0]
 8000ab2:	f001 fa30 	bl	8001f16 <USB_ReadInterrupts>
 8000ab6:	06c3      	lsls	r3, r0, #27
 8000ab8:	d52b      	bpl.n	8000b12 <HAL_PCD_IRQHandler+0x1ea>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000aba:	6822      	ldr	r2, [r4, #0]
 8000abc:	6993      	ldr	r3, [r2, #24]
 8000abe:	f023 0310 	bic.w	r3, r3, #16
 8000ac2:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8000ac4:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000ac8:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8000acc:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000ace:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000ad2:	f040 81a8 	bne.w	8000e26 <HAL_PCD_IRQHandler+0x4fe>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000ad6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000ada:	421e      	tst	r6, r3
 8000adc:	d014      	beq.n	8000b08 <HAL_PCD_IRQHandler+0x1e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8000ade:	271c      	movs	r7, #28
 8000ae0:	fb07 4708 	mla	r7, r7, r8, r4
 8000ae4:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000ae8:	4632      	mov	r2, r6
 8000aea:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8000aee:	4648      	mov	r0, r9
 8000af0:	f001 f9a3 	bl	8001e3a <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000af4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000af8:	4433      	add	r3, r6
 8000afa:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000afe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000b02:	441e      	add	r6, r3
 8000b04:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000b08:	6822      	ldr	r2, [r4, #0]
 8000b0a:	6993      	ldr	r3, [r2, #24]
 8000b0c:	f043 0310 	orr.w	r3, r3, #16
 8000b10:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000b12:	6820      	ldr	r0, [r4, #0]
 8000b14:	f001 f9ff 	bl	8001f16 <USB_ReadInterrupts>
 8000b18:	0707      	lsls	r7, r0, #28
 8000b1a:	d507      	bpl.n	8000b2c <HAL_PCD_IRQHandler+0x204>
    {
      HAL_PCD_SOFCallback(hpcd);
 8000b1c:	4620      	mov	r0, r4
 8000b1e:	f001 faf8 	bl	8002112 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000b22:	6822      	ldr	r2, [r4, #0]
 8000b24:	6953      	ldr	r3, [r2, #20]
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000b2c:	6820      	ldr	r0, [r4, #0]
 8000b2e:	f001 f9f2 	bl	8001f16 <USB_ReadInterrupts>
 8000b32:	02c6      	lsls	r6, r0, #11
 8000b34:	d508      	bpl.n	8000b48 <HAL_PCD_IRQHandler+0x220>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8000b36:	b2e9      	uxtb	r1, r5
 8000b38:	4620      	mov	r0, r4
 8000b3a:	f001 fb1f 	bl	800217c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000b3e:	6822      	ldr	r2, [r4, #0]
 8000b40:	6953      	ldr	r3, [r2, #20]
 8000b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b46:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000b48:	6820      	ldr	r0, [r4, #0]
 8000b4a:	f001 f9e4 	bl	8001f16 <USB_ReadInterrupts>
 8000b4e:	0280      	lsls	r0, r0, #10
 8000b50:	d508      	bpl.n	8000b64 <HAL_PCD_IRQHandler+0x23c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8000b52:	b2e9      	uxtb	r1, r5
 8000b54:	4620      	mov	r0, r4
 8000b56:	f001 fb0d 	bl	8002174 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000b5a:	6822      	ldr	r2, [r4, #0]
 8000b5c:	6953      	ldr	r3, [r2, #20]
 8000b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b62:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000b64:	6820      	ldr	r0, [r4, #0]
 8000b66:	f001 f9d6 	bl	8001f16 <USB_ReadInterrupts>
 8000b6a:	0041      	lsls	r1, r0, #1
 8000b6c:	d507      	bpl.n	8000b7e <HAL_PCD_IRQHandler+0x256>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8000b6e:	4620      	mov	r0, r4
 8000b70:	f001 fb08 	bl	8002184 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000b74:	6822      	ldr	r2, [r4, #0]
 8000b76:	6953      	ldr	r3, [r2, #20]
 8000b78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000b7c:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000b7e:	6820      	ldr	r0, [r4, #0]
 8000b80:	f001 f9c9 	bl	8001f16 <USB_ReadInterrupts>
 8000b84:	0742      	lsls	r2, r0, #29
 8000b86:	d50a      	bpl.n	8000b9e <HAL_PCD_IRQHandler+0x276>
    {
      temp = hpcd->Instance->GOTGINT;
 8000b88:	6823      	ldr	r3, [r4, #0]
 8000b8a:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000b8c:	076b      	lsls	r3, r5, #29
 8000b8e:	d502      	bpl.n	8000b96 <HAL_PCD_IRQHandler+0x26e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8000b90:	4620      	mov	r0, r4
 8000b92:	f001 fafb 	bl	800218c <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	4315      	orrs	r5, r2
 8000b9c:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000b9e:	b007      	add	sp, #28
 8000ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 8000ba4:	07f8      	lsls	r0, r7, #31
 8000ba6:	d538      	bpl.n	8000c1a <HAL_PCD_IRQHandler+0x2f2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000ba8:	fa5f fb85 	uxtb.w	fp, r5
 8000bac:	4659      	mov	r1, fp
 8000bae:	6820      	ldr	r0, [r4, #0]
 8000bb0:	f001 f9c5 	bl	8001f3e <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000bb4:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000bb8:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000bba:	d021      	beq.n	8000c00 <HAL_PCD_IRQHandler+0x2d8>
            if(hpcd->Init.dma_enable == 1U)
 8000bbc:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000bbe:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 8000bc0:	4299      	cmp	r1, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000bc2:	60b3      	str	r3, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 8000bc4:	d10c      	bne.n	8000be0 <HAL_PCD_IRQHandler+0x2b8>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000bc6:	6931      	ldr	r1, [r6, #16]
 8000bc8:	f8da 0200 	ldr.w	r0, [sl, #512]	; 0x200
 8000bcc:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8000bd0:	1a41      	subs	r1, r0, r1
 8000bd2:	f8ca 1210 	str.w	r1, [sl, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000bd6:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
 8000bda:	4408      	add	r0, r1
 8000bdc:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000be0:	4659      	mov	r1, fp
 8000be2:	4620      	mov	r0, r4
 8000be4:	f001 fa84 	bl	80020f0 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000be8:	6921      	ldr	r1, [r4, #16]
 8000bea:	2901      	cmp	r1, #1
 8000bec:	d108      	bne.n	8000c00 <HAL_PCD_IRQHandler+0x2d8>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000bee:	b93d      	cbnz	r5, 8000c00 <HAL_PCD_IRQHandler+0x2d8>
 8000bf0:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8000bf4:	b922      	cbnz	r2, 8000c00 <HAL_PCD_IRQHandler+0x2d8>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000bf6:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000bfa:	6820      	ldr	r0, [r4, #0]
 8000bfc:	f001 f9d8 	bl	8001fb0 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000c00:	f018 0f08 	tst.w	r8, #8
 8000c04:	d004      	beq.n	8000c10 <HAL_PCD_IRQHandler+0x2e8>
            HAL_PCD_SetupStageCallback(hpcd);
 8000c06:	4620      	mov	r0, r4
 8000c08:	f001 fa6c 	bl	80020e4 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000c10:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000c14:	bf1c      	itt	ne
 8000c16:	2310      	movne	r3, #16
 8000c18:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8000c1a:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000c1c:	087f      	lsrs	r7, r7, #1
 8000c1e:	3620      	adds	r6, #32
 8000c20:	f10a 0a1c 	add.w	sl, sl, #28
 8000c24:	e6ac      	b.n	8000980 <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 8000c26:	9b03      	ldr	r3, [sp, #12]
 8000c28:	07da      	lsls	r2, r3, #31
 8000c2a:	d558      	bpl.n	8000cde <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000c2c:	fa5f fb85 	uxtb.w	fp, r5
 8000c30:	4659      	mov	r1, fp
 8000c32:	6820      	ldr	r0, [r4, #0]
 8000c34:	f001 f98d 	bl	8001f52 <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000c38:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000c3a:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000c3c:	d520      	bpl.n	8000c80 <HAL_PCD_IRQHandler+0x358>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000c3e:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 8000c42:	2101      	movs	r1, #1
 8000c44:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000c46:	ea23 0301 	bic.w	r3, r3, r1
 8000c4a:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 8000c54:	6923      	ldr	r3, [r4, #16]
 8000c56:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8000c58:	bf01      	itttt	eq
 8000c5a:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 8000c5c:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 8000c5e:	189b      	addeq	r3, r3, r2
 8000c60:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8000c62:	4659      	mov	r1, fp
 8000c64:	4620      	mov	r0, r4
 8000c66:	f001 fa4c 	bl	8002102 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8000c6a:	6921      	ldr	r1, [r4, #16]
 8000c6c:	2901      	cmp	r1, #1
 8000c6e:	d107      	bne.n	8000c80 <HAL_PCD_IRQHandler+0x358>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8000c70:	b935      	cbnz	r5, 8000c80 <HAL_PCD_IRQHandler+0x358>
 8000c72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c74:	b923      	cbnz	r3, 8000c80 <HAL_PCD_IRQHandler+0x358>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000c76:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000c7a:	6820      	ldr	r0, [r4, #0]
 8000c7c:	f001 f998 	bl	8001fb0 <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000c80:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000c82:	bf44      	itt	mi
 8000c84:	2308      	movmi	r3, #8
 8000c86:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000c8a:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000c8c:	bf44      	itt	mi
 8000c8e:	2310      	movmi	r3, #16
 8000c90:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000c94:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000c96:	bf44      	itt	mi
 8000c98:	2340      	movmi	r3, #64	; 0x40
 8000c9a:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000c9e:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000ca0:	bf44      	itt	mi
 8000ca2:	2302      	movmi	r3, #2
 8000ca4:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000ca8:	063f      	lsls	r7, r7, #24
 8000caa:	d518      	bpl.n	8000cde <HAL_PCD_IRQHandler+0x3b6>
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000cac:	6823      	ldr	r3, [r4, #0]
 8000cae:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8000cb0:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 8000cb2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000cb4:	1aff      	subs	r7, r7, r3
 8000cb6:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000cb8:	429f      	cmp	r7, r3
 8000cba:	bf28      	it	cs
 8000cbc:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000cbe:	9b04      	ldr	r3, [sp, #16]
 8000cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8000cc4:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000cc8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8000ccc:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000cd0:	9305      	str	r3, [sp, #20]
 8000cd2:	9b05      	ldr	r3, [sp, #20]
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	4553      	cmp	r3, sl
 8000cda:	d808      	bhi.n	8000cee <HAL_PCD_IRQHandler+0x3c6>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 8000cdc:	b32f      	cbz	r7, 8000d2a <HAL_PCD_IRQHandler+0x402>
        ep_intr >>= 1U;
 8000cde:	9b03      	ldr	r3, [sp, #12]
 8000ce0:	085b      	lsrs	r3, r3, #1
        epnum++;
 8000ce2:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000ce4:	9303      	str	r3, [sp, #12]
 8000ce6:	361c      	adds	r6, #28
 8000ce8:	f108 0820 	add.w	r8, r8, #32
 8000cec:	e658      	b.n	80009a0 <HAL_PCD_IRQHandler+0x78>
          (ep->xfer_count < ep->xfer_len) &&
 8000cee:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8000cf0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d9f2      	bls.n	8000cdc <HAL_PCD_IRQHandler+0x3b4>
          (ep->xfer_count < ep->xfer_len) &&
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d0f0      	beq.n	8000cdc <HAL_PCD_IRQHandler+0x3b4>
 8000cfa:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000cfc:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 8000cfe:	1a9b      	subs	r3, r3, r2
 8000d00:	429f      	cmp	r7, r3
 8000d02:	bf28      	it	cs
 8000d04:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000d06:	7c23      	ldrb	r3, [r4, #16]
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	465a      	mov	r2, fp
 8000d0c:	b2bb      	uxth	r3, r7
 8000d0e:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8000d10:	f001 f87f 	bl	8001e12 <USB_WritePacket>
    ep->xfer_buff  += len;
 8000d14:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000d16:	443b      	add	r3, r7
 8000d18:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8000d1a:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 8000d1c:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 8000d20:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 8000d22:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 8000d26:	6533      	str	r3, [r6, #80]	; 0x50
 8000d28:	e7d3      	b.n	8000cd2 <HAL_PCD_IRQHandler+0x3aa>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d2a:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 8000d2c:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d2e:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8000d32:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 8000d36:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d38:	ea23 0302 	bic.w	r3, r3, r2
 8000d3c:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8000d40:	e7cd      	b.n	8000cde <HAL_PCD_IRQHandler+0x3b6>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d42:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000d44:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d46:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8000d48:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d4c:	9002      	str	r0, [sp, #8]
 8000d4e:	3320      	adds	r3, #32
 8000d50:	e661      	b.n	8000a16 <HAL_PCD_IRQHandler+0xee>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8000d52:	6973      	ldr	r3, [r6, #20]
 8000d54:	f043 030b 	orr.w	r3, r3, #11
 8000d58:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000d5a:	6933      	ldr	r3, [r6, #16]
 8000d5c:	f043 030b 	orr.w	r3, r3, #11
 8000d60:	6133      	str	r3, [r6, #16]
 8000d62:	e671      	b.n	8000a48 <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8000d64:	2303      	movs	r3, #3
 8000d66:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8000d68:	2340      	movs	r3, #64	; 0x40
 8000d6a:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8000d6c:	f000 fbf8 	bl	8001560 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8000d70:	4b34      	ldr	r3, [pc, #208]	; (8000e44 <HAL_PCD_IRQHandler+0x51c>)
 8000d72:	4a35      	ldr	r2, [pc, #212]	; (8000e48 <HAL_PCD_IRQHandler+0x520>)
 8000d74:	4403      	add	r3, r0
 8000d76:	4293      	cmp	r3, r2
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	d804      	bhi.n	8000d86 <HAL_PCD_IRQHandler+0x45e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	e68c      	b.n	8000aa0 <HAL_PCD_IRQHandler+0x178>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8000d86:	4a31      	ldr	r2, [pc, #196]	; (8000e4c <HAL_PCD_IRQHandler+0x524>)
 8000d88:	4931      	ldr	r1, [pc, #196]	; (8000e50 <HAL_PCD_IRQHandler+0x528>)
 8000d8a:	4402      	add	r2, r0
 8000d8c:	428a      	cmp	r2, r1
 8000d8e:	d803      	bhi.n	8000d98 <HAL_PCD_IRQHandler+0x470>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000d96:	e7f4      	b.n	8000d82 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8000d98:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8000d9c:	492d      	ldr	r1, [pc, #180]	; (8000e54 <HAL_PCD_IRQHandler+0x52c>)
 8000d9e:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8000da2:	428a      	cmp	r2, r1
 8000da4:	d803      	bhi.n	8000dae <HAL_PCD_IRQHandler+0x486>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8000dac:	e7e9      	b.n	8000d82 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8000dae:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8000db2:	4929      	ldr	r1, [pc, #164]	; (8000e58 <HAL_PCD_IRQHandler+0x530>)
 8000db4:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8000db8:	428a      	cmp	r2, r1
 8000dba:	d803      	bhi.n	8000dc4 <HAL_PCD_IRQHandler+0x49c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000dbc:	68da      	ldr	r2, [r3, #12]
 8000dbe:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000dc2:	e7de      	b.n	8000d82 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8000dc4:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <HAL_PCD_IRQHandler+0x534>)
 8000dc6:	4926      	ldr	r1, [pc, #152]	; (8000e60 <HAL_PCD_IRQHandler+0x538>)
 8000dc8:	4402      	add	r2, r0
 8000dca:	428a      	cmp	r2, r1
 8000dcc:	d803      	bhi.n	8000dd6 <HAL_PCD_IRQHandler+0x4ae>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8000dd4:	e7d5      	b.n	8000d82 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8000dd6:	4a23      	ldr	r2, [pc, #140]	; (8000e64 <HAL_PCD_IRQHandler+0x53c>)
 8000dd8:	4923      	ldr	r1, [pc, #140]	; (8000e68 <HAL_PCD_IRQHandler+0x540>)
 8000dda:	4402      	add	r2, r0
 8000ddc:	428a      	cmp	r2, r1
 8000dde:	d803      	bhi.n	8000de8 <HAL_PCD_IRQHandler+0x4c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8000de6:	e7cc      	b.n	8000d82 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8000de8:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <HAL_PCD_IRQHandler+0x544>)
 8000dea:	4921      	ldr	r1, [pc, #132]	; (8000e70 <HAL_PCD_IRQHandler+0x548>)
 8000dec:	4402      	add	r2, r0
 8000dee:	428a      	cmp	r2, r1
 8000df0:	d803      	bhi.n	8000dfa <HAL_PCD_IRQHandler+0x4d2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8000df8:	e7c3      	b.n	8000d82 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8000dfa:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8000dfe:	491d      	ldr	r1, [pc, #116]	; (8000e74 <HAL_PCD_IRQHandler+0x54c>)
 8000e00:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8000e04:	428a      	cmp	r2, r1
 8000e06:	d803      	bhi.n	8000e10 <HAL_PCD_IRQHandler+0x4e8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e08:	68da      	ldr	r2, [r3, #12]
 8000e0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e0e:	e7b8      	b.n	8000d82 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8000e10:	4a19      	ldr	r2, [pc, #100]	; (8000e78 <HAL_PCD_IRQHandler+0x550>)
 8000e12:	491a      	ldr	r1, [pc, #104]	; (8000e7c <HAL_PCD_IRQHandler+0x554>)
 8000e14:	4402      	add	r2, r0
 8000e16:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	bf94      	ite	ls
 8000e1c:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e20:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8000e24:	e7ad      	b.n	8000d82 <HAL_PCD_IRQHandler+0x45a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	f47f ae6e 	bne.w	8000b08 <HAL_PCD_IRQHandler+0x1e0>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8000e32:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000e34:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e36:	f001 f800 	bl	8001e3a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000e3a:	fb07 4708 	mla	r7, r7, r8, r4
 8000e3e:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000e42:	e65c      	b.n	8000afe <HAL_PCD_IRQHandler+0x1d6>
 8000e44:	ff275340 	.word	0xff275340
 8000e48:	000c34ff 	.word	0x000c34ff
 8000e4c:	ff1b1e40 	.word	0xff1b1e40
 8000e50:	000f423f 	.word	0x000f423f
 8000e54:	00124f7f 	.word	0x00124f7f
 8000e58:	0013d61f 	.word	0x0013d61f
 8000e5c:	fee5b660 	.word	0xfee5b660
 8000e60:	0016e35f 	.word	0x0016e35f
 8000e64:	feced300 	.word	0xfeced300
 8000e68:	001b773f 	.word	0x001b773f
 8000e6c:	feb35bc0 	.word	0xfeb35bc0
 8000e70:	002191bf 	.word	0x002191bf
 8000e74:	0038751f 	.word	0x0038751f
 8000e78:	fe5954e0 	.word	0xfe5954e0
 8000e7c:	00419cdf 	.word	0x00419cdf

08000e80 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8000e80:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000e84:	2b01      	cmp	r3, #1
{
 8000e86:	b510      	push	{r4, lr}
 8000e88:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000e8a:	d009      	beq.n	8000ea0 <HAL_PCD_SetAddress+0x20>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8000e92:	6800      	ldr	r0, [r0, #0]
 8000e94:	f001 f817 	bl	8001ec6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000e9e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000ea0:	2002      	movs	r0, #2
}
 8000ea2:	bd10      	pop	{r4, pc}

08000ea4 <HAL_PCD_EP_Open>:
{
 8000ea4:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8000ea6:	b24e      	sxtb	r6, r1
 8000ea8:	2e00      	cmp	r6, #0
{
 8000eaa:	4604      	mov	r4, r0
 8000eac:	f04f 051c 	mov.w	r5, #28
 8000eb0:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000eb4:	bfb5      	itete	lt
 8000eb6:	fb05 4100 	mlalt	r1, r5, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000eba:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000ebe:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000ec0:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->num   = ep_addr & 0x7F;
 8000ec4:	b2c0      	uxtb	r0, r0
  if (ep->is_in)
 8000ec6:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 8000ec8:	bfb8      	it	lt
 8000eca:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 8000ecc:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8000ece:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000ed0:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->data_pid_start = 0U;
 8000ed4:	bf04      	itt	eq
 8000ed6:	2300      	moveq	r3, #0
 8000ed8:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 8000eda:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000edc:	704d      	strb	r5, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000ede:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 8000ee2:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d009      	beq.n	8000efc <HAL_PCD_EP_Open+0x58>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000eee:	6820      	ldr	r0, [r4, #0]
 8000ef0:	f000 fdc2 	bl	8001a78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 8000efa:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 8000efc:	2002      	movs	r0, #2
}
 8000efe:	bd70      	pop	{r4, r5, r6, pc}

08000f00 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8000f00:	b24b      	sxtb	r3, r1
 8000f02:	2b00      	cmp	r3, #0
{  
 8000f04:	b510      	push	{r4, lr}
 8000f06:	f04f 021c 	mov.w	r2, #28
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f10:	bfb5      	itete	lt
 8000f12:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f16:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f1a:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f1c:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 8000f20:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8000f22:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000f24:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000f26:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d009      	beq.n	8000f42 <HAL_PCD_EP_Close+0x42>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000f34:	6820      	ldr	r0, [r4, #0]
 8000f36:	f000 fdde 	bl	8001af6 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000f40:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000f42:	2002      	movs	r0, #2
}
 8000f44:	bd10      	pop	{r4, pc}

08000f46 <HAL_PCD_EP_Receive>:
{
 8000f46:	b538      	push	{r3, r4, r5, lr}
 8000f48:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f4c:	241c      	movs	r4, #28
 8000f4e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8000f52:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f56:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 8000f5a:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 8000f5e:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 8000f60:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 8000f64:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8000f68:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8000f6c:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 8000f70:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000f72:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8000f74:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8000f76:	bf08      	it	eq
 8000f78:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 8000f7c:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8000f7e:	b91d      	cbnz	r5, 8000f88 <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000f80:	f000 feda 	bl	8001d38 <USB_EP0StartXfer>
}
 8000f84:	2000      	movs	r0, #0
 8000f86:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000f88:	f000 fe10 	bl	8001bac <USB_EPStartXfer>
 8000f8c:	e7fa      	b.n	8000f84 <HAL_PCD_EP_Receive+0x3e>

08000f8e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8000f8e:	231c      	movs	r3, #28
 8000f90:	f001 010f 	and.w	r1, r1, #15
 8000f94:	fb03 0101 	mla	r1, r3, r1, r0
}
 8000f98:	f8b1 0210 	ldrh.w	r0, [r1, #528]	; 0x210
 8000f9c:	4770      	bx	lr

08000f9e <HAL_PCD_EP_Transmit>:
{
 8000f9e:	b538      	push	{r3, r4, r5, lr}
 8000fa0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fa4:	241c      	movs	r4, #28
 8000fa6:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8000faa:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fae:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 8000fb0:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 8000fb6:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 8000fb8:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000fba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 8000fbe:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 8000fc2:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000fc4:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8000fc6:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8000fc8:	bf08      	it	eq
 8000fca:	64a2      	streq	r2, [r4, #72]	; 0x48
 8000fcc:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8000fce:	b91d      	cbnz	r5, 8000fd8 <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000fd0:	f000 feb2 	bl	8001d38 <USB_EP0StartXfer>
}
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8000fd8:	f000 fde8 	bl	8001bac <USB_EPStartXfer>
 8000fdc:	e7fa      	b.n	8000fd4 <HAL_PCD_EP_Transmit+0x36>

08000fde <HAL_PCD_EP_SetStall>:
{
 8000fde:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8000fe0:	b24b      	sxtb	r3, r1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8000fe8:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fec:	bfb5      	itete	lt
 8000fee:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8000ff2:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000ff6:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8000ff8:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 8000ffc:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000ffe:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8001000:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8001002:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001004:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001006:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001008:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 800100c:	4293      	cmp	r3, r2
{
 800100e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8001010:	d00f      	beq.n	8001032 <HAL_PCD_EP_SetStall+0x54>
 8001012:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8001016:	6800      	ldr	r0, [r0, #0]
 8001018:	f000 ff1d 	bl	8001e56 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 800101c:	b92d      	cbnz	r5, 800102a <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800101e:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001022:	7c21      	ldrb	r1, [r4, #16]
 8001024:	6820      	ldr	r0, [r4, #0]
 8001026:	f000 ffc3 	bl	8001fb0 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 800102a:	2000      	movs	r0, #0
 800102c:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001030:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001032:	2002      	movs	r0, #2
}
 8001034:	bd38      	pop	{r3, r4, r5, pc}

08001036 <HAL_PCD_EP_ClrStall>:
{
 8001036:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8001038:	b24b      	sxtb	r3, r1
 800103a:	2b00      	cmp	r3, #0
{
 800103c:	4605      	mov	r5, r0
 800103e:	f04f 021c 	mov.w	r2, #28
 8001042:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001046:	bfb5      	itete	lt
 8001048:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 800104c:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001050:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8001052:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001056:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8001058:	2400      	movs	r4, #0
 800105a:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800105c:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800105e:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001060:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8001064:	2b01      	cmp	r3, #1
 8001066:	d009      	beq.n	800107c <HAL_PCD_EP_ClrStall+0x46>
 8001068:	2301      	movs	r3, #1
 800106a:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 800106e:	6828      	ldr	r0, [r5, #0]
 8001070:	f000 ff10 	bl	8001e94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001074:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 8001078:	4620      	mov	r0, r4
 800107a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 800107c:	2002      	movs	r0, #2
}
 800107e:	bd38      	pop	{r3, r4, r5, pc}

08001080 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001080:	6800      	ldr	r0, [r0, #0]
{
 8001082:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001084:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 8001086:	b921      	cbnz	r1, 8001092 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8001088:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800108c:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 800108e:	2000      	movs	r0, #0
 8001090:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001092:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 8001094:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001096:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 800109a:	1e4e      	subs	r6, r1, #1
 800109c:	b2ec      	uxtb	r4, r5
 800109e:	42b4      	cmp	r4, r6
 80010a0:	f105 0501 	add.w	r5, r5, #1
 80010a4:	db06      	blt.n	80010b4 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 80010a6:	313f      	adds	r1, #63	; 0x3f
 80010a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80010ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010b0:	6043      	str	r3, [r0, #4]
 80010b2:	e7ec      	b.n	800108e <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 80010b4:	3440      	adds	r4, #64	; 0x40
 80010b6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80010ba:	6864      	ldr	r4, [r4, #4]
 80010bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80010c0:	e7ec      	b.n	800109c <HAL_PCDEx_SetTxFiFo+0x1c>

080010c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80010c2:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 80010c4:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80010c6:	6259      	str	r1, [r3, #36]	; 0x24
}
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d0:	4604      	mov	r4, r0
 80010d2:	b918      	cbnz	r0, 80010dc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80010d4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80010d6:	b002      	add	sp, #8
 80010d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010dc:	6803      	ldr	r3, [r0, #0]
 80010de:	07dd      	lsls	r5, r3, #31
 80010e0:	d410      	bmi.n	8001104 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	0798      	lsls	r0, r3, #30
 80010e6:	d458      	bmi.n	800119a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	071a      	lsls	r2, r3, #28
 80010ec:	f100 809a 	bmi.w	8001224 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	075b      	lsls	r3, r3, #29
 80010f4:	f100 80b8 	bmi.w	8001268 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010f8:	69a2      	ldr	r2, [r4, #24]
 80010fa:	2a00      	cmp	r2, #0
 80010fc:	f040 8119 	bne.w	8001332 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001100:	2000      	movs	r0, #0
 8001102:	e7e8      	b.n	80010d6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001104:	4ba6      	ldr	r3, [pc, #664]	; (80013a0 <HAL_RCC_OscConfig+0x2d4>)
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	f002 020c 	and.w	r2, r2, #12
 800110c:	2a04      	cmp	r2, #4
 800110e:	d007      	beq.n	8001120 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001116:	2a08      	cmp	r2, #8
 8001118:	d10a      	bne.n	8001130 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	0259      	lsls	r1, r3, #9
 800111e:	d507      	bpl.n	8001130 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	4b9f      	ldr	r3, [pc, #636]	; (80013a0 <HAL_RCC_OscConfig+0x2d4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	039a      	lsls	r2, r3, #14
 8001126:	d5dc      	bpl.n	80010e2 <HAL_RCC_OscConfig+0x16>
 8001128:	6863      	ldr	r3, [r4, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1d9      	bne.n	80010e2 <HAL_RCC_OscConfig+0x16>
 800112e:	e7d1      	b.n	80010d4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001130:	6863      	ldr	r3, [r4, #4]
 8001132:	4d9b      	ldr	r5, [pc, #620]	; (80013a0 <HAL_RCC_OscConfig+0x2d4>)
 8001134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001138:	d111      	bne.n	800115e <HAL_RCC_OscConfig+0x92>
 800113a:	682b      	ldr	r3, [r5, #0]
 800113c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001140:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001142:	f7ff fa03 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	4d96      	ldr	r5, [pc, #600]	; (80013a0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001148:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114a:	682b      	ldr	r3, [r5, #0]
 800114c:	039b      	lsls	r3, r3, #14
 800114e:	d4c8      	bmi.n	80010e2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff f9fc 	bl	800054c <HAL_GetTick>
 8001154:	1b80      	subs	r0, r0, r6
 8001156:	2864      	cmp	r0, #100	; 0x64
 8001158:	d9f7      	bls.n	800114a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800115a:	2003      	movs	r0, #3
 800115c:	e7bb      	b.n	80010d6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001162:	d104      	bne.n	800116e <HAL_RCC_OscConfig+0xa2>
 8001164:	682b      	ldr	r3, [r5, #0]
 8001166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116a:	602b      	str	r3, [r5, #0]
 800116c:	e7e5      	b.n	800113a <HAL_RCC_OscConfig+0x6e>
 800116e:	682a      	ldr	r2, [r5, #0]
 8001170:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001174:	602a      	str	r2, [r5, #0]
 8001176:	682a      	ldr	r2, [r5, #0]
 8001178:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800117c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1df      	bne.n	8001142 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001182:	f7ff f9e3 	bl	800054c <HAL_GetTick>
 8001186:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001188:	682b      	ldr	r3, [r5, #0]
 800118a:	039f      	lsls	r7, r3, #14
 800118c:	d5a9      	bpl.n	80010e2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800118e:	f7ff f9dd 	bl	800054c <HAL_GetTick>
 8001192:	1b80      	subs	r0, r0, r6
 8001194:	2864      	cmp	r0, #100	; 0x64
 8001196:	d9f7      	bls.n	8001188 <HAL_RCC_OscConfig+0xbc>
 8001198:	e7df      	b.n	800115a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800119a:	4b81      	ldr	r3, [pc, #516]	; (80013a0 <HAL_RCC_OscConfig+0x2d4>)
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	f012 0f0c 	tst.w	r2, #12
 80011a2:	d007      	beq.n	80011b4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011aa:	2a08      	cmp	r2, #8
 80011ac:	d111      	bne.n	80011d2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	025e      	lsls	r6, r3, #9
 80011b2:	d40e      	bmi.n	80011d2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b4:	4b7a      	ldr	r3, [pc, #488]	; (80013a0 <HAL_RCC_OscConfig+0x2d4>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	0795      	lsls	r5, r2, #30
 80011ba:	d502      	bpl.n	80011c2 <HAL_RCC_OscConfig+0xf6>
 80011bc:	68e2      	ldr	r2, [r4, #12]
 80011be:	2a01      	cmp	r2, #1
 80011c0:	d188      	bne.n	80010d4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	6921      	ldr	r1, [r4, #16]
 80011c6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80011ca:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80011ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d0:	e78a      	b.n	80010e8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011d2:	68e2      	ldr	r2, [r4, #12]
 80011d4:	4b73      	ldr	r3, [pc, #460]	; (80013a4 <HAL_RCC_OscConfig+0x2d8>)
 80011d6:	b1b2      	cbz	r2, 8001206 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80011d8:	2201      	movs	r2, #1
 80011da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011dc:	f7ff f9b6 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	4d6f      	ldr	r5, [pc, #444]	; (80013a0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80011e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e4:	682b      	ldr	r3, [r5, #0]
 80011e6:	0798      	lsls	r0, r3, #30
 80011e8:	d507      	bpl.n	80011fa <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ea:	682b      	ldr	r3, [r5, #0]
 80011ec:	6922      	ldr	r2, [r4, #16]
 80011ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011f2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011f6:	602b      	str	r3, [r5, #0]
 80011f8:	e776      	b.n	80010e8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff f9a7 	bl	800054c <HAL_GetTick>
 80011fe:	1b80      	subs	r0, r0, r6
 8001200:	2802      	cmp	r0, #2
 8001202:	d9ef      	bls.n	80011e4 <HAL_RCC_OscConfig+0x118>
 8001204:	e7a9      	b.n	800115a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001206:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001208:	f7ff f9a0 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120c:	4d64      	ldr	r5, [pc, #400]	; (80013a0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800120e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001210:	682b      	ldr	r3, [r5, #0]
 8001212:	0799      	lsls	r1, r3, #30
 8001214:	f57f af68 	bpl.w	80010e8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001218:	f7ff f998 	bl	800054c <HAL_GetTick>
 800121c:	1b80      	subs	r0, r0, r6
 800121e:	2802      	cmp	r0, #2
 8001220:	d9f6      	bls.n	8001210 <HAL_RCC_OscConfig+0x144>
 8001222:	e79a      	b.n	800115a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001224:	6962      	ldr	r2, [r4, #20]
 8001226:	4b60      	ldr	r3, [pc, #384]	; (80013a8 <HAL_RCC_OscConfig+0x2dc>)
 8001228:	b17a      	cbz	r2, 800124a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800122a:	2201      	movs	r2, #1
 800122c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800122e:	f7ff f98d 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001232:	4d5b      	ldr	r5, [pc, #364]	; (80013a0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001234:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001236:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001238:	079f      	lsls	r7, r3, #30
 800123a:	f53f af59 	bmi.w	80010f0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800123e:	f7ff f985 	bl	800054c <HAL_GetTick>
 8001242:	1b80      	subs	r0, r0, r6
 8001244:	2802      	cmp	r0, #2
 8001246:	d9f6      	bls.n	8001236 <HAL_RCC_OscConfig+0x16a>
 8001248:	e787      	b.n	800115a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800124a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800124c:	f7ff f97e 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001250:	4d53      	ldr	r5, [pc, #332]	; (80013a0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001252:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001254:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001256:	0798      	lsls	r0, r3, #30
 8001258:	f57f af4a 	bpl.w	80010f0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff f976 	bl	800054c <HAL_GetTick>
 8001260:	1b80      	subs	r0, r0, r6
 8001262:	2802      	cmp	r0, #2
 8001264:	d9f6      	bls.n	8001254 <HAL_RCC_OscConfig+0x188>
 8001266:	e778      	b.n	800115a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001268:	4b4d      	ldr	r3, [pc, #308]	; (80013a0 <HAL_RCC_OscConfig+0x2d4>)
 800126a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800126c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001270:	d128      	bne.n	80012c4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	9201      	str	r2, [sp, #4]
 8001274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001276:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800127a:	641a      	str	r2, [r3, #64]	; 0x40
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001286:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001288:	4d48      	ldr	r5, [pc, #288]	; (80013ac <HAL_RCC_OscConfig+0x2e0>)
 800128a:	682b      	ldr	r3, [r5, #0]
 800128c:	05d9      	lsls	r1, r3, #23
 800128e:	d51b      	bpl.n	80012c8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001290:	68a3      	ldr	r3, [r4, #8]
 8001292:	4d43      	ldr	r5, [pc, #268]	; (80013a0 <HAL_RCC_OscConfig+0x2d4>)
 8001294:	2b01      	cmp	r3, #1
 8001296:	d127      	bne.n	80012e8 <HAL_RCC_OscConfig+0x21c>
 8001298:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80012a0:	f7ff f954 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a4:	4d3e      	ldr	r5, [pc, #248]	; (80013a0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80012a6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012ae:	079b      	lsls	r3, r3, #30
 80012b0:	d539      	bpl.n	8001326 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80012b2:	2e00      	cmp	r6, #0
 80012b4:	f43f af20 	beq.w	80010f8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b8:	4a39      	ldr	r2, [pc, #228]	; (80013a0 <HAL_RCC_OscConfig+0x2d4>)
 80012ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c0:	6413      	str	r3, [r2, #64]	; 0x40
 80012c2:	e719      	b.n	80010f8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80012c4:	2600      	movs	r6, #0
 80012c6:	e7df      	b.n	8001288 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012c8:	682b      	ldr	r3, [r5, #0]
 80012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ce:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80012d0:	f7ff f93c 	bl	800054c <HAL_GetTick>
 80012d4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d6:	682b      	ldr	r3, [r5, #0]
 80012d8:	05da      	lsls	r2, r3, #23
 80012da:	d4d9      	bmi.n	8001290 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012dc:	f7ff f936 	bl	800054c <HAL_GetTick>
 80012e0:	1bc0      	subs	r0, r0, r7
 80012e2:	2802      	cmp	r0, #2
 80012e4:	d9f7      	bls.n	80012d6 <HAL_RCC_OscConfig+0x20a>
 80012e6:	e738      	b.n	800115a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e8:	2b05      	cmp	r3, #5
 80012ea:	d104      	bne.n	80012f6 <HAL_RCC_OscConfig+0x22a>
 80012ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	672b      	str	r3, [r5, #112]	; 0x70
 80012f4:	e7d0      	b.n	8001298 <HAL_RCC_OscConfig+0x1cc>
 80012f6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80012f8:	f022 0201 	bic.w	r2, r2, #1
 80012fc:	672a      	str	r2, [r5, #112]	; 0x70
 80012fe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001300:	f022 0204 	bic.w	r2, r2, #4
 8001304:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1ca      	bne.n	80012a0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800130a:	f7ff f91f 	bl	800054c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800130e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001312:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001314:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001316:	0798      	lsls	r0, r3, #30
 8001318:	d5cb      	bpl.n	80012b2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800131a:	f7ff f917 	bl	800054c <HAL_GetTick>
 800131e:	1bc0      	subs	r0, r0, r7
 8001320:	4540      	cmp	r0, r8
 8001322:	d9f7      	bls.n	8001314 <HAL_RCC_OscConfig+0x248>
 8001324:	e719      	b.n	800115a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001326:	f7ff f911 	bl	800054c <HAL_GetTick>
 800132a:	1bc0      	subs	r0, r0, r7
 800132c:	4540      	cmp	r0, r8
 800132e:	d9bd      	bls.n	80012ac <HAL_RCC_OscConfig+0x1e0>
 8001330:	e713      	b.n	800115a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001332:	4d1b      	ldr	r5, [pc, #108]	; (80013a0 <HAL_RCC_OscConfig+0x2d4>)
 8001334:	68ab      	ldr	r3, [r5, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b08      	cmp	r3, #8
 800133c:	f43f aeca 	beq.w	80010d4 <HAL_RCC_OscConfig+0x8>
 8001340:	4e1b      	ldr	r6, [pc, #108]	; (80013b0 <HAL_RCC_OscConfig+0x2e4>)
 8001342:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001344:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001346:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001348:	d134      	bne.n	80013b4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800134a:	f7ff f8ff 	bl	800054c <HAL_GetTick>
 800134e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001350:	682b      	ldr	r3, [r5, #0]
 8001352:	0199      	lsls	r1, r3, #6
 8001354:	d41e      	bmi.n	8001394 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001356:	6a22      	ldr	r2, [r4, #32]
 8001358:	69e3      	ldr	r3, [r4, #28]
 800135a:	4313      	orrs	r3, r2
 800135c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800135e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001362:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001364:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001368:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136a:	4c0d      	ldr	r4, [pc, #52]	; (80013a0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800136c:	0852      	lsrs	r2, r2, #1
 800136e:	3a01      	subs	r2, #1
 8001370:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001374:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001376:	2301      	movs	r3, #1
 8001378:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800137a:	f7ff f8e7 	bl	800054c <HAL_GetTick>
 800137e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	019a      	lsls	r2, r3, #6
 8001384:	f53f aebc 	bmi.w	8001100 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001388:	f7ff f8e0 	bl	800054c <HAL_GetTick>
 800138c:	1b40      	subs	r0, r0, r5
 800138e:	2802      	cmp	r0, #2
 8001390:	d9f6      	bls.n	8001380 <HAL_RCC_OscConfig+0x2b4>
 8001392:	e6e2      	b.n	800115a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001394:	f7ff f8da 	bl	800054c <HAL_GetTick>
 8001398:	1bc0      	subs	r0, r0, r7
 800139a:	2802      	cmp	r0, #2
 800139c:	d9d8      	bls.n	8001350 <HAL_RCC_OscConfig+0x284>
 800139e:	e6dc      	b.n	800115a <HAL_RCC_OscConfig+0x8e>
 80013a0:	40023800 	.word	0x40023800
 80013a4:	42470000 	.word	0x42470000
 80013a8:	42470e80 	.word	0x42470e80
 80013ac:	40007000 	.word	0x40007000
 80013b0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80013b4:	f7ff f8ca 	bl	800054c <HAL_GetTick>
 80013b8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ba:	682b      	ldr	r3, [r5, #0]
 80013bc:	019b      	lsls	r3, r3, #6
 80013be:	f57f ae9f 	bpl.w	8001100 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff f8c3 	bl	800054c <HAL_GetTick>
 80013c6:	1b00      	subs	r0, r0, r4
 80013c8:	2802      	cmp	r0, #2
 80013ca:	d9f6      	bls.n	80013ba <HAL_RCC_OscConfig+0x2ee>
 80013cc:	e6c5      	b.n	800115a <HAL_RCC_OscConfig+0x8e>
 80013ce:	bf00      	nop

080013d0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013d0:	4913      	ldr	r1, [pc, #76]	; (8001420 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80013d2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013d4:	688b      	ldr	r3, [r1, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d003      	beq.n	80013e6 <HAL_RCC_GetSysClockFreq+0x16>
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d003      	beq.n	80013ea <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013e2:	4810      	ldr	r0, [pc, #64]	; (8001424 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013e4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80013e6:	4810      	ldr	r0, [pc, #64]	; (8001428 <HAL_RCC_GetSysClockFreq+0x58>)
 80013e8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013ea:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013ec:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ee:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013f0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f4:	bf14      	ite	ne
 80013f6:	480c      	ldrne	r0, [pc, #48]	; (8001428 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f8:	480a      	ldreq	r0, [pc, #40]	; (8001424 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013fa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80013fe:	bf18      	it	ne
 8001400:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001402:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001406:	fba1 0100 	umull	r0, r1, r1, r0
 800140a:	f7fe fef1 	bl	80001f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <HAL_RCC_GetSysClockFreq+0x50>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001416:	3301      	adds	r3, #1
 8001418:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800141a:	fbb0 f0f3 	udiv	r0, r0, r3
 800141e:	bd08      	pop	{r3, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	00f42400 	.word	0x00f42400
 8001428:	007a1200 	.word	0x007a1200

0800142c <HAL_RCC_ClockConfig>:
{
 800142c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001430:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001432:	4604      	mov	r4, r0
 8001434:	b910      	cbnz	r0, 800143c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001436:	2001      	movs	r0, #1
 8001438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800143c:	4b44      	ldr	r3, [pc, #272]	; (8001550 <HAL_RCC_ClockConfig+0x124>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	f002 020f 	and.w	r2, r2, #15
 8001444:	428a      	cmp	r2, r1
 8001446:	d328      	bcc.n	800149a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001448:	6821      	ldr	r1, [r4, #0]
 800144a:	078f      	lsls	r7, r1, #30
 800144c:	d42d      	bmi.n	80014aa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800144e:	07c8      	lsls	r0, r1, #31
 8001450:	d440      	bmi.n	80014d4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001452:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <HAL_RCC_ClockConfig+0x124>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	f002 020f 	and.w	r2, r2, #15
 800145a:	4295      	cmp	r5, r2
 800145c:	d366      	bcc.n	800152c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145e:	6822      	ldr	r2, [r4, #0]
 8001460:	0751      	lsls	r1, r2, #29
 8001462:	d46c      	bmi.n	800153e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001464:	0713      	lsls	r3, r2, #28
 8001466:	d507      	bpl.n	8001478 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001468:	4a3a      	ldr	r2, [pc, #232]	; (8001554 <HAL_RCC_ClockConfig+0x128>)
 800146a:	6921      	ldr	r1, [r4, #16]
 800146c:	6893      	ldr	r3, [r2, #8]
 800146e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001472:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001476:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001478:	f7ff ffaa 	bl	80013d0 <HAL_RCC_GetSysClockFreq>
 800147c:	4b35      	ldr	r3, [pc, #212]	; (8001554 <HAL_RCC_ClockConfig+0x128>)
 800147e:	4a36      	ldr	r2, [pc, #216]	; (8001558 <HAL_RCC_ClockConfig+0x12c>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001486:	5cd3      	ldrb	r3, [r2, r3]
 8001488:	40d8      	lsrs	r0, r3
 800148a:	4b34      	ldr	r3, [pc, #208]	; (800155c <HAL_RCC_ClockConfig+0x130>)
 800148c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800148e:	2000      	movs	r0, #0
 8001490:	f007 fe12 	bl	80090b8 <HAL_InitTick>
  return HAL_OK;
 8001494:	2000      	movs	r0, #0
 8001496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149a:	b2ca      	uxtb	r2, r1
 800149c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	4299      	cmp	r1, r3
 80014a6:	d1c6      	bne.n	8001436 <HAL_RCC_ClockConfig+0xa>
 80014a8:	e7ce      	b.n	8001448 <HAL_RCC_ClockConfig+0x1c>
 80014aa:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ac:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b0:	bf1e      	ittt	ne
 80014b2:	689a      	ldrne	r2, [r3, #8]
 80014b4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80014b8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ba:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014bc:	bf42      	ittt	mi
 80014be:	689a      	ldrmi	r2, [r3, #8]
 80014c0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80014c4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	68a0      	ldr	r0, [r4, #8]
 80014ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80014ce:	4302      	orrs	r2, r0
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	e7bc      	b.n	800144e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d4:	6862      	ldr	r2, [r4, #4]
 80014d6:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <HAL_RCC_ClockConfig+0x128>)
 80014d8:	2a01      	cmp	r2, #1
 80014da:	d11d      	bne.n	8001518 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e2:	d0a8      	beq.n	8001436 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e4:	4e1b      	ldr	r6, [pc, #108]	; (8001554 <HAL_RCC_ClockConfig+0x128>)
 80014e6:	68b3      	ldr	r3, [r6, #8]
 80014e8:	f023 0303 	bic.w	r3, r3, #3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80014f0:	f7ff f82c 	bl	800054c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80014f8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fa:	68b3      	ldr	r3, [r6, #8]
 80014fc:	6862      	ldr	r2, [r4, #4]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001506:	d0a4      	beq.n	8001452 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001508:	f7ff f820 	bl	800054c <HAL_GetTick>
 800150c:	1bc0      	subs	r0, r0, r7
 800150e:	4540      	cmp	r0, r8
 8001510:	d9f3      	bls.n	80014fa <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001512:	2003      	movs	r0, #3
}
 8001514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001518:	1e91      	subs	r1, r2, #2
 800151a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800151e:	d802      	bhi.n	8001526 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001520:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001524:	e7dd      	b.n	80014e2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001526:	f013 0f02 	tst.w	r3, #2
 800152a:	e7da      	b.n	80014e2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152c:	b2ea      	uxtb	r2, r5
 800152e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	429d      	cmp	r5, r3
 8001538:	f47f af7d 	bne.w	8001436 <HAL_RCC_ClockConfig+0xa>
 800153c:	e78f      	b.n	800145e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800153e:	4905      	ldr	r1, [pc, #20]	; (8001554 <HAL_RCC_ClockConfig+0x128>)
 8001540:	68e0      	ldr	r0, [r4, #12]
 8001542:	688b      	ldr	r3, [r1, #8]
 8001544:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001548:	4303      	orrs	r3, r0
 800154a:	608b      	str	r3, [r1, #8]
 800154c:	e78a      	b.n	8001464 <HAL_RCC_ClockConfig+0x38>
 800154e:	bf00      	nop
 8001550:	40023c00 	.word	0x40023c00
 8001554:	40023800 	.word	0x40023800
 8001558:	080097c9 	.word	0x080097c9
 800155c:	200001d0 	.word	0x200001d0

08001560 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001560:	4b01      	ldr	r3, [pc, #4]	; (8001568 <HAL_RCC_GetHCLKFreq+0x8>)
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	200001d0 	.word	0x200001d0

0800156c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <HAL_RCC_GetPCLK2Freq+0x14>)
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001576:	5cd3      	ldrb	r3, [r2, r3]
 8001578:	4a03      	ldr	r2, [pc, #12]	; (8001588 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800157a:	6810      	ldr	r0, [r2, #0]
}
 800157c:	40d8      	lsrs	r0, r3
 800157e:	4770      	bx	lr
 8001580:	40023800 	.word	0x40023800
 8001584:	080097d9 	.word	0x080097d9
 8001588:	200001d0 	.word	0x200001d0

0800158c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800158c:	230f      	movs	r3, #15
 800158e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_RCC_GetClockConfig+0x34>)
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	f002 0203 	and.w	r2, r2, #3
 8001598:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80015a0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80015a8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	08db      	lsrs	r3, r3, #3
 80015ae:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80015b2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_RCC_GetClockConfig+0x38>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	600b      	str	r3, [r1, #0]
 80015be:	4770      	bx	lr
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <HAL_TIM_Base_MspInit>:
 80015c8:	4770      	bx	lr

080015ca <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015ca:	6803      	ldr	r3, [r0, #0]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	f042 0201 	orr.w	r2, r2, #1
 80015d2:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80015dc:	2000      	movs	r0, #0
 80015de:	4770      	bx	lr

080015e0 <HAL_TIM_OC_DelayElapsedCallback>:
 80015e0:	4770      	bx	lr

080015e2 <HAL_TIM_IC_CaptureCallback>:
 80015e2:	4770      	bx	lr

080015e4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80015e4:	4770      	bx	lr

080015e6 <HAL_TIM_TriggerCallback>:
 80015e6:	4770      	bx	lr

080015e8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015e8:	6803      	ldr	r3, [r0, #0]
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	0791      	lsls	r1, r2, #30
{
 80015ee:	b510      	push	{r4, lr}
 80015f0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015f2:	d50e      	bpl.n	8001612 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	0792      	lsls	r2, r2, #30
 80015f8:	d50b      	bpl.n	8001612 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015fa:	f06f 0202 	mvn.w	r2, #2
 80015fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001600:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001602:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001604:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001606:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001608:	d077      	beq.n	80016fa <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800160a:	f7ff ffea 	bl	80015e2 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800160e:	2300      	movs	r3, #0
 8001610:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	0750      	lsls	r0, r2, #29
 8001618:	d510      	bpl.n	800163c <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	0751      	lsls	r1, r2, #29
 800161e:	d50d      	bpl.n	800163c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001620:	f06f 0204 	mvn.w	r2, #4
 8001624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001626:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001628:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800162a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800162e:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001630:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001632:	d068      	beq.n	8001706 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001634:	f7ff ffd5 	bl	80015e2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001638:	2300      	movs	r3, #0
 800163a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	691a      	ldr	r2, [r3, #16]
 8001640:	0712      	lsls	r2, r2, #28
 8001642:	d50f      	bpl.n	8001664 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	0710      	lsls	r0, r2, #28
 8001648:	d50c      	bpl.n	8001664 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800164a:	f06f 0208 	mvn.w	r2, #8
 800164e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001650:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001652:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001654:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001656:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001658:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800165a:	d05a      	beq.n	8001712 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800165c:	f7ff ffc1 	bl	80015e2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001660:	2300      	movs	r3, #0
 8001662:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	06d2      	lsls	r2, r2, #27
 800166a:	d510      	bpl.n	800168e <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	06d0      	lsls	r0, r2, #27
 8001670:	d50d      	bpl.n	800168e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001672:	f06f 0210 	mvn.w	r2, #16
 8001676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001678:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800167a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800167c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001680:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001682:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001684:	d04b      	beq.n	800171e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001686:	f7ff ffac 	bl	80015e2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800168a:	2300      	movs	r3, #0
 800168c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	07d1      	lsls	r1, r2, #31
 8001694:	d508      	bpl.n	80016a8 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	07d2      	lsls	r2, r2, #31
 800169a:	d505      	bpl.n	80016a8 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800169c:	f06f 0201 	mvn.w	r2, #1
 80016a0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80016a2:	4620      	mov	r0, r4
 80016a4:	f007 fcb4 	bl	8009010 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	0610      	lsls	r0, r2, #24
 80016ae:	d508      	bpl.n	80016c2 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	0611      	lsls	r1, r2, #24
 80016b4:	d505      	bpl.n	80016c2 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80016bc:	4620      	mov	r0, r4
 80016be:	f000 f89c 	bl	80017fa <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	0652      	lsls	r2, r2, #25
 80016c8:	d508      	bpl.n	80016dc <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	0650      	lsls	r0, r2, #25
 80016ce:	d505      	bpl.n	80016dc <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80016d6:	4620      	mov	r0, r4
 80016d8:	f7ff ff85 	bl	80015e6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	0691      	lsls	r1, r2, #26
 80016e2:	d522      	bpl.n	800172a <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	0692      	lsls	r2, r2, #26
 80016e8:	d51f      	bpl.n	800172a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016ea:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80016ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016f0:	611a      	str	r2, [r3, #16]
    }
  }
}
 80016f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80016f6:	f000 b87f 	b.w	80017f8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016fa:	f7ff ff71 	bl	80015e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff ff70 	bl	80015e4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001704:	e783      	b.n	800160e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001706:	f7ff ff6b 	bl	80015e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff ff6a 	bl	80015e4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001710:	e792      	b.n	8001638 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001712:	f7ff ff65 	bl	80015e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001716:	4620      	mov	r0, r4
 8001718:	f7ff ff64 	bl	80015e4 <HAL_TIM_PWM_PulseFinishedCallback>
 800171c:	e7a0      	b.n	8001660 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800171e:	f7ff ff5f 	bl	80015e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff ff5e 	bl	80015e4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001728:	e7af      	b.n	800168a <HAL_TIM_IRQHandler+0xa2>
 800172a:	bd10      	pop	{r4, pc}

0800172c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800172c:	4a22      	ldr	r2, [pc, #136]	; (80017b8 <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 800172e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001730:	4290      	cmp	r0, r2
 8001732:	d00e      	beq.n	8001752 <TIM_Base_SetConfig+0x26>
 8001734:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001738:	d00b      	beq.n	8001752 <TIM_Base_SetConfig+0x26>
 800173a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800173e:	4290      	cmp	r0, r2
 8001740:	d007      	beq.n	8001752 <TIM_Base_SetConfig+0x26>
 8001742:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001746:	4290      	cmp	r0, r2
 8001748:	d003      	beq.n	8001752 <TIM_Base_SetConfig+0x26>
 800174a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800174e:	4290      	cmp	r0, r2
 8001750:	d119      	bne.n	8001786 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001752:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001758:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800175a:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <TIM_Base_SetConfig+0x8c>)
 800175c:	4290      	cmp	r0, r2
 800175e:	d104      	bne.n	800176a <TIM_Base_SetConfig+0x3e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001760:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001766:	4313      	orrs	r3, r2
 8001768:	e018      	b.n	800179c <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800176a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800176e:	d0f7      	beq.n	8001760 <TIM_Base_SetConfig+0x34>
 8001770:	4a12      	ldr	r2, [pc, #72]	; (80017bc <TIM_Base_SetConfig+0x90>)
 8001772:	4290      	cmp	r0, r2
 8001774:	d0f4      	beq.n	8001760 <TIM_Base_SetConfig+0x34>
 8001776:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800177a:	4290      	cmp	r0, r2
 800177c:	d0f0      	beq.n	8001760 <TIM_Base_SetConfig+0x34>
 800177e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001782:	4290      	cmp	r0, r2
 8001784:	d0ec      	beq.n	8001760 <TIM_Base_SetConfig+0x34>
 8001786:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <TIM_Base_SetConfig+0x94>)
 8001788:	4290      	cmp	r0, r2
 800178a:	d0e9      	beq.n	8001760 <TIM_Base_SetConfig+0x34>
 800178c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001790:	4290      	cmp	r0, r2
 8001792:	d0e5      	beq.n	8001760 <TIM_Base_SetConfig+0x34>
 8001794:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001798:	4290      	cmp	r0, r2
 800179a:	d0e1      	beq.n	8001760 <TIM_Base_SetConfig+0x34>
  }

  TIMx->CR1 = tmpcr1;
 800179c:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800179e:	688b      	ldr	r3, [r1, #8]
 80017a0:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017a2:	680b      	ldr	r3, [r1, #0]
 80017a4:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <TIM_Base_SetConfig+0x8c>)
 80017a8:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017aa:	bf04      	itt	eq
 80017ac:	690b      	ldreq	r3, [r1, #16]
 80017ae:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017b0:	2301      	movs	r3, #1
 80017b2:	6143      	str	r3, [r0, #20]
}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40010000 	.word	0x40010000
 80017bc:	40000400 	.word	0x40000400
 80017c0:	40014000 	.word	0x40014000

080017c4 <HAL_TIM_Base_Init>:
{ 
 80017c4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80017c6:	4604      	mov	r4, r0
 80017c8:	b1a0      	cbz	r0, 80017f4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80017ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017d2:	b91b      	cbnz	r3, 80017dc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80017d4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80017d8:	f7ff fef6 	bl	80015c8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80017dc:	2302      	movs	r3, #2
 80017de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80017e2:	6820      	ldr	r0, [r4, #0]
 80017e4:	1d21      	adds	r1, r4, #4
 80017e6:	f7ff ffa1 	bl	800172c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80017f0:	2000      	movs	r0, #0
 80017f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017f4:	2001      	movs	r0, #1
}
 80017f6:	bd10      	pop	{r4, pc}

080017f8 <HAL_TIMEx_CommutationCallback>:
 80017f8:	4770      	bx	lr

080017fa <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80017fa:	4770      	bx	lr

080017fc <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80017fc:	b084      	sub	sp, #16
 80017fe:	b538      	push	{r3, r4, r5, lr}
 8001800:	ad05      	add	r5, sp, #20
 8001802:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001808:	2b01      	cmp	r3, #1
{
 800180a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800180c:	d126      	bne.n	800185c <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800180e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001814:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001816:	68c3      	ldr	r3, [r0, #12]
 8001818:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800181c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001820:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001822:	68c3      	ldr	r3, [r0, #12]
 8001824:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001828:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 800182a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800182c:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800182e:	bf02      	ittt	eq
 8001830:	68c3      	ldreq	r3, [r0, #12]
 8001832:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8001836:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8001838:	f000 fbde 	bl	8001ff8 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 800183c:	9b08      	ldr	r3, [sp, #32]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d107      	bne.n	8001852 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001842:	68a3      	ldr	r3, [r4, #8]
 8001844:	f043 0306 	orr.w	r3, r3, #6
 8001848:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800184a:	68a3      	ldr	r3, [r4, #8]
 800184c:	f043 0320 	orr.w	r3, r3, #32
 8001850:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8001852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001856:	2000      	movs	r0, #0
 8001858:	b004      	add	sp, #16
 800185a:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800185c:	68c3      	ldr	r3, [r0, #12]
 800185e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001862:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8001864:	f000 fbc8 	bl	8001ff8 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8001868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800186c:	63a3      	str	r3, [r4, #56]	; 0x38
 800186e:	e7e5      	b.n	800183c <USB_CoreInit+0x40>

08001870 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001870:	6883      	ldr	r3, [r0, #8]
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001878:	2000      	movs	r0, #0
 800187a:	4770      	bx	lr

0800187c <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800187c:	6883      	ldr	r3, [r0, #8]
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001884:	2000      	movs	r0, #0
 8001886:	4770      	bx	lr

08001888 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8001888:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800188a:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 800188c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800188e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001892:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8001894:	d108      	bne.n	80018a8 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8001896:	68c3      	ldr	r3, [r0, #12]
 8001898:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800189c:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 800189e:	2032      	movs	r0, #50	; 0x32
 80018a0:	f7fe fe5a 	bl	8000558 <HAL_Delay>
  
  return HAL_OK;
}
 80018a4:	2000      	movs	r0, #0
 80018a6:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d1f8      	bne.n	800189e <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80018ac:	68c3      	ldr	r3, [r0, #12]
 80018ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018b2:	60c3      	str	r3, [r0, #12]
 80018b4:	e7f3      	b.n	800189e <USB_SetCurrentMode+0x16>
	...

080018b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80018b8:	b084      	sub	sp, #16
 80018ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018be:	4604      	mov	r4, r0
 80018c0:	a807      	add	r0, sp, #28
 80018c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80018c6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80018c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80018ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018cc:	4688      	mov	r8, r1
  if (cfg.vbus_sensing_enable == 0U)
 80018ce:	b9a6      	cbnz	r6, 80018fa <USB_DevInit+0x42>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80018d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018d4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80018dc:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80018e0:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80018e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80018e6:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80018e8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80018ec:	d15e      	bne.n	80019ac <USB_DevInit+0xf4>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80018ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80018f0:	b939      	cbnz	r1, 8001902 <USB_DevInit+0x4a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80018f2:	4620      	mov	r0, r4
 80018f4:	f000 f89e 	bl	8001a34 <USB_SetDevSpeed>
 80018f8:	e007      	b.n	800190a <USB_DevInit+0x52>
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80018fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8001900:	e7e9      	b.n	80018d6 <USB_DevInit+0x1e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8001902:	4619      	mov	r1, r3
 8001904:	4620      	mov	r0, r4
 8001906:	f000 f895 	bl	8001a34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 800190a:	2110      	movs	r1, #16
 800190c:	4620      	mov	r0, r4
 800190e:	f000 f86f 	bl	80019f0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8001912:	4620      	mov	r0, r4
 8001914:	f000 f87e 	bl	8001a14 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8001918:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 800191a:	f04f 32ff 	mov.w	r2, #4294967295
  USBx_DEVICE->DIEPMSK = 0U;
 800191e:	612b      	str	r3, [r5, #16]
 8001920:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 8001922:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8001924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001928:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 800192a:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0U;
 800192e:	61eb      	str	r3, [r5, #28]
 8001930:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001934:	4543      	cmp	r3, r8
 8001936:	d13b      	bne.n	80019b0 <USB_DevInit+0xf8>
 8001938:	2100      	movs	r1, #0
 800193a:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
 800193e:	4608      	mov	r0, r1
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8001940:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8001944:	f04f 0cff 	mov.w	ip, #255	; 0xff
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001948:	428b      	cmp	r3, r1
 800194a:	d13e      	bne.n	80019ca <USB_DevInit+0x112>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800194c:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 800194e:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001954:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8001956:	d108      	bne.n	800196a <USB_DevInit+0xb2>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8001958:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <USB_DevInit+0x130>)
 800195a:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 800195c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800195e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001962:	f043 0303 	orr.w	r3, r3, #3
 8001966:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8001968:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800196e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001972:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8001974:	b91f      	cbnz	r7, 800197e <USB_DevInit+0xc6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8001976:	69a3      	ldr	r3, [r4, #24]
 8001978:	f043 0310 	orr.w	r3, r3, #16
 800197c:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800197e:	69a2      	ldr	r2, [r4, #24]
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <USB_DevInit+0x134>)
 8001982:	4313      	orrs	r3, r2
 8001984:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8001986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001988:	b11b      	cbz	r3, 8001992 <USB_DevInit+0xda>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800198a:	69a3      	ldr	r3, [r4, #24]
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8001992:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8001994:	bf01      	itttt	eq
 8001996:	69a3      	ldreq	r3, [r4, #24]
 8001998:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800199c:	f043 0304 	orreq.w	r3, r3, #4
 80019a0:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 80019a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019a6:	2000      	movs	r0, #0
 80019a8:	b004      	add	sp, #16
 80019aa:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80019ac:	2103      	movs	r1, #3
 80019ae:	e7a0      	b.n	80018f2 <USB_DevInit+0x3a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80019b0:	f8d2 c000 	ldr.w	ip, [r2]
 80019b4:	f1bc 0f00 	cmp.w	ip, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80019b8:	bfb4      	ite	lt
 80019ba:	6010      	strlt	r0, [r2, #0]
      USBx_INEP(i)->DIEPCTL = 0U;
 80019bc:	6011      	strge	r1, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80019be:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80019c0:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 80019c2:	f8c2 e008 	str.w	lr, [r2, #8]
 80019c6:	3220      	adds	r2, #32
 80019c8:	e7b4      	b.n	8001934 <USB_DevInit+0x7c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80019ca:	f8d2 8000 	ldr.w	r8, [r2]
 80019ce:	f1b8 0f00 	cmp.w	r8, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80019d2:	bfb4      	ite	lt
 80019d4:	f8c2 e000 	strlt.w	lr, [r2]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80019d8:	6010      	strge	r0, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80019da:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80019dc:	6110      	str	r0, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 80019de:	f8c2 c008 	str.w	ip, [r2, #8]
 80019e2:	3220      	adds	r2, #32
 80019e4:	e7b0      	b.n	8001948 <USB_DevInit+0x90>
 80019e6:	bf00      	nop
 80019e8:	00800100 	.word	0x00800100
 80019ec:	803c3800 	.word	0x803c3800

080019f0 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80019f0:	0189      	lsls	r1, r1, #6
 80019f2:	f041 0120 	orr.w	r1, r1, #32
 80019f6:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <USB_FlushTxFifo+0x20>)
 80019f8:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80019fa:	3a01      	subs	r2, #1
 80019fc:	d005      	beq.n	8001a0a <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80019fe:	6903      	ldr	r3, [r0, #16]
 8001a00:	f013 0320 	ands.w	r3, r3, #32
 8001a04:	d1f9      	bne.n	80019fa <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8001a06:	4618      	mov	r0, r3
 8001a08:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001a0a:	2003      	movs	r0, #3
}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	00030d41 	.word	0x00030d41

08001a14 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001a14:	2310      	movs	r3, #16
 8001a16:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <USB_FlushRxFifo+0x1c>)
 8001a18:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8001a1a:	3a01      	subs	r2, #1
 8001a1c:	d005      	beq.n	8001a2a <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001a1e:	6903      	ldr	r3, [r0, #16]
 8001a20:	f013 0310 	ands.w	r3, r3, #16
 8001a24:	d1f9      	bne.n	8001a1a <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8001a26:	4618      	mov	r0, r3
 8001a28:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001a2a:	2003      	movs	r0, #3
}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	00030d41 	.word	0x00030d41

08001a34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8001a34:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001a38:	4319      	orrs	r1, r3
 8001a3a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8001a3e:	2000      	movs	r0, #0
 8001a40:	4770      	bx	lr

08001a42 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8001a42:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8001a46:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 8001a4a:	f010 0006 	ands.w	r0, r0, #6
 8001a4e:	d012      	beq.n	8001a76 <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8001a50:	6893      	ldr	r3, [r2, #8]
 8001a52:	f003 0306 	and.w	r3, r3, #6
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d00c      	beq.n	8001a74 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8001a5a:	6893      	ldr	r3, [r2, #8]
 8001a5c:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8001a60:	2b06      	cmp	r3, #6
 8001a62:	d007      	beq.n	8001a74 <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8001a64:	6893      	ldr	r3, [r2, #8]
 8001a66:	f003 0306 	and.w	r3, r3, #6
 8001a6a:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8001a6c:	bf14      	ite	ne
 8001a6e:	2000      	movne	r0, #0
 8001a70:	2002      	moveq	r0, #2
 8001a72:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8001a74:	2003      	movs	r0, #3
  }
  
  return speed;
}
 8001a76:	4770      	bx	lr

08001a78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001a78:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8001a7a:	784b      	ldrb	r3, [r1, #1]
 8001a7c:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001a7e:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8001a82:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d11b      	bne.n	8001ac2 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001a8a:	40a3      	lsls	r3, r4
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001a90:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001a94:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001a96:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	0412      	lsls	r2, r2, #16
 8001a9e:	d40e      	bmi.n	8001abe <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8001aa0:	688a      	ldr	r2, [r1, #8]
 8001aa2:	78c8      	ldrb	r0, [r1, #3]
 8001aa4:	681d      	ldr	r5, [r3, #0]
 8001aa6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001aaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ab2:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 8001ab6:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8001aba:	4328      	orrs	r0, r5
 8001abc:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8001abe:	2000      	movs	r0, #0
 8001ac0:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001ac2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac6:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001ac8:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001acc:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001ace:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001ad2:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001ad4:	6803      	ldr	r3, [r0, #0]
 8001ad6:	041b      	lsls	r3, r3, #16
 8001ad8:	d4f1      	bmi.n	8001abe <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8001ada:	688b      	ldr	r3, [r1, #8]
 8001adc:	78c9      	ldrb	r1, [r1, #3]
 8001ade:	6802      	ldr	r2, [r0, #0]
 8001ae0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aec:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8001af0:	4313      	orrs	r3, r2
 8001af2:	6003      	str	r3, [r0, #0]
 8001af4:	e7e3      	b.n	8001abe <USB_ActivateEndpoint+0x46>

08001af6 <USB_DeactivateEndpoint>:
 8001af6:	f000 b801 	b.w	8001afc <USB_DeactivateDedicatedEndpoint>
	...

08001afc <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001afc:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8001afe:	784b      	ldrb	r3, [r1, #1]
 8001b00:	2b01      	cmp	r3, #1
{
 8001b02:	460e      	mov	r6, r1
 8001b04:	4605      	mov	r5, r0
 8001b06:	7809      	ldrb	r1, [r1, #0]
 8001b08:	f04f 0320 	mov.w	r3, #32
  if (ep->is_in == 1U)
 8001b0c:	d126      	bne.n	8001b5c <USB_DeactivateDedicatedEndpoint+0x60>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8001b0e:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 8001b12:	fb13 2301 	smlabb	r3, r3, r1, r2
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b1c:	601a      	str	r2, [r3, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001b1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b22:	601a      	str	r2, [r3, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8001b24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ba8 <USB_DeactivateDedicatedEndpoint+0xac>)
    
    do
    {
      if (++count > 200000U)
 8001b2c:	3a01      	subs	r2, #1
 8001b2e:	d101      	bne.n	8001b34 <USB_DeactivateDedicatedEndpoint+0x38>
      {
        return HAL_TIMEOUT;
 8001b30:	2003      	movs	r0, #3
 8001b32:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8001b34:	689c      	ldr	r4, [r3, #8]
 8001b36:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8001b3a:	d1f7      	bne.n	8001b2c <USB_DeactivateDedicatedEndpoint+0x30>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8001b3c:	2110      	movs	r1, #16
 8001b3e:	4628      	mov	r0, r5
 8001b40:	f7ff ff56 	bl	80019f0 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8001b44:	7831      	ldrb	r1, [r6, #0]
 8001b46:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	408b      	lsls	r3, r1
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	ea22 0303 	bic.w	r3, r2, r3
 8001b54:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 8001b58:	4620      	mov	r0, r4
 8001b5a:	bd70      	pop	{r4, r5, r6, pc}
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8001b5c:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8001b60:	fb13 2301 	smlabb	r3, r3, r1, r2
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b6a:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001b6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b70:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8001b72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <USB_DeactivateDedicatedEndpoint+0xac>)
      if (++count > 200000U)
 8001b7a:	3a01      	subs	r2, #1
 8001b7c:	d0d8      	beq.n	8001b30 <USB_DeactivateDedicatedEndpoint+0x34>
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8001b7e:	6898      	ldr	r0, [r3, #8]
 8001b80:	f010 0010 	ands.w	r0, r0, #16
 8001b84:	d1f9      	bne.n	8001b7a <USB_DeactivateDedicatedEndpoint+0x7e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001b86:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8001b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8e:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 8001b92:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 8001b96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b9a:	408a      	lsls	r2, r1
 8001b9c:	ea23 0302 	bic.w	r3, r3, r2
 8001ba0:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c

}
 8001ba4:	bd70      	pop	{r4, r5, r6, pc}
 8001ba6:	bf00      	nop
 8001ba8:	00030d41 	.word	0x00030d41

08001bac <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8001bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8001bae:	784b      	ldrb	r3, [r1, #1]
 8001bb0:	780c      	ldrb	r4, [r1, #0]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	694b      	ldr	r3, [r1, #20]
 8001bb6:	d177      	bne.n	8001ca8 <USB_EPStartXfer+0xfc>
 8001bb8:	2620      	movs	r6, #32
 8001bba:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001bbe:	fb16 5404 	smlabb	r4, r6, r4, r5
 8001bc2:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d138      	bne.n	8001c3a <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001bc8:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8001bcc:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8001bd0:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001bd2:	6926      	ldr	r6, [r4, #16]
 8001bd4:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8001bd8:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8001bda:	6926      	ldr	r6, [r4, #16]
 8001bdc:	0cf6      	lsrs	r6, r6, #19
 8001bde:	04f6      	lsls	r6, r6, #19
 8001be0:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 8001be2:	2a01      	cmp	r2, #1
 8001be4:	d150      	bne.n	8001c88 <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001be6:	780c      	ldrb	r4, [r1, #0]
 8001be8:	690e      	ldr	r6, [r1, #16]
 8001bea:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001bee:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8001bf0:	78ce      	ldrb	r6, [r1, #3]
 8001bf2:	2e01      	cmp	r6, #1
 8001bf4:	d10f      	bne.n	8001c16 <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8001bf6:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8001bfa:	780f      	ldrb	r7, [r1, #0]
 8001bfc:	f414 7f80 	tst.w	r4, #256	; 0x100
 8001c00:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8001c04:	fb14 5407 	smlabb	r4, r4, r7, r5
 8001c08:	6827      	ldr	r7, [r4, #0]
 8001c0a:	bf0c      	ite	eq
 8001c0c:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8001c10:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 8001c14:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001c16:	780f      	ldrb	r7, [r1, #0]
 8001c18:	eb05 1547 	add.w	r5, r5, r7, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8001c1c:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001c1e:	682c      	ldr	r4, [r5, #0]
 8001c20:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001c24:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 8001c26:	d105      	bne.n	8001c34 <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8001c28:	9200      	str	r2, [sp, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	463a      	mov	r2, r7
 8001c2e:	68c9      	ldr	r1, [r1, #12]
 8001c30:	f000 f8ef 	bl	8001e12 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8001c34:	2000      	movs	r0, #0
 8001c36:	b003      	add	sp, #12
 8001c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001c3a:	0cf6      	lsrs	r6, r6, #19
 8001c3c:	04f6      	lsls	r6, r6, #19
 8001c3e:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001c40:	6926      	ldr	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8001c42:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001c44:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8001c48:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8001c4c:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8001c4e:	19de      	adds	r6, r3, r7
 8001c50:	3e01      	subs	r6, #1
 8001c52:	fbb6 f7f7 	udiv	r7, r6, r7
 8001c56:	4e37      	ldr	r6, [pc, #220]	; (8001d34 <USB_EPStartXfer+0x188>)
 8001c58:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001c5c:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 8001c60:	ea46 060e 	orr.w	r6, r6, lr
 8001c64:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8001c66:	6927      	ldr	r7, [r4, #16]
 8001c68:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8001c6c:	433e      	orrs	r6, r7
 8001c6e:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8001c70:	78ce      	ldrb	r6, [r1, #3]
 8001c72:	2e01      	cmp	r6, #1
 8001c74:	d15a      	bne.n	8001d2c <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8001c76:	6926      	ldr	r6, [r4, #16]
 8001c78:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8001c7c:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8001c7e:	6926      	ldr	r6, [r4, #16]
 8001c80:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8001c84:	6126      	str	r6, [r4, #16]
 8001c86:	e7ac      	b.n	8001be2 <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 8001c88:	78ce      	ldrb	r6, [r1, #3]
 8001c8a:	2e01      	cmp	r6, #1
 8001c8c:	d0b3      	beq.n	8001bf6 <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0U)
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0ae      	beq.n	8001bf0 <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8001c92:	f891 e000 	ldrb.w	lr, [r1]
 8001c96:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 8001c9a:	2401      	movs	r4, #1
 8001c9c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001ca0:	433c      	orrs	r4, r7
 8001ca2:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8001ca6:	e7a3      	b.n	8001bf0 <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001ca8:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 8001cac:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001cb0:	6925      	ldr	r5, [r4, #16]
 8001cb2:	0ced      	lsrs	r5, r5, #19
 8001cb4:	04ed      	lsls	r5, r5, #19
 8001cb6:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8001cb8:	6925      	ldr	r5, [r4, #16]
 8001cba:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001cbe:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001cc2:	6125      	str	r5, [r4, #16]
 8001cc4:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 8001cc6:	b9fb      	cbnz	r3, 8001d08 <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8001cc8:	6923      	ldr	r3, [r4, #16]
 8001cca:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001cce:	431d      	orrs	r5, r3
 8001cd0:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8001cd2:	6923      	ldr	r3, [r4, #16]
 8001cd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cd8:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 8001cda:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8001cdc:	bf04      	itt	eq
 8001cde:	68cb      	ldreq	r3, [r1, #12]
 8001ce0:	6163      	streq	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 8001ce2:	78cb      	ldrb	r3, [r1, #3]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d10a      	bne.n	8001cfe <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8001ce8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001cec:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	bf0c      	ite	eq
 8001cf4:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8001cf8:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8001cfe:	6823      	ldr	r3, [r4, #0]
 8001d00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001d04:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8001d06:	e795      	b.n	8001c34 <USB_EPStartXfer+0x88>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8001d08:	4e0a      	ldr	r6, [pc, #40]	; (8001d34 <USB_EPStartXfer+0x188>)
 8001d0a:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8001d0c:	442b      	add	r3, r5
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8001d14:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8001d18:	433e      	orrs	r6, r7
 8001d1a:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	6926      	ldr	r6, [r4, #16]
 8001d20:	435d      	muls	r5, r3
 8001d22:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001d26:	4335      	orrs	r5, r6
 8001d28:	6125      	str	r5, [r4, #16]
 8001d2a:	e7d6      	b.n	8001cda <USB_EPStartXfer+0x12e>
    if (dma == 1U)
 8001d2c:	2a01      	cmp	r2, #1
 8001d2e:	d1ae      	bne.n	8001c8e <USB_EPStartXfer+0xe2>
 8001d30:	e759      	b.n	8001be6 <USB_EPStartXfer+0x3a>
 8001d32:	bf00      	nop
 8001d34:	1ff80000 	.word	0x1ff80000

08001d38 <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 8001d38:	784b      	ldrb	r3, [r1, #1]
 8001d3a:	2b01      	cmp	r3, #1
{
 8001d3c:	b570      	push	{r4, r5, r6, lr}
 8001d3e:	780b      	ldrb	r3, [r1, #0]
 8001d40:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1U)
 8001d42:	d143      	bne.n	8001dcc <USB_EP0StartXfer+0x94>
 8001d44:	2420      	movs	r4, #32
 8001d46:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001d4a:	fb14 6303 	smlabb	r3, r4, r3, r6
 8001d4e:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8001d50:	b9cd      	cbnz	r5, 8001d86 <USB_EP0StartXfer+0x4e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001d52:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001d56:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001d5a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001d5c:	691c      	ldr	r4, [r3, #16]
 8001d5e:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001d62:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8001d64:	691c      	ldr	r4, [r3, #16]
 8001d66:	0ce4      	lsrs	r4, r4, #19
 8001d68:	04e4      	lsls	r4, r4, #19
 8001d6a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8001d6c:	780d      	ldrb	r5, [r1, #0]
 8001d6e:	eb06 1345 	add.w	r3, r6, r5, lsl #5
    
    if (dma == 1)
 8001d72:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8001d74:	681c      	ldr	r4, [r3, #0]
 8001d76:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001d7a:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 8001d7c:	d11b      	bne.n	8001db6 <USB_EP0StartXfer+0x7e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001d7e:	690a      	ldr	r2, [r1, #16]
 8001d80:	615a      	str	r2, [r3, #20]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8001d82:	2000      	movs	r0, #0
 8001d84:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001d86:	0ce4      	lsrs	r4, r4, #19
 8001d88:	04e4      	lsls	r4, r4, #19
 8001d8a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001d8c:	691c      	ldr	r4, [r3, #16]
 8001d8e:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001d92:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001d96:	611c      	str	r4, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8001d98:	688c      	ldr	r4, [r1, #8]
 8001d9a:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8001d9c:	bf88      	it	hi
 8001d9e:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001da0:	691c      	ldr	r4, [r3, #16]
 8001da2:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001da6:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8001da8:	694c      	ldr	r4, [r1, #20]
 8001daa:	691d      	ldr	r5, [r3, #16]
 8001dac:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8001db0:	432c      	orrs	r4, r5
 8001db2:	611c      	str	r4, [r3, #16]
 8001db4:	e7da      	b.n	8001d6c <USB_EP0StartXfer+0x34>
      if (ep->xfer_len > 0U)
 8001db6:	694b      	ldr	r3, [r1, #20]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0e2      	beq.n	8001d82 <USB_EP0StartXfer+0x4a>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8001dbc:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	40ab      	lsls	r3, r5
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8001dca:	e7da      	b.n	8001d82 <USB_EP0StartXfer+0x4a>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001dcc:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8001dd0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8001dd4:	6903      	ldr	r3, [r0, #16]
 8001dd6:	0cdb      	lsrs	r3, r3, #19
 8001dd8:	04db      	lsls	r3, r3, #19
 8001dda:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8001ddc:	6903      	ldr	r3, [r0, #16]
 8001dde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8001de2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8001de6:	6103      	str	r3, [r0, #16]
 8001de8:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 8001dea:	b105      	cbz	r5, 8001dee <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 8001dec:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8001dee:	6904      	ldr	r4, [r0, #16]
 8001df0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001df4:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8001df6:	6904      	ldr	r4, [r0, #16]
 8001df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfc:	4323      	orrs	r3, r4
    if (dma == 1U)
 8001dfe:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8001e00:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8001e02:	bf04      	itt	eq
 8001e04:	68cb      	ldreq	r3, [r1, #12]
 8001e06:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8001e08:	6803      	ldr	r3, [r0, #0]
 8001e0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001e0e:	6003      	str	r3, [r0, #0]
 8001e10:	e7b7      	b.n	8001d82 <USB_EP0StartXfer+0x4a>

08001e12 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8001e12:	b510      	push	{r4, lr}
 8001e14:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8001e18:	b94c      	cbnz	r4, 8001e2e <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8001e1a:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8001e1c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8001e20:	f023 0303 	bic.w	r3, r3, #3
 8001e24:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8001e28:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8001e2a:	4299      	cmp	r1, r3
 8001e2c:	d101      	bne.n	8001e32 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8001e2e:	2000      	movs	r0, #0
 8001e30:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8001e32:	f851 0b04 	ldr.w	r0, [r1], #4
 8001e36:	6010      	str	r0, [r2, #0]
 8001e38:	e7f7      	b.n	8001e2a <USB_WritePacket+0x18>

08001e3a <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8001e3a:	3203      	adds	r2, #3
 8001e3c:	f022 0203 	bic.w	r2, r2, #3
 8001e40:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8001e42:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8001e46:	4291      	cmp	r1, r2
 8001e48:	d101      	bne.n	8001e4e <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8001e4a:	4608      	mov	r0, r1
 8001e4c:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8001e4e:	6803      	ldr	r3, [r0, #0]
 8001e50:	f841 3b04 	str.w	r3, [r1], #4
 8001e54:	e7f7      	b.n	8001e46 <USB_ReadPacket+0xc>

08001e56 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8001e56:	784b      	ldrb	r3, [r1, #1]
 8001e58:	780a      	ldrb	r2, [r1, #0]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	f04f 0320 	mov.w	r3, #32
 8001e60:	d10b      	bne.n	8001e7a <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8001e62:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8001e66:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001e6a:	6803      	ldr	r3, [r0, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db0b      	blt.n	8001e88 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8001e70:	6803      	ldr	r3, [r0, #0]
 8001e72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e76:	6003      	str	r3, [r0, #0]
 8001e78:	e006      	b.n	8001e88 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8001e7a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8001e7e:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001e82:	6803      	ldr	r3, [r0, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	daf3      	bge.n	8001e70 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8001e88:	6803      	ldr	r3, [r0, #0]
 8001e8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e8e:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8001e90:	2000      	movs	r0, #0
 8001e92:	4770      	bx	lr

08001e94 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8001e94:	784b      	ldrb	r3, [r1, #1]
 8001e96:	780a      	ldrb	r2, [r1, #0]
 8001e98:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e9a:	bf0c      	ite	eq
 8001e9c:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ea0:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8001ea4:	2320      	movs	r3, #32
 8001ea6:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001eaa:	6803      	ldr	r3, [r0, #0]
 8001eac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001eb0:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8001eb2:	78cb      	ldrb	r3, [r1, #3]
 8001eb4:	3b02      	subs	r3, #2
 8001eb6:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8001eb8:	bf9e      	ittt	ls
 8001eba:	6803      	ldrls	r3, [r0, #0]
 8001ebc:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	4770      	bx	lr

08001ec6 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8001ec6:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001eca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ece:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8001ed2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001ed6:	0109      	lsls	r1, r1, #4
 8001ed8:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8001edc:	4319      	orrs	r1, r3
 8001ede:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	4770      	bx	lr

08001ee6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8001ee6:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8001ee8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001eec:	f023 0302 	bic.w	r3, r3, #2
 8001ef0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	f7fe fb2f 	bl	8000558 <HAL_Delay>
  
  return HAL_OK;  
}
 8001efa:	2000      	movs	r0, #0
 8001efc:	bd08      	pop	{r3, pc}

08001efe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8001efe:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8001f00:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f7fe fb23 	bl	8000558 <HAL_Delay>
  
  return HAL_OK;  
}
 8001f12:	2000      	movs	r0, #0
 8001f14:	bd08      	pop	{r3, pc}

08001f16 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8001f16:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8001f18:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8001f1a:	4010      	ands	r0, r2
 8001f1c:	4770      	bx	lr

08001f1e <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8001f1e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001f22:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8001f26:	69c0      	ldr	r0, [r0, #28]
 8001f28:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 8001f2a:	0c00      	lsrs	r0, r0, #16
 8001f2c:	4770      	bx	lr

08001f2e <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8001f2e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001f32:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8001f36:	69c0      	ldr	r0, [r0, #28]
 8001f38:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 8001f3a:	b280      	uxth	r0, r0
 8001f3c:	4770      	bx	lr

08001f3e <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8001f3e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8001f42:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8001f46:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8001f4a:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8001f4c:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8001f4e:	4010      	ands	r0, r2
 8001f50:	4770      	bx	lr

08001f52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8001f52:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8001f54:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8001f58:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001f5c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001f60:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001f62:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001f66:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001f68:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	4323      	orrs	r3, r4
  return v;
}
 8001f6e:	4018      	ands	r0, r3
 8001f70:	bd10      	pop	{r4, pc}

08001f72 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8001f72:	6940      	ldr	r0, [r0, #20]
}
 8001f74:	f000 0001 	and.w	r0, r0, #1
 8001f78:	4770      	bx	lr

08001f7a <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8001f7a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001f7e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f82:	f023 0307 	bic.w	r3, r3, #7
 8001f86:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8001f8a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	f002 0206 	and.w	r2, r2, #6
 8001f94:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8001f96:	bf02      	ittt	eq
 8001f98:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8001f9c:	f042 0203 	orreq.w	r2, r2, #3
 8001fa0:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001faa:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8001fac:	2000      	movs	r0, #0
 8001fae:	4770      	bx	lr

08001fb0 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8001fb0:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8001fb2:	2400      	movs	r4, #0
 8001fb4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001fb8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8001fbc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001fc0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8001fc4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8001fc8:	f044 0418 	orr.w	r4, r4, #24
 8001fcc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001fd0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 8001fd4:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8001fd6:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001fda:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8001fde:	bf08      	it	eq
 8001fe0:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001fe4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8001fe8:	bf04      	itt	eq
 8001fea:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8001fee:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	bd10      	pop	{r4, pc}
	...

08001ff8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	d101      	bne.n	8002002 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8001ffe:	2003      	movs	r0, #3
 8002000:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002002:	6902      	ldr	r2, [r0, #16]
 8002004:	2a00      	cmp	r2, #0
 8002006:	daf8      	bge.n	8001ffa <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002008:	6903      	ldr	r3, [r0, #16]
 800200a:	4a06      	ldr	r2, [pc, #24]	; (8002024 <USB_CoreReset+0x2c>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002012:	3a01      	subs	r2, #1
 8002014:	d0f3      	beq.n	8001ffe <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002016:	6903      	ldr	r3, [r0, #16]
 8002018:	f013 0301 	ands.w	r3, r3, #1
 800201c:	d1f9      	bne.n	8002012 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 800201e:	4618      	mov	r0, r3
}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	00030d41 	.word	0x00030d41

08002028 <MX_USB_DEVICE_Init>:
#include "usbd_rndis_if.h"

USBD_HandleTypeDef hUsbDeviceFS;

void MX_USB_DEVICE_Init(void)
{
 8002028:	b510      	push	{r4, lr}
	USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800202a:	4c0c      	ldr	r4, [pc, #48]	; (800205c <MX_USB_DEVICE_Init+0x34>)
 800202c:	490c      	ldr	r1, [pc, #48]	; (8002060 <MX_USB_DEVICE_Init+0x38>)
 800202e:	2200      	movs	r2, #0
 8002030:	4620      	mov	r0, r4
 8002032:	f001 f97d 	bl	8003330 <USBD_Init>

//	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC);
//	USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
//	USBD_COMPOSITE_RegisterClass(&hUsbDeviceFS, 0x08, 0x06, 0x50);

	USBD_RegisterClass(&hUsbDeviceFS, &USBD_RNDIS);
 8002036:	490b      	ldr	r1, [pc, #44]	; (8002064 <MX_USB_DEVICE_Init+0x3c>)
 8002038:	4620      	mov	r0, r4
 800203a:	f001 f98e 	bl	800335a <USBD_RegisterClass>
	USBD_RNDIS_RegisterInterface(&hUsbDeviceFS, &USBD_RNDIS_Interface_fops_FS);
 800203e:	490a      	ldr	r1, [pc, #40]	; (8002068 <MX_USB_DEVICE_Init+0x40>)
 8002040:	4620      	mov	r0, r4
 8002042:	f001 f92e 	bl	80032a2 <USBD_RNDIS_RegisterInterface>
	USBD_COMPOSITE_RegisterClass(&hUsbDeviceFS, 0xE0, 0x01, 0x03);
 8002046:	4620      	mov	r0, r4
 8002048:	2303      	movs	r3, #3
 800204a:	2201      	movs	r2, #1
 800204c:	21e0      	movs	r1, #224	; 0xe0
 800204e:	f000 fef5 	bl	8002e3c <USBD_COMPOSITE_RegisterClass>

	USBD_Start(&hUsbDeviceFS);
 8002052:	4620      	mov	r0, r4

}
 8002054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USBD_Start(&hUsbDeviceFS);
 8002058:	f001 b986 	b.w	8003368 <USBD_Start>
 800205c:	200052ec 	.word	0x200052ec
 8002060:	20000004 	.word	0x20000004
 8002064:	200000a8 	.word	0x200000a8
 8002068:	20000038 	.word	0x20000038

0800206c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800206c:	b510      	push	{r4, lr}
	GPIO_InitTypeDef GPIO_InitStruct;
	  if(pcdHandle->Instance==USB_OTG_FS)
 800206e:	6803      	ldr	r3, [r0, #0]
 8002070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8002074:	b086      	sub	sp, #24
	  if(pcdHandle->Instance==USB_OTG_FS)
 8002076:	d12e      	bne.n	80020d6 <HAL_PCD_MspInit+0x6a>
	    PA8     ------> USB_OTG_FS_SOF
	    PA9     ------> USB_OTG_FS_VBUS
	    PA11     ------> USB_OTG_FS_DM
	    PA12     ------> USB_OTG_FS_DP
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002078:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800207c:	9301      	str	r3, [sp, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	9302      	str	r3, [sp, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2400      	movs	r4, #0
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002086:	9304      	str	r3, [sp, #16]
	    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002088:	a901      	add	r1, sp, #4
	    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800208a:	230a      	movs	r3, #10
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	4813      	ldr	r0, [pc, #76]	; (80020dc <HAL_PCD_MspInit+0x70>)
	    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800208e:	9305      	str	r3, [sp, #20]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	9403      	str	r4, [sp, #12]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	f7fe fae9 	bl	8000668 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002096:	f44f 7300 	mov.w	r3, #512	; 0x200
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	a901      	add	r1, sp, #4
 800209c:	480f      	ldr	r0, [pc, #60]	; (80020dc <HAL_PCD_MspInit+0x70>)
	    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800209e:	9301      	str	r3, [sp, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a0:	9402      	str	r4, [sp, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	9403      	str	r4, [sp, #12]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	f7fe fae0 	bl	8000668 <HAL_GPIO_Init>

	    /* Peripheral clock enable */
	    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_PCD_MspInit+0x74>)
 80020aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020b0:	635a      	str	r2, [r3, #52]	; 0x34
 80020b2:	9400      	str	r4, [sp, #0]
 80020b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020ba:	645a      	str	r2, [r3, #68]	; 0x44
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c2:	9300      	str	r3, [sp, #0]

	    /* Peripheral interrupt init */
	    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80020c4:	2043      	movs	r0, #67	; 0x43
 80020c6:	4622      	mov	r2, r4
 80020c8:	2105      	movs	r1, #5
	    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80020ca:	9b00      	ldr	r3, [sp, #0]
	    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80020cc:	f7fe fa6a 	bl	80005a4 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80020d0:	2043      	movs	r0, #67	; 0x43
 80020d2:	f7fe fa9b 	bl	800060c <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

	  /* USER CODE END USB_OTG_FS_MspInit 1 */
	  }
}
 80020d6:	b006      	add	sp, #24
 80020d8:	bd10      	pop	{r4, pc}
 80020da:	bf00      	nop
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40023800 	.word	0x40023800

080020e4 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80020e4:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 80020e8:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80020ec:	f001 b953 	b.w	8003396 <USBD_LL_SetupStage>

080020f0 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80020f0:	231c      	movs	r3, #28
 80020f2:	fb03 0301 	mla	r3, r3, r1, r0
 80020f6:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80020fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020fe:	f001 b977 	b.w	80033f0 <USBD_LL_DataOutStage>

08002102 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002102:	231c      	movs	r3, #28
 8002104:	fb03 0301 	mla	r3, r3, r1, r0
 8002108:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800210c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800210e:	f001 b9a1 	b.w	8003454 <USBD_LL_DataInStage>

08002112 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002112:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002116:	f001 ba1d 	b.w	8003554 <USBD_LL_SOF>

0800211a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800211a:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 800211c:	68c1      	ldr	r1, [r0, #12]
{ 
 800211e:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8002120:	3100      	adds	r1, #0
 8002122:	bf18      	it	ne
 8002124:	2101      	movne	r1, #1
 8002126:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800212a:	f001 fa01 	bl	8003530 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800212e:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 8002132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002136:	f001 b9dc 	b.w	80034f2 <USBD_LL_Reset>
	...

0800213c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 800213c:	b510      	push	{r4, lr}
 800213e:	4604      	mov	r4, r0
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002140:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002144:	f001 f9f7 	bl	8003536 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8002148:	6822      	ldr	r2, [r4, #0]
 800214a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002156:	6a23      	ldr	r3, [r4, #32]
 8002158:	b123      	cbz	r3, 8002164 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800215a:	4a03      	ldr	r2, [pc, #12]	; (8002168 <HAL_PCD_SuspendCallback+0x2c>)
 800215c:	6913      	ldr	r3, [r2, #16]
 800215e:	f043 0306 	orr.w	r3, r3, #6
 8002162:	6113      	str	r3, [r2, #16]
 8002164:	bd10      	pop	{r4, pc}
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800216c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002170:	f001 b9ea 	b.w	8003548 <USBD_LL_Resume>

08002174 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8002174:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002178:	f001 b9fa 	b.w	8003570 <USBD_LL_IsoOUTIncomplete>

0800217c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800217c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002180:	f001 b9f4 	b.w	800356c <USBD_LL_IsoINIncomplete>

08002184 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8002184:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002188:	f001 b9f4 	b.w	8003574 <USBD_LL_DevConnected>

0800218c <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800218c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8002190:	f001 b9f2 	b.w	8003578 <USBD_LL_DevDisconnected>

08002194 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8002194:	b508      	push	{r3, lr}
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
 8002196:	7802      	ldrb	r2, [r0, #0]
 8002198:	2a00      	cmp	r2, #0
 800219a:	d135      	bne.n	8002208 <USBD_LL_Init+0x74>
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <USBD_LL_Init+0x78>)
  pdev->pData = &hpcd_USB_OTG_FS; 
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800219e:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 80021a0:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS; 
 80021a4:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80021a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021ac:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80021b0:	2102      	movs	r1, #2
 80021b2:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021b4:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021b6:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80021b8:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80021ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 80021bc:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80021be:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80021c0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80021c2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80021c4:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021c8:	f7fe fb2d 	bl	8000826 <HAL_PCD_Init>
 80021cc:	b120      	cbz	r0, 80021d8 <USBD_LL_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 80021ce:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80021d2:	480f      	ldr	r0, [pc, #60]	; (8002210 <USBD_LL_Init+0x7c>)
 80021d4:	f006 ff26 	bl	8009024 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80021d8:	2180      	movs	r1, #128	; 0x80
 80021da:	480c      	ldr	r0, [pc, #48]	; (800220c <USBD_LL_Init+0x78>)
 80021dc:	f7fe ff71 	bl	80010c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80021e0:	2240      	movs	r2, #64	; 0x40
 80021e2:	2100      	movs	r1, #0
 80021e4:	4809      	ldr	r0, [pc, #36]	; (800220c <USBD_LL_Init+0x78>)
 80021e6:	f7fe ff4b 	bl	8001080 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x40);
 80021ea:	2240      	movs	r2, #64	; 0x40
 80021ec:	2101      	movs	r1, #1
 80021ee:	4807      	ldr	r0, [pc, #28]	; (800220c <USBD_LL_Init+0x78>)
 80021f0:	f7fe ff46 	bl	8001080 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 0x40);
 80021f4:	2240      	movs	r2, #64	; 0x40
 80021f6:	2102      	movs	r1, #2
 80021f8:	4804      	ldr	r0, [pc, #16]	; (800220c <USBD_LL_Init+0x78>)
 80021fa:	f7fe ff41 	bl	8001080 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 3, 0x40);
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	2103      	movs	r1, #3
 8002202:	4802      	ldr	r0, [pc, #8]	; (800220c <USBD_LL_Init+0x78>)
 8002204:	f7fe ff3c 	bl	8001080 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8002208:	2000      	movs	r0, #0
 800220a:	bd08      	pop	{r3, pc}
 800220c:	20005510 	.word	0x20005510
 8002210:	080095f0 	.word	0x080095f0

08002214 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002214:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002216:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800221a:	f7fe fb70 	bl	80008fe <HAL_PCD_Start>
 800221e:	2803      	cmp	r0, #3
 8002220:	bf9a      	itte	ls
 8002222:	4b02      	ldrls	r3, [pc, #8]	; (800222c <USBD_LL_Start+0x18>)
 8002224:	5c18      	ldrbls	r0, [r3, r0]
 8002226:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002228:	bd08      	pop	{r3, pc}
 800222a:	bf00      	nop
 800222c:	080095ec 	.word	0x080095ec

08002230 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8002230:	b570      	push	{r4, r5, r6, lr}
 8002232:	4616      	mov	r6, r2
 8002234:	461d      	mov	r5, r3
 8002236:	4604      	mov	r4, r0
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 8002238:	f000 fefc 	bl	8003034 <USBD_COMPOSITE_LL_EP_Conversion>

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 800223c:	4633      	mov	r3, r6
 800223e:	4601      	mov	r1, r0
 8002240:	462a      	mov	r2, r5
 8002242:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002246:	f7fe fe2d 	bl	8000ea4 <HAL_PCD_EP_Open>
 800224a:	2803      	cmp	r0, #3
 800224c:	bf9a      	itte	ls
 800224e:	4b02      	ldrls	r3, [pc, #8]	; (8002258 <USBD_LL_OpenEP+0x28>)
 8002250:	5c18      	ldrbls	r0, [r3, r0]
 8002252:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002254:	bd70      	pop	{r4, r5, r6, pc}
 8002256:	bf00      	nop
 8002258:	080095ec 	.word	0x080095ec

0800225c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800225c:	b510      	push	{r4, lr}
 800225e:	4604      	mov	r4, r0
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 8002260:	f000 fee8 	bl	8003034 <USBD_COMPOSITE_LL_EP_Conversion>

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002264:	4601      	mov	r1, r0
 8002266:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800226a:	f7fe fe49 	bl	8000f00 <HAL_PCD_EP_Close>
 800226e:	2803      	cmp	r0, #3
 8002270:	bf9a      	itte	ls
 8002272:	4b02      	ldrls	r3, [pc, #8]	; (800227c <USBD_LL_CloseEP+0x20>)
 8002274:	5c18      	ldrbls	r0, [r3, r0]
 8002276:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002278:	bd10      	pop	{r4, pc}
 800227a:	bf00      	nop
 800227c:	080095ec 	.word	0x080095ec

08002280 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8002280:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002282:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002286:	f7fe feaa 	bl	8000fde <HAL_PCD_EP_SetStall>
 800228a:	2803      	cmp	r0, #3
 800228c:	bf9a      	itte	ls
 800228e:	4b02      	ldrls	r3, [pc, #8]	; (8002298 <USBD_LL_StallEP+0x18>)
 8002290:	5c18      	ldrbls	r0, [r3, r0]
 8002292:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002294:	bd08      	pop	{r3, pc}
 8002296:	bf00      	nop
 8002298:	080095ec 	.word	0x080095ec

0800229c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800229c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800229e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80022a2:	f7fe fec8 	bl	8001036 <HAL_PCD_EP_ClrStall>
 80022a6:	2803      	cmp	r0, #3
 80022a8:	bf9a      	itte	ls
 80022aa:	4b02      	ldrls	r3, [pc, #8]	; (80022b4 <USBD_LL_ClearStallEP+0x18>)
 80022ac:	5c18      	ldrbls	r0, [r3, r0]
 80022ae:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80022b0:	bd08      	pop	{r3, pc}
 80022b2:	bf00      	nop
 80022b4:	080095ec 	.word	0x080095ec

080022b8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 80022b8:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80022bc:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 80022c0:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80022c4:	bf1b      	ittet	ne
 80022c6:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80022ca:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80022ce:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80022d2:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80022d6:	bf08      	it	eq
 80022d8:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 80022dc:	4770      	bx	lr
	...

080022e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 80022e0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80022e2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80022e6:	f7fe fdcb 	bl	8000e80 <HAL_PCD_SetAddress>
 80022ea:	2803      	cmp	r0, #3
 80022ec:	bf9a      	itte	ls
 80022ee:	4b02      	ldrls	r3, [pc, #8]	; (80022f8 <USBD_LL_SetUSBAddress+0x18>)
 80022f0:	5c18      	ldrbls	r0, [r3, r0]
 80022f2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80022f4:	bd08      	pop	{r3, pc}
 80022f6:	bf00      	nop
 80022f8:	080095ec 	.word	0x080095ec

080022fc <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 80022fc:	b570      	push	{r4, r5, r6, lr}
 80022fe:	4604      	mov	r4, r0
 8002300:	4615      	mov	r5, r2
 8002302:	461e      	mov	r6, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 8002304:	f000 fe96 	bl	8003034 <USBD_COMPOSITE_LL_EP_Conversion>

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002308:	4633      	mov	r3, r6
 800230a:	4601      	mov	r1, r0
 800230c:	462a      	mov	r2, r5
 800230e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002312:	f7fe fe44 	bl	8000f9e <HAL_PCD_EP_Transmit>
 8002316:	2803      	cmp	r0, #3
 8002318:	bf9a      	itte	ls
 800231a:	4b02      	ldrls	r3, [pc, #8]	; (8002324 <USBD_LL_Transmit+0x28>)
 800231c:	5c18      	ldrbls	r0, [r3, r0]
 800231e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	bf00      	nop
 8002324:	080095ec 	.word	0x080095ec

08002328 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	4604      	mov	r4, r0
 800232c:	4615      	mov	r5, r2
 800232e:	461e      	mov	r6, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 8002330:	f000 fe80 	bl	8003034 <USBD_COMPOSITE_LL_EP_Conversion>

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002334:	4633      	mov	r3, r6
 8002336:	4601      	mov	r1, r0
 8002338:	462a      	mov	r2, r5
 800233a:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800233e:	f7fe fe02 	bl	8000f46 <HAL_PCD_EP_Receive>
 8002342:	2803      	cmp	r0, #3
 8002344:	bf9a      	itte	ls
 8002346:	4b02      	ldrls	r3, [pc, #8]	; (8002350 <USBD_LL_PrepareReceive+0x28>)
 8002348:	5c18      	ldrbls	r0, [r3, r0]
 800234a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 800234c:	bd70      	pop	{r4, r5, r6, pc}
 800234e:	bf00      	nop
 8002350:	080095ec 	.word	0x080095ec

08002354 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8002354:	b510      	push	{r4, lr}
 8002356:	4604      	mov	r4, r0
  ep_addr=USBD_COMPOSITE_LL_EP_Conversion(pdev, ep_addr);
 8002358:	f000 fe6c 	bl	8003034 <USBD_COMPOSITE_LL_EP_Conversion>
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800235c:	4601      	mov	r1, r0
 800235e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002362:	f7fe fe14 	bl	8000f8e <HAL_PCD_EP_GetRxCount>
}
 8002366:	bd10      	pop	{r4, pc}

08002368 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002368:	4801      	ldr	r0, [pc, #4]	; (8002370 <OTG_FS_IRQHandler+0x8>)
 800236a:	f7fe badd 	b.w	8000928 <HAL_PCD_IRQHandler>
 800236e:	bf00      	nop
 8002370:	20005510 	.word	0x20005510

08002374 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8002374:	2312      	movs	r3, #18
 8002376:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8002378:	4800      	ldr	r0, [pc, #0]	; (800237c <USBD_FS_DeviceDescriptor+0x8>)
 800237a:	4770      	bx	lr
 800237c:	20000020 	.word	0x20000020

08002380 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8002380:	2304      	movs	r3, #4
 8002382:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8002384:	4800      	ldr	r0, [pc, #0]	; (8002388 <USBD_FS_LangIDStrDescriptor+0x8>)
 8002386:	4770      	bx	lr
 8002388:	20000034 	.word	0x20000034

0800238c <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800238c:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800238e:	4c04      	ldr	r4, [pc, #16]	; (80023a0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8002390:	4804      	ldr	r0, [pc, #16]	; (80023a4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002392:	460a      	mov	r2, r1
 8002394:	4621      	mov	r1, r4
 8002396:	f001 fa8e 	bl	80038b6 <USBD_GetString>
  return USBD_StrDesc;
}
 800239a:	4620      	mov	r0, r4
 800239c:	bd10      	pop	{r4, pc}
 800239e:	bf00      	nop
 80023a0:	20005900 	.word	0x20005900
 80023a4:	08009652 	.word	0x08009652

080023a8 <USBD_FS_ProductStrDescriptor>:
{
 80023a8:	b510      	push	{r4, lr}
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80023aa:	4c04      	ldr	r4, [pc, #16]	; (80023bc <USBD_FS_ProductStrDescriptor+0x14>)
 80023ac:	4804      	ldr	r0, [pc, #16]	; (80023c0 <USBD_FS_ProductStrDescriptor+0x18>)
 80023ae:	460a      	mov	r2, r1
 80023b0:	4621      	mov	r1, r4
 80023b2:	f001 fa80 	bl	80038b6 <USBD_GetString>
}
 80023b6:	4620      	mov	r0, r4
 80023b8:	bd10      	pop	{r4, pc}
 80023ba:	bf00      	nop
 80023bc:	20005900 	.word	0x20005900
 80023c0:	08009658 	.word	0x08009658

080023c4 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80023c4:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80023c6:	4c04      	ldr	r4, [pc, #16]	; (80023d8 <USBD_FS_SerialStrDescriptor+0x14>)
 80023c8:	4804      	ldr	r0, [pc, #16]	; (80023dc <USBD_FS_SerialStrDescriptor+0x18>)
 80023ca:	460a      	mov	r2, r1
 80023cc:	4621      	mov	r1, r4
 80023ce:	f001 fa72 	bl	80038b6 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 80023d2:	4620      	mov	r0, r4
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	bf00      	nop
 80023d8:	20005900 	.word	0x20005900
 80023dc:	08009667 	.word	0x08009667

080023e0 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80023e0:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80023e2:	4c04      	ldr	r4, [pc, #16]	; (80023f4 <USBD_FS_ConfigStrDescriptor+0x14>)
 80023e4:	4804      	ldr	r0, [pc, #16]	; (80023f8 <USBD_FS_ConfigStrDescriptor+0x18>)
 80023e6:	460a      	mov	r2, r1
 80023e8:	4621      	mov	r1, r4
 80023ea:	f001 fa64 	bl	80038b6 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 80023ee:	4620      	mov	r0, r4
 80023f0:	bd10      	pop	{r4, pc}
 80023f2:	bf00      	nop
 80023f4:	20005900 	.word	0x20005900
 80023f8:	0800962f 	.word	0x0800962f

080023fc <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80023fc:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80023fe:	4c04      	ldr	r4, [pc, #16]	; (8002410 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8002400:	4804      	ldr	r0, [pc, #16]	; (8002414 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002402:	460a      	mov	r2, r1
 8002404:	4621      	mov	r1, r4
 8002406:	f001 fa56 	bl	80038b6 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 800240a:	4620      	mov	r0, r4
 800240c:	bd10      	pop	{r4, pc}
 800240e:	bf00      	nop
 8002410:	20005900 	.word	0x20005900
 8002414:	0800963f 	.word	0x0800963f

08002418 <prvEMACHandlerTask>:
		}

		return xReturn;
}

static void prvEMACHandlerTask( void *pvParameters ){
 8002418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

		/* See how much data was received.  Here it is assumed ReceiveSize() is
	        a peripheral driver function that returns the number of bytes in the
	        received Ethernet frame. */

		xBytesReceived = UserRxSize;
 800241c:	4f1a      	ldr	r7, [pc, #104]	; (8002488 <prvEMACHandlerTask+0x70>)
	                is assumed ReceiveData() is a peripheral driver function that
	                copies the received data into a buffer passed in as the function's
	                parameter.  Remember! While is is a simple robust technique -
	                it is not efficient.  An example that uses a zero copy technique
	                is provided further down this page. */
				memcpy(pxBufferDescriptor->pucEthernetBuffer, UserRxBufferFS+44, xBytesReceived);
 800241e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8002494 <prvEMACHandlerTask+0x7c>
				/* The event was lost because a network buffer was not available.
	                Call the standard trace macro to log the occurrence. */
				iptraceETHERNET_RX_EVENT_LOST();
			}
		}
		USBD_RNDIS_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS_Temp);
 8002422:	4e1a      	ldr	r6, [pc, #104]	; (800248c <prvEMACHandlerTask+0x74>)
		ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 8002424:	f04f 31ff 	mov.w	r1, #4294967295
 8002428:	2000      	movs	r0, #0
 800242a:	f002 fef7 	bl	800521c <ulTaskNotifyTake>
		xBytesReceived = UserRxSize;
 800242e:	883d      	ldrh	r5, [r7, #0]
		if( xBytesReceived > 44 )
 8002430:	2d2c      	cmp	r5, #44	; 0x2c
 8002432:	d920      	bls.n	8002476 <prvEMACHandlerTask+0x5e>
			xBytesReceived-=44;
 8002434:	3d2c      	subs	r5, #44	; 0x2c
			pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( xBytesReceived, 0 );
 8002436:	2100      	movs	r1, #0
 8002438:	4628      	mov	r0, r5
 800243a:	f006 fcb7 	bl	8008dac <pxGetNetworkBufferWithDescriptor>
			if( pxBufferDescriptor != NULL )
 800243e:	4604      	mov	r4, r0
 8002440:	b1c8      	cbz	r0, 8002476 <prvEMACHandlerTask+0x5e>
				memcpy(pxBufferDescriptor->pucEthernetBuffer, UserRxBufferFS+44, xBytesReceived);
 8002442:	462a      	mov	r2, r5
 8002444:	4649      	mov	r1, r9
 8002446:	6980      	ldr	r0, [r0, #24]
 8002448:	f006 ff13 	bl	8009272 <memcpy>
				UserRxSize=0;
 800244c:	f04f 0800 	mov.w	r8, #0
				pxBufferDescriptor->xDataLength = xBytesReceived;
 8002450:	61e5      	str	r5, [r4, #28]
				if( eConsiderFrameForProcessing( pxBufferDescriptor->pucEthernetBuffer )
 8002452:	69a0      	ldr	r0, [r4, #24]
				UserRxSize=0;
 8002454:	f8a7 8000 	strh.w	r8, [r7]
				if( eConsiderFrameForProcessing( pxBufferDescriptor->pucEthernetBuffer )
 8002458:	f003 fe80 	bl	800615c <eConsiderFrameForProcessing>
 800245c:	2801      	cmp	r0, #1
 800245e:	d107      	bne.n	8002470 <prvEMACHandlerTask+0x58>
					xRxEvent.eEventType = eNetworkRxEvent;
 8002460:	f88d 0000 	strb.w	r0, [sp]
					if( xSendEventStructToIPTask( &xRxEvent, 0 ) == pdFALSE )
 8002464:	4641      	mov	r1, r8
 8002466:	4668      	mov	r0, sp
					xRxEvent.pvData = ( void * ) pxBufferDescriptor;
 8002468:	9401      	str	r4, [sp, #4]
					if( xSendEventStructToIPTask( &xRxEvent, 0 ) == pdFALSE )
 800246a:	f003 fe2f 	bl	80060cc <xSendEventStructToIPTask>
 800246e:	b910      	cbnz	r0, 8002476 <prvEMACHandlerTask+0x5e>
					vReleaseNetworkBufferAndDescriptor( pxBufferDescriptor );
 8002470:	4620      	mov	r0, r4
 8002472:	f006 fc77 	bl	8008d64 <vReleaseNetworkBufferAndDescriptor>
		USBD_RNDIS_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS_Temp);
 8002476:	4906      	ldr	r1, [pc, #24]	; (8002490 <prvEMACHandlerTask+0x78>)
 8002478:	4630      	mov	r0, r6
 800247a:	f000 ff21 	bl	80032c0 <USBD_RNDIS_SetRxBuffer>
		USBD_RNDIS_ReceivePacket(&hUsbDeviceFS);
 800247e:	4630      	mov	r0, r6
 8002480:	f000 ff3b 	bl	80032fa <USBD_RNDIS_ReceivePacket>
		ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 8002484:	e7ce      	b.n	8002424 <prvEMACHandlerTask+0xc>
 8002486:	bf00      	nop
 8002488:	20000c04 	.word	0x20000c04
 800248c:	200052ec 	.word	0x200052ec
 8002490:	20000bc4 	.word	0x20000bc4
 8002494:	200003f0 	.word	0x200003f0

08002498 <RNDIS_Receive_FS>:
	if(*Len>64){
 8002498:	680b      	ldr	r3, [r1, #0]
{
 800249a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	memcpy(UserRxBufferFS+len, UserRxBufferFS_Temp, *Len);
 800249c:	4e1c      	ldr	r6, [pc, #112]	; (8002510 <RNDIS_Receive_FS+0x78>)
 800249e:	481d      	ldr	r0, [pc, #116]	; (8002514 <RNDIS_Receive_FS+0x7c>)
 80024a0:	8834      	ldrh	r4, [r6, #0]
	if(*Len>64){
 80024a2:	2b40      	cmp	r3, #64	; 0x40
		*Len=64;
 80024a4:	bf84      	itt	hi
 80024a6:	2340      	movhi	r3, #64	; 0x40
 80024a8:	600b      	strhi	r3, [r1, #0]
{
 80024aa:	460d      	mov	r5, r1
	memcpy(UserRxBufferFS+len, UserRxBufferFS_Temp, *Len);
 80024ac:	680a      	ldr	r2, [r1, #0]
 80024ae:	491a      	ldr	r1, [pc, #104]	; (8002518 <RNDIS_Receive_FS+0x80>)
 80024b0:	4420      	add	r0, r4
 80024b2:	f006 fede 	bl	8009272 <memcpy>
	len+=(*Len);
 80024b6:	682b      	ldr	r3, [r5, #0]
 80024b8:	441c      	add	r4, r3
 80024ba:	b2a4      	uxth	r4, r4
	if(*Len!=64 && xEMACTaskHandle!=0){
 80024bc:	2b40      	cmp	r3, #64	; 0x40
	len+=(*Len);
 80024be:	8034      	strh	r4, [r6, #0]
	if(*Len!=64 && xEMACTaskHandle!=0){
 80024c0:	d01e      	beq.n	8002500 <RNDIS_Receive_FS+0x68>
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <RNDIS_Receive_FS+0x84>)
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	b1d8      	cbz	r0, 8002500 <RNDIS_Receive_FS+0x68>
		UserRxSize=len;
 80024c8:	4b15      	ldr	r3, [pc, #84]	; (8002520 <RNDIS_Receive_FS+0x88>)
		vTaskNotifyGiveFromISR(xEMACTaskHandle, &xHigherPriorityTaskWoken);
 80024ca:	a901      	add	r1, sp, #4
		UserRxSize=len;
 80024cc:	801c      	strh	r4, [r3, #0]
		len=0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	8033      	strh	r3, [r6, #0]
		vTaskNotifyGiveFromISR(xEMACTaskHandle, &xHigherPriorityTaskWoken);
 80024d2:	f002 fed5 	bl	8005280 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80024d6:	9b01      	ldr	r3, [sp, #4]
 80024d8:	b13b      	cbz	r3, 80024ea <RNDIS_Receive_FS+0x52>
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <RNDIS_Receive_FS+0x8c>)
 80024dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	f3bf 8f6f 	isb	sy
		rndis_oid_gen_rcv_ok++;
 80024ea:	490f      	ldr	r1, [pc, #60]	; (8002528 <RNDIS_Receive_FS+0x90>)
 80024ec:	e9d1 2300 	ldrd	r2, r3, [r1]
 80024f0:	3201      	adds	r2, #1
 80024f2:	f143 0300 	adc.w	r3, r3, #0
 80024f6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80024fa:	2000      	movs	r0, #0
 80024fc:	b002      	add	sp, #8
 80024fe:	bd70      	pop	{r4, r5, r6, pc}
		USBD_RNDIS_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS_Temp);
 8002500:	4905      	ldr	r1, [pc, #20]	; (8002518 <RNDIS_Receive_FS+0x80>)
 8002502:	480a      	ldr	r0, [pc, #40]	; (800252c <RNDIS_Receive_FS+0x94>)
 8002504:	f000 fedc 	bl	80032c0 <USBD_RNDIS_SetRxBuffer>
		USBD_RNDIS_ReceivePacket(&hUsbDeviceFS);
 8002508:	4808      	ldr	r0, [pc, #32]	; (800252c <RNDIS_Receive_FS+0x94>)
 800250a:	f000 fef6 	bl	80032fa <USBD_RNDIS_ReceivePacket>
 800250e:	e7f4      	b.n	80024fa <RNDIS_Receive_FS+0x62>
 8002510:	20000c06 	.word	0x20000c06
 8002514:	200003c4 	.word	0x200003c4
 8002518:	20000bc4 	.word	0x20000bc4
 800251c:	20000c40 	.word	0x20000c40
 8002520:	20000c04 	.word	0x20000c04
 8002524:	e000ed04 	.word	0xe000ed04
 8002528:	20000c30 	.word	0x20000c30
 800252c:	200052ec 	.word	0x200052ec

08002530 <RNDIS_Disconnect>:
	rndis_oid_gen_xmit_ok=0;
 8002530:	4906      	ldr	r1, [pc, #24]	; (800254c <RNDIS_Disconnect+0x1c>)
 8002532:	2200      	movs	r2, #0
 8002534:	2300      	movs	r3, #0
 8002536:	e9c1 2300 	strd	r2, r3, [r1]
	rndis_oid_gen_rcv_ok=0;
 800253a:	4905      	ldr	r1, [pc, #20]	; (8002550 <RNDIS_Disconnect+0x20>)
 800253c:	e9c1 2300 	strd	r2, r3, [r1]
	rndis_state=RNDIS_STATE_HALTED;
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <RNDIS_Disconnect+0x24>)
 8002542:	2201      	movs	r2, #1
 8002544:	701a      	strb	r2, [r3, #0]
	FreeRTOS_NetworkDownFromISR();
 8002546:	f003 bced 	b.w	8005f24 <FreeRTOS_NetworkDownFromISR>
 800254a:	bf00      	nop
 800254c:	20000c38 	.word	0x20000c38
 8002550:	20000c30 	.word	0x20000c30
 8002554:	20000048 	.word	0x20000048

08002558 <RNDIS_Control_FS>:
{ 
 8002558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800255c:	460c      	mov	r4, r1
	switch (cmd)
 800255e:	4606      	mov	r6, r0
 8002560:	b120      	cbz	r0, 800256c <RNDIS_Control_FS+0x14>
 8002562:	2801      	cmp	r0, #1
 8002564:	d03d      	beq.n	80025e2 <RNDIS_Control_FS+0x8a>
}
 8002566:	2000      	movs	r0, #0
 8002568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rndis_data.MessageType=buf32[0];
 800256c:	680b      	ldr	r3, [r1, #0]
 800256e:	4d93      	ldr	r5, [pc, #588]	; (80027bc <RNDIS_Control_FS+0x264>)
	USBD_RNDIS_HandleTypeDef *hrndis = (USBD_RNDIS_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002570:	4f93      	ldr	r7, [pc, #588]	; (80027c0 <RNDIS_Control_FS+0x268>)
		rndis_data.RequestId=buf32[2];
 8002572:	688a      	ldr	r2, [r1, #8]
	USBD_RNDIS_HandleTypeDef *hrndis = (USBD_RNDIS_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002574:	f8d7 8218 	ldr.w	r8, [r7, #536]	; 0x218
		rndis_data.MessageType=buf32[0];
 8002578:	602b      	str	r3, [r5, #0]
		if(buf32[0]==RNDIS_MSG_INIT){
 800257a:	2b02      	cmp	r3, #2
		rndis_data.RequestId=buf32[2];
 800257c:	606a      	str	r2, [r5, #4]
		if(buf32[0]==RNDIS_MSG_INIT){
 800257e:	d111      	bne.n	80025a4 <RNDIS_Control_FS+0x4c>
			RNDIS_Disconnect();
 8002580:	f7ff ffd6 	bl	8002530 <RNDIS_Disconnect>
			rndis_data.MajorVersion=buf32[3];
 8002584:	68e3      	ldr	r3, [r4, #12]
 8002586:	60ab      	str	r3, [r5, #8]
			rndis_data.MinorVersion=buf32[4];
 8002588:	6923      	ldr	r3, [r4, #16]
 800258a:	60eb      	str	r3, [r5, #12]
			rndis_data.MaxTransferSize=buf32[5];
 800258c:	6963      	ldr	r3, [r4, #20]
 800258e:	612b      	str	r3, [r5, #16]
			rndis_state=RNDIS_STATE_NORMAL;
 8002590:	4b8c      	ldr	r3, [pc, #560]	; (80027c4 <RNDIS_Control_FS+0x26c>)
			hrndis->TxState=0;
 8002592:	f8c8 6214 	str.w	r6, [r8, #532]	; 0x214
			rndis_state=RNDIS_STATE_NORMAL;
 8002596:	701e      	strb	r6, [r3, #0]
			USBD_RNDIS_TransmitControl(&hUsbDeviceFS, (uint8_t*)response, 8);
 8002598:	498b      	ldr	r1, [pc, #556]	; (80027c8 <RNDIS_Control_FS+0x270>)
 800259a:	2208      	movs	r2, #8
 800259c:	4638      	mov	r0, r7
 800259e:	f000 febf 	bl	8003320 <USBD_RNDIS_TransmitControl>
 80025a2:	e7e0      	b.n	8002566 <RNDIS_Control_FS+0xe>
		} else if(buf32[0]==RNDIS_MSG_HALT){
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d107      	bne.n	80025b8 <RNDIS_Control_FS+0x60>
			hrndis->TxState=1;
 80025a8:	2401      	movs	r4, #1
 80025aa:	f8c8 4214 	str.w	r4, [r8, #532]	; 0x214
			RNDIS_Disconnect();
 80025ae:	f7ff ffbf 	bl	8002530 <RNDIS_Disconnect>
			rndis_state=RNDIS_STATE_HALTED;
 80025b2:	4b84      	ldr	r3, [pc, #528]	; (80027c4 <RNDIS_Control_FS+0x26c>)
 80025b4:	701c      	strb	r4, [r3, #0]
 80025b6:	e7d6      	b.n	8002566 <RNDIS_Control_FS+0xe>
		} else if(buf32[0]==RNDIS_MSG_QUERY){
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d108      	bne.n	80025ce <RNDIS_Control_FS+0x76>
			rndis_data.Oid=buf32[3];
 80025bc:	68cb      	ldr	r3, [r1, #12]
 80025be:	616b      	str	r3, [r5, #20]
			rndis_data.InformationBufferLength=buf32[4];
 80025c0:	690b      	ldr	r3, [r1, #16]
 80025c2:	61ab      	str	r3, [r5, #24]
			rndis_data.InformationBufferOffset=buf32[5];
 80025c4:	694b      	ldr	r3, [r1, #20]
 80025c6:	61eb      	str	r3, [r5, #28]
			rndis_data.DeviceVcHandle=buf32[6];
 80025c8:	698b      	ldr	r3, [r1, #24]
 80025ca:	622b      	str	r3, [r5, #32]
 80025cc:	e7e4      	b.n	8002598 <RNDIS_Control_FS+0x40>
		} else if(buf32[0]==RNDIS_MSG_SET){
 80025ce:	1f5a      	subs	r2, r3, #5
 80025d0:	2a01      	cmp	r2, #1
 80025d2:	d803      	bhi.n	80025dc <RNDIS_Control_FS+0x84>
			USBD_RNDIS_TransmitControl(&hUsbDeviceFS, (uint8_t*)response, 8);
 80025d4:	2208      	movs	r2, #8
 80025d6:	497c      	ldr	r1, [pc, #496]	; (80027c8 <RNDIS_Control_FS+0x270>)
 80025d8:	4879      	ldr	r0, [pc, #484]	; (80027c0 <RNDIS_Control_FS+0x268>)
 80025da:	e7e0      	b.n	800259e <RNDIS_Control_FS+0x46>
		} else if(buf32[0]==RNDIS_MSG_KEEPALIVE){
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d1c2      	bne.n	8002566 <RNDIS_Control_FS+0xe>
 80025e0:	e7f8      	b.n	80025d4 <RNDIS_Control_FS+0x7c>
		if(rndis_data.MessageType==RNDIS_MSG_INIT){
 80025e2:	4b76      	ldr	r3, [pc, #472]	; (80027bc <RNDIS_Control_FS+0x264>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	2a02      	cmp	r2, #2
 80025e8:	d117      	bne.n	800261a <RNDIS_Control_FS+0xc2>
			buf32[pos++]=RNDIS_MSG_INIT_C;							//MessageType			Specifies the type of message being sent. Set to 0x80000002.
 80025ea:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
			buf32[pos++]=rndis_data.RequestId;						//RequestId				Specifies the Remote NDIS message ID value. This value is used to match messages sent by the host with device responses.
 80025ee:	685b      	ldr	r3, [r3, #4]
			buf32[pos++]=RNDIS_MSG_INIT_C;							//MessageType			Specifies the type of message being sent. Set to 0x80000002.
 80025f0:	600a      	str	r2, [r1, #0]
			buf32[pos++]=rndis_data.RequestId;						//RequestId				Specifies the Remote NDIS message ID value. This value is used to match messages sent by the host with device responses.
 80025f2:	608b      	str	r3, [r1, #8]
			buf32[pos++]=1580;										//MaxTransferSize		Specifies the maximum size in bytes of any single bus data transfer that the device expects to receive from the host.
 80025f4:	f240 622c 	movw	r2, #1580	; 0x62c
			buf32[pos++]=RNDIS_STATUS_SUCCESS;						//Status				Specifies RNDIS_STATUS_SUCCESS if the device initialized successfully; otherwise, it specifies an error code that indicates the failure.
 80025f8:	2300      	movs	r3, #0
 80025fa:	60cb      	str	r3, [r1, #12]
			buf32[pos++]=1;											//MajorVersion			Specifies the highest Remote NDIS major protocol version supported by the device.
 80025fc:	6120      	str	r0, [r4, #16]
			buf32[pos++]=0;											//MinorVersion			Specifies the highest Remote NDIS minor protocol version supported by the device.
 80025fe:	614b      	str	r3, [r1, #20]
			buf32[pos++]=RNDIS_DF_CONNECTIONLESS;					//DeviceFlags			Specifies the miniport driver type as either connectionless or connection-oriented. This value can be one of the following:
 8002600:	61a0      	str	r0, [r4, #24]
			buf32[pos++]=RNDIS_MEDIUM_802_3;						//Medium				Specifies the medium supported by the device. Set to RNDIS_MEDIUM_802_3 (0x00000000)
 8002602:	61cb      	str	r3, [r1, #28]
			buf32[pos++]=1;											//MaxPacketsPerMessage	Specifies the maximum number of Remote NDIS data messages that the device can handle in a single transfer to it. This value should be at least one.
 8002604:	6220      	str	r0, [r4, #32]
			buf32[pos++]=1580;										//MaxTransferSize		Specifies the maximum size in bytes of any single bus data transfer that the device expects to receive from the host.
 8002606:	624a      	str	r2, [r1, #36]	; 0x24
			buf32[pos++]=0;											//PacketAlignmentFactor	Specifies the byte alignment that the device expects for each Remote NDIS message that is part of a multimessage transfer to it. This value is specified in powers of 2. For example, this value is set to three to indicate 8-byte alignment. This value has a maximum setting of seven, which specifies 128-byte alignment.
 8002608:	628b      	str	r3, [r1, #40]	; 0x28
			buf32[pos++]=0;											//AFListOffset			Reserved for connection-oriented devices. Set value to zero.
 800260a:	62cb      	str	r3, [r1, #44]	; 0x2c
			buf32[pos++]=0;											//AFListSize			Reserved for connection-oriented devices. Set value to zero.
 800260c:	630b      	str	r3, [r1, #48]	; 0x30
		USBD_CtlSendData(&hUsbDeviceFS, pbuf, len);
 800260e:	b2aa      	uxth	r2, r5
 8002610:	4621      	mov	r1, r4
 8002612:	486b      	ldr	r0, [pc, #428]	; (80027c0 <RNDIS_Control_FS+0x268>)
 8002614:	f001 f96b 	bl	80038ee <USBD_CtlSendData>
		break;
 8002618:	e7a5      	b.n	8002566 <RNDIS_Control_FS+0xe>
		} else if(rndis_data.MessageType==RNDIS_MSG_QUERY){
 800261a:	2a04      	cmp	r2, #4
 800261c:	f040 80b9 	bne.w	8002792 <RNDIS_Control_FS+0x23a>
			buf32[pos++]=RNDIS_MSG_QUERY_C;
 8002620:	496a      	ldr	r1, [pc, #424]	; (80027cc <RNDIS_Control_FS+0x274>)
 8002622:	6021      	str	r1, [r4, #0]
			switch(rndis_data.Oid){
 8002624:	486a      	ldr	r0, [pc, #424]	; (80027d0 <RNDIS_Control_FS+0x278>)
			buf32[pos++]=rndis_data.RequestId;
 8002626:	6859      	ldr	r1, [r3, #4]
			switch(rndis_data.Oid){
 8002628:	695b      	ldr	r3, [r3, #20]
			buf32[pos++]=rndis_data.RequestId;
 800262a:	60a1      	str	r1, [r4, #8]
			switch(rndis_data.Oid){
 800262c:	4283      	cmp	r3, r0
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 800262e:	f04f 0100 	mov.w	r1, #0
 8002632:	60e1      	str	r1, [r4, #12]
			switch(rndis_data.Oid){
 8002634:	f000 80a0 	beq.w	8002778 <RNDIS_Control_FS+0x220>
 8002638:	d835      	bhi.n	80026a6 <RNDIS_Control_FS+0x14e>
 800263a:	4966      	ldr	r1, [pc, #408]	; (80027d4 <RNDIS_Control_FS+0x27c>)
 800263c:	428b      	cmp	r3, r1
 800263e:	f000 80a0 	beq.w	8002782 <RNDIS_Control_FS+0x22a>
 8002642:	d812      	bhi.n	800266a <RNDIS_Control_FS+0x112>
 8002644:	3906      	subs	r1, #6
 8002646:	428b      	cmp	r3, r1
 8002648:	d056      	beq.n	80026f8 <RNDIS_Control_FS+0x1a0>
 800264a:	4a63      	ldr	r2, [pc, #396]	; (80027d8 <RNDIS_Control_FS+0x280>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d05a      	beq.n	8002706 <RNDIS_Control_FS+0x1ae>
 8002650:	3a06      	subs	r2, #6
 8002652:	4293      	cmp	r3, r2
 8002654:	d132      	bne.n	80026bc <RNDIS_Control_FS+0x164>
				buf32[pos++]=temp;
 8002656:	2264      	movs	r2, #100	; 0x64
				buf32[pos++]=16;
 8002658:	2310      	movs	r3, #16
				buf32[pos++]=temp;
 800265a:	6122      	str	r2, [r4, #16]
				buf32[pos++]=16;
 800265c:	6163      	str	r3, [r4, #20]
				USBD_memcpy(buf32+pos, OID_GEN_SUPPORTED, temp);
 800265e:	495f      	ldr	r1, [pc, #380]	; (80027dc <RNDIS_Control_FS+0x284>)
 8002660:	f104 0018 	add.w	r0, r4, #24
 8002664:	f006 fe05 	bl	8009272 <memcpy>
				break;
 8002668:	e7d1      	b.n	800260e <RNDIS_Control_FS+0xb6>
			switch(rndis_data.Oid){
 800266a:	495d      	ldr	r1, [pc, #372]	; (80027e0 <RNDIS_Control_FS+0x288>)
 800266c:	428b      	cmp	r3, r1
 800266e:	d071      	beq.n	8002754 <RNDIS_Control_FS+0x1fc>
 8002670:	4a5c      	ldr	r2, [pc, #368]	; (80027e4 <RNDIS_Control_FS+0x28c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d02e      	beq.n	80026d4 <RNDIS_Control_FS+0x17c>
 8002676:	3a07      	subs	r2, #7
 8002678:	4293      	cmp	r3, r2
 800267a:	d11f      	bne.n	80026bc <RNDIS_Control_FS+0x164>
				buf32[pos++]=sizeof(nome);
 800267c:	230f      	movs	r3, #15
 800267e:	6123      	str	r3, [r4, #16]
				buf32[pos++]=16;
 8002680:	2310      	movs	r3, #16
 8002682:	6163      	str	r3, [r4, #20]
				USBD_memcpy((char*)&buf32[pos++], nome, sizeof(nome));
 8002684:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <RNDIS_Control_FS+0x290>)
 8002686:	f104 0218 	add.w	r2, r4, #24
 800268a:	f103 010c 	add.w	r1, r3, #12
 800268e:	f853 0b04 	ldr.w	r0, [r3], #4
 8002692:	f842 0b04 	str.w	r0, [r2], #4
 8002696:	428b      	cmp	r3, r1
 8002698:	d1f9      	bne.n	800268e <RNDIS_Control_FS+0x136>
 800269a:	8819      	ldrh	r1, [r3, #0]
 800269c:	789b      	ldrb	r3, [r3, #2]
 800269e:	8011      	strh	r1, [r2, #0]
 80026a0:	7093      	strb	r3, [r2, #2]
				len=buf32[1]=pos*4+sizeof(nome);
 80026a2:	252b      	movs	r5, #43	; 0x2b
 80026a4:	e04b      	b.n	800273e <RNDIS_Control_FS+0x1e6>
			switch(rndis_data.Oid){
 80026a6:	4851      	ldr	r0, [pc, #324]	; (80027ec <RNDIS_Control_FS+0x294>)
 80026a8:	4283      	cmp	r3, r0
 80026aa:	d065      	beq.n	8002778 <RNDIS_Control_FS+0x220>
 80026ac:	d80b      	bhi.n	80026c6 <RNDIS_Control_FS+0x16e>
 80026ae:	4950      	ldr	r1, [pc, #320]	; (80027f0 <RNDIS_Control_FS+0x298>)
 80026b0:	428b      	cmp	r3, r1
 80026b2:	d05c      	beq.n	800276e <RNDIS_Control_FS+0x216>
 80026b4:	d80e      	bhi.n	80026d4 <RNDIS_Control_FS+0x17c>
 80026b6:	4a4f      	ldr	r2, [pc, #316]	; (80027f4 <RNDIS_Control_FS+0x29c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d051      	beq.n	8002760 <RNDIS_Control_FS+0x208>
				buf32[pos++]=0;
 80026bc:	2300      	movs	r3, #0
 80026be:	6123      	str	r3, [r4, #16]
				buf32[pos++]=20;
 80026c0:	2314      	movs	r3, #20
 80026c2:	6163      	str	r3, [r4, #20]
				break;
 80026c4:	e7a3      	b.n	800260e <RNDIS_Control_FS+0xb6>
			switch(rndis_data.Oid){
 80026c6:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 80026ca:	d03a      	beq.n	8002742 <RNDIS_Control_FS+0x1ea>
 80026cc:	d808      	bhi.n	80026e0 <RNDIS_Control_FS+0x188>
 80026ce:	4a4a      	ldr	r2, [pc, #296]	; (80027f8 <RNDIS_Control_FS+0x2a0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d1f3      	bne.n	80026bc <RNDIS_Control_FS+0x164>
				buf32[pos++]=4;
 80026d4:	2304      	movs	r3, #4
 80026d6:	6123      	str	r3, [r4, #16]
				buf32[pos++]=16;
 80026d8:	2310      	movs	r3, #16
 80026da:	6163      	str	r3, [r4, #20]
				buf32[pos++]=0;
 80026dc:	2300      	movs	r3, #0
 80026de:	e010      	b.n	8002702 <RNDIS_Control_FS+0x1aa>
			switch(rndis_data.Oid){
 80026e0:	f113 3ffe 	cmn.w	r3, #4278124286	; 0xfefefefe
 80026e4:	d016      	beq.n	8002714 <RNDIS_Control_FS+0x1bc>
 80026e6:	4a45      	ldr	r2, [pc, #276]	; (80027fc <RNDIS_Control_FS+0x2a4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d1e7      	bne.n	80026bc <RNDIS_Control_FS+0x164>
				buf32[pos++]=4;
 80026ec:	2304      	movs	r3, #4
 80026ee:	6123      	str	r3, [r4, #16]
				buf32[pos++]=16;
 80026f0:	2310      	movs	r3, #16
 80026f2:	6163      	str	r3, [r4, #20]
				buf32[pos++]=1;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e004      	b.n	8002702 <RNDIS_Control_FS+0x1aa>
				buf32[pos++]=16;
 80026f8:	2310      	movs	r3, #16
 80026fa:	6163      	str	r3, [r4, #20]
				buf32[pos++]=4;
 80026fc:	6122      	str	r2, [r4, #16]
				buf32[pos++]=1500;
 80026fe:	f240 53dc 	movw	r3, #1500	; 0x5dc
				buf32[pos++]=0;
 8002702:	61a3      	str	r3, [r4, #24]
				break;
 8002704:	e783      	b.n	800260e <RNDIS_Control_FS+0xb6>
				buf32[pos++]=4;
 8002706:	2304      	movs	r3, #4
 8002708:	6123      	str	r3, [r4, #16]
				buf32[pos++]=16;
 800270a:	2310      	movs	r3, #16
 800270c:	6163      	str	r3, [r4, #20]
				buf32[pos++]=100000/100;
 800270e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002712:	e7f6      	b.n	8002702 <RNDIS_Control_FS+0x1aa>
				buf32[pos++]=6;
 8002714:	2306      	movs	r3, #6
 8002716:	6123      	str	r3, [r4, #16]
				buf32[pos++]=16;
 8002718:	2310      	movs	r3, #16
 800271a:	6163      	str	r3, [r4, #20]
				buf32[pos++]=0x00757840 | (DeviceID_8[0]<<24);
 800271c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002720:	f5a3 4306 	sub.w	r3, r3, #34304	; 0x8600
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	4b36      	ldr	r3, [pc, #216]	; (8002800 <RNDIS_Control_FS+0x2a8>)
 8002728:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800272c:	61a3      	str	r3, [r4, #24]
				buf32[pos++]=DeviceID_8[2]<<8 | DeviceID_8[1];
 800272e:	4b35      	ldr	r3, [pc, #212]	; (8002804 <RNDIS_Control_FS+0x2ac>)
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	3b01      	subs	r3, #1
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				buf32[pos++]=0xFFEE;
 800273a:	61e3      	str	r3, [r4, #28]
				len=buf32[1]=pos*4-2;
 800273c:	251e      	movs	r5, #30
				len=buf32[1]=pos*4+sizeof(nome);
 800273e:	6065      	str	r5, [r4, #4]
				break;
 8002740:	e765      	b.n	800260e <RNDIS_Control_FS+0xb6>
				buf32[pos++]=6;
 8002742:	2306      	movs	r3, #6
 8002744:	6123      	str	r3, [r4, #16]
				buf32[pos++]=16;
 8002746:	2310      	movs	r3, #16
 8002748:	6163      	str	r3, [r4, #20]
				buf32[pos++]=0xDD757840;
 800274a:	4b2f      	ldr	r3, [pc, #188]	; (8002808 <RNDIS_Control_FS+0x2b0>)
 800274c:	61a3      	str	r3, [r4, #24]
				buf32[pos++]=0xFFEE;
 800274e:	f64f 73ee 	movw	r3, #65518	; 0xffee
 8002752:	e7f2      	b.n	800273a <RNDIS_Control_FS+0x1e2>
				buf32[pos++]=16;
 8002754:	2310      	movs	r3, #16
 8002756:	6163      	str	r3, [r4, #20]
				buf32[pos++]=4;
 8002758:	6122      	str	r2, [r4, #16]
				buf32[pos++]=1558;
 800275a:	f240 6316 	movw	r3, #1558	; 0x616
 800275e:	e7d0      	b.n	8002702 <RNDIS_Control_FS+0x1aa>
				buf32[pos++]=4;
 8002760:	2304      	movs	r3, #4
 8002762:	6123      	str	r3, [r4, #16]
				buf32[pos++]=16;
 8002764:	2310      	movs	r3, #16
 8002766:	6163      	str	r3, [r4, #20]
				buf32[pos++]=rndis_oid_gen_xmit_ok & 0xffffffff;
 8002768:	4b28      	ldr	r3, [pc, #160]	; (800280c <RNDIS_Control_FS+0x2b4>)
				buf32[pos++]=rndis_oid_gen_rcv_ok & 0xffffffff;
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	e7c9      	b.n	8002702 <RNDIS_Control_FS+0x1aa>
				buf32[pos++]=16;
 800276e:	2310      	movs	r3, #16
 8002770:	6163      	str	r3, [r4, #20]
				buf32[pos++]=4;
 8002772:	6122      	str	r2, [r4, #16]
				buf32[pos++]=rndis_oid_gen_rcv_ok & 0xffffffff;
 8002774:	4b26      	ldr	r3, [pc, #152]	; (8002810 <RNDIS_Control_FS+0x2b8>)
 8002776:	e7f8      	b.n	800276a <RNDIS_Control_FS+0x212>
				buf32[pos++]=16;
 8002778:	2310      	movs	r3, #16
				buf32[pos++]=4;
 800277a:	6122      	str	r2, [r4, #16]
				buf32[pos++]=16;
 800277c:	6163      	str	r3, [r4, #20]
				buf32[pos++]=0;
 800277e:	61a1      	str	r1, [r4, #24]
				break;
 8002780:	e745      	b.n	800260e <RNDIS_Control_FS+0xb6>
				buf32[pos++]=3;
 8002782:	2303      	movs	r3, #3
 8002784:	6123      	str	r3, [r4, #16]
				buf32[pos++]=20;
 8002786:	2314      	movs	r3, #20
 8002788:	6163      	str	r3, [r4, #20]
				buf32[pos++]=0x00757840;
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <RNDIS_Control_FS+0x2a8>)
 800278c:	61a3      	str	r3, [r4, #24]
				len=buf32[1]=pos*4-1;
 800278e:	251b      	movs	r5, #27
 8002790:	e7d5      	b.n	800273e <RNDIS_Control_FS+0x1e6>
		} else if(rndis_data.MessageType==RNDIS_MSG_SET){
 8002792:	2a05      	cmp	r2, #5
 8002794:	d106      	bne.n	80027a4 <RNDIS_Control_FS+0x24c>
			buf32[pos++]=rndis_data.RequestId;
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	60a3      	str	r3, [r4, #8]
			buf32[pos++]=RNDIS_MSG_KEEPALIVE_C;
 800279a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800279e:	6022      	str	r2, [r4, #0]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e005      	b.n	80027b0 <RNDIS_Control_FS+0x258>
		} else if(rndis_data.MessageType==RNDIS_MSG_RESET){
 80027a4:	2a06      	cmp	r2, #6
 80027a6:	d105      	bne.n	80027b4 <RNDIS_Control_FS+0x25c>
			buf32[pos++]=RNDIS_MSG_RESET_C;
 80027a8:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <RNDIS_Control_FS+0x2bc>)
 80027aa:	600b      	str	r3, [r1, #0]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 80027ac:	2300      	movs	r3, #0
 80027ae:	608b      	str	r3, [r1, #8]
			buf32[pos++]=RNDIS_STATUS_SUCCESS;
 80027b0:	60e3      	str	r3, [r4, #12]
 80027b2:	e72c      	b.n	800260e <RNDIS_Control_FS+0xb6>
		} else if(rndis_data.MessageType==RNDIS_MSG_KEEPALIVE){
 80027b4:	2a08      	cmp	r2, #8
 80027b6:	f47f af2a 	bne.w	800260e <RNDIS_Control_FS+0xb6>
 80027ba:	e7ec      	b.n	8002796 <RNDIS_Control_FS+0x23e>
 80027bc:	20000c08 	.word	0x20000c08
 80027c0:	200052ec 	.word	0x200052ec
 80027c4:	20000048 	.word	0x20000048
 80027c8:	080096e8 	.word	0x080096e8
 80027cc:	80000004 	.word	0x80000004
 80027d0:	00010202 	.word	0x00010202
 80027d4:	0001010c 	.word	0x0001010c
 80027d8:	00010107 	.word	0x00010107
 80027dc:	08009674 	.word	0x08009674
 80027e0:	00010111 	.word	0x00010111
 80027e4:	00010114 	.word	0x00010114
 80027e8:	080096d8 	.word	0x080096d8
 80027ec:	00020104 	.word	0x00020104
 80027f0:	00020102 	.word	0x00020102
 80027f4:	00020101 	.word	0x00020101
 80027f8:	00020105 	.word	0x00020105
 80027fc:	01010104 	.word	0x01010104
 8002800:	00757840 	.word	0x00757840
 8002804:	1fff7a12 	.word	0x1fff7a12
 8002808:	dd757840 	.word	0xdd757840
 800280c:	20000c38 	.word	0x20000c38
 8002810:	20000c30 	.word	0x20000c30
 8002814:	80000006 	.word	0x80000006

08002818 <RNDIS_DeInit_FS>:
{
 8002818:	b508      	push	{r3, lr}
	RNDIS_Disconnect();
 800281a:	f7ff fe89 	bl	8002530 <RNDIS_Disconnect>
}
 800281e:	2000      	movs	r0, #0
 8002820:	bd08      	pop	{r3, pc}
	...

08002824 <RNDIS_Init_FS>:
{ 
 8002824:	b510      	push	{r4, lr}
	USBD_RNDIS_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8002826:	4c07      	ldr	r4, [pc, #28]	; (8002844 <RNDIS_Init_FS+0x20>)
 8002828:	4907      	ldr	r1, [pc, #28]	; (8002848 <RNDIS_Init_FS+0x24>)
 800282a:	2200      	movs	r2, #0
 800282c:	4620      	mov	r0, r4
 800282e:	f000 fd3f 	bl	80032b0 <USBD_RNDIS_SetTxBuffer>
	USBD_RNDIS_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS_Temp);
 8002832:	4906      	ldr	r1, [pc, #24]	; (800284c <RNDIS_Init_FS+0x28>)
 8002834:	4620      	mov	r0, r4
 8002836:	f000 fd43 	bl	80032c0 <USBD_RNDIS_SetRxBuffer>
	RNDIS_Disconnect();
 800283a:	f7ff fe79 	bl	8002530 <RNDIS_Disconnect>
}
 800283e:	2000      	movs	r0, #0
 8002840:	bd10      	pop	{r4, pc}
 8002842:	bf00      	nop
 8002844:	200052ec 	.word	0x200052ec
 8002848:	20005b08 	.word	0x20005b08
 800284c:	20000bc4 	.word	0x20000bc4

08002850 <RNDIS_Transmit_FS>:
{
 8002850:	b570      	push	{r4, r5, r6, lr}
	USBD_RNDIS_HandleTypeDef *hrndis = (USBD_RNDIS_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002852:	4e1b      	ldr	r6, [pc, #108]	; (80028c0 <RNDIS_Transmit_FS+0x70>)
 8002854:	f8d6 3218 	ldr.w	r3, [r6, #536]	; 0x218
	if (hrndis->TxState != 0 || rndis_state!=RNDIS_STATE_NORMAL){
 8002858:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800285c:	bb73      	cbnz	r3, 80028bc <RNDIS_Transmit_FS+0x6c>
 800285e:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <RNDIS_Transmit_FS+0x74>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2501      	movs	r5, #1
 8002864:	bb53      	cbnz	r3, 80028bc <RNDIS_Transmit_FS+0x6c>
	buffer[0]=0x00000001;	//MessageType
 8002866:	4c18      	ldr	r4, [pc, #96]	; (80028c8 <RNDIS_Transmit_FS+0x78>)
 8002868:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800286c:	460a      	mov	r2, r1
 800286e:	bf28      	it	cs
 8002870:	f44f 6200 	movcs.w	r2, #2048	; 0x800
 8002874:	6025      	str	r5, [r4, #0]
	buffer[2]=36;			//DataOffset
 8002876:	2124      	movs	r1, #36	; 0x24
	buffer[1]=Len+44;		//MessageLength
 8002878:	f102 052c 	add.w	r5, r2, #44	; 0x2c
	buffer[4]=0;			//OOBDataOffset
 800287c:	6123      	str	r3, [r4, #16]
	buffer[5]=0;			//OOBDataLength
 800287e:	6163      	str	r3, [r4, #20]
	buffer[6]=0;			//NumOOBDataElements
 8002880:	61a3      	str	r3, [r4, #24]
	buffer[7]=0;			//PerPacketInfoOffset
 8002882:	61e3      	str	r3, [r4, #28]
	buffer[8]=0;			//PerPacketInfoLength
 8002884:	6223      	str	r3, [r4, #32]
	buffer[9]=0;			//VcHandle
 8002886:	6263      	str	r3, [r4, #36]	; 0x24
	buffer[10]=0;			//Reserved
 8002888:	62a3      	str	r3, [r4, #40]	; 0x28
	buffer[2]=36;			//DataOffset
 800288a:	60a1      	str	r1, [r4, #8]
	buffer[3]=Len;			//DataLength
 800288c:	60e2      	str	r2, [r4, #12]
	memcpy(UserTxBufferFS+44, Buf, Len);
 800288e:	4601      	mov	r1, r0
	buffer[1]=Len+44;		//MessageLength
 8002890:	6065      	str	r5, [r4, #4]
	memcpy(UserTxBufferFS+44, Buf, Len);
 8002892:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002896:	f006 fcec 	bl	8009272 <memcpy>
	USBD_RNDIS_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, Len+44);
 800289a:	b2aa      	uxth	r2, r5
 800289c:	4621      	mov	r1, r4
 800289e:	4630      	mov	r0, r6
 80028a0:	f000 fd06 	bl	80032b0 <USBD_RNDIS_SetTxBuffer>
	result = USBD_RNDIS_TransmitPacket(&hUsbDeviceFS);
 80028a4:	4630      	mov	r0, r6
 80028a6:	f000 fd11 	bl	80032cc <USBD_RNDIS_TransmitPacket>
	rndis_oid_gen_xmit_ok++;
 80028aa:	4908      	ldr	r1, [pc, #32]	; (80028cc <RNDIS_Transmit_FS+0x7c>)
 80028ac:	e9d1 2300 	ldrd	r2, r3, [r1]
 80028b0:	3201      	adds	r2, #1
 80028b2:	f143 0300 	adc.w	r3, r3, #0
 80028b6:	e9c1 2300 	strd	r2, r3, [r1]
 80028ba:	bd70      	pop	{r4, r5, r6, pc}
		return USBD_BUSY;
 80028bc:	2001      	movs	r0, #1
 80028be:	bd70      	pop	{r4, r5, r6, pc}
 80028c0:	200052ec 	.word	0x200052ec
 80028c4:	20000048 	.word	0x20000048
 80028c8:	20005b08 	.word	0x20005b08
 80028cc:	20000c38 	.word	0x20000c38

080028d0 <xNetworkInterfaceInitialise>:
	if(rndis_state==RNDIS_STATE_NORMAL){
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <xNetworkInterfaceInitialise+0x2c>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
BaseType_t xNetworkInterfaceInitialise( void ){
 80028d4:	b507      	push	{r0, r1, r2, lr}
	if(rndis_state==RNDIS_STATE_NORMAL){
 80028d6:	b96b      	cbnz	r3, 80028f4 <xNetworkInterfaceInitialise+0x24>
		if(xEMACTaskHandle==0){
 80028d8:	4a09      	ldr	r2, [pc, #36]	; (8002900 <xNetworkInterfaceInitialise+0x30>)
 80028da:	6813      	ldr	r3, [r2, #0]
 80028dc:	b943      	cbnz	r3, 80028f0 <xNetworkInterfaceInitialise+0x20>
			xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, configMAX_PRIORITIES - 1, &xEMACTaskHandle );
 80028de:	9201      	str	r2, [sp, #4]
 80028e0:	2206      	movs	r2, #6
 80028e2:	9200      	str	r2, [sp, #0]
 80028e4:	4907      	ldr	r1, [pc, #28]	; (8002904 <xNetworkInterfaceInitialise+0x34>)
 80028e6:	4808      	ldr	r0, [pc, #32]	; (8002908 <xNetworkInterfaceInitialise+0x38>)
 80028e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ec:	f001 ffda 	bl	80048a4 <xTaskCreate>
		ret=1;
 80028f0:	2001      	movs	r0, #1
	return ret;
 80028f2:	e000      	b.n	80028f6 <xNetworkInterfaceInitialise+0x26>
	BaseType_t ret=0;
 80028f4:	2000      	movs	r0, #0
}
 80028f6:	b003      	add	sp, #12
 80028f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80028fc:	20000048 	.word	0x20000048
 8002900:	20000c40 	.word	0x20000c40
 8002904:	08009708 	.word	0x08009708
 8002908:	08002419 	.word	0x08002419

0800290c <xNetworkInterfaceOutput>:
BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor, BaseType_t xReleaseAfterSend  ){
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	4605      	mov	r5, r0
 8002910:	460e      	mov	r6, r1
	while(RNDIS_Transmit_FS( pxDescriptor->pucEthernetBuffer, pxDescriptor->xDataLength) ){
 8002912:	2405      	movs	r4, #5
 8002914:	8ba9      	ldrh	r1, [r5, #28]
 8002916:	69a8      	ldr	r0, [r5, #24]
 8002918:	f7ff ff9a 	bl	8002850 <RNDIS_Transmit_FS>
 800291c:	b130      	cbz	r0, 800292c <xNetworkInterfaceOutput+0x20>
		vTaskDelay(5);
 800291e:	2005      	movs	r0, #5
 8002920:	3c01      	subs	r4, #1
 8002922:	f002 f9e9 	bl	8004cf8 <vTaskDelay>
		if(retries>=5){
 8002926:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800292a:	d1f3      	bne.n	8002914 <xNetworkInterfaceOutput+0x8>
	if( xReleaseAfterSend != pdFALSE )
 800292c:	b116      	cbz	r6, 8002934 <xNetworkInterfaceOutput+0x28>
		vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800292e:	4628      	mov	r0, r5
 8002930:	f006 fa18 	bl	8008d64 <vReleaseNetworkBufferAndDescriptor>
}
 8002934:	2001      	movs	r0, #1
 8002936:	bd70      	pop	{r4, r5, r6, pc}

08002938 <USBD_COMPOSITE_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8002938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t ret = 0;
	uint8_t index=0;

	for(index=0 ; index<usbd_composite_pClass_count;index++){
 800293c:	2400      	movs	r4, #0
 800293e:	4f14      	ldr	r7, [pc, #80]	; (8002990 <USBD_COMPOSITE_Init+0x58>)
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002940:	f8df a050 	ldr.w	sl, [pc, #80]	; 8002994 <USBD_COMPOSITE_Init+0x5c>
{
 8002944:	4606      	mov	r6, r0
 8002946:	4689      	mov	r9, r1
	uint8_t ret = 0;
 8002948:	4625      	mov	r5, r4
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 800294a:	f04f 0b50 	mov.w	fp, #80	; 0x50
	for(index=0 ; index<usbd_composite_pClass_count;index++){
 800294e:	783b      	ldrb	r3, [r7, #0]
 8002950:	f104 0801 	add.w	r8, r4, #1
 8002954:	b2e4      	uxtb	r4, r4
 8002956:	42a3      	cmp	r3, r4
 8002958:	d802      	bhi.n	8002960 <USBD_COMPOSITE_Init+0x28>

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
	}
	return ret;
}
 800295a:	4628      	mov	r0, r5
 800295c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002960:	fb0b a404 	mla	r4, fp, r4, sl
		ret|=usbd_composite_class_data[index].pClass->Init(pdev, cfgidx);
 8002964:	4649      	mov	r1, r9
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002966:	68a3      	ldr	r3, [r4, #8]
 8002968:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 800296c:	68e3      	ldr	r3, [r4, #12]
 800296e:	f8c6 321c 	str.w	r3, [r6, #540]	; 0x21c
		ret|=usbd_composite_class_data[index].pClass->Init(pdev, cfgidx);
 8002972:	6863      	ldr	r3, [r4, #4]
 8002974:	4630      	mov	r0, r6
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4798      	blx	r3
		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 800297a:	f8d6 3218 	ldr.w	r3, [r6, #536]	; 0x218
 800297e:	60a3      	str	r3, [r4, #8]
		ret|=usbd_composite_class_data[index].pClass->Init(pdev, cfgidx);
 8002980:	4305      	orrs	r5, r0
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002982:	f8d6 321c 	ldr.w	r3, [r6, #540]	; 0x21c
 8002986:	60e3      	str	r3, [r4, #12]
		ret|=usbd_composite_class_data[index].pClass->Init(pdev, cfgidx);
 8002988:	b2ed      	uxtb	r5, r5
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 800298a:	4644      	mov	r4, r8
 800298c:	e7df      	b.n	800294e <USBD_COMPOSITE_Init+0x16>
 800298e:	bf00      	nop
 8002990:	20001047 	.word	0x20001047
 8002994:	20006334 	.word	0x20006334

08002998 <USBD_COMPOSITE_DeInit>:
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_DeInit (USBD_HandleTypeDef *pdev,
		uint8_t cfgidx)
{
 8002998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t ret = 0;

	uint8_t index=0;

	for(index=0 ; index<usbd_composite_pClass_count;index++){
 800299c:	2400      	movs	r4, #0
 800299e:	4f14      	ldr	r7, [pc, #80]	; (80029f0 <USBD_COMPOSITE_DeInit+0x58>)
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 80029a0:	f8df a050 	ldr.w	sl, [pc, #80]	; 80029f4 <USBD_COMPOSITE_DeInit+0x5c>
{
 80029a4:	4606      	mov	r6, r0
 80029a6:	4689      	mov	r9, r1
	uint8_t ret = 0;
 80029a8:	4625      	mov	r5, r4
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 80029aa:	f04f 0b50 	mov.w	fp, #80	; 0x50
	for(index=0 ; index<usbd_composite_pClass_count;index++){
 80029ae:	783b      	ldrb	r3, [r7, #0]
 80029b0:	f104 0801 	add.w	r8, r4, #1
 80029b4:	b2e4      	uxtb	r4, r4
 80029b6:	42a3      	cmp	r3, r4
 80029b8:	d802      	bhi.n	80029c0 <USBD_COMPOSITE_DeInit+0x28>
		usbd_composite_class_data[index].pClassData=pdev->pClassData;
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
	}

	return ret;
}
 80029ba:	4628      	mov	r0, r5
 80029bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 80029c0:	fb0b a404 	mla	r4, fp, r4, sl
		ret|=usbd_composite_class_data[index].pClass->DeInit(pdev, cfgidx);
 80029c4:	4649      	mov	r1, r9
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 80029c6:	68a3      	ldr	r3, [r4, #8]
 80029c8:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 80029cc:	68e3      	ldr	r3, [r4, #12]
 80029ce:	f8c6 321c 	str.w	r3, [r6, #540]	; 0x21c
		ret|=usbd_composite_class_data[index].pClass->DeInit(pdev, cfgidx);
 80029d2:	6863      	ldr	r3, [r4, #4]
 80029d4:	4630      	mov	r0, r6
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4798      	blx	r3
		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 80029da:	f8d6 3218 	ldr.w	r3, [r6, #536]	; 0x218
 80029de:	60a3      	str	r3, [r4, #8]
		ret|=usbd_composite_class_data[index].pClass->DeInit(pdev, cfgidx);
 80029e0:	4305      	orrs	r5, r0
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 80029e2:	f8d6 321c 	ldr.w	r3, [r6, #540]	; 0x21c
 80029e6:	60e3      	str	r3, [r4, #12]
		ret|=usbd_composite_class_data[index].pClass->DeInit(pdev, cfgidx);
 80029e8:	b2ed      	uxtb	r5, r5
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 80029ea:	4644      	mov	r4, r8
 80029ec:	e7df      	b.n	80029ae <USBD_COMPOSITE_DeInit+0x16>
 80029ee:	bf00      	nop
 80029f0:	20001047 	.word	0x20001047
 80029f4:	20006334 	.word	0x20006334

080029f8 <USBD_COMPOSITE_Setup>:
 * @param  req: usb requests
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_Setup (USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req)
{
 80029f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t status=USBD_OK;
	uint8_t itf=0;
	uint8_t index=-1;
	uint8_t i=0;

	switch(req->bmRequest & 0x1F) {
 80029fc:	780b      	ldrb	r3, [r1, #0]
 80029fe:	4f39      	ldr	r7, [pc, #228]	; (8002ae4 <USBD_COMPOSITE_Setup+0xec>)
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	2b01      	cmp	r3, #1
{
 8002a06:	4605      	mov	r5, r0
	switch(req->bmRequest & 0x1F) {
 8002a08:	d01c      	beq.n	8002a44 <USBD_COMPOSITE_Setup+0x4c>
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d162      	bne.n	8002ad4 <USBD_COMPOSITE_Setup+0xdc>
			if(LOBYTE(req->wIndex)<itf)
				break;
		}
		break;
	case USB_REQ_RECIPIENT_ENDPOINT:
		for(index=0;index<usbd_composite_pClass_count;index++){
 8002a0e:	f897 c000 	ldrb.w	ip, [r7]
 8002a12:	4a35      	ldr	r2, [pc, #212]	; (8002ae8 <USBD_COMPOSITE_Setup+0xf0>)
 8002a14:	f04f 0e00 	mov.w	lr, #0
 8002a18:	fa5f f48e 	uxtb.w	r4, lr
 8002a1c:	4564      	cmp	r4, ip
 8002a1e:	d225      	bcs.n	8002a6c <USBD_COMPOSITE_Setup+0x74>
			if(req->wIndex & 0x80){
 8002a20:	888b      	ldrh	r3, [r1, #4]
 8002a22:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002a26:	d13e      	bne.n	8002aa6 <USBD_COMPOSITE_Setup+0xae>
					if(usbd_composite_class_data[index].inEPa[i]==(req->wIndex & 0x7F)){
						break;
					}
				}
			} else {
				for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8002a28:	f892 8011 	ldrb.w	r8, [r2, #17]
					if(usbd_composite_class_data[index].outEPa[i]==LOBYTE(req->wIndex)){
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	b2c6      	uxtb	r6, r0
				for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8002a30:	4546      	cmp	r6, r8
 8002a32:	d247      	bcs.n	8002ac4 <USBD_COMPOSITE_Setup+0xcc>
					if(usbd_composite_class_data[index].outEPa[i]==LOBYTE(req->wIndex)){
 8002a34:	eb02 0900 	add.w	r9, r2, r0
 8002a38:	3001      	adds	r0, #1
 8002a3a:	f899 903f 	ldrb.w	r9, [r9, #63]	; 0x3f
 8002a3e:	4599      	cmp	r9, r3
 8002a40:	d1f5      	bne.n	8002a2e <USBD_COMPOSITE_Setup+0x36>
 8002a42:	e03f      	b.n	8002ac4 <USBD_COMPOSITE_Setup+0xcc>
		for(index=0;index<usbd_composite_pClass_count;index++){
 8002a44:	2300      	movs	r3, #0
 8002a46:	7838      	ldrb	r0, [r7, #0]
			itf+=usbd_composite_class_data[index].bInterfaces;
 8002a48:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8002ae8 <USBD_COMPOSITE_Setup+0xf0>
		for(index=0;index<usbd_composite_pClass_count;index++){
 8002a4c:	461a      	mov	r2, r3
			itf+=usbd_composite_class_data[index].bInterfaces;
 8002a4e:	2650      	movs	r6, #80	; 0x50
 8002a50:	b2dc      	uxtb	r4, r3
		for(index=0;index<usbd_composite_pClass_count;index++){
 8002a52:	4284      	cmp	r4, r0
 8002a54:	d20a      	bcs.n	8002a6c <USBD_COMPOSITE_Setup+0x74>
			itf+=usbd_composite_class_data[index].bInterfaces;
 8002a56:	fb06 ec03 	mla	ip, r6, r3, lr
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f89c c003 	ldrb.w	ip, [ip, #3]
 8002a60:	4462      	add	r2, ip
			if(LOBYTE(req->wIndex)<itf)
 8002a62:	f891 c004 	ldrb.w	ip, [r1, #4]
			itf+=usbd_composite_class_data[index].bInterfaces;
 8002a66:	b2d2      	uxtb	r2, r2
			if(LOBYTE(req->wIndex)<itf)
 8002a68:	4562      	cmp	r2, ip
 8002a6a:	d9f1      	bls.n	8002a50 <USBD_COMPOSITE_Setup+0x58>
				break;
			}
		}
		break;
	}
	if(index!=-1 && index!=usbd_composite_pClass_count){
 8002a6c:	783b      	ldrb	r3, [r7, #0]
 8002a6e:	42a3      	cmp	r3, r4
 8002a70:	d034      	beq.n	8002adc <USBD_COMPOSITE_Setup+0xe4>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002a72:	4e1d      	ldr	r6, [pc, #116]	; (8002ae8 <USBD_COMPOSITE_Setup+0xf0>)
 8002a74:	2350      	movs	r3, #80	; 0x50
 8002a76:	fb03 6304 	mla	r3, r3, r4, r6
 8002a7a:	6898      	ldr	r0, [r3, #8]
 8002a7c:	f8c5 0218 	str.w	r0, [r5, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002a80:	68d8      	ldr	r0, [r3, #12]

		if(usbd_composite_class_data[index].pClass->Setup){
 8002a82:	685b      	ldr	r3, [r3, #4]
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002a84:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
		if(usbd_composite_class_data[index].pClass->Setup){
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	b32b      	cbz	r3, 8002ad8 <USBD_COMPOSITE_Setup+0xe0>
			status=usbd_composite_class_data[index].pClass->Setup(pdev, req);
 8002a8c:	4628      	mov	r0, r5
 8002a8e:	4798      	blx	r3
		}

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8002a90:	2350      	movs	r3, #80	; 0x50
 8002a92:	fb03 6404 	mla	r4, r3, r4, r6
 8002a96:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8002a9a:	60a3      	str	r3, [r4, #8]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002a9c:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002aa0:	60e3      	str	r3, [r4, #12]
 8002aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 8002aa6:	f892 8010 	ldrb.w	r8, [r2, #16]
 8002aaa:	2000      	movs	r0, #0
					if(usbd_composite_class_data[index].inEPa[i]==(req->wIndex & 0x7F)){
 8002aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ab0:	b2c6      	uxtb	r6, r0
				for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 8002ab2:	4546      	cmp	r6, r8
 8002ab4:	d206      	bcs.n	8002ac4 <USBD_COMPOSITE_Setup+0xcc>
					if(usbd_composite_class_data[index].inEPa[i]==(req->wIndex & 0x7F)){
 8002ab6:	eb02 0900 	add.w	r9, r2, r0
 8002aba:	3001      	adds	r0, #1
 8002abc:	f899 9030 	ldrb.w	r9, [r9, #48]	; 0x30
 8002ac0:	4599      	cmp	r9, r3
 8002ac2:	d1f5      	bne.n	8002ab0 <USBD_COMPOSITE_Setup+0xb8>
			if(i!=usbd_composite_class_data[index].inEP){
 8002ac4:	7c13      	ldrb	r3, [r2, #16]
 8002ac6:	429e      	cmp	r6, r3
 8002ac8:	f10e 0e01 	add.w	lr, lr, #1
 8002acc:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8002ad0:	d0a2      	beq.n	8002a18 <USBD_COMPOSITE_Setup+0x20>
 8002ad2:	e7cb      	b.n	8002a6c <USBD_COMPOSITE_Setup+0x74>
	uint8_t index=-1;
 8002ad4:	24ff      	movs	r4, #255	; 0xff
 8002ad6:	e7c9      	b.n	8002a6c <USBD_COMPOSITE_Setup+0x74>
	uint8_t status=USBD_OK;
 8002ad8:	4618      	mov	r0, r3
 8002ada:	e7d9      	b.n	8002a90 <USBD_COMPOSITE_Setup+0x98>
 8002adc:	2000      	movs	r0, #0
	}

	return status;
}
 8002ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20001047 	.word	0x20001047
 8002ae8:	20006334 	.word	0x20006334

08002aec <USBD_COMPOSITE_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8002aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t status=USBD_OK;
	uint8_t index=0;
	uint8_t i=0;

	for(index=0;index<usbd_composite_pClass_count;index++){
 8002aee:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <USBD_COMPOSITE_DataIn+0x70>)
{
 8002af0:	4605      	mov	r5, r0
 8002af2:	481b      	ldr	r0, [pc, #108]	; (8002b60 <USBD_COMPOSITE_DataIn+0x74>)
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002af4:	f893 e000 	ldrb.w	lr, [r3]
 8002af8:	2400      	movs	r4, #0
 8002afa:	4606      	mov	r6, r0
 8002afc:	b2e3      	uxtb	r3, r4
 8002afe:	459e      	cmp	lr, r3
 8002b00:	d929      	bls.n	8002b56 <USBD_COMPOSITE_DataIn+0x6a>
		for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 8002b02:	7c07      	ldrb	r7, [r0, #16]
 8002b04:	2200      	movs	r2, #0
 8002b06:	b2d3      	uxtb	r3, r2
 8002b08:	429f      	cmp	r7, r3
 8002b0a:	d802      	bhi.n	8002b12 <USBD_COMPOSITE_DataIn+0x26>
 8002b0c:	3401      	adds	r4, #1
 8002b0e:	3050      	adds	r0, #80	; 0x50
 8002b10:	e7f4      	b.n	8002afc <USBD_COMPOSITE_DataIn+0x10>
			if(usbd_composite_class_data[index].inEPa[i]==epnum){
 8002b12:	4694      	mov	ip, r2
 8002b14:	3201      	adds	r2, #1
 8002b16:	1883      	adds	r3, r0, r2
 8002b18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002b1c:	428b      	cmp	r3, r1
 8002b1e:	d1f2      	bne.n	8002b06 <USBD_COMPOSITE_DataIn+0x1a>
				pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002b20:	2350      	movs	r3, #80	; 0x50
 8002b22:	fb03 6304 	mla	r3, r3, r4, r6
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	f8c5 2218 	str.w	r2, [r5, #536]	; 0x218
				pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c

				if(usbd_composite_class_data[index].pClass->DataOut){
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	6990      	ldr	r0, [r2, #24]
 8002b36:	b120      	cbz	r0, 8002b42 <USBD_COMPOSITE_DataIn+0x56>
					status|=usbd_composite_class_data[index].pClass->DataIn(pdev, usbd_composite_class_data[index].inEPn[i]);
 8002b38:	4463      	add	r3, ip
 8002b3a:	6952      	ldr	r2, [r2, #20]
 8002b3c:	7c99      	ldrb	r1, [r3, #18]
 8002b3e:	4628      	mov	r0, r5
 8002b40:	4790      	blx	r2
				}

				usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8002b42:	2350      	movs	r3, #80	; 0x50
 8002b44:	fb03 6404 	mla	r4, r3, r4, r6
 8002b48:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8002b4c:	60a3      	str	r3, [r4, #8]
				usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002b4e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002b52:	60e3      	str	r3, [r4, #12]
				return status;
 8002b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
	}
	return status;
 8002b56:	2000      	movs	r0, #0
}
 8002b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20001047 	.word	0x20001047
 8002b60:	20006334 	.word	0x20006334

08002b64 <USBD_COMPOSITE_DataOut>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8002b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t status=USBD_OK;
	uint8_t index=0;
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002b66:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <USBD_COMPOSITE_DataOut+0x74>)
{      
 8002b68:	4605      	mov	r5, r0
 8002b6a:	481c      	ldr	r0, [pc, #112]	; (8002bdc <USBD_COMPOSITE_DataOut+0x78>)
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002b6c:	f893 e000 	ldrb.w	lr, [r3]
 8002b70:	2400      	movs	r4, #0
 8002b72:	4606      	mov	r6, r0
 8002b74:	b2e3      	uxtb	r3, r4
 8002b76:	459e      	cmp	lr, r3
 8002b78:	d92b      	bls.n	8002bd2 <USBD_COMPOSITE_DataOut+0x6e>
		uint8_t i=0;
		for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8002b7a:	7c47      	ldrb	r7, [r0, #17]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	b2d3      	uxtb	r3, r2
 8002b80:	429f      	cmp	r7, r3
 8002b82:	d802      	bhi.n	8002b8a <USBD_COMPOSITE_DataOut+0x26>
 8002b84:	3401      	adds	r4, #1
 8002b86:	3050      	adds	r0, #80	; 0x50
 8002b88:	e7f4      	b.n	8002b74 <USBD_COMPOSITE_DataOut+0x10>
			if(usbd_composite_class_data[index].outEPa[i]==epnum){
 8002b8a:	4694      	mov	ip, r2
 8002b8c:	3201      	adds	r2, #1
 8002b8e:	1883      	adds	r3, r0, r2
 8002b90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b94:	428b      	cmp	r3, r1
 8002b96:	d1f2      	bne.n	8002b7e <USBD_COMPOSITE_DataOut+0x1a>
				pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002b98:	2350      	movs	r3, #80	; 0x50
 8002b9a:	fb03 6304 	mla	r3, r3, r4, r6
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	f8c5 2218 	str.w	r2, [r5, #536]	; 0x218
				pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c

				if(usbd_composite_class_data[index].pClass->DataOut){
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	6992      	ldr	r2, [r2, #24]
 8002bae:	b172      	cbz	r2, 8002bce <USBD_COMPOSITE_DataOut+0x6a>
					status|=usbd_composite_class_data[index].pClass->DataOut(pdev, usbd_composite_class_data[index].outEPn[i]);
 8002bb0:	4463      	add	r3, ip
 8002bb2:	4628      	mov	r0, r5
 8002bb4:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8002bb8:	4790      	blx	r2
				}

				usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8002bba:	2350      	movs	r3, #80	; 0x50
 8002bbc:	fb03 6404 	mla	r4, r3, r4, r6
 8002bc0:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8002bc4:	60a3      	str	r3, [r4, #8]
				usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002bc6:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002bca:	60e3      	str	r3, [r4, #12]
				return status;
 8002bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t status=USBD_OK;
 8002bce:	4610      	mov	r0, r2
 8002bd0:	e7f3      	b.n	8002bba <USBD_COMPOSITE_DataOut+0x56>
			}
		}
	}
	return status;
 8002bd2:	2000      	movs	r0, #0
}
 8002bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20001047 	.word	0x20001047
 8002bdc:	20006334 	.word	0x20006334

08002be0 <USBD_COMPOSITE_EP0_RxReady>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_COMPOSITE_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8002be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t status=USBD_OK;
	uint8_t index;
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002be4:	2600      	movs	r6, #0
 8002be6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8002c38 <USBD_COMPOSITE_EP0_RxReady+0x58>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002bea:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8002c3c <USBD_COMPOSITE_EP0_RxReady+0x5c>
{ 
 8002bee:	4605      	mov	r5, r0
	uint8_t status=USBD_OK;
 8002bf0:	4634      	mov	r4, r6
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002bf2:	f899 3000 	ldrb.w	r3, [r9]
 8002bf6:	b2f7      	uxtb	r7, r6
 8002bf8:	42bb      	cmp	r3, r7
 8002bfa:	d802      	bhi.n	8002c02 <USBD_COMPOSITE_EP0_RxReady+0x22>

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
	}
	return status;
}
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002c02:	2350      	movs	r3, #80	; 0x50
 8002c04:	fb03 8307 	mla	r3, r3, r7, r8
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	f8c5 2218 	str.w	r2, [r5, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002c0e:	68da      	ldr	r2, [r3, #12]
		if(usbd_composite_class_data[index].pClass->EP0_RxReady){
 8002c10:	685b      	ldr	r3, [r3, #4]
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002c12:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
		if(usbd_composite_class_data[index].pClass->EP0_RxReady){
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	b11b      	cbz	r3, 8002c22 <USBD_COMPOSITE_EP0_RxReady+0x42>
			status|=usbd_composite_class_data[index].pClass->EP0_RxReady(pdev);
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	4798      	blx	r3
 8002c1e:	4304      	orrs	r4, r0
 8002c20:	b2e4      	uxtb	r4, r4
		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8002c22:	2350      	movs	r3, #80	; 0x50
 8002c24:	fb03 8307 	mla	r3, r3, r7, r8
 8002c28:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 8002c2c:	609a      	str	r2, [r3, #8]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002c2e:	f8d5 221c 	ldr.w	r2, [r5, #540]	; 0x21c
 8002c32:	60da      	str	r2, [r3, #12]
 8002c34:	3601      	adds	r6, #1
 8002c36:	e7dc      	b.n	8002bf2 <USBD_COMPOSITE_EP0_RxReady+0x12>
 8002c38:	20001047 	.word	0x20001047
 8002c3c:	20006334 	.word	0x20006334

08002c40 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_COMPOSITE_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8002c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t status=USBD_OK;
	uint8_t index;
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002c44:	2600      	movs	r6, #0
 8002c46:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8002c98 <USBD_COMPOSITE_EP0_TxReady+0x58>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002c4a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8002c9c <USBD_COMPOSITE_EP0_TxReady+0x5c>
{
 8002c4e:	4605      	mov	r5, r0
	uint8_t status=USBD_OK;
 8002c50:	4634      	mov	r4, r6
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002c52:	f899 3000 	ldrb.w	r3, [r9]
 8002c56:	b2f7      	uxtb	r7, r6
 8002c58:	42bb      	cmp	r3, r7
 8002c5a:	d802      	bhi.n	8002c62 <USBD_COMPOSITE_EP0_TxReady+0x22>

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
	}
	return status;
}
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002c62:	2350      	movs	r3, #80	; 0x50
 8002c64:	fb03 8307 	mla	r3, r3, r7, r8
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	f8c5 2218 	str.w	r2, [r5, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002c6e:	68da      	ldr	r2, [r3, #12]
		if(usbd_composite_class_data[index].pClass->EP0_TxSent){
 8002c70:	685b      	ldr	r3, [r3, #4]
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002c72:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
		if(usbd_composite_class_data[index].pClass->EP0_TxSent){
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	b11b      	cbz	r3, 8002c82 <USBD_COMPOSITE_EP0_TxReady+0x42>
			status|=usbd_composite_class_data[index].pClass->EP0_TxSent(pdev);
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	4798      	blx	r3
 8002c7e:	4304      	orrs	r4, r0
 8002c80:	b2e4      	uxtb	r4, r4
		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8002c82:	2350      	movs	r3, #80	; 0x50
 8002c84:	fb03 8307 	mla	r3, r3, r7, r8
 8002c88:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 8002c8c:	609a      	str	r2, [r3, #8]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002c8e:	f8d5 221c 	ldr.w	r2, [r5, #540]	; 0x21c
 8002c92:	60da      	str	r2, [r3, #12]
 8002c94:	3601      	adds	r6, #1
 8002c96:	e7dc      	b.n	8002c52 <USBD_COMPOSITE_EP0_TxReady+0x12>
 8002c98:	20001047 	.word	0x20001047
 8002c9c:	20006334 	.word	0x20006334

08002ca0 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_COMPOSITE_SOF (USBD_HandleTypeDef *pdev)
{
 8002ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t status=USBD_OK;
	uint8_t index;
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002ca4:	2600      	movs	r6, #0
 8002ca6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8002cf8 <USBD_COMPOSITE_SOF+0x58>
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002caa:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8002cfc <USBD_COMPOSITE_SOF+0x5c>
{
 8002cae:	4605      	mov	r5, r0
	uint8_t status=USBD_OK;
 8002cb0:	4634      	mov	r4, r6
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002cb2:	f899 3000 	ldrb.w	r3, [r9]
 8002cb6:	b2f7      	uxtb	r7, r6
 8002cb8:	42bb      	cmp	r3, r7
 8002cba:	d802      	bhi.n	8002cc2 <USBD_COMPOSITE_SOF+0x22>

		usbd_composite_class_data[index].pClassData=pdev->pClassData;
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
	}
	return status;
}
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002cc2:	2350      	movs	r3, #80	; 0x50
 8002cc4:	fb03 8307 	mla	r3, r3, r7, r8
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	f8c5 2218 	str.w	r2, [r5, #536]	; 0x218
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002cce:	68da      	ldr	r2, [r3, #12]
		if(usbd_composite_class_data[index].pClass->SOF){
 8002cd0:	685b      	ldr	r3, [r3, #4]
		pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002cd2:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
		if(usbd_composite_class_data[index].pClass->SOF){
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	b11b      	cbz	r3, 8002ce2 <USBD_COMPOSITE_SOF+0x42>
			status|=usbd_composite_class_data[index].pClass->SOF(pdev);
 8002cda:	4628      	mov	r0, r5
 8002cdc:	4798      	blx	r3
 8002cde:	4304      	orrs	r4, r0
 8002ce0:	b2e4      	uxtb	r4, r4
		usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8002ce2:	2350      	movs	r3, #80	; 0x50
 8002ce4:	fb03 8307 	mla	r3, r3, r7, r8
 8002ce8:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 8002cec:	609a      	str	r2, [r3, #8]
		usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002cee:	f8d5 221c 	ldr.w	r2, [r5, #540]	; 0x21c
 8002cf2:	60da      	str	r2, [r3, #12]
 8002cf4:	3601      	adds	r6, #1
 8002cf6:	e7dc      	b.n	8002cb2 <USBD_COMPOSITE_SOF+0x12>
 8002cf8:	20001047 	.word	0x20001047
 8002cfc:	20006334 	.word	0x20006334

08002d00 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_COMPOSITE_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8002d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t status=USBD_OK;
	uint8_t index=0;
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002d02:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <USBD_COMPOSITE_IsoINIncomplete+0x70>)
{
 8002d04:	4605      	mov	r5, r0
 8002d06:	481b      	ldr	r0, [pc, #108]	; (8002d74 <USBD_COMPOSITE_IsoINIncomplete+0x74>)
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002d08:	f893 e000 	ldrb.w	lr, [r3]
 8002d0c:	2400      	movs	r4, #0
 8002d0e:	4606      	mov	r6, r0
 8002d10:	b2e3      	uxtb	r3, r4
 8002d12:	459e      	cmp	lr, r3
 8002d14:	d92a      	bls.n	8002d6c <USBD_COMPOSITE_IsoINIncomplete+0x6c>
		uint8_t i=0;
		for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 8002d16:	7c07      	ldrb	r7, [r0, #16]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	b2d3      	uxtb	r3, r2
 8002d1c:	429f      	cmp	r7, r3
 8002d1e:	d802      	bhi.n	8002d26 <USBD_COMPOSITE_IsoINIncomplete+0x26>
 8002d20:	3401      	adds	r4, #1
 8002d22:	3050      	adds	r0, #80	; 0x50
 8002d24:	e7f4      	b.n	8002d10 <USBD_COMPOSITE_IsoINIncomplete+0x10>
			if(usbd_composite_class_data[index].inEPa[i]==epnum){
 8002d26:	4694      	mov	ip, r2
 8002d28:	3201      	adds	r2, #1
 8002d2a:	1883      	adds	r3, r0, r2
 8002d2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002d30:	428b      	cmp	r3, r1
 8002d32:	d1f2      	bne.n	8002d1a <USBD_COMPOSITE_IsoINIncomplete+0x1a>
				pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002d34:	2350      	movs	r3, #80	; 0x50
 8002d36:	fb03 6304 	mla	r3, r3, r4, r6
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	f8c5 2218 	str.w	r2, [r5, #536]	; 0x218
				pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c

				if(usbd_composite_class_data[index].pClass->IsoINIncomplete){
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	6a12      	ldr	r2, [r2, #32]
 8002d4a:	b16a      	cbz	r2, 8002d68 <USBD_COMPOSITE_IsoINIncomplete+0x68>
					status|=usbd_composite_class_data[index].pClass->IsoINIncomplete(pdev, usbd_composite_class_data[index].inEPn[i]);
 8002d4c:	4463      	add	r3, ip
 8002d4e:	4628      	mov	r0, r5
 8002d50:	7c99      	ldrb	r1, [r3, #18]
 8002d52:	4790      	blx	r2
				}

				usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8002d54:	2350      	movs	r3, #80	; 0x50
 8002d56:	fb03 6404 	mla	r4, r3, r4, r6
 8002d5a:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8002d5e:	60a3      	str	r3, [r4, #8]
				usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002d60:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002d64:	60e3      	str	r3, [r4, #12]
				return status;
 8002d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t status=USBD_OK;
 8002d68:	4610      	mov	r0, r2
 8002d6a:	e7f3      	b.n	8002d54 <USBD_COMPOSITE_IsoINIncomplete+0x54>
			}
		}
	}
	return status;
 8002d6c:	2000      	movs	r0, #0
}
 8002d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d70:	20001047 	.word	0x20001047
 8002d74:	20006334 	.word	0x20006334

08002d78 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_COMPOSITE_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint8_t status=USBD_OK;
	uint8_t index=0;
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002d7a:	4b1c      	ldr	r3, [pc, #112]	; (8002dec <USBD_COMPOSITE_IsoOutIncomplete+0x74>)
{
 8002d7c:	4605      	mov	r5, r0
 8002d7e:	481c      	ldr	r0, [pc, #112]	; (8002df0 <USBD_COMPOSITE_IsoOutIncomplete+0x78>)
	for(index=0;index<usbd_composite_pClass_count;index++){
 8002d80:	f893 e000 	ldrb.w	lr, [r3]
 8002d84:	2400      	movs	r4, #0
 8002d86:	4606      	mov	r6, r0
 8002d88:	b2e3      	uxtb	r3, r4
 8002d8a:	459e      	cmp	lr, r3
 8002d8c:	d92b      	bls.n	8002de6 <USBD_COMPOSITE_IsoOutIncomplete+0x6e>
		uint8_t i=0;
		for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 8002d8e:	7c47      	ldrb	r7, [r0, #17]
 8002d90:	2200      	movs	r2, #0
 8002d92:	b2d3      	uxtb	r3, r2
 8002d94:	429f      	cmp	r7, r3
 8002d96:	d802      	bhi.n	8002d9e <USBD_COMPOSITE_IsoOutIncomplete+0x26>
 8002d98:	3401      	adds	r4, #1
 8002d9a:	3050      	adds	r0, #80	; 0x50
 8002d9c:	e7f4      	b.n	8002d88 <USBD_COMPOSITE_IsoOutIncomplete+0x10>
			if(usbd_composite_class_data[index].outEPa[i]==epnum){
 8002d9e:	4694      	mov	ip, r2
 8002da0:	3201      	adds	r2, #1
 8002da2:	1883      	adds	r3, r0, r2
 8002da4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002da8:	428b      	cmp	r3, r1
 8002daa:	d1f2      	bne.n	8002d92 <USBD_COMPOSITE_IsoOutIncomplete+0x1a>
				pdev->pClassData=usbd_composite_class_data[index].pClassData;
 8002dac:	2350      	movs	r3, #80	; 0x50
 8002dae:	fb03 6304 	mla	r3, r3, r4, r6
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	f8c5 2218 	str.w	r2, [r5, #536]	; 0x218
				pdev->pUserData=usbd_composite_class_data[index].pUserData;
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c

				if(usbd_composite_class_data[index].pClass->IsoOUTIncomplete){
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dc2:	b172      	cbz	r2, 8002de2 <USBD_COMPOSITE_IsoOutIncomplete+0x6a>
					status|=usbd_composite_class_data[index].pClass->IsoOUTIncomplete(pdev, usbd_composite_class_data[index].outEPn[i]);
 8002dc4:	4463      	add	r3, ip
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8002dcc:	4790      	blx	r2
				}

				usbd_composite_class_data[index].pClassData=pdev->pClassData;
 8002dce:	2350      	movs	r3, #80	; 0x50
 8002dd0:	fb03 6404 	mla	r4, r3, r4, r6
 8002dd4:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8002dd8:	60a3      	str	r3, [r4, #8]
				usbd_composite_class_data[index].pUserData=pdev->pUserData;
 8002dda:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002dde:	60e3      	str	r3, [r4, #12]
				return status;
 8002de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t status=USBD_OK;
 8002de2:	4610      	mov	r0, r2
 8002de4:	e7f3      	b.n	8002dce <USBD_COMPOSITE_IsoOutIncomplete+0x56>
			}
		}
	}
	return status;
 8002de6:	2000      	movs	r0, #0
}
 8002de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20001047 	.word	0x20001047
 8002df0:	20006334 	.word	0x20006334

08002df4 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_COMPOSITE_GetFSCfgDesc (uint16_t *length)
{
	*length=descriptor_size;
 8002df4:	4b02      	ldr	r3, [pc, #8]	; (8002e00 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0xc>)
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	8003      	strh	r3, [r0, #0]
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_COMPOSITE_GetOtherSpeedCfgDesc (uint16_t *length)
{
	return USBD_COMPOSITE_GetFSCfgDesc(length);
}
 8002dfa:	4802      	ldr	r0, [pc, #8]	; (8002e04 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x10>)
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20001044 	.word	0x20001044
 8002e04:	20000c44 	.word	0x20000c44

08002e08 <USBD_COMPOSITE_GetDeviceQualifierDescriptor>:
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
uint8_t  *USBD_COMPOSITE_GetDeviceQualifierDescriptor (uint16_t *length)
{
	*length = sizeof (USBD_COMPOSITE_DeviceQualifierDesc);
 8002e08:	230a      	movs	r3, #10
 8002e0a:	8003      	strh	r3, [r0, #0]
	return USBD_COMPOSITE_DeviceQualifierDesc;
}
 8002e0c:	4800      	ldr	r0, [pc, #0]	; (8002e10 <USBD_COMPOSITE_GetDeviceQualifierDescriptor+0x8>)
 8002e0e:	4770      	bx	lr
 8002e10:	20000090 	.word	0x20000090

08002e14 <USBD_COMPOSITE_GetHSCfgDesc>:
 8002e14:	4b02      	ldr	r3, [pc, #8]	; (8002e20 <USBD_COMPOSITE_GetHSCfgDesc+0xc>)
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	8003      	strh	r3, [r0, #0]
 8002e1a:	4802      	ldr	r0, [pc, #8]	; (8002e24 <USBD_COMPOSITE_GetHSCfgDesc+0x10>)
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20001044 	.word	0x20001044
 8002e24:	20000c44 	.word	0x20000c44

08002e28 <USBD_COMPOSITE_GetFSCfgDesc>:
 8002e28:	4b02      	ldr	r3, [pc, #8]	; (8002e34 <USBD_COMPOSITE_GetFSCfgDesc+0xc>)
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	8003      	strh	r3, [r0, #0]
 8002e2e:	4802      	ldr	r0, [pc, #8]	; (8002e38 <USBD_COMPOSITE_GetFSCfgDesc+0x10>)
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20001044 	.word	0x20001044
 8002e38:	20000c44 	.word	0x20000c44

08002e3c <USBD_COMPOSITE_RegisterClass>:

USBD_StatusTypeDef  USBD_COMPOSITE_RegisterClass(USBD_HandleTypeDef *pdev, uint8_t bFunctionClass, uint8_t bFunctionSubClass, uint8_t bFunctionProtocol){
 8002e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	USBD_StatusTypeDef   status = USBD_OK;
	uint8_t lastIfc=-1;
	if(descriptor_size==0){
 8002e40:	4c72      	ldr	r4, [pc, #456]	; (800300c <USBD_COMPOSITE_RegisterClass+0x1d0>)
USBD_StatusTypeDef  USBD_COMPOSITE_RegisterClass(USBD_HandleTypeDef *pdev, uint8_t bFunctionClass, uint8_t bFunctionSubClass, uint8_t bFunctionProtocol){
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	4681      	mov	r9, r0
 8002e46:	9303      	str	r3, [sp, #12]
	if(descriptor_size==0){
 8002e48:	8823      	ldrh	r3, [r4, #0]
USBD_StatusTypeDef  USBD_COMPOSITE_RegisterClass(USBD_HandleTypeDef *pdev, uint8_t bFunctionClass, uint8_t bFunctionSubClass, uint8_t bFunctionProtocol){
 8002e4a:	9101      	str	r1, [sp, #4]
 8002e4c:	9202      	str	r2, [sp, #8]
	if(descriptor_size==0){
 8002e4e:	b943      	cbnz	r3, 8002e62 <USBD_COMPOSITE_RegisterClass+0x26>
		USBD_memcpy(descriptor, USBD_COMPOSITE_CfgFSDesc, USB_COMPOSITE_CONFIG_DESC_SIZ);
 8002e50:	4b6f      	ldr	r3, [pc, #444]	; (8003010 <USBD_COMPOSITE_RegisterClass+0x1d4>)
 8002e52:	4a70      	ldr	r2, [pc, #448]	; (8003014 <USBD_COMPOSITE_RegisterClass+0x1d8>)
 8002e54:	cb03      	ldmia	r3!, {r0, r1}
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	7213      	strb	r3, [r2, #8]
		descriptor_size+=USB_COMPOSITE_CONFIG_DESC_SIZ;
 8002e5a:	2309      	movs	r3, #9
		USBD_memcpy(descriptor, USBD_COMPOSITE_CfgFSDesc, USB_COMPOSITE_CONFIG_DESC_SIZ);
 8002e5c:	6010      	str	r0, [r2, #0]
 8002e5e:	6051      	str	r1, [r2, #4]
		descriptor_size+=USB_COMPOSITE_CONFIG_DESC_SIZ;
 8002e60:	8023      	strh	r3, [r4, #0]
	}

	if(pdev->pClass != 0 && pdev->pClass != &USBD_COMPOSITE && usbd_composite_pClass_count<USB_COMPOSITE_MAX_CLASSES)
 8002e62:	f8d9 1214 	ldr.w	r1, [r9, #532]	; 0x214
 8002e66:	2900      	cmp	r1, #0
 8002e68:	f000 80ce 	beq.w	8003008 <USBD_COMPOSITE_RegisterClass+0x1cc>
 8002e6c:	4b6a      	ldr	r3, [pc, #424]	; (8003018 <USBD_COMPOSITE_RegisterClass+0x1dc>)
 8002e6e:	4299      	cmp	r1, r3
 8002e70:	f000 80ca 	beq.w	8003008 <USBD_COMPOSITE_RegisterClass+0x1cc>
 8002e74:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003024 <USBD_COMPOSITE_RegisterClass+0x1e8>
 8002e78:	f898 3000 	ldrb.w	r3, [r8]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	f200 80c3 	bhi.w	8003008 <USBD_COMPOSITE_RegisterClass+0x1cc>
	{
		/* link the class to the USB Device handle */
		usbd_composite_class_data[usbd_composite_pClass_count].bFunctionClass=bFunctionClass;
 8002e82:	4866      	ldr	r0, [pc, #408]	; (800301c <USBD_COMPOSITE_RegisterClass+0x1e0>)
 8002e84:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8002e88:	4e62      	ldr	r6, [pc, #392]	; (8003014 <USBD_COMPOSITE_RegisterClass+0x1d8>)
 8002e8a:	4f65      	ldr	r7, [pc, #404]	; (8003020 <USBD_COMPOSITE_RegisterClass+0x1e4>)
 8002e8c:	2250      	movs	r2, #80	; 0x50
 8002e8e:	435a      	muls	r2, r3
 8002e90:	1883      	adds	r3, r0, r2
 8002e92:	5485      	strb	r5, [r0, r2]
		usbd_composite_class_data[usbd_composite_pClass_count].bFunctionSubClass=bFunctionSubClass;
 8002e94:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002e98:	705a      	strb	r2, [r3, #1]
		usbd_composite_class_data[usbd_composite_pClass_count].bFunctionProtocol=bFunctionProtocol;
 8002e9a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002e9e:	709a      	strb	r2, [r3, #2]
		usbd_composite_class_data[usbd_composite_pClass_count].pClass=pdev->pClass;
		usbd_composite_class_data[usbd_composite_pClass_count].pClassData=pdev->pClassData;
 8002ea0:	f8d9 2218 	ldr.w	r2, [r9, #536]	; 0x218
 8002ea4:	609a      	str	r2, [r3, #8]
		usbd_composite_class_data[usbd_composite_pClass_count].pUserData=pdev->pUserData;
 8002ea6:	f8d9 221c 	ldr.w	r2, [r9, #540]	; 0x21c
		usbd_composite_class_data[usbd_composite_pClass_count].pClass=pdev->pClass;
 8002eaa:	6059      	str	r1, [r3, #4]
		usbd_composite_class_data[usbd_composite_pClass_count].pUserData=pdev->pUserData;
 8002eac:	60da      	str	r2, [r3, #12]

		uint16_t length_temp;
		uint8_t *descriptor_temp=usbd_composite_class_data[usbd_composite_pClass_count].pClass->GetFSConfigDescriptor(&length_temp);
 8002eae:	f10d 001e 	add.w	r0, sp, #30
 8002eb2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002eb4:	4798      	blx	r3
		uint8_t *descriptor_end=descriptor_temp+length_temp;
 8002eb6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8002eba:	18c3      	adds	r3, r0, r3
		uint8_t *descriptor_temp=usbd_composite_class_data[usbd_composite_pClass_count].pClass->GetFSConfigDescriptor(&length_temp);
 8002ebc:	4605      	mov	r5, r0
		uint8_t *descriptor_end=descriptor_temp+length_temp;
 8002ebe:	9304      	str	r3, [sp, #16]
	uint8_t lastIfc=-1;
 8002ec0:	f04f 0bff 	mov.w	fp, #255	; 0xff
		USBD_COMPOSITE_ItfAssocDescriptor *itfAssocDescriptor;

		while(descriptor_temp<descriptor_end){
 8002ec4:	9b04      	ldr	r3, [sp, #16]
 8002ec6:	429d      	cmp	r5, r3
 8002ec8:	d311      	bcc.n	8002eee <USBD_COMPOSITE_RegisterClass+0xb2>
			default:
				break;
			}
		}

		descriptor[2]=LOBYTE(descriptor_size);		//Update Config Descritor Total Size
 8002eca:	8823      	ldrh	r3, [r4, #0]
 8002ecc:	70b3      	strb	r3, [r6, #2]
		descriptor[3]=HIBYTE(descriptor_size);	//Update Config Descritor Total Size
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	70f3      	strb	r3, [r6, #3]
		descriptor[4]=itf_num;			//Update the total interface count
 8002ed2:	4b53      	ldr	r3, [pc, #332]	; (8003020 <USBD_COMPOSITE_RegisterClass+0x1e4>)

		usbd_composite_pClass_count++;
 8002ed4:	4a53      	ldr	r2, [pc, #332]	; (8003024 <USBD_COMPOSITE_RegisterClass+0x1e8>)
		descriptor[4]=itf_num;			//Update the total interface count
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	7133      	strb	r3, [r6, #4]
		usbd_composite_pClass_count++;
 8002eda:	7813      	ldrb	r3, [r2, #0]
 8002edc:	3301      	adds	r3, #1
 8002ede:	7013      	strb	r3, [r2, #0]
		pdev->pClass = &USBD_COMPOSITE;
 8002ee0:	4b4d      	ldr	r3, [pc, #308]	; (8003018 <USBD_COMPOSITE_RegisterClass+0x1dc>)
 8002ee2:	f8c9 3214 	str.w	r3, [r9, #532]	; 0x214

		status = USBD_OK;
 8002ee6:	2000      	movs	r0, #0
		USBD_ErrLog("Invalid Class handle");
		status = USBD_FAIL;
	}

	return status;
}
 8002ee8:	b009      	add	sp, #36	; 0x24
 8002eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *descriptor_current=descriptor+descriptor_size;
 8002eee:	f8b4 a000 	ldrh.w	sl, [r4]
			USBD_memcpy(descriptor_current, descriptor_temp, descriptor_temp[0]);
 8002ef2:	782a      	ldrb	r2, [r5, #0]
			uint8_t *descriptor_current=descriptor+descriptor_size;
 8002ef4:	eb06 030a 	add.w	r3, r6, sl
			USBD_memcpy(descriptor_current, descriptor_temp, descriptor_temp[0]);
 8002ef8:	4629      	mov	r1, r5
 8002efa:	4618      	mov	r0, r3
 8002efc:	f006 f9b9 	bl	8009272 <memcpy>
			descriptor_size+=descriptor_temp[0];
 8002f00:	7829      	ldrb	r1, [r5, #0]
			switch(descriptor_current[1]){
 8002f02:	7842      	ldrb	r2, [r0, #1]
			descriptor_size+=descriptor_temp[0];
 8002f04:	eb0a 0e01 	add.w	lr, sl, r1
 8002f08:	fa1f fe8e 	uxth.w	lr, lr
			switch(descriptor_current[1]){
 8002f0c:	2a04      	cmp	r2, #4
			USBD_memcpy(descriptor_current, descriptor_temp, descriptor_temp[0]);
 8002f0e:	4603      	mov	r3, r0
			descriptor_size+=descriptor_temp[0];
 8002f10:	f8a4 e000 	strh.w	lr, [r4]
			descriptor_temp+=descriptor_temp[0];
 8002f14:	440d      	add	r5, r1
			switch(descriptor_current[1]){
 8002f16:	d031      	beq.n	8002f7c <USBD_COMPOSITE_RegisterClass+0x140>
 8002f18:	d820      	bhi.n	8002f5c <USBD_COMPOSITE_RegisterClass+0x120>
 8002f1a:	2a02      	cmp	r2, #2
 8002f1c:	d1d2      	bne.n	8002ec4 <USBD_COMPOSITE_RegisterClass+0x88>
				itf_num_temp=descriptor_current[4];
 8002f1e:	7902      	ldrb	r2, [r0, #4]
 8002f20:	9205      	str	r2, [sp, #20]
				USBD_memcpy(descriptor_current, USBD_COMPOSITE_IfcAssocDesc, USB_COMPOSITE_IFC_ASSOC_DESC_SIZ);
 8002f22:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8003030 <USBD_COMPOSITE_RegisterClass+0x1f4>
				descriptor_size-=descriptor_current[0];
 8002f26:	f816 200a 	ldrb.w	r2, [r6, sl]
				USBD_memcpy(descriptor_current, USBD_COMPOSITE_IfcAssocDesc, USB_COMPOSITE_IFC_ASSOC_DESC_SIZ);
 8002f2a:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8002f2e:	f1c2 0208 	rsb	r2, r2, #8
				descriptor_size+=USB_COMPOSITE_IFC_ASSOC_DESC_SIZ;
 8002f32:	fa1e f282 	uxtah	r2, lr, r2
 8002f36:	8022      	strh	r2, [r4, #0]
				itfAssocDescriptor->bFirstInterface=itf_num;													//Use next available interface
 8002f38:	783a      	ldrb	r2, [r7, #0]
				USBD_memcpy(descriptor_current, USBD_COMPOSITE_IfcAssocDesc, USB_COMPOSITE_IFC_ASSOC_DESC_SIZ);
 8002f3a:	f846 000a 	str.w	r0, [r6, sl]
				itfAssocDescriptor->bFirstInterface=itf_num;													//Use next available interface
 8002f3e:	709a      	strb	r2, [r3, #2]
				itfAssocDescriptor->bInterfaceCount=itf_num_temp;
 8002f40:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002f44:	70da      	strb	r2, [r3, #3]
				itfAssocDescriptor->bFunctionClass=bFunctionClass;
 8002f46:	f89d 2004 	ldrb.w	r2, [sp, #4]
				USBD_memcpy(descriptor_current, USBD_COMPOSITE_IfcAssocDesc, USB_COMPOSITE_IFC_ASSOC_DESC_SIZ);
 8002f4a:	6059      	str	r1, [r3, #4]
				itfAssocDescriptor->bFunctionClass=bFunctionClass;
 8002f4c:	711a      	strb	r2, [r3, #4]
				itfAssocDescriptor->bFunctionSubClass=bFunctionSubClass;
 8002f4e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002f52:	715a      	strb	r2, [r3, #5]
				itfAssocDescriptor->bFunctionProtocol=bFunctionProtocol;
 8002f54:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002f58:	719a      	strb	r2, [r3, #6]
				break;
 8002f5a:	e7b3      	b.n	8002ec4 <USBD_COMPOSITE_RegisterClass+0x88>
			switch(descriptor_current[1]){
 8002f5c:	2a05      	cmp	r2, #5
 8002f5e:	d022      	beq.n	8002fa6 <USBD_COMPOSITE_RegisterClass+0x16a>
 8002f60:	2a24      	cmp	r2, #36	; 0x24
 8002f62:	d1af      	bne.n	8002ec4 <USBD_COMPOSITE_RegisterClass+0x88>
				switch(descriptor_current[2]){
 8002f64:	7882      	ldrb	r2, [r0, #2]
 8002f66:	2a01      	cmp	r2, #1
 8002f68:	d048      	beq.n	8002ffc <USBD_COMPOSITE_RegisterClass+0x1c0>
 8002f6a:	2a06      	cmp	r2, #6
 8002f6c:	d1aa      	bne.n	8002ec4 <USBD_COMPOSITE_RegisterClass+0x88>
 8002f6e:	783a      	ldrb	r2, [r7, #0]
					descriptor_current[3]=itf_num-1+descriptor_current[3];
 8002f70:	78c1      	ldrb	r1, [r0, #3]
 8002f72:	3a01      	subs	r2, #1
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	4411      	add	r1, r2
 8002f78:	70c1      	strb	r1, [r0, #3]
 8002f7a:	e041      	b.n	8003000 <USBD_COMPOSITE_RegisterClass+0x1c4>
				if(descriptor_current[2]!=lastIfc){ // Check if same interface different configuration.
 8002f7c:	7881      	ldrb	r1, [r0, #2]
					descriptor_current[2]=itf_num++;
 8002f7e:	783a      	ldrb	r2, [r7, #0]
				if(descriptor_current[2]!=lastIfc){ // Check if same interface different configuration.
 8002f80:	458b      	cmp	fp, r1
 8002f82:	d00d      	beq.n	8002fa0 <USBD_COMPOSITE_RegisterClass+0x164>
					descriptor_current[2]=itf_num++;
 8002f84:	1c50      	adds	r0, r2, #1
 8002f86:	709a      	strb	r2, [r3, #2]
					usbd_composite_class_data[usbd_composite_pClass_count].bInterfaces++;
 8002f88:	4a24      	ldr	r2, [pc, #144]	; (800301c <USBD_COMPOSITE_RegisterClass+0x1e0>)
 8002f8a:	f898 3000 	ldrb.w	r3, [r8]
					descriptor_current[2]=itf_num++;
 8002f8e:	7038      	strb	r0, [r7, #0]
					usbd_composite_class_data[usbd_composite_pClass_count].bInterfaces++;
 8002f90:	2050      	movs	r0, #80	; 0x50
 8002f92:	fb00 2303 	mla	r3, r0, r3, r2
 8002f96:	468b      	mov	fp, r1
 8002f98:	78da      	ldrb	r2, [r3, #3]
 8002f9a:	3201      	adds	r2, #1
 8002f9c:	70da      	strb	r2, [r3, #3]
 8002f9e:	e791      	b.n	8002ec4 <USBD_COMPOSITE_RegisterClass+0x88>
					descriptor_current[2]=itf_num-1;
 8002fa0:	3a01      	subs	r2, #1
					descriptor_current[2]=inEP++ | 0x80;
 8002fa2:	709a      	strb	r2, [r3, #2]
 8002fa4:	e78e      	b.n	8002ec4 <USBD_COMPOSITE_RegisterClass+0x88>
				if(descriptor_current[2] & 0x80) // Check if IN EP
 8002fa6:	7880      	ldrb	r0, [r0, #2]
 8002fa8:	f8df e070 	ldr.w	lr, [pc, #112]	; 800301c <USBD_COMPOSITE_RegisterClass+0x1e0>
					usbd_composite_class_data[usbd_composite_pClass_count].inEPn[usbd_composite_class_data[usbd_composite_pClass_count].inEP]=descriptor_current[2] & 0x7F;
 8002fac:	f898 1000 	ldrb.w	r1, [r8]
 8002fb0:	2250      	movs	r2, #80	; 0x50
				if(descriptor_current[2] & 0x80) // Check if IN EP
 8002fb2:	f010 0f80 	tst.w	r0, #128	; 0x80
					usbd_composite_class_data[usbd_composite_pClass_count].inEPn[usbd_composite_class_data[usbd_composite_pClass_count].inEP]=descriptor_current[2] & 0x7F;
 8002fb6:	fb02 e201 	mla	r2, r2, r1, lr
				if(descriptor_current[2] & 0x80) // Check if IN EP
 8002fba:	d011      	beq.n	8002fe0 <USBD_COMPOSITE_RegisterClass+0x1a4>
					usbd_composite_class_data[usbd_composite_pClass_count].inEPn[usbd_composite_class_data[usbd_composite_pClass_count].inEP]=descriptor_current[2] & 0x7F;
 8002fbc:	7c11      	ldrb	r1, [r2, #16]
 8002fbe:	eb02 0e01 	add.w	lr, r2, r1
					usbd_composite_class_data[usbd_composite_pClass_count].inEPa[usbd_composite_class_data[usbd_composite_pClass_count].inEP++]=inEP;
 8002fc2:	3101      	adds	r1, #1
 8002fc4:	7411      	strb	r1, [r2, #16]
 8002fc6:	4918      	ldr	r1, [pc, #96]	; (8003028 <USBD_COMPOSITE_RegisterClass+0x1ec>)
 8002fc8:	780a      	ldrb	r2, [r1, #0]
 8002fca:	f88e 2030 	strb.w	r2, [lr, #48]	; 0x30
					usbd_composite_class_data[usbd_composite_pClass_count].inEPn[usbd_composite_class_data[usbd_composite_pClass_count].inEP]=descriptor_current[2] & 0x7F;
 8002fce:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002fd2:	f88e 0012 	strb.w	r0, [lr, #18]
					descriptor_current[2]=inEP++ | 0x80;
 8002fd6:	1c50      	adds	r0, r2, #1
 8002fd8:	7008      	strb	r0, [r1, #0]
 8002fda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fde:	e7e0      	b.n	8002fa2 <USBD_COMPOSITE_RegisterClass+0x166>
					usbd_composite_class_data[usbd_composite_pClass_count].outEPn[usbd_composite_class_data[usbd_composite_pClass_count].outEP]=descriptor_current[2] & 0x7F;
 8002fe0:	7c51      	ldrb	r1, [r2, #17]
 8002fe2:	eb02 0e01 	add.w	lr, r2, r1
					usbd_composite_class_data[usbd_composite_pClass_count].outEPa[usbd_composite_class_data[usbd_composite_pClass_count].outEP++]=outEP;
 8002fe6:	3101      	adds	r1, #1
 8002fe8:	7451      	strb	r1, [r2, #17]
 8002fea:	4910      	ldr	r1, [pc, #64]	; (800302c <USBD_COMPOSITE_RegisterClass+0x1f0>)
					usbd_composite_class_data[usbd_composite_pClass_count].outEPn[usbd_composite_class_data[usbd_composite_pClass_count].outEP]=descriptor_current[2] & 0x7F;
 8002fec:	f88e 0021 	strb.w	r0, [lr, #33]	; 0x21
					usbd_composite_class_data[usbd_composite_pClass_count].outEPa[usbd_composite_class_data[usbd_composite_pClass_count].outEP++]=outEP;
 8002ff0:	780a      	ldrb	r2, [r1, #0]
 8002ff2:	f88e 203f 	strb.w	r2, [lr, #63]	; 0x3f
					descriptor_current[2]=outEP++;
 8002ff6:	1c50      	adds	r0, r2, #1
 8002ff8:	7008      	strb	r0, [r1, #0]
 8002ffa:	e7d2      	b.n	8002fa2 <USBD_COMPOSITE_RegisterClass+0x166>
					descriptor_current[4]=itf_num-1+descriptor_current[4];
 8002ffc:	783a      	ldrb	r2, [r7, #0]
 8002ffe:	3a01      	subs	r2, #1
					descriptor_current[4]=itf_num-1+descriptor_current[4];
 8003000:	7919      	ldrb	r1, [r3, #4]
 8003002:	440a      	add	r2, r1
 8003004:	711a      	strb	r2, [r3, #4]
					break;
 8003006:	e75d      	b.n	8002ec4 <USBD_COMPOSITE_RegisterClass+0x88>
		status = USBD_FAIL;
 8003008:	2002      	movs	r0, #2
 800300a:	e76d      	b.n	8002ee8 <USBD_COMPOSITE_RegisterClass+0xac>
 800300c:	20001044 	.word	0x20001044
 8003010:	20000084 	.word	0x20000084
 8003014:	20000c44 	.word	0x20000c44
 8003018:	2000004c 	.word	0x2000004c
 800301c:	20006334 	.word	0x20006334
 8003020:	20001046 	.word	0x20001046
 8003024:	20001047 	.word	0x20001047
 8003028:	200000a4 	.word	0x200000a4
 800302c:	200000a5 	.word	0x200000a5
 8003030:	2000009c 	.word	0x2000009c

08003034 <USBD_COMPOSITE_LL_EP_Conversion>:

uint8_t  USBD_COMPOSITE_LL_EP_Conversion  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr){
 8003034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t index=0;
	uint8_t i=0;
	if((ep_addr & 0x7f)==0){
 8003038:	f011 0e7f 	ands.w	lr, r1, #127	; 0x7f
 800303c:	d044      	beq.n	80030c8 <USBD_COMPOSITE_LL_EP_Conversion+0x94>
		return ep_addr;
	}
	for(index=0;index<usbd_composite_pClass_count;index++){
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <USBD_COMPOSITE_LL_EP_Conversion+0x9c>)
 8003040:	781e      	ldrb	r6, [r3, #0]
 8003042:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <USBD_COMPOSITE_LL_EP_Conversion+0xa0>)
 8003044:	2200      	movs	r2, #0
 8003046:	461d      	mov	r5, r3
		if(pdev->pClassData==usbd_composite_class_data[index].pClassData && pdev->pUserData==usbd_composite_class_data[index].pUserData){
			if(ep_addr & 0x80){
 8003048:	fa4f fc81 	sxtb.w	ip, r1
	for(index=0;index<usbd_composite_pClass_count;index++){
 800304c:	b2d4      	uxtb	r4, r2
 800304e:	42a6      	cmp	r6, r4
 8003050:	d93a      	bls.n	80030c8 <USBD_COMPOSITE_LL_EP_Conversion+0x94>
		if(pdev->pClassData==usbd_composite_class_data[index].pClassData && pdev->pUserData==usbd_composite_class_data[index].pUserData){
 8003052:	f8d0 7218 	ldr.w	r7, [r0, #536]	; 0x218
 8003056:	689c      	ldr	r4, [r3, #8]
 8003058:	42a7      	cmp	r7, r4
 800305a:	d122      	bne.n	80030a2 <USBD_COMPOSITE_LL_EP_Conversion+0x6e>
 800305c:	f8d0 721c 	ldr.w	r7, [r0, #540]	; 0x21c
 8003060:	68dc      	ldr	r4, [r3, #12]
 8003062:	42a7      	cmp	r7, r4
 8003064:	d11d      	bne.n	80030a2 <USBD_COMPOSITE_LL_EP_Conversion+0x6e>
			if(ep_addr & 0x80){
 8003066:	f1bc 0f00 	cmp.w	ip, #0
 800306a:	db14      	blt.n	8003096 <USBD_COMPOSITE_LL_EP_Conversion+0x62>
					if(usbd_composite_class_data[index].inEPn[i]==(ep_addr & 0x7f)){
						return usbd_composite_class_data[index].inEPa[i] | 0x80;
					}
				}
			} else {
				for(i=0;i<usbd_composite_class_data[index].outEP;i++){
 800306c:	f893 8011 	ldrb.w	r8, [r3, #17]
 8003070:	2400      	movs	r4, #0
 8003072:	b2e7      	uxtb	r7, r4
 8003074:	45b8      	cmp	r8, r7
 8003076:	d914      	bls.n	80030a2 <USBD_COMPOSITE_LL_EP_Conversion+0x6e>
					if(usbd_composite_class_data[index].outEPn[i]==ep_addr){
 8003078:	4627      	mov	r7, r4
 800307a:	3401      	adds	r4, #1
 800307c:	eb03 0904 	add.w	r9, r3, r4
 8003080:	f899 9020 	ldrb.w	r9, [r9, #32]
 8003084:	4589      	cmp	r9, r1
 8003086:	d1f4      	bne.n	8003072 <USBD_COMPOSITE_LL_EP_Conversion+0x3e>
						return usbd_composite_class_data[index].outEPa[i];
 8003088:	2350      	movs	r3, #80	; 0x50
 800308a:	fb03 5202 	mla	r2, r3, r2, r5
 800308e:	443a      	add	r2, r7
 8003090:	f892 103f 	ldrb.w	r1, [r2, #63]	; 0x3f
 8003094:	e018      	b.n	80030c8 <USBD_COMPOSITE_LL_EP_Conversion+0x94>
				for(i=0;i<usbd_composite_class_data[index].inEP;i++){
 8003096:	f893 8010 	ldrb.w	r8, [r3, #16]
 800309a:	2400      	movs	r4, #0
 800309c:	b2e7      	uxtb	r7, r4
 800309e:	45b8      	cmp	r8, r7
 80030a0:	d802      	bhi.n	80030a8 <USBD_COMPOSITE_LL_EP_Conversion+0x74>
 80030a2:	3201      	adds	r2, #1
 80030a4:	3350      	adds	r3, #80	; 0x50
 80030a6:	e7d1      	b.n	800304c <USBD_COMPOSITE_LL_EP_Conversion+0x18>
					if(usbd_composite_class_data[index].inEPn[i]==(ep_addr & 0x7f)){
 80030a8:	4627      	mov	r7, r4
 80030aa:	3401      	adds	r4, #1
 80030ac:	eb03 0904 	add.w	r9, r3, r4
 80030b0:	f899 9011 	ldrb.w	r9, [r9, #17]
 80030b4:	45f1      	cmp	r9, lr
 80030b6:	d1f1      	bne.n	800309c <USBD_COMPOSITE_LL_EP_Conversion+0x68>
						return usbd_composite_class_data[index].inEPa[i] | 0x80;
 80030b8:	2350      	movs	r3, #80	; 0x50
 80030ba:	fb03 5202 	mla	r2, r3, r2, r5
 80030be:	443a      	add	r2, r7
 80030c0:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 80030c4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
				}
			}
		}
	}
	return ep_addr;
}
 80030c8:	4608      	mov	r0, r1
 80030ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030ce:	bf00      	nop
 80030d0:	20001047 	.word	0x20001047
 80030d4:	20006334 	.word	0x20006334

080030d8 <USBD_RNDIS_DataIn>:
 * @param  epnum: endpoint number
 * @retval status
 */
static uint8_t  USBD_RNDIS_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 80030d8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

	if(pdev->pClassData != NULL)
 80030dc:	b11b      	cbz	r3, 80030e6 <USBD_RNDIS_DataIn+0xe>
	{

		hrndis->TxState = 0;
 80030de:	2000      	movs	r0, #0
 80030e0:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

		return USBD_OK;
 80030e4:	4770      	bx	lr
	}
	else
	{
		return USBD_FAIL;
 80030e6:	2002      	movs	r0, #2
	}
}
 80030e8:	4770      	bx	lr

080030ea <USBD_RNDIS_EP0_RxReady>:
 */
static uint8_t  USBD_RNDIS_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;

	if((pdev->pUserData != NULL) && (hrndis->CmdOpCode != 0xFF))
 80030ea:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{
 80030ee:	b510      	push	{r4, lr}
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 80030f0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
	if((pdev->pUserData != NULL) && (hrndis->CmdOpCode != 0xFF))
 80030f4:	b15b      	cbz	r3, 800310e <USBD_RNDIS_EP0_RxReady+0x24>
 80030f6:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80030fa:	28ff      	cmp	r0, #255	; 0xff
 80030fc:	d007      	beq.n	800310e <USBD_RNDIS_EP0_RxReady+0x24>
	{
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Control(hrndis->CmdOpCode,
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003104:	4621      	mov	r1, r4
 8003106:	4798      	blx	r3
				(uint8_t *)hrndis->data,
				hrndis->CmdLength);
		hrndis->CmdOpCode = 0xFF;
 8003108:	23ff      	movs	r3, #255	; 0xff
 800310a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

	}
	return USBD_OK;
}
 800310e:	2000      	movs	r0, #0
 8003110:	bd10      	pop	{r4, pc}
	...

08003114 <USBD_RNDIS_GetFSCfgDesc>:
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_RNDIS_GetFSCfgDesc (uint16_t *length)
{
	*length = sizeof (USBD_RNDIS_CfgFSDesc);
 8003114:	233e      	movs	r3, #62	; 0x3e
 8003116:	8003      	strh	r3, [r0, #0]
	return USBD_RNDIS_CfgFSDesc;
}
 8003118:	4800      	ldr	r0, [pc, #0]	; (800311c <USBD_RNDIS_GetFSCfgDesc+0x8>)
 800311a:	4770      	bx	lr
 800311c:	200000e0 	.word	0x200000e0

08003120 <USBD_RNDIS_GetHSCfgDesc>:
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_RNDIS_GetHSCfgDesc (uint16_t *length)
{
	*length = sizeof (USBD_RNDIS_CfgHSDesc);
 8003120:	233e      	movs	r3, #62	; 0x3e
 8003122:	8003      	strh	r3, [r0, #0]
	return USBD_RNDIS_CfgHSDesc;
}
 8003124:	4800      	ldr	r0, [pc, #0]	; (8003128 <USBD_RNDIS_GetHSCfgDesc+0x8>)
 8003126:	4770      	bx	lr
 8003128:	20000120 	.word	0x20000120

0800312c <USBD_RNDIS_GetOtherSpeedCfgDesc>:
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t  *USBD_RNDIS_GetOtherSpeedCfgDesc (uint16_t *length)
{
	*length = sizeof (USBD_RNDIS_OtherSpeedCfgDesc);
 800312c:	233e      	movs	r3, #62	; 0x3e
 800312e:	8003      	strh	r3, [r0, #0]
	return USBD_RNDIS_OtherSpeedCfgDesc;
}
 8003130:	4800      	ldr	r0, [pc, #0]	; (8003134 <USBD_RNDIS_GetOtherSpeedCfgDesc+0x8>)
 8003132:	4770      	bx	lr
 8003134:	2000016c 	.word	0x2000016c

08003138 <USBD_RNDIS_GetDeviceQualifierDescriptor>:
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
uint8_t  *USBD_RNDIS_GetDeviceQualifierDescriptor (uint16_t *length)
{
	*length = sizeof (USBD_RNDIS_DeviceQualifierDesc);
 8003138:	230a      	movs	r3, #10
 800313a:	8003      	strh	r3, [r0, #0]
	return USBD_RNDIS_DeviceQualifierDesc;
}
 800313c:	4800      	ldr	r0, [pc, #0]	; (8003140 <USBD_RNDIS_GetDeviceQualifierDescriptor+0x8>)
 800313e:	4770      	bx	lr
 8003140:	20000160 	.word	0x20000160

08003144 <USBD_RNDIS_DataOut>:
{
 8003144:	b538      	push	{r3, r4, r5, lr}
 8003146:	4605      	mov	r5, r0
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 8003148:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
	hrndis->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800314c:	f7ff f902 	bl	8002354 <USBD_LL_GetRxDataSize>
	if(pdev->pClassData != NULL)
 8003150:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
	hrndis->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003154:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
	if(pdev->pClassData != NULL)
 8003158:	b14b      	cbz	r3, 800316e <USBD_RNDIS_DataOut+0x2a>
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Receive(hrndis->RxBuffer, &hrndis->RxLength);
 800315a:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800315e:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003168:	4798      	blx	r3
		return USBD_OK;
 800316a:	2000      	movs	r0, #0
 800316c:	bd38      	pop	{r3, r4, r5, pc}
		return USBD_FAIL;
 800316e:	2002      	movs	r0, #2
}
 8003170:	bd38      	pop	{r3, r4, r5, pc}
	...

08003174 <USBD_RNDIS_Setup>:
{
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003176:	780f      	ldrb	r7, [r1, #0]
 8003178:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 800317c:	4606      	mov	r6, r0
 800317e:	460c      	mov	r4, r1
	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003180:	d023      	beq.n	80031ca <USBD_RNDIS_Setup+0x56>
 8003182:	2b20      	cmp	r3, #32
 8003184:	d119      	bne.n	80031ba <USBD_RNDIS_Setup+0x46>
		if (req->wLength)
 8003186:	88ca      	ldrh	r2, [r1, #6]
 8003188:	784b      	ldrb	r3, [r1, #1]
 800318a:	b1c2      	cbz	r2, 80031be <USBD_RNDIS_Setup+0x4a>
			if (req->bmRequest & 0x80)
 800318c:	0639      	lsls	r1, r7, #24
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 800318e:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
			if (req->bmRequest & 0x80)
 8003192:	d50b      	bpl.n	80031ac <USBD_RNDIS_Setup+0x38>
				((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest, (uint8_t *)hrndis->data, req->wLength);
 8003194:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8003198:	4618      	mov	r0, r3
 800319a:	688f      	ldr	r7, [r1, #8]
 800319c:	4629      	mov	r1, r5
 800319e:	47b8      	blx	r7
				USBD_CtlSendData (pdev, (uint8_t *)hrndis->data, req->wLength);
 80031a0:	88e2      	ldrh	r2, [r4, #6]
 80031a2:	4629      	mov	r1, r5
 80031a4:	4630      	mov	r0, r6
			USBD_CtlSendData (pdev, &ifalt, 1);
 80031a6:	f000 fba2 	bl	80038ee <USBD_CtlSendData>
			break;
 80031aa:	e006      	b.n	80031ba <USBD_RNDIS_Setup+0x46>
				hrndis->CmdOpCode = req->bRequest;
 80031ac:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
				hrndis->CmdLength = req->wLength;
 80031b0:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
				USBD_CtlPrepareRx (pdev, (uint8_t *)hrndis->data, req->wLength);
 80031b4:	4629      	mov	r1, r5
 80031b6:	f000 fbaf 	bl	8003918 <USBD_CtlPrepareRx>
}
 80031ba:	2000      	movs	r0, #0
 80031bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest, (uint8_t*)req, 0);
 80031be:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80031c2:	6884      	ldr	r4, [r0, #8]
 80031c4:	4618      	mov	r0, r3
 80031c6:	47a0      	blx	r4
 80031c8:	e7f7      	b.n	80031ba <USBD_RNDIS_Setup+0x46>
		switch (req->bRequest)
 80031ca:	784b      	ldrb	r3, [r1, #1]
 80031cc:	2b0a      	cmp	r3, #10
 80031ce:	d1f4      	bne.n	80031ba <USBD_RNDIS_Setup+0x46>
			USBD_CtlSendData (pdev, &ifalt, 1);
 80031d0:	2201      	movs	r2, #1
 80031d2:	4901      	ldr	r1, [pc, #4]	; (80031d8 <USBD_RNDIS_Setup+0x64>)
 80031d4:	e7e7      	b.n	80031a6 <USBD_RNDIS_Setup+0x32>
 80031d6:	bf00      	nop
 80031d8:	20001048 	.word	0x20001048

080031dc <USBD_RNDIS_DeInit>:
{
 80031dc:	b510      	push	{r4, lr}
	USBD_LL_CloseEP(pdev,
 80031de:	2181      	movs	r1, #129	; 0x81
{
 80031e0:	4604      	mov	r4, r0
	USBD_LL_CloseEP(pdev,
 80031e2:	f7ff f83b 	bl	800225c <USBD_LL_CloseEP>
	USBD_LL_CloseEP(pdev,
 80031e6:	2101      	movs	r1, #1
 80031e8:	4620      	mov	r0, r4
 80031ea:	f7ff f837 	bl	800225c <USBD_LL_CloseEP>
	USBD_LL_CloseEP(pdev,
 80031ee:	2182      	movs	r1, #130	; 0x82
 80031f0:	4620      	mov	r0, r4
 80031f2:	f7ff f833 	bl	800225c <USBD_LL_CloseEP>
	if(pdev->pClassData != NULL)
 80031f6:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80031fa:	b153      	cbz	r3, 8003212 <USBD_RNDIS_DeInit+0x36>
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->DeInit();
 80031fc:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4798      	blx	r3
		USBD_free(pdev->pClassData);
 8003204:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8003208:	f006 f81c 	bl	8009244 <free>
		pdev->pClassData = NULL;
 800320c:	2300      	movs	r3, #0
 800320e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8003212:	2000      	movs	r0, #0
 8003214:	bd10      	pop	{r4, pc}

08003216 <USBD_RNDIS_Init>:
{
 8003216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003218:	7c03      	ldrb	r3, [r0, #16]
{
 800321a:	4604      	mov	r4, r0
	if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800321c:	bb7b      	cbnz	r3, 800327e <USBD_RNDIS_Init+0x68>
		USBD_LL_OpenEP(pdev,
 800321e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003222:	2202      	movs	r2, #2
 8003224:	2181      	movs	r1, #129	; 0x81
 8003226:	f7ff f803 	bl	8002230 <USBD_LL_OpenEP>
		USBD_LL_OpenEP(pdev,
 800322a:	f44f 7300 	mov.w	r3, #512	; 0x200
		USBD_LL_OpenEP(pdev,
 800322e:	2202      	movs	r2, #2
 8003230:	2101      	movs	r1, #1
 8003232:	4620      	mov	r0, r4
 8003234:	f7fe fffc 	bl	8002230 <USBD_LL_OpenEP>
	USBD_LL_OpenEP(pdev,
 8003238:	2308      	movs	r3, #8
 800323a:	2203      	movs	r2, #3
 800323c:	2182      	movs	r1, #130	; 0x82
 800323e:	4620      	mov	r0, r4
 8003240:	f7fe fff6 	bl	8002230 <USBD_LL_OpenEP>
	pdev->pClassData = USBD_malloc(sizeof (USBD_RNDIS_HandleTypeDef));
 8003244:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003248:	f005 fff4 	bl	8009234 <malloc>
 800324c:	4606      	mov	r6, r0
 800324e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
	if(pdev->pClassData == NULL)
 8003252:	b320      	cbz	r0, 800329e <USBD_RNDIS_Init+0x88>
		((USBD_RNDIS_ItfTypeDef *)pdev->pUserData)->Init();
 8003254:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4798      	blx	r3
		if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800325c:	7c27      	ldrb	r7, [r4, #16]
		hrndis->TxState =0;
 800325e:	2500      	movs	r5, #0
 8003260:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
		hrndis->RxState =0;
 8003264:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
		if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003268:	b987      	cbnz	r7, 800328c <USBD_RNDIS_Init+0x76>
			USBD_LL_PrepareReceive(pdev,
 800326a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800326e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003272:	2101      	movs	r1, #1
 8003274:	4620      	mov	r0, r4
 8003276:	f7ff f857 	bl	8002328 <USBD_LL_PrepareReceive>
	uint8_t ret = 0;
 800327a:	4638      	mov	r0, r7
 800327c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		USBD_LL_OpenEP(pdev,
 800327e:	2340      	movs	r3, #64	; 0x40
 8003280:	2202      	movs	r2, #2
 8003282:	2181      	movs	r1, #129	; 0x81
 8003284:	f7fe ffd4 	bl	8002230 <USBD_LL_OpenEP>
		USBD_LL_OpenEP(pdev,
 8003288:	2340      	movs	r3, #64	; 0x40
 800328a:	e7d0      	b.n	800322e <USBD_RNDIS_Init+0x18>
			USBD_LL_PrepareReceive(pdev,
 800328c:	2340      	movs	r3, #64	; 0x40
 800328e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003292:	2101      	movs	r1, #1
 8003294:	4620      	mov	r0, r4
 8003296:	f7ff f847 	bl	8002328 <USBD_LL_PrepareReceive>
	uint8_t ret = 0;
 800329a:	4628      	mov	r0, r5
 800329c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = 1;
 800329e:	2001      	movs	r0, #1
}
 80032a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080032a2 <USBD_RNDIS_RegisterInterface>:
uint8_t  USBD_RNDIS_RegisterInterface  (USBD_HandleTypeDef   *pdev,
		USBD_RNDIS_ItfTypeDef *fops)
{
	uint8_t  ret = USBD_FAIL;

	if(fops != NULL)
 80032a2:	b119      	cbz	r1, 80032ac <USBD_RNDIS_RegisterInterface+0xa>
	{
		pdev->pUserData= fops;
 80032a4:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
		ret = USBD_OK;
 80032a8:	2000      	movs	r0, #0
 80032aa:	4770      	bx	lr
	uint8_t  ret = USBD_FAIL;
 80032ac:	2002      	movs	r0, #2
	}

	return ret;
}
 80032ae:	4770      	bx	lr

080032b0 <USBD_RNDIS_SetTxBuffer>:
 */
uint8_t  USBD_RNDIS_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
		uint8_t  *pbuff,
		uint16_t length)
{
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 80032b0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

	hrndis->TxBuffer = pbuff;
	hrndis->TxLength = length;

	return USBD_OK;
}
 80032b4:	2000      	movs	r0, #0
	hrndis->TxBuffer = pbuff;
 80032b6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
	hrndis->TxLength = length;
 80032ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80032be:	4770      	bx	lr

080032c0 <USBD_RNDIS_SetRxBuffer>:
uint8_t  USBD_RNDIS_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
		uint8_t  *pbuff)
{
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;

	hrndis->RxBuffer = pbuff;
 80032c0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

	return USBD_OK;
}
 80032c4:	2000      	movs	r0, #0
	hrndis->RxBuffer = pbuff;
 80032c6:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80032ca:	4770      	bx	lr

080032cc <USBD_RNDIS_TransmitPacket>:
 * @param  epnum: endpoint number
 * @retval status
 */
uint8_t  USBD_RNDIS_TransmitPacket(USBD_HandleTypeDef *pdev)
{
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 80032cc:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 80032d0:	b510      	push	{r4, lr}

	if(pdev->pClassData != NULL)
 80032d2:	b172      	cbz	r2, 80032f2 <USBD_RNDIS_TransmitPacket+0x26>
	{
		if(hrndis->TxState == 0)
 80032d4:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 80032d8:	2301      	movs	r3, #1
 80032da:	b964      	cbnz	r4, 80032f6 <USBD_RNDIS_TransmitPacket+0x2a>
		{
			/* Tx Transfer in progress */
			hrndis->TxState = 1;
 80032dc:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

			/* Transmit next packet */
			USBD_LL_Transmit(pdev,
 80032e0:	2181      	movs	r1, #129	; 0x81
 80032e2:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 80032e6:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80032ea:	f7ff f807 	bl	80022fc <USBD_LL_Transmit>
					RNDIS_IN_EP,
					hrndis->TxBuffer,
					hrndis->TxLength);

			return USBD_OK;
 80032ee:	4620      	mov	r0, r4
 80032f0:	bd10      	pop	{r4, pc}
			return USBD_BUSY;
		}
	}
	else
	{
		return USBD_FAIL;
 80032f2:	2002      	movs	r0, #2
 80032f4:	bd10      	pop	{r4, pc}
			return USBD_BUSY;
 80032f6:	4618      	mov	r0, r3
	}
}
 80032f8:	bd10      	pop	{r4, pc}

080032fa <USBD_RNDIS_ReceivePacket>:
 * @param  pdev: device instance
 * @retval status
 */
uint8_t  USBD_RNDIS_ReceivePacket(USBD_HandleTypeDef *pdev)
{
	USBD_RNDIS_HandleTypeDef   *hrndis = (USBD_RNDIS_HandleTypeDef*) pdev->pClassData;
 80032fa:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 80032fe:	b510      	push	{r4, lr}

	/* Suspend or Resume USB Out process */
	if(pdev->pClassData != NULL)
 8003300:	b162      	cbz	r2, 800331c <USBD_RNDIS_ReceivePacket+0x22>
	{
		if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003302:	7c04      	ldrb	r4, [r0, #16]
 8003304:	b944      	cbnz	r4, 8003318 <USBD_RNDIS_ReceivePacket+0x1e>
		{
			/* Prepare Out endpoint to receive next packet */
			USBD_LL_PrepareReceive(pdev,
 8003306:	f44f 7300 	mov.w	r3, #512	; 0x200
					RNDIS_DATA_HS_OUT_PACKET_SIZE);
		}
		else
		{
			/* Prepare Out endpoint to receive next packet */
			USBD_LL_PrepareReceive(pdev,
 800330a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800330e:	2101      	movs	r1, #1
 8003310:	f7ff f80a 	bl	8002328 <USBD_LL_PrepareReceive>
					RNDIS_OUT_EP,
					hrndis->RxBuffer,
					RNDIS_DATA_FS_OUT_PACKET_SIZE);
		}
		return USBD_OK;
 8003314:	2000      	movs	r0, #0
 8003316:	bd10      	pop	{r4, pc}
			USBD_LL_PrepareReceive(pdev,
 8003318:	2340      	movs	r3, #64	; 0x40
 800331a:	e7f6      	b.n	800330a <USBD_RNDIS_ReceivePacket+0x10>
	}
	else
	{
		return USBD_FAIL;
 800331c:	2002      	movs	r0, #2
	}
}
 800331e:	bd10      	pop	{r4, pc}

08003320 <USBD_RNDIS_TransmitControl>:
 * @param  pdev: device instance
 * @param  epnum: endpoint number
 * @retval status
 */
uint8_t  USBD_RNDIS_TransmitControl(USBD_HandleTypeDef *pdev, uint8_t *buff, uint16_t length)
{
 8003320:	b508      	push	{r3, lr}
//		{
//			/* Tx Transfer in progress */
//			hrndis->TxState = 1;
//
//			/* Transmit next packet */
			USBD_LL_Transmit(pdev, RNDIS_CMD_EP, buff, length);
 8003322:	4613      	mov	r3, r2
 8003324:	460a      	mov	r2, r1
 8003326:	2182      	movs	r1, #130	; 0x82
 8003328:	f7fe ffe8 	bl	80022fc <USBD_LL_Transmit>
//	}
//	else
//	{
//		return USBD_FAIL;
//	}
}
 800332c:	2000      	movs	r0, #0
 800332e:	bd08      	pop	{r3, pc}

08003330 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003330:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003332:	b180      	cbz	r0, 8003356 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003334:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003338:	b113      	cbz	r3, 8003340 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800333a:	2300      	movs	r3, #0
 800333c:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003340:	b109      	cbz	r1, 8003346 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003342:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003346:	2301      	movs	r3, #1
 8003348:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800334c:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800334e:	f7fe ff21 	bl	8002194 <USBD_LL_Init>
  
  return USBD_OK; 
 8003352:	2000      	movs	r0, #0
 8003354:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8003356:	2002      	movs	r0, #2
}
 8003358:	bd08      	pop	{r3, pc}

0800335a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800335a:	b119      	cbz	r1, 8003364 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800335c:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8003360:	2000      	movs	r0, #0
 8003362:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003364:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003366:	4770      	bx	lr

08003368 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003368:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800336a:	f7fe ff53 	bl	8002214 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800336e:	2000      	movs	r0, #0
 8003370:	bd08      	pop	{r3, pc}

08003372 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003372:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003374:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003378:	b90b      	cbnz	r3, 800337e <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800337a:	2002      	movs	r0, #2
 800337c:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4798      	blx	r3
 8003382:	2800      	cmp	r0, #0
 8003384:	d1f9      	bne.n	800337a <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8003386:	bd08      	pop	{r3, pc}

08003388 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003388:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800338a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4798      	blx	r3
  return USBD_OK;
}
 8003392:	2000      	movs	r0, #0
 8003394:	bd08      	pop	{r3, pc}

08003396 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003396:	b538      	push	{r3, r4, r5, lr}
 8003398:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800339a:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800339e:	4628      	mov	r0, r5
 80033a0:	f000 fa75 	bl	800388e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80033a4:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80033a6:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80033aa:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80033ae:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80033b2:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80033b6:	f001 031f 	and.w	r3, r1, #31
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d00e      	beq.n	80033dc <USBD_LL_SetupStage+0x46>
 80033be:	d307      	bcc.n	80033d0 <USBD_LL_SetupStage+0x3a>
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d010      	beq.n	80033e6 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80033c4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80033c8:	4620      	mov	r0, r4
 80033ca:	f7fe ff59 	bl	8002280 <USBD_LL_StallEP>
    break;
 80033ce:	e003      	b.n	80033d8 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80033d0:	4629      	mov	r1, r5
 80033d2:	4620      	mov	r0, r4
 80033d4:	f000 f8e6 	bl	80035a4 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80033d8:	2000      	movs	r0, #0
 80033da:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80033dc:	4629      	mov	r1, r5
 80033de:	4620      	mov	r0, r4
 80033e0:	f000 f9da 	bl	8003798 <USBD_StdItfReq>
    break;
 80033e4:	e7f8      	b.n	80033d8 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80033e6:	4629      	mov	r1, r5
 80033e8:	4620      	mov	r0, r4
 80033ea:	f000 f9ed 	bl	80037c8 <USBD_StdEPReq>
    break;
 80033ee:	e7f3      	b.n	80033d8 <USBD_LL_SetupStage+0x42>

080033f0 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	4604      	mov	r4, r0
 80033f4:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80033f6:	bb11      	cbnz	r1, 800343e <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80033f8:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d10f      	bne.n	8003420 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8003400:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8003404:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003408:	4293      	cmp	r3, r2
 800340a:	d90b      	bls.n	8003424 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 800340c:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800340e:	429a      	cmp	r2, r3
 8003410:	bf28      	it	cs
 8003412:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8003414:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8003418:	b292      	uxth	r2, r2
 800341a:	4629      	mov	r1, r5
 800341c:	f000 fa8b 	bl	8003936 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003420:	2000      	movs	r0, #0
 8003422:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003424:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	b123      	cbz	r3, 8003436 <USBD_LL_DataOutStage+0x46>
 800342c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003430:	2a03      	cmp	r2, #3
 8003432:	d100      	bne.n	8003436 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8003434:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003436:	4620      	mov	r0, r4
 8003438:	f000 fa85 	bl	8003946 <USBD_CtlSendStatus>
 800343c:	e7f0      	b.n	8003420 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 800343e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0eb      	beq.n	8003420 <USBD_LL_DataOutStage+0x30>
 8003448:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800344c:	2a03      	cmp	r2, #3
 800344e:	d1e7      	bne.n	8003420 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8003450:	4798      	blx	r3
 8003452:	e7e5      	b.n	8003420 <USBD_LL_DataOutStage+0x30>

08003454 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	4613      	mov	r3, r2
 8003458:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800345a:	460e      	mov	r6, r1
 800345c:	2900      	cmp	r1, #0
 800345e:	d13d      	bne.n	80034dc <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003460:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003464:	2a02      	cmp	r2, #2
 8003466:	d10f      	bne.n	8003488 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8003468:	69c5      	ldr	r5, [r0, #28]
 800346a:	6a02      	ldr	r2, [r0, #32]
 800346c:	4295      	cmp	r5, r2
 800346e:	d914      	bls.n	800349a <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8003470:	1aaa      	subs	r2, r5, r2
 8003472:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8003474:	4619      	mov	r1, r3
 8003476:	b292      	uxth	r2, r2
 8003478:	f000 fa46 	bl	8003908 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800347c:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800347e:	461a      	mov	r2, r3
 8003480:	4619      	mov	r1, r3
 8003482:	4620      	mov	r0, r4
 8003484:	f7fe ff50 	bl	8002328 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8003488:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800348c:	2b01      	cmp	r3, #1
 800348e:	d102      	bne.n	8003496 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003496:	2000      	movs	r0, #0
 8003498:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800349a:	6983      	ldr	r3, [r0, #24]
 800349c:	fbb3 f5f2 	udiv	r5, r3, r2
 80034a0:	fb02 3515 	mls	r5, r2, r5, r3
 80034a4:	b965      	cbnz	r5, 80034c0 <USBD_LL_DataInStage+0x6c>
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d80a      	bhi.n	80034c0 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80034aa:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d206      	bcs.n	80034c0 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80034b2:	462a      	mov	r2, r5
 80034b4:	f000 fa28 	bl	8003908 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80034b8:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80034bc:	462b      	mov	r3, r5
 80034be:	e7de      	b.n	800347e <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80034c0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	b12b      	cbz	r3, 80034d4 <USBD_LL_DataInStage+0x80>
 80034c8:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80034cc:	2a03      	cmp	r2, #3
 80034ce:	d101      	bne.n	80034d4 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80034d0:	4620      	mov	r0, r4
 80034d2:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80034d4:	4620      	mov	r0, r4
 80034d6:	f000 fa41 	bl	800395c <USBD_CtlReceiveStatus>
 80034da:	e7d5      	b.n	8003488 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80034dc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0d7      	beq.n	8003496 <USBD_LL_DataInStage+0x42>
 80034e6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80034ea:	2a03      	cmp	r2, #3
 80034ec:	d1d3      	bne.n	8003496 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80034ee:	4798      	blx	r3
 80034f0:	e7d1      	b.n	8003496 <USBD_LL_DataInStage+0x42>

080034f2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80034f2:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80034f4:	2200      	movs	r2, #0
{
 80034f6:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 80034f8:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80034fa:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80034fc:	2340      	movs	r3, #64	; 0x40
 80034fe:	f7fe fe97 	bl	8002230 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003502:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003504:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8003508:	2200      	movs	r2, #0
 800350a:	2180      	movs	r1, #128	; 0x80
 800350c:	4620      	mov	r0, r4
 800350e:	f7fe fe8f 	bl	8002230 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003512:	2301      	movs	r3, #1
 8003514:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8003518:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800351c:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800351e:	b12b      	cbz	r3, 800352c <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003520:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003524:	7921      	ldrb	r1, [r4, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4620      	mov	r0, r4
 800352a:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800352c:	2000      	movs	r0, #0
 800352e:	bd38      	pop	{r3, r4, r5, pc}

08003530 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003530:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8003532:	2000      	movs	r0, #0
 8003534:	4770      	bx	lr

08003536 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003536:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800353a:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800353e:	2304      	movs	r3, #4
 8003540:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003544:	2000      	movs	r0, #0
 8003546:	4770      	bx	lr

08003548 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8003548:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800354c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003550:	2000      	movs	r0, #0
 8003552:	4770      	bx	lr

08003554 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003554:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003556:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800355a:	2a03      	cmp	r2, #3
 800355c:	d104      	bne.n	8003568 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800355e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	b103      	cbz	r3, 8003568 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003566:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8003568:	2000      	movs	r0, #0
 800356a:	bd08      	pop	{r3, pc}

0800356c <USBD_LL_IsoINIncomplete>:
 800356c:	2000      	movs	r0, #0
 800356e:	4770      	bx	lr

08003570 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8003570:	2000      	movs	r0, #0
 8003572:	4770      	bx	lr

08003574 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8003574:	2000      	movs	r0, #0
 8003576:	4770      	bx	lr

08003578 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8003578:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800357a:	2201      	movs	r2, #1
 800357c:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003580:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8003584:	7901      	ldrb	r1, [r0, #4]
 8003586:	6852      	ldr	r2, [r2, #4]
 8003588:	4790      	blx	r2
   
  return USBD_OK;
}
 800358a:	2000      	movs	r0, #0
 800358c:	bd08      	pop	{r3, pc}

0800358e <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800358e:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8003590:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8003592:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8003594:	f7fe fe74 	bl	8002280 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003598:	4620      	mov	r0, r4
 800359a:	2100      	movs	r1, #0
}
 800359c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80035a0:	f7fe be6e 	b.w	8002280 <USBD_LL_StallEP>

080035a4 <USBD_StdDevReq>:
{
 80035a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80035a6:	784b      	ldrb	r3, [r1, #1]
{
 80035a8:	4604      	mov	r4, r0
 80035aa:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80035ac:	2b09      	cmp	r3, #9
 80035ae:	d879      	bhi.n	80036a4 <USBD_StdDevReq+0x100>
 80035b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80035b4:	00e500c9 	.word	0x00e500c9
 80035b8:	00d90078 	.word	0x00d90078
 80035bc:	006d0078 	.word	0x006d0078
 80035c0:	0078000a 	.word	0x0078000a
 80035c4:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80035c8:	884b      	ldrh	r3, [r1, #2]
 80035ca:	0a1a      	lsrs	r2, r3, #8
 80035cc:	3a01      	subs	r2, #1
 80035ce:	2a06      	cmp	r2, #6
 80035d0:	d868      	bhi.n	80036a4 <USBD_StdDevReq+0x100>
 80035d2:	e8df f002 	tbb	[pc, r2]
 80035d6:	1c04      	.short	0x1c04
 80035d8:	49676729 	.word	0x49676729
 80035dc:	52          	.byte	0x52
 80035dd:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80035de:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80035e2:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80035e4:	7c20      	ldrb	r0, [r4, #16]
 80035e6:	f10d 0106 	add.w	r1, sp, #6
 80035ea:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80035ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80035f0:	2a00      	cmp	r2, #0
 80035f2:	d067      	beq.n	80036c4 <USBD_StdDevReq+0x120>
 80035f4:	88eb      	ldrh	r3, [r5, #6]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d064      	beq.n	80036c4 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 80035fa:	429a      	cmp	r2, r3
 80035fc:	bf28      	it	cs
 80035fe:	461a      	movcs	r2, r3
 8003600:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8003604:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8003606:	4620      	mov	r0, r4
 8003608:	f000 f971 	bl	80038ee <USBD_CtlSendData>
 800360c:	e05a      	b.n	80036c4 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800360e:	7c02      	ldrb	r2, [r0, #16]
 8003610:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003614:	b932      	cbnz	r2, 8003624 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003618:	f10d 0006 	add.w	r0, sp, #6
 800361c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800361e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003620:	7043      	strb	r3, [r0, #1]
 8003622:	e7e3      	b.n	80035ec <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	e7f7      	b.n	8003618 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b05      	cmp	r3, #5
 800362c:	d83a      	bhi.n	80036a4 <USBD_StdDevReq+0x100>
 800362e:	e8df f003 	tbb	[pc, r3]
 8003632:	0703      	.short	0x0703
 8003634:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003638:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	e7d1      	b.n	80035e4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003640:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	e7cd      	b.n	80035e4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003648:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	e7c9      	b.n	80035e4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003650:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	e7c5      	b.n	80035e4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003658:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	e7c1      	b.n	80035e4 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003660:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	e7bd      	b.n	80035e4 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003668:	7c03      	ldrb	r3, [r0, #16]
 800366a:	b9db      	cbnz	r3, 80036a4 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800366c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003670:	f10d 0006 	add.w	r0, sp, #6
 8003674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003676:	4798      	blx	r3
 8003678:	e7b8      	b.n	80035ec <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800367a:	7c03      	ldrb	r3, [r0, #16]
 800367c:	b993      	cbnz	r3, 80036a4 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800367e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003682:	f10d 0006 	add.w	r0, sp, #6
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800368a:	2307      	movs	r3, #7
 800368c:	e7c8      	b.n	8003620 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800368e:	888b      	ldrh	r3, [r1, #4]
 8003690:	b943      	cbnz	r3, 80036a4 <USBD_StdDevReq+0x100>
 8003692:	88cb      	ldrh	r3, [r1, #6]
 8003694:	b933      	cbnz	r3, 80036a4 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003696:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800369a:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800369c:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800369e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80036a2:	d103      	bne.n	80036ac <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80036a4:	4620      	mov	r0, r4
 80036a6:	f7ff ff72 	bl	800358e <USBD_CtlError.constprop.0>
    break;
 80036aa:	e00b      	b.n	80036c4 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80036ac:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80036b0:	4629      	mov	r1, r5
 80036b2:	f7fe fe15 	bl	80022e0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80036b6:	4620      	mov	r0, r4
 80036b8:	f000 f945 	bl	8003946 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80036bc:	b12d      	cbz	r5, 80036ca <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80036be:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80036c0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80036c4:	2000      	movs	r0, #0
 80036c6:	b003      	add	sp, #12
 80036c8:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80036ca:	2301      	movs	r3, #1
 80036cc:	e7f8      	b.n	80036c0 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80036ce:	7889      	ldrb	r1, [r1, #2]
 80036d0:	4d30      	ldr	r5, [pc, #192]	; (8003794 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80036d2:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80036d4:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80036d6:	d8e5      	bhi.n	80036a4 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 80036d8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d00c      	beq.n	80036fa <USBD_StdDevReq+0x156>
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d1df      	bne.n	80036a4 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 80036e4:	b9b1      	cbnz	r1, 8003714 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80036e6:	2302      	movs	r3, #2
 80036e8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80036ec:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80036ee:	f7ff fe4b 	bl	8003388 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80036f2:	4620      	mov	r0, r4
 80036f4:	f000 f927 	bl	8003946 <USBD_CtlSendStatus>
 80036f8:	e7e4      	b.n	80036c4 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 80036fa:	2900      	cmp	r1, #0
 80036fc:	d0f9      	beq.n	80036f2 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 80036fe:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003700:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8003702:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003704:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003708:	4620      	mov	r0, r4
 800370a:	f7ff fe32 	bl	8003372 <USBD_SetClassConfig>
 800370e:	2802      	cmp	r0, #2
 8003710:	d1ef      	bne.n	80036f2 <USBD_StdDevReq+0x14e>
 8003712:	e7c7      	b.n	80036a4 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8003714:	6841      	ldr	r1, [r0, #4]
 8003716:	2901      	cmp	r1, #1
 8003718:	d0eb      	beq.n	80036f2 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800371a:	b2c9      	uxtb	r1, r1
 800371c:	f7ff fe34 	bl	8003388 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003720:	7829      	ldrb	r1, [r5, #0]
 8003722:	6061      	str	r1, [r4, #4]
 8003724:	e7f0      	b.n	8003708 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8003726:	88ca      	ldrh	r2, [r1, #6]
 8003728:	2a01      	cmp	r2, #1
 800372a:	d1bb      	bne.n	80036a4 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 800372c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003730:	2b02      	cmp	r3, #2
 8003732:	d003      	beq.n	800373c <USBD_StdDevReq+0x198>
 8003734:	2b03      	cmp	r3, #3
 8003736:	d1b5      	bne.n	80036a4 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8003738:	1d01      	adds	r1, r0, #4
 800373a:	e764      	b.n	8003606 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 800373c:	4601      	mov	r1, r0
 800373e:	2300      	movs	r3, #0
 8003740:	f841 3f08 	str.w	r3, [r1, #8]!
 8003744:	e75f      	b.n	8003606 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8003746:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800374a:	3b02      	subs	r3, #2
 800374c:	2b01      	cmp	r3, #1
 800374e:	d8a9      	bhi.n	80036a4 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = 0;                                   
 8003750:	2300      	movs	r3, #0
 8003752:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8003754:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003758:	b10b      	cbz	r3, 800375e <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800375a:	2302      	movs	r3, #2
 800375c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800375e:	2202      	movs	r2, #2
 8003760:	f104 010c 	add.w	r1, r4, #12
 8003764:	e74f      	b.n	8003606 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003766:	884b      	ldrh	r3, [r1, #2]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d1ab      	bne.n	80036c4 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800376c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003770:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003774:	4629      	mov	r1, r5
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4620      	mov	r0, r4
 800377a:	4798      	blx	r3
 800377c:	e7b9      	b.n	80036f2 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800377e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003782:	3b02      	subs	r3, #2
 8003784:	2b01      	cmp	r3, #1
 8003786:	d88d      	bhi.n	80036a4 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003788:	884b      	ldrh	r3, [r1, #2]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d19a      	bne.n	80036c4 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800378e:	2300      	movs	r3, #0
 8003790:	e7ec      	b.n	800376c <USBD_StdDevReq+0x1c8>
 8003792:	bf00      	nop
 8003794:	20001049 	.word	0x20001049

08003798 <USBD_StdItfReq>:
{
 8003798:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800379a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800379e:	2b03      	cmp	r3, #3
{
 80037a0:	4604      	mov	r4, r0
 80037a2:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80037a4:	d10d      	bne.n	80037c2 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80037a6:	790b      	ldrb	r3, [r1, #4]
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d80a      	bhi.n	80037c2 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80037ac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80037b4:	88eb      	ldrh	r3, [r5, #6]
 80037b6:	b913      	cbnz	r3, 80037be <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80037b8:	4620      	mov	r0, r4
 80037ba:	f000 f8c4 	bl	8003946 <USBD_CtlSendStatus>
}
 80037be:	2000      	movs	r0, #0
 80037c0:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80037c2:	f7ff fee4 	bl	800358e <USBD_CtlError.constprop.0>
    break;
 80037c6:	e7fa      	b.n	80037be <USBD_StdItfReq+0x26>

080037c8 <USBD_StdEPReq>:
{
 80037c8:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80037ca:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80037cc:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80037ce:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80037d2:	2a20      	cmp	r2, #32
{
 80037d4:	4604      	mov	r4, r0
 80037d6:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80037d8:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80037da:	d105      	bne.n	80037e8 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80037dc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	4798      	blx	r3
}
 80037e4:	2000      	movs	r0, #0
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80037e8:	784a      	ldrb	r2, [r1, #1]
 80037ea:	2a01      	cmp	r2, #1
 80037ec:	d01c      	beq.n	8003828 <USBD_StdEPReq+0x60>
 80037ee:	d32a      	bcc.n	8003846 <USBD_StdEPReq+0x7e>
 80037f0:	2a03      	cmp	r2, #3
 80037f2:	d1f7      	bne.n	80037e4 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80037f4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80037f8:	2a02      	cmp	r2, #2
 80037fa:	d040      	beq.n	800387e <USBD_StdEPReq+0xb6>
 80037fc:	2a03      	cmp	r2, #3
 80037fe:	d002      	beq.n	8003806 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8003800:	f7ff fec5 	bl	800358e <USBD_CtlError.constprop.0>
      break;
 8003804:	e7ee      	b.n	80037e4 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003806:	884a      	ldrh	r2, [r1, #2]
 8003808:	b922      	cbnz	r2, 8003814 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800380a:	065e      	lsls	r6, r3, #25
 800380c:	d002      	beq.n	8003814 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800380e:	4619      	mov	r1, r3
 8003810:	f7fe fd36 	bl	8002280 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8003814:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003818:	4629      	mov	r1, r5
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4620      	mov	r0, r4
 800381e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003820:	4620      	mov	r0, r4
 8003822:	f000 f890 	bl	8003946 <USBD_CtlSendStatus>
 8003826:	e7dd      	b.n	80037e4 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003828:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800382c:	2a02      	cmp	r2, #2
 800382e:	d026      	beq.n	800387e <USBD_StdEPReq+0xb6>
 8003830:	2a03      	cmp	r2, #3
 8003832:	d1e5      	bne.n	8003800 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003834:	884a      	ldrh	r2, [r1, #2]
 8003836:	2a00      	cmp	r2, #0
 8003838:	d1d4      	bne.n	80037e4 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800383a:	0659      	lsls	r1, r3, #25
 800383c:	d0f0      	beq.n	8003820 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800383e:	4619      	mov	r1, r3
 8003840:	f7fe fd2c 	bl	800229c <USBD_LL_ClearStallEP>
 8003844:	e7e6      	b.n	8003814 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8003846:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800384a:	2a02      	cmp	r2, #2
 800384c:	d017      	beq.n	800387e <USBD_StdEPReq+0xb6>
 800384e:	2a03      	cmp	r2, #3
 8003850:	d1d6      	bne.n	8003800 <USBD_StdEPReq+0x38>
 8003852:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003856:	f016 0f80 	tst.w	r6, #128	; 0x80
 800385a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800385e:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003860:	bf14      	ite	ne
 8003862:	3514      	addne	r5, #20
 8003864:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003868:	f7fe fd26 	bl	80022b8 <USBD_LL_IsStallEP>
 800386c:	b168      	cbz	r0, 800388a <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 800386e:	2301      	movs	r3, #1
 8003870:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8003872:	2202      	movs	r2, #2
 8003874:	4629      	mov	r1, r5
 8003876:	4620      	mov	r0, r4
 8003878:	f000 f839 	bl	80038ee <USBD_CtlSendData>
      break;
 800387c:	e7b2      	b.n	80037e4 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 800387e:	065a      	lsls	r2, r3, #25
 8003880:	d0b0      	beq.n	80037e4 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8003882:	4619      	mov	r1, r3
 8003884:	f7fe fcfc 	bl	8002280 <USBD_LL_StallEP>
 8003888:	e7ac      	b.n	80037e4 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 800388a:	6028      	str	r0, [r5, #0]
 800388c:	e7f1      	b.n	8003872 <USBD_StdEPReq+0xaa>

0800388e <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800388e:	780b      	ldrb	r3, [r1, #0]
 8003890:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003892:	784b      	ldrb	r3, [r1, #1]
 8003894:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003896:	78ca      	ldrb	r2, [r1, #3]
 8003898:	788b      	ldrb	r3, [r1, #2]
 800389a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800389e:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80038a0:	794a      	ldrb	r2, [r1, #5]
 80038a2:	790b      	ldrb	r3, [r1, #4]
 80038a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80038a8:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80038aa:	79ca      	ldrb	r2, [r1, #7]
 80038ac:	798b      	ldrb	r3, [r1, #6]
 80038ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80038b2:	80c3      	strh	r3, [r0, #6]
 80038b4:	4770      	bx	lr

080038b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80038b6:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80038b8:	b188      	cbz	r0, 80038de <USBD_GetString+0x28>
 80038ba:	4605      	mov	r5, r0
 80038bc:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80038be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2c00      	cmp	r4, #0
 80038c6:	d1f9      	bne.n	80038bc <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	3302      	adds	r3, #2
 80038cc:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80038ce:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80038d0:	2303      	movs	r3, #3
 80038d2:	704b      	strb	r3, [r1, #1]
 80038d4:	3801      	subs	r0, #1
 80038d6:	2302      	movs	r3, #2
    while (*desc != '\0') 
 80038d8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80038dc:	b905      	cbnz	r5, 80038e0 <USBD_GetString+0x2a>
 80038de:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 80038e6:	3302      	adds	r3, #2
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	548c      	strb	r4, [r1, r2]
 80038ec:	e7f4      	b.n	80038d8 <USBD_GetString+0x22>

080038ee <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80038ee:	b510      	push	{r4, lr}
 80038f0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80038f2:	2202      	movs	r2, #2
 80038f4:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80038f8:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80038fa:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80038fc:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80038fe:	2100      	movs	r1, #0
 8003900:	f7fe fcfc 	bl	80022fc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003904:	2000      	movs	r0, #0
 8003906:	bd10      	pop	{r4, pc}

08003908 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003908:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800390a:	4613      	mov	r3, r2
 800390c:	460a      	mov	r2, r1
 800390e:	2100      	movs	r1, #0
 8003910:	f7fe fcf4 	bl	80022fc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003914:	2000      	movs	r0, #0
 8003916:	bd08      	pop	{r3, pc}

08003918 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003918:	b510      	push	{r4, lr}
 800391a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800391c:	2203      	movs	r2, #3
 800391e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8003922:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8003926:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8003928:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 800392c:	2100      	movs	r1, #0
 800392e:	f7fe fcfb 	bl	8002328 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8003932:	2000      	movs	r0, #0
 8003934:	bd10      	pop	{r4, pc}

08003936 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003936:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8003938:	4613      	mov	r3, r2
 800393a:	460a      	mov	r2, r1
 800393c:	2100      	movs	r1, #0
 800393e:	f7fe fcf3 	bl	8002328 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8003942:	2000      	movs	r0, #0
 8003944:	bd08      	pop	{r3, pc}

08003946 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003946:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003948:	2304      	movs	r3, #4
 800394a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800394e:	2300      	movs	r3, #0
 8003950:	461a      	mov	r2, r3
 8003952:	4619      	mov	r1, r3
 8003954:	f7fe fcd2 	bl	80022fc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003958:	2000      	movs	r0, #0
 800395a:	bd08      	pop	{r3, pc}

0800395c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800395c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800395e:	2305      	movs	r3, #5
 8003960:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003964:	2300      	movs	r3, #0
 8003966:	461a      	mov	r2, r3
 8003968:	4619      	mov	r1, r3
 800396a:	f7fe fcdd 	bl	8002328 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800396e:	2000      	movs	r0, #0
 8003970:	bd08      	pop	{r3, pc}

08003972 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003972:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003974:	f001 f86c 	bl	8004a50 <vTaskStartScheduler>
  
  return osOK;
}
 8003978:	2000      	movs	r0, #0
 800397a:	bd08      	pop	{r3, pc}

0800397c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800397c:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800397e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8003982:	8a02      	ldrh	r2, [r0, #16]
{
 8003984:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003986:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 800398a:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800398c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800398e:	bf14      	ite	ne
 8003990:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003992:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003994:	a803      	add	r0, sp, #12
 8003996:	9001      	str	r0, [sp, #4]
 8003998:	9400      	str	r4, [sp, #0]
 800399a:	4628      	mov	r0, r5
 800399c:	f000 ff82 	bl	80048a4 <xTaskCreate>
 80039a0:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80039a2:	bf0c      	ite	eq
 80039a4:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80039a6:	2000      	movne	r0, #0
}
 80039a8:	b005      	add	sp, #20
 80039aa:	bd30      	pop	{r4, r5, pc}

080039ac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80039ac:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80039ae:	2800      	cmp	r0, #0
 80039b0:	bf08      	it	eq
 80039b2:	2001      	moveq	r0, #1
 80039b4:	f001 f9a0 	bl	8004cf8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80039b8:	2000      	movs	r0, #0
 80039ba:	bd08      	pop	{r3, pc}

080039bc <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80039bc:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80039be:	f001 fb6f 	bl	80050a0 <xTaskGetSchedulerState>
 80039c2:	2801      	cmp	r0, #1
 80039c4:	d003      	beq.n	80039ce <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80039c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80039ca:	f000 ba23 	b.w	8003e14 <xPortSysTickHandler>
 80039ce:	bd08      	pop	{r3, pc}

080039d0 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80039d0:	b510      	push	{r4, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80039d2:	2018      	movs	r0, #24
 80039d4:	f000 fb10 	bl	8003ff8 <pvPortMalloc>

		if( pxEventBits != NULL )
 80039d8:	4604      	mov	r4, r0
 80039da:	b120      	cbz	r0, 80039e6 <xEventGroupCreate+0x16>
		{
			pxEventBits->uxEventBits = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80039e2:	f000 f911 	bl	8003c08 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 80039e6:	4620      	mov	r0, r4
 80039e8:	bd10      	pop	{r4, pc}
	...

080039ec <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80039ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039f0:	9f08      	ldr	r7, [sp, #32]
 80039f2:	460d      	mov	r5, r1
 80039f4:	4690      	mov	r8, r2
 80039f6:	4699      	mov	r9, r3
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80039f8:	4606      	mov	r6, r0
 80039fa:	b940      	cbnz	r0, 8003a0e <xEventGroupWaitBits+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	e7fe      	b.n	8003a0c <xEventGroupWaitBits+0x20>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003a0e:	f011 4a7f 	ands.w	sl, r1, #4278190080	; 0xff000000
 8003a12:	d008      	beq.n	8003a26 <xEventGroupWaitBits+0x3a>
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	e7fe      	b.n	8003a24 <xEventGroupWaitBits+0x38>
	configASSERT( uxBitsToWaitFor != 0 );
 8003a26:	b941      	cbnz	r1, 8003a3a <xEventGroupWaitBits+0x4e>
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	e7fe      	b.n	8003a38 <xEventGroupWaitBits+0x4c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a3a:	f001 fb31 	bl	80050a0 <xTaskGetSchedulerState>
 8003a3e:	bb48      	cbnz	r0, 8003a94 <xEventGroupWaitBits+0xa8>
 8003a40:	b347      	cbz	r7, 8003a94 <xEventGroupWaitBits+0xa8>
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	e7fe      	b.n	8003a52 <xEventGroupWaitBits+0x66>

	if( xWaitForAllBits == pdFALSE )
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003a54:	bb43      	cbnz	r3, 8003aa8 <xEventGroupWaitBits+0xbc>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003a56:	b197      	cbz	r7, 8003a7e <xEventGroupWaitBits+0x92>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003a58:	f1b8 0f00 	cmp.w	r8, #0
 8003a5c:	bf0c      	ite	eq
 8003a5e:	2100      	moveq	r1, #0
 8003a60:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
			if( xWaitForAllBits != pdFALSE )
 8003a64:	f1b9 0f00 	cmp.w	r9, #0
 8003a68:	d001      	beq.n	8003a6e <xEventGroupWaitBits+0x82>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003a6a:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003a6e:	463a      	mov	r2, r7
 8003a70:	4329      	orrs	r1, r5
 8003a72:	1d30      	adds	r0, r6, #4
 8003a74:	f001 fa0a 	bl	8004e8c <vTaskPlaceOnUnorderedEventList>
 8003a78:	46ba      	mov	sl, r7
			uxReturn = 0;
 8003a7a:	2400      	movs	r4, #0
 8003a7c:	e01a      	b.n	8003ab4 <xEventGroupWaitBits+0xc8>
 8003a7e:	46ba      	mov	sl, r7
 8003a80:	e018      	b.n	8003ab4 <xEventGroupWaitBits+0xc8>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003a82:	429d      	cmp	r5, r3
 8003a84:	d133      	bne.n	8003aee <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 8003a86:	f1b8 0f00 	cmp.w	r8, #0
 8003a8a:	d030      	beq.n	8003aee <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003a8c:	ea24 0505 	bic.w	r5, r4, r5
 8003a90:	6035      	str	r5, [r6, #0]
 8003a92:	e02c      	b.n	8003aee <xEventGroupWaitBits+0x102>
	vTaskSuspendAll();
 8003a94:	f001 f818 	bl	8004ac8 <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003a98:	6834      	ldr	r4, [r6, #0]
 8003a9a:	ea05 0304 	and.w	r3, r5, r4
	if( xWaitForAllBits == pdFALSE )
 8003a9e:	f1b9 0f00 	cmp.w	r9, #0
 8003aa2:	d0d7      	beq.n	8003a54 <xEventGroupWaitBits+0x68>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003aa4:	429d      	cmp	r5, r3
 8003aa6:	d1d6      	bne.n	8003a56 <xEventGroupWaitBits+0x6a>
			if( xClearOnExit != pdFALSE )
 8003aa8:	f1b8 0f00 	cmp.w	r8, #0
 8003aac:	d002      	beq.n	8003ab4 <xEventGroupWaitBits+0xc8>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003aae:	ea24 0305 	bic.w	r3, r4, r5
 8003ab2:	6033      	str	r3, [r6, #0]
	xAlreadyYielded = xTaskResumeAll();
 8003ab4:	f001 f8a8 	bl	8004c08 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8003ab8:	f1ba 0f00 	cmp.w	sl, #0
 8003abc:	d01b      	beq.n	8003af6 <xEventGroupWaitBits+0x10a>
		if( xAlreadyYielded == pdFALSE )
 8003abe:	b938      	cbnz	r0, 8003ad0 <xEventGroupWaitBits+0xe4>
			portYIELD_WITHIN_API();
 8003ac0:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <xEventGroupWaitBits+0x110>)
 8003ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8003ad0:	f001 fb8c 	bl	80051ec <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003ad4:	0183      	lsls	r3, r0, #6
		uxReturn = uxTaskResetEventItemValue();
 8003ad6:	4604      	mov	r4, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003ad8:	d40b      	bmi.n	8003af2 <xEventGroupWaitBits+0x106>
			taskENTER_CRITICAL();
 8003ada:	f000 f933 	bl	8003d44 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 8003ade:	6834      	ldr	r4, [r6, #0]
 8003ae0:	ea05 0304 	and.w	r3, r5, r4
	if( xWaitForAllBits == pdFALSE )
 8003ae4:	f1b9 0f00 	cmp.w	r9, #0
 8003ae8:	d1cb      	bne.n	8003a82 <xEventGroupWaitBits+0x96>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1cb      	bne.n	8003a86 <xEventGroupWaitBits+0x9a>
			taskEXIT_CRITICAL();
 8003aee:	f000 f94b 	bl	8003d88 <vPortExitCritical>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003af2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
}
 8003af6:	4620      	mov	r0, r4
 8003af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003afc:	e000ed04 	.word	0xe000ed04

08003b00 <xEventGroupClearBits>:
{
 8003b00:	b570      	push	{r4, r5, r6, lr}
 8003b02:	460c      	mov	r4, r1
	configASSERT( xEventGroup );
 8003b04:	4605      	mov	r5, r0
 8003b06:	b940      	cbnz	r0, 8003b1a <xEventGroupClearBits+0x1a>
 8003b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	e7fe      	b.n	8003b18 <xEventGroupClearBits+0x18>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003b1a:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8003b1e:	d008      	beq.n	8003b32 <xEventGroupClearBits+0x32>
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	e7fe      	b.n	8003b30 <xEventGroupClearBits+0x30>
	taskENTER_CRITICAL();
 8003b32:	f000 f907 	bl	8003d44 <vPortEnterCritical>
		uxReturn = pxEventBits->uxEventBits;
 8003b36:	682e      	ldr	r6, [r5, #0]
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003b38:	ea26 0404 	bic.w	r4, r6, r4
 8003b3c:	602c      	str	r4, [r5, #0]
	taskEXIT_CRITICAL();
 8003b3e:	f000 f923 	bl	8003d88 <vPortExitCritical>
}
 8003b42:	4630      	mov	r0, r6
 8003b44:	bd70      	pop	{r4, r5, r6, pc}

08003b46 <xEventGroupSetBits>:
{
 8003b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b48:	460f      	mov	r7, r1
	configASSERT( xEventGroup );
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	b940      	cbnz	r0, 8003b60 <xEventGroupSetBits+0x1a>
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	e7fe      	b.n	8003b5e <xEventGroupSetBits+0x18>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003b60:	f011 457f 	ands.w	r5, r1, #4278190080	; 0xff000000
 8003b64:	d008      	beq.n	8003b78 <xEventGroupSetBits+0x32>
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	e7fe      	b.n	8003b76 <xEventGroupSetBits+0x30>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b78:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
 8003b7c:	f000 ffa4 	bl	8004ac8 <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003b80:	6823      	ldr	r3, [r4, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8003b82:	6920      	ldr	r0, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003b84:	433b      	orrs	r3, r7
 8003b86:	6023      	str	r3, [r4, #0]
		while( pxListItem != pxListEnd )
 8003b88:	4286      	cmp	r6, r0
 8003b8a:	6821      	ldr	r1, [r4, #0]
 8003b8c:	d106      	bne.n	8003b9c <xEventGroupSetBits+0x56>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003b8e:	ea21 0105 	bic.w	r1, r1, r5
 8003b92:	6021      	str	r1, [r4, #0]
	( void ) xTaskResumeAll();
 8003b94:	f001 f838 	bl	8004c08 <xTaskResumeAll>
 8003b98:	6820      	ldr	r0, [r4, #0]
}
 8003b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003b9c:	e890 0088 	ldmia.w	r0, {r3, r7}
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003ba0:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003ba4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003ba8:	d103      	bne.n	8003bb2 <xEventGroupSetBits+0x6c>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003baa:	420a      	tst	r2, r1
 8003bac:	d104      	bne.n	8003bb8 <xEventGroupSetBits+0x72>
{
 8003bae:	4638      	mov	r0, r7
 8003bb0:	e7ea      	b.n	8003b88 <xEventGroupSetBits+0x42>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003bb2:	ea32 0e01 	bics.w	lr, r2, r1
 8003bb6:	d1fa      	bne.n	8003bae <xEventGroupSetBits+0x68>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003bb8:	01db      	lsls	r3, r3, #7
 8003bba:	d500      	bpl.n	8003bbe <xEventGroupSetBits+0x78>
					uxBitsToClear |= uxBitsWaitedFor;
 8003bbc:	4315      	orrs	r5, r2
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003bbe:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003bc2:	f001 f9d1 	bl	8004f68 <xTaskRemoveFromUnorderedEventList>
 8003bc6:	e7f2      	b.n	8003bae <xEventGroupSetBits+0x68>

08003bc8 <vEventGroupDelete>:
{
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003bcc:	f000 ff7c 	bl	8004ac8 <vTaskSuspendAll>
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8003bd0:	f104 050c 	add.w	r5, r4, #12
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8003bd4:	6863      	ldr	r3, [r4, #4]
 8003bd6:	b933      	cbnz	r3, 8003be6 <vEventGroupDelete+0x1e>
			vPortFree( pxEventBits );
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f000 fa9f 	bl	800411c <vPortFree>
}
 8003bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	( void ) xTaskResumeAll();
 8003be2:	f001 b811 	b.w	8004c08 <xTaskResumeAll>
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8003be6:	6920      	ldr	r0, [r4, #16]
 8003be8:	42a8      	cmp	r0, r5
 8003bea:	d108      	bne.n	8003bfe <vEventGroupDelete+0x36>
 8003bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	e7fe      	b.n	8003bfc <vEventGroupDelete+0x34>
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8003bfe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c02:	f001 f9b1 	bl	8004f68 <xTaskRemoveFromUnorderedEventList>
 8003c06:	e7e5      	b.n	8003bd4 <vEventGroupDelete+0xc>

08003c08 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c08:	f100 0308 	add.w	r3, r0, #8
 8003c0c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c0e:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c12:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c14:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c16:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c18:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c1a:	6003      	str	r3, [r0, #0]
 8003c1c:	4770      	bx	lr

08003c1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	6103      	str	r3, [r0, #16]
 8003c22:	4770      	bx	lr

08003c24 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c24:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c26:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c30:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003c32:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c34:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003c36:	3301      	adds	r3, #1
 8003c38:	6003      	str	r3, [r0, #0]
 8003c3a:	4770      	bx	lr

08003c3c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c3c:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c3e:	1c53      	adds	r3, r2, #1
{
 8003c40:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8003c42:	d10a      	bne.n	8003c5a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c44:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c4a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c4c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c4e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003c50:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c52:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003c54:	3301      	adds	r3, #1
 8003c56:	6003      	str	r3, [r0, #0]
 8003c58:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c5a:	f100 0308 	add.w	r3, r0, #8
 8003c5e:	685c      	ldr	r4, [r3, #4]
 8003c60:	6825      	ldr	r5, [r4, #0]
 8003c62:	42aa      	cmp	r2, r5
 8003c64:	d3ef      	bcc.n	8003c46 <vListInsert+0xa>
 8003c66:	4623      	mov	r3, r4
 8003c68:	e7f9      	b.n	8003c5e <vListInsert+0x22>

08003c6a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c6a:	6841      	ldr	r1, [r0, #4]
 8003c6c:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c6e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c70:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c72:	6882      	ldr	r2, [r0, #8]
 8003c74:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c7a:	bf08      	it	eq
 8003c7c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c7e:	2200      	movs	r2, #0
 8003c80:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	3801      	subs	r0, #1
 8003c86:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8003c88:	4770      	bx	lr
	...

08003c8c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <prvTaskExitError+0x2c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	d008      	beq.n	8003ca6 <prvTaskExitError+0x1a>
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	e7fe      	b.n	8003ca4 <prvTaskExitError+0x18>
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	e7fe      	b.n	8003cb6 <prvTaskExitError+0x2a>
 8003cb8:	200001ac 	.word	0x200001ac

08003cbc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003cbc:	4806      	ldr	r0, [pc, #24]	; (8003cd8 <prvPortStartFirstTask+0x1c>)
 8003cbe:	6800      	ldr	r0, [r0, #0]
 8003cc0:	6800      	ldr	r0, [r0, #0]
 8003cc2:	f380 8808 	msr	MSP, r0
 8003cc6:	b662      	cpsie	i
 8003cc8:	b661      	cpsie	f
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	df00      	svc	0
 8003cd4:	bf00      	nop
 8003cd6:	0000      	.short	0x0000
 8003cd8:	e000ed08 	.word	0xe000ed08

08003cdc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003cdc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003cec <vPortEnableVFP+0x10>
 8003ce0:	6801      	ldr	r1, [r0, #0]
 8003ce2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003ce6:	6001      	str	r1, [r0, #0]
 8003ce8:	4770      	bx	lr
 8003cea:	0000      	.short	0x0000
 8003cec:	e000ed88 	.word	0xe000ed88

08003cf0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cf4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003cf8:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <pxPortInitialiseStack+0x28>)
 8003cfa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003cfe:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003d02:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d06:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d0a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003d0e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8003d12:	3844      	subs	r0, #68	; 0x44
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	08003c8d 	.word	0x08003c8d
 8003d1c:	00000000 	.word	0x00000000

08003d20 <SVC_Handler>:
	__asm volatile (
 8003d20:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <pxCurrentTCBConst2>)
 8003d22:	6819      	ldr	r1, [r3, #0]
 8003d24:	6808      	ldr	r0, [r1, #0]
 8003d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2a:	f380 8809 	msr	PSP, r0
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f380 8811 	msr	BASEPRI, r0
 8003d3a:	4770      	bx	lr
 8003d3c:	f3af 8000 	nop.w

08003d40 <pxCurrentTCBConst2>:
 8003d40:	20004c68 	.word	0x20004c68

08003d44 <vPortEnterCritical>:
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003d54:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <vPortEnterCritical+0x3c>)
 8003d56:	6813      	ldr	r3, [r2, #0]
 8003d58:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8003d5a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8003d5c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003d5e:	d10d      	bne.n	8003d7c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d60:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <vPortEnterCritical+0x40>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003d68:	d008      	beq.n	8003d7c <vPortEnterCritical+0x38>
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	e7fe      	b.n	8003d7a <vPortEnterCritical+0x36>
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	200001ac 	.word	0x200001ac
 8003d84:	e000ed04 	.word	0xe000ed04

08003d88 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003d88:	4a08      	ldr	r2, [pc, #32]	; (8003dac <vPortExitCritical+0x24>)
 8003d8a:	6813      	ldr	r3, [r2, #0]
 8003d8c:	b943      	cbnz	r3, 8003da0 <vPortExitCritical+0x18>
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	e7fe      	b.n	8003d9e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003da0:	3b01      	subs	r3, #1
 8003da2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003da4:	b90b      	cbnz	r3, 8003daa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	4770      	bx	lr
 8003dac:	200001ac 	.word	0x200001ac

08003db0 <PendSV_Handler>:
	__asm volatile
 8003db0:	f3ef 8009 	mrs	r0, PSP
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <pxCurrentTCBConst>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	f01e 0f10 	tst.w	lr, #16
 8003dc0:	bf08      	it	eq
 8003dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dca:	6010      	str	r0, [r2, #0]
 8003dcc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003dd4:	f380 8811 	msr	BASEPRI, r0
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f000 ffe8 	bl	8004db4 <vTaskSwitchContext>
 8003de4:	f04f 0000 	mov.w	r0, #0
 8003de8:	f380 8811 	msr	BASEPRI, r0
 8003dec:	bc08      	pop	{r3}
 8003dee:	6819      	ldr	r1, [r3, #0]
 8003df0:	6808      	ldr	r0, [r1, #0]
 8003df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df6:	f01e 0f10 	tst.w	lr, #16
 8003dfa:	bf08      	it	eq
 8003dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e00:	f380 8809 	msr	PSP, r0
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	f3af 8000 	nop.w

08003e10 <pxCurrentTCBConst>:
 8003e10:	20004c68 	.word	0x20004c68

08003e14 <xPortSysTickHandler>:
{
 8003e14:	b508      	push	{r3, lr}
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003e26:	f000 fe5d 	bl	8004ae4 <xTaskIncrementTick>
 8003e2a:	b118      	cbz	r0, 8003e34 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e2c:	4b03      	ldr	r3, [pc, #12]	; (8003e3c <xPortSysTickHandler+0x28>)
 8003e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e32:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003e34:	2300      	movs	r3, #0
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	bd08      	pop	{r3, pc}
 8003e3c:	e000ed04 	.word	0xe000ed04

08003e40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <vPortSetupTimerInterrupt+0x1c>)
 8003e42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e4c:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <vPortSetupTimerInterrupt+0x20>)
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e52:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <vPortSetupTimerInterrupt+0x24>)
 8003e54:	2207      	movs	r2, #7
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	200001d0 	.word	0x200001d0
 8003e60:	e000e014 	.word	0xe000e014
 8003e64:	e000e010 	.word	0xe000e010

08003e68 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e68:	4b31      	ldr	r3, [pc, #196]	; (8003f30 <xPortStartScheduler+0xc8>)
 8003e6a:	4a32      	ldr	r2, [pc, #200]	; (8003f34 <xPortStartScheduler+0xcc>)
{
 8003e6c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	4291      	cmp	r1, r2
 8003e72:	d108      	bne.n	8003e86 <xPortStartScheduler+0x1e>
	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	e7fe      	b.n	8003e84 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b2b      	ldr	r3, [pc, #172]	; (8003f38 <xPortStartScheduler+0xd0>)
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d108      	bne.n	8003ea0 <xPortStartScheduler+0x38>
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	e7fe      	b.n	8003e9e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ea0:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <xPortStartScheduler+0xd4>)
 8003ea2:	781a      	ldrb	r2, [r3, #0]
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ea8:	22ff      	movs	r2, #255	; 0xff
 8003eaa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003eac:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003eae:	4a24      	ldr	r2, [pc, #144]	; (8003f40 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003eb6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003eba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ebe:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ec0:	4b20      	ldr	r3, [pc, #128]	; (8003f44 <xPortStartScheduler+0xdc>)
 8003ec2:	2207      	movs	r2, #7
 8003ec4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003ecc:	0600      	lsls	r0, r0, #24
 8003ece:	f102 34ff 	add.w	r4, r2, #4294967295
 8003ed2:	d423      	bmi.n	8003f1c <xPortStartScheduler+0xb4>
 8003ed4:	b101      	cbz	r1, 8003ed8 <xPortStartScheduler+0x70>
 8003ed6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003edc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003ee0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ee2:	9b01      	ldr	r3, [sp, #4]
 8003ee4:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <xPortStartScheduler+0xd4>)
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003eea:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <xPortStartScheduler+0xe0>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003ef2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003efa:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8003efc:	f7ff ffa0 	bl	8003e40 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003f00:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <xPortStartScheduler+0xe4>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8003f06:	f7ff fee9 	bl	8003cdc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f0a:	4a11      	ldr	r2, [pc, #68]	; (8003f50 <xPortStartScheduler+0xe8>)
 8003f0c:	6813      	ldr	r3, [r2, #0]
 8003f0e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f12:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8003f14:	f7ff fed2 	bl	8003cbc <prvPortStartFirstTask>
	prvTaskExitError();
 8003f18:	f7ff feb8 	bl	8003c8c <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f1c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003f20:	0052      	lsls	r2, r2, #1
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	f88d 2003 	strb.w	r2, [sp, #3]
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4622      	mov	r2, r4
 8003f2c:	e7cc      	b.n	8003ec8 <xPortStartScheduler+0x60>
 8003f2e:	bf00      	nop
 8003f30:	e000ed00 	.word	0xe000ed00
 8003f34:	410fc271 	.word	0x410fc271
 8003f38:	410fc270 	.word	0x410fc270
 8003f3c:	e000e400 	.word	0xe000e400
 8003f40:	2000104a 	.word	0x2000104a
 8003f44:	2000104c 	.word	0x2000104c
 8003f48:	e000ed20 	.word	0xe000ed20
 8003f4c:	200001ac 	.word	0x200001ac
 8003f50:	e000ef34 	.word	0xe000ef34

08003f54 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8003f54:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003f58:	2b0f      	cmp	r3, #15
 8003f5a:	d90e      	bls.n	8003f7a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003f5c:	4a10      	ldr	r2, [pc, #64]	; (8003fa0 <vPortValidateInterruptPriority+0x4c>)
 8003f5e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003f60:	4a10      	ldr	r2, [pc, #64]	; (8003fa4 <vPortValidateInterruptPriority+0x50>)
 8003f62:	7812      	ldrb	r2, [r2, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d908      	bls.n	8003f7a <vPortValidateInterruptPriority+0x26>
 8003f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	e7fe      	b.n	8003f78 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <vPortValidateInterruptPriority+0x54>)
 8003f7c:	4a0b      	ldr	r2, [pc, #44]	; (8003fac <vPortValidateInterruptPriority+0x58>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6812      	ldr	r2, [r2, #0]
 8003f82:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d908      	bls.n	8003f9c <vPortValidateInterruptPriority+0x48>
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	e7fe      	b.n	8003f9a <vPortValidateInterruptPriority+0x46>
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	e000e3f0 	.word	0xe000e3f0
 8003fa4:	2000104a 	.word	0x2000104a
 8003fa8:	e000ed0c 	.word	0xe000ed0c
 8003fac:	2000104c 	.word	0x2000104c

08003fb0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003fb0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <prvInsertBlockIntoFreeList+0x40>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4282      	cmp	r2, r0
 8003fb8:	d318      	bcc.n	8003fec <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fba:	685c      	ldr	r4, [r3, #4]
 8003fbc:	1919      	adds	r1, r3, r4
 8003fbe:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fc0:	bf01      	itttt	eq
 8003fc2:	6841      	ldreq	r1, [r0, #4]
 8003fc4:	4618      	moveq	r0, r3
 8003fc6:	1909      	addeq	r1, r1, r4
 8003fc8:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fca:	6844      	ldr	r4, [r0, #4]
 8003fcc:	1901      	adds	r1, r0, r4
 8003fce:	428a      	cmp	r2, r1
 8003fd0:	d107      	bne.n	8003fe2 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fd2:	4908      	ldr	r1, [pc, #32]	; (8003ff4 <prvInsertBlockIntoFreeList+0x44>)
 8003fd4:	6809      	ldr	r1, [r1, #0]
 8003fd6:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fd8:	bf1f      	itttt	ne
 8003fda:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003fdc:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fde:	1909      	addne	r1, r1, r4
 8003fe0:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003fe2:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003fe4:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003fe6:	bf18      	it	ne
 8003fe8:	6018      	strne	r0, [r3, #0]
 8003fea:	bd10      	pop	{r4, pc}
 8003fec:	4613      	mov	r3, r2
 8003fee:	e7e1      	b.n	8003fb4 <prvInsertBlockIntoFreeList+0x4>
 8003ff0:	20004c60 	.word	0x20004c60
 8003ff4:	20001050 	.word	0x20001050

08003ff8 <pvPortMalloc>:
{
 8003ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003ffe:	f000 fd63 	bl	8004ac8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004002:	4940      	ldr	r1, [pc, #256]	; (8004104 <pvPortMalloc+0x10c>)
 8004004:	4d40      	ldr	r5, [pc, #256]	; (8004108 <pvPortMalloc+0x110>)
 8004006:	680b      	ldr	r3, [r1, #0]
 8004008:	bb0b      	cbnz	r3, 800404e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800400a:	4a40      	ldr	r2, [pc, #256]	; (800410c <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800400c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800400e:	bf1f      	itttt	ne
 8004010:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004012:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004016:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800401a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800401c:	bf14      	ite	ne
 800401e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004020:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004024:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8004026:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004028:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800402c:	4e38      	ldr	r6, [pc, #224]	; (8004110 <pvPortMalloc+0x118>)
	pxEnd = ( void * ) uxAddress;
 800402e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004030:	2000      	movs	r0, #0
 8004032:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004034:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8004036:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004038:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800403a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800403c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800403e:	4b35      	ldr	r3, [pc, #212]	; (8004114 <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004040:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004042:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004044:	4b34      	ldr	r3, [pc, #208]	; (8004118 <pvPortMalloc+0x120>)
 8004046:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004048:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800404c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800404e:	682f      	ldr	r7, [r5, #0]
 8004050:	4227      	tst	r7, r4
 8004052:	d116      	bne.n	8004082 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8004054:	2c00      	cmp	r4, #0
 8004056:	d041      	beq.n	80040dc <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8004058:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800405c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800405e:	bf1c      	itt	ne
 8004060:	f023 0307 	bicne.w	r3, r3, #7
 8004064:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004066:	b163      	cbz	r3, 8004082 <pvPortMalloc+0x8a>
 8004068:	4a2b      	ldr	r2, [pc, #172]	; (8004118 <pvPortMalloc+0x120>)
 800406a:	6816      	ldr	r6, [r2, #0]
 800406c:	42b3      	cmp	r3, r6
 800406e:	4690      	mov	r8, r2
 8004070:	d807      	bhi.n	8004082 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8004072:	4a27      	ldr	r2, [pc, #156]	; (8004110 <pvPortMalloc+0x118>)
 8004074:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004076:	6868      	ldr	r0, [r5, #4]
 8004078:	4283      	cmp	r3, r0
 800407a:	d804      	bhi.n	8004086 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 800407c:	6809      	ldr	r1, [r1, #0]
 800407e:	428d      	cmp	r5, r1
 8004080:	d107      	bne.n	8004092 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8004082:	2400      	movs	r4, #0
 8004084:	e02a      	b.n	80040dc <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004086:	682c      	ldr	r4, [r5, #0]
 8004088:	2c00      	cmp	r4, #0
 800408a:	d0f7      	beq.n	800407c <pvPortMalloc+0x84>
 800408c:	462a      	mov	r2, r5
 800408e:	4625      	mov	r5, r4
 8004090:	e7f1      	b.n	8004076 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004092:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004094:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004096:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004098:	1ac2      	subs	r2, r0, r3
 800409a:	2a10      	cmp	r2, #16
 800409c:	d90f      	bls.n	80040be <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800409e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040a0:	0741      	lsls	r1, r0, #29
 80040a2:	d008      	beq.n	80040b6 <pvPortMalloc+0xbe>
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	e7fe      	b.n	80040b4 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80040b6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80040b8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80040ba:	f7ff ff79 	bl	8003fb0 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040be:	4915      	ldr	r1, [pc, #84]	; (8004114 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040c0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040c2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040c4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80040c6:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040c8:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80040ca:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040ce:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80040d2:	bf38      	it	cc
 80040d4:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040d6:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80040d8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80040da:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80040dc:	f000 fd94 	bl	8004c08 <xTaskResumeAll>
		if( pvReturn == NULL )
 80040e0:	b90c      	cbnz	r4, 80040e6 <pvPortMalloc+0xee>
			vApplicationMallocFailedHook();
 80040e2:	f004 feae 	bl	8008e42 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80040e6:	0763      	lsls	r3, r4, #29
 80040e8:	d008      	beq.n	80040fc <pvPortMalloc+0x104>
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	e7fe      	b.n	80040fa <pvPortMalloc+0x102>
}
 80040fc:	4620      	mov	r0, r4
 80040fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004102:	bf00      	nop
 8004104:	20001050 	.word	0x20001050
 8004108:	20004c54 	.word	0x20004c54
 800410c:	20001054 	.word	0x20001054
 8004110:	20004c60 	.word	0x20004c60
 8004114:	20004c5c 	.word	0x20004c5c
 8004118:	20004c58 	.word	0x20004c58

0800411c <vPortFree>:
{
 800411c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800411e:	4604      	mov	r4, r0
 8004120:	b370      	cbz	r0, 8004180 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004122:	4a18      	ldr	r2, [pc, #96]	; (8004184 <vPortFree+0x68>)
 8004124:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004128:	6812      	ldr	r2, [r2, #0]
 800412a:	4213      	tst	r3, r2
 800412c:	d108      	bne.n	8004140 <vPortFree+0x24>
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	e7fe      	b.n	800413e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004140:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004144:	b141      	cbz	r1, 8004158 <vPortFree+0x3c>
 8004146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	e7fe      	b.n	8004156 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004158:	ea23 0302 	bic.w	r3, r3, r2
 800415c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004160:	f000 fcb2 	bl	8004ac8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004164:	4a08      	ldr	r2, [pc, #32]	; (8004188 <vPortFree+0x6c>)
 8004166:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800416a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800416c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004170:	440b      	add	r3, r1
 8004172:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004174:	f7ff ff1c 	bl	8003fb0 <prvInsertBlockIntoFreeList>
}
 8004178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800417c:	f000 bd44 	b.w	8004c08 <xTaskResumeAll>
 8004180:	bd10      	pop	{r4, pc}
 8004182:	bf00      	nop
 8004184:	20004c54 	.word	0x20004c54
 8004188:	20004c58 	.word	0x20004c58

0800418c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004190:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004192:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8004194:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004196:	b942      	cbnz	r2, 80041aa <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004198:	6805      	ldr	r5, [r0, #0]
 800419a:	b99d      	cbnz	r5, 80041c4 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800419c:	6840      	ldr	r0, [r0, #4]
 800419e:	f000 ffd5 	bl	800514c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80041a2:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80041a4:	3601      	adds	r6, #1
 80041a6:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80041a8:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80041aa:	b96d      	cbnz	r5, 80041c8 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80041ac:	6880      	ldr	r0, [r0, #8]
 80041ae:	f005 f860 	bl	8009272 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80041b2:	68a3      	ldr	r3, [r4, #8]
 80041b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80041b6:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041b8:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80041ba:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041bc:	4293      	cmp	r3, r2
 80041be:	d301      	bcc.n	80041c4 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80041c4:	2000      	movs	r0, #0
 80041c6:	e7ed      	b.n	80041a4 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041c8:	68c0      	ldr	r0, [r0, #12]
 80041ca:	f005 f852 	bl	8009272 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80041ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041d0:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041d2:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80041d4:	425b      	negs	r3, r3
 80041d6:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041d8:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80041da:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80041dc:	bf3e      	ittt	cc
 80041de:	6862      	ldrcc	r2, [r4, #4]
 80041e0:	189b      	addcc	r3, r3, r2
 80041e2:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80041e4:	2d02      	cmp	r5, #2
 80041e6:	d1ed      	bne.n	80041c4 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041e8:	b10e      	cbz	r6, 80041ee <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80041ea:	3e01      	subs	r6, #1
 80041ec:	e7ea      	b.n	80041c4 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80041ee:	4630      	mov	r0, r6
 80041f0:	e7d8      	b.n	80041a4 <prvCopyDataToQueue+0x18>

080041f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80041f2:	4603      	mov	r3, r0
 80041f4:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80041f8:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041fa:	b162      	cbz	r2, 8004216 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80041fc:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041fe:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004200:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004202:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004204:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004206:	bf24      	itt	cs
 8004208:	6819      	ldrcs	r1, [r3, #0]
 800420a:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800420c:	68d9      	ldr	r1, [r3, #12]
	}
}
 800420e:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004212:	f005 b82e 	b.w	8009272 <memcpy>
}
 8004216:	f85d 4b04 	ldr.w	r4, [sp], #4
 800421a:	4770      	bx	lr

0800421c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004220:	f7ff fd90 	bl	8003d44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004224:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004228:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800422c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800422e:	2d00      	cmp	r5, #0
 8004230:	dc14      	bgt.n	800425c <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004232:	23ff      	movs	r3, #255	; 0xff
 8004234:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004238:	f7ff fda6 	bl	8003d88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800423c:	f7ff fd82 	bl	8003d44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004240:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004244:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8004248:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800424a:	2d00      	cmp	r5, #0
 800424c:	dc12      	bgt.n	8004274 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800424e:	23ff      	movs	r3, #255	; 0xff
 8004250:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8004254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004258:	f7ff bd96 	b.w	8003d88 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800425c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0e7      	beq.n	8004232 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004262:	4630      	mov	r0, r6
 8004264:	f000 fe3e 	bl	8004ee4 <xTaskRemoveFromEventList>
 8004268:	b108      	cbz	r0, 800426e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800426a:	f000 ff0d 	bl	8005088 <vTaskMissedYield>
 800426e:	3d01      	subs	r5, #1
 8004270:	b26d      	sxtb	r5, r5
 8004272:	e7dc      	b.n	800422e <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004274:	6923      	ldr	r3, [r4, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0e9      	beq.n	800424e <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800427a:	4630      	mov	r0, r6
 800427c:	f000 fe32 	bl	8004ee4 <xTaskRemoveFromEventList>
 8004280:	b108      	cbz	r0, 8004286 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8004282:	f000 ff01 	bl	8005088 <vTaskMissedYield>
 8004286:	3d01      	subs	r5, #1
 8004288:	b26d      	sxtb	r5, r5
 800428a:	e7de      	b.n	800424a <prvUnlockQueue+0x2e>

0800428c <xQueueGenericReset>:
{
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004290:	4604      	mov	r4, r0
 8004292:	b940      	cbnz	r0, 80042a6 <xQueueGenericReset+0x1a>
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	e7fe      	b.n	80042a4 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80042a6:	f7ff fd4d 	bl	8003d44 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80042aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80042ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80042ae:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042b0:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80042b2:	4343      	muls	r3, r0
 80042b4:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80042b6:	1a1b      	subs	r3, r3, r0
 80042b8:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80042ba:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80042bc:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042be:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80042c0:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042c2:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80042c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80042cc:	b995      	cbnz	r5, 80042f4 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042ce:	6923      	ldr	r3, [r4, #16]
 80042d0:	b163      	cbz	r3, 80042ec <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042d2:	f104 0010 	add.w	r0, r4, #16
 80042d6:	f000 fe05 	bl	8004ee4 <xTaskRemoveFromEventList>
 80042da:	b138      	cbz	r0, 80042ec <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80042dc:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <xQueueGenericReset+0x7c>)
 80042de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80042ec:	f7ff fd4c 	bl	8003d88 <vPortExitCritical>
}
 80042f0:	2001      	movs	r0, #1
 80042f2:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042f4:	f104 0010 	add.w	r0, r4, #16
 80042f8:	f7ff fc86 	bl	8003c08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004300:	f7ff fc82 	bl	8003c08 <vListInitialise>
 8004304:	e7f2      	b.n	80042ec <xQueueGenericReset+0x60>
 8004306:	bf00      	nop
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <xQueueGenericCreate>:
	{
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004310:	4606      	mov	r6, r0
 8004312:	b940      	cbnz	r0, 8004326 <xQueueGenericCreate+0x1a>
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	e7fe      	b.n	8004324 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004326:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004328:	3048      	adds	r0, #72	; 0x48
 800432a:	f7ff fe65 	bl	8003ff8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800432e:	4604      	mov	r4, r0
 8004330:	b138      	cbz	r0, 8004342 <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004332:	b945      	cbnz	r5, 8004346 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004334:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004336:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004338:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800433a:	2101      	movs	r1, #1
 800433c:	4620      	mov	r0, r4
 800433e:	f7ff ffa5 	bl	800428c <xQueueGenericReset>
	}
 8004342:	4620      	mov	r0, r4
 8004344:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004346:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800434a:	6003      	str	r3, [r0, #0]
 800434c:	e7f3      	b.n	8004336 <xQueueGenericCreate+0x2a>

0800434e <xQueueCreateCountingSemaphore>:
	{
 800434e:	b510      	push	{r4, lr}
 8004350:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8004352:	b940      	cbnz	r0, 8004366 <xQueueCreateCountingSemaphore+0x18>
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	e7fe      	b.n	8004364 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004366:	4288      	cmp	r0, r1
 8004368:	d208      	bcs.n	800437c <xQueueCreateCountingSemaphore+0x2e>
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	e7fe      	b.n	800437a <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800437c:	2202      	movs	r2, #2
 800437e:	2100      	movs	r1, #0
 8004380:	f7ff ffc4 	bl	800430c <xQueueGenericCreate>
		if( xHandle != NULL )
 8004384:	b100      	cbz	r0, 8004388 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004386:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8004388:	bd10      	pop	{r4, pc}
	...

0800438c <xQueueGenericSend>:
{
 800438c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004390:	4689      	mov	r9, r1
 8004392:	9201      	str	r2, [sp, #4]
 8004394:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004396:	4604      	mov	r4, r0
 8004398:	b940      	cbnz	r0, 80043ac <xQueueGenericSend+0x20>
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	e7fe      	b.n	80043aa <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043ac:	2900      	cmp	r1, #0
 80043ae:	f040 8088 	bne.w	80044c2 <xQueueGenericSend+0x136>
 80043b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8084 	beq.w	80044c2 <xQueueGenericSend+0x136>
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	e7fe      	b.n	80043ca <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043cc:	9e01      	ldr	r6, [sp, #4]
 80043ce:	2e00      	cmp	r6, #0
 80043d0:	f000 8082 	beq.w	80044d8 <xQueueGenericSend+0x14c>
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	e7fe      	b.n	80043e4 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 80043e6:	9d01      	ldr	r5, [sp, #4]
 80043e8:	b91d      	cbnz	r5, 80043f2 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 80043ea:	f7ff fccd 	bl	8003d88 <vPortExitCritical>
			return errQUEUE_FULL;
 80043ee:	2000      	movs	r0, #0
 80043f0:	e058      	b.n	80044a4 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 80043f2:	b916      	cbnz	r6, 80043fa <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 80043f4:	a802      	add	r0, sp, #8
 80043f6:	f000 fdfd 	bl	8004ff4 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80043fa:	f7ff fcc5 	bl	8003d88 <vPortExitCritical>
		vTaskSuspendAll();
 80043fe:	f000 fb63 	bl	8004ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004402:	f7ff fc9f 	bl	8003d44 <vPortEnterCritical>
 8004406:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800440a:	2bff      	cmp	r3, #255	; 0xff
 800440c:	bf08      	it	eq
 800440e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8004412:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004416:	2bff      	cmp	r3, #255	; 0xff
 8004418:	bf08      	it	eq
 800441a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800441e:	f7ff fcb3 	bl	8003d88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004422:	a901      	add	r1, sp, #4
 8004424:	a802      	add	r0, sp, #8
 8004426:	f000 fdf5 	bl	8005014 <xTaskCheckForTimeOut>
 800442a:	2800      	cmp	r0, #0
 800442c:	d143      	bne.n	80044b6 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800442e:	f7ff fc89 	bl	8003d44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004432:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004434:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004436:	f7ff fca7 	bl	8003d88 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800443a:	42ae      	cmp	r6, r5
 800443c:	d135      	bne.n	80044aa <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800443e:	9901      	ldr	r1, [sp, #4]
 8004440:	f104 0010 	add.w	r0, r4, #16
 8004444:	f000 fd08 	bl	8004e58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004448:	4620      	mov	r0, r4
 800444a:	f7ff fee7 	bl	800421c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800444e:	f000 fbdb 	bl	8004c08 <xTaskResumeAll>
 8004452:	b938      	cbnz	r0, 8004464 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8004454:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004458:	f8ca 3000 	str.w	r3, [sl]
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004466:	f7ff fc6d 	bl	8003d44 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800446a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800446c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800446e:	429a      	cmp	r2, r3
 8004470:	d301      	bcc.n	8004476 <xQueueGenericSend+0xea>
 8004472:	2f02      	cmp	r7, #2
 8004474:	d1b7      	bne.n	80043e6 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004476:	463a      	mov	r2, r7
 8004478:	4649      	mov	r1, r9
 800447a:	4620      	mov	r0, r4
 800447c:	f7ff fe86 	bl	800418c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004482:	b11b      	cbz	r3, 800448c <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004484:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004488:	f000 fd2c 	bl	8004ee4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800448c:	b138      	cbz	r0, 800449e <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 800448e:	4b19      	ldr	r3, [pc, #100]	; (80044f4 <xQueueGenericSend+0x168>)
 8004490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800449e:	f7ff fc73 	bl	8003d88 <vPortExitCritical>
				return pdPASS;
 80044a2:	2001      	movs	r0, #1
}
 80044a4:	b004      	add	sp, #16
 80044a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80044aa:	4620      	mov	r0, r4
 80044ac:	f7ff feb6 	bl	800421c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044b0:	f000 fbaa 	bl	8004c08 <xTaskResumeAll>
 80044b4:	e7d6      	b.n	8004464 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80044b6:	4620      	mov	r0, r4
 80044b8:	f7ff feb0 	bl	800421c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044bc:	f000 fba4 	bl	8004c08 <xTaskResumeAll>
 80044c0:	e795      	b.n	80043ee <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044c2:	2f02      	cmp	r7, #2
 80044c4:	d102      	bne.n	80044cc <xQueueGenericSend+0x140>
 80044c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d10a      	bne.n	80044e2 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044cc:	f000 fde8 	bl	80050a0 <xTaskGetSchedulerState>
 80044d0:	2800      	cmp	r0, #0
 80044d2:	f43f af7b 	beq.w	80043cc <xQueueGenericSend+0x40>
 80044d6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80044d8:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80044dc:	f8df a014 	ldr.w	sl, [pc, #20]	; 80044f4 <xQueueGenericSend+0x168>
 80044e0:	e7c1      	b.n	8004466 <xQueueGenericSend+0xda>
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	e7fe      	b.n	80044f2 <xQueueGenericSend+0x166>
 80044f4:	e000ed04 	.word	0xe000ed04

080044f8 <xQueueGenericSendFromISR>:
{
 80044f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044fc:	4688      	mov	r8, r1
 80044fe:	4691      	mov	r9, r2
 8004500:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004502:	4604      	mov	r4, r0
 8004504:	b940      	cbnz	r0, 8004518 <xQueueGenericSendFromISR+0x20>
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	e7fe      	b.n	8004516 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004518:	bb09      	cbnz	r1, 800455e <xQueueGenericSendFromISR+0x66>
 800451a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800451c:	b1fb      	cbz	r3, 800455e <xQueueGenericSendFromISR+0x66>
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	e7fe      	b.n	800452e <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004530:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004534:	f000 fcd6 	bl	8004ee4 <xTaskRemoveFromEventList>
 8004538:	2800      	cmp	r0, #0
 800453a:	d034      	beq.n	80045a6 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 800453c:	f1b9 0f00 	cmp.w	r9, #0
 8004540:	d031      	beq.n	80045a6 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004542:	2001      	movs	r0, #1
 8004544:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8004548:	f386 8811 	msr	BASEPRI, r6
}
 800454c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004550:	3501      	adds	r5, #1
 8004552:	b26d      	sxtb	r5, r5
 8004554:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004558:	e025      	b.n	80045a6 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 800455a:	2000      	movs	r0, #0
 800455c:	e7f4      	b.n	8004548 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800455e:	2f02      	cmp	r7, #2
 8004560:	d102      	bne.n	8004568 <xQueueGenericSendFromISR+0x70>
 8004562:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d120      	bne.n	80045aa <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004568:	f7ff fcf4 	bl	8003f54 <vPortValidateInterruptPriority>
	__asm volatile
 800456c:	f3ef 8611 	mrs	r6, BASEPRI
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004580:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004582:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004584:	429a      	cmp	r2, r3
 8004586:	d301      	bcc.n	800458c <xQueueGenericSendFromISR+0x94>
 8004588:	2f02      	cmp	r7, #2
 800458a:	d1e6      	bne.n	800455a <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 800458c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004590:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8004592:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004594:	4641      	mov	r1, r8
 8004596:	4620      	mov	r0, r4
 8004598:	f7ff fdf8 	bl	800418c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800459c:	1c6b      	adds	r3, r5, #1
 800459e:	d1d7      	bne.n	8004550 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1c4      	bne.n	8004530 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 80045a6:	2001      	movs	r0, #1
 80045a8:	e7ce      	b.n	8004548 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	e7fe      	b.n	80045ba <xQueueGenericSendFromISR+0xc2>

080045bc <xQueueGenericReceive>:
{
 80045bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045c0:	4688      	mov	r8, r1
 80045c2:	9201      	str	r2, [sp, #4]
 80045c4:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 80045c6:	4604      	mov	r4, r0
 80045c8:	b940      	cbnz	r0, 80045dc <xQueueGenericReceive+0x20>
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	e7fe      	b.n	80045da <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045dc:	2900      	cmp	r1, #0
 80045de:	f040 80a5 	bne.w	800472c <xQueueGenericReceive+0x170>
 80045e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80a1 	beq.w	800472c <xQueueGenericReceive+0x170>
 80045ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	e7fe      	b.n	80045fa <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045fc:	9e01      	ldr	r6, [sp, #4]
 80045fe:	2e00      	cmp	r6, #0
 8004600:	f000 809a 	beq.w	8004738 <xQueueGenericReceive+0x17c>
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	e7fe      	b.n	8004614 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004616:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004618:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800461a:	2b00      	cmp	r3, #0
 800461c:	d06d      	beq.n	80046fa <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800461e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004622:	e05f      	b.n	80046e4 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004624:	9d01      	ldr	r5, [sp, #4]
 8004626:	b91d      	cbnz	r5, 8004630 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8004628:	f7ff fbae 	bl	8003d88 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800462c:	4628      	mov	r0, r5
 800462e:	e067      	b.n	8004700 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8004630:	b916      	cbnz	r6, 8004638 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 8004632:	a802      	add	r0, sp, #8
 8004634:	f000 fcde 	bl	8004ff4 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8004638:	f7ff fba6 	bl	8003d88 <vPortExitCritical>
		vTaskSuspendAll();
 800463c:	f000 fa44 	bl	8004ac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004640:	f7ff fb80 	bl	8003d44 <vPortEnterCritical>
 8004644:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004648:	2bff      	cmp	r3, #255	; 0xff
 800464a:	bf08      	it	eq
 800464c:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8004650:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004654:	2bff      	cmp	r3, #255	; 0xff
 8004656:	bf08      	it	eq
 8004658:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800465c:	f7ff fb94 	bl	8003d88 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004660:	a901      	add	r1, sp, #4
 8004662:	a802      	add	r0, sp, #8
 8004664:	f000 fcd6 	bl	8005014 <xTaskCheckForTimeOut>
 8004668:	2800      	cmp	r0, #0
 800466a:	d152      	bne.n	8004712 <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 800466c:	f7ff fb6a 	bl	8003d44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004670:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004672:	f7ff fb89 	bl	8003d88 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004676:	2d00      	cmp	r5, #0
 8004678:	d145      	bne.n	8004706 <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	b933      	cbnz	r3, 800468c <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 800467e:	f7ff fb61 	bl	8003d44 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004682:	6860      	ldr	r0, [r4, #4]
 8004684:	f000 fd1c 	bl	80050c0 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8004688:	f7ff fb7e 	bl	8003d88 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800468c:	9901      	ldr	r1, [sp, #4]
 800468e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004692:	f000 fbe1 	bl	8004e58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004696:	4620      	mov	r0, r4
 8004698:	f7ff fdc0 	bl	800421c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800469c:	f000 fab4 	bl	8004c08 <xTaskResumeAll>
 80046a0:	b938      	cbnz	r0, 80046b2 <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 80046a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046a6:	f8ca 3000 	str.w	r3, [sl]
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80046b4:	f7ff fb46 	bl	8003d44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046b8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046ba:	2d00      	cmp	r5, #0
 80046bc:	d0b2      	beq.n	8004624 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046be:	4641      	mov	r1, r8
 80046c0:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80046c2:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046c4:	f7ff fd95 	bl	80041f2 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80046c8:	f1b9 0f00 	cmp.w	r9, #0
 80046cc:	d1a3      	bne.n	8004616 <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046ce:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80046d0:	3d01      	subs	r5, #1
 80046d2:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046d4:	b913      	cbnz	r3, 80046dc <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80046d6:	f000 fd95 	bl	8005204 <pvTaskIncrementMutexHeldCount>
 80046da:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046dc:	6923      	ldr	r3, [r4, #16]
 80046de:	b163      	cbz	r3, 80046fa <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046e0:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046e4:	f000 fbfe 	bl	8004ee4 <xTaskRemoveFromEventList>
 80046e8:	b138      	cbz	r0, 80046fa <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 80046ea:	4b15      	ldr	r3, [pc, #84]	; (8004740 <xQueueGenericReceive+0x184>)
 80046ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80046fa:	f7ff fb45 	bl	8003d88 <vPortExitCritical>
				return pdPASS;
 80046fe:	2001      	movs	r0, #1
}
 8004700:	b004      	add	sp, #16
 8004702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004706:	4620      	mov	r0, r4
 8004708:	f7ff fd88 	bl	800421c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800470c:	f000 fa7c 	bl	8004c08 <xTaskResumeAll>
 8004710:	e7cf      	b.n	80046b2 <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 8004712:	4620      	mov	r0, r4
 8004714:	f7ff fd82 	bl	800421c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004718:	f000 fa76 	bl	8004c08 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800471c:	f7ff fb12 	bl	8003d44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004720:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004722:	f7ff fb31 	bl	8003d88 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004726:	2d00      	cmp	r5, #0
 8004728:	d1c3      	bne.n	80046b2 <xQueueGenericReceive+0xf6>
 800472a:	e77f      	b.n	800462c <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800472c:	f000 fcb8 	bl	80050a0 <xTaskGetSchedulerState>
 8004730:	2800      	cmp	r0, #0
 8004732:	f43f af63 	beq.w	80045fc <xQueueGenericReceive+0x40>
 8004736:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004738:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800473a:	f8df a004 	ldr.w	sl, [pc, #4]	; 8004740 <xQueueGenericReceive+0x184>
 800473e:	e7b9      	b.n	80046b4 <xQueueGenericReceive+0xf8>
 8004740:	e000ed04 	.word	0xe000ed04

08004744 <uxQueueMessagesWaiting>:
{
 8004744:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8004746:	4604      	mov	r4, r0
 8004748:	b940      	cbnz	r0, 800475c <uxQueueMessagesWaiting+0x18>
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	e7fe      	b.n	800475a <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 800475c:	f7ff faf2 	bl	8003d44 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004760:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004762:	f7ff fb11 	bl	8003d88 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004766:	4620      	mov	r0, r4
 8004768:	bd10      	pop	{r4, pc}
	...

0800476c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800476c:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800476e:	4a07      	ldr	r2, [pc, #28]	; (800478c <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004770:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004772:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8004776:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800477a:	b91d      	cbnz	r5, 8004784 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800477c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004780:	6060      	str	r0, [r4, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004782:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004784:	3301      	adds	r3, #1
 8004786:	2b08      	cmp	r3, #8
 8004788:	d1f3      	bne.n	8004772 <vQueueAddToRegistry+0x6>
 800478a:	bd30      	pop	{r4, r5, pc}
 800478c:	200064c4 	.word	0x200064c4

08004790 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004790:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004792:	4a08      	ldr	r2, [pc, #32]	; (80047b4 <vQueueUnregisterQueue+0x24>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004794:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004796:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800479a:	684c      	ldr	r4, [r1, #4]
 800479c:	4284      	cmp	r4, r0
 800479e:	d104      	bne.n	80047aa <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80047a0:	2000      	movs	r0, #0
 80047a2:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80047a6:	6048      	str	r0, [r1, #4]
				break;
 80047a8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047aa:	3301      	adds	r3, #1
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d1f2      	bne.n	8004796 <vQueueUnregisterQueue+0x6>
 80047b0:	bd10      	pop	{r4, pc}
 80047b2:	bf00      	nop
 80047b4:	200064c4 	.word	0x200064c4

080047b8 <vQueueDelete>:
{
 80047b8:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80047ba:	4604      	mov	r4, r0
 80047bc:	b940      	cbnz	r0, 80047d0 <vQueueDelete+0x18>
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	e7fe      	b.n	80047ce <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 80047d0:	f7ff ffde 	bl	8004790 <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 80047d4:	4620      	mov	r0, r4
}
 80047d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 80047da:	f7ff bc9f 	b.w	800411c <vPortFree>
	...

080047e0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047e0:	4a06      	ldr	r2, [pc, #24]	; (80047fc <prvResetNextTaskUnblockTime+0x1c>)
 80047e2:	6813      	ldr	r3, [r2, #0]
 80047e4:	6819      	ldr	r1, [r3, #0]
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <prvResetNextTaskUnblockTime+0x20>)
 80047e8:	b919      	cbnz	r1, 80047f2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047ea:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047f6:	68d2      	ldr	r2, [r2, #12]
 80047f8:	6852      	ldr	r2, [r2, #4]
 80047fa:	e7f8      	b.n	80047ee <prvResetNextTaskUnblockTime+0xe>
 80047fc:	20004c6c 	.word	0x20004c6c
 8004800:	20004d44 	.word	0x20004d44

08004804 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004806:	4b1b      	ldr	r3, [pc, #108]	; (8004874 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004808:	4e1b      	ldr	r6, [pc, #108]	; (8004878 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800480a:	681d      	ldr	r5, [r3, #0]
{
 800480c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800480e:	6830      	ldr	r0, [r6, #0]
 8004810:	3004      	adds	r0, #4
{
 8004812:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004814:	f7ff fa29 	bl	8003c6a <uxListRemove>
 8004818:	4633      	mov	r3, r6
 800481a:	b940      	cbnz	r0, 800482e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800481c:	6831      	ldr	r1, [r6, #0]
 800481e:	4e17      	ldr	r6, [pc, #92]	; (800487c <prvAddCurrentTaskToDelayedList+0x78>)
 8004820:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004822:	6832      	ldr	r2, [r6, #0]
 8004824:	2001      	movs	r0, #1
 8004826:	4088      	lsls	r0, r1
 8004828:	ea22 0200 	bic.w	r2, r2, r0
 800482c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800482e:	1c62      	adds	r2, r4, #1
 8004830:	d107      	bne.n	8004842 <prvAddCurrentTaskToDelayedList+0x3e>
 8004832:	b137      	cbz	r7, 8004842 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004834:	6819      	ldr	r1, [r3, #0]
 8004836:	4812      	ldr	r0, [pc, #72]	; (8004880 <prvAddCurrentTaskToDelayedList+0x7c>)
 8004838:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800483a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800483e:	f7ff b9f1 	b.w	8003c24 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004842:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004844:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8004846:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004848:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800484a:	d907      	bls.n	800485c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800484c:	4a0d      	ldr	r2, [pc, #52]	; (8004884 <prvAddCurrentTaskToDelayedList+0x80>)
 800484e:	6810      	ldr	r0, [r2, #0]
 8004850:	6819      	ldr	r1, [r3, #0]
}
 8004852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004856:	3104      	adds	r1, #4
 8004858:	f7ff b9f0 	b.w	8003c3c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800485c:	4a0a      	ldr	r2, [pc, #40]	; (8004888 <prvAddCurrentTaskToDelayedList+0x84>)
 800485e:	6810      	ldr	r0, [r2, #0]
 8004860:	6819      	ldr	r1, [r3, #0]
 8004862:	3104      	adds	r1, #4
 8004864:	f7ff f9ea 	bl	8003c3c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004868:	4b08      	ldr	r3, [pc, #32]	; (800488c <prvAddCurrentTaskToDelayedList+0x88>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800486e:	bf38      	it	cc
 8004870:	601c      	strcc	r4, [r3, #0]
 8004872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004874:	20004d8c 	.word	0x20004d8c
 8004878:	20004c68 	.word	0x20004c68
 800487c:	20004d14 	.word	0x20004d14
 8004880:	20004d64 	.word	0x20004d64
 8004884:	20004c70 	.word	0x20004c70
 8004888:	20004c6c 	.word	0x20004c6c
 800488c:	20004d44 	.word	0x20004d44

08004890 <prvTaskIsTaskSuspended.part.0>:
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	e7fe      	b.n	80048a0 <prvTaskIsTaskSuspended.part.0+0x10>
	...

080048a4 <xTaskCreate>:
	{
 80048a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80048ac:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ae:	4650      	mov	r0, sl
	{
 80048b0:	460d      	mov	r5, r1
 80048b2:	4699      	mov	r9, r3
 80048b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b6:	f7ff fb9f 	bl	8003ff8 <pvPortMalloc>
			if( pxStack != NULL )
 80048ba:	4607      	mov	r7, r0
 80048bc:	2800      	cmp	r0, #0
 80048be:	f000 809c 	beq.w	80049fa <xTaskCreate+0x156>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80048c2:	2054      	movs	r0, #84	; 0x54
 80048c4:	f7ff fb98 	bl	8003ff8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80048c8:	4604      	mov	r4, r0
 80048ca:	2800      	cmp	r0, #0
 80048cc:	f000 8092 	beq.w	80049f4 <xTaskCreate+0x150>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80048d0:	4652      	mov	r2, sl
					pxNewTCB->pxStack = pxStack;
 80048d2:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80048d4:	21a5      	movs	r1, #165	; 0xa5
 80048d6:	4638      	mov	r0, r7
 80048d8:	f004 fcf0 	bl	80092bc <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80048dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048de:	f1aa 0a04 	sub.w	sl, sl, #4
 80048e2:	449a      	add	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80048e4:	f02a 0a07 	bic.w	sl, sl, #7
 80048e8:	1e6b      	subs	r3, r5, #1
 80048ea:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80048ee:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048f0:	7859      	ldrb	r1, [r3, #1]
 80048f2:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80048f6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80048fa:	b109      	cbz	r1, 8004900 <xTaskCreate+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048fc:	42ab      	cmp	r3, r5
 80048fe:	d1f7      	bne.n	80048f0 <xTaskCreate+0x4c>
 8004900:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004902:	2d06      	cmp	r5, #6
 8004904:	bf28      	it	cs
 8004906:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004908:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800490c:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800490e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004910:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004912:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004914:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8004918:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800491c:	f7ff f97f 	bl	8003c1e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004920:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004924:	f104 0018 	add.w	r0, r4, #24
 8004928:	f7ff f979 	bl	8003c1e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800492c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004930:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004932:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004934:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004936:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800493a:	464a      	mov	r2, r9
 800493c:	4641      	mov	r1, r8
 800493e:	4650      	mov	r0, sl
 8004940:	f7ff f9d6 	bl	8003cf0 <pxPortInitialiseStack>
 8004944:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8004946:	b106      	cbz	r6, 800494a <xTaskCreate+0xa6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004948:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800494a:	f7ff f9fb 	bl	8003d44 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800494e:	4b32      	ldr	r3, [pc, #200]	; (8004a18 <xTaskCreate+0x174>)
		if( pxCurrentTCB == NULL )
 8004950:	4e32      	ldr	r6, [pc, #200]	; (8004a1c <xTaskCreate+0x178>)
		uxCurrentNumberOfTasks++;
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8004a48 <xTaskCreate+0x1a4>
 8004958:	3201      	adds	r2, #1
 800495a:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800495c:	6835      	ldr	r5, [r6, #0]
 800495e:	2d00      	cmp	r5, #0
 8004960:	d14e      	bne.n	8004a00 <xTaskCreate+0x15c>
			pxCurrentTCB = pxNewTCB;
 8004962:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d11d      	bne.n	80049a6 <xTaskCreate+0x102>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800496a:	eb08 0005 	add.w	r0, r8, r5
 800496e:	3514      	adds	r5, #20
 8004970:	f7ff f94a 	bl	8003c08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004974:	2d8c      	cmp	r5, #140	; 0x8c
 8004976:	d1f8      	bne.n	800496a <xTaskCreate+0xc6>
	vListInitialise( &xDelayedTaskList1 );
 8004978:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004a4c <xTaskCreate+0x1a8>
	vListInitialise( &xDelayedTaskList2 );
 800497c:	4d28      	ldr	r5, [pc, #160]	; (8004a20 <xTaskCreate+0x17c>)
	vListInitialise( &xDelayedTaskList1 );
 800497e:	4648      	mov	r0, r9
 8004980:	f7ff f942 	bl	8003c08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004984:	4628      	mov	r0, r5
 8004986:	f7ff f93f 	bl	8003c08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800498a:	4826      	ldr	r0, [pc, #152]	; (8004a24 <xTaskCreate+0x180>)
 800498c:	f7ff f93c 	bl	8003c08 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004990:	4825      	ldr	r0, [pc, #148]	; (8004a28 <xTaskCreate+0x184>)
 8004992:	f7ff f939 	bl	8003c08 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004996:	4825      	ldr	r0, [pc, #148]	; (8004a2c <xTaskCreate+0x188>)
 8004998:	f7ff f936 	bl	8003c08 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800499c:	4b24      	ldr	r3, [pc, #144]	; (8004a30 <xTaskCreate+0x18c>)
 800499e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049a2:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <xTaskCreate+0x190>)
 80049a4:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80049a6:	4a24      	ldr	r2, [pc, #144]	; (8004a38 <xTaskCreate+0x194>)
		prvAddTaskToReadyList( pxNewTCB );
 80049a8:	4924      	ldr	r1, [pc, #144]	; (8004a3c <xTaskCreate+0x198>)
		uxTaskNumber++;
 80049aa:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80049ac:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80049ae:	3301      	adds	r3, #1
 80049b0:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80049b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80049b4:	2501      	movs	r5, #1
 80049b6:	fa05 f302 	lsl.w	r3, r5, r2
 80049ba:	4303      	orrs	r3, r0
 80049bc:	2014      	movs	r0, #20
 80049be:	600b      	str	r3, [r1, #0]
 80049c0:	fb00 8002 	mla	r0, r0, r2, r8
 80049c4:	4639      	mov	r1, r7
 80049c6:	f7ff f92d 	bl	8003c24 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80049ca:	f7ff f9dd 	bl	8003d88 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80049ce:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <xTaskCreate+0x19c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	b163      	cbz	r3, 80049ee <xTaskCreate+0x14a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049d4:	6833      	ldr	r3, [r6, #0]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049da:	429a      	cmp	r2, r3
 80049dc:	d207      	bcs.n	80049ee <xTaskCreate+0x14a>
			taskYIELD_IF_USING_PREEMPTION();
 80049de:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <xTaskCreate+0x1a0>)
 80049e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	f3bf 8f6f 	isb	sy
	}
 80049ee:	4628      	mov	r0, r5
 80049f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80049f4:	4638      	mov	r0, r7
 80049f6:	f7ff fb91 	bl	800411c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049fa:	f04f 35ff 	mov.w	r5, #4294967295
 80049fe:	e7f6      	b.n	80049ee <xTaskCreate+0x14a>
			if( xSchedulerRunning == pdFALSE )
 8004a00:	4b0f      	ldr	r3, [pc, #60]	; (8004a40 <xTaskCreate+0x19c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1ce      	bne.n	80049a6 <xTaskCreate+0x102>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a08:	6833      	ldr	r3, [r6, #0]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a0e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8004a10:	bf98      	it	ls
 8004a12:	6034      	strls	r4, [r6, #0]
 8004a14:	e7c7      	b.n	80049a6 <xTaskCreate+0x102>
 8004a16:	bf00      	nop
 8004a18:	20004d00 	.word	0x20004d00
 8004a1c:	20004c68 	.word	0x20004c68
 8004a20:	20004d2c 	.word	0x20004d2c
 8004a24:	20004d4c 	.word	0x20004d4c
 8004a28:	20004d78 	.word	0x20004d78
 8004a2c:	20004d64 	.word	0x20004d64
 8004a30:	20004c6c 	.word	0x20004c6c
 8004a34:	20004c70 	.word	0x20004c70
 8004a38:	20004d10 	.word	0x20004d10
 8004a3c:	20004d14 	.word	0x20004d14
 8004a40:	20004d60 	.word	0x20004d60
 8004a44:	e000ed04 	.word	0xe000ed04
 8004a48:	20004c74 	.word	0x20004c74
 8004a4c:	20004d18 	.word	0x20004d18

08004a50 <vTaskStartScheduler>:
{
 8004a50:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8004a52:	4b17      	ldr	r3, [pc, #92]	; (8004ab0 <vTaskStartScheduler+0x60>)
 8004a54:	9301      	str	r3, [sp, #4]
 8004a56:	2400      	movs	r4, #0
 8004a58:	9400      	str	r4, [sp, #0]
 8004a5a:	4623      	mov	r3, r4
 8004a5c:	2280      	movs	r2, #128	; 0x80
 8004a5e:	4915      	ldr	r1, [pc, #84]	; (8004ab4 <vTaskStartScheduler+0x64>)
 8004a60:	4815      	ldr	r0, [pc, #84]	; (8004ab8 <vTaskStartScheduler+0x68>)
 8004a62:	f7ff ff1f 	bl	80048a4 <xTaskCreate>
	if( xReturn == pdPASS )
 8004a66:	2801      	cmp	r0, #1
 8004a68:	d114      	bne.n	8004a94 <vTaskStartScheduler+0x44>
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a7a:	4b10      	ldr	r3, [pc, #64]	; (8004abc <vTaskStartScheduler+0x6c>)
 8004a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a82:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <vTaskStartScheduler+0x70>)
 8004a84:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004a86:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <vTaskStartScheduler+0x74>)
 8004a88:	601c      	str	r4, [r3, #0]
}
 8004a8a:	b002      	add	sp, #8
 8004a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004a90:	f7ff b9ea 	b.w	8003e68 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a94:	3001      	adds	r0, #1
 8004a96:	d108      	bne.n	8004aaa <vTaskStartScheduler+0x5a>
 8004a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	e7fe      	b.n	8004aa8 <vTaskStartScheduler+0x58>
}
 8004aaa:	b002      	add	sp, #8
 8004aac:	bd10      	pop	{r4, pc}
 8004aae:	bf00      	nop
 8004ab0:	20004d40 	.word	0x20004d40
 8004ab4:	0800970d 	.word	0x0800970d
 8004ab8:	08004d41 	.word	0x08004d41
 8004abc:	20004d44 	.word	0x20004d44
 8004ac0:	20004d60 	.word	0x20004d60
 8004ac4:	20004d8c 	.word	0x20004d8c

08004ac8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004ac8:	4a02      	ldr	r2, [pc, #8]	; (8004ad4 <vTaskSuspendAll+0xc>)
 8004aca:	6813      	ldr	r3, [r2, #0]
 8004acc:	3301      	adds	r3, #1
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20004d0c 	.word	0x20004d0c

08004ad8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004ad8:	4b01      	ldr	r3, [pc, #4]	; (8004ae0 <xTaskGetTickCount+0x8>)
 8004ada:	6818      	ldr	r0, [r3, #0]
}
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20004d8c 	.word	0x20004d8c

08004ae4 <xTaskIncrementTick>:
{
 8004ae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ae8:	4b3c      	ldr	r3, [pc, #240]	; (8004bdc <xTaskIncrementTick+0xf8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d153      	bne.n	8004b98 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8004af0:	4b3b      	ldr	r3, [pc, #236]	; (8004be0 <xTaskIncrementTick+0xfc>)
 8004af2:	681c      	ldr	r4, [r3, #0]
 8004af4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8004af6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8004af8:	b9bc      	cbnz	r4, 8004b2a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004afa:	4b3a      	ldr	r3, [pc, #232]	; (8004be4 <xTaskIncrementTick+0x100>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	6812      	ldr	r2, [r2, #0]
 8004b00:	b142      	cbz	r2, 8004b14 <xTaskIncrementTick+0x30>
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	e7fe      	b.n	8004b12 <xTaskIncrementTick+0x2e>
 8004b14:	4a34      	ldr	r2, [pc, #208]	; (8004be8 <xTaskIncrementTick+0x104>)
 8004b16:	6819      	ldr	r1, [r3, #0]
 8004b18:	6810      	ldr	r0, [r2, #0]
 8004b1a:	6018      	str	r0, [r3, #0]
 8004b1c:	6011      	str	r1, [r2, #0]
 8004b1e:	4a33      	ldr	r2, [pc, #204]	; (8004bec <xTaskIncrementTick+0x108>)
 8004b20:	6813      	ldr	r3, [r2, #0]
 8004b22:	3301      	adds	r3, #1
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	f7ff fe5b 	bl	80047e0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b2a:	4d31      	ldr	r5, [pc, #196]	; (8004bf0 <xTaskIncrementTick+0x10c>)
 8004b2c:	4f31      	ldr	r7, [pc, #196]	; (8004bf4 <xTaskIncrementTick+0x110>)
 8004b2e:	682b      	ldr	r3, [r5, #0]
 8004b30:	429c      	cmp	r4, r3
 8004b32:	f04f 0b00 	mov.w	fp, #0
 8004b36:	d33e      	bcc.n	8004bb6 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b38:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004be4 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8004b3c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004c04 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b40:	f8d8 2000 	ldr.w	r2, [r8]
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	bb72      	cbnz	r2, 8004ba6 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b48:	f04f 32ff 	mov.w	r2, #4294967295
 8004b4c:	602a      	str	r2, [r5, #0]
					break;
 8004b4e:	e032      	b.n	8004bb6 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b50:	f106 0a04 	add.w	sl, r6, #4
 8004b54:	4650      	mov	r0, sl
 8004b56:	f7ff f888 	bl	8003c6a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b5a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8004b5c:	b119      	cbz	r1, 8004b66 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b5e:	f106 0018 	add.w	r0, r6, #24
 8004b62:	f7ff f882 	bl	8003c6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b66:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004b68:	f8d9 3000 	ldr.w	r3, [r9]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	fa02 f100 	lsl.w	r1, r2, r0
 8004b72:	4319      	orrs	r1, r3
 8004b74:	4b20      	ldr	r3, [pc, #128]	; (8004bf8 <xTaskIncrementTick+0x114>)
 8004b76:	f8c9 1000 	str.w	r1, [r9]
 8004b7a:	f04f 0e14 	mov.w	lr, #20
 8004b7e:	4651      	mov	r1, sl
 8004b80:	fb0e 3000 	mla	r0, lr, r0, r3
 8004b84:	f7ff f84e 	bl	8003c24 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b88:	6838      	ldr	r0, [r7, #0]
 8004b8a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8004b8c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004b8e:	4291      	cmp	r1, r2
 8004b90:	bf28      	it	cs
 8004b92:	f04f 0b01 	movcs.w	fp, #1
 8004b96:	e7d3      	b.n	8004b40 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8004b98:	4a18      	ldr	r2, [pc, #96]	; (8004bfc <xTaskIncrementTick+0x118>)
 8004b9a:	6813      	ldr	r3, [r2, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004ba0:	f04f 0b00 	mov.w	fp, #0
 8004ba4:	e011      	b.n	8004bca <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ba6:	f8d8 2000 	ldr.w	r2, [r8]
 8004baa:	68d2      	ldr	r2, [r2, #12]
 8004bac:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bae:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004bb0:	428c      	cmp	r4, r1
 8004bb2:	d2cd      	bcs.n	8004b50 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8004bb4:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	4b0f      	ldr	r3, [pc, #60]	; (8004bf8 <xTaskIncrementTick+0x114>)
 8004bba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004bbc:	2214      	movs	r2, #20
 8004bbe:	434a      	muls	r2, r1
 8004bc0:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8004bc2:	2a02      	cmp	r2, #2
 8004bc4:	bf28      	it	cs
 8004bc6:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8004bca:	4a0d      	ldr	r2, [pc, #52]	; (8004c00 <xTaskIncrementTick+0x11c>)
 8004bcc:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8004bce:	2a00      	cmp	r2, #0
 8004bd0:	bf18      	it	ne
 8004bd2:	f04f 0b01 	movne.w	fp, #1
}
 8004bd6:	4658      	mov	r0, fp
 8004bd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bdc:	20004d0c 	.word	0x20004d0c
 8004be0:	20004d8c 	.word	0x20004d8c
 8004be4:	20004c6c 	.word	0x20004c6c
 8004be8:	20004c70 	.word	0x20004c70
 8004bec:	20004d48 	.word	0x20004d48
 8004bf0:	20004d44 	.word	0x20004d44
 8004bf4:	20004c68 	.word	0x20004c68
 8004bf8:	20004c74 	.word	0x20004c74
 8004bfc:	20004d08 	.word	0x20004d08
 8004c00:	20004d90 	.word	0x20004d90
 8004c04:	20004d14 	.word	0x20004d14

08004c08 <xTaskResumeAll>:
{
 8004c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8004c0c:	4c31      	ldr	r4, [pc, #196]	; (8004cd4 <xTaskResumeAll+0xcc>)
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	b943      	cbnz	r3, 8004c24 <xTaskResumeAll+0x1c>
 8004c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	e7fe      	b.n	8004c22 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8004c24:	f7ff f88e 	bl	8003d44 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c2e:	6824      	ldr	r4, [r4, #0]
 8004c30:	b12c      	cbz	r4, 8004c3e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004c32:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004c34:	f7ff f8a8 	bl	8003d88 <vPortExitCritical>
}
 8004c38:	4620      	mov	r0, r4
 8004c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c3e:	4b26      	ldr	r3, [pc, #152]	; (8004cd8 <xTaskResumeAll+0xd0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f5      	beq.n	8004c32 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c46:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004cf0 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8004c4a:	4f24      	ldr	r7, [pc, #144]	; (8004cdc <xTaskResumeAll+0xd4>)
 8004c4c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004cf4 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c50:	f8d9 3000 	ldr.w	r3, [r9]
 8004c54:	b9e3      	cbnz	r3, 8004c90 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8004c56:	b10c      	cbz	r4, 8004c5c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8004c58:	f7ff fdc2 	bl	80047e0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c5c:	4d20      	ldr	r5, [pc, #128]	; (8004ce0 <xTaskResumeAll+0xd8>)
 8004c5e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c60:	b144      	cbz	r4, 8004c74 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8004c62:	4e20      	ldr	r6, [pc, #128]	; (8004ce4 <xTaskResumeAll+0xdc>)
 8004c64:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004c66:	f7ff ff3d 	bl	8004ae4 <xTaskIncrementTick>
 8004c6a:	b100      	cbz	r0, 8004c6e <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8004c6c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c6e:	3c01      	subs	r4, #1
 8004c70:	d1f9      	bne.n	8004c66 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8004c72:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004c74:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <xTaskResumeAll+0xdc>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0da      	beq.n	8004c32 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004c7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ce8 <xTaskResumeAll+0xe0>)
 8004c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004c8c:	2401      	movs	r4, #1
 8004c8e:	e7d1      	b.n	8004c34 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004c90:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004c94:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c96:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c98:	f104 0018 	add.w	r0, r4, #24
 8004c9c:	f7fe ffe5 	bl	8003c6a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	f7fe ffe2 	bl	8003c6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ca6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ca8:	6839      	ldr	r1, [r7, #0]
 8004caa:	2501      	movs	r5, #1
 8004cac:	fa05 f302 	lsl.w	r3, r5, r2
 8004cb0:	2014      	movs	r0, #20
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	fb00 8002 	mla	r0, r0, r2, r8
 8004cb8:	4631      	mov	r1, r6
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	f7fe ffb2 	bl	8003c24 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cc0:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <xTaskResumeAll+0xe4>)
 8004cc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8004cca:	bf24      	itt	cs
 8004ccc:	4b05      	ldrcs	r3, [pc, #20]	; (8004ce4 <xTaskResumeAll+0xdc>)
 8004cce:	601d      	strcs	r5, [r3, #0]
 8004cd0:	e7be      	b.n	8004c50 <xTaskResumeAll+0x48>
 8004cd2:	bf00      	nop
 8004cd4:	20004d0c 	.word	0x20004d0c
 8004cd8:	20004d00 	.word	0x20004d00
 8004cdc:	20004d14 	.word	0x20004d14
 8004ce0:	20004d08 	.word	0x20004d08
 8004ce4:	20004d90 	.word	0x20004d90
 8004ce8:	e000ed04 	.word	0xe000ed04
 8004cec:	20004c68 	.word	0x20004c68
 8004cf0:	20004d4c 	.word	0x20004d4c
 8004cf4:	20004c74 	.word	0x20004c74

08004cf8 <vTaskDelay>:
	{
 8004cf8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004cfa:	b940      	cbnz	r0, 8004d0e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004cfc:	4b0e      	ldr	r3, [pc, #56]	; (8004d38 <vTaskDelay+0x40>)
 8004cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <vTaskDelay+0x44>)
 8004d10:	6819      	ldr	r1, [r3, #0]
 8004d12:	b141      	cbz	r1, 8004d26 <vTaskDelay+0x2e>
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	e7fe      	b.n	8004d24 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004d26:	f7ff fecf 	bl	8004ac8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d2a:	f7ff fd6b 	bl	8004804 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004d2e:	f7ff ff6b 	bl	8004c08 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d0e2      	beq.n	8004cfc <vTaskDelay+0x4>
 8004d36:	bd08      	pop	{r3, pc}
 8004d38:	e000ed04 	.word	0xe000ed04
 8004d3c:	20004d0c 	.word	0x20004d0c

08004d40 <prvIdleTask>:
{
 8004d40:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004d42:	4e17      	ldr	r6, [pc, #92]	; (8004da0 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d44:	4c17      	ldr	r4, [pc, #92]	; (8004da4 <prvIdleTask+0x64>)
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	b963      	cbnz	r3, 8004d64 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d4a:	4b17      	ldr	r3, [pc, #92]	; (8004da8 <prvIdleTask+0x68>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d9f8      	bls.n	8004d44 <prvIdleTask+0x4>
				taskYIELD();
 8004d52:	4b16      	ldr	r3, [pc, #88]	; (8004dac <prvIdleTask+0x6c>)
 8004d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	e7ef      	b.n	8004d44 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8004d64:	f7ff feb0 	bl	8004ac8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004d68:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8004d6a:	f7ff ff4d 	bl	8004c08 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8004d6e:	2d00      	cmp	r5, #0
 8004d70:	d0e9      	beq.n	8004d46 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8004d72:	f7fe ffe7 	bl	8003d44 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004d76:	68f3      	ldr	r3, [r6, #12]
 8004d78:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d7a:	1d28      	adds	r0, r5, #4
 8004d7c:	f7fe ff75 	bl	8003c6a <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004d80:	4a0b      	ldr	r2, [pc, #44]	; (8004db0 <prvIdleTask+0x70>)
 8004d82:	6813      	ldr	r3, [r2, #0]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8004d8e:	f7fe fffb 	bl	8003d88 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8004d92:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004d94:	f7ff f9c2 	bl	800411c <vPortFree>
			vPortFree( pxTCB );
 8004d98:	4628      	mov	r0, r5
 8004d9a:	f7ff f9bf 	bl	800411c <vPortFree>
 8004d9e:	e7d2      	b.n	8004d46 <prvIdleTask+0x6>
 8004da0:	20004d78 	.word	0x20004d78
 8004da4:	20004d04 	.word	0x20004d04
 8004da8:	20004c74 	.word	0x20004c74
 8004dac:	e000ed04 	.word	0xe000ed04
 8004db0:	20004d00 	.word	0x20004d00

08004db4 <vTaskSwitchContext>:
{
 8004db4:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004db6:	4b23      	ldr	r3, [pc, #140]	; (8004e44 <vTaskSwitchContext+0x90>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4b23      	ldr	r3, [pc, #140]	; (8004e48 <vTaskSwitchContext+0x94>)
 8004dbc:	b112      	cbz	r2, 8004dc4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8004dc4:	4c21      	ldr	r4, [pc, #132]	; (8004e4c <vTaskSwitchContext+0x98>)
		xYieldPending = pdFALSE;
 8004dc6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8004dd2:	d10b      	bne.n	8004dec <vTaskSwitchContext+0x38>
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8004dda:	d107      	bne.n	8004dec <vTaskSwitchContext+0x38>
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8004de2:	d103      	bne.n	8004dec <vTaskSwitchContext+0x38>
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8004dea:	d004      	beq.n	8004df6 <vTaskSwitchContext+0x42>
 8004dec:	6820      	ldr	r0, [r4, #0]
 8004dee:	6821      	ldr	r1, [r4, #0]
 8004df0:	3134      	adds	r1, #52	; 0x34
 8004df2:	f004 f825 	bl	8008e40 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004df6:	4b16      	ldr	r3, [pc, #88]	; (8004e50 <vTaskSwitchContext+0x9c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004dfa:	fab3 f383 	clz	r3, r3
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	f1c3 031f 	rsb	r3, r3, #31
 8004e04:	2214      	movs	r2, #20
 8004e06:	4913      	ldr	r1, [pc, #76]	; (8004e54 <vTaskSwitchContext+0xa0>)
 8004e08:	435a      	muls	r2, r3
 8004e0a:	1888      	adds	r0, r1, r2
 8004e0c:	588d      	ldr	r5, [r1, r2]
 8004e0e:	b945      	cbnz	r5, 8004e22 <vTaskSwitchContext+0x6e>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	e7fe      	b.n	8004e20 <vTaskSwitchContext+0x6c>
 8004e22:	6845      	ldr	r5, [r0, #4]
 8004e24:	3208      	adds	r2, #8
 8004e26:	686d      	ldr	r5, [r5, #4]
 8004e28:	6045      	str	r5, [r0, #4]
 8004e2a:	440a      	add	r2, r1
 8004e2c:	4295      	cmp	r5, r2
 8004e2e:	bf04      	itt	eq
 8004e30:	686a      	ldreq	r2, [r5, #4]
 8004e32:	6042      	streq	r2, [r0, #4]
 8004e34:	2214      	movs	r2, #20
 8004e36:	fb02 1303 	mla	r3, r2, r3, r1
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	bd38      	pop	{r3, r4, r5, pc}
 8004e42:	bf00      	nop
 8004e44:	20004d0c 	.word	0x20004d0c
 8004e48:	20004d90 	.word	0x20004d90
 8004e4c:	20004c68 	.word	0x20004c68
 8004e50:	20004d14 	.word	0x20004d14
 8004e54:	20004c74 	.word	0x20004c74

08004e58 <vTaskPlaceOnEventList>:
{
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004e5c:	b940      	cbnz	r0, 8004e70 <vTaskPlaceOnEventList+0x18>
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	e7fe      	b.n	8004e6e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <vTaskPlaceOnEventList+0x30>)
 8004e72:	6819      	ldr	r1, [r3, #0]
 8004e74:	3118      	adds	r1, #24
 8004e76:	f7fe fee1 	bl	8003c3c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	2101      	movs	r1, #1
}
 8004e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e82:	f7ff bcbf 	b.w	8004804 <prvAddCurrentTaskToDelayedList>
 8004e86:	bf00      	nop
 8004e88:	20004c68 	.word	0x20004c68

08004e8c <vTaskPlaceOnUnorderedEventList>:
{
 8004e8c:	b510      	push	{r4, lr}
 8004e8e:	4614      	mov	r4, r2
	configASSERT( pxEventList );
 8004e90:	b940      	cbnz	r0, 8004ea4 <vTaskPlaceOnUnorderedEventList+0x18>
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	e7fe      	b.n	8004ea2 <vTaskPlaceOnUnorderedEventList+0x16>
	configASSERT( uxSchedulerSuspended != 0 );
 8004ea4:	4b0d      	ldr	r3, [pc, #52]	; (8004edc <vTaskPlaceOnUnorderedEventList+0x50>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	b943      	cbnz	r3, 8004ebc <vTaskPlaceOnUnorderedEventList+0x30>
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	e7fe      	b.n	8004eba <vTaskPlaceOnUnorderedEventList+0x2e>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004ebc:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <vTaskPlaceOnUnorderedEventList+0x54>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004ec4:	6191      	str	r1, [r2, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ec6:	6819      	ldr	r1, [r3, #0]
 8004ec8:	3118      	adds	r1, #24
 8004eca:	f7fe feab 	bl	8003c24 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ece:	4620      	mov	r0, r4
 8004ed0:	2101      	movs	r1, #1
}
 8004ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ed6:	f7ff bc95 	b.w	8004804 <prvAddCurrentTaskToDelayedList>
 8004eda:	bf00      	nop
 8004edc:	20004d0c 	.word	0x20004d0c
 8004ee0:	20004c68 	.word	0x20004c68

08004ee4 <xTaskRemoveFromEventList>:
{
 8004ee4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004ee6:	68c3      	ldr	r3, [r0, #12]
 8004ee8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004eea:	b944      	cbnz	r4, 8004efe <xTaskRemoveFromEventList+0x1a>
 8004eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef0:	f383 8811 	msr	BASEPRI, r3
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	e7fe      	b.n	8004efc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004efe:	f104 0518 	add.w	r5, r4, #24
 8004f02:	4628      	mov	r0, r5
 8004f04:	f7fe feb1 	bl	8003c6a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f08:	4b11      	ldr	r3, [pc, #68]	; (8004f50 <xTaskRemoveFromEventList+0x6c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	b9e3      	cbnz	r3, 8004f48 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f0e:	1d25      	adds	r5, r4, #4
 8004f10:	4628      	mov	r0, r5
 8004f12:	f7fe feaa 	bl	8003c6a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f16:	490f      	ldr	r1, [pc, #60]	; (8004f54 <xTaskRemoveFromEventList+0x70>)
 8004f18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004f1a:	6808      	ldr	r0, [r1, #0]
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	4093      	lsls	r3, r2
 8004f20:	4303      	orrs	r3, r0
 8004f22:	600b      	str	r3, [r1, #0]
 8004f24:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <xTaskRemoveFromEventList+0x74>)
 8004f26:	2014      	movs	r0, #20
 8004f28:	4629      	mov	r1, r5
 8004f2a:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f2e:	f7fe fe79 	bl	8003c24 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f32:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <xTaskRemoveFromEventList+0x78>)
 8004f34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004f3c:	bf83      	ittte	hi
 8004f3e:	4b08      	ldrhi	r3, [pc, #32]	; (8004f60 <xTaskRemoveFromEventList+0x7c>)
 8004f40:	2001      	movhi	r0, #1
 8004f42:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8004f44:	2000      	movls	r0, #0
}
 8004f46:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f48:	4629      	mov	r1, r5
 8004f4a:	4806      	ldr	r0, [pc, #24]	; (8004f64 <xTaskRemoveFromEventList+0x80>)
 8004f4c:	e7ef      	b.n	8004f2e <xTaskRemoveFromEventList+0x4a>
 8004f4e:	bf00      	nop
 8004f50:	20004d0c 	.word	0x20004d0c
 8004f54:	20004d14 	.word	0x20004d14
 8004f58:	20004c74 	.word	0x20004c74
 8004f5c:	20004c68 	.word	0x20004c68
 8004f60:	20004d90 	.word	0x20004d90
 8004f64:	20004d4c 	.word	0x20004d4c

08004f68 <xTaskRemoveFromUnorderedEventList>:
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004f68:	4a1d      	ldr	r2, [pc, #116]	; (8004fe0 <xTaskRemoveFromUnorderedEventList+0x78>)
 8004f6a:	6812      	ldr	r2, [r2, #0]
{
 8004f6c:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004f6e:	b942      	cbnz	r2, 8004f82 <xTaskRemoveFromUnorderedEventList+0x1a>
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	e7fe      	b.n	8004f80 <xTaskRemoveFromUnorderedEventList+0x18>
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8004f82:	68c5      	ldr	r5, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004f84:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004f88:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
 8004f8a:	b945      	cbnz	r5, 8004f9e <xTaskRemoveFromUnorderedEventList+0x36>
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	e7fe      	b.n	8004f9c <xTaskRemoveFromUnorderedEventList+0x34>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f9e:	1d2e      	adds	r6, r5, #4
	( void ) uxListRemove( pxEventListItem );
 8004fa0:	f7fe fe63 	bl	8003c6a <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	f7fe fe60 	bl	8003c6a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004faa:	490e      	ldr	r1, [pc, #56]	; (8004fe4 <xTaskRemoveFromUnorderedEventList+0x7c>)
 8004fac:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004fae:	6808      	ldr	r0, [r1, #0]
 8004fb0:	2401      	movs	r4, #1
 8004fb2:	fa04 f302 	lsl.w	r3, r4, r2
 8004fb6:	4303      	orrs	r3, r0
 8004fb8:	600b      	str	r3, [r1, #0]
 8004fba:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <xTaskRemoveFromUnorderedEventList+0x80>)
 8004fbc:	2014      	movs	r0, #20
 8004fbe:	fb00 3002 	mla	r0, r0, r2, r3
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	f7fe fe2e 	bl	8003c24 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fc8:	4b08      	ldr	r3, [pc, #32]	; (8004fec <xTaskRemoveFromUnorderedEventList+0x84>)
 8004fca:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004fd2:	bf83      	ittte	hi
 8004fd4:	4b06      	ldrhi	r3, [pc, #24]	; (8004ff0 <xTaskRemoveFromUnorderedEventList+0x88>)
		xReturn = pdTRUE;
 8004fd6:	4620      	movhi	r0, r4
		xYieldPending = pdTRUE;
 8004fd8:	601c      	strhi	r4, [r3, #0]
		xReturn = pdFALSE;
 8004fda:	2000      	movls	r0, #0
}
 8004fdc:	bd70      	pop	{r4, r5, r6, pc}
 8004fde:	bf00      	nop
 8004fe0:	20004d0c 	.word	0x20004d0c
 8004fe4:	20004d14 	.word	0x20004d14
 8004fe8:	20004c74 	.word	0x20004c74
 8004fec:	20004c68 	.word	0x20004c68
 8004ff0:	20004d90 	.word	0x20004d90

08004ff4 <vTaskSetTimeOutState>:
{
 8004ff4:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8004ff6:	b908      	cbnz	r0, 8004ffc <vTaskSetTimeOutState+0x8>
 8004ff8:	f7ff fc4a 	bl	8004890 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ffc:	4b03      	ldr	r3, [pc, #12]	; (800500c <vTaskSetTimeOutState+0x18>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005002:	4b03      	ldr	r3, [pc, #12]	; (8005010 <vTaskSetTimeOutState+0x1c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6043      	str	r3, [r0, #4]
 8005008:	bd08      	pop	{r3, pc}
 800500a:	bf00      	nop
 800500c:	20004d48 	.word	0x20004d48
 8005010:	20004d8c 	.word	0x20004d8c

08005014 <xTaskCheckForTimeOut>:
{
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8005018:	4604      	mov	r4, r0
 800501a:	b940      	cbnz	r0, 800502e <xTaskCheckForTimeOut+0x1a>
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	e7fe      	b.n	800502c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800502e:	b941      	cbnz	r1, 8005042 <xTaskCheckForTimeOut+0x2e>
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	e7fe      	b.n	8005040 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8005042:	f7fe fe7f 	bl	8003d44 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005046:	4b0e      	ldr	r3, [pc, #56]	; (8005080 <xTaskCheckForTimeOut+0x6c>)
 8005048:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800504a:	682b      	ldr	r3, [r5, #0]
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	d010      	beq.n	8005072 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005050:	4a0c      	ldr	r2, [pc, #48]	; (8005084 <xTaskCheckForTimeOut+0x70>)
 8005052:	6820      	ldr	r0, [r4, #0]
 8005054:	6812      	ldr	r2, [r2, #0]
 8005056:	4290      	cmp	r0, r2
 8005058:	6862      	ldr	r2, [r4, #4]
 800505a:	d001      	beq.n	8005060 <xTaskCheckForTimeOut+0x4c>
 800505c:	4291      	cmp	r1, r2
 800505e:	d20d      	bcs.n	800507c <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005060:	1a88      	subs	r0, r1, r2
 8005062:	4283      	cmp	r3, r0
 8005064:	d90a      	bls.n	800507c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8005066:	1a5b      	subs	r3, r3, r1
 8005068:	4413      	add	r3, r2
 800506a:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800506c:	4620      	mov	r0, r4
 800506e:	f7ff ffc1 	bl	8004ff4 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8005072:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005074:	f7fe fe88 	bl	8003d88 <vPortExitCritical>
}
 8005078:	4620      	mov	r0, r4
 800507a:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 800507c:	2401      	movs	r4, #1
 800507e:	e7f9      	b.n	8005074 <xTaskCheckForTimeOut+0x60>
 8005080:	20004d8c 	.word	0x20004d8c
 8005084:	20004d48 	.word	0x20004d48

08005088 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005088:	4b01      	ldr	r3, [pc, #4]	; (8005090 <vTaskMissedYield+0x8>)
 800508a:	2201      	movs	r2, #1
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	4770      	bx	lr
 8005090:	20004d90 	.word	0x20004d90

08005094 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8005094:	4b01      	ldr	r3, [pc, #4]	; (800509c <xTaskGetCurrentTaskHandle+0x8>)
 8005096:	6818      	ldr	r0, [r3, #0]
	}
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	20004c68 	.word	0x20004c68

080050a0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80050a0:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <xTaskGetSchedulerState+0x18>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	b133      	cbz	r3, 80050b4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <xTaskGetSchedulerState+0x1c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80050ac:	bf0c      	ite	eq
 80050ae:	2002      	moveq	r0, #2
 80050b0:	2000      	movne	r0, #0
 80050b2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050b4:	2001      	movs	r0, #1
	}
 80050b6:	4770      	bx	lr
 80050b8:	20004d60 	.word	0x20004d60
 80050bc:	20004d0c 	.word	0x20004d0c

080050c0 <vTaskPriorityInherit>:
	{
 80050c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80050c4:	4604      	mov	r4, r0
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d038      	beq.n	800513c <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80050ca:	4d1d      	ldr	r5, [pc, #116]	; (8005140 <vTaskPriorityInherit+0x80>)
 80050cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80050ce:	682a      	ldr	r2, [r5, #0]
 80050d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d232      	bcs.n	800513c <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80050d6:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80050d8:	4e1a      	ldr	r6, [pc, #104]	; (8005144 <vTaskPriorityInherit+0x84>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80050da:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050dc:	bfa1      	itttt	ge
 80050de:	682a      	ldrge	r2, [r5, #0]
 80050e0:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 80050e2:	f1c2 0207 	rsbge	r2, r2, #7
 80050e6:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80050e8:	2714      	movs	r7, #20
 80050ea:	6942      	ldr	r2, [r0, #20]
 80050ec:	fb07 6303 	mla	r3, r7, r3, r6
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d120      	bne.n	8005136 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050f4:	f100 0804 	add.w	r8, r0, #4
 80050f8:	4640      	mov	r0, r8
 80050fa:	f7fe fdb6 	bl	8003c6a <uxListRemove>
 80050fe:	4a12      	ldr	r2, [pc, #72]	; (8005148 <vTaskPriorityInherit+0x88>)
 8005100:	b948      	cbnz	r0, 8005116 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005102:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005104:	4347      	muls	r7, r0
 8005106:	59f3      	ldr	r3, [r6, r7]
 8005108:	b92b      	cbnz	r3, 8005116 <vTaskPriorityInherit+0x56>
 800510a:	6813      	ldr	r3, [r2, #0]
 800510c:	2101      	movs	r1, #1
 800510e:	4081      	lsls	r1, r0
 8005110:	ea23 0301 	bic.w	r3, r3, r1
 8005114:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005116:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8005118:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800511a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800511c:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800511e:	2301      	movs	r3, #1
 8005120:	4083      	lsls	r3, r0
 8005122:	430b      	orrs	r3, r1
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	2314      	movs	r3, #20
 8005128:	4641      	mov	r1, r8
 800512a:	fb03 6000 	mla	r0, r3, r0, r6
	}
 800512e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8005132:	f7fe bd77 	b.w	8003c24 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005136:	682b      	ldr	r3, [r5, #0]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800513c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005140:	20004c68 	.word	0x20004c68
 8005144:	20004c74 	.word	0x20004c74
 8005148:	20004d14 	.word	0x20004d14

0800514c <xTaskPriorityDisinherit>:
	{
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800514e:	4604      	mov	r4, r0
 8005150:	b908      	cbnz	r0, 8005156 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8005152:	2000      	movs	r0, #0
 8005154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005156:	4b22      	ldr	r3, [pc, #136]	; (80051e0 <xTaskPriorityDisinherit+0x94>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4298      	cmp	r0, r3
 800515c:	d008      	beq.n	8005170 <xTaskPriorityDisinherit+0x24>
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	e7fe      	b.n	800516e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005170:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005172:	b943      	cbnz	r3, 8005186 <xTaskPriorityDisinherit+0x3a>
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	e7fe      	b.n	8005184 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005186:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005188:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800518a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800518c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800518e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005190:	d0df      	beq.n	8005152 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1dd      	bne.n	8005152 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005196:	1d05      	adds	r5, r0, #4
 8005198:	4628      	mov	r0, r5
 800519a:	f7fe fd66 	bl	8003c6a <uxListRemove>
 800519e:	4e11      	ldr	r6, [pc, #68]	; (80051e4 <xTaskPriorityDisinherit+0x98>)
 80051a0:	4a11      	ldr	r2, [pc, #68]	; (80051e8 <xTaskPriorityDisinherit+0x9c>)
 80051a2:	b950      	cbnz	r0, 80051ba <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80051a4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80051a6:	2114      	movs	r1, #20
 80051a8:	4379      	muls	r1, r7
 80051aa:	5873      	ldr	r3, [r6, r1]
 80051ac:	b92b      	cbnz	r3, 80051ba <xTaskPriorityDisinherit+0x6e>
 80051ae:	6813      	ldr	r3, [r2, #0]
 80051b0:	2001      	movs	r0, #1
 80051b2:	40b8      	lsls	r0, r7
 80051b4:	ea23 0300 	bic.w	r3, r3, r0
 80051b8:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80051ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80051bc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051be:	f1c3 0107 	rsb	r1, r3, #7
 80051c2:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80051c4:	6811      	ldr	r1, [r2, #0]
 80051c6:	2401      	movs	r4, #1
 80051c8:	fa04 f003 	lsl.w	r0, r4, r3
 80051cc:	4308      	orrs	r0, r1
 80051ce:	6010      	str	r0, [r2, #0]
 80051d0:	2014      	movs	r0, #20
 80051d2:	fb00 6003 	mla	r0, r0, r3, r6
 80051d6:	4629      	mov	r1, r5
 80051d8:	f7fe fd24 	bl	8003c24 <vListInsertEnd>
					xReturn = pdTRUE;
 80051dc:	4620      	mov	r0, r4
	}
 80051de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051e0:	20004c68 	.word	0x20004c68
 80051e4:	20004c74 	.word	0x20004c74
 80051e8:	20004d14 	.word	0x20004d14

080051ec <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80051ec:	4b04      	ldr	r3, [pc, #16]	; (8005200 <uxTaskResetEventItemValue+0x14>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	f1c3 0307 	rsb	r3, r3, #7
 80051fc:	6193      	str	r3, [r2, #24]
}
 80051fe:	4770      	bx	lr
 8005200:	20004c68 	.word	0x20004c68

08005204 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005204:	4b04      	ldr	r3, [pc, #16]	; (8005218 <pvTaskIncrementMutexHeldCount+0x14>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	b11a      	cbz	r2, 8005212 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800520a:	6819      	ldr	r1, [r3, #0]
 800520c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800520e:	3201      	adds	r2, #1
 8005210:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8005212:	6818      	ldr	r0, [r3, #0]
	}
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	20004c68 	.word	0x20004c68

0800521c <ulTaskNotifyTake>:
	{
 800521c:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800521e:	4c16      	ldr	r4, [pc, #88]	; (8005278 <ulTaskNotifyTake+0x5c>)
	{
 8005220:	4606      	mov	r6, r0
 8005222:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8005224:	f7fe fd8e 	bl	8003d44 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522c:	b97b      	cbnz	r3, 800524e <ulTaskNotifyTake+0x32>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	2101      	movs	r1, #1
 8005232:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 8005236:	b155      	cbz	r5, 800524e <ulTaskNotifyTake+0x32>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005238:	4628      	mov	r0, r5
 800523a:	f7ff fae3 	bl	8004804 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800523e:	4b0f      	ldr	r3, [pc, #60]	; (800527c <ulTaskNotifyTake+0x60>)
 8005240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 800524e:	f7fe fd9b 	bl	8003d88 <vPortExitCritical>
		taskENTER_CRITICAL();
 8005252:	f7fe fd77 	bl	8003d44 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
			if( ulReturn != 0UL )
 800525a:	b11d      	cbz	r5, 8005264 <ulTaskNotifyTake+0x48>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800525c:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 800525e:	b14e      	cbz	r6, 8005274 <ulTaskNotifyTake+0x58>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005260:	2200      	movs	r2, #0
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 8005262:	64da      	str	r2, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 800526c:	f7fe fd8c 	bl	8003d88 <vPortExitCritical>
	}
 8005270:	4628      	mov	r0, r5
 8005272:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 8005274:	1e6a      	subs	r2, r5, #1
 8005276:	e7f4      	b.n	8005262 <ulTaskNotifyTake+0x46>
 8005278:	20004c68 	.word	0x20004c68
 800527c:	e000ed04 	.word	0xe000ed04

08005280 <vTaskNotifyGiveFromISR>:
	{
 8005280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005284:	460e      	mov	r6, r1
		configASSERT( xTaskToNotify );
 8005286:	4604      	mov	r4, r0
 8005288:	b940      	cbnz	r0, 800529c <vTaskNotifyGiveFromISR+0x1c>
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	e7fe      	b.n	800529a <vTaskNotifyGiveFromISR+0x1a>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800529c:	f7fe fe5a 	bl	8003f54 <vPortValidateInterruptPriority>
	__asm volatile
 80052a0:	f3ef 8711 	mrs	r7, BASEPRI
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80052b4:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80052b6:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80052ba:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			( pxTCB->ulNotifiedValue )++;
 80052be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80052c0:	b2ed      	uxtb	r5, r5
			( pxTCB->ulNotifiedValue )++;
 80052c2:	3301      	adds	r3, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80052c4:	2d01      	cmp	r5, #1
			( pxTCB->ulNotifiedValue )++;
 80052c6:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80052c8:	d128      	bne.n	800531c <vTaskNotifyGiveFromISR+0x9c>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80052ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80052cc:	b143      	cbz	r3, 80052e0 <vTaskNotifyGiveFromISR+0x60>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	e7fe      	b.n	80052de <vTaskNotifyGiveFromISR+0x5e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052e0:	4b14      	ldr	r3, [pc, #80]	; (8005334 <vTaskNotifyGiveFromISR+0xb4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	b9f3      	cbnz	r3, 8005324 <vTaskNotifyGiveFromISR+0xa4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052e6:	f104 0804 	add.w	r8, r4, #4
 80052ea:	4640      	mov	r0, r8
 80052ec:	f7fe fcbd 	bl	8003c6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052f0:	4a11      	ldr	r2, [pc, #68]	; (8005338 <vTaskNotifyGiveFromISR+0xb8>)
 80052f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80052f4:	6811      	ldr	r1, [r2, #0]
 80052f6:	409d      	lsls	r5, r3
 80052f8:	430d      	orrs	r5, r1
 80052fa:	6015      	str	r5, [r2, #0]
 80052fc:	4a0f      	ldr	r2, [pc, #60]	; (800533c <vTaskNotifyGiveFromISR+0xbc>)
 80052fe:	2014      	movs	r0, #20
 8005300:	4641      	mov	r1, r8
 8005302:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005306:	f7fe fc8d 	bl	8003c24 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <vTaskNotifyGiveFromISR+0xc0>)
 800530c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	429a      	cmp	r2, r3
 8005314:	d902      	bls.n	800531c <vTaskNotifyGiveFromISR+0x9c>
 8005316:	2301      	movs	r3, #1
					if( pxHigherPriorityTaskWoken != NULL )
 8005318:	b146      	cbz	r6, 800532c <vTaskNotifyGiveFromISR+0xac>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800531a:	6033      	str	r3, [r6, #0]
	__asm volatile
 800531c:	f387 8811 	msr	BASEPRI, r7
 8005320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005324:	f104 0118 	add.w	r1, r4, #24
 8005328:	4806      	ldr	r0, [pc, #24]	; (8005344 <vTaskNotifyGiveFromISR+0xc4>)
 800532a:	e7ec      	b.n	8005306 <vTaskNotifyGiveFromISR+0x86>
						xYieldPending = pdTRUE;
 800532c:	4a06      	ldr	r2, [pc, #24]	; (8005348 <vTaskNotifyGiveFromISR+0xc8>)
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	e7f4      	b.n	800531c <vTaskNotifyGiveFromISR+0x9c>
 8005332:	bf00      	nop
 8005334:	20004d0c 	.word	0x20004d0c
 8005338:	20004d14 	.word	0x20004d14
 800533c:	20004c74 	.word	0x20004c74
 8005340:	20004c68 	.word	0x20004c68
 8005344:	20004d4c 	.word	0x20004d4c
 8005348:	20004d90 	.word	0x20004d90

0800534c <vARPRefreshCacheEntry>:

#endif	/* ipconfigUSE_ARP_REMOVE_ENTRY != 0 */
/*-----------------------------------------------------------*/

void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress, const uint32_t ulIPAddress )
{
 800534c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	#if( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )
		/* Only process the IP address if it is on the local network.
		Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
		and netmask are still unknown. */
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 8005350:	4b39      	ldr	r3, [pc, #228]	; (8005438 <vARPRefreshCacheEntry+0xec>)
 8005352:	4a3a      	ldr	r2, [pc, #232]	; (800543c <vARPRefreshCacheEntry+0xf0>)
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	6852      	ldr	r2, [r2, #4]
{
 8005358:	468a      	mov	sl, r1
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 800535a:	4059      	eors	r1, r3
 800535c:	4211      	tst	r1, r2
{
 800535e:	4606      	mov	r6, r0
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 8005360:	d001      	beq.n	8005366 <vARPRefreshCacheEntry+0x1a>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d166      	bne.n	8005434 <vARPRefreshCacheEntry+0xe8>
{
 8005366:	f04f 0800 	mov.w	r8, #0
 800536a:	f04f 37ff 	mov.w	r7, #4294967295
 800536e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8005444 <vARPRefreshCacheEntry+0xf8>
 8005372:	f04f 0bff 	mov.w	fp, #255	; 0xff
 8005376:	463d      	mov	r5, r7
 8005378:	4644      	mov	r4, r8
		/* For each entry in the ARP cache table. */
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
		{
			/* Does this line in the cache table hold an entry for the IP
			address	being queried? */
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 800537a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800537e:	459a      	cmp	sl, r3
 8005380:	d111      	bne.n	80053a6 <vARPRefreshCacheEntry+0x5a>
			{
				if( pxMACAddress == NULL )
 8005382:	2e00      	cmp	r6, #0
 8005384:	d04a      	beq.n	800541c <vARPRefreshCacheEntry+0xd0>
					xIpEntry = x;
					break;
				}

				/* See if the MAC-address also matches. */
				if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8005386:	2206      	movs	r2, #6
 8005388:	4631      	mov	r1, r6
 800538a:	4648      	mov	r0, r9
 800538c:	f003 ff62 	bl	8009254 <memcmp>
 8005390:	b9f8      	cbnz	r0, 80053d2 <vARPRefreshCacheEntry+0x86>
				{
					/* This function will be called for each received packet
					As this is by far the most common path the coding standard
					is relaxed in this case and a return is permitted as an
					optimisation. */
					xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8005392:	4a2b      	ldr	r2, [pc, #172]	; (8005440 <vARPRefreshCacheEntry+0xf4>)
 8005394:	230c      	movs	r3, #12
 8005396:	fb03 2404 	mla	r4, r3, r4, r2
 800539a:	2396      	movs	r3, #150	; 0x96
 800539c:	72a3      	strb	r3, [r4, #10]
					xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 800539e:	2301      	movs	r3, #1
 80053a0:	72e3      	strb	r3, [r4, #11]
					return;
 80053a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				for an ARP reply.  Still want to see if there is match with the
				given MAC address.ucBytes.  If found, either of the two entries
				must be cleared. */
				xIpEntry = x;
			}
			else if( ( pxMACAddress != NULL ) && ( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 ) )
 80053a6:	b12e      	cbz	r6, 80053b4 <vARPRefreshCacheEntry+0x68>
 80053a8:	2206      	movs	r2, #6
 80053aa:	4631      	mov	r1, r6
 80053ac:	4648      	mov	r0, r9
 80053ae:	f003 ff51 	bl	8009254 <memcmp>
 80053b2:	b180      	cbz	r0, 80053d6 <vARPRefreshCacheEntry+0x8a>
				xMacEntry = x;
	#endif
			}
			/* _HT_
			Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 80053b4:	f899 3006 	ldrb.w	r3, [r9, #6]
 80053b8:	455b      	cmp	r3, fp
 80053ba:	d30e      	bcc.n	80053da <vARPRefreshCacheEntry+0x8e>
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80053bc:	3401      	adds	r4, #1
 80053be:	2c06      	cmp	r4, #6
 80053c0:	f109 090c 	add.w	r9, r9, #12
 80053c4:	d1d9      	bne.n	800537a <vARPRefreshCacheEntry+0x2e>
				ucMinAgeFound = xARPCache[ x ].ucAge;
				xUseEntry = x;
			}
		}

		if( xMacEntry >= 0 )
 80053c6:	1c78      	adds	r0, r7, #1
 80053c8:	d00a      	beq.n	80053e0 <vARPRefreshCacheEntry+0x94>
		{
			xUseEntry = xMacEntry;

			if( xIpEntry >= 0 )
 80053ca:	1c69      	adds	r1, r5, #1
 80053cc:	d129      	bne.n	8005422 <vARPRefreshCacheEntry+0xd6>
 80053ce:	46b8      	mov	r8, r7
 80053d0:	e009      	b.n	80053e6 <vARPRefreshCacheEntry+0x9a>
 80053d2:	4625      	mov	r5, r4
 80053d4:	e7f2      	b.n	80053bc <vARPRefreshCacheEntry+0x70>
 80053d6:	4627      	mov	r7, r4
 80053d8:	e7f0      	b.n	80053bc <vARPRefreshCacheEntry+0x70>
 80053da:	469b      	mov	fp, r3
 80053dc:	46a0      	mov	r8, r4
 80053de:	e7ed      	b.n	80053bc <vARPRefreshCacheEntry+0x70>
				different locations: clear the entry which matches the
				IP-address */
				memset( &xARPCache[ xIpEntry ], '\0', sizeof( xARPCache[ xIpEntry ] ) );
			}
		}
		else if( xIpEntry >= 0 )
 80053e0:	1c6a      	adds	r2, r5, #1
 80053e2:	d000      	beq.n	80053e6 <vARPRefreshCacheEntry+0x9a>
				memset( &xARPCache[ xIpEntry ], '\0', sizeof( xARPCache[ xIpEntry ] ) );
 80053e4:	46a8      	mov	r8, r5
			/* An entry containing the IP-address was found, but it had a different MAC address */
			xUseEntry = xIpEntry;
		}

		/* If the entry was not found, we use the oldest entry and set the IPaddress */
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 80053e6:	230c      	movs	r3, #12
 80053e8:	4915      	ldr	r1, [pc, #84]	; (8005440 <vARPRefreshCacheEntry+0xf4>)
 80053ea:	fb03 f308 	mul.w	r3, r3, r8
 80053ee:	18ca      	adds	r2, r1, r3
 80053f0:	f841 a003 	str.w	sl, [r1, r3]

		if( pxMACAddress != NULL )
 80053f4:	b15e      	cbz	r6, 800540e <vARPRefreshCacheEntry+0xc2>
		{
			memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 80053f6:	3304      	adds	r3, #4
 80053f8:	6830      	ldr	r0, [r6, #0]
 80053fa:	50c8      	str	r0, [r1, r3]
 80053fc:	18cc      	adds	r4, r1, r3
 80053fe:	88b3      	ldrh	r3, [r6, #4]
 8005400:	80a3      	strh	r3, [r4, #4]

			iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, (*pxMACAddress) );
			/* And this entry does not need immediate attention */
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8005402:	2396      	movs	r3, #150	; 0x96
 8005404:	7293      	strb	r3, [r2, #10]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8005406:	2301      	movs	r3, #1
 8005408:	72d3      	strb	r3, [r2, #11]
 800540a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else if( xIpEntry < 0 )
 800540e:	3501      	adds	r5, #1
 8005410:	d110      	bne.n	8005434 <vARPRefreshCacheEntry+0xe8>
		{
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8005412:	2305      	movs	r3, #5
 8005414:	7293      	strb	r3, [r2, #10]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8005416:	72d6      	strb	r6, [r2, #11]
 8005418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if( xMacEntry >= 0 )
 800541c:	1c7b      	adds	r3, r7, #1
 800541e:	4625      	mov	r5, r4
 8005420:	d0e0      	beq.n	80053e4 <vARPRefreshCacheEntry+0x98>
				memset( &xARPCache[ xIpEntry ], '\0', sizeof( xARPCache[ xIpEntry ] ) );
 8005422:	4807      	ldr	r0, [pc, #28]	; (8005440 <vARPRefreshCacheEntry+0xf4>)
 8005424:	230c      	movs	r3, #12
 8005426:	436b      	muls	r3, r5
 8005428:	18c1      	adds	r1, r0, r3
 800542a:	2200      	movs	r2, #0
 800542c:	50c2      	str	r2, [r0, r3]
 800542e:	604a      	str	r2, [r1, #4]
 8005430:	608a      	str	r2, [r1, #8]
 8005432:	e7cc      	b.n	80053ce <vARPRefreshCacheEntry+0x82>
 8005434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005438:	200001b0 	.word	0x200001b0
 800543c:	20004edc 	.word	0x20004edc
 8005440:	20004d94 	.word	0x20004d94
 8005444:	20004d98 	.word	0x20004d98

08005448 <eARPProcessPacket>:
{
 8005448:	b570      	push	{r4, r5, r6, lr}
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 800544a:	4d24      	ldr	r5, [pc, #144]	; (80054dc <eARPProcessPacket+0x94>)
{
 800544c:	4604      	mov	r4, r0
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 800544e:	6968      	ldr	r0, [r5, #20]
 8005450:	b138      	cbz	r0, 8005462 <eARPProcessPacket+0x1a>
		switch( pxARPHeader->usOperation )
 8005452:	8aa3      	ldrh	r3, [r4, #20]
 8005454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005458:	d004      	beq.n	8005464 <eARPProcessPacket+0x1c>
 800545a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800545e:	d036      	beq.n	80054ce <eARPProcessPacket+0x86>
eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8005460:	2000      	movs	r0, #0
}
 8005462:	bd70      	pop	{r4, r5, r6, pc}
				if( pxARPHeader->ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 8005464:	f8d4 3026 	ldr.w	r3, [r4, #38]	; 0x26
 8005468:	4298      	cmp	r0, r3
 800546a:	d1f9      	bne.n	8005460 <eARPProcessPacket+0x18>
					vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), pxARPHeader->ulSenderProtocolAddress );
 800546c:	f104 0616 	add.w	r6, r4, #22
 8005470:	69e1      	ldr	r1, [r4, #28]
 8005472:	4630      	mov	r0, r6
 8005474:	f7ff ff6a 	bl	800534c <vARPRefreshCacheEntry>
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8005478:	2202      	movs	r2, #2
					if( pxARPHeader->ulTargetProtocolAddress == pxARPHeader->ulSenderProtocolAddress )
 800547a:	f8d4 1026 	ldr.w	r1, [r4, #38]	; 0x26
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 800547e:	7562      	strb	r2, [r4, #21]
					if( pxARPHeader->ulTargetProtocolAddress == pxARPHeader->ulSenderProtocolAddress )
 8005480:	69e2      	ldr	r2, [r4, #28]
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8005482:	2300      	movs	r3, #0
					if( pxARPHeader->ulTargetProtocolAddress == pxARPHeader->ulSenderProtocolAddress )
 8005484:	4291      	cmp	r1, r2
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8005486:	7523      	strb	r3, [r4, #20]
 8005488:	f104 0120 	add.w	r1, r4, #32
					if( pxARPHeader->ulTargetProtocolAddress == pxARPHeader->ulSenderProtocolAddress )
 800548c:	d118      	bne.n	80054c0 <eARPProcessPacket+0x78>
						memcpy( pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes, xBroadcastMACAddress.ucBytes, sizeof( xBroadcastMACAddress ) );
 800548e:	4a14      	ldr	r2, [pc, #80]	; (80054e0 <eARPProcessPacket+0x98>)
						memset( pxARPHeader->xTargetHardwareAddress.ucBytes, '\0', sizeof( MACAddress_t ) );
 8005490:	6223      	str	r3, [r4, #32]
						memcpy( pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes, xBroadcastMACAddress.ucBytes, sizeof( xBroadcastMACAddress ) );
 8005492:	6810      	ldr	r0, [r2, #0]
 8005494:	8892      	ldrh	r2, [r2, #4]
 8005496:	f8c4 0006 	str.w	r0, [r4, #6]
 800549a:	8162      	strh	r2, [r4, #10]
						memset( pxARPHeader->xTargetHardwareAddress.ucBytes, '\0', sizeof( MACAddress_t ) );
 800549c:	808b      	strh	r3, [r1, #4]
						pxARPHeader->ulTargetProtocolAddress = 0UL;
 800549e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 80054a2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
 80054a6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80054aa:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
					memcpy( pxARPHeader->xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 80054ae:	6828      	ldr	r0, [r5, #0]
 80054b0:	f8c4 0016 	str.w	r0, [r4, #22]
 80054b4:	88ab      	ldrh	r3, [r5, #4]
 80054b6:	80b3      	strh	r3, [r6, #4]
					pxARPHeader->ulSenderProtocolAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 80054b8:	696b      	ldr	r3, [r5, #20]
 80054ba:	61e3      	str	r3, [r4, #28]
					eReturn = eReturnEthernetFrame;
 80054bc:	2002      	movs	r0, #2
 80054be:	bd70      	pop	{r4, r5, r6, pc}
						memcpy( pxARPHeader->xTargetHardwareAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, sizeof( MACAddress_t ) );
 80054c0:	6833      	ldr	r3, [r6, #0]
 80054c2:	6223      	str	r3, [r4, #32]
 80054c4:	88b3      	ldrh	r3, [r6, #4]
 80054c6:	808b      	strh	r3, [r1, #4]
						pxARPHeader->ulTargetProtocolAddress = pxARPHeader->ulSenderProtocolAddress;
 80054c8:	f8c4 2026 	str.w	r2, [r4, #38]	; 0x26
 80054cc:	e7ef      	b.n	80054ae <eARPProcessPacket+0x66>
				vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), pxARPHeader->ulSenderProtocolAddress );
 80054ce:	69e1      	ldr	r1, [r4, #28]
 80054d0:	f104 0016 	add.w	r0, r4, #22
 80054d4:	f7ff ff3a 	bl	800534c <vARPRefreshCacheEntry>
 80054d8:	e7c2      	b.n	8005460 <eARPProcessPacket+0x18>
 80054da:	bf00      	nop
 80054dc:	200001b0 	.word	0x200001b0
 80054e0:	08009777 	.word	0x08009777

080054e4 <eARPGetCacheEntry>:
{
eARPLookupResult_t eReturn;
uint32_t ulAddressToLookup;

#if( ipconfigUSE_LLMNR == 1 )
	if( *pulIPAddress == ipLLMNR_IP_ADDR )	/* Is in network byte order */
 80054e4:	6803      	ldr	r3, [r0, #0]
 80054e6:	4a1a      	ldr	r2, [pc, #104]	; (8005550 <eARPGetCacheEntry+0x6c>)
 80054e8:	4293      	cmp	r3, r2
{
 80054ea:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( *pulIPAddress == ipLLMNR_IP_ADDR )	/* Is in network byte order */
 80054ec:	d106      	bne.n	80054fc <eARPGetCacheEntry+0x18>
	{
		/* The LLMNR IP-address has a fixed virtual MAC address */
		memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 80054ee:	4b19      	ldr	r3, [pc, #100]	; (8005554 <eARPGetCacheEntry+0x70>)
#endif
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 192.168.1.255? */
	{
		/* This is a broadcast so uses the broadcast MAC address. */
		memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	600a      	str	r2, [r1, #0]
 80054f4:	889b      	ldrh	r3, [r3, #4]
 80054f6:	808b      	strh	r3, [r1, #4]
		eReturn = eARPCacheHit;
 80054f8:	2001      	movs	r0, #1
 80054fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	d003      	beq.n	8005508 <eARPGetCacheEntry+0x24>
		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 192.168.1.255? */
 8005500:	4c15      	ldr	r4, [pc, #84]	; (8005558 <eARPGetCacheEntry+0x74>)
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 8005502:	6922      	ldr	r2, [r4, #16]
 8005504:	4293      	cmp	r3, r2
 8005506:	d101      	bne.n	800550c <eARPGetCacheEntry+0x28>
		memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8005508:	4b14      	ldr	r3, [pc, #80]	; (800555c <eARPGetCacheEntry+0x78>)
 800550a:	e7f1      	b.n	80054f0 <eARPGetCacheEntry+0xc>
	}
	else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 800550c:	4a14      	ldr	r2, [pc, #80]	; (8005560 <eARPGetCacheEntry+0x7c>)
 800550e:	6952      	ldr	r2, [r2, #20]
 8005510:	b1da      	cbz	r2, 800554a <eARPGetCacheEntry+0x66>
	}
	else
	{
		eReturn = eARPCacheMiss;

		if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 8005512:	6865      	ldr	r5, [r4, #4]
 8005514:	405a      	eors	r2, r3
 8005516:	422a      	tst	r2, r5
			else
#endif
			{
				/* The IP address is off the local network, so look up the
				hardware address of the router, if any. */
				ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 8005518:	bf18      	it	ne
 800551a:	68a3      	ldrne	r3, [r4, #8]
			ulAddressToLookup = *pulIPAddress;
		}

		if( eReturn == eARPCacheMiss )
		{
			if( ulAddressToLookup == 0UL )
 800551c:	b1ab      	cbz	r3, 800554a <eARPGetCacheEntry+0x66>
	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
	{
		/* Does this row in the ARP cache table hold an entry for the IP address
		being queried? */
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800551e:	4d11      	ldr	r5, [pc, #68]	; (8005564 <eARPGetCacheEntry+0x80>)
 8005520:	2400      	movs	r4, #0
 8005522:	260c      	movs	r6, #12
 8005524:	fb06 f204 	mul.w	r2, r6, r4
 8005528:	5957      	ldr	r7, [r2, r5]
 800552a:	42bb      	cmp	r3, r7
 800552c:	d107      	bne.n	800553e <eARPGetCacheEntry+0x5a>
		{
			/* A matching valid entry was found. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800552e:	18ab      	adds	r3, r5, r2
 8005530:	7adb      	ldrb	r3, [r3, #11]
 8005532:	b153      	cbz	r3, 800554a <eARPGetCacheEntry+0x66>
				eReturn = eCantSendPacket;
			}
			else
			{
				/* A valid entry was found. */
				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8005534:	3204      	adds	r2, #4
 8005536:	18ab      	adds	r3, r5, r2
 8005538:	58a8      	ldr	r0, [r5, r2]
 800553a:	6008      	str	r0, [r1, #0]
 800553c:	e7da      	b.n	80054f4 <eARPGetCacheEntry+0x10>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800553e:	3401      	adds	r4, #1
 8005540:	2c06      	cmp	r4, #6
 8005542:	d1ef      	bne.n	8005524 <eARPGetCacheEntry+0x40>
					*pulIPAddress = ulAddressToLookup;
 8005544:	6003      	str	r3, [r0, #0]
 8005546:	2000      	movs	r0, #0
}
 8005548:	bdf0      	pop	{r4, r5, r6, r7, pc}
		eReturn = eCantSendPacket;
 800554a:	2002      	movs	r0, #2
 800554c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800554e:	bf00      	nop
 8005550:	fc0000e0 	.word	0xfc0000e0
 8005554:	08009761 	.word	0x08009761
 8005558:	20004edc 	.word	0x20004edc
 800555c:	08009777 	.word	0x08009777
 8005560:	200001b0 	.word	0x200001b0
 8005564:	20004d94 	.word	0x20004d94

08005568 <vARPSendGratuitous>:

void vARPSendGratuitous( void )
{
	/* Setting xLastGratuitousARPTime to 0 will force a gratuitous ARP the next
	time vARPAgeCache() is called. */
	xLastGratuitousARPTime = ( TickType_t ) 0;
 8005568:	4b02      	ldr	r3, [pc, #8]	; (8005574 <vARPSendGratuitous+0xc>)
 800556a:	2200      	movs	r2, #0

	/* Let the IP-task call vARPAgeCache(). */
	xSendEventToIPTask( eARPTimerEvent );
 800556c:	2002      	movs	r0, #2
	xLastGratuitousARPTime = ( TickType_t ) 0;
 800556e:	601a      	str	r2, [r3, #0]
	xSendEventToIPTask( eARPTimerEvent );
 8005570:	f000 bde8 	b.w	8006144 <xSendEventToIPTask>
 8005574:	20004ddc 	.word	0x20004ddc

08005578 <vARPGenerateRequestPacket>:

void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
ARPPacket_t *pxARPPacket;

	pxARPPacket = ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8005578:	6983      	ldr	r3, [r0, #24]
		xARPHeader.ucHardwareAddressLength;
		xARPHeader.ucProtocolAddressLength;
		xARPHeader.usOperation;
		xARPHeader.xTargetHardwareAddress;
	*/
	memcpy( ( void * ) &( pxARPPacket->xEthernetHeader ), ( void * ) xDefaultPartARPPacketHeader, sizeof( xDefaultPartARPPacketHeader ) );
 800557a:	4a0f      	ldr	r2, [pc, #60]	; (80055b8 <vARPGenerateRequestPacket+0x40>)
{
 800557c:	b530      	push	{r4, r5, lr}
 800557e:	4601      	mov	r1, r0
	memcpy( ( void * ) &( pxARPPacket->xEthernetHeader ), ( void * ) xDefaultPartARPPacketHeader, sizeof( xDefaultPartARPPacketHeader ) );
 8005580:	f102 0424 	add.w	r4, r2, #36	; 0x24
 8005584:	4618      	mov	r0, r3
 8005586:	f852 5b04 	ldr.w	r5, [r2], #4
 800558a:	f840 5b04 	str.w	r5, [r0], #4
 800558e:	42a2      	cmp	r2, r4
 8005590:	d1f9      	bne.n	8005586 <vARPGenerateRequestPacket+0xe>
 8005592:	8812      	ldrh	r2, [r2, #0]
 8005594:	8002      	strh	r2, [r0, #0]
	memcpy( ( void * ) pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8005596:	4a09      	ldr	r2, [pc, #36]	; (80055bc <vARPGenerateRequestPacket+0x44>)
 8005598:	6810      	ldr	r0, [r2, #0]
 800559a:	f8c3 0006 	str.w	r0, [r3, #6]
 800559e:	8894      	ldrh	r4, [r2, #4]
 80055a0:	815c      	strh	r4, [r3, #10]
	memcpy( ( void * ) pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80055a2:	f8c3 0016 	str.w	r0, [r3, #22]
 80055a6:	835c      	strh	r4, [r3, #26]
	/* HT:endian: network to network */
	pxARPPacket->xARPHeader.ulSenderProtocolAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 80055a8:	6952      	ldr	r2, [r2, #20]
 80055aa:	61da      	str	r2, [r3, #28]
	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 80055ac:	694a      	ldr	r2, [r1, #20]
 80055ae:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 80055b2:	232a      	movs	r3, #42	; 0x2a
 80055b4:	61cb      	str	r3, [r1, #28]
 80055b6:	bd30      	pop	{r4, r5, pc}
 80055b8:	08009712 	.word	0x08009712
 80055bc:	200001b0 	.word	0x200001b0

080055c0 <FreeRTOS_OutputARPRequest>:
{
 80055c0:	b538      	push	{r3, r4, r5, lr}
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0 );
 80055c2:	2100      	movs	r1, #0
{
 80055c4:	4605      	mov	r5, r0
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0 );
 80055c6:	202a      	movs	r0, #42	; 0x2a
 80055c8:	f003 fbf0 	bl	8008dac <pxGetNetworkBufferWithDescriptor>
	if( pxNetworkBuffer != NULL )
 80055cc:	4604      	mov	r4, r0
 80055ce:	b140      	cbz	r0, 80055e2 <FreeRTOS_OutputARPRequest+0x22>
		pxNetworkBuffer->ulIPAddress = ulIPAddress;
 80055d0:	6145      	str	r5, [r0, #20]
		vARPGenerateRequestPacket( pxNetworkBuffer );
 80055d2:	f7ff ffd1 	bl	8005578 <vARPGenerateRequestPacket>
		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 80055d6:	4620      	mov	r0, r4
 80055d8:	2101      	movs	r1, #1
}
 80055da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 80055de:	f7fd b995 	b.w	800290c <xNetworkInterfaceOutput>
 80055e2:	bd38      	pop	{r3, r4, r5, pc}

080055e4 <vARPAgeCache>:
{
 80055e4:	b538      	push	{r3, r4, r5, lr}
 80055e6:	4c13      	ldr	r4, [pc, #76]	; (8005634 <vARPAgeCache+0x50>)
 80055e8:	f104 0548 	add.w	r5, r4, #72	; 0x48
		if( xARPCache[ x ].ucAge > 0U )
 80055ec:	7aa3      	ldrb	r3, [r4, #10]
 80055ee:	b16b      	cbz	r3, 800560c <vARPAgeCache+0x28>
			( xARPCache[ x ].ucAge )--;
 80055f0:	3b01      	subs	r3, #1
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80055f2:	7ae2      	ldrb	r2, [r4, #11]
			( xARPCache[ x ].ucAge )--;
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	72a3      	strb	r3, [r4, #10]
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80055f8:	b91a      	cbnz	r2, 8005602 <vARPAgeCache+0x1e>
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 80055fa:	6820      	ldr	r0, [r4, #0]
 80055fc:	f7ff ffe0 	bl	80055c0 <FreeRTOS_OutputARPRequest>
 8005600:	e001      	b.n	8005606 <vARPAgeCache+0x22>
			else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8005602:	2b03      	cmp	r3, #3
 8005604:	d9f9      	bls.n	80055fa <vARPAgeCache+0x16>
			if( xARPCache[ x ].ucAge == 0u )
 8005606:	7aa3      	ldrb	r3, [r4, #10]
 8005608:	b903      	cbnz	r3, 800560c <vARPAgeCache+0x28>
				xARPCache[ x ].ulIPAddress = 0UL;
 800560a:	6023      	str	r3, [r4, #0]
 800560c:	340c      	adds	r4, #12
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800560e:	42ac      	cmp	r4, r5
 8005610:	d1ec      	bne.n	80055ec <vARPAgeCache+0x8>
	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8005612:	4c09      	ldr	r4, [pc, #36]	; (8005638 <vARPAgeCache+0x54>)
	xTimeNow = xTaskGetTickCount ();
 8005614:	f7ff fa60 	bl	8004ad8 <xTaskGetTickCount>
	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8005618:	6822      	ldr	r2, [r4, #0]
	xTimeNow = xTaskGetTickCount ();
 800561a:	4605      	mov	r5, r0
	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 800561c:	b122      	cbz	r2, 8005628 <vARPAgeCache+0x44>
 800561e:	1a82      	subs	r2, r0, r2
 8005620:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005624:	429a      	cmp	r2, r3
 8005626:	d904      	bls.n	8005632 <vARPAgeCache+0x4e>
		FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 8005628:	4b04      	ldr	r3, [pc, #16]	; (800563c <vARPAgeCache+0x58>)
 800562a:	6958      	ldr	r0, [r3, #20]
 800562c:	f7ff ffc8 	bl	80055c0 <FreeRTOS_OutputARPRequest>
		xLastGratuitousARPTime = xTimeNow;
 8005630:	6025      	str	r5, [r4, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	20004d94 	.word	0x20004d94
 8005638:	20004ddc 	.word	0x20004ddc
 800563c:	200001b0 	.word	0x200001b0

08005640 <prvProcessDHCPReplies>:
	vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
}
/*-----------------------------------------------------------*/

static BaseType_t prvProcessDHCPReplies( BaseType_t xExpectedMessageType )
{
 8005640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005644:	b087      	sub	sp, #28
uint8_t *pucUDPPayload, *pucLastByte;
struct freertos_sockaddr xClient;
uint32_t xClientLength = sizeof( xClient );
 8005646:	2308      	movs	r3, #8
 8005648:	9303      	str	r3, [sp, #12]
uint8_t *pucByte, ucOptionCode, ucLength;
uint32_t ulProcessed, ulParameter;
BaseType_t xReturn = pdFALSE;
const uint32_t ulMandatoryOptions = 2ul; /* DHCP server address, and the correct DHCP message type must be present in the options. */

	lBytes = FreeRTOS_recvfrom( xDHCPData.xDHCPSocket, ( void * ) &pucUDPPayload, 0ul, FREERTOS_ZERO_COPY, &xClient, &xClientLength );
 800564a:	ab03      	add	r3, sp, #12
 800564c:	9301      	str	r3, [sp, #4]
 800564e:	4c49      	ldr	r4, [pc, #292]	; (8005774 <prvProcessDHCPReplies+0x134>)
 8005650:	ab04      	add	r3, sp, #16
 8005652:	9300      	str	r3, [sp, #0]
{
 8005654:	4606      	mov	r6, r0
	lBytes = FreeRTOS_recvfrom( xDHCPData.xDHCPSocket, ( void * ) &pucUDPPayload, 0ul, FREERTOS_ZERO_COPY, &xClient, &xClientLength );
 8005656:	2301      	movs	r3, #1
 8005658:	2200      	movs	r2, #0
 800565a:	a902      	add	r1, sp, #8
 800565c:	6a20      	ldr	r0, [r4, #32]
 800565e:	f001 f8bd 	bl	80067dc <FreeRTOS_recvfrom>

	if( lBytes > 0 )
 8005662:	1e07      	subs	r7, r0, #0
 8005664:	f340 8083 	ble.w	800576e <prvProcessDHCPReplies+0x12e>
	{
		/* Map a DHCP structure onto the received data. */
		pxDHCPMessage = ( DHCPMessage_t * ) ( pucUDPPayload );
 8005668:	9d02      	ldr	r5, [sp, #8]

		/* Sanity check. */
		if( ( pxDHCPMessage->ulDHCPCookie == ( uint32_t ) dhcpCOOKIE ) &&
 800566a:	4b43      	ldr	r3, [pc, #268]	; (8005778 <prvProcessDHCPReplies+0x138>)
 800566c:	f8d5 20ec 	ldr.w	r2, [r5, #236]	; 0xec
 8005670:	429a      	cmp	r2, r3
 8005672:	d007      	beq.n	8005684 <prvProcessDHCPReplies+0x44>
BaseType_t xReturn = pdFALSE;
 8005674:	2400      	movs	r4, #0
					xReturn = pdPASS;
				}
			}
		}

		FreeRTOS_ReleaseUDPPayloadBuffer( ( void * ) pucUDPPayload );
 8005676:	4628      	mov	r0, r5
 8005678:	f000 fc98 	bl	8005fac <FreeRTOS_ReleaseUDPPayloadBuffer>
	}

	return xReturn;
}
 800567c:	4620      	mov	r0, r4
 800567e:	b007      	add	sp, #28
 8005680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if( ( pxDHCPMessage->ulDHCPCookie == ( uint32_t ) dhcpCOOKIE ) &&
 8005684:	782b      	ldrb	r3, [r5, #0]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d1f4      	bne.n	8005674 <prvProcessDHCPReplies+0x34>
 800568a:	6823      	ldr	r3, [r4, #0]
			( pxDHCPMessage->ulTransactionID == FreeRTOS_htonl( xDHCPData.ulTransactionId ) ) )
 800568c:	686a      	ldr	r2, [r5, #4]
 800568e:	ba1b      	rev	r3, r3
			( pxDHCPMessage->ucOpcode == ( uint8_t ) dhcpREPLY_OPCODE ) &&
 8005690:	429a      	cmp	r2, r3
 8005692:	d1ef      	bne.n	8005674 <prvProcessDHCPReplies+0x34>
			if( memcmp( ( void * ) &( pxDHCPMessage->ucClientHardwareAddress ), ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) ) == 0 )
 8005694:	2206      	movs	r2, #6
 8005696:	4939      	ldr	r1, [pc, #228]	; (800577c <prvProcessDHCPReplies+0x13c>)
 8005698:	f105 001c 	add.w	r0, r5, #28
 800569c:	f003 fdda 	bl	8009254 <memcmp>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	d1e7      	bne.n	8005674 <prvProcessDHCPReplies+0x34>
				pucLastByte = &( pucUDPPayload[ lBytes - dhcpMAX_OPTION_LENGTH_OF_INTEREST ] );
 80056a4:	f1a7 0e02 	sub.w	lr, r7, #2
							xNetworkAddressing.ulDNSServerAddress = ulParameter;
 80056a8:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 8005780 <prvProcessDHCPReplies+0x140>
				pucByte = &( pxDHCPMessage->ucFirstOptionByte );
 80056ac:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
				pucLastByte = &( pucUDPPayload[ lBytes - dhcpMAX_OPTION_LENGTH_OF_INTEREST ] );
 80056b0:	44ae      	add	lr, r5
							if( *pucByte == ( uint8_t ) xExpectedMessageType )
 80056b2:	fa5f f886 	uxtb.w	r8, r6
									xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 80056b6:	4681      	mov	r9, r0
								xDHCPData.ulLeaseTime = configTICK_RATE_HZ * xDHCPData.ulLeaseTime;
 80056b8:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
				while( pucByte < pucLastByte )
 80056bc:	4572      	cmp	r2, lr
 80056be:	d210      	bcs.n	80056e2 <prvProcessDHCPReplies+0xa2>
					ucOptionCode = pucByte[ 0 ];
 80056c0:	7817      	ldrb	r7, [r2, #0]
					if( ucOptionCode == dhcpOPTION_END_BYTE )
 80056c2:	2fff      	cmp	r7, #255	; 0xff
 80056c4:	d00d      	beq.n	80056e2 <prvProcessDHCPReplies+0xa2>
					if( ucOptionCode == dhcpZERO_PAD_OPTION_CODE )
 80056c6:	b90f      	cbnz	r7, 80056cc <prvProcessDHCPReplies+0x8c>
						pucByte += 1;
 80056c8:	3201      	adds	r2, #1
						continue;
 80056ca:	e7f7      	b.n	80056bc <prvProcessDHCPReplies+0x7c>
					switch( ucOptionCode )
 80056cc:	2f06      	cmp	r7, #6
					ucLength = pucByte[ 1 ];
 80056ce:	7851      	ldrb	r1, [r2, #1]
					memcpy( ( void * ) &( ulParameter ), ( void * ) pucByte, ( size_t ) sizeof( ulParameter ) );
 80056d0:	f8d2 3002 	ldr.w	r3, [r2, #2]
					switch( ucOptionCode )
 80056d4:	d03c      	beq.n	8005750 <prvProcessDHCPReplies+0x110>
 80056d6:	d80a      	bhi.n	80056ee <prvProcessDHCPReplies+0xae>
 80056d8:	2f01      	cmp	r7, #1
 80056da:	d02d      	beq.n	8005738 <prvProcessDHCPReplies+0xf8>
 80056dc:	2f03      	cmp	r7, #3
 80056de:	d032      	beq.n	8005746 <prvProcessDHCPReplies+0x106>
					if( ucLength == 0u )
 80056e0:	bb71      	cbnz	r1, 8005740 <prvProcessDHCPReplies+0x100>
				if( ulProcessed >= ulMandatoryOptions )
 80056e2:	2801      	cmp	r0, #1
 80056e4:	d9c6      	bls.n	8005674 <prvProcessDHCPReplies+0x34>
					xDHCPData.ulOfferedIPAddress = pxDHCPMessage->ulYourIPAddress_yiaddr;
 80056e6:	692b      	ldr	r3, [r5, #16]
 80056e8:	6063      	str	r3, [r4, #4]
					xReturn = pdPASS;
 80056ea:	2401      	movs	r4, #1
 80056ec:	e7c3      	b.n	8005676 <prvProcessDHCPReplies+0x36>
					switch( ucOptionCode )
 80056ee:	2f35      	cmp	r7, #53	; 0x35
 80056f0:	d016      	beq.n	8005720 <prvProcessDHCPReplies+0xe0>
 80056f2:	2f36      	cmp	r7, #54	; 0x36
 80056f4:	d02f      	beq.n	8005756 <prvProcessDHCPReplies+0x116>
 80056f6:	2f33      	cmp	r7, #51	; 0x33
 80056f8:	d1f2      	bne.n	80056e0 <prvProcessDHCPReplies+0xa0>
							if( ucLength == sizeof( &( xDHCPData.ulLeaseTime ) ) )
 80056fa:	2904      	cmp	r1, #4
 80056fc:	d1f0      	bne.n	80056e0 <prvProcessDHCPReplies+0xa0>
								xDHCPData.ulLeaseTime = FreeRTOS_ntohl( ulParameter );
 80056fe:	0e1f      	lsrs	r7, r3, #24
 8005700:	ea47 6b03 	orr.w	fp, r7, r3, lsl #24
 8005704:	021f      	lsls	r7, r3, #8
 8005706:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
 800570a:	0a1b      	lsrs	r3, r3, #8
 800570c:	ea4b 0707 	orr.w	r7, fp, r7
 8005710:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005714:	433b      	orrs	r3, r7
								xDHCPData.ulLeaseTime >>= 1UL;
 8005716:	085b      	lsrs	r3, r3, #1
								xDHCPData.ulLeaseTime = configTICK_RATE_HZ * xDHCPData.ulLeaseTime;
 8005718:	fb0a f303 	mul.w	r3, sl, r3
 800571c:	60e3      	str	r3, [r4, #12]
 800571e:	e00f      	b.n	8005740 <prvProcessDHCPReplies+0x100>
							if( *pucByte == ( uint8_t ) xExpectedMessageType )
 8005720:	7893      	ldrb	r3, [r2, #2]
 8005722:	4543      	cmp	r3, r8
 8005724:	d101      	bne.n	800572a <prvProcessDHCPReplies+0xea>
								ulProcessed++;
 8005726:	3001      	adds	r0, #1
 8005728:	e7da      	b.n	80056e0 <prvProcessDHCPReplies+0xa0>
							else if( *pucByte == ( uint8_t ) dhcpMESSAGE_TYPE_NACK )
 800572a:	2b06      	cmp	r3, #6
 800572c:	d1d8      	bne.n	80056e0 <prvProcessDHCPReplies+0xa0>
								if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_ACK )
 800572e:	2e05      	cmp	r6, #5
 8005730:	d1d6      	bne.n	80056e0 <prvProcessDHCPReplies+0xa0>
									xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 8005732:	f884 901c 	strb.w	r9, [r4, #28]
 8005736:	e7d3      	b.n	80056e0 <prvProcessDHCPReplies+0xa0>
							if( ucLength == sizeof( uint32_t ) )
 8005738:	2904      	cmp	r1, #4
 800573a:	d1d1      	bne.n	80056e0 <prvProcessDHCPReplies+0xa0>
								xNetworkAddressing.ulNetMask = ulParameter;
 800573c:	f8cc 3004 	str.w	r3, [ip, #4]
						pucByte += ucLength;
 8005740:	3102      	adds	r1, #2
 8005742:	440a      	add	r2, r1
 8005744:	e7ba      	b.n	80056bc <prvProcessDHCPReplies+0x7c>
							if( ucLength == sizeof( uint32_t ) )
 8005746:	2904      	cmp	r1, #4
 8005748:	d1ca      	bne.n	80056e0 <prvProcessDHCPReplies+0xa0>
								xNetworkAddressing.ulGatewayAddress = ulParameter;
 800574a:	f8cc 3008 	str.w	r3, [ip, #8]
 800574e:	e7f7      	b.n	8005740 <prvProcessDHCPReplies+0x100>
							xNetworkAddressing.ulDNSServerAddress = ulParameter;
 8005750:	f8cc 300c 	str.w	r3, [ip, #12]
							break;
 8005754:	e7c4      	b.n	80056e0 <prvProcessDHCPReplies+0xa0>
							if( ucLength == sizeof( uint32_t ) )
 8005756:	2904      	cmp	r1, #4
 8005758:	d1c2      	bne.n	80056e0 <prvProcessDHCPReplies+0xa0>
								if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_OFFER )
 800575a:	2e02      	cmp	r6, #2
 800575c:	d102      	bne.n	8005764 <prvProcessDHCPReplies+0x124>
									ulProcessed++;
 800575e:	3001      	adds	r0, #1
									xDHCPData.ulDHCPServerAddress = ulParameter;
 8005760:	60a3      	str	r3, [r4, #8]
 8005762:	e7ed      	b.n	8005740 <prvProcessDHCPReplies+0x100>
									if( xDHCPData.ulDHCPServerAddress == ulParameter )
 8005764:	68a7      	ldr	r7, [r4, #8]
 8005766:	42bb      	cmp	r3, r7
 8005768:	d1ea      	bne.n	8005740 <prvProcessDHCPReplies+0x100>
										ulProcessed++;
 800576a:	3001      	adds	r0, #1
 800576c:	e7e8      	b.n	8005740 <prvProcessDHCPReplies+0x100>
BaseType_t xReturn = pdFALSE;
 800576e:	2400      	movs	r4, #0
	return xReturn;
 8005770:	e784      	b.n	800567c <prvProcessDHCPReplies+0x3c>
 8005772:	bf00      	nop
 8005774:	20004de0 	.word	0x20004de0
 8005778:	63538263 	.word	0x63538263
 800577c:	200001b0 	.word	0x200001b0
 8005780:	20004edc 	.word	0x20004edc

08005784 <prvCreateDHCPSocket>:
{
 8005784:	b570      	push	{r4, r5, r6, lr}
	if( xDHCPData.xDHCPSocket == NULL )
 8005786:	4c16      	ldr	r4, [pc, #88]	; (80057e0 <prvCreateDHCPSocket+0x5c>)
{
 8005788:	b086      	sub	sp, #24
	if( xDHCPData.xDHCPSocket == NULL )
 800578a:	6a25      	ldr	r5, [r4, #32]
TickType_t xTimeoutTime = ( TickType_t ) 0;
 800578c:	2300      	movs	r3, #0
 800578e:	9303      	str	r3, [sp, #12]
	if( xDHCPData.xDHCPSocket == NULL )
 8005790:	bb25      	cbnz	r5, 80057dc <prvCreateDHCPSocket+0x58>
		xDHCPData.xDHCPSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8005792:	2102      	movs	r1, #2
 8005794:	2211      	movs	r2, #17
 8005796:	4608      	mov	r0, r1
 8005798:	f000 ffa2 	bl	80066e0 <FreeRTOS_socket>
		if( xDHCPData.xDHCPSocket != FREERTOS_INVALID_SOCKET )
 800579c:	1c43      	adds	r3, r0, #1
		xDHCPData.xDHCPSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 800579e:	6220      	str	r0, [r4, #32]
		if( xDHCPData.xDHCPSocket != FREERTOS_INVALID_SOCKET )
 80057a0:	d01b      	beq.n	80057da <prvCreateDHCPSocket+0x56>
			FreeRTOS_setsockopt( xDHCPData.xDHCPSocket, 0, FREERTOS_SO_RCVTIMEO, ( void * ) &xTimeoutTime, sizeof( TickType_t ) );
 80057a2:	2604      	movs	r6, #4
 80057a4:	ab03      	add	r3, sp, #12
 80057a6:	462a      	mov	r2, r5
 80057a8:	4629      	mov	r1, r5
 80057aa:	9600      	str	r6, [sp, #0]
 80057ac:	f001 fb0c 	bl	8006dc8 <FreeRTOS_setsockopt>
			FreeRTOS_setsockopt( xDHCPData.xDHCPSocket, 0, FREERTOS_SO_SNDTIMEO, ( void * ) &xTimeoutTime, sizeof( TickType_t ) );
 80057b0:	ab03      	add	r3, sp, #12
 80057b2:	2201      	movs	r2, #1
 80057b4:	4629      	mov	r1, r5
 80057b6:	9600      	str	r6, [sp, #0]
 80057b8:	6a20      	ldr	r0, [r4, #32]
 80057ba:	f001 fb05 	bl	8006dc8 <FreeRTOS_setsockopt>
			xAddress.sin_port = ( uint16_t ) dhcpCLIENT_PORT;
 80057be:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80057c2:	f8ad 3012 	strh.w	r3, [sp, #18]
			xReturn = vSocketBind( xDHCPData.xDHCPSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 80057c6:	2208      	movs	r2, #8
 80057c8:	462b      	mov	r3, r5
 80057ca:	a904      	add	r1, sp, #16
 80057cc:	6a20      	ldr	r0, [r4, #32]
 80057ce:	f001 f919 	bl	8006a04 <vSocketBind>
			if( xReturn != 0 )
 80057d2:	b118      	cbz	r0, 80057dc <prvCreateDHCPSocket+0x58>
				vSocketClose( xDHCPData.xDHCPSocket );
 80057d4:	6a20      	ldr	r0, [r4, #32]
 80057d6:	f001 f98f 	bl	8006af8 <vSocketClose>
			xDHCPData.xDHCPSocket = NULL;
 80057da:	6225      	str	r5, [r4, #32]
}
 80057dc:	b006      	add	sp, #24
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	20004de0 	.word	0x20004de0

080057e4 <prvCreatePartDHCPMessage.constprop.1>:
/*-----------------------------------------------------------*/

static uint8_t *prvCreatePartDHCPMessage( struct freertos_sockaddr *pxAddress, BaseType_t xOpcode, const uint8_t * const pucOptionsArray, size_t *pxOptionsArraySize )
 80057e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
DHCPMessage_t *pxDHCPMessage;
size_t xRequiredBufferSize = sizeof( DHCPMessage_t ) + *pxOptionsArraySize;
 80057e8:	6817      	ldr	r7, [r2, #0]
static uint8_t *prvCreatePartDHCPMessage( struct freertos_sockaddr *pxAddress, BaseType_t xOpcode, const uint8_t * const pucOptionsArray, size_t *pxOptionsArraySize )
 80057ea:	468b      	mov	fp, r1
 80057ec:	4615      	mov	r5, r2
 80057ee:	4680      	mov	r8, r0
uint8_t *pucUDPPayloadBuffer;

#if( ipconfigDHCP_REGISTER_HOSTNAME == 1 )
	const char *pucHostName = pcApplicationHostnameHook ();
 80057f0:	f003 fbf0 	bl	8008fd4 <pcApplicationHostnameHook>
 80057f4:	4682      	mov	sl, r0
	size_t xNameLength = strlen( pucHostName );
 80057f6:	f7fa fcf3 	bl	80001e0 <strlen>
	uint8_t *pucPtr;

	xRequiredBufferSize += ( 2 + xNameLength );
 80057fa:	37f3      	adds	r7, #243	; 0xf3
	size_t xNameLength = strlen( pucHostName );
 80057fc:	4606      	mov	r6, r0
	xRequiredBufferSize += ( 2 + xNameLength );
 80057fe:	4407      	add	r7, r0
	/* Get a buffer.  This uses a maximum delay, but the delay will be capped
	to ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS so the return value still needs to
	be test. */
	do
	{
	} while( ( pucUDPPayloadBuffer = ( uint8_t * ) FreeRTOS_GetUDPPayloadBuffer( xRequiredBufferSize, portMAX_DELAY ) ) == NULL );
 8005800:	f04f 31ff 	mov.w	r1, #4294967295
 8005804:	4638      	mov	r0, r7
 8005806:	f000 fba7 	bl	8005f58 <FreeRTOS_GetUDPPayloadBuffer>
 800580a:	4604      	mov	r4, r0
 800580c:	2800      	cmp	r0, #0
 800580e:	d0f7      	beq.n	8005800 <prvCreatePartDHCPMessage.constprop.1+0x1c>

	pxDHCPMessage = ( DHCPMessage_t * ) pucUDPPayloadBuffer;

	/* Most fields need to be zero. */
	memset( ( void * ) pxDHCPMessage, 0x00, sizeof( DHCPMessage_t ) );
 8005810:	22f1      	movs	r2, #241	; 0xf1
 8005812:	2100      	movs	r1, #0
 8005814:	f003 fd52 	bl	80092bc <memset>

	/* Create the message. */
	pxDHCPMessage->ucOpcode = ( uint8_t ) xOpcode;
 8005818:	2301      	movs	r3, #1
 800581a:	7023      	strb	r3, [r4, #0]
	pxDHCPMessage->ucAddressType = ( uint8_t ) dhcpADDRESS_TYPE_ETHERNET;
 800581c:	7063      	strb	r3, [r4, #1]
 800581e:	4a27      	ldr	r2, [pc, #156]	; (80058bc <prvCreatePartDHCPMessage.constprop.1+0xd8>)
	pxDHCPMessage->ucAddressLength = ( uint8_t ) dhcpETHERNET_ADDRESS_LENGTH;
 8005820:	2306      	movs	r3, #6
 8005822:	70a3      	strb	r3, [r4, #2]
 8005824:	6813      	ldr	r3, [r2, #0]
 8005826:	ba1b      	rev	r3, r3

	/* ulTransactionID doesn't really need a htonl() translation, but when DHCP
	times out, it is nicer to see an increasing number in this ID field */
	pxDHCPMessage->ulTransactionID = FreeRTOS_htonl( xDHCPData.ulTransactionId );
 8005828:	6063      	str	r3, [r4, #4]
	pxDHCPMessage->ulDHCPCookie = ( uint32_t ) dhcpCOOKIE;
 800582a:	2363      	movs	r3, #99	; 0x63
 800582c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8005830:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 8005834:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
	if( xDHCPData.xUseBroadcast != pdFALSE )
 8005838:	6993      	ldr	r3, [r2, #24]
	pxDHCPMessage->ulDHCPCookie = ( uint32_t ) dhcpCOOKIE;
 800583a:	f884 10ed 	strb.w	r1, [r4, #237]	; 0xed
 800583e:	2153      	movs	r1, #83	; 0x53
 8005840:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
	if( xDHCPData.xUseBroadcast != pdFALSE )
 8005844:	b3bb      	cbz	r3, 80058b6 <prvCreatePartDHCPMessage.constprop.1+0xd2>
	{
		pxDHCPMessage->usFlags = ( uint16_t ) dhcpBROADCAST;
 8005846:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800584a:	72a3      	strb	r3, [r4, #10]
 800584c:	2300      	movs	r3, #0
	else
	{
		pxDHCPMessage->usFlags = 0u;
	}

	memcpy( ( void * ) &( pxDHCPMessage->ucClientHardwareAddress[ 0 ] ), ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 800584e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80058c0 <prvCreatePartDHCPMessage.constprop.1+0xdc>
		pxDHCPMessage->usFlags = 0u;
 8005852:	72e3      	strb	r3, [r4, #11]
	memcpy( ( void * ) &( pxDHCPMessage->ucClientHardwareAddress[ 0 ] ), ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 8005854:	f8d9 0000 	ldr.w	r0, [r9]
 8005858:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800585c:	61e0      	str	r0, [r4, #28]
 800585e:	8423      	strh	r3, [r4, #32]

	/* Copy in the const part of the options options. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET ] ), ( void * ) pucOptionsArray, *pxOptionsArraySize );
 8005860:	682a      	ldr	r2, [r5, #0]
 8005862:	4659      	mov	r1, fp
 8005864:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
 8005868:	f003 fd03 	bl	8009272 <memcpy>
	{
		/* With this option, the hostname can be registered as well which makes
		it easier to lookup a device in a router's list of DHCP clients. */

		/* Point to where the OPTION_END was stored to add data. */
		pucPtr = &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + ( *pxOptionsArraySize - 1 ) ] );
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	33ef      	adds	r3, #239	; 0xef
 8005870:	18e7      	adds	r7, r4, r3
		pucPtr[ 0 ] = dhcpDNS_HOSTNAME_OPTIONS_CODE;
 8005872:	220c      	movs	r2, #12
 8005874:	54e2      	strb	r2, [r4, r3]
		pucPtr[ 1 ] = ( uint8_t ) xNameLength;
		memcpy( ( void *) ( pucPtr + 2 ), pucHostName, xNameLength );
 8005876:	4651      	mov	r1, sl
		pucPtr[ 1 ] = ( uint8_t ) xNameLength;
 8005878:	707e      	strb	r6, [r7, #1]
		memcpy( ( void *) ( pucPtr + 2 ), pucHostName, xNameLength );
 800587a:	4632      	mov	r2, r6
 800587c:	1cb8      	adds	r0, r7, #2
		pucPtr[ 2 + xNameLength ] = dhcpOPTION_END_BYTE;
 800587e:	4437      	add	r7, r6
		memcpy( ( void *) ( pucPtr + 2 ), pucHostName, xNameLength );
 8005880:	f003 fcf7 	bl	8009272 <memcpy>
		pucPtr[ 2 + xNameLength ] = dhcpOPTION_END_BYTE;
 8005884:	23ff      	movs	r3, #255	; 0xff
 8005886:	70bb      	strb	r3, [r7, #2]
		*pxOptionsArraySize += ( 2 + xNameLength );
 8005888:	6828      	ldr	r0, [r5, #0]
 800588a:	3002      	adds	r0, #2
 800588c:	4430      	add	r0, r6
 800588e:	6028      	str	r0, [r5, #0]
	}
	#endif

	/* Map in the client identifier. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpCLIENT_IDENTIFIER_OFFSET ] ),
 8005890:	f8d9 0000 	ldr.w	r0, [r9]
 8005894:	f8c4 00f5 	str.w	r0, [r4, #245]	; 0xf5
 8005898:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800589c:	f8a4 30f9 	strh.w	r3, [r4, #249]	; 0xf9
		( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );

	/* Set the addressing. */
	pxAddress->sin_addr = ipBROADCAST_IP_ADDRESS;
 80058a0:	f04f 33ff 	mov.w	r3, #4294967295
 80058a4:	f8c8 3004 	str.w	r3, [r8, #4]
	pxAddress->sin_port = ( uint16_t ) dhcpSERVER_PORT;
 80058a8:	f44f 4386 	mov.w	r3, #17152	; 0x4300
 80058ac:	f8a8 3002 	strh.w	r3, [r8, #2]

	return pucUDPPayloadBuffer;
}
 80058b0:	4620      	mov	r0, r4
 80058b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pxDHCPMessage->usFlags = 0u;
 80058b6:	72a3      	strb	r3, [r4, #10]
 80058b8:	e7c9      	b.n	800584e <prvCreatePartDHCPMessage.constprop.1+0x6a>
 80058ba:	bf00      	nop
 80058bc:	20004de0 	.word	0x20004de0
 80058c0:	200001b0 	.word	0x200001b0

080058c4 <prvSendDHCPRequest>:
/*-----------------------------------------------------------*/

static void prvSendDHCPRequest( void )
{
 80058c4:	b530      	push	{r4, r5, lr}
 80058c6:	b087      	sub	sp, #28
	dhcpCLIENT_IDENTIFIER_OPTION_CODE, 6, 0, 0, 0, 0, 0, 0,			/* Client identifier. */
	dhcpREQUEST_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,				/* The IP address being requested. */
	dhcpSERVER_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,				/* The IP address of the DHCP server. */
	dhcpOPTION_END_BYTE
};
size_t xOptionsLength = sizeof( ucDHCPRequestOptions );
 80058c8:	aa06      	add	r2, sp, #24
 80058ca:	2318      	movs	r3, #24

	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress, dhcpREQUEST_OPCODE, ucDHCPRequestOptions, &xOptionsLength );
 80058cc:	ad04      	add	r5, sp, #16
size_t xOptionsLength = sizeof( ucDHCPRequestOptions );
 80058ce:	f842 3d0c 	str.w	r3, [r2, #-12]!
	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress, dhcpREQUEST_OPCODE, ucDHCPRequestOptions, &xOptionsLength );
 80058d2:	490e      	ldr	r1, [pc, #56]	; (800590c <prvSendDHCPRequest+0x48>)
 80058d4:	4628      	mov	r0, r5
 80058d6:	f7ff ff85 	bl	80057e4 <prvCreatePartDHCPMessage.constprop.1>
 80058da:	4604      	mov	r4, r0

	/* Copy in the IP address being requested. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpREQUESTED_IP_ADDRESS_OFFSET ] ),
 80058dc:	480c      	ldr	r0, [pc, #48]	; (8005910 <prvSendDHCPRequest+0x4c>)
		( void * ) &( xDHCPData.ulDHCPServerAddress ), sizeof( xDHCPData.ulDHCPServerAddress ) );

	FreeRTOS_debug_printf( ( "vDHCPProcess: reply %lxip\n", FreeRTOS_ntohl( xDHCPData.ulOfferedIPAddress ) ) );
	iptraceSENDING_DHCP_REQUEST();

	if( FreeRTOS_sendto( xDHCPData.xDHCPSocket, pucUDPPayloadBuffer, ( sizeof( DHCPMessage_t ) + xOptionsLength ), FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
 80058de:	9a03      	ldr	r2, [sp, #12]
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpREQUESTED_IP_ADDRESS_OFFSET ] ),
 80058e0:	6843      	ldr	r3, [r0, #4]
 80058e2:	f8c4 30fd 	str.w	r3, [r4, #253]	; 0xfd
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpDHCP_SERVER_IP_ADDRESS_OFFSET ] ),
 80058e6:	6883      	ldr	r3, [r0, #8]
 80058e8:	f8c4 3103 	str.w	r3, [r4, #259]	; 0x103
	if( FreeRTOS_sendto( xDHCPData.xDHCPSocket, pucUDPPayloadBuffer, ( sizeof( DHCPMessage_t ) + xOptionsLength ), FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
 80058ec:	2308      	movs	r3, #8
 80058ee:	9301      	str	r3, [sp, #4]
 80058f0:	9500      	str	r5, [sp, #0]
 80058f2:	2301      	movs	r3, #1
 80058f4:	32f1      	adds	r2, #241	; 0xf1
 80058f6:	4621      	mov	r1, r4
 80058f8:	6a00      	ldr	r0, [r0, #32]
 80058fa:	f001 f813 	bl	8006924 <FreeRTOS_sendto>
 80058fe:	b910      	cbnz	r0, 8005906 <prvSendDHCPRequest+0x42>
	{
		/* The packet was not successfully queued for sending and must be
		returned to the stack. */
		FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 8005900:	4620      	mov	r0, r4
 8005902:	f000 fb53 	bl	8005fac <FreeRTOS_ReleaseUDPPayloadBuffer>
	}
}
 8005906:	b007      	add	sp, #28
 8005908:	bd30      	pop	{r4, r5, pc}
 800590a:	bf00      	nop
 800590c:	08009749 	.word	0x08009749
 8005910:	20004de0 	.word	0x20004de0

08005914 <prvSendDHCPDiscover>:
/*-----------------------------------------------------------*/

static void prvSendDHCPDiscover( void )
{
 8005914:	b530      	push	{r4, r5, lr}
 8005916:	b087      	sub	sp, #28
	dhcpMESSAGE_TYPE_OPTION_CODE, 1, dhcpMESSAGE_TYPE_DISCOVER,					/* Message type option. */
	dhcpCLIENT_IDENTIFIER_OPTION_CODE, 6, 0, 0, 0, 0, 0, 0,						/* Client identifier. */
	dhcpPARAMETER_REQUEST_OPTION_CODE, 3, dhcpSUBNET_MASK_OPTION_CODE, dhcpGATEWAY_OPTION_CODE, dhcpDNS_SERVER_OPTIONS_CODE,	/* Parameter request option. */
	dhcpOPTION_END_BYTE
};
size_t xOptionsLength = sizeof( ucDHCPDiscoverOptions );
 8005918:	aa06      	add	r2, sp, #24
 800591a:	2311      	movs	r3, #17

	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress, dhcpREQUEST_OPCODE, ucDHCPDiscoverOptions, &xOptionsLength );
 800591c:	ad04      	add	r5, sp, #16
size_t xOptionsLength = sizeof( ucDHCPDiscoverOptions );
 800591e:	f842 3d0c 	str.w	r3, [r2, #-12]!
	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress, dhcpREQUEST_OPCODE, ucDHCPDiscoverOptions, &xOptionsLength );
 8005922:	490b      	ldr	r1, [pc, #44]	; (8005950 <prvSendDHCPDiscover+0x3c>)
 8005924:	4628      	mov	r0, r5
 8005926:	f7ff ff5d 	bl	80057e4 <prvCreatePartDHCPMessage.constprop.1>

	FreeRTOS_debug_printf( ( "vDHCPProcess: discover\n" ) );
	iptraceSENDING_DHCP_DISCOVER();

	if( FreeRTOS_sendto( xDHCPData.xDHCPSocket, pucUDPPayloadBuffer, ( sizeof( DHCPMessage_t ) + xOptionsLength ), FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
 800592a:	2308      	movs	r3, #8
	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress, dhcpREQUEST_OPCODE, ucDHCPDiscoverOptions, &xOptionsLength );
 800592c:	4604      	mov	r4, r0
	if( FreeRTOS_sendto( xDHCPData.xDHCPSocket, pucUDPPayloadBuffer, ( sizeof( DHCPMessage_t ) + xOptionsLength ), FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
 800592e:	9a03      	ldr	r2, [sp, #12]
 8005930:	9301      	str	r3, [sp, #4]
 8005932:	4601      	mov	r1, r0
 8005934:	4807      	ldr	r0, [pc, #28]	; (8005954 <prvSendDHCPDiscover+0x40>)
 8005936:	9500      	str	r5, [sp, #0]
 8005938:	2301      	movs	r3, #1
 800593a:	32f1      	adds	r2, #241	; 0xf1
 800593c:	6a00      	ldr	r0, [r0, #32]
 800593e:	f000 fff1 	bl	8006924 <FreeRTOS_sendto>
 8005942:	b910      	cbnz	r0, 800594a <prvSendDHCPDiscover+0x36>
	{
		/* The packet was not successfully queued for sending and must be
		returned to the stack. */
		FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 8005944:	4620      	mov	r0, r4
 8005946:	f000 fb31 	bl	8005fac <FreeRTOS_ReleaseUDPPayloadBuffer>
	}
}
 800594a:	b007      	add	sp, #28
 800594c:	bd30      	pop	{r4, r5, pc}
 800594e:	bf00      	nop
 8005950:	08009738 	.word	0x08009738
 8005954:	20004de0 	.word	0x20004de0

08005958 <xIsDHCPSocket>:
	if( xDHCPData.xDHCPSocket == xSocket )
 8005958:	4b02      	ldr	r3, [pc, #8]	; (8005964 <xIsDHCPSocket+0xc>)
 800595a:	6a1b      	ldr	r3, [r3, #32]
}
 800595c:	1a1b      	subs	r3, r3, r0
 800595e:	4258      	negs	r0, r3
 8005960:	4158      	adcs	r0, r3
 8005962:	4770      	bx	lr
 8005964:	20004de0 	.word	0x20004de0

08005968 <vDHCPProcess>:
{
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4c62      	ldr	r4, [pc, #392]	; (8005af4 <vDHCPProcess+0x18c>)
	if( xReset != pdFALSE )
 800596c:	b108      	cbz	r0, 8005972 <vDHCPProcess+0xa>
		xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 800596e:	2300      	movs	r3, #0
 8005970:	7723      	strb	r3, [r4, #28]
	switch( xDHCPData.eDHCPState )
 8005972:	7f23      	ldrb	r3, [r4, #28]
 8005974:	2b04      	cmp	r3, #4
 8005976:	f200 80bc 	bhi.w	8005af2 <vDHCPProcess+0x18a>
 800597a:	e8df f003 	tbb	[pc, r3]
 800597e:	2503      	.short	0x2503
 8005980:	8e50      	.short	0x8e50
 8005982:	9e          	.byte	0x9e
 8005983:	00          	.byte	0x00
	if( xDHCPData.ulTransactionId == 0ul )
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	b9e3      	cbnz	r3, 80059c2 <vDHCPProcess+0x5a>
		xDHCPData.ulTransactionId = ipconfigRAND32();
 8005988:	f003 fb28 	bl	8008fdc <uxRand>
 800598c:	6020      	str	r0, [r4, #0]
	xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 800598e:	f241 3388 	movw	r3, #5000	; 0x1388
	xDHCPData.xUseBroadcast = 0;
 8005992:	2500      	movs	r5, #0
	xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 8005994:	6163      	str	r3, [r4, #20]
	xDHCPData.xUseBroadcast = 0;
 8005996:	61a5      	str	r5, [r4, #24]
	xDHCPData.ulOfferedIPAddress = 0UL;
 8005998:	6065      	str	r5, [r4, #4]
	xDHCPData.ulDHCPServerAddress = 0UL;
 800599a:	60a5      	str	r5, [r4, #8]
	prvCreateDHCPSocket();
 800599c:	f7ff fef2 	bl	8005784 <prvCreateDHCPSocket>
	vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 80059a0:	20fa      	movs	r0, #250	; 0xfa
 80059a2:	f000 fe21 	bl	80065e8 <vIPReloadDHCPTimer>
				if( xDHCPData.xDHCPSocket == NULL )
 80059a6:	6a23      	ldr	r3, [r4, #32]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 8090 	beq.w	8005ace <vDHCPProcess+0x166>
				*ipLOCAL_IP_ADDRESS_POINTER = 0UL;
 80059ae:	4b52      	ldr	r3, [pc, #328]	; (8005af8 <vDHCPProcess+0x190>)
 80059b0:	615d      	str	r5, [r3, #20]
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 80059b2:	f7ff f891 	bl	8004ad8 <xTaskGetTickCount>
 80059b6:	6120      	str	r0, [r4, #16]
					prvSendDHCPDiscover( );
 80059b8:	f7ff ffac 	bl	8005914 <prvSendDHCPDiscover>
					xDHCPData.eDHCPState = eWaitingOffer;
 80059bc:	2301      	movs	r3, #1
						xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 80059be:	7723      	strb	r3, [r4, #28]
 80059c0:	bd38      	pop	{r3, r4, r5, pc}
		xDHCPData.ulTransactionId++;
 80059c2:	3301      	adds	r3, #1
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	e7e2      	b.n	800598e <vDHCPProcess+0x26>
			if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_OFFER ) == pdPASS )
 80059c8:	2002      	movs	r0, #2
 80059ca:	f7ff fe39 	bl	8005640 <prvProcessDHCPReplies>
 80059ce:	2801      	cmp	r0, #1
 80059d0:	d109      	bne.n	80059e6 <vDHCPProcess+0x7e>
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 80059d2:	f7ff f881 	bl	8004ad8 <xTaskGetTickCount>
					xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 80059d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80059da:	6163      	str	r3, [r4, #20]
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 80059dc:	6120      	str	r0, [r4, #16]
					prvSendDHCPRequest( );
 80059de:	f7ff ff71 	bl	80058c4 <prvSendDHCPRequest>
					xDHCPData.eDHCPState = eWaitingAcknowledge;
 80059e2:	2302      	movs	r3, #2
 80059e4:	e7eb      	b.n	80059be <vDHCPProcess+0x56>
			else if( ( xTaskGetTickCount() - xDHCPData.xDHCPTxTime ) > xDHCPData.xDHCPTxPeriod )
 80059e6:	f7ff f877 	bl	8004ad8 <xTaskGetTickCount>
 80059ea:	6922      	ldr	r2, [r4, #16]
 80059ec:	6963      	ldr	r3, [r4, #20]
 80059ee:	1a80      	subs	r0, r0, r2
 80059f0:	4298      	cmp	r0, r3
 80059f2:	d97e      	bls.n	8005af2 <vDHCPProcess+0x18a>
				xDHCPData.xDHCPTxPeriod <<= 1;
 80059f4:	005b      	lsls	r3, r3, #1
				if( xDHCPData.xDHCPTxPeriod <= ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 80059f6:	f247 5230 	movw	r2, #30000	; 0x7530
 80059fa:	4293      	cmp	r3, r2
				xDHCPData.xDHCPTxPeriod <<= 1;
 80059fc:	6163      	str	r3, [r4, #20]
				if( xDHCPData.xDHCPTxPeriod <= ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 80059fe:	d866      	bhi.n	8005ace <vDHCPProcess+0x166>
					xDHCPData.ulTransactionId++;
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	3301      	adds	r3, #1
 8005a04:	6023      	str	r3, [r4, #0]
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8005a06:	f7ff f867 	bl	8004ad8 <xTaskGetTickCount>
					xDHCPData.xUseBroadcast = !xDHCPData.xUseBroadcast;
 8005a0a:	69a3      	ldr	r3, [r4, #24]
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8005a0c:	6120      	str	r0, [r4, #16]
					xDHCPData.xUseBroadcast = !xDHCPData.xUseBroadcast;
 8005a0e:	fab3 f383 	clz	r3, r3
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	61a3      	str	r3, [r4, #24]
}
 8005a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
					prvSendDHCPDiscover( );
 8005a1a:	f7ff bf7b 	b.w	8005914 <prvSendDHCPDiscover>
			if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_ACK ) == pdPASS )
 8005a1e:	2005      	movs	r0, #5
 8005a20:	f7ff fe0e 	bl	8005640 <prvProcessDHCPReplies>
 8005a24:	2801      	cmp	r0, #1
 8005a26:	d122      	bne.n	8005a6e <vDHCPProcess+0x106>
				*ipLOCAL_IP_ADDRESS_POINTER = xDHCPData.ulOfferedIPAddress;
 8005a28:	4a33      	ldr	r2, [pc, #204]	; (8005af8 <vDHCPProcess+0x190>)
 8005a2a:	6863      	ldr	r3, [r4, #4]
 8005a2c:	6153      	str	r3, [r2, #20]
				xNetworkAddressing.ulBroadcastAddress = ( xDHCPData.ulOfferedIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
 8005a2e:	4a33      	ldr	r2, [pc, #204]	; (8005afc <vDHCPProcess+0x194>)
 8005a30:	6851      	ldr	r1, [r2, #4]
 8005a32:	ea63 0301 	orn	r3, r3, r1
 8005a36:	6113      	str	r3, [r2, #16]
				xDHCPData.eDHCPState = eLeasedAddress;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	7723      	strb	r3, [r4, #28]
				vIPNetworkUpCalls( );
 8005a3c:	f000 fbb6 	bl	80061ac <vIPNetworkUpCalls>
				vSocketClose( xDHCPData.xDHCPSocket );
 8005a40:	6a20      	ldr	r0, [r4, #32]
 8005a42:	f001 f859 	bl	8006af8 <vSocketClose>
				xDHCPData.xDHCPSocket = NULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	6223      	str	r3, [r4, #32]
				if( xDHCPData.ulLeaseTime == 0UL )
 8005a4a:	68e3      	ldr	r3, [r4, #12]
 8005a4c:	b943      	cbnz	r3, 8005a60 <vDHCPProcess+0xf8>
					xDHCPData.ulLeaseTime = dhcpDEFAULT_LEASE_TIME;
 8005a4e:	4b2c      	ldr	r3, [pc, #176]	; (8005b00 <vDHCPProcess+0x198>)
					xDHCPData.ulLeaseTime = dhcpMINIMUM_LEASE_TIME;
 8005a50:	60e3      	str	r3, [r4, #12]
				vARPSendGratuitous();
 8005a52:	f7ff fd89 	bl	8005568 <vARPSendGratuitous>
				vIPReloadDHCPTimer( xDHCPData.ulLeaseTime );
 8005a56:	68e0      	ldr	r0, [r4, #12]
}
 8005a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 8005a5c:	f000 bdc4 	b.w	80065e8 <vIPReloadDHCPTimer>
				else if( xDHCPData.ulLeaseTime < dhcpMINIMUM_LEASE_TIME )
 8005a60:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d8f4      	bhi.n	8005a52 <vDHCPProcess+0xea>
					xDHCPData.ulLeaseTime = dhcpMINIMUM_LEASE_TIME;
 8005a68:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005a6c:	e7f0      	b.n	8005a50 <vDHCPProcess+0xe8>
				if( ( xTaskGetTickCount() - xDHCPData.xDHCPTxTime ) > xDHCPData.xDHCPTxPeriod )
 8005a6e:	f7ff f833 	bl	8004ad8 <xTaskGetTickCount>
 8005a72:	6922      	ldr	r2, [r4, #16]
 8005a74:	6963      	ldr	r3, [r4, #20]
 8005a76:	1a80      	subs	r0, r0, r2
 8005a78:	4298      	cmp	r0, r3
 8005a7a:	d93a      	bls.n	8005af2 <vDHCPProcess+0x18a>
					xDHCPData.xDHCPTxPeriod <<= 1;
 8005a7c:	005b      	lsls	r3, r3, #1
					if( xDHCPData.xDHCPTxPeriod <= ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 8005a7e:	f247 5230 	movw	r2, #30000	; 0x7530
 8005a82:	4293      	cmp	r3, r2
					xDHCPData.xDHCPTxPeriod <<= 1;
 8005a84:	6163      	str	r3, [r4, #20]
					if( xDHCPData.xDHCPTxPeriod <= ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 8005a86:	d806      	bhi.n	8005a96 <vDHCPProcess+0x12e>
						xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8005a88:	f7ff f826 	bl	8004ad8 <xTaskGetTickCount>
 8005a8c:	6120      	str	r0, [r4, #16]
}
 8005a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
						prvSendDHCPRequest( );
 8005a92:	f7ff bf17 	b.w	80058c4 <prvSendDHCPRequest>
						xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e791      	b.n	80059be <vDHCPProcess+0x56>
			prvCreateDHCPSocket();
 8005a9a:	f7ff fe73 	bl	8005784 <prvCreateDHCPSocket>
			if( xDHCPData.xDHCPSocket != NULL )
 8005a9e:	6a23      	ldr	r3, [r4, #32]
 8005aa0:	b33b      	cbz	r3, 8005af2 <vDHCPProcess+0x18a>
				xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8005aa2:	f7ff f819 	bl	8004ad8 <xTaskGetTickCount>
				xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 8005aa6:	f241 3388 	movw	r3, #5000	; 0x1388
				xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8005aaa:	6120      	str	r0, [r4, #16]
				xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 8005aac:	6163      	str	r3, [r4, #20]
				prvSendDHCPRequest( );
 8005aae:	f7ff ff09 	bl	80058c4 <prvSendDHCPRequest>
				xDHCPData.eDHCPState = eWaitingAcknowledge;
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	7723      	strb	r3, [r4, #28]
				vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 8005ab6:	20fa      	movs	r0, #250	; 0xfa
 8005ab8:	e7ce      	b.n	8005a58 <vDHCPProcess+0xf0>
			vIPSetDHCPTimerEnableState( pdFALSE );
 8005aba:	2000      	movs	r0, #0
}
 8005abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			vIPSetDHCPTimerEnableState( pdFALSE );
 8005ac0:	f000 bd86 	b.w	80065d0 <vIPSetDHCPTimerEnableState>
			vSocketClose( xDHCPData.xDHCPSocket );
 8005ac4:	f001 f818 	bl	8006af8 <vSocketClose>
			xDHCPData.xDHCPSocket = NULL;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	6223      	str	r3, [r4, #32]
}
 8005acc:	bd38      	pop	{r3, r4, r5, pc}
		taskENTER_CRITICAL();
 8005ace:	f7fe f939 	bl	8003d44 <vPortEnterCritical>
			*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <vDHCPProcess+0x194>)
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <vDHCPProcess+0x190>)
 8005ad8:	615a      	str	r2, [r3, #20]
		taskEXIT_CRITICAL();
 8005ada:	f7fe f955 	bl	8003d88 <vPortExitCritical>
		xDHCPData.eDHCPState = eNotUsingLeasedAddress;
 8005ade:	2304      	movs	r3, #4
		vIPSetDHCPTimerEnableState( pdFALSE );
 8005ae0:	2000      	movs	r0, #0
		xDHCPData.eDHCPState = eNotUsingLeasedAddress;
 8005ae2:	7723      	strb	r3, [r4, #28]
		vIPSetDHCPTimerEnableState( pdFALSE );
 8005ae4:	f000 fd74 	bl	80065d0 <vIPSetDHCPTimerEnableState>
		vIPNetworkUpCalls( );
 8005ae8:	f000 fb60 	bl	80061ac <vIPNetworkUpCalls>
		if( xDHCPData.xDHCPSocket != NULL )
 8005aec:	6a20      	ldr	r0, [r4, #32]
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d1e8      	bne.n	8005ac4 <vDHCPProcess+0x15c>
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	20004de0 	.word	0x20004de0
 8005af8:	200001b0 	.word	0x200001b0
 8005afc:	20004edc 	.word	0x20004edc
 8005b00:	0a4cb800 	.word	0x0a4cb800

08005b04 <prvSkipNameField>:

static uint8_t *prvSkipNameField( uint8_t *pucByte )
{
	/* Determine if the name is the fully coded name, or an offset to the name
	elsewhere in the message. */
	if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8005b04:	7803      	ldrb	r3, [r0, #0]
 8005b06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b0a:	2bc0      	cmp	r3, #192	; 0xc0
 8005b0c:	d103      	bne.n	8005b16 <prvSkipNameField+0x12>
	{
		/* Jump over the two byte offset. */
		pucByte += sizeof( uint16_t );
 8005b0e:	3002      	adds	r0, #2
 8005b10:	4770      	bx	lr
		/* pucByte points to the full name.  Walk over the string. */
		while( *pucByte != 0x00 )
		{
			/* The number of bytes to jump for each name section is stored in the byte
			before the name section. */
			pucByte += ( *pucByte + 1 );
 8005b12:	3301      	adds	r3, #1
 8005b14:	4418      	add	r0, r3
		while( *pucByte != 0x00 )
 8005b16:	7803      	ldrb	r3, [r0, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1fa      	bne.n	8005b12 <prvSkipNameField+0xe>
		}

		pucByte++;
 8005b1c:	3001      	adds	r0, #1
	}

	return pucByte;
}
 8005b1e:	4770      	bx	lr

08005b20 <prvParseDNSReply>:

#endif /* ipconfigUSE_NBNS */
/*-----------------------------------------------------------*/

static uint32_t prvParseDNSReply( uint8_t *pucUDPPayloadBuffer, TickType_t xIdentifier )
{
 8005b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b24:	4605      	mov	r5, r0
 8005b26:	b0a1      	sub	sp, #132	; 0x84
uint16_t x, usDataLength, usQuestions;
#if( ipconfigUSE_LLMNR == 1 )
	uint16_t usType = 0, usClass = 0;
#endif
#if( ipconfigUSE_DNS_CACHE == 1 )
	char pcName[128] = ""; /*_RB_ What is the significance of 128?  Probably too big to go on the stack for a small MCU but don't know how else it could be made re-entrant.  Might be necessary. */
 8005b28:	2600      	movs	r6, #0
{
 8005b2a:	460c      	mov	r4, r1
	char pcName[128] = ""; /*_RB_ What is the significance of 128?  Probably too big to go on the stack for a small MCU but don't know how else it could be made re-entrant.  Might be necessary. */
 8005b2c:	227c      	movs	r2, #124	; 0x7c
 8005b2e:	4631      	mov	r1, r6
 8005b30:	a801      	add	r0, sp, #4
 8005b32:	9600      	str	r6, [sp, #0]
 8005b34:	f003 fbc2 	bl	80092bc <memset>
#endif

	pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;

	if( pxDNSMessageHeader->usIdentifier == ( uint16_t ) xIdentifier )
 8005b38:	882b      	ldrh	r3, [r5, #0]
 8005b3a:	b2a4      	uxth	r4, r4
 8005b3c:	42a3      	cmp	r3, r4
 8005b3e:	d003      	beq.n	8005b48 <prvParseDNSReply+0x28>
uint32_t ulIPAddress = 0UL;
 8005b40:	2000      	movs	r0, #0
		}
#endif /* ipconfigUSE_LLMNR == 1 */
	}

	return ulIPAddress;
}
 8005b42:	b021      	add	sp, #132	; 0x84
 8005b44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 8005b48:	88ab      	ldrh	r3, [r5, #4]
 8005b4a:	ea4f 2813 	mov.w	r8, r3, lsr #8
 8005b4e:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
	uint16_t usType = 0, usClass = 0;
 8005b52:	4631      	mov	r1, r6
 8005b54:	4633      	mov	r3, r6
		for( x = 0; x < usQuestions; x++ )
 8005b56:	4632      	mov	r2, r6
	char *pcRequestedName = NULL;
 8005b58:	4637      	mov	r7, r6
		pucByte = pucUDPPayloadBuffer + sizeof( DNSMessage_t );
 8005b5a:	f105 040c 	add.w	r4, r5, #12
		usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 8005b5e:	fa1f f888 	uxth.w	r8, r8
					pcName[xNameLen++] = '.';
 8005b62:	262e      	movs	r6, #46	; 0x2e
		for( x = 0; x < usQuestions; x++ )
 8005b64:	4542      	cmp	r2, r8
 8005b66:	d10d      	bne.n	8005b84 <prvParseDNSReply+0x64>
		pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 8005b68:	88e8      	ldrh	r0, [r5, #6]
 8005b6a:	0a06      	lsrs	r6, r0, #8
 8005b6c:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
		if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8005b70:	8868      	ldrh	r0, [r5, #2]
 8005b72:	f400 6078 	and.w	r0, r0, #3968	; 0xf80
		pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 8005b76:	b2b6      	uxth	r6, r6
		if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8005b78:	2880      	cmp	r0, #128	; 0x80
		pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 8005b7a:	80ee      	strh	r6, [r5, #6]
		if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8005b7c:	f040 80ad 	bne.w	8005cda <prvParseDNSReply+0x1ba>
 8005b80:	2200      	movs	r2, #0
 8005b82:	e067      	b.n	8005c54 <prvParseDNSReply+0x134>
				if( x == 0 )
 8005b84:	2a00      	cmp	r2, #0
 8005b86:	f040 8140 	bne.w	8005e0a <prvParseDNSReply+0x2ea>
		if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8005b8a:	7823      	ldrb	r3, [r4, #0]
 8005b8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b90:	2bc0      	cmp	r3, #192	; 0xc0
 8005b92:	d002      	beq.n	8005b9a <prvParseDNSReply+0x7a>
 8005b94:	4621      	mov	r1, r4
 8005b96:	4613      	mov	r3, r2
 8005b98:	e020      	b.n	8005bdc <prvParseDNSReply+0xbc>
			pucByte += sizeof( uint16_t );
 8005b9a:	1ca0      	adds	r0, r4, #2
			pucByte++;
 8005b9c:	4627      	mov	r7, r4

static portINLINE uint16_t usChar2u16 (const uint8_t *apChr);
static portINLINE uint16_t usChar2u16 (const uint8_t *apChr)
{
	return ( uint16_t )
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 8005b9e:	7801      	ldrb	r1, [r0, #0]
			  ( ( ( uint32_t )apChr[1] ) ) );
 8005ba0:	7843      	ldrb	r3, [r0, #1]
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 8005ba2:	f890 e002 	ldrb.w	lr, [r0, #2]
				usType = usChar2u16( pucByte );
 8005ba6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			  ( ( ( uint32_t )apChr[1] ) ) );
 8005baa:	78c1      	ldrb	r1, [r0, #3]
		for( x = 0; x < usQuestions; x++ )
 8005bac:	3201      	adds	r2, #1
			pucByte += sizeof( uint32_t );
 8005bae:	1d04      	adds	r4, r0, #4
		for( x = 0; x < usQuestions; x++ )
 8005bb0:	b292      	uxth	r2, r2
				usClass = usChar2u16( pucByte + 2 );
 8005bb2:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 8005bb6:	e7d5      	b.n	8005b64 <prvParseDNSReply+0x44>
				if( xNameLen && xNameLen < xLen - 1 )
 8005bb8:	b133      	cbz	r3, 8005bc8 <prvParseDNSReply+0xa8>
 8005bba:	2b7e      	cmp	r3, #126	; 0x7e
					pcName[xNameLen++] = '.';
 8005bbc:	bfdf      	itttt	le
 8005bbe:	af20      	addle	r7, sp, #128	; 0x80
 8005bc0:	18ff      	addle	r7, r7, r3
 8005bc2:	3301      	addle	r3, #1
 8005bc4:	f807 6c80 	strble.w	r6, [r7, #-128]
 8005bc8:	f891 e000 	ldrb.w	lr, [r1]
 8005bcc:	f10e 0701 	add.w	r7, lr, #1
 8005bd0:	4439      	add	r1, r7
				for( xCount = *(pucByte++); xCount--; pucByte++ )
 8005bd2:	4607      	mov	r7, r0
 8005bd4:	42b9      	cmp	r1, r7
 8005bd6:	d107      	bne.n	8005be8 <prvParseDNSReply+0xc8>
 8005bd8:	eb00 010e 	add.w	r1, r0, lr
			while( *pucByte != 0x00 )
 8005bdc:	4608      	mov	r0, r1
 8005bde:	f810 7b01 	ldrb.w	r7, [r0], #1
 8005be2:	2f00      	cmp	r7, #0
 8005be4:	d1e8      	bne.n	8005bb8 <prvParseDNSReply+0x98>
 8005be6:	e7d9      	b.n	8005b9c <prvParseDNSReply+0x7c>
					if( xNameLen < xLen - 1 )
 8005be8:	2b7e      	cmp	r3, #126	; 0x7e
 8005bea:	dc07      	bgt.n	8005bfc <prvParseDNSReply+0xdc>
						pcName[xNameLen++] = *( ( char * ) pucByte );
 8005bec:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 8005bf0:	449c      	add	ip, r3
 8005bf2:	f897 9000 	ldrb.w	r9, [r7]
 8005bf6:	f80c 9c80 	strb.w	r9, [ip, #-128]
 8005bfa:	3301      	adds	r3, #1
				for( xCount = *(pucByte++); xCount--; pucByte++ )
 8005bfc:	3701      	adds	r7, #1
 8005bfe:	e7e9      	b.n	8005bd4 <prvParseDNSReply+0xb4>
	BaseType_t x;
	BaseType_t xFound = pdFALSE;
	static BaseType_t xFreeEntry = 0;

		/* For each entry in the DNS cache table. */
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8005c00:	3401      	adds	r4, #1
 8005c02:	2c04      	cmp	r4, #4
 8005c04:	f107 0718 	add.w	r7, r7, #24
 8005c08:	d138      	bne.n	8005c7c <prvParseDNSReply+0x15c>
				*pulIP = 0;
			}
			else
			{
				/* Called to add or update an item */
				strncpy( xDNSCache[ xFreeEntry ].pcName, pcName, sizeof( xDNSCache[ xFreeEntry ].pcName ) );
 8005c0a:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8005e2c <prvParseDNSReply+0x30c>
 8005c0e:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8005e18 <prvParseDNSReply+0x2f8>
 8005c12:	f8d8 4000 	ldr.w	r4, [r8]
 8005c16:	2718      	movs	r7, #24
 8005c18:	4367      	muls	r7, r4
 8005c1a:	1d38      	adds	r0, r7, #4
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	4669      	mov	r1, sp
 8005c20:	4448      	add	r0, r9
				xDNSCache[ xFreeEntry ].ulIPAddress = *pulIP;

				xFreeEntry++;
 8005c22:	3401      	adds	r4, #1
				strncpy( xDNSCache[ xFreeEntry ].pcName, pcName, sizeof( xDNSCache[ xFreeEntry ].pcName ) );
 8005c24:	f003 fc78 	bl	8009518 <strncpy>
				if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8005c28:	2c04      	cmp	r4, #4
				xDNSCache[ xFreeEntry ].ulIPAddress = *pulIP;
 8005c2a:	f849 6007 	str.w	r6, [r9, r7]
				if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8005c2e:	d002      	beq.n	8005c36 <prvParseDNSReply+0x116>
				xFreeEntry++;
 8005c30:	f8c8 4000 	str.w	r4, [r8]
 8005c34:	e030      	b.n	8005c98 <prvParseDNSReply+0x178>
				{
					xFreeEntry = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	f8c8 3000 	str.w	r3, [r8]
 8005c3c:	e02c      	b.n	8005c98 <prvParseDNSReply+0x178>
				 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	e031      	b.n	8005ca6 <prvParseDNSReply+0x186>
					memcpy( ( void * ) &usDataLength, ( void * ) pucByte, sizeof( uint16_t ) );
 8005c42:	8904      	ldrh	r4, [r0, #8]
					usDataLength = FreeRTOS_ntohs( usDataLength );
 8005c44:	0a23      	lsrs	r3, r4, #8
 8005c46:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
					pucByte += usDataLength + sizeof( uint16_t );
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	330a      	adds	r3, #10
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 8005c4e:	3201      	adds	r2, #1
					pucByte += usDataLength + sizeof( uint16_t );
 8005c50:	18c4      	adds	r4, r0, r3
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 8005c52:	b292      	uxth	r2, r2
 8005c54:	42b2      	cmp	r2, r6
 8005c56:	f43f af73 	beq.w	8005b40 <prvParseDNSReply+0x20>
				pucByte = prvSkipNameField( pucByte );
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f7ff ff52 	bl	8005b04 <prvSkipNameField>
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 8005c60:	7801      	ldrb	r1, [r0, #0]
			  ( ( ( uint32_t )apChr[1] ) ) );
 8005c62:	7843      	ldrb	r3, [r0, #1]
				if( usChar2u16( pucByte ) == dnsTYPE_A_HOST )
 8005c64:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d1ea      	bne.n	8005c42 <prvParseDNSReply+0x122>
					if( ( size_t ) *pucByte == sizeof( uint32_t ) )
 8005c6c:	7a43      	ldrb	r3, [r0, #9]
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	f47f af66 	bne.w	8005b40 <prvParseDNSReply+0x20>
						memcpy( ( void * ) &ulIPAddress, ( void * ) pucByte, sizeof( uint32_t ) );
 8005c74:	f8d0 600a 	ldr.w	r6, [r0, #10]
 8005c78:	4f66      	ldr	r7, [pc, #408]	; (8005e14 <prvParseDNSReply+0x2f4>)
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8005c7a:	2400      	movs	r4, #0
			if( xDNSCache[ x ].pcName[ 0 ] == 0 )
 8005c7c:	783b      	ldrb	r3, [r7, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0c3      	beq.n	8005c0a <prvParseDNSReply+0xea>
			if( strncmp( xDNSCache[ x ].pcName, pcName, sizeof( xDNSCache[ x ].pcName ) ) == 0 )
 8005c82:	2210      	movs	r2, #16
 8005c84:	4669      	mov	r1, sp
 8005c86:	4638      	mov	r0, r7
 8005c88:	f003 fc34 	bl	80094f4 <strncmp>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d1b7      	bne.n	8005c00 <prvParseDNSReply+0xe0>
					xDNSCache[ x ].ulIPAddress = *pulIP;
 8005c90:	2318      	movs	r3, #24
 8005c92:	435c      	muls	r4, r3
 8005c94:	4b60      	ldr	r3, [pc, #384]	; (8005e18 <prvParseDNSReply+0x2f8>)
 8005c96:	511e      	str	r6, [r3, r4]
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8005c98:	4c60      	ldr	r4, [pc, #384]	; (8005e1c <prvParseDNSReply+0x2fc>)
							vDNSDoCallback( ( TickType_t ) pxDNSMessageHeader->usIdentifier, pcName, ulIPAddress );
 8005c9a:	882d      	ldrh	r5, [r5, #0]
		vTaskSuspendAll();
 8005c9c:	f7fe ff14 	bl	8004ac8 <vTaskSuspendAll>
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8005ca0:	68e3      	ldr	r3, [r4, #12]
 8005ca2:	f104 0208 	add.w	r2, r4, #8
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d013      	beq.n	8005cd2 <prvParseDNSReply+0x1b2>
				if( listGET_LIST_ITEM_VALUE( pxIterator ) == xIdentifier )
 8005caa:	6819      	ldr	r1, [r3, #0]
 8005cac:	428d      	cmp	r5, r1
 8005cae:	d1c6      	bne.n	8005c3e <prvParseDNSReply+0x11e>
					DNSCallback_t *pxCallback = ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8005cb0:	68dd      	ldr	r5, [r3, #12]
					pxCallback->pCallbackFunction( pcName, pxCallback->pvSearchID, ulIPAddress );
 8005cb2:	4632      	mov	r2, r6
 8005cb4:	686b      	ldr	r3, [r5, #4]
 8005cb6:	6929      	ldr	r1, [r5, #16]
 8005cb8:	4668      	mov	r0, sp
 8005cba:	4798      	blx	r3
					uxListRemove( &pxCallback->xListItem );
 8005cbc:	f105 0014 	add.w	r0, r5, #20
 8005cc0:	f7fd ffd3 	bl	8003c6a <uxListRemove>
					vPortFree( pxCallback );
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f7fe fa29 	bl	800411c <vPortFree>
					if( listLIST_IS_EMPTY( &xCallbackList ) )
 8005cca:	6820      	ldr	r0, [r4, #0]
 8005ccc:	b908      	cbnz	r0, 8005cd2 <prvParseDNSReply+0x1b2>
						vIPSetDnsTimerEnableState( pdFALSE );
 8005cce:	f000 fc93 	bl	80065f8 <vIPSetDnsTimerEnableState>
		xTaskResumeAll();
 8005cd2:	f7fe ff99 	bl	8004c08 <xTaskResumeAll>
uint32_t ulIPAddress = 0UL;
 8005cd6:	4630      	mov	r0, r6
	return ulIPAddress;
 8005cd8:	e733      	b.n	8005b42 <prvParseDNSReply+0x22>
		else if( usQuestions && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) )
 8005cda:	2a00      	cmp	r2, #0
 8005cdc:	f43f af30 	beq.w	8005b40 <prvParseDNSReply+0x20>
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	f47f af2d 	bne.w	8005b40 <prvParseDNSReply+0x20>
 8005ce6:	2901      	cmp	r1, #1
 8005ce8:	f47f af2a 	bne.w	8005b40 <prvParseDNSReply+0x20>
			if( xApplicationDNSQueryHook ( ( pcRequestedName + 1 ) ) )
 8005cec:	1c78      	adds	r0, r7, #1
 8005cee:	f003 f97b 	bl	8008fe8 <xApplicationDNSQueryHook>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	f43f af24 	beq.w	8005b40 <prvParseDNSReply+0x20>
			NetworkBufferDescriptor_t *pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f000 f94f 	bl	8005f9c <pxUDPPayloadBuffer_to_NetworkBuffer>
				if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 8005cfe:	4b48      	ldr	r3, [pc, #288]	; (8005e20 <prvParseDNSReply+0x300>)
 8005d00:	681b      	ldr	r3, [r3, #0]
			NetworkBufferDescriptor_t *pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8005d02:	4602      	mov	r2, r0
				if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d17a      	bne.n	8005dfe <prvParseDNSReply+0x2de>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	f43f af19 	beq.w	8005b40 <prvParseDNSReply+0x20>
					sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 8005d0e:	69c1      	ldr	r1, [r0, #28]
 8005d10:	f101 032a 	add.w	r3, r1, #42	; 0x2a
					pxNetworkBuffer->xDataLength = xDataLength;
 8005d14:	61c3      	str	r3, [r0, #28]
					pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, xDataLength + 16 );
 8005d16:	313a      	adds	r1, #58	; 0x3a
 8005d18:	f000 f92b 	bl	8005f72 <pxDuplicateNetworkBufferWithDescriptor>
					if( pxNewBuffer != NULL )
 8005d1c:	4680      	mov	r8, r0
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	f43f af0e 	beq.w	8005b40 <prvParseDNSReply+0x20>
						xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 8005d24:	462b      	mov	r3, r5
						pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + ipUDP_PAYLOAD_OFFSET_IPv4;
 8005d26:	6985      	ldr	r5, [r0, #24]
						xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 8005d28:	1ae4      	subs	r4, r4, r3
						pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + ipUDP_PAYLOAD_OFFSET_IPv4;
 8005d2a:	352a      	adds	r5, #42	; 0x2a
						xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
 8005d2c:	1aff      	subs	r7, r7, r3
						pucByte = pucUDPPayloadBuffer + xOffset1;
 8005d2e:	442c      	add	r4, r5
						pcRequestedName = ( char * ) ( pucUDPPayloadBuffer + xOffset2 );
 8005d30:	442f      	add	r7, r5
 8005d32:	4602      	mov	r2, r0
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE );	/* Set the response flag */
 8005d34:	2600      	movs	r6, #0
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );	/* Provide a single answer */
 8005d36:	2301      	movs	r3, #1
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE );	/* Set the response flag */
 8005d38:	f04f 0e80 	mov.w	lr, #128	; 0x80
					pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8005d3c:	21c0      	movs	r1, #192	; 0xc0
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );	/* Provide a single answer */
 8005d3e:	71eb      	strb	r3, [r5, #7]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE );	/* Set the response flag */
 8005d40:	f885 e002 	strb.w	lr, [r5, #2]
 8005d44:	70ee      	strb	r6, [r5, #3]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );	/* Provide a single answer */
 8005d46:	71ae      	strb	r6, [r5, #6]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );	/* No authority */
 8005d48:	722e      	strb	r6, [r5, #8]
 8005d4a:	726e      	strb	r6, [r5, #9]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );	/* No additional info */
 8005d4c:	72ae      	strb	r6, [r5, #10]
 8005d4e:	72ee      	strb	r6, [r5, #11]
					pxAnswer->ucNameOffset = ( uint8_t )( pcRequestedName - ( char * ) pucUDPPayloadBuffer );
 8005d50:	1b7f      	subs	r7, r7, r5
					pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8005d52:	7021      	strb	r1, [r4, #0]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8005d54:	2193      	movs	r1, #147	; 0x93
					pxAnswer->ucNameOffset = ( uint8_t )( pcRequestedName - ( char * ) pucUDPPayloadBuffer );
 8005d56:	7067      	strb	r7, [r4, #1]
					vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST );	/* Type A: host */
 8005d58:	70e3      	strb	r3, [r4, #3]
					vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );	/* 1: Class IN */
 8005d5a:	7163      	strb	r3, [r4, #5]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8005d5c:	7221      	strb	r1, [r4, #8]
 8005d5e:	4f31      	ldr	r7, [pc, #196]	; (8005e24 <prvParseDNSReply+0x304>)
					vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST );	/* Type A: host */
 8005d60:	70a6      	strb	r6, [r4, #2]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8005d62:	2304      	movs	r3, #4
 8005d64:	21e0      	movs	r1, #224	; 0xe0
 8005d66:	7261      	strb	r1, [r4, #9]
					vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );	/* 1: Class IN */
 8005d68:	7126      	strb	r6, [r4, #4]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8005d6a:	71a6      	strb	r6, [r4, #6]
 8005d6c:	71e3      	strb	r3, [r4, #7]
					vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 8005d6e:	72a6      	strb	r6, [r4, #10]
 8005d70:	72e3      	strb	r3, [r4, #11]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	ba1b      	rev	r3, r3
					vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 8005d76:	0e1b      	lsrs	r3, r3, #24
 8005d78:	7323      	strb	r3, [r4, #12]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	ba1b      	rev	r3, r3
 8005d7e:	0c1b      	lsrs	r3, r3, #16
 8005d80:	7363      	strb	r3, [r4, #13]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	ba1b      	rev	r3, r3
 8005d86:	0a1b      	lsrs	r3, r3, #8
 8005d88:	73a3      	strb	r3, [r4, #14]
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
 8005d8c:	73e3      	strb	r3, [r4, #15]
					usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucUDPPayloadBuffer ) );
 8005d8e:	1b64      	subs	r4, r4, r5
 8005d90:	b2a4      	uxth	r4, r4
 8005d92:	f104 0110 	add.w	r1, r4, #16
		pxIPHeader->usLength               = FreeRTOS_htons( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8005d96:	b209      	sxth	r1, r1
 8005d98:	f101 001c 	add.w	r0, r1, #28
		pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 8005d9c:	6993      	ldr	r3, [r2, #24]
		pxIPHeader->usLength               = FreeRTOS_htons( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8005d9e:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8005da2:	0a00      	lsrs	r0, r0, #8
 8005da4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8005da8:	8218      	strh	r0, [r3, #16]
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8005daa:	f8d3 001a 	ldr.w	r0, [r3, #26]
 8005dae:	f8c3 001e 	str.w	r0, [r3, #30]
		pxIPHeader->ulSourceIPAddress      = *ipLOCAL_IP_ADDRESS_POINTER;
 8005db2:	6978      	ldr	r0, [r7, #20]
		pxIPHeader->usIdentification       = FreeRTOS_htons( usPacketIdentifier );
 8005db4:	4f1c      	ldr	r7, [pc, #112]	; (8005e28 <prvParseDNSReply+0x308>)
		pxIPHeader->ulSourceIPAddress      = *ipLOCAL_IP_ADDRESS_POINTER;
 8005db6:	f8c3 001a 	str.w	r0, [r3, #26]
		pxIPHeader->usIdentification       = FreeRTOS_htons( usPacketIdentifier );
 8005dba:	8838      	ldrh	r0, [r7, #0]
		pxIPHeader->ucTimeToLive           = ipconfigUDP_TIME_TO_LIVE;
 8005dbc:	f883 e016 	strb.w	lr, [r3, #22]
		pxIPHeader->usIdentification       = FreeRTOS_htons( usPacketIdentifier );
 8005dc0:	0a05      	lsrs	r5, r0, #8
 8005dc2:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
		usPacketIdentifier++;
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	8038      	strh	r0, [r7, #0]
		pxUDPHeader->usLength              = FreeRTOS_htons( lNetLength + ipSIZE_OF_UDP_HEADER );
 8005dca:	f101 0708 	add.w	r7, r1, #8
 8005dce:	3418      	adds	r4, #24
 8005dd0:	0a3f      	lsrs	r7, r7, #8
 8005dd2:	ea47 2404 	orr.w	r4, r7, r4, lsl #8
		vFlip_16( pxUDPPacket->xUDPHeader.usSourcePort, pxUDPPacket->xUDPHeader.usDestinationPort );
 8005dd6:	8c58      	ldrh	r0, [r3, #34]	; 0x22
		pxUDPHeader->usLength              = FreeRTOS_htons( lNetLength + ipSIZE_OF_UDP_HEADER );
 8005dd8:	84dc      	strh	r4, [r3, #38]	; 0x26
		pxNetworkBuffer->xDataLength = ( size_t ) ( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER );
 8005dda:	312a      	adds	r1, #42	; 0x2a
		vFlip_16( pxUDPPacket->xUDPHeader.usSourcePort, pxUDPPacket->xUDPHeader.usDestinationPort );
 8005ddc:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
		pxIPHeader->usIdentification       = FreeRTOS_htons( usPacketIdentifier );
 8005dde:	825d      	strh	r5, [r3, #18]
		vFlip_16( pxUDPPacket->xUDPHeader.usSourcePort, pxUDPPacket->xUDPHeader.usDestinationPort );
 8005de0:	8498      	strh	r0, [r3, #36]	; 0x24
 8005de2:	845c      	strh	r4, [r3, #34]	; 0x22
		vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8005de4:	4610      	mov	r0, r2
		pxNetworkBuffer->xDataLength = ( size_t ) ( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER );
 8005de6:	61d1      	str	r1, [r2, #28]
		vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8005de8:	4631      	mov	r1, r6
 8005dea:	f000 f9f5 	bl	80061d8 <vReturnEthernetFrame>
					if( pxNewBuffer != NULL )
 8005dee:	f1b8 0f00 	cmp.w	r8, #0
 8005df2:	f43f aea5 	beq.w	8005b40 <prvParseDNSReply+0x20>
						vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8005df6:	4640      	mov	r0, r8
 8005df8:	f002 ffb4 	bl	8008d64 <vReleaseNetworkBufferAndDescriptor>
 8005dfc:	e76b      	b.n	8005cd6 <prvParseDNSReply+0x1b6>
				if( pxNetworkBuffer != NULL )
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	f43f ae9e 	beq.w	8005b40 <prvParseDNSReply+0x20>
			NetworkBufferDescriptor_t *pxNewBuffer = NULL;
 8005e04:	f04f 0800 	mov.w	r8, #0
 8005e08:	e794      	b.n	8005d34 <prvParseDNSReply+0x214>
				pucByte = prvSkipNameField( pucByte );
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f7ff fe7a 	bl	8005b04 <prvSkipNameField>
 8005e10:	e6c5      	b.n	8005b9e <prvParseDNSReply+0x7e>
 8005e12:	bf00      	nop
 8005e14:	20004e1c 	.word	0x20004e1c
 8005e18:	20004e18 	.word	0x20004e18
 8005e1c:	20004e04 	.word	0x20004e04
 8005e20:	08009790 	.word	0x08009790
 8005e24:	200001b0 	.word	0x200001b0
 8005e28:	20004e7c 	.word	0x20004e7c
 8005e2c:	20004e78 	.word	0x20004e78

08005e30 <vDNSInitialise>:
		vListInitialise( &xCallbackList );
 8005e30:	4801      	ldr	r0, [pc, #4]	; (8005e38 <vDNSInitialise+0x8>)
 8005e32:	f7fd bee9 	b.w	8003c08 <vListInitialise>
 8005e36:	bf00      	nop
 8005e38:	20004e04 	.word	0x20004e04

08005e3c <vDNSCheckCallBack>:
	{
 8005e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8005e40:	4d17      	ldr	r5, [pc, #92]	; (8005ea0 <vDNSCheckCallBack+0x64>)
	{
 8005e42:	4607      	mov	r7, r0
		vTaskSuspendAll();
 8005e44:	f7fe fe40 	bl	8004ac8 <vTaskSuspendAll>
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8005e48:	68ee      	ldr	r6, [r5, #12]
 8005e4a:	f105 0808 	add.w	r8, r5, #8
 8005e4e:	4546      	cmp	r6, r8
 8005e50:	d107      	bne.n	8005e62 <vDNSCheckCallBack+0x26>
		xTaskResumeAll();
 8005e52:	f7fe fed9 	bl	8004c08 <xTaskResumeAll>
		if( listLIST_IS_EMPTY( &xCallbackList ) )
 8005e56:	6828      	ldr	r0, [r5, #0]
 8005e58:	b9f8      	cbnz	r0, 8005e9a <vDNSCheckCallBack+0x5e>
	}
 8005e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			vIPSetDnsTimerEnableState( pdFALSE );
 8005e5e:	f000 bbcb 	b.w	80065f8 <vIPSetDnsTimerEnableState>
				DNSCallback_t *pxCallback = ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8005e62:	68f4      	ldr	r4, [r6, #12]
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8005e64:	6876      	ldr	r6, [r6, #4]
				if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8005e66:	b157      	cbz	r7, 8005e7e <vDNSCheckCallBack+0x42>
 8005e68:	6923      	ldr	r3, [r4, #16]
 8005e6a:	429f      	cmp	r7, r3
 8005e6c:	d107      	bne.n	8005e7e <vDNSCheckCallBack+0x42>
					uxListRemove( &pxCallback->xListItem );
 8005e6e:	f104 0014 	add.w	r0, r4, #20
 8005e72:	f7fd fefa 	bl	8003c6a <uxListRemove>
					vPortFree( ( void * ) pxCallback );
 8005e76:	4620      	mov	r0, r4
 8005e78:	f7fe f950 	bl	800411c <vPortFree>
 8005e7c:	e7e7      	b.n	8005e4e <vDNSCheckCallBack+0x12>
				else if( xTaskCheckForTimeOut( &pxCallback->xTimeoutState, &pxCallback->xRemaningTime ) != pdFALSE )
 8005e7e:	4621      	mov	r1, r4
 8005e80:	f104 0008 	add.w	r0, r4, #8
 8005e84:	f7ff f8c6 	bl	8005014 <xTaskCheckForTimeOut>
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	d0e0      	beq.n	8005e4e <vDNSCheckCallBack+0x12>
					pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0 );
 8005e8c:	6863      	ldr	r3, [r4, #4]
 8005e8e:	6921      	ldr	r1, [r4, #16]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005e96:	4798      	blx	r3
 8005e98:	e7e9      	b.n	8005e6e <vDNSCheckCallBack+0x32>
 8005e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20004e04 	.word	0x20004e04

08005ea4 <ulDNSHandlePacket>:
{
 8005ea4:	b508      	push	{r3, lr}
	prvParseDNSReply( pucUDPPayloadBuffer, ( uint32_t ) pxDNSMessageHeader->usIdentifier );
 8005ea6:	6980      	ldr	r0, [r0, #24]
 8005ea8:	f830 1f2a 	ldrh.w	r1, [r0, #42]!
 8005eac:	f7ff fe38 	bl	8005b20 <prvParseDNSReply>
}
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	bd08      	pop	{r3, pc}

08005eb4 <prvIPTimerStart>:
	#endif /* ipconfigUSE_TCP == 1 */
}
/*-----------------------------------------------------------*/

static void prvIPTimerStart( IPTimer_t *pxTimer, TickType_t xTime )
{
 8005eb4:	b538      	push	{r3, r4, r5, lr}
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	460d      	mov	r5, r1
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8005eba:	3004      	adds	r0, #4
 8005ebc:	f7ff f89a 	bl	8004ff4 <vTaskSetTimeOutState>
	pxTimer->ulRemainingTime = xTime;
 8005ec0:	60e5      	str	r5, [r4, #12]
 8005ec2:	7823      	ldrb	r3, [r4, #0]

	if( xTime == ( TickType_t ) 0 )
 8005ec4:	b93d      	cbnz	r5, 8005ed6 <prvIPTimerStart+0x22>
	{
		pxTimer->bExpired = pdTRUE_UNSIGNED;
 8005ec6:	f043 0302 	orr.w	r3, r3, #2
	}
	else
	{
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 8005eca:	7023      	strb	r3, [r4, #0]
	}

	pxTimer->bActive = pdTRUE_UNSIGNED;
 8005ecc:	7823      	ldrb	r3, [r4, #0]
 8005ece:	f043 0301 	orr.w	r3, r3, #1
 8005ed2:	7023      	strb	r3, [r4, #0]
 8005ed4:	bd38      	pop	{r3, r4, r5, pc}
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 8005ed6:	f36f 0341 	bfc	r3, #1, #1
 8005eda:	e7f6      	b.n	8005eca <prvIPTimerStart+0x16>

08005edc <prvIPTimerCheck>:

static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer )
{
BaseType_t xReturn;

	if( pxTimer->bActive == pdFALSE_UNSIGNED )
 8005edc:	7803      	ldrb	r3, [r0, #0]
 8005ede:	07da      	lsls	r2, r3, #31
{
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	4604      	mov	r4, r0
	if( pxTimer->bActive == pdFALSE_UNSIGNED )
 8005ee4:	d401      	bmi.n	8005eea <prvIPTimerCheck+0xe>
	{
		/* The timer is not enabled. */
		xReturn = pdFALSE;
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The timer might have set the bExpired flag already, if not, check the
		value of xTimeOut against ulRemainingTime. */
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 8005eea:	079b      	lsls	r3, r3, #30
 8005eec:	d505      	bpl.n	8005efa <prvIPTimerCheck+0x1e>
			( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE ) )
		{
			prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 8005eee:	4620      	mov	r0, r4
 8005ef0:	6921      	ldr	r1, [r4, #16]
 8005ef2:	f7ff ffdf 	bl	8005eb4 <prvIPTimerStart>
 8005ef6:	2001      	movs	r0, #1
 8005ef8:	bd10      	pop	{r4, pc}
			( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE ) )
 8005efa:	f100 010c 	add.w	r1, r0, #12
 8005efe:	3004      	adds	r0, #4
 8005f00:	f7ff f888 	bl	8005014 <xTaskCheckForTimeOut>
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d1f2      	bne.n	8005eee <prvIPTimerCheck+0x12>
 8005f08:	e7ed      	b.n	8005ee6 <prvIPTimerCheck+0xa>
	...

08005f0c <xIsCallingFromIPTask>:
{
 8005f0c:	b508      	push	{r3, lr}
	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 8005f0e:	f7ff f8c1 	bl	8005094 <xTaskGetCurrentTaskHandle>
 8005f12:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <xIsCallingFromIPTask+0x14>)
 8005f14:	681b      	ldr	r3, [r3, #0]
}
 8005f16:	1a1b      	subs	r3, r3, r0
 8005f18:	4258      	negs	r0, r3
 8005f1a:	4158      	adcs	r0, r3
 8005f1c:	bd08      	pop	{r3, pc}
 8005f1e:	bf00      	nop
 8005f20:	20004ed4 	.word	0x20004ed4

08005f24 <FreeRTOS_NetworkDownFromISR>:
	iptraceNETWORK_DOWN();
}
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_NetworkDownFromISR( void )
{
 8005f24:	b513      	push	{r0, r1, r4, lr}
static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Simply send the network task the appropriate event. */
	if( xQueueSendToBackFromISR( xNetworkEventQueue, &xNetworkDownEvent, &xHigherPriorityTaskWoken ) != pdPASS )
 8005f26:	4809      	ldr	r0, [pc, #36]	; (8005f4c <FreeRTOS_NetworkDownFromISR+0x28>)
 8005f28:	4909      	ldr	r1, [pc, #36]	; (8005f50 <FreeRTOS_NetworkDownFromISR+0x2c>)
 8005f2a:	6800      	ldr	r0, [r0, #0]
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005f2c:	aa02      	add	r2, sp, #8
 8005f2e:	2400      	movs	r4, #0
 8005f30:	f842 4d04 	str.w	r4, [r2, #-4]!
	if( xQueueSendToBackFromISR( xNetworkEventQueue, &xNetworkDownEvent, &xHigherPriorityTaskWoken ) != pdPASS )
 8005f34:	4623      	mov	r3, r4
 8005f36:	f7fe fadf 	bl	80044f8 <xQueueGenericSendFromISR>
 8005f3a:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <FreeRTOS_NetworkDownFromISR+0x30>)
 8005f3c:	2801      	cmp	r0, #1
	}

	iptraceNETWORK_DOWN();

	return xHigherPriorityTaskWoken;
}
 8005f3e:	9801      	ldr	r0, [sp, #4]
		xNetworkDownEventPending = pdFALSE;
 8005f40:	bf0e      	itee	eq
 8005f42:	601c      	streq	r4, [r3, #0]
		xNetworkDownEventPending = pdTRUE;
 8005f44:	2201      	movne	r2, #1
 8005f46:	601a      	strne	r2, [r3, #0]
}
 8005f48:	b002      	add	sp, #8
 8005f4a:	bd10      	pop	{r4, pc}
 8005f4c:	20004ef4 	.word	0x20004ef4
 8005f50:	08009788 	.word	0x08009788
 8005f54:	20004ef0 	.word	0x20004ef0

08005f58 <FreeRTOS_GetUDPPayloadBuffer>:
/*-----------------------------------------------------------*/

void *FreeRTOS_GetUDPPayloadBuffer( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
{
 8005f58:	b508      	push	{r3, lr}
	{
		xBlockTimeTicks = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
	}

	/* Obtain a network buffer with the required amount of storage. */
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( UDPPacket_t ) + xRequestedSizeBytes, xBlockTimeTicks );
 8005f5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8005f5e:	4299      	cmp	r1, r3
 8005f60:	bf28      	it	cs
 8005f62:	4619      	movcs	r1, r3
 8005f64:	302a      	adds	r0, #42	; 0x2a
 8005f66:	f002 ff21 	bl	8008dac <pxGetNetworkBufferWithDescriptor>

	if( pxNetworkBuffer != NULL )
 8005f6a:	b108      	cbz	r0, 8005f70 <FreeRTOS_GetUDPPayloadBuffer+0x18>
	{
		/* Leave space for the UPD header. */
		pvReturn = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8005f6c:	6980      	ldr	r0, [r0, #24]
 8005f6e:	302a      	adds	r0, #42	; 0x2a
	{
		pvReturn = NULL;
	}

	return ( void * ) pvReturn;
}
 8005f70:	bd08      	pop	{r3, pc}

08005f72 <pxDuplicateNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxDuplicateNetworkBufferWithDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer,
	BaseType_t xNewLength )
{
 8005f72:	b538      	push	{r3, r4, r5, lr}
 8005f74:	4605      	mov	r5, r0
 8005f76:	4608      	mov	r0, r1
NetworkBufferDescriptor_t * pxNewBuffer;

	/* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
	The transmit routine wants to have ownership of the network buffer
	descriptor, because it will pass the buffer straight to DMA. */
	pxNewBuffer = pxGetNetworkBufferWithDescriptor( ( size_t ) xNewLength, ( TickType_t ) 0 );
 8005f78:	2100      	movs	r1, #0
 8005f7a:	f002 ff17 	bl	8008dac <pxGetNetworkBufferWithDescriptor>

	if( pxNewBuffer != NULL )
 8005f7e:	4604      	mov	r4, r0
 8005f80:	b150      	cbz	r0, 8005f98 <pxDuplicateNetworkBufferWithDescriptor+0x26>
	{
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8005f82:	696b      	ldr	r3, [r5, #20]
 8005f84:	6143      	str	r3, [r0, #20]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 8005f86:	8c2b      	ldrh	r3, [r5, #32]
 8005f88:	8403      	strh	r3, [r0, #32]
		pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 8005f8a:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8005f8c:	8443      	strh	r3, [r0, #34]	; 0x22
		memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8005f8e:	69ea      	ldr	r2, [r5, #28]
 8005f90:	69a9      	ldr	r1, [r5, #24]
 8005f92:	6980      	ldr	r0, [r0, #24]
 8005f94:	f003 f96d 	bl	8009272 <memcpy>
	}

	return pxNewBuffer;
}
 8005f98:	4620      	mov	r0, r4
 8005f9a:	bd38      	pop	{r3, r4, r5, pc}

08005f9c <pxUDPPayloadBuffer_to_NetworkBuffer>:
NetworkBufferDescriptor_t *pxUDPPayloadBuffer_to_NetworkBuffer( void *pvBuffer )
{
uint8_t *pucBuffer;
NetworkBufferDescriptor_t *pxResult;

	if( pvBuffer == NULL )
 8005f9c:	b128      	cbz	r0, 8005faa <pxUDPPayloadBuffer_to_NetworkBuffer+0xe>
		the network buffer, usually 8 + 2 bytes. */
		pucBuffer -= ( sizeof( UDPPacket_t ) + ipBUFFER_PADDING );

		/* Here a pointer was placed to the network descriptor,
		As a pointer is dereferenced, make sure it is well aligned */
		if( ( ( ( uint32_t ) pucBuffer ) & ( sizeof( pucBuffer ) - 1 ) ) == 0 )
 8005f9e:	0783      	lsls	r3, r0, #30
 8005fa0:	d102      	bne.n	8005fa8 <pxUDPPayloadBuffer_to_NetworkBuffer+0xc>
		{
			/* The following statement may trigger a:
			warning: cast increases required alignment of target type [-Wcast-align].
			It has been confirmed though that the alignment is suitable. */
			pxResult = * ( ( NetworkBufferDescriptor_t ** ) pucBuffer );
 8005fa2:	f850 0c34 	ldr.w	r0, [r0, #-52]
 8005fa6:	4770      	bx	lr
		pxResult = NULL;
 8005fa8:	2000      	movs	r0, #0
			pxResult = NULL;
		}
	}

	return pxResult;
}
 8005faa:	4770      	bx	lr

08005fac <FreeRTOS_ReleaseUDPPayloadBuffer>:
/*-----------------------------------------------------------*/

void FreeRTOS_ReleaseUDPPayloadBuffer( void *pvBuffer )
{
 8005fac:	b508      	push	{r3, lr}
	vReleaseNetworkBufferAndDescriptor( pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer ) );
 8005fae:	f7ff fff5 	bl	8005f9c <pxUDPPayloadBuffer_to_NetworkBuffer>
}
 8005fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	vReleaseNetworkBufferAndDescriptor( pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer ) );
 8005fb6:	f002 bed5 	b.w	8008d64 <vReleaseNetworkBufferAndDescriptor>
	...

08005fbc <FreeRTOS_IPInit>:
/*_RB_ Should we add an error or assert if the task priorities are set such that the servers won't function as expected? */
/*_HT_ There was a bug in FreeRTOS_TCP_IP.c that only occurred when the applications' priority was too high.
 As that bug has been repaired, there is not an urgent reason to warn.
 It is better though to use the advised priority scheme. */
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 8005fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc0:	461e      	mov	r6, r3
#endif /* ipconfigDNS_USE_CALLBACKS != 0 */
/*-----------------------------------------------------------*/

BaseType_t xIPIsNetworkTaskReady( void )
{
	return xIPTaskInitialised;
 8005fc2:	4b39      	ldr	r3, [pc, #228]	; (80060a8 <FreeRTOS_IPInit+0xec>)
{
 8005fc4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 8005fc8:	681b      	ldr	r3, [r3, #0]
{
 8005fca:	4607      	mov	r7, r0
 8005fcc:	468b      	mov	fp, r1
 8005fce:	4692      	mov	sl, r2
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 8005fd0:	b143      	cbz	r3, 8005fe4 <FreeRTOS_IPInit+0x28>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	e7fe      	b.n	8005fe2 <FreeRTOS_IPInit+0x26>
	configASSERT( xNetworkEventQueue == NULL );
 8005fe4:	4c31      	ldr	r4, [pc, #196]	; (80060ac <FreeRTOS_IPInit+0xf0>)
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	b143      	cbz	r3, 8005ffc <FreeRTOS_IPInit+0x40>
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	e7fe      	b.n	8005ffa <FreeRTOS_IPInit+0x3e>
	configASSERT( xIPTaskHandle == NULL );
 8005ffc:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80060c8 <FreeRTOS_IPInit+0x10c>
 8006000:	f8d8 5000 	ldr.w	r5, [r8]
 8006004:	b145      	cbz	r5, 8006018 <FreeRTOS_IPInit+0x5c>
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	e7fe      	b.n	8006016 <FreeRTOS_IPInit+0x5a>
	xNetworkEventQueue = xQueueCreate( ( UBaseType_t ) ipconfigEVENT_QUEUE_LENGTH, ( UBaseType_t ) sizeof( IPStackEvent_t ) );
 8006018:	462a      	mov	r2, r5
 800601a:	2108      	movs	r1, #8
 800601c:	201e      	movs	r0, #30
 800601e:	f7fe f975 	bl	800430c <xQueueGenericCreate>
 8006022:	6020      	str	r0, [r4, #0]
	configASSERT( xNetworkEventQueue );
 8006024:	b940      	cbnz	r0, 8006038 <FreeRTOS_IPInit+0x7c>
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	e7fe      	b.n	8006036 <FreeRTOS_IPInit+0x7a>
			vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 8006038:	491d      	ldr	r1, [pc, #116]	; (80060b0 <FreeRTOS_IPInit+0xf4>)
 800603a:	f7fe fb97 	bl	800476c <vQueueAddToRegistry>
		if( xNetworkBuffersInitialise() == pdPASS )
 800603e:	f002 fe49 	bl	8008cd4 <xNetworkBuffersInitialise>
 8006042:	2801      	cmp	r0, #1
 8006044:	d129      	bne.n	800609a <FreeRTOS_IPInit+0xde>
			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 8006046:	4c1b      	ldr	r4, [pc, #108]	; (80060b4 <FreeRTOS_IPInit+0xf8>)
 8006048:	683f      	ldr	r7, [r7, #0]
 800604a:	6027      	str	r7, [r4, #0]
			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800604c:	f8db 3000 	ldr.w	r3, [fp]
 8006050:	6063      	str	r3, [r4, #4]
			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 8006052:	f8da 2000 	ldr.w	r2, [sl]
 8006056:	60a2      	str	r2, [r4, #8]
			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 8006058:	6832      	ldr	r2, [r6, #0]
 800605a:	60e2      	str	r2, [r4, #12]
			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
 800605c:	ea67 0703 	orn	r7, r7, r3
 8006060:	6127      	str	r7, [r4, #16]
			memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 8006062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006064:	4e14      	ldr	r6, [pc, #80]	; (80060b8 <FreeRTOS_IPInit+0xfc>)
 8006066:	c60f      	stmia	r6!, {r0, r1, r2, r3}
				*ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
 8006068:	4b14      	ldr	r3, [pc, #80]	; (80060bc <FreeRTOS_IPInit+0x100>)
			memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 800606a:	6037      	str	r7, [r6, #0]
				*ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
 800606c:	615d      	str	r5, [r3, #20]
			memcpy( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800606e:	f8d9 0000 	ldr.w	r0, [r9]
 8006072:	6018      	str	r0, [r3, #0]
 8006074:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8006078:	809a      	strh	r2, [r3, #4]
			vNetworkSocketsInit();
 800607a:	f000 fb07 	bl	800668c <vNetworkSocketsInit>
			xReturn = xTaskCreate( prvIPTask, "IP-task", ( uint16_t ) ipconfigIP_TASK_STACK_SIZE_WORDS, NULL, ( UBaseType_t ) ipconfigIP_TASK_PRIORITY, &xIPTaskHandle );
 800607e:	2305      	movs	r3, #5
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	f8cd 8004 	str.w	r8, [sp, #4]
 8006086:	462b      	mov	r3, r5
 8006088:	f44f 7220 	mov.w	r2, #640	; 0x280
 800608c:	490c      	ldr	r1, [pc, #48]	; (80060c0 <FreeRTOS_IPInit+0x104>)
 800608e:	480d      	ldr	r0, [pc, #52]	; (80060c4 <FreeRTOS_IPInit+0x108>)
 8006090:	f7fe fc08 	bl	80048a4 <xTaskCreate>
}
 8006094:	b003      	add	sp, #12
 8006096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			vQueueDelete( xNetworkEventQueue );
 800609a:	6820      	ldr	r0, [r4, #0]
 800609c:	f7fe fb8c 	bl	80047b8 <vQueueDelete>
			xNetworkEventQueue = NULL;
 80060a0:	6025      	str	r5, [r4, #0]
BaseType_t xReturn = pdFALSE;
 80060a2:	4628      	mov	r0, r5
	return xReturn;
 80060a4:	e7f6      	b.n	8006094 <FreeRTOS_IPInit+0xd8>
 80060a6:	bf00      	nop
 80060a8:	20004ed8 	.word	0x20004ed8
 80060ac:	20004ef4 	.word	0x20004ef4
 80060b0:	08009767 	.word	0x08009767
 80060b4:	20004edc 	.word	0x20004edc
 80060b8:	20004ec0 	.word	0x20004ec0
 80060bc:	200001b0 	.word	0x200001b0
 80060c0:	0800976f 	.word	0x0800976f
 80060c4:	08006205 	.word	0x08006205
 80060c8:	20004ed4 	.word	0x20004ed4

080060cc <xSendEventStructToIPTask>:
	return xIPTaskInitialised;
 80060cc:	4b12      	ldr	r3, [pc, #72]	; (8006118 <xSendEventStructToIPTask+0x4c>)
{
 80060ce:	b570      	push	{r4, r5, r6, lr}
 80060d0:	4605      	mov	r5, r0
	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 80060d2:	6818      	ldr	r0, [r3, #0]
 80060d4:	f995 3000 	ldrsb.w	r3, [r5]
{
 80060d8:	460e      	mov	r6, r1
	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 80060da:	b900      	cbnz	r0, 80060de <xSendEventStructToIPTask+0x12>
 80060dc:	b9db      	cbnz	r3, 8006116 <xSendEventStructToIPTask+0x4a>
			if( pxEvent->eEventType == eTCPTimerEvent )
 80060de:	2b05      	cmp	r3, #5
 80060e0:	4c0e      	ldr	r4, [pc, #56]	; (800611c <xSendEventStructToIPTask+0x50>)
 80060e2:	d10a      	bne.n	80060fa <xSendEventStructToIPTask+0x2e>
				xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 80060e4:	4a0e      	ldr	r2, [pc, #56]	; (8006120 <xSendEventStructToIPTask+0x54>)
				if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0u )
 80060e6:	6820      	ldr	r0, [r4, #0]
				xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 80060e8:	7813      	ldrb	r3, [r2, #0]
 80060ea:	f043 0302 	orr.w	r3, r3, #2
 80060ee:	7013      	strb	r3, [r2, #0]
				if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0u )
 80060f0:	f7fe fb28 	bl	8004744 <uxQueueMessagesWaiting>
 80060f4:	b108      	cbz	r0, 80060fa <xSendEventStructToIPTask+0x2e>
			xReturn = pdPASS;
 80060f6:	2001      	movs	r0, #1
	return xReturn;
 80060f8:	bd70      	pop	{r4, r5, r6, pc}
			if( ( xIsCallingFromIPTask() == pdTRUE ) && ( xTimeout > ( TickType_t ) 0 ) )
 80060fa:	f7ff ff07 	bl	8005f0c <xIsCallingFromIPTask>
			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, xTimeout );
 80060fe:	2300      	movs	r3, #0
				xTimeout = ( TickType_t ) 0;
 8006100:	2801      	cmp	r0, #1
			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, xTimeout );
 8006102:	bf18      	it	ne
 8006104:	4632      	movne	r2, r6
 8006106:	4629      	mov	r1, r5
 8006108:	6820      	ldr	r0, [r4, #0]
 800610a:	bf08      	it	eq
 800610c:	461a      	moveq	r2, r3
}
 800610e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, xTimeout );
 8006112:	f7fe b93b 	b.w	800438c <xQueueGenericSend>
}
 8006116:	bd70      	pop	{r4, r5, r6, pc}
 8006118:	20004ed8 	.word	0x20004ed8
 800611c:	20004ef4 	.word	0x20004ef4
 8006120:	20004f04 	.word	0x20004f04

08006124 <FreeRTOS_NetworkDown>:
{
 8006124:	b508      	push	{r3, lr}
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8006126:	2100      	movs	r1, #0
 8006128:	4804      	ldr	r0, [pc, #16]	; (800613c <FreeRTOS_NetworkDown+0x18>)
 800612a:	f7ff ffcf 	bl	80060cc <xSendEventStructToIPTask>
 800612e:	4b04      	ldr	r3, [pc, #16]	; (8006140 <FreeRTOS_NetworkDown+0x1c>)
 8006130:	2801      	cmp	r0, #1
		xNetworkDownEventPending = pdTRUE;
 8006132:	bf14      	ite	ne
 8006134:	2201      	movne	r2, #1
		xNetworkDownEventPending = pdFALSE;
 8006136:	2200      	moveq	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	bd08      	pop	{r3, pc}
 800613c:	08009780 	.word	0x08009780
 8006140:	20004ef0 	.word	0x20004ef0

08006144 <xSendEventToIPTask>:
{
 8006144:	b507      	push	{r0, r1, r2, lr}
	xEventMessage.pvData = ( void* )NULL;
 8006146:	2100      	movs	r1, #0
	xEventMessage.eEventType = eEvent;
 8006148:	f88d 0000 	strb.w	r0, [sp]
	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 800614c:	4668      	mov	r0, sp
	xEventMessage.pvData = ( void* )NULL;
 800614e:	9101      	str	r1, [sp, #4]
	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8006150:	f7ff ffbc 	bl	80060cc <xSendEventStructToIPTask>
}
 8006154:	b003      	add	sp, #12
 8006156:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800615c <eConsiderFrameForProcessing>:
{
 800615c:	b510      	push	{r4, lr}
	if( memcmp( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) &( pxEthernetHeader->xDestinationAddress ), sizeof( MACAddress_t ) ) == 0 )
 800615e:	4601      	mov	r1, r0
{
 8006160:	4604      	mov	r4, r0
	if( memcmp( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) &( pxEthernetHeader->xDestinationAddress ), sizeof( MACAddress_t ) ) == 0 )
 8006162:	2206      	movs	r2, #6
 8006164:	480e      	ldr	r0, [pc, #56]	; (80061a0 <eConsiderFrameForProcessing+0x44>)
 8006166:	f003 f875 	bl	8009254 <memcmp>
 800616a:	b168      	cbz	r0, 8006188 <eConsiderFrameForProcessing+0x2c>
	else if( memcmp( ( void * ) xBroadcastMACAddress.ucBytes, ( void * ) pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800616c:	2206      	movs	r2, #6
 800616e:	4621      	mov	r1, r4
 8006170:	480c      	ldr	r0, [pc, #48]	; (80061a4 <eConsiderFrameForProcessing+0x48>)
 8006172:	f003 f86f 	bl	8009254 <memcmp>
 8006176:	b138      	cbz	r0, 8006188 <eConsiderFrameForProcessing+0x2c>
	if( memcmp( ( void * ) xLLMNR_MacAdress.ucBytes, ( void * ) pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8006178:	2206      	movs	r2, #6
 800617a:	4621      	mov	r1, r4
 800617c:	480a      	ldr	r0, [pc, #40]	; (80061a8 <eConsiderFrameForProcessing+0x4c>)
 800617e:	f003 f869 	bl	8009254 <memcmp>
 8006182:	b108      	cbz	r0, 8006188 <eConsiderFrameForProcessing+0x2c>
 8006184:	2000      	movs	r0, #0
 8006186:	bd10      	pop	{r4, pc}
			usFrameType = pxEthernetHeader->usFrameType;
 8006188:	89a3      	ldrh	r3, [r4, #12]
			usFrameType = FreeRTOS_ntohs( usFrameType );
 800618a:	0a18      	lsrs	r0, r3, #8
 800618c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			if( usFrameType <= 0x600U )
 8006190:	b280      	uxth	r0, r0
 8006192:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
 8006196:	bf94      	ite	ls
 8006198:	2000      	movls	r0, #0
 800619a:	2001      	movhi	r0, #1
}
 800619c:	bd10      	pop	{r4, pc}
 800619e:	bf00      	nop
 80061a0:	200001b0 	.word	0x200001b0
 80061a4:	08009777 	.word	0x08009777
 80061a8:	08009761 	.word	0x08009761

080061ac <vIPNetworkUpCalls>:
{
 80061ac:	b508      	push	{r3, lr}
	xNetworkUp = pdTRUE;
 80061ae:	4b08      	ldr	r3, [pc, #32]	; (80061d0 <vIPNetworkUpCalls+0x24>)
 80061b0:	2201      	movs	r2, #1
		vApplicationIPNetworkEventHook( eNetworkUp );
 80061b2:	2000      	movs	r0, #0
	xNetworkUp = pdTRUE;
 80061b4:	601a      	str	r2, [r3, #0]
		vApplicationIPNetworkEventHook( eNetworkUp );
 80061b6:	f002 ff0c 	bl	8008fd2 <vApplicationIPNetworkEventHook>
		vDNSInitialise();
 80061ba:	f7ff fe39 	bl	8005e30 <vDNSInitialise>
	pxTimer->ulReloadTime = xTime;
 80061be:	4805      	ldr	r0, [pc, #20]	; (80061d4 <vIPNetworkUpCalls+0x28>)
 80061c0:	f242 7110 	movw	r1, #10000	; 0x2710
}
 80061c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	pxTimer->ulReloadTime = xTime;
 80061c8:	6101      	str	r1, [r0, #16]
	prvIPTimerStart( pxTimer, xTime );
 80061ca:	f7ff be73 	b.w	8005eb4 <prvIPTimerStart>
 80061ce:	bf00      	nop
 80061d0:	20004ef8 	.word	0x20004ef8
 80061d4:	20004e80 	.word	0x20004e80

080061d8 <vReturnEthernetFrame>:
{
 80061d8:	b430      	push	{r4, r5}
		pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 80061da:	6982      	ldr	r2, [r0, #24]
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80061dc:	4d08      	ldr	r5, [pc, #32]	; (8006200 <vReturnEthernetFrame+0x28>)
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ), sizeof( pxEthernetHeader->xDestinationAddress ) );
 80061de:	4613      	mov	r3, r2
{
 80061e0:	4604      	mov	r4, r0
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ), sizeof( pxEthernetHeader->xDestinationAddress ) );
 80061e2:	f853 0f06 	ldr.w	r0, [r3, #6]!
 80061e6:	6010      	str	r0, [r2, #0]
 80061e8:	8898      	ldrh	r0, [r3, #4]
 80061ea:	8090      	strh	r0, [r2, #4]
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80061ec:	6828      	ldr	r0, [r5, #0]
 80061ee:	f8c2 0006 	str.w	r0, [r2, #6]
 80061f2:	88aa      	ldrh	r2, [r5, #4]
 80061f4:	809a      	strh	r2, [r3, #4]
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 80061f6:	4620      	mov	r0, r4
}
 80061f8:	bc30      	pop	{r4, r5}
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 80061fa:	f7fc bb87 	b.w	800290c <xNetworkInterfaceOutput>
 80061fe:	bf00      	nop
 8006200:	200001b0 	.word	0x200001b0

08006204 <prvIPTask>:
{
 8006204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pxTimer->ulReloadTime = xTime;
 8006208:	4ead      	ldr	r6, [pc, #692]	; (80064c0 <prvIPTask+0x2bc>)
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800620a:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 80064f4 <prvIPTask+0x2f0>
		if( prvIPTimerCheck( &xDHCPTimer ) != pdFALSE )
 800620e:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 80064f8 <prvIPTask+0x2f4>
{
 8006212:	b089      	sub	sp, #36	; 0x24
	FreeRTOS_NetworkDown();
 8006214:	f7ff ff86 	bl	8006124 <FreeRTOS_NetworkDown>
	pxTimer->ulReloadTime = xTime;
 8006218:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	prvIPTimerStart( pxTimer, xTime );
 800621c:	4630      	mov	r0, r6
	pxTimer->ulReloadTime = xTime;
 800621e:	6131      	str	r1, [r6, #16]
	prvIPTimerStart( pxTimer, xTime );
 8006220:	f7ff fe48 	bl	8005eb4 <prvIPTimerStart>
	xIPTaskInitialised = pdTRUE;
 8006224:	4ba7      	ldr	r3, [pc, #668]	; (80064c4 <prvIPTask+0x2c0>)
 8006226:	2201      	movs	r2, #1
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	46c2      	mov	sl, r8
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800622c:	4650      	mov	r0, sl
 800622e:	f7ff fe55 	bl	8005edc <prvIPTimerCheck>
 8006232:	b110      	cbz	r0, 800623a <prvIPTask+0x36>
		xSendEventToIPTask( eARPTimerEvent );
 8006234:	2002      	movs	r0, #2
 8006236:	f7ff ff85 	bl	8006144 <xSendEventToIPTask>
		if( prvIPTimerCheck( &xDHCPTimer ) != pdFALSE )
 800623a:	4658      	mov	r0, fp
 800623c:	f7ff fe4e 	bl	8005edc <prvIPTimerCheck>
 8006240:	b110      	cbz	r0, 8006248 <prvIPTask+0x44>
			xSendEventToIPTask( eDHCPEvent );
 8006242:	2004      	movs	r0, #4
 8006244:	f7ff ff7e 	bl	8006144 <xSendEventToIPTask>
		if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 8006248:	489f      	ldr	r0, [pc, #636]	; (80064c8 <prvIPTask+0x2c4>)
 800624a:	f7ff fe47 	bl	8005edc <prvIPTimerCheck>
 800624e:	b110      	cbz	r0, 8006256 <prvIPTask+0x52>
			vDNSCheckCallBack( NULL );
 8006250:	2000      	movs	r0, #0
 8006252:	f7ff fdf3 	bl	8005e3c <vDNSCheckCallBack>
		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0u )
 8006256:	4c9d      	ldr	r4, [pc, #628]	; (80064cc <prvIPTask+0x2c8>)
 8006258:	6820      	ldr	r0, [r4, #0]
 800625a:	f7fe fa73 	bl	8004744 <uxQueueMessagesWaiting>
 800625e:	4605      	mov	r5, r0
		xTimeNow = xTaskGetTickCount();
 8006260:	f7fe fc3a 	bl	8004ad8 <xTaskGetTickCount>
		if( xStart != ( TickType_t ) 0 )
 8006264:	499a      	ldr	r1, [pc, #616]	; (80064d0 <prvIPTask+0x2cc>)
 8006266:	680b      	ldr	r3, [r1, #0]
 8006268:	b12b      	cbz	r3, 8006276 <prvIPTask+0x72>
			ulNextInitialSequenceNumber += ipINITIAL_SEQUENCE_NUMBER_FACTOR * ( ( xTimeNow - xStart ) * portTICK_PERIOD_MS );
 800626a:	4f9a      	ldr	r7, [pc, #616]	; (80064d4 <prvIPTask+0x2d0>)
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	1ac3      	subs	r3, r0, r3
 8006270:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 8006274:	603b      	str	r3, [r7, #0]
		if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 8006276:	4f98      	ldr	r7, [pc, #608]	; (80064d8 <prvIPTask+0x2d4>)
		xStart = xTimeNow;
 8006278:	6008      	str	r0, [r1, #0]
		xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800627a:	4891      	ldr	r0, [pc, #580]	; (80064c0 <prvIPTask+0x2bc>)
 800627c:	f7ff fe2e 	bl	8005edc <prvIPTimerCheck>
		if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	b103      	cbz	r3, 8006286 <prvIPTask+0x82>
 8006284:	b105      	cbz	r5, 8006288 <prvIPTask+0x84>
		if( xCheckTCPSockets != pdFALSE )
 8006286:	b150      	cbz	r0, 800629e <prvIPTask+0x9a>
			xNextTime = xTCPTimerCheck( xWillSleep );
 8006288:	fab5 f085 	clz	r0, r5
 800628c:	0940      	lsrs	r0, r0, #5
 800628e:	f000 fcb1 	bl	8006bf4 <xTCPTimerCheck>
			prvIPTimerStart( &xTCPTimer, xNextTime );
 8006292:	4601      	mov	r1, r0
 8006294:	488a      	ldr	r0, [pc, #552]	; (80064c0 <prvIPTask+0x2bc>)
 8006296:	f7ff fe0d 	bl	8005eb4 <prvIPTimerStart>
			xProcessedTCPMessage = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	603b      	str	r3, [r7, #0]
	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800629e:	f898 3000 	ldrb.w	r3, [r8]
 80062a2:	07db      	lsls	r3, r3, #31
 80062a4:	d536      	bpl.n	8006314 <prvIPTask+0x110>
		if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 80062a6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80062aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d830      	bhi.n	8006314 <prvIPTask+0x110>
			xMaximumSleepTime = xARPTimer.ulReloadTime;
 80062b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
		if( xDHCPTimer.bActive != pdFALSE_UNSIGNED )
 80062b6:	f89b 3000 	ldrb.w	r3, [fp]
 80062ba:	07dd      	lsls	r5, r3, #31
 80062bc:	d504      	bpl.n	80062c8 <prvIPTask+0xc4>
 80062be:	f8db 300c 	ldr.w	r3, [fp, #12]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	bf28      	it	cs
 80062c6:	461a      	movcs	r2, r3
 80062c8:	68f3      	ldr	r3, [r6, #12]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	bf28      	it	cs
 80062ce:	461a      	movcs	r2, r3
		if( xDNSTimer.bActive != pdFALSE )
 80062d0:	4b7d      	ldr	r3, [pc, #500]	; (80064c8 <prvIPTask+0x2c4>)
 80062d2:	7819      	ldrb	r1, [r3, #0]
 80062d4:	07c8      	lsls	r0, r1, #31
 80062d6:	d503      	bpl.n	80062e0 <prvIPTask+0xdc>
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	429a      	cmp	r2, r3
 80062dc:	bf28      	it	cs
 80062de:	461a      	movcs	r2, r3
		xReceivedEvent.eEventType = eNoEvent;
 80062e0:	a908      	add	r1, sp, #32
 80062e2:	23ff      	movs	r3, #255	; 0xff
 80062e4:	f801 3d10 	strb.w	r3, [r1, #-16]!
		xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep );
 80062e8:	6820      	ldr	r0, [r4, #0]
 80062ea:	2300      	movs	r3, #0
 80062ec:	f7fe f966 	bl	80045bc <xQueueGenericReceive>
		switch( xReceivedEvent.eEventType )
 80062f0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80062f4:	2b0b      	cmp	r3, #11
 80062f6:	d82b      	bhi.n	8006350 <prvIPTask+0x14c>
 80062f8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80062fc:	0038000f 	.word	0x0038000f
 8006300:	0149012b 	.word	0x0149012b
 8006304:	0159014d 	.word	0x0159014d
 8006308:	002a015e 	.word	0x002a015e
 800630c:	0145012e 	.word	0x0145012e
 8006310:	01550151 	.word	0x01550151
	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 8006314:	f242 7210 	movw	r2, #10000	; 0x2710
 8006318:	e7cd      	b.n	80062b6 <prvIPTask+0xb2>
				xNetworkUp = pdFALSE;
 800631a:	4b70      	ldr	r3, [pc, #448]	; (80064dc <prvIPTask+0x2d8>)
		if( xCallEventHook == pdTRUE )
 800631c:	4c70      	ldr	r4, [pc, #448]	; (80064e0 <prvIPTask+0x2dc>)
				xNetworkUp = pdFALSE;
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
		if( xCallEventHook == pdTRUE )
 8006322:	6820      	ldr	r0, [r4, #0]
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 8006324:	f89a 3000 	ldrb.w	r3, [sl]
		if( xCallEventHook == pdTRUE )
 8006328:	2801      	cmp	r0, #1
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 800632a:	f362 0300 	bfi	r3, r2, #0, #1
 800632e:	f88a 3000 	strb.w	r3, [sl]
		if( xCallEventHook == pdTRUE )
 8006332:	d101      	bne.n	8006338 <prvIPTask+0x134>
			vApplicationIPNetworkEventHook( eNetworkDown );
 8006334:	f002 fe4d 	bl	8008fd2 <vApplicationIPNetworkEventHook>
		xCallEventHook = pdTRUE;
 8006338:	2301      	movs	r3, #1
 800633a:	6023      	str	r3, [r4, #0]
	if( xNetworkInterfaceInitialise() != pdPASS )
 800633c:	f7fc fac8 	bl	80028d0 <xNetworkInterfaceInitialise>
 8006340:	2801      	cmp	r0, #1
 8006342:	d00d      	beq.n	8006360 <prvIPTask+0x15c>
		vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 8006344:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006348:	f7fe fcd6 	bl	8004cf8 <vTaskDelay>
		FreeRTOS_NetworkDown();
 800634c:	f7ff feea 	bl	8006124 <FreeRTOS_NetworkDown>
		if( xNetworkDownEventPending != pdFALSE )
 8006350:	4b64      	ldr	r3, [pc, #400]	; (80064e4 <prvIPTask+0x2e0>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f43f af69 	beq.w	800622c <prvIPTask+0x28>
			FreeRTOS_NetworkDown();
 800635a:	f7ff fee3 	bl	8006124 <FreeRTOS_NetworkDown>
 800635e:	e765      	b.n	800622c <prvIPTask+0x28>
			vDHCPProcess( pdTRUE );
 8006360:	f7ff fb02 	bl	8005968 <vDHCPProcess>
			xSendEventToIPTask( eDHCPEvent );
 8006364:	2004      	movs	r0, #4
 8006366:	f7ff feed 	bl	8006144 <xSendEventToIPTask>
 800636a:	e7f1      	b.n	8006350 <prvIPTask+0x14c>
				prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 800636c:	9c05      	ldr	r4, [sp, #20]
	configASSERT( pxNetworkBuffer );
 800636e:	b944      	cbnz	r4, 8006382 <prvIPTask+0x17e>
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	e7fe      	b.n	8006380 <prvIPTask+0x17c>
	eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 8006382:	2301      	movs	r3, #1
 8006384:	f88d 300f 	strb.w	r3, [sp, #15]
	if( eReturned == eProcessBuffer )
 8006388:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d10c      	bne.n	80063aa <prvIPTask+0x1a6>
	pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 8006390:	69a5      	ldr	r5, [r4, #24]
		switch( pxEthernetHeader->usFrameType )
 8006392:	89ab      	ldrh	r3, [r5, #12]
 8006394:	2b08      	cmp	r3, #8
 8006396:	d014      	beq.n	80063c2 <prvIPTask+0x1be>
 8006398:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800639c:	f040 8088 	bne.w	80064b0 <prvIPTask+0x2ac>
				eReturned = eARPProcessPacket( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80063a0:	4628      	mov	r0, r5
 80063a2:	f7ff f851 	bl	8005448 <eARPProcessPacket>
 80063a6:	f88d 000f 	strb.w	r0, [sp, #15]
	switch( eReturned )
 80063aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	f000 80c9 	beq.w	8006548 <prvIPTask+0x344>
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d0ca      	beq.n	8006350 <prvIPTask+0x14c>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80063ba:	4620      	mov	r0, r4
 80063bc:	f002 fcd2 	bl	8008d64 <vReleaseNetworkBufferAndDescriptor>
 80063c0:	e7c6      	b.n	8006350 <prvIPTask+0x14c>
			if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 80063c2:	8aab      	ldrh	r3, [r5, #20]
 80063c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d170      	bne.n	80064b0 <prvIPTask+0x2ac>
UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0x0Fu ) << 2 );
 80063ce:	7ba8      	ldrb	r0, [r5, #14]
			else if( ( pxIPHeader->ucVersionHeaderLength < 0x45u ) || ( pxIPHeader->ucVersionHeaderLength > 0x4Fu ) )
 80063d0:	f1a0 0245 	sub.w	r2, r0, #69	; 0x45
 80063d4:	2a0a      	cmp	r2, #10
 80063d6:	d858      	bhi.n	800648a <prvIPTask+0x286>
			else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 80063d8:	4a43      	ldr	r2, [pc, #268]	; (80064e8 <prvIPTask+0x2e4>)
		uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 80063da:	f8d5 301e 	ldr.w	r3, [r5, #30]
			else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 80063de:	6952      	ldr	r2, [r2, #20]
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d00a      	beq.n	80063fa <prvIPTask+0x1f6>
 80063e4:	1c59      	adds	r1, r3, #1
 80063e6:	d008      	beq.n	80063fa <prvIPTask+0x1f6>
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 80063e8:	4940      	ldr	r1, [pc, #256]	; (80064ec <prvIPTask+0x2e8>)
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 80063ea:	6909      	ldr	r1, [r1, #16]
 80063ec:	428b      	cmp	r3, r1
 80063ee:	d004      	beq.n	80063fa <prvIPTask+0x1f6>
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 80063f0:	493f      	ldr	r1, [pc, #252]	; (80064f0 <prvIPTask+0x2ec>)
 80063f2:	428b      	cmp	r3, r1
 80063f4:	d001      	beq.n	80063fa <prvIPTask+0x1f6>
				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
 80063f6:	2a00      	cmp	r2, #0
 80063f8:	d15a      	bne.n	80064b0 <prvIPTask+0x2ac>
UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0x0Fu ) << 2 );
 80063fa:	0080      	lsls	r0, r0, #2
 80063fc:	f000 003c 	and.w	r0, r0, #60	; 0x3c
		if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8006400:	2814      	cmp	r0, #20
	ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8006402:	f895 9017 	ldrb.w	r9, [r5, #23]
		if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8006406:	d910      	bls.n	800642a <prvIPTask+0x226>
			const size_t  xMoveLen = pxNetworkBuffer->xDataLength - optlen - ipSIZE_OF_IPv4_HEADER - ipSIZE_OF_ETH_HEADER;
 8006408:	69e2      	ldr	r2, [r4, #28]
			const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800640a:	f1a0 0314 	sub.w	r3, r0, #20
			const size_t  xMoveLen = pxNetworkBuffer->xDataLength - optlen - ipSIZE_OF_IPv4_HEADER - ipSIZE_OF_ETH_HEADER;
 800640e:	3a22      	subs	r2, #34	; 0x22
const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8006410:	f105 010e 	add.w	r1, r5, #14
			memmove( pucTarget, pucSource, xMoveLen );
 8006414:	1ad2      	subs	r2, r2, r3
 8006416:	4401      	add	r1, r0
 8006418:	f105 0022 	add.w	r0, r5, #34	; 0x22
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	f002 ff33 	bl	8009288 <memmove>
			pxNetworkBuffer->xDataLength -= optlen;
 8006422:	69e2      	ldr	r2, [r4, #28]
 8006424:	9b01      	ldr	r3, [sp, #4]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	61e3      	str	r3, [r4, #28]
		if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 800642a:	f1b9 0f11 	cmp.w	r9, #17
 800642e:	d065      	beq.n	80064fc <prvIPTask+0x2f8>
			vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 8006430:	f8d5 101a 	ldr.w	r1, [r5, #26]
 8006434:	1da8      	adds	r0, r5, #6
 8006436:	f7fe ff89 	bl	800534c <vARPRefreshCacheEntry>
		switch( ucProtocol )
 800643a:	f1b9 0f01 	cmp.w	r9, #1
 800643e:	d004      	beq.n	800644a <prvIPTask+0x246>
 8006440:	f1b9 0f06 	cmp.w	r9, #6
 8006444:	d074      	beq.n	8006530 <prvIPTask+0x32c>
 8006446:	2301      	movs	r3, #1
 8006448:	e01f      	b.n	800648a <prvIPTask+0x286>
					if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800644a:	4b27      	ldr	r3, [pc, #156]	; (80064e8 <prvIPTask+0x2e4>)
 800644c:	f8d5 101e 	ldr.w	r1, [r5, #30]
 8006450:	695b      	ldr	r3, [r3, #20]
					ICMPPacket_t *pxICMPPacket = ( ICMPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 8006452:	69a2      	ldr	r2, [r4, #24]
					if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 8006454:	4299      	cmp	r1, r3
 8006456:	d1f6      	bne.n	8006446 <prvIPTask+0x242>
		switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8006458:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800645c:	b1c3      	cbz	r3, 8006490 <prvIPTask+0x28c>
 800645e:	2b08      	cmp	r3, #8
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	d111      	bne.n	800648a <prvIPTask+0x286>
		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8006466:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800646a:	f8d2 301a 	ldr.w	r3, [r2, #26]
 800646e:	f8c2 301e 	str.w	r3, [r2, #30]
		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFu - usRequest ) )
 8006472:	8c93      	ldrh	r3, [r2, #36]	; 0x24
		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8006474:	f8c2 101a 	str.w	r1, [r2, #26]
		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFu - usRequest ) )
 8006478:	f64f 71f6 	movw	r1, #65526	; 0xfff6
 800647c:	428b      	cmp	r3, r1
			pxICMPHeader->usChecksum = ( uint16_t )
 800647e:	bf8c      	ite	hi
 8006480:	f503 7384 	addhi.w	r3, r3, #264	; 0x108
			pxICMPHeader->usChecksum = ( uint16_t )
 8006484:	3308      	addls	r3, #8
 8006486:	8493      	strh	r3, [r2, #36]	; 0x24
					eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
 8006488:	2302      	movs	r3, #2
				eReturned = eReleaseBuffer;
 800648a:	f88d 300f 	strb.w	r3, [sp, #15]
 800648e:	e78c      	b.n	80063aa <prvIPTask+0x1a6>
		usDataLength = pxICMPPacket->xIPHeader.usLength;
 8006490:	8a11      	ldrh	r1, [r2, #16]
		usDataLength = FreeRTOS_ntohs( usDataLength );
 8006492:	0a0b      	lsrs	r3, r1, #8
 8006494:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMP_HEADER );
 8006498:	3b1c      	subs	r3, #28
 800649a:	b29b      	uxth	r3, r3
 800649c:	3329      	adds	r3, #41	; 0x29
 800649e:	f102 0129 	add.w	r1, r2, #41	; 0x29
 80064a2:	4413      	add	r3, r2
		for( usCount = 0; usCount < usDataLength; usCount++ )
 80064a4:	428b      	cmp	r3, r1
 80064a6:	d105      	bne.n	80064b4 <prvIPTask+0x2b0>
	ePingReplyStatus_t eStatus = eSuccess;
 80064a8:	2000      	movs	r0, #0
		vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 80064aa:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 80064ac:	f002 fd90 	bl	8008fd0 <vApplicationPingReplyHook>
				eReturned = eReleaseBuffer;
 80064b0:	2300      	movs	r3, #0
 80064b2:	e7ea      	b.n	800648a <prvIPTask+0x286>
			if( *pucByte != ipECHO_DATA_FILL_BYTE )
 80064b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80064b8:	2878      	cmp	r0, #120	; 0x78
 80064ba:	d0f3      	beq.n	80064a4 <prvIPTask+0x2a0>
				eStatus = eInvalidData;
 80064bc:	2002      	movs	r0, #2
 80064be:	e7f4      	b.n	80064aa <prvIPTask+0x2a6>
 80064c0:	20004f04 	.word	0x20004f04
 80064c4:	20004ed8 	.word	0x20004ed8
 80064c8:	20004eac 	.word	0x20004eac
 80064cc:	20004ef4 	.word	0x20004ef4
 80064d0:	20004f00 	.word	0x20004f00
 80064d4:	20004f20 	.word	0x20004f20
 80064d8:	20004efc 	.word	0x20004efc
 80064dc:	20004ef8 	.word	0x20004ef8
 80064e0:	20004e94 	.word	0x20004e94
 80064e4:	20004ef0 	.word	0x20004ef0
 80064e8:	200001b0 	.word	0x200001b0
 80064ec:	20004edc 	.word	0x20004edc
 80064f0:	fc0000e0 	.word	0xfc0000e0
 80064f4:	20004e80 	.word	0x20004e80
 80064f8:	20004e98 	.word	0x20004e98
					UDPPacket_t *pxUDPPacket = ( UDPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 80064fc:	69a2      	ldr	r2, [r4, #24]
					pxNetworkBuffer->xDataLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - sizeof( UDPHeader_t );
 80064fe:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8006500:	0a0b      	lsrs	r3, r1, #8
 8006502:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b08      	subs	r3, #8
 800650a:	61e3      	str	r3, [r4, #28]
					pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 800650c:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8006510:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8006514:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006518:	8423      	strh	r3, [r4, #32]
					pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 800651a:	f8d2 301a 	ldr.w	r3, [r2, #26]
 800651e:	6163      	str	r3, [r4, #20]
					if( xProcessReceivedUDPPacket( pxNetworkBuffer, pxUDPPacket->xUDPHeader.usDestinationPort ) == pdPASS )
 8006520:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8006522:	4620      	mov	r0, r4
 8006524:	f002 fb8c 	bl	8008c40 <xProcessReceivedUDPPacket>
 8006528:	2801      	cmp	r0, #1
 800652a:	d18c      	bne.n	8006446 <prvIPTask+0x242>
						eReturn = eFrameConsumed;
 800652c:	2303      	movs	r3, #3
 800652e:	e7ac      	b.n	800648a <prvIPTask+0x286>
					if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8006530:	4620      	mov	r0, r4
 8006532:	f001 fb03 	bl	8007b3c <xProcessReceivedTCPPacket>
					xProcessedTCPMessage++;
 8006536:	683a      	ldr	r2, [r7, #0]
						eReturn = eFrameConsumed;
 8006538:	2801      	cmp	r0, #1
					xProcessedTCPMessage++;
 800653a:	f102 0201 	add.w	r2, r2, #1
						eReturn = eFrameConsumed;
 800653e:	bf14      	ite	ne
 8006540:	2301      	movne	r3, #1
 8006542:	2303      	moveq	r3, #3
					xProcessedTCPMessage++;
 8006544:	603a      	str	r2, [r7, #0]
 8006546:	e7a0      	b.n	800648a <prvIPTask+0x286>
			vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 8006548:	2101      	movs	r1, #1
 800654a:	4620      	mov	r0, r4
 800654c:	f7ff fe44 	bl	80061d8 <vReturnEthernetFrame>
 8006550:	e6fe      	b.n	8006350 <prvIPTask+0x14c>
				vARPAgeCache();
 8006552:	f7ff f847 	bl	80055e4 <vARPAgeCache>
				break;
 8006556:	e6fb      	b.n	8006350 <prvIPTask+0x14c>
				pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 8006558:	9c05      	ldr	r4, [sp, #20]
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 800655a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800655c:	0a0a      	lsrs	r2, r1, #8
				xAddress.sin_addr = 0u;	/* For the moment. */
 800655e:	2300      	movs	r3, #0
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8006560:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006564:	f8ad 201a 	strh.w	r2, [sp, #26]
				pxSocket->usLocalPort = 0u;
 8006568:	84a3      	strh	r3, [r4, #36]	; 0x24
				vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 800656a:	2208      	movs	r2, #8
 800656c:	a906      	add	r1, sp, #24
 800656e:	4620      	mov	r0, r4
				xAddress.sin_addr = 0u;	/* For the moment. */
 8006570:	9307      	str	r3, [sp, #28]
				vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8006572:	f000 fa47 	bl	8006a04 <vSocketBind>
				pxSocket->xEventBits |= eSOCKET_BOUND;
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	f043 0310 	orr.w	r3, r3, #16
						pxSocket->xEventBits |= eSOCKET_ACCEPT;
 800657c:	6023      	str	r3, [r4, #0]
						vSocketWakeUpUser( pxSocket );
 800657e:	4620      	mov	r0, r4
 8006580:	f000 fb1e 	bl	8006bc0 <vSocketWakeUpUser>
 8006584:	e6e4      	b.n	8006350 <prvIPTask+0x14c>
				vSocketClose( ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData ) );
 8006586:	9805      	ldr	r0, [sp, #20]
 8006588:	f000 fab6 	bl	8006af8 <vSocketClose>
				break;
 800658c:	e6e0      	b.n	8006350 <prvIPTask+0x14c>
				vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 800658e:	9805      	ldr	r0, [sp, #20]
 8006590:	f002 fafa 	bl	8008b88 <vProcessGeneratedUDPPacket>
				break;
 8006594:	e6dc      	b.n	8006350 <prvIPTask+0x14c>
					vDHCPProcess( pdFALSE );
 8006596:	2000      	movs	r0, #0
 8006598:	f7ff f9e6 	bl	8005968 <vDHCPProcess>
				break;
 800659c:	e6d8      	b.n	8006350 <prvIPTask+0x14c>
					vSocketSelect( ( SocketSelect_t * ) ( xReceivedEvent.pvData ) );
 800659e:	9805      	ldr	r0, [sp, #20]
 80065a0:	f000 fd00 	bl	8006fa4 <vSocketSelect>
				break;
 80065a4:	e6d4      	b.n	8006350 <prvIPTask+0x14c>
					FreeRTOS_SignalSocket( ( Socket_t ) xReceivedEvent.pvData );
 80065a6:	9805      	ldr	r0, [sp, #20]
 80065a8:	f000 fd84 	bl	80070b4 <FreeRTOS_SignalSocket>
				break;
 80065ac:	e6d0      	b.n	8006350 <prvIPTask+0x14c>
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 80065ae:	7833      	ldrb	r3, [r6, #0]
 80065b0:	f043 0302 	orr.w	r3, r3, #2
 80065b4:	7033      	strb	r3, [r6, #0]
				break;
 80065b6:	e6cb      	b.n	8006350 <prvIPTask+0x14c>
					pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 80065b8:	9c05      	ldr	r4, [sp, #20]
					if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 80065ba:	4620      	mov	r0, r4
 80065bc:	f001 ff56 	bl	800846c <xTCPCheckNewClient>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	f43f aec5 	beq.w	8006350 <prvIPTask+0x14c>
						pxSocket->xEventBits |= eSOCKET_ACCEPT;
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	f043 0304 	orr.w	r3, r3, #4
 80065cc:	e7d6      	b.n	800657c <prvIPTask+0x378>
 80065ce:	bf00      	nop

080065d0 <vIPSetDHCPTimerEnableState>:
	{
 80065d0:	4b04      	ldr	r3, [pc, #16]	; (80065e4 <vIPSetDHCPTimerEnableState+0x14>)
			xDHCPTimer.bActive = pdTRUE_UNSIGNED;
 80065d2:	781a      	ldrb	r2, [r3, #0]
		if( xEnableState != pdFALSE )
 80065d4:	b118      	cbz	r0, 80065de <vIPSetDHCPTimerEnableState+0xe>
			xDHCPTimer.bActive = pdTRUE_UNSIGNED;
 80065d6:	f042 0201 	orr.w	r2, r2, #1
			xDHCPTimer.bActive = pdFALSE_UNSIGNED;
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	4770      	bx	lr
 80065de:	f360 0200 	bfi	r2, r0, #0, #1
 80065e2:	e7fa      	b.n	80065da <vIPSetDHCPTimerEnableState+0xa>
 80065e4:	20004e98 	.word	0x20004e98

080065e8 <vIPReloadDHCPTimer>:
	{
 80065e8:	4601      	mov	r1, r0
	pxTimer->ulReloadTime = xTime;
 80065ea:	4802      	ldr	r0, [pc, #8]	; (80065f4 <vIPReloadDHCPTimer+0xc>)
 80065ec:	6101      	str	r1, [r0, #16]
	prvIPTimerStart( pxTimer, xTime );
 80065ee:	f7ff bc61 	b.w	8005eb4 <prvIPTimerStart>
 80065f2:	bf00      	nop
 80065f4:	20004e98 	.word	0x20004e98

080065f8 <vIPSetDnsTimerEnableState>:
	{
 80065f8:	4b04      	ldr	r3, [pc, #16]	; (800660c <vIPSetDnsTimerEnableState+0x14>)
			xDNSTimer.bActive = pdTRUE;
 80065fa:	781a      	ldrb	r2, [r3, #0]
		if( xEnableState != 0 )
 80065fc:	b118      	cbz	r0, 8006606 <vIPSetDnsTimerEnableState+0xe>
			xDNSTimer.bActive = pdTRUE;
 80065fe:	f042 0201 	orr.w	r2, r2, #1
			xDNSTimer.bActive = pdFALSE;
 8006602:	701a      	strb	r2, [r3, #0]
 8006604:	4770      	bx	lr
 8006606:	f360 0200 	bfi	r2, r0, #0, #1
 800660a:	e7fa      	b.n	8006602 <vIPSetDnsTimerEnableState+0xa>
 800660c:	20004eac 	.word	0x20004eac

08006610 <xIPIsNetworkTaskReady>:
}
 8006610:	4b01      	ldr	r3, [pc, #4]	; (8006618 <xIPIsNetworkTaskReady+0x8>)
 8006612:	6818      	ldr	r0, [r3, #0]
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	20004ed8 	.word	0x20004ed8

0800661c <uxStreamBufferGetSize>:
static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper )
{
/* Returns the distance between uxLower and uxUpper */
size_t uxCount;

	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800661c:	6902      	ldr	r2, [r0, #16]
static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer )
{
/* Returns the number of items which can be read from uxTail
before reaching uxHead */
size_t uxHead = pxBuffer->uxHead;
 800661e:	6883      	ldr	r3, [r0, #8]
size_t uxTail = pxBuffer->uxTail;
 8006620:	6801      	ldr	r1, [r0, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8006622:	1898      	adds	r0, r3, r2
 8006624:	1a40      	subs	r0, r0, r1
	if ( uxCount >= pxBuffer->LENGTH )
 8006626:	4282      	cmp	r2, r0
		uxCount -= pxBuffer->LENGTH;
 8006628:	bf98      	it	ls
 800662a:	1a80      	subls	r0, r0, r2

	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
}
 800662c:	4770      	bx	lr

0800662e <pxListFindListItemWithValue>:
/*-----------------------------------------------------------*/

/* pxListFindListItemWithValue: find a list item in a bound socket list
'xWantedItemValue' refers to a port number */
static const ListItem_t * pxListFindListItemWithValue( const List_t *pxList, TickType_t xWantedItemValue )
{
 800662e:	b538      	push	{r3, r4, r5, lr}
 8006630:	4604      	mov	r4, r0
 8006632:	460d      	mov	r5, r1
const ListItem_t * pxResult = NULL;

	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 8006634:	f7ff ffec 	bl	8006610 <xIPIsNetworkTaskReady>
 8006638:	b168      	cbz	r0, 8006656 <pxListFindListItemWithValue+0x28>
 800663a:	b15c      	cbz	r4, 8006654 <pxListFindListItemWithValue+0x26>
	{
		const ListItem_t *pxIterator;
		const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( pxList );
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800663c:	68e0      	ldr	r0, [r4, #12]
		const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( pxList );
 800663e:	f104 0308 	add.w	r3, r4, #8
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8006642:	4298      	cmp	r0, r3
 8006644:	d101      	bne.n	800664a <pxListFindListItemWithValue+0x1c>
const ListItem_t * pxResult = NULL;
 8006646:	2000      	movs	r0, #0
 8006648:	bd38      	pop	{r3, r4, r5, pc}
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800664a:	6802      	ldr	r2, [r0, #0]
 800664c:	42aa      	cmp	r2, r5
 800664e:	d002      	beq.n	8006656 <pxListFindListItemWithValue+0x28>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8006650:	6840      	ldr	r0, [r0, #4]
 8006652:	e7f6      	b.n	8006642 <pxListFindListItemWithValue+0x14>
const ListItem_t * pxResult = NULL;
 8006654:	4620      	mov	r0, r4
			}
		}
	}

	return pxResult;
} /* Tested */
 8006656:	bd38      	pop	{r3, r4, r5, pc}

08006658 <prvValidSocket>:
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 8006658:	1e43      	subs	r3, r0, #1
 800665a:	3303      	adds	r3, #3
 800665c:	d809      	bhi.n	8006672 <prvValidSocket+0x1a>
	else if( ( xIsBound != pdFALSE ) && ( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE ) )
 800665e:	b10a      	cbz	r2, 8006664 <prvValidSocket+0xc>
 8006660:	6983      	ldr	r3, [r0, #24]
 8006662:	b133      	cbz	r3, 8006672 <prvValidSocket+0x1a>
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 8006664:	f890 0027 	ldrb.w	r0, [r0, #39]	; 0x27
 8006668:	b2c9      	uxtb	r1, r1
 800666a:	1a43      	subs	r3, r0, r1
 800666c:	4258      	negs	r0, r3
 800666e:	4158      	adcs	r0, r3
 8006670:	4770      	bx	lr
		xReturn = pdFALSE;
 8006672:	2000      	movs	r0, #0
 8006674:	4770      	bx	lr

08006676 <uxStreamBufferGetSpace>:
size_t uxHead = pxBuffer->uxHead;
 8006676:	6881      	ldr	r1, [r0, #8]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 8006678:	6902      	ldr	r2, [r0, #16]
size_t uxTail = pxBuffer->uxTail;
 800667a:	6803      	ldr	r3, [r0, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800667c:	1898      	adds	r0, r3, r2
 800667e:	3801      	subs	r0, #1
 8006680:	1a40      	subs	r0, r0, r1
	if( uxCount >= pxBuffer->LENGTH )
 8006682:	4282      	cmp	r2, r0
		uxCount -= pxBuffer->LENGTH;
 8006684:	bf98      	it	ls
 8006686:	1a80      	subls	r0, r0, r2
}
 8006688:	4770      	bx	lr
	...

0800668c <vNetworkSocketsInit>:
{
 800668c:	b538      	push	{r3, r4, r5, lr}
	vListInitialise( &xBoundUDPSocketsList );
 800668e:	4810      	ldr	r0, [pc, #64]	; (80066d0 <vNetworkSocketsInit+0x44>)
	usNextPortToUse[ socketNEXT_UDP_PORT_NUMBER_INDEX ] = ( uint16_t ) ulRandomPort;
 8006690:	4d10      	ldr	r5, [pc, #64]	; (80066d4 <vNetworkSocketsInit+0x48>)
	vListInitialise( &xBoundUDPSocketsList );
 8006692:	f7fd fab9 	bl	8003c08 <vListInitialise>
	ulRandomPort += ( ipconfigRAND32() % ulAutoPortRange );
 8006696:	f002 fca1 	bl	8008fdc <uxRand>
 800669a:	f44f 5478 	mov.w	r4, #15872	; 0x3e00
 800669e:	fbb0 f3f4 	udiv	r3, r0, r4
 80066a2:	fb03 0014 	mls	r0, r3, r4, r0
 80066a6:	f500 4040 	add.w	r0, r0, #49152	; 0xc000
	usNextPortToUse[ socketNEXT_UDP_PORT_NUMBER_INDEX ] = ( uint16_t ) ulRandomPort;
 80066aa:	8028      	strh	r0, [r5, #0]
		ulNextInitialSequenceNumber = ipconfigRAND32();
 80066ac:	f002 fc96 	bl	8008fdc <uxRand>
 80066b0:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <vNetworkSocketsInit+0x4c>)
 80066b2:	6018      	str	r0, [r3, #0]
		ulRandomPort += ( ipconfigRAND32() % ulAutoPortRange );
 80066b4:	f002 fc92 	bl	8008fdc <uxRand>
 80066b8:	fbb0 f3f4 	udiv	r3, r0, r4
 80066bc:	fb03 0014 	mls	r0, r3, r4, r0
 80066c0:	f500 4040 	add.w	r0, r0, #49152	; 0xc000
		usNextPortToUse[ socketNEXT_TCP_PORT_NUMBER_INDEX ] = ( uint16_t ) ulRandomPort;
 80066c4:	8068      	strh	r0, [r5, #2]
		vListInitialise( &xBoundTCPSocketsList );
 80066c6:	4805      	ldr	r0, [pc, #20]	; (80066dc <vNetworkSocketsInit+0x50>)
}
 80066c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		vListInitialise( &xBoundTCPSocketsList );
 80066cc:	f7fd ba9c 	b.w	8003c08 <vListInitialise>
 80066d0:	20006518 	.word	0x20006518
 80066d4:	20004f18 	.word	0x20004f18
 80066d8:	20004f20 	.word	0x20004f20
 80066dc:	20006504 	.word	0x20006504

080066e0 <FreeRTOS_socket>:
{
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	4606      	mov	r6, r0
 80066e4:	460c      	mov	r4, r1
 80066e6:	4615      	mov	r5, r2
	if( xIPIsNetworkTaskReady() == pdFALSE )
 80066e8:	f7ff ff92 	bl	8006610 <xIPIsNetworkTaskReady>
 80066ec:	b910      	cbnz	r0, 80066f4 <FreeRTOS_socket+0x14>
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 80066ee:	f04f 30ff 	mov.w	r0, #4294967295
 80066f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		configASSERT( xDomain == FREERTOS_AF_INET );
 80066f4:	2e02      	cmp	r6, #2
 80066f6:	d008      	beq.n	800670a <FreeRTOS_socket+0x2a>
 80066f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fc:	f383 8811 	msr	BASEPRI, r3
 8006700:	f3bf 8f6f 	isb	sy
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	e7fe      	b.n	8006708 <FreeRTOS_socket+0x28>
		configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800670a:	4b32      	ldr	r3, [pc, #200]	; (80067d4 <FreeRTOS_socket+0xf4>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	3301      	adds	r3, #1
 8006710:	d008      	beq.n	8006724 <FreeRTOS_socket+0x44>
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	e7fe      	b.n	8006722 <FreeRTOS_socket+0x42>
			configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 8006724:	4b2c      	ldr	r3, [pc, #176]	; (80067d8 <FreeRTOS_socket+0xf8>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	3301      	adds	r3, #1
 800672a:	d008      	beq.n	800673e <FreeRTOS_socket+0x5e>
 800672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	e7fe      	b.n	800673c <FreeRTOS_socket+0x5c>
		if( xProtocol == FREERTOS_IPPROTO_UDP )
 800673e:	2d11      	cmp	r5, #17
 8006740:	d110      	bne.n	8006764 <FreeRTOS_socket+0x84>
			if( xType != FREERTOS_SOCK_DGRAM )
 8006742:	2c02      	cmp	r4, #2
 8006744:	d1d3      	bne.n	80066ee <FreeRTOS_socket+0xe>
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 8006746:	264c      	movs	r6, #76	; 0x4c
		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
 8006748:	4630      	mov	r0, r6
 800674a:	f7fd fc55 	bl	8003ff8 <pvPortMalloc>
		if( pxSocket == NULL )
 800674e:	4604      	mov	r4, r0
 8006750:	2800      	cmp	r0, #0
 8006752:	d0cc      	beq.n	80066ee <FreeRTOS_socket+0xe>
		else if( ( xEventGroup = xEventGroupCreate() ) == NULL )
 8006754:	f7fd f93c 	bl	80039d0 <xEventGroupCreate>
 8006758:	4607      	mov	r7, r0
 800675a:	b950      	cbnz	r0, 8006772 <FreeRTOS_socket+0x92>
			vPortFreeSocket( pxSocket );
 800675c:	4620      	mov	r0, r4
 800675e:	f7fd fcdd 	bl	800411c <vPortFree>
 8006762:	e7c4      	b.n	80066ee <FreeRTOS_socket+0xe>
		else if( xProtocol == FREERTOS_IPPROTO_TCP )
 8006764:	2d06      	cmp	r5, #6
 8006766:	d1c2      	bne.n	80066ee <FreeRTOS_socket+0xe>
			if( xType != FREERTOS_SOCK_STREAM )
 8006768:	2c01      	cmp	r4, #1
 800676a:	d1c0      	bne.n	80066ee <FreeRTOS_socket+0xe>
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800676c:	f44f 76d0 	mov.w	r6, #416	; 0x1a0
 8006770:	e7ea      	b.n	8006748 <FreeRTOS_socket+0x68>
			memset( pxSocket, '\0', uxSocketSize );
 8006772:	4632      	mov	r2, r6
 8006774:	2100      	movs	r1, #0
 8006776:	4620      	mov	r0, r4
 8006778:	f002 fda0 	bl	80092bc <memset>
			if( xProtocol == FREERTOS_IPPROTO_UDP )
 800677c:	2d11      	cmp	r5, #17
			pxSocket->xEventGroup = xEventGroup;
 800677e:	6067      	str	r7, [r4, #4]
			if( xProtocol == FREERTOS_IPPROTO_UDP )
 8006780:	d103      	bne.n	800678a <FreeRTOS_socket+0xaa>
				vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 8006782:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006786:	f7fd fa3f 	bl	8003c08 <vListInitialise>
			vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800678a:	f104 0008 	add.w	r0, r4, #8
 800678e:	f7fd fa46 	bl	8003c1e <vListInitialiseItem>
			pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 8006792:	f241 3388 	movw	r3, #5000	; 0x1388
 8006796:	61e3      	str	r3, [r4, #28]
			pxSocket->xSendBlockTime    = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 8006798:	6223      	str	r3, [r4, #32]
				if( xProtocol == FREERTOS_IPPROTO_TCP )
 800679a:	2d06      	cmp	r5, #6
			pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800679c:	f04f 0302 	mov.w	r3, #2
			listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 80067a0:	6164      	str	r4, [r4, #20]
			pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 80067a2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			pxSocket->ucProtocol        = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 80067a6:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
				if( xProtocol == FREERTOS_IPPROTO_TCP )
 80067aa:	d110      	bne.n	80067ce <FreeRTOS_socket+0xee>
					pxSocket->u.xTCP.usInitMSS    = pxSocket->u.xTCP.usCurMSS = ipconfigTCP_MSS;
 80067ac:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80067b0:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 80067b4:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
					pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 80067b8:	f241 131c 	movw	r3, #4380	; 0x111c
 80067bc:	66e3      	str	r3, [r4, #108]	; 0x6c
					pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 80067be:	f640 3368 	movw	r3, #2920	; 0xb68
 80067c2:	6723      	str	r3, [r4, #112]	; 0x70
						pxSocket->u.xTCP.uxRxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2 ) / ipconfigTCP_MSS );
 80067c4:	2301      	movs	r3, #1
 80067c6:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2 ) / ipconfigTCP_MSS );
 80067ca:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80067ce:	4620      	mov	r0, r4
	return xReturn;
 80067d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20006518 	.word	0x20006518
 80067d8:	20006504 	.word	0x20006504

080067dc <FreeRTOS_recvfrom>:
{
 80067dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e0:	b086      	sub	sp, #24
 80067e2:	4688      	mov	r8, r1
 80067e4:	4691      	mov	r9, r2
TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 80067e6:	2400      	movs	r4, #0
	if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdTRUE ) == pdFALSE )
 80067e8:	2201      	movs	r2, #1
 80067ea:	2111      	movs	r1, #17
{
 80067ec:	4605      	mov	r5, r0
 80067ee:	461e      	mov	r6, r3
 80067f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 80067f2:	9403      	str	r4, [sp, #12]
	if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdTRUE ) == pdFALSE )
 80067f4:	f7ff ff30 	bl	8006658 <prvValidSocket>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d03b      	beq.n	8006874 <FreeRTOS_recvfrom+0x98>
	lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 80067fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
	while( lPacketCount == 0 )
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d13b      	bne.n	800687a <FreeRTOS_recvfrom+0x9e>
			xRemainingTime = pxSocket->xReceiveBlockTime;
 8006802:	69eb      	ldr	r3, [r5, #28]
 8006804:	9303      	str	r3, [sp, #12]
			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 8006806:	f006 0210 	and.w	r2, r6, #16
			if( xRemainingTime == ( TickType_t ) 0 )
 800680a:	b97b      	cbnz	r3, 800682c <FreeRTOS_recvfrom+0x50>
					xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_INTR,
 800680c:	9400      	str	r4, [sp, #0]
 800680e:	4623      	mov	r3, r4
 8006810:	2201      	movs	r2, #1
 8006812:	2140      	movs	r1, #64	; 0x40
 8006814:	6868      	ldr	r0, [r5, #4]
 8006816:	f7fd f8e9 	bl	80039ec <xEventGroupWaitBits>
 800681a:	4604      	mov	r4, r0
		lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800681c:	f014 0f40 	tst.w	r4, #64	; 0x40
 8006820:	bf14      	ite	ne
 8006822:	f06f 0403 	mvnne.w	r4, #3
 8006826:	f06f 040a 	mvneq.w	r4, #10
 800682a:	e04a      	b.n	80068c2 <FreeRTOS_recvfrom+0xe6>
			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 800682c:	2a00      	cmp	r2, #0
 800682e:	d1f5      	bne.n	800681c <FreeRTOS_recvfrom+0x40>
			vTaskSetTimeOutState( &xTimeOut );
 8006830:	a804      	add	r0, sp, #16
 8006832:	f7fe fbdf 	bl	8004ff4 <vTaskSetTimeOutState>
		xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_RECEIVE | eSOCKET_INTR,
 8006836:	9b03      	ldr	r3, [sp, #12]
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	2201      	movs	r2, #1
 800683c:	2300      	movs	r3, #0
 800683e:	2141      	movs	r1, #65	; 0x41
 8006840:	6868      	ldr	r0, [r5, #4]
 8006842:	f7fd f8d3 	bl	80039ec <xEventGroupWaitBits>
			if( ( xEventBits & eSOCKET_INTR ) != 0 )
 8006846:	0642      	lsls	r2, r0, #25
		xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_RECEIVE | eSOCKET_INTR,
 8006848:	4604      	mov	r4, r0
			if( ( xEventBits & eSOCKET_INTR ) != 0 )
 800684a:	d506      	bpl.n	800685a <FreeRTOS_recvfrom+0x7e>
				if( ( xEventBits & eSOCKET_RECEIVE ) != 0 )
 800684c:	07c3      	lsls	r3, r0, #31
 800684e:	d5e5      	bpl.n	800681c <FreeRTOS_recvfrom+0x40>
					xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 8006850:	2101      	movs	r1, #1
 8006852:	6868      	ldr	r0, [r5, #4]
 8006854:	f7fd f977 	bl	8003b46 <xEventGroupSetBits>
 8006858:	e7e0      	b.n	800681c <FreeRTOS_recvfrom+0x40>
		if( lPacketCount != 0 )
 800685a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800685c:	b96b      	cbnz	r3, 800687a <FreeRTOS_recvfrom+0x9e>
		if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) )
 800685e:	a903      	add	r1, sp, #12
 8006860:	a804      	add	r0, sp, #16
 8006862:	f7fe fbd7 	bl	8005014 <xTaskCheckForTimeOut>
 8006866:	2800      	cmp	r0, #0
 8006868:	d0e5      	beq.n	8006836 <FreeRTOS_recvfrom+0x5a>
 800686a:	e7d7      	b.n	800681c <FreeRTOS_recvfrom+0x40>
			*( ( void** ) pvBuffer ) = ( void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ) );
 800686c:	312a      	adds	r1, #42	; 0x2a
 800686e:	f8c8 1000 	str.w	r1, [r8]
 8006872:	e026      	b.n	80068c2 <FreeRTOS_recvfrom+0xe6>
		return -pdFREERTOS_ERRNO_EINVAL;
 8006874:	f06f 0415 	mvn.w	r4, #21
 8006878:	e023      	b.n	80068c2 <FreeRTOS_recvfrom+0xe6>
		taskENTER_CRITICAL();
 800687a:	f7fd fa63 	bl	8003d44 <vPortEnterCritical>
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800687e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
 8006880:	f016 0a04 	ands.w	sl, r6, #4
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 8006884:	68dd      	ldr	r5, [r3, #12]
			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
 8006886:	d102      	bne.n	800688e <FreeRTOS_recvfrom+0xb2>
				uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 8006888:	4628      	mov	r0, r5
 800688a:	f7fd f9ee 	bl	8003c6a <uxListRemove>
		taskEXIT_CRITICAL();
 800688e:	f7fd fa7b 	bl	8003d88 <vPortExitCritical>
		lReturn = ( int32_t ) pxNetworkBuffer->xDataLength;
 8006892:	69ec      	ldr	r4, [r5, #28]
		if( pxSourceAddress != NULL )
 8006894:	b11f      	cbz	r7, 800689e <FreeRTOS_recvfrom+0xc2>
			pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
 8006896:	8c2b      	ldrh	r3, [r5, #32]
 8006898:	807b      	strh	r3, [r7, #2]
			pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
 800689a:	696b      	ldr	r3, [r5, #20]
 800689c:	607b      	str	r3, [r7, #4]
		if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800689e:	f016 0f01 	tst.w	r6, #1
 80068a2:	69a9      	ldr	r1, [r5, #24]
 80068a4:	d1e2      	bne.n	800686c <FreeRTOS_recvfrom+0x90>
 80068a6:	454c      	cmp	r4, r9
 80068a8:	bfa8      	it	ge
 80068aa:	464c      	movge	r4, r9
			memcpy( pvBuffer, ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ), ( size_t )lReturn );
 80068ac:	4622      	mov	r2, r4
 80068ae:	312a      	adds	r1, #42	; 0x2a
 80068b0:	4640      	mov	r0, r8
 80068b2:	f002 fcde 	bl	8009272 <memcpy>
			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
 80068b6:	f1ba 0f00 	cmp.w	sl, #0
 80068ba:	d102      	bne.n	80068c2 <FreeRTOS_recvfrom+0xe6>
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80068bc:	4628      	mov	r0, r5
 80068be:	f002 fa51 	bl	8008d64 <vReleaseNetworkBufferAndDescriptor>
}
 80068c2:	4620      	mov	r0, r4
 80068c4:	b006      	add	sp, #24
 80068c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080068ca <FreeRTOS_bind>:
{
 80068ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 80068cc:	1e43      	subs	r3, r0, #1
 80068ce:	3303      	adds	r3, #3
{
 80068d0:	4604      	mov	r4, r0
	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 80068d2:	d81e      	bhi.n	8006912 <FreeRTOS_bind+0x48>
	else if( socketSOCKET_IS_BOUND( pxSocket) != pdFALSE )
 80068d4:	6983      	ldr	r3, [r0, #24]
 80068d6:	b9e3      	cbnz	r3, 8006912 <FreeRTOS_bind+0x48>
		xBindEvent.eEventType = eSocketBindEvent;
 80068d8:	2308      	movs	r3, #8
 80068da:	f88d 3008 	strb.w	r3, [sp, #8]
		xBindEvent.pvData = ( void * ) xSocket;
 80068de:	9003      	str	r0, [sp, #12]
		if( pxAddress != NULL )
 80068e0:	b909      	cbnz	r1, 80068e6 <FreeRTOS_bind+0x1c>
			pxSocket->usLocalPort = 0u;
 80068e2:	84a1      	strh	r1, [r4, #36]	; 0x24
 80068e4:	e004      	b.n	80068f0 <FreeRTOS_bind+0x26>
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 80068e6:	884a      	ldrh	r2, [r1, #2]
 80068e8:	0a13      	lsrs	r3, r2, #8
 80068ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80068ee:	84a3      	strh	r3, [r4, #36]	; 0x24
		if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 80068f0:	f04f 31ff 	mov.w	r1, #4294967295
 80068f4:	a802      	add	r0, sp, #8
 80068f6:	f7ff fbe9 	bl	80060cc <xSendEventStructToIPTask>
 80068fa:	b170      	cbz	r0, 800691a <FreeRTOS_bind+0x50>
			xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 80068fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	2201      	movs	r2, #1
 8006904:	2300      	movs	r3, #0
 8006906:	2110      	movs	r1, #16
 8006908:	6860      	ldr	r0, [r4, #4]
 800690a:	f7fd f86f 	bl	80039ec <xEventGroupWaitBits>
			if( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE )
 800690e:	69a3      	ldr	r3, [r4, #24]
 8006910:	b933      	cbnz	r3, 8006920 <FreeRTOS_bind+0x56>
				xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8006912:	f06f 0015 	mvn.w	r0, #21
}
 8006916:	b004      	add	sp, #16
 8006918:	bd10      	pop	{r4, pc}
			xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800691a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 800691e:	e7fa      	b.n	8006916 <FreeRTOS_bind+0x4c>
BaseType_t xReturn = 0;
 8006920:	2000      	movs	r0, #0
	return xReturn;
 8006922:	e7f8      	b.n	8006916 <FreeRTOS_bind+0x4c>

08006924 <FreeRTOS_sendto>:
{
 8006924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006928:	b087      	sub	sp, #28
 800692a:	461c      	mov	r4, r3
IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800692c:	2303      	movs	r3, #3
 800692e:	f88d 3008 	strb.w	r3, [sp, #8]
 8006932:	2300      	movs	r3, #0
{
 8006934:	4680      	mov	r8, r0
 8006936:	4617      	mov	r7, r2
 8006938:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800693c:	9303      	str	r3, [sp, #12]
	configASSERT( pvBuffer );
 800693e:	460e      	mov	r6, r1
 8006940:	b941      	cbnz	r1, 8006954 <FreeRTOS_sendto+0x30>
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	e7fe      	b.n	8006952 <FreeRTOS_sendto+0x2e>
	if( xTotalDataLength <= ( size_t ) ipMAX_UDP_PAYLOAD_LENGTH )
 8006954:	f5b2 6fb8 	cmp.w	r2, #1472	; 0x5c0
 8006958:	d903      	bls.n	8006962 <FreeRTOS_sendto+0x3e>
int32_t lReturn = 0;
 800695a:	2000      	movs	r0, #0
} /* Tested */
 800695c:	b007      	add	sp, #28
 800695e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if( ( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE ) ||
 8006962:	6982      	ldr	r2, [r0, #24]
 8006964:	2a00      	cmp	r2, #0
 8006966:	d036      	beq.n	80069d6 <FreeRTOS_sendto+0xb2>
			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 8006968:	06e3      	lsls	r3, r4, #27
 800696a:	d43a      	bmi.n	80069e2 <FreeRTOS_sendto+0xbe>
			xTicksToWait = pxSocket->xSendBlockTime;
 800696c:	f8d8 3020 	ldr.w	r3, [r8, #32]
				xTicksToWait = ( TickType_t ) 0;
 8006970:	9301      	str	r3, [sp, #4]
			if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 8006972:	f014 0401 	ands.w	r4, r4, #1
 8006976:	d136      	bne.n	80069e6 <FreeRTOS_sendto+0xc2>
				vTaskSetTimeOutState( &xTimeOut );
 8006978:	a804      	add	r0, sp, #16
 800697a:	f7fe fb3b 	bl	8004ff4 <vTaskSetTimeOutState>
				pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( xTotalDataLength + sizeof( UDPPacket_t ), xTicksToWait );
 800697e:	9901      	ldr	r1, [sp, #4]
 8006980:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 8006984:	f002 fa12 	bl	8008dac <pxGetNetworkBufferWithDescriptor>
				if( pxNetworkBuffer != NULL )
 8006988:	4605      	mov	r5, r0
 800698a:	2800      	cmp	r0, #0
 800698c:	d0e5      	beq.n	800695a <FreeRTOS_sendto+0x36>
					memcpy( ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ), ( void * ) pvBuffer, xTotalDataLength );
 800698e:	6980      	ldr	r0, [r0, #24]
 8006990:	463a      	mov	r2, r7
 8006992:	4631      	mov	r1, r6
 8006994:	302a      	adds	r0, #42	; 0x2a
 8006996:	f002 fc6c 	bl	8009272 <memcpy>
					if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800699a:	a901      	add	r1, sp, #4
 800699c:	a804      	add	r0, sp, #16
 800699e:	f7fe fb39 	bl	8005014 <xTaskCheckForTimeOut>
 80069a2:	2801      	cmp	r0, #1
 80069a4:	d100      	bne.n	80069a8 <FreeRTOS_sendto+0x84>
						xTicksToWait = ( TickType_t ) 0;
 80069a6:	9401      	str	r4, [sp, #4]
				pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 80069a8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80069ac:	842b      	strh	r3, [r5, #32]
				pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 80069ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80069b2:	846b      	strh	r3, [r5, #34]	; 0x22
				pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
 80069b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80069b8:	616b      	str	r3, [r5, #20]
				pxNetworkBuffer->xDataLength = xTotalDataLength;
 80069ba:	61ef      	str	r7, [r5, #28]
				pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 80069bc:	69ab      	ldr	r3, [r5, #24]
 80069be:	f898 2026 	ldrb.w	r2, [r8, #38]	; 0x26
 80069c2:	719a      	strb	r2, [r3, #6]
				if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 80069c4:	9901      	ldr	r1, [sp, #4]
				xStackTxEvent.pvData = pxNetworkBuffer;
 80069c6:	9503      	str	r5, [sp, #12]
				if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 80069c8:	a802      	add	r0, sp, #8
 80069ca:	f7ff fb7f 	bl	80060cc <xSendEventStructToIPTask>
 80069ce:	2801      	cmp	r0, #1
 80069d0:	d110      	bne.n	80069f4 <FreeRTOS_sendto+0xd0>
					lReturn = ( int32_t ) xTotalDataLength;
 80069d2:	4638      	mov	r0, r7
 80069d4:	e7c2      	b.n	800695c <FreeRTOS_sendto+0x38>
			( FreeRTOS_bind( xSocket, NULL, 0u ) == 0 ) )
 80069d6:	4611      	mov	r1, r2
 80069d8:	f7ff ff77 	bl	80068ca <FreeRTOS_bind>
		if( ( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE ) ||
 80069dc:	2800      	cmp	r0, #0
 80069de:	d0c3      	beq.n	8006968 <FreeRTOS_sendto+0x44>
 80069e0:	e7bb      	b.n	800695a <FreeRTOS_sendto+0x36>
				xTicksToWait = ( TickType_t ) 0;
 80069e2:	2300      	movs	r3, #0
 80069e4:	e7c4      	b.n	8006970 <FreeRTOS_sendto+0x4c>
				pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( (void*)pvBuffer );
 80069e6:	4630      	mov	r0, r6
 80069e8:	f7ff fad8 	bl	8005f9c <pxUDPPayloadBuffer_to_NetworkBuffer>
			if( pxNetworkBuffer != NULL )
 80069ec:	4605      	mov	r5, r0
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d1da      	bne.n	80069a8 <FreeRTOS_sendto+0x84>
 80069f2:	e7b2      	b.n	800695a <FreeRTOS_sendto+0x36>
					if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 80069f4:	2c00      	cmp	r4, #0
 80069f6:	d1b0      	bne.n	800695a <FreeRTOS_sendto+0x36>
						vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80069f8:	4628      	mov	r0, r5
 80069fa:	f002 f9b3 	bl	8008d64 <vReleaseNetworkBufferAndDescriptor>
int32_t lReturn = 0;
 80069fe:	4620      	mov	r0, r4
	return lReturn;
 8006a00:	e7ac      	b.n	800695c <FreeRTOS_sendto+0x38>
	...

08006a04 <vSocketBind>:
{
 8006a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a08:	b085      	sub	sp, #20
		pxSocketList = &xBoundUDPSocketsList;
 8006a0a:	4a2d      	ldr	r2, [pc, #180]	; (8006ac0 <vSocketBind+0xbc>)
{
 8006a0c:	9301      	str	r3, [sp, #4]
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8006a0e:	f890 5027 	ldrb.w	r5, [r0, #39]	; 0x27
		pxSocketList = &xBoundUDPSocketsList;
 8006a12:	4b2c      	ldr	r3, [pc, #176]	; (8006ac4 <vSocketBind+0xc0>)
 8006a14:	2d06      	cmp	r5, #6
 8006a16:	bf0c      	ite	eq
 8006a18:	4690      	moveq	r8, r2
 8006a1a:	4698      	movne	r8, r3
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 8006a1c:	1c42      	adds	r2, r0, #1
{
 8006a1e:	4606      	mov	r6, r0
 8006a20:	460c      	mov	r4, r1
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 8006a22:	d108      	bne.n	8006a36 <vSocketBind+0x32>
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	e7fe      	b.n	8006a34 <vSocketBind+0x30>
		if( pxAddress == NULL )
 8006a36:	b911      	cbnz	r1, 8006a3e <vSocketBind+0x3a>
			pxAddress->sin_port = 0u;
 8006a38:	f8ad 100a 	strh.w	r1, [sp, #10]
			pxAddress = &xAddress;
 8006a3c:	ac02      	add	r4, sp, #8
		if( pxAddress->sin_port == 0u )
 8006a3e:	8863      	ldrh	r3, [r4, #2]
 8006a40:	b9fb      	cbnz	r3, 8006a82 <vSocketBind+0x7e>
	if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 8006a42:	1fab      	subs	r3, r5, #6
		++( usNextPortToUse[ xIndex ] );
 8006a44:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8006ac8 <vSocketBind+0xc4>
	if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 8006a48:	425d      	negs	r5, r3
 8006a4a:	415d      	adcs	r5, r3
 8006a4c:	46cb      	mov	fp, r9
			usNextPortToUse[ xIndex ] = socketAUTO_PORT_ALLOCATION_RESET_NUMBER;
 8006a4e:	f44f 4a41 	mov.w	sl, #49408	; 0xc100
		++( usNextPortToUse[ xIndex ] );
 8006a52:	f839 2015 	ldrh.w	r2, [r9, r5, lsl #1]
 8006a56:	3201      	adds	r2, #1
 8006a58:	b292      	uxth	r2, r2
		if( usNextPortToUse[ xIndex ] >= socketAUTO_PORT_ALLOCATION_MAX_NUMBER )
 8006a5a:	f5b2 4f7f 	cmp.w	r2, #65280	; 0xff00
		++( usNextPortToUse[ xIndex ] );
 8006a5e:	bf34      	ite	cc
 8006a60:	f829 2015 	strhcc.w	r2, [r9, r5, lsl #1]
			usNextPortToUse[ xIndex ] = socketAUTO_PORT_ALLOCATION_RESET_NUMBER;
 8006a64:	f829 a015 	strhcs.w	sl, [r9, r5, lsl #1]
		usResult = FreeRTOS_htons( usNextPortToUse[ xIndex ] );
 8006a68:	f83b 2015 	ldrh.w	r2, [fp, r5, lsl #1]
 8006a6c:	0a17      	lsrs	r7, r2, #8
 8006a6e:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 8006a72:	b2bf      	uxth	r7, r7
		if( pxListFindListItemWithValue( pxList, ( TickType_t ) usResult ) == NULL )
 8006a74:	4639      	mov	r1, r7
 8006a76:	4640      	mov	r0, r8
 8006a78:	f7ff fdd9 	bl	800662e <pxListFindListItemWithValue>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	d1e8      	bne.n	8006a52 <vSocketBind+0x4e>
			pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 8006a80:	8067      	strh	r7, [r4, #2]
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 8006a82:	9b01      	ldr	r3, [sp, #4]
 8006a84:	b193      	cbz	r3, 8006aac <vSocketBind+0xa8>
 8006a86:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
 8006a8a:	2b06      	cmp	r3, #6
 8006a8c:	d10e      	bne.n	8006aac <vSocketBind+0xa8>
			socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 8006a8e:	8862      	ldrh	r2, [r4, #2]
 8006a90:	60b2      	str	r2, [r6, #8]
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 8006a92:	0a13      	lsrs	r3, r2, #8
 8006a94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 8006a98:	4640      	mov	r0, r8
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 8006a9a:	84b3      	strh	r3, [r6, #36]	; 0x24
				vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 8006a9c:	f106 0108 	add.w	r1, r6, #8
 8006aa0:	f7fd f8c0 	bl	8003c24 <vListInsertEnd>
BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 8006aa4:	2000      	movs	r0, #0
} /* Tested */
 8006aa6:	b005      	add	sp, #20
 8006aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 8006aac:	8861      	ldrh	r1, [r4, #2]
 8006aae:	4640      	mov	r0, r8
 8006ab0:	f7ff fdbd 	bl	800662e <pxListFindListItemWithValue>
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d0ea      	beq.n	8006a8e <vSocketBind+0x8a>
			xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 8006ab8:	f06f 006f 	mvn.w	r0, #111	; 0x6f
	return xReturn;
 8006abc:	e7f3      	b.n	8006aa6 <vSocketBind+0xa2>
 8006abe:	bf00      	nop
 8006ac0:	20006504 	.word	0x20006504
 8006ac4:	20006518 	.word	0x20006518
 8006ac8:	20004f18 	.word	0x20004f18

08006acc <FreeRTOS_closesocket>:
{
 8006acc:	b507      	push	{r0, r1, r2, lr}
xCloseEvent.pvData = ( void * ) xSocket;
 8006ace:	9001      	str	r0, [sp, #4]
	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 8006ad0:	3801      	subs	r0, #1
xCloseEvent.eEventType = eSocketCloseEvent;
 8006ad2:	2309      	movs	r3, #9
	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 8006ad4:	3003      	adds	r0, #3
xCloseEvent.eEventType = eSocketCloseEvent;
 8006ad6:	f88d 3000 	strb.w	r3, [sp]
	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 8006ada:	d80b      	bhi.n	8006af4 <FreeRTOS_closesocket+0x28>
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 8006adc:	2100      	movs	r1, #0
 8006ade:	4668      	mov	r0, sp
 8006ae0:	f7ff faf4 	bl	80060cc <xSendEventStructToIPTask>
 8006ae4:	2800      	cmp	r0, #0
			xResult = 1;
 8006ae6:	bf0c      	ite	eq
 8006ae8:	f04f 30ff 	moveq.w	r0, #4294967295
 8006aec:	2001      	movne	r0, #1
}
 8006aee:	b003      	add	sp, #12
 8006af0:	f85d fb04 	ldr.w	pc, [sp], #4
		xResult = 0;
 8006af4:	2000      	movs	r0, #0
 8006af6:	e7fa      	b.n	8006aee <FreeRTOS_closesocket+0x22>

08006af8 <vSocketClose>:
{
 8006af8:	b538      	push	{r3, r4, r5, lr}
		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8006afa:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8006afe:	2b06      	cmp	r3, #6
{
 8006b00:	4604      	mov	r4, r0
		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8006b02:	d123      	bne.n	8006b4c <vSocketClose+0x54>
				if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8006b04:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8006b06:	b108      	cbz	r0, 8006b0c <vSocketClose+0x14>
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8006b08:	f002 f92c 	bl	8008d64 <vReleaseNetworkBufferAndDescriptor>
				vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 8006b0c:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 8006b10:	f001 fddb 	bl	80086ca <vTCPWindowDestroy>
			if( pxSocket->u.xTCP.rxStream != NULL )
 8006b14:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006b16:	b108      	cbz	r0, 8006b1c <vSocketClose+0x24>
				vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 8006b18:	f7fd fb00 	bl	800411c <vPortFree>
			if( pxSocket->u.xTCP.txStream != NULL )
 8006b1c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006b1e:	b108      	cbz	r0, 8006b24 <vSocketClose+0x2c>
				vPortFreeLarge( pxSocket->u.xTCP.txStream );
 8006b20:	f7fd fafc 	bl	800411c <vPortFree>
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8006b24:	4b1b      	ldr	r3, [pc, #108]	; (8006b94 <vSocketClose+0x9c>)
 8006b26:	8ca5      	ldrh	r5, [r4, #36]	; 0x24
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	3308      	adds	r3, #8
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d00d      	beq.n	8006b4c <vSocketClose+0x54>
			pxOtherSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8006b30:	68d1      	ldr	r1, [r2, #12]
			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
 8006b32:	f891 0053 	ldrb.w	r0, [r1, #83]	; 0x53
 8006b36:	2801      	cmp	r0, #1
 8006b38:	d115      	bne.n	8006b66 <vSocketClose+0x6e>
 8006b3a:	8c88      	ldrh	r0, [r1, #36]	; 0x24
 8006b3c:	42a8      	cmp	r0, r5
 8006b3e:	d112      	bne.n	8006b66 <vSocketClose+0x6e>
				( pxOtherSocket->u.xTCP.usChildCount ) )
 8006b40:	f8b1 004e 	ldrh.w	r0, [r1, #78]	; 0x4e
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 8006b44:	b178      	cbz	r0, 8006b66 <vSocketClose+0x6e>
				pxOtherSocket->u.xTCP.usChildCount--;
 8006b46:	3801      	subs	r0, #1
 8006b48:	f8a1 004e 	strh.w	r0, [r1, #78]	; 0x4e
	if( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE )
 8006b4c:	69a3      	ldr	r3, [r4, #24]
 8006b4e:	b9db      	cbnz	r3, 8006b88 <vSocketClose+0x90>
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 8006b50:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8006b54:	2b11      	cmp	r3, #17
 8006b56:	d010      	beq.n	8006b7a <vSocketClose+0x82>
	if( pxSocket->xEventGroup )
 8006b58:	6860      	ldr	r0, [r4, #4]
 8006b5a:	b990      	cbnz	r0, 8006b82 <vSocketClose+0x8a>
	vPortFreeSocket( pxSocket );
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f7fd fadd 	bl	800411c <vPortFree>
} /* Tested */
 8006b62:	2000      	movs	r0, #0
 8006b64:	bd38      	pop	{r3, r4, r5, pc}
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8006b66:	6852      	ldr	r2, [r2, #4]
 8006b68:	e7e0      	b.n	8006b2c <vSocketClose+0x34>
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 8006b6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006b6c:	68dd      	ldr	r5, [r3, #12]
			uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f7fd f87b 	bl	8003c6a <uxListRemove>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8006b74:	4628      	mov	r0, r5
 8006b76:	f002 f8f5 	bl	8008d64 <vReleaseNetworkBufferAndDescriptor>
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 8006b7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1f4      	bne.n	8006b6a <vSocketClose+0x72>
 8006b80:	e7ea      	b.n	8006b58 <vSocketClose+0x60>
		vEventGroupDelete( pxSocket->xEventGroup );
 8006b82:	f7fd f821 	bl	8003bc8 <vEventGroupDelete>
 8006b86:	e7e9      	b.n	8006b5c <vSocketClose+0x64>
		uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 8006b88:	f104 0008 	add.w	r0, r4, #8
 8006b8c:	f7fd f86d 	bl	8003c6a <uxListRemove>
 8006b90:	e7de      	b.n	8006b50 <vSocketClose+0x58>
 8006b92:	bf00      	nop
 8006b94:	20006504 	.word	0x20006504

08006b98 <pxUDPSocketLookup>:

/*-----------------------------------------------------------*/

FreeRTOS_Socket_t *pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 8006b98:	b508      	push	{r3, lr}

	/* Looking up a socket is quite simple, find a match with the local port.

	See if there is a list item associated with the port number on the
	list of bound sockets. */
	pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 8006b9a:	4601      	mov	r1, r0
 8006b9c:	4807      	ldr	r0, [pc, #28]	; (8006bbc <pxUDPSocketLookup+0x24>)
 8006b9e:	f7ff fd46 	bl	800662e <pxListFindListItemWithValue>

	if( pxListItem != NULL )
 8006ba2:	b150      	cbz	r0, 8006bba <pxUDPSocketLookup+0x22>
	{
		/* The owner of the list item is the socket itself. */
		pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem );
 8006ba4:	68c0      	ldr	r0, [r0, #12]
		configASSERT( pxSocket != NULL );
 8006ba6:	b940      	cbnz	r0, 8006bba <pxUDPSocketLookup+0x22>
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	e7fe      	b.n	8006bb8 <pxUDPSocketLookup+0x20>
	}
	return pxSocket;
}
 8006bba:	bd08      	pop	{r3, pc}
 8006bbc:	20006518 	.word	0x20006518

08006bc0 <vSocketWakeUpUser>:
	}
	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		if( pxSocket->pxSocketSet != NULL )
 8006bc0:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
 8006bc2:	b510      	push	{r4, lr}
 8006bc4:	4604      	mov	r4, r0
		if( pxSocket->pxSocketSet != NULL )
 8006bc6:	b14a      	cbz	r2, 8006bdc <vSocketWakeUpUser+0x1c>
		{
			EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & eSELECT_ALL;
 8006bc8:	6801      	ldr	r1, [r0, #0]
 8006bca:	f3c1 2103 	ubfx	r1, r1, #8, #4
			if( xSelectBits != 0ul )
 8006bce:	b129      	cbz	r1, 8006bdc <vSocketWakeUpUser+0x1c>
			{
				pxSocket->xSocketBits |= xSelectBits;
 8006bd0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006bd2:	430b      	orrs	r3, r1
 8006bd4:	6303      	str	r3, [r0, #48]	; 0x30
				xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 8006bd6:	6810      	ldr	r0, [r2, #0]
 8006bd8:	f7fc ffb5 	bl	8003b46 <xEventGroupSetBits>
			}
		}

		pxSocket->xEventBits &= eSOCKET_ALL;
 8006bdc:	6821      	ldr	r1, [r4, #0]
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0u ) )
 8006bde:	6860      	ldr	r0, [r4, #4]
		pxSocket->xEventBits &= eSOCKET_ALL;
 8006be0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006be4:	6021      	str	r1, [r4, #0]
	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0u ) )
 8006be6:	b110      	cbz	r0, 8006bee <vSocketWakeUpUser+0x2e>
 8006be8:	b109      	cbz	r1, 8006bee <vSocketWakeUpUser+0x2e>
	{
		xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 8006bea:	f7fc ffac 	bl	8003b46 <xEventGroupSetBits>
	}

	pxSocket->xEventBits = 0ul;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	bd10      	pop	{r4, pc}

08006bf4 <xTCPTimerCheck>:
	 * - Send new data
	 * - Send a keep-alive packet
	 * - Check for timeout (in non-connected states only)
	 */
	TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
	{
 8006bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf8:	4680      	mov	r8, r0
	FreeRTOS_Socket_t *pxSocket;
	TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
	TickType_t xNow = xTaskGetTickCount();
 8006bfa:	f7fd ff6d 	bl	8004ad8 <xTaskGetTickCount>
	static TickType_t xLastTime = 0u;
	TickType_t xDelta = xNow - xLastTime;
 8006bfe:	4b1d      	ldr	r3, [pc, #116]	; (8006c74 <xTCPTimerCheck+0x80>)
	ListItem_t* pxEnd = ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
	ListItem_t *pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8006c00:	4f1d      	ldr	r7, [pc, #116]	; (8006c78 <xTCPTimerCheck+0x84>)
	TickType_t xDelta = xNow - xLastTime;
 8006c02:	681c      	ldr	r4, [r3, #0]
	ListItem_t *pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8006c04:	f8d7 a00c 	ldr.w	sl, [r7, #12]

		xLastTime = xNow;
 8006c08:	6018      	str	r0, [r3, #0]

		if( xDelta == 0u )
		{
			xDelta = 1u;
 8006c0a:	1b04      	subs	r4, r0, r4
 8006c0c:	bf08      	it	eq
 8006c0e:	2401      	moveq	r4, #1
				}
				else
				{
					/* Or else make sure this will be called again to wake-up
					the sockets' owner. */
					xShortest = ( TickType_t ) 0;
 8006c10:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		while( pxIterator != pxEnd )
 8006c14:	3708      	adds	r7, #8
				pxSocket->u.xTCP.usTimeout = 0u;
 8006c16:	f04f 0900 	mov.w	r9, #0
		while( pxIterator != pxEnd )
 8006c1a:	45ba      	cmp	sl, r7
 8006c1c:	d102      	bne.n	8006c24 <xTCPTimerCheck+0x30>
				xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
			}
		}

		return xShortest;
	}
 8006c1e:	4630      	mov	r0, r6
 8006c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pxSocket = ( FreeRTOS_Socket_t * )listGET_LIST_ITEM_OWNER( pxIterator );
 8006c24:	f8da 500c 	ldr.w	r5, [sl, #12]
			pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 8006c28:	f8da a004 	ldr.w	sl, [sl, #4]
			if( pxSocket->u.xTCP.usTimeout == 0u )
 8006c2c:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0f2      	beq.n	8006c1a <xTCPTimerCheck+0x26>
			if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 8006c34:	42a3      	cmp	r3, r4
 8006c36:	d912      	bls.n	8006c5e <xTCPTimerCheck+0x6a>
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 8006c38:	1b1b      	subs	r3, r3, r4
 8006c3a:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
			if( pxSocket->xEventBits != 0u )
 8006c3e:	682b      	ldr	r3, [r5, #0]
 8006c40:	b12b      	cbz	r3, 8006c4e <xTCPTimerCheck+0x5a>
				if( xWillSleep != pdFALSE )
 8006c42:	f1b8 0f00 	cmp.w	r8, #0
 8006c46:	d012      	beq.n	8006c6e <xTCPTimerCheck+0x7a>
					vSocketWakeUpUser( pxSocket );
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f7ff ffb9 	bl	8006bc0 <vSocketWakeUpUser>
			if( ( pxSocket->u.xTCP.usTimeout != 0u ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 8006c4e:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0e1      	beq.n	8006c1a <xTCPTimerCheck+0x26>
 8006c56:	429e      	cmp	r6, r3
 8006c58:	bf28      	it	cs
 8006c5a:	461e      	movcs	r6, r3
 8006c5c:	e7dd      	b.n	8006c1a <xTCPTimerCheck+0x26>
				pxSocket->u.xTCP.usTimeout = 0u;
 8006c5e:	f8a5 9048 	strh.w	r9, [r5, #72]	; 0x48
				if( xTCPSocketCheck( pxSocket ) < 0 )
 8006c62:	4628      	mov	r0, r5
 8006c64:	f000 fdee 	bl	8007844 <xTCPSocketCheck>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	dae8      	bge.n	8006c3e <xTCPTimerCheck+0x4a>
 8006c6c:	e7d5      	b.n	8006c1a <xTCPTimerCheck+0x26>
					xShortest = ( TickType_t ) 0;
 8006c6e:	4646      	mov	r6, r8
 8006c70:	e7ed      	b.n	8006c4e <xTCPTimerCheck+0x5a>
 8006c72:	bf00      	nop
 8006c74:	20004f1c 	.word	0x20004f1c
 8006c78:	20006504 	.word	0x20006504

08006c7c <pxTCPSocketLookup>:
	 * looking up a socket is a little more complex:
	 * Both a local port, and a remote port and IP address are being used
	 * For a socket in listening mode, the remote port and IP address are both 0
	 */
	FreeRTOS_Socket_t *pxTCPSocketLookup( uint32_t ulLocalIP, UBaseType_t uxLocalPort, uint32_t ulRemoteIP, UBaseType_t uxRemotePort )
	{
 8006c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	MiniListItem_t *pxEnd = ( MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );

		/* Parameter not yet supported. */
		( void ) ulLocalIP;

		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 8006c7e:	4c0e      	ldr	r4, [pc, #56]	; (8006cb8 <pxTCPSocketLookup+0x3c>)
	FreeRTOS_Socket_t *pxResult = NULL, *pxListenSocket = NULL;
 8006c80:	2600      	movs	r6, #0
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 8006c82:	68e5      	ldr	r5, [r4, #12]
			 pxIterator != ( ListItem_t * ) pxEnd;
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );

			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 8006c84:	b289      	uxth	r1, r1
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 8006c86:	3408      	adds	r4, #8
				{
					/* If this is a socket listening to uxLocalPort, remember it
					in case there is no perfect match. */
					pxListenSocket = pxSocket;
				}
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 8006c88:	b29b      	uxth	r3, r3
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 8006c8a:	42a5      	cmp	r5, r4
 8006c8c:	d101      	bne.n	8006c92 <pxTCPSocketLookup+0x16>
 8006c8e:	4630      	mov	r0, r6
			found. */
			pxResult = pxListenSocket;
		}

		return pxResult;
	}
 8006c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8006c92:	68e8      	ldr	r0, [r5, #12]
			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 8006c94:	8c87      	ldrh	r7, [r0, #36]	; 0x24
 8006c96:	428f      	cmp	r7, r1
 8006c98:	d10b      	bne.n	8006cb2 <pxTCPSocketLookup+0x36>
				if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 8006c9a:	f890 7053 	ldrb.w	r7, [r0, #83]	; 0x53
 8006c9e:	2f01      	cmp	r7, #1
 8006ca0:	d006      	beq.n	8006cb0 <pxTCPSocketLookup+0x34>
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 8006ca2:	8f87      	ldrh	r7, [r0, #60]	; 0x3c
 8006ca4:	429f      	cmp	r7, r3
 8006ca6:	d104      	bne.n	8006cb2 <pxTCPSocketLookup+0x36>
 8006ca8:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8006caa:	4297      	cmp	r7, r2
 8006cac:	d101      	bne.n	8006cb2 <pxTCPSocketLookup+0x36>
 8006cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb0:	4606      	mov	r6, r0
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 8006cb2:	686d      	ldr	r5, [r5, #4]
 8006cb4:	e7e9      	b.n	8006c8a <pxTCPSocketLookup+0xe>
 8006cb6:	bf00      	nop
 8006cb8:	20006504 	.word	0x20006504

08006cbc <lTCPAddRxdata>:
	/*
	 * Add data to the RxStream.  When uxOffset > 0, data has come in out-of-order
	 * and will be put in front of the head so it can not be popped by the user.
	 */
	int32_t lTCPAddRxdata( FreeRTOS_Socket_t *pxSocket, size_t uxOffset, const uint8_t *pcData, uint32_t ulByteCount )
	{
 8006cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	StreamBuffer_t *pxStream = pxSocket->u.xTCP.rxStream;
 8006cc0:	6f46      	ldr	r6, [r0, #116]	; 0x74
	{
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	460f      	mov	r7, r1
 8006cc6:	4690      	mov	r8, r2
 8006cc8:	4699      	mov	r9, r3
		/* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
		if( pucData != NULL ) copy data the the buffer
		if( pucData == NULL ) no copying, just advance rxHead
		if( uxOffset != 0 ) Just store data which has come out-of-order
		if( uxOffset == 0 ) Also advance rxHead */
		if( pxStream == NULL )
 8006cca:	bb5e      	cbnz	r6, 8006d24 <lTCPAddRxdata+0x68>
			if( pxSocket->u.xTCP.uxLittleSpace == 0ul )
 8006ccc:	6e42      	ldr	r2, [r0, #100]	; 0x64
			uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 8006cce:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
			if( pxSocket->u.xTCP.uxLittleSpace == 0ul )
 8006cd0:	b91a      	cbnz	r2, 8006cda <lTCPAddRxdata+0x1e>
				pxSocket->u.xTCP.uxLittleSpace  = ( 1ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why divide by 5?  Can this be changed to a #define? */
 8006cd2:	2205      	movs	r2, #5
 8006cd4:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cd8:	6642      	str	r2, [r0, #100]	; 0x64
			if( pxSocket->u.xTCP.uxEnoughSpace == 0ul )
 8006cda:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8006cdc:	b922      	cbnz	r2, 8006ce8 <lTCPAddRxdata+0x2c>
				pxSocket->u.xTCP.uxEnoughSpace = ( 4ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why multiply by 4?  Maybe sock80_PERCENT?*/
 8006cde:	009a      	lsls	r2, r3, #2
 8006ce0:	2105      	movs	r1, #5
 8006ce2:	fbb2 f2f1 	udiv	r2, r2, r1
 8006ce6:	66a2      	str	r2, [r4, #104]	; 0x68
		uxLength += sizeof( size_t );
 8006ce8:	3304      	adds	r3, #4
		uxLength &= ~( sizeof( size_t ) - 1u );
 8006cea:	f023 0503 	bic.w	r5, r3, #3
		pxBuffer = ( StreamBuffer_t * )pvPortMallocLarge( uxSize );
 8006cee:	f105 0014 	add.w	r0, r5, #20
 8006cf2:	f7fd f981 	bl	8003ff8 <pvPortMalloc>
		if( pxBuffer == NULL )
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	b970      	cbnz	r0, 8006d18 <lTCPAddRxdata+0x5c>
			pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 8006cfa:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006cfe:	f043 0308 	orr.w	r3, r3, #8
 8006d02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8006d06:	2108      	movs	r1, #8
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f000 fbe6 	bl	80074da <vTCPStateChange>
		{
			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
			if( pxStream == NULL )
			{
				return -1;
 8006d0e:	f04f 35ff 	mov.w	r5, #4294967295
				#endif
			}
		}

		return xResult;
	}
 8006d12:	4628      	mov	r0, r5
 8006d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			memset( pxBuffer, '\0', sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 8006d18:	2214      	movs	r2, #20
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	f002 face 	bl	80092bc <memset>
			pxBuffer->LENGTH = ( size_t ) uxLength ;
 8006d20:	6135      	str	r5, [r6, #16]
				pxSocket->u.xTCP.rxStream = pxBuffer;
 8006d22:	6766      	str	r6, [r4, #116]	; 0x74
		xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 8006d24:	464b      	mov	r3, r9
 8006d26:	4642      	mov	r2, r8
 8006d28:	4639      	mov	r1, r7
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f000 f9d5 	bl	80070da <uxStreamBufferAdd>
 8006d30:	4605      	mov	r5, r0
		if( uxOffset == 0u )
 8006d32:	2f00      	cmp	r7, #0
 8006d34:	d1ed      	bne.n	8006d12 <lTCPAddRxdata+0x56>
				if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 8006d36:	f994 3040 	ldrsb.w	r3, [r4, #64]	; 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	db1e      	blt.n	8006d7c <lTCPAddRxdata+0xc0>
					size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8006d3e:	6f62      	ldr	r2, [r4, #116]	; 0x74
size_t uxFront = pxBuffer->uxFront;
 8006d40:	68d1      	ldr	r1, [r2, #12]
size_t uxTail = pxBuffer->uxTail;
 8006d42:	6813      	ldr	r3, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 8006d44:	6912      	ldr	r2, [r2, #16]
 8006d46:	4413      	add	r3, r2
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	1a5b      	subs	r3, r3, r1
	if( uxCount >= pxBuffer->LENGTH )
 8006d4c:	429a      	cmp	r2, r3
		uxCount -= pxBuffer->LENGTH;
 8006d4e:	bf98      	it	ls
 8006d50:	1a9b      	subls	r3, r3, r2
					if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace  )
 8006d52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d311      	bcc.n	8006d7c <lTCPAddRxdata+0xc0>
						pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 8006d58:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d60:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
						pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8006d64:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
						pxSocket->u.xTCP.usTimeout = 1u;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
						xSendEventToIPTask( eTCPTimerEvent );
 8006d76:	2005      	movs	r0, #5
 8006d78:	f7ff f9e4 	bl	8006144 <xSendEventToIPTask>
				pxSocket->xEventBits |= eSOCKET_RECEIVE;
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	f043 0201 	orr.w	r2, r3, #1
 8006d82:	6022      	str	r2, [r4, #0]
					if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 8006d84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006d86:	07d2      	lsls	r2, r2, #31
						pxSocket->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 8006d88:	bf42      	ittt	mi
 8006d8a:	f443 7380 	orrmi.w	r3, r3, #256	; 0x100
 8006d8e:	f043 0301 	orrmi.w	r3, r3, #1
 8006d92:	6023      	strmi	r3, [r4, #0]
 8006d94:	e7bd      	b.n	8006d12 <lTCPAddRxdata+0x56>

08006d96 <FreeRTOS_tx_space>:
	BaseType_t FreeRTOS_tx_space( Socket_t xSocket )
	{
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8006d96:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
 8006d9a:	2a06      	cmp	r2, #6
	{
 8006d9c:	4603      	mov	r3, r0
		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8006d9e:	d105      	bne.n	8006dac <FreeRTOS_tx_space+0x16>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 8006da0:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8006da2:	b108      	cbz	r0, 8006da8 <FreeRTOS_tx_space+0x12>
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSpace ( pxSocket->u.xTCP.txStream );
 8006da4:	f7ff bc67 	b.w	8006676 <uxStreamBufferGetSpace>
			}
			else
			{
				xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 8006da8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006daa:	4770      	bx	lr
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8006dac:	f06f 0015 	mvn.w	r0, #21
			}
		}

		return xReturn;
	}
 8006db0:	4770      	bx	lr

08006db2 <FreeRTOS_tx_size>:
	BaseType_t FreeRTOS_tx_size( Socket_t xSocket )
	{
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8006db2:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8006db6:	2b06      	cmp	r3, #6
 8006db8:	d103      	bne.n	8006dc2 <FreeRTOS_tx_size+0x10>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 8006dba:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8006dbc:	b118      	cbz	r0, 8006dc6 <FreeRTOS_tx_size+0x14>
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSize ( pxSocket->u.xTCP.txStream );
 8006dbe:	f7ff bc2d 	b.w	800661c <uxStreamBufferGetSize>
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8006dc2:	f06f 0015 	mvn.w	r0, #21
				xReturn = 0;
			}
		}

		return xReturn;
	}
 8006dc6:	4770      	bx	lr

08006dc8 <FreeRTOS_setsockopt>:
{
 8006dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dca:	461e      	mov	r6, r3
	configASSERT( xSocket );
 8006dcc:	4604      	mov	r4, r0
 8006dce:	b940      	cbnz	r0, 8006de2 <FreeRTOS_setsockopt+0x1a>
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	e7fe      	b.n	8006de0 <FreeRTOS_setsockopt+0x18>
	switch( lOptionName )
 8006de2:	2a0f      	cmp	r2, #15
 8006de4:	f200 80cc 	bhi.w	8006f80 <FreeRTOS_setsockopt+0x1b8>
 8006de8:	e8df f002 	tbb	[pc, r2]
 8006dec:	ca180c08 	.word	0xca180c08
 8006df0:	caca2727 	.word	0xcaca2727
 8006df4:	6dcacaca 	.word	0x6dcacaca
 8006df8:	b48d427f 	.word	0xb48d427f
			pxSocket->xReceiveBlockTime = *( ( TickType_t * ) pvOptionValue );
 8006dfc:	6833      	ldr	r3, [r6, #0]
 8006dfe:	61c3      	str	r3, [r0, #28]
				xReturn = 0;
 8006e00:	2000      	movs	r0, #0
				break;
 8006e02:	e013      	b.n	8006e2c <FreeRTOS_setsockopt+0x64>
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 8006e04:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
			pxSocket->xSendBlockTime = *( ( TickType_t * ) pvOptionValue );
 8006e08:	6832      	ldr	r2, [r6, #0]
 8006e0a:	6202      	str	r2, [r0, #32]
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 8006e0c:	2b11      	cmp	r3, #17
 8006e0e:	d1f7      	bne.n	8006e00 <FreeRTOS_setsockopt+0x38>
				if( pxSocket->xSendBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 8006e10:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d9f3      	bls.n	8006e00 <FreeRTOS_setsockopt+0x38>
					pxSocket->xSendBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 8006e18:	6203      	str	r3, [r0, #32]
 8006e1a:	e7f1      	b.n	8006e00 <FreeRTOS_setsockopt+0x38>
			if( lOptionValue == 0 )
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8006e22:	b92e      	cbnz	r6, 8006e30 <FreeRTOS_setsockopt+0x68>
				pxSocket->ucSocketOptions &= ( uint8_t ) ~FREERTOS_SO_UDPCKSUM_OUT;
 8006e24:	f023 0302 	bic.w	r3, r3, #2
 8006e28:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
} /* Tested */
 8006e2c:	b003      	add	sp, #12
 8006e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 8006e30:	f043 0302 	orr.w	r3, r3, #2
 8006e34:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 8006e38:	e7e2      	b.n	8006e00 <FreeRTOS_setsockopt+0x38>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8006e3a:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8006e3e:	2b06      	cmp	r3, #6
 8006e40:	f040 80a1 	bne.w	8006f86 <FreeRTOS_setsockopt+0x1be>
					if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 8006e44:	2a04      	cmp	r2, #4
 8006e46:	bf0c      	ite	eq
 8006e48:	6f83      	ldreq	r3, [r0, #120]	; 0x78
						( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 8006e4a:	6f43      	ldrne	r3, [r0, #116]	; 0x74
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f040 809a 	bne.w	8006f86 <FreeRTOS_setsockopt+0x1be>
					if( lOptionName == FREERTOS_SO_SNDBUF )
 8006e52:	2a04      	cmp	r2, #4
					ulNewValue = *( ( uint32_t * ) pvOptionValue );
 8006e54:	6833      	ldr	r3, [r6, #0]
						ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 8006e56:	bf09      	itett	eq
 8006e58:	f8b0 204c 	ldrheq.w	r2, [r0, #76]	; 0x4c
						pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 8006e5c:	66c3      	strne	r3, [r0, #108]	; 0x6c

	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return a >= b ? a : b; }
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d) { return d * ( ( a + d - 1u ) / d ); }
 8006e5e:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8006e62:	189b      	addeq	r3, r3, r2
 8006e64:	bf02      	ittt	eq
 8006e66:	fbb3 f3f2 	udiveq	r3, r3, r2
 8006e6a:	4353      	muleq	r3, r2
						pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 8006e6c:	6703      	streq	r3, [r0, #112]	; 0x70
 8006e6e:	e7c7      	b.n	8006e00 <FreeRTOS_setsockopt+0x38>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8006e70:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8006e74:	2b06      	cmp	r3, #6
 8006e76:	f040 8086 	bne.w	8006f86 <FreeRTOS_setsockopt+0x1be>
					if( ( pxSocket->u.xTCP.txStream != NULL ) || ( pxSocket->u.xTCP.rxStream != NULL ) )
 8006e7a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f040 8082 	bne.w	8006f86 <FreeRTOS_setsockopt+0x1be>
 8006e82:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8006e84:	2d00      	cmp	r5, #0
 8006e86:	d17e      	bne.n	8006f86 <FreeRTOS_setsockopt+0x1be>
					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ), sizeof( pxProps->lTxBufSize ) );
 8006e88:	2704      	movs	r7, #4
 8006e8a:	4633      	mov	r3, r6
 8006e8c:	463a      	mov	r2, r7
 8006e8e:	4629      	mov	r1, r5
 8006e90:	9700      	str	r7, [sp, #0]
 8006e92:	f7ff ff99 	bl	8006dc8 <FreeRTOS_setsockopt>
					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ), sizeof( pxProps->lRxBufSize ) );
 8006e96:	f106 0308 	add.w	r3, r6, #8
 8006e9a:	2205      	movs	r2, #5
 8006e9c:	9700      	str	r7, [sp, #0]
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f7ff ff91 	bl	8006dc8 <FreeRTOS_setsockopt>
						pxSocket->u.xTCP.uxRxWinSize = ( uint32_t )pxProps->lRxWinSize;	/* Fixed value: size of the TCP reception window */
 8006ea6:	68f3      	ldr	r3, [r6, #12]
					if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 8006ea8:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
						pxSocket->u.xTCP.uxRxWinSize = ( uint32_t )pxProps->lRxWinSize;	/* Fixed value: size of the TCP reception window */
 8006eac:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize = ( uint32_t )pxProps->lTxWinSize;	/* Fixed value: size of the TCP transmit window */
 8006eb0:	6873      	ldr	r3, [r6, #4]
 8006eb2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
					if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 8006eb6:	07d2      	lsls	r2, r2, #31
 8006eb8:	d5a2      	bpl.n	8006e00 <FreeRTOS_setsockopt+0x38>
						pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxRxWinSize * pxSocket->u.xTCP.usInitMSS;
 8006eba:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
						pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxTxWinSize * pxSocket->u.xTCP.usInitMSS;
 8006ebe:	4353      	muls	r3, r2
 8006ec0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8006ec4:	e79c      	b.n	8006e00 <FreeRTOS_setsockopt+0x38>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8006ec6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8006eca:	2b06      	cmp	r3, #6
 8006ecc:	d15b      	bne.n	8006f86 <FreeRTOS_setsockopt+0x1be>
					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 8006ece:	6830      	ldr	r0, [r6, #0]
 8006ed0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006ed4:	b120      	cbz	r0, 8006ee0 <FreeRTOS_setsockopt+0x118>
						pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 8006ed6:	f043 0308 	orr.w	r3, r3, #8
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 8006eda:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006ede:	e78f      	b.n	8006e00 <FreeRTOS_setsockopt+0x38>
						pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 8006ee0:	f360 03c3 	bfi	r3, r0, #3, #1
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 8006ee4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006ee8:	e7a0      	b.n	8006e2c <FreeRTOS_setsockopt+0x64>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8006eea:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8006eee:	2b06      	cmp	r3, #6
 8006ef0:	d149      	bne.n	8006f86 <FreeRTOS_setsockopt+0x1be>
					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 8006ef2:	6830      	ldr	r0, [r6, #0]
 8006ef4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006ef8:	b110      	cbz	r0, 8006f00 <FreeRTOS_setsockopt+0x138>
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 8006efa:	f043 0310 	orr.w	r3, r3, #16
 8006efe:	e7ec      	b.n	8006eda <FreeRTOS_setsockopt+0x112>
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 8006f00:	f360 1304 	bfi	r3, r0, #4, #1
 8006f04:	e7ee      	b.n	8006ee4 <FreeRTOS_setsockopt+0x11c>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8006f06:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8006f0a:	2b06      	cmp	r3, #6
 8006f0c:	d13b      	bne.n	8006f86 <FreeRTOS_setsockopt+0x1be>
					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 8006f0e:	6832      	ldr	r2, [r6, #0]
 8006f10:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
 8006f14:	b1da      	cbz	r2, 8006f4e <FreeRTOS_setsockopt+0x186>
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 8006f16:	f043 0302 	orr.w	r3, r3, #2
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 8006f1a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
					if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 8006f1e:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
 8006f22:	f010 0502 	ands.w	r5, r0, #2
 8006f26:	f47f af6b 	bne.w	8006e00 <FreeRTOS_setsockopt+0x38>
 8006f2a:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8006f2e:	2b04      	cmp	r3, #4
 8006f30:	f67f af66 	bls.w	8006e00 <FreeRTOS_setsockopt+0x38>
						( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 8006f34:	4620      	mov	r0, r4
 8006f36:	f7ff ff3c 	bl	8006db2 <FreeRTOS_tx_size>
						( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	f43f af60 	beq.w	8006e00 <FreeRTOS_setsockopt+0x38>
					pxSocket->u.xTCP.usTimeout = 1u; /* to set/clear bRxStopped */
 8006f40:	2301      	movs	r3, #1
 8006f42:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
					xSendEventToIPTask( eTCPTimerEvent );
 8006f46:	2005      	movs	r0, #5
 8006f48:	f7ff f8fc 	bl	8006144 <xSendEventToIPTask>
 8006f4c:	e758      	b.n	8006e00 <FreeRTOS_setsockopt+0x38>
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 8006f4e:	f362 0341 	bfi	r3, r2, #1, #1
 8006f52:	e7e2      	b.n	8006f1a <FreeRTOS_setsockopt+0x152>
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8006f54:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8006f58:	2b06      	cmp	r3, #6
 8006f5a:	d114      	bne.n	8006f86 <FreeRTOS_setsockopt+0x1be>
					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 8006f5c:	6832      	ldr	r2, [r6, #0]
 8006f5e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8006f62:	b152      	cbz	r2, 8006f7a <FreeRTOS_setsockopt+0x1b2>
						pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 8006f64:	f043 0304 	orr.w	r3, r3, #4
						pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 8006f68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
					pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8006f6c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006f70:	f043 0301 	orr.w	r3, r3, #1
 8006f74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006f78:	e7e2      	b.n	8006f40 <FreeRTOS_setsockopt+0x178>
						pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 8006f7a:	f362 0382 	bfi	r3, r2, #2, #1
 8006f7e:	e7f3      	b.n	8006f68 <FreeRTOS_setsockopt+0x1a0>
			xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 8006f80:	f06f 006c 	mvn.w	r0, #108	; 0x6c
 8006f84:	e752      	b.n	8006e2c <FreeRTOS_setsockopt+0x64>
BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8006f86:	f06f 0015 	mvn.w	r0, #21
	return xReturn;
 8006f8a:	e74f      	b.n	8006e2c <FreeRTOS_setsockopt+0x64>

08006f8c <FreeRTOS_rx_size>:
	BaseType_t FreeRTOS_rx_size( Socket_t xSocket )
	{
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8006f8c:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8006f90:	2b06      	cmp	r3, #6
 8006f92:	d103      	bne.n	8006f9c <FreeRTOS_rx_size+0x10>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else if( pxSocket->u.xTCP.rxStream != NULL )
 8006f94:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8006f96:	b118      	cbz	r0, 8006fa0 <FreeRTOS_rx_size+0x14>
		{
			xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 8006f98:	f7ff bb40 	b.w	800661c <uxStreamBufferGetSize>
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8006f9c:	f06f 0015 	mvn.w	r0, #21
		{
			xReturn = 0;
		}

		return xReturn;
	}
 8006fa0:	4770      	bx	lr
	...

08006fa4 <vSocketSelect>:
/*-----------------------------------------------------------*/

#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )

	void vSocketSelect( SocketSelect_t *pxSocketSet )
	{
 8006fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BaseType_t xLastRound = 0;
	#endif

		/* These flags will be switched on after checking the socket status. */
		EventBits_t xGroupBits = 0;
		pxSocketSet->pxSocket = NULL;
 8006fa8:	2500      	movs	r5, #0
		{
			const ListItem_t *pxIterator;
			const MiniListItem_t *pxEnd;
			if( xRound == 0 )
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundUDPSocketsList );
 8006faa:	f8df b100 	ldr.w	fp, [pc, #256]	; 80070ac <vSocketSelect+0x108>
 8006fae:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80070b0 <vSocketSelect+0x10c>
		pxSocketSet->pxSocket = NULL;
 8006fb2:	6085      	str	r5, [r0, #8]
	{
 8006fb4:	4606      	mov	r6, r0
		for( xRound = 0; xRound <= xLastRound; xRound++ )
 8006fb6:	462f      	mov	r7, r5
			else
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
			}
		#endif /* ipconfigUSE_TCP == 1 */
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 8006fb8:	f8db a004 	ldr.w	sl, [fp, #4]
 8006fbc:	45da      	cmp	sl, fp
 8006fbe:	d117      	bne.n	8006ff0 <vSocketSelect+0x4c>
 8006fc0:	46c3      	mov	fp, r8
		for( xRound = 0; xRound <= xLastRound; xRound++ )
 8006fc2:	b19f      	cbz	r7, 8006fec <vSocketSelect+0x48>
				xGroupBits |= xSocketBits;

			}	/* for( pxIterator ... ) */
		}	/* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

		xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	6830      	ldr	r0, [r6, #0]
 8006fc8:	f7fc fd9a 	bl	8003b00 <xEventGroupClearBits>
 8006fcc:	f000 0007 	and.w	r0, r0, #7
			and cleared in FreeRTOS_select(). */
			xBitsToClear &= ( EventBits_t ) ~eSELECT_INTR;
		}
		#endif /* ipconfigSUPPORT_SIGNALS */

		if( xBitsToClear != 0 )
 8006fd0:	ea30 0105 	bics.w	r1, r0, r5
 8006fd4:	d002      	beq.n	8006fdc <vSocketSelect+0x38>
		{
			xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 8006fd6:	6830      	ldr	r0, [r6, #0]
 8006fd8:	f7fc fd92 	bl	8003b00 <xEventGroupClearBits>
		}

		/* Now include eSELECT_CALL_IP to wakeup the caller. */
		xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | eSELECT_CALL_IP );
 8006fdc:	6830      	ldr	r0, [r6, #0]
 8006fde:	f045 0110 	orr.w	r1, r5, #16
	}
 8006fe2:	b003      	add	sp, #12
 8006fe4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | eSELECT_CALL_IP );
 8006fe8:	f7fc bdad 	b.w	8003b46 <xEventGroupSetBits>
 8006fec:	2701      	movs	r7, #1
 8006fee:	e7e3      	b.n	8006fb8 <vSocketSelect+0x14>
				FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8006ff0:	f8da 900c 	ldr.w	r9, [sl, #12]
				if( pxSocket->pxSocketSet != pxSocketSet )
 8006ff4:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8006ff8:	429e      	cmp	r6, r3
 8006ffa:	d153      	bne.n	80070a4 <vSocketSelect+0x100>
					if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP )
 8006ffc:	f899 3027 	ldrb.w	r3, [r9, #39]	; 0x27
 8007000:	f8d9 402c 	ldr.w	r4, [r9, #44]	; 0x2c
 8007004:	2b06      	cmp	r3, #6
 8007006:	d142      	bne.n	800708e <vSocketSelect+0xea>
 8007008:	f899 3040 	ldrb.w	r3, [r9, #64]	; 0x40
						if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 800700c:	f014 0401 	ands.w	r4, r4, #1
 8007010:	f003 0306 	and.w	r3, r3, #6
 8007014:	d00a      	beq.n	800702c <vSocketSelect+0x88>
							if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 8007016:	f899 2053 	ldrb.w	r2, [r9, #83]	; 0x53
 800701a:	2a01      	cmp	r2, #1
 800701c:	d12a      	bne.n	8007074 <vSocketSelect+0xd0>
								if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != 0 ) )
 800701e:	f8d9 4054 	ldr.w	r4, [r9, #84]	; 0x54
 8007022:	b11c      	cbz	r4, 800702c <vSocketSelect+0x88>
 8007024:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
 8007028:	f3c4 0440 	ubfx	r4, r4, #1, #1
						if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 800702c:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 8007030:	0751      	lsls	r1, r2, #29
 8007032:	d506      	bpl.n	8007042 <vSocketSelect+0x9e>
							if( ( pxSocket->u.xTCP.ucTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == eCLOSED ) )
 8007034:	f899 1053 	ldrb.w	r1, [r9, #83]	; 0x53
 8007038:	f011 0ff7 	tst.w	r1, #247	; 0xf7
								xSocketBits |= eSELECT_EXCEPT;
 800703c:	bf08      	it	eq
 800703e:	f044 0404 	orreq.w	r4, r4, #4
						if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 8007042:	0790      	lsls	r0, r2, #30
 8007044:	d52b      	bpl.n	800709e <vSocketSelect+0xfa>
							if( bAccepted != 0 )
 8007046:	b923      	cbnz	r3, 8007052 <vSocketSelect+0xae>
								if( FreeRTOS_tx_space( pxSocket ) > 0 )
 8007048:	4648      	mov	r0, r9
 800704a:	f7ff fea4 	bl	8006d96 <FreeRTOS_tx_space>
 800704e:	2800      	cmp	r0, #0
 8007050:	dc0d      	bgt.n	800706e <vSocketSelect+0xca>
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 8007052:	f899 3041 	ldrb.w	r3, [r9, #65]	; 0x41
 8007056:	071a      	lsls	r2, r3, #28
 8007058:	d521      	bpl.n	800709e <vSocketSelect+0xfa>
 800705a:	f899 2053 	ldrb.w	r2, [r9, #83]	; 0x53
 800705e:	2a04      	cmp	r2, #4
 8007060:	d91d      	bls.n	800709e <vSocketSelect+0xfa>
									( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 8007062:	06d9      	lsls	r1, r3, #27
 8007064:	d41b      	bmi.n	800709e <vSocketSelect+0xfa>
									pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 8007066:	f043 0310 	orr.w	r3, r3, #16
 800706a:	f889 3041 	strb.w	r3, [r9, #65]	; 0x41
								xSocketBits |= eSELECT_WRITE;
 800706e:	f044 0402 	orr.w	r4, r4, #2
 8007072:	e014      	b.n	800709e <vSocketSelect+0xfa>
							else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 8007074:	b94b      	cbnz	r3, 800708a <vSocketSelect+0xe6>
 8007076:	4648      	mov	r0, r9
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	f7ff ff87 	bl	8006f8c <FreeRTOS_rx_size>
 800707e:	2800      	cmp	r0, #0
 8007080:	bfd4      	ite	le
 8007082:	2400      	movle	r4, #0
 8007084:	2401      	movgt	r4, #1
 8007086:	9b01      	ldr	r3, [sp, #4]
 8007088:	e7d0      	b.n	800702c <vSocketSelect+0x88>
				xSocketBits = 0;
 800708a:	2400      	movs	r4, #0
 800708c:	e7ce      	b.n	800702c <vSocketSelect+0x88>
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
 800708e:	f014 0401 	ands.w	r4, r4, #1
 8007092:	d004      	beq.n	800709e <vSocketSelect+0xfa>
 8007094:	f8d9 4038 	ldr.w	r4, [r9, #56]	; 0x38
 8007098:	3400      	adds	r4, #0
 800709a:	bf18      	it	ne
 800709c:	2401      	movne	r4, #1
				pxSocket->xSocketBits = xSocketBits;
 800709e:	f8c9 4030 	str.w	r4, [r9, #48]	; 0x30
				xGroupBits |= xSocketBits;
 80070a2:	4325      	orrs	r5, r4
				 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 80070a4:	f8da a004 	ldr.w	sl, [sl, #4]
 80070a8:	e788      	b.n	8006fbc <vSocketSelect+0x18>
 80070aa:	bf00      	nop
 80070ac:	20006520 	.word	0x20006520
 80070b0:	2000650c 	.word	0x2000650c

080070b4 <FreeRTOS_SignalSocket>:

#if( ipconfigSUPPORT_SIGNALS != 0 )

	/* Send a signal to the task which reads from this socket. */
	BaseType_t FreeRTOS_SignalSocket( Socket_t xSocket )
	{
 80070b4:	b508      	push	{r3, lr}
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
	BaseType_t xReturn;

		if( pxSocket == NULL )
 80070b6:	4603      	mov	r3, r0
 80070b8:	b160      	cbz	r0, 80070d4 <FreeRTOS_SignalSocket+0x20>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}
		else
	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
		if( ( pxSocket->pxSocketSet != NULL ) && ( pxSocket->pxSocketSet->xSelectGroup != NULL ) )
 80070ba:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80070bc:	b132      	cbz	r2, 80070cc <FreeRTOS_SignalSocket+0x18>
 80070be:	6810      	ldr	r0, [r2, #0]
 80070c0:	b120      	cbz	r0, 80070cc <FreeRTOS_SignalSocket+0x18>
		{
			xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_INTR );
 80070c2:	2108      	movs	r1, #8
		}
		else
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */
		if( pxSocket->xEventGroup != NULL )
		{
			xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_INTR );
 80070c4:	f7fc fd3f 	bl	8003b46 <xEventGroupSetBits>
			xReturn = 0;
 80070c8:	2000      	movs	r0, #0
 80070ca:	bd08      	pop	{r3, pc}
		if( pxSocket->xEventGroup != NULL )
 80070cc:	6858      	ldr	r0, [r3, #4]
 80070ce:	b108      	cbz	r0, 80070d4 <FreeRTOS_SignalSocket+0x20>
			xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_INTR );
 80070d0:	2140      	movs	r1, #64	; 0x40
 80070d2:	e7f7      	b.n	80070c4 <FreeRTOS_SignalSocket+0x10>
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 80070d4:	f06f 0015 	mvn.w	r0, #21
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
		}

		return xReturn;
	}
 80070d8:	bd08      	pop	{r3, pc}

080070da <uxStreamBufferAdd>:
 * an offset from uxHead while uxHead will not be moved yet.  This possibility
 * will be used when TCP data is received while earlier data is still missing.
 * If 'pucData' equals NULL, the function is called to advance 'uxHead' only.
 */
size_t uxStreamBufferAdd( StreamBuffer_t *pxBuffer, size_t uxOffset, const uint8_t *pucData, size_t uxCount )
{
 80070da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070de:	4605      	mov	r5, r0
size_t uxHead = pxBuffer->uxHead;
 80070e0:	6884      	ldr	r4, [r0, #8]
size_t uxTail = pxBuffer->uxTail;
 80070e2:	6800      	ldr	r0, [r0, #0]
 80070e4:	4617      	mov	r7, r2
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 80070e6:	692a      	ldr	r2, [r5, #16]
 80070e8:	4410      	add	r0, r2
 80070ea:	3801      	subs	r0, #1
 80070ec:	1b00      	subs	r0, r0, r4
	if( uxCount >= pxBuffer->LENGTH )
 80070ee:	4282      	cmp	r2, r0
		uxCount -= pxBuffer->LENGTH;
 80070f0:	bf98      	it	ls
 80070f2:	1a80      	subls	r0, r0, r2
size_t uxSpace, uxNextHead, uxFirst;

	uxSpace = uxStreamBufferGetSpace( pxBuffer );

	/* If uxOffset > 0, items can be placed in front of uxHead */
	if( uxSpace > uxOffset )
 80070f4:	4281      	cmp	r1, r0
	{
		uxSpace -= uxOffset;
	}
	else
	{
		uxSpace = 0u;
 80070f6:	bf2c      	ite	cs
 80070f8:	2400      	movcs	r4, #0
		uxSpace -= uxOffset;
 80070fa:	1a44      	subcc	r4, r0, r1
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 80070fc:	429c      	cmp	r4, r3
 80070fe:	bf28      	it	cs
 8007100:	461c      	movcs	r4, r3
{
 8007102:	460e      	mov	r6, r1

	/* The number of bytes that can be written is the minimum of the number of
	bytes requested and the number available. */
	uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );

	if( uxCount != 0u )
 8007104:	2c00      	cmp	r4, #0
 8007106:	d03c      	beq.n	8007182 <uxStreamBufferAdd+0xa8>
	{
		uxNextHead = pxBuffer->uxHead;
 8007108:	f8d5 8008 	ldr.w	r8, [r5, #8]

		if( uxOffset != 0u )
 800710c:	b159      	cbz	r1, 8007126 <uxStreamBufferAdd+0x4c>
		{
			/* ( uxOffset > 0 ) means: write in front if the uxHead marker */
			uxNextHead += uxOffset;
 800710e:	4488      	add	r8, r1
			if( uxNextHead >= pxBuffer->LENGTH )
 8007110:	4590      	cmp	r8, r2
 8007112:	d301      	bcc.n	8007118 <uxStreamBufferAdd+0x3e>
			{
				uxNextHead -= pxBuffer->LENGTH;
 8007114:	eba8 0802 	sub.w	r8, r8, r2
			}
		}

		if( pucData != NULL )
 8007118:	b32f      	cbz	r7, 8007166 <uxStreamBufferAdd+0x8c>
 800711a:	e005      	b.n	8007128 <uxStreamBufferAdd+0x4e>
			xReturn = pdFALSE;
		}
	}
	else
	{
		if( uxLeft <= uxRight )
 800711c:	4590      	cmp	r8, r2
 800711e:	d330      	bcc.n	8007182 <uxStreamBufferAdd+0xa8>
		}

		if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
		{
			/* Advance the front pointer */
			pxBuffer->uxFront = uxNextHead;
 8007120:	f8c5 800c 	str.w	r8, [r5, #12]
		}
	}

	return uxCount;
 8007124:	e02d      	b.n	8007182 <uxStreamBufferAdd+0xa8>
		if( pucData != NULL )
 8007126:	b1b7      	cbz	r7, 8007156 <uxStreamBufferAdd+0x7c>
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 8007128:	eba2 0908 	sub.w	r9, r2, r8
 800712c:	45a1      	cmp	r9, r4
 800712e:	bf28      	it	cs
 8007130:	46a1      	movcs	r9, r4
			memcpy( ( void* ) ( pxBuffer->ucArray + uxNextHead ), pucData, uxFirst );
 8007132:	f105 0a14 	add.w	sl, r5, #20
 8007136:	464a      	mov	r2, r9
 8007138:	4639      	mov	r1, r7
 800713a:	eb0a 0008 	add.w	r0, sl, r8
 800713e:	f002 f898 	bl	8009272 <memcpy>
			if( uxCount > uxFirst )
 8007142:	45a1      	cmp	r9, r4
 8007144:	d206      	bcs.n	8007154 <uxStreamBufferAdd+0x7a>
				memcpy( ( void * )pxBuffer->ucArray, pucData + uxFirst, uxCount - uxFirst );
 8007146:	eba4 0209 	sub.w	r2, r4, r9
 800714a:	eb07 0109 	add.w	r1, r7, r9
 800714e:	4650      	mov	r0, sl
 8007150:	f002 f88f 	bl	8009272 <memcpy>
		if( uxOffset == 0u )
 8007154:	b93e      	cbnz	r6, 8007166 <uxStreamBufferAdd+0x8c>
			if( uxNextHead >= pxBuffer->LENGTH )
 8007156:	692b      	ldr	r3, [r5, #16]
			uxNextHead += uxCount;
 8007158:	44a0      	add	r8, r4
			if( uxNextHead >= pxBuffer->LENGTH )
 800715a:	4598      	cmp	r8, r3
				uxNextHead -= pxBuffer->LENGTH;
 800715c:	bf28      	it	cs
 800715e:	eba8 0803 	subcs.w	r8, r8, r3
			pxBuffer->uxHead = uxNextHead;
 8007162:	f8c5 8008 	str.w	r8, [r5, #8]
		if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 8007166:	68ea      	ldr	r2, [r5, #12]
size_t uxTail = pxBuffer->uxTail;
 8007168:	682b      	ldr	r3, [r5, #0]
	if( ( uxLeft < uxTail ) ^ ( uxRight < uxTail ) )
 800716a:	429a      	cmp	r2, r3
 800716c:	bf2c      	ite	cs
 800716e:	2000      	movcs	r0, #0
 8007170:	2001      	movcc	r0, #1
 8007172:	4598      	cmp	r8, r3
 8007174:	bf2c      	ite	cs
 8007176:	2100      	movcs	r1, #0
 8007178:	2101      	movcc	r1, #1
 800717a:	4288      	cmp	r0, r1
 800717c:	d0ce      	beq.n	800711c <uxStreamBufferAdd+0x42>
		if( uxRight < uxTail )
 800717e:	4598      	cmp	r8, r3
 8007180:	d3ce      	bcc.n	8007120 <uxStreamBufferAdd+0x46>
}
 8007182:	4620      	mov	r0, r4
 8007184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007188 <uxStreamBufferGet>:
 * If 'pucData' equals NULL, the function is called to advance 'lTail' only.
 * if 'xPeek' is pdTRUE, or if 'uxOffset' is non-zero, the 'lTail' pointer will
 * not be advanced.
 */
size_t uxStreamBufferGet( StreamBuffer_t *pxBuffer, size_t uxOffset, uint8_t *pucData, size_t uxMaxCount, BaseType_t xPeek )
{
 8007188:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 800718c:	460e      	mov	r6, r1
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800718e:	6907      	ldr	r7, [r0, #16]
size_t uxHead = pxBuffer->uxHead;
 8007190:	6881      	ldr	r1, [r0, #8]
size_t uxTail = pxBuffer->uxTail;
 8007192:	6804      	ldr	r4, [r0, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8007194:	4439      	add	r1, r7
 8007196:	1b09      	subs	r1, r1, r4
	if ( uxCount >= pxBuffer->LENGTH )
 8007198:	428f      	cmp	r7, r1
		uxCount -= pxBuffer->LENGTH;
 800719a:	bf98      	it	ls
 800719c:	1bc9      	subls	r1, r1, r7
size_t uxSize, uxCount, uxFirst, uxNextTail;

	/* How much data is available? */
	uxSize = uxStreamBufferGetSize( pxBuffer );

	if( uxSize > uxOffset )
 800719e:	428e      	cmp	r6, r1
	{
		uxSize -= uxOffset;
	}
	else
	{
		uxSize = 0u;
 80071a0:	bf2c      	ite	cs
 80071a2:	2400      	movcs	r4, #0
		uxSize -= uxOffset;
 80071a4:	1b8c      	subcc	r4, r1, r6
 80071a6:	429c      	cmp	r4, r3
 80071a8:	bf28      	it	cs
 80071aa:	461c      	movcs	r4, r3
{
 80071ac:	4680      	mov	r8, r0
 80071ae:	4692      	mov	sl, r2
	}

	/* Use the minimum of the wanted bytes and the available bytes. */
	uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );

	if( uxCount > 0u )
 80071b0:	b33c      	cbz	r4, 8007202 <uxStreamBufferGet+0x7a>
	{
		uxNextTail = pxBuffer->uxTail;
 80071b2:	6805      	ldr	r5, [r0, #0]

		if( uxOffset != 0u )
 80071b4:	b11e      	cbz	r6, 80071be <uxStreamBufferGet+0x36>
		{
			uxNextTail += uxOffset;
 80071b6:	4435      	add	r5, r6
			if( uxNextTail >= pxBuffer->LENGTH )
 80071b8:	42bd      	cmp	r5, r7
			{
				uxNextTail -= pxBuffer->LENGTH;
 80071ba:	bf28      	it	cs
 80071bc:	1bed      	subcs	r5, r5, r7
			}
		}

		if( pucData != NULL )
 80071be:	f1ba 0f00 	cmp.w	sl, #0
 80071c2:	d013      	beq.n	80071ec <uxStreamBufferGet+0x64>
		{
			/* Calculate the number of bytes that can be read - which may be
			less than the number wanted if the data wraps around to the start of
			the buffer. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 80071c4:	1b7f      	subs	r7, r7, r5
 80071c6:	42a7      	cmp	r7, r4
 80071c8:	bf28      	it	cs
 80071ca:	4627      	movcs	r7, r4

			/* Obtain the number of bytes it is possible to obtain in the first
			read. */
			memcpy( pucData, pxBuffer->ucArray + uxNextTail, uxFirst );
 80071cc:	f108 0b14 	add.w	fp, r8, #20
 80071d0:	463a      	mov	r2, r7
 80071d2:	eb0b 0105 	add.w	r1, fp, r5
 80071d6:	4650      	mov	r0, sl
 80071d8:	f002 f84b 	bl	8009272 <memcpy>

			/* If the total number of wanted bytes is greater than the number
			that could be read in the first read... */
			if( uxCount > uxFirst )
 80071dc:	42a7      	cmp	r7, r4
 80071de:	d205      	bcs.n	80071ec <uxStreamBufferGet+0x64>
			{
				/*...then read the remaining bytes from the start of the buffer. */
				memcpy( pucData + uxFirst, pxBuffer->ucArray, uxCount - uxFirst );
 80071e0:	1be2      	subs	r2, r4, r7
 80071e2:	4659      	mov	r1, fp
 80071e4:	eb0a 0007 	add.w	r0, sl, r7
 80071e8:	f002 f843 	bl	8009272 <memcpy>
			}
		}

		if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 80071ec:	9b08      	ldr	r3, [sp, #32]
 80071ee:	b943      	cbnz	r3, 8007202 <uxStreamBufferGet+0x7a>
 80071f0:	b93e      	cbnz	r6, 8007202 <uxStreamBufferGet+0x7a>
		{
			/* Move the tail pointer to effecively remove the data read from
			the buffer. */
			uxNextTail += uxCount;

			if( uxNextTail >= pxBuffer->LENGTH )
 80071f2:	f8d8 3010 	ldr.w	r3, [r8, #16]
			uxNextTail += uxCount;
 80071f6:	4425      	add	r5, r4
			if( uxNextTail >= pxBuffer->LENGTH )
 80071f8:	429d      	cmp	r5, r3
			{
				uxNextTail -= pxBuffer->LENGTH;
 80071fa:	bf28      	it	cs
 80071fc:	1aed      	subcs	r5, r5, r3
			}

			pxBuffer->uxTail = uxNextTail;
 80071fe:	f8c8 5000 	str.w	r5, [r8]
		}
	}

	return uxCount;
}
 8007202:	4620      	mov	r0, r4
 8007204:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

08007208 <prvSocketSetMSS>:

static void prvSocketSetMSS( FreeRTOS_Socket_t *pxSocket )
{
uint32_t ulMSS = ipconfigTCP_MSS;

	if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0ul )
 8007208:	4a08      	ldr	r2, [pc, #32]	; (800722c <prvSocketSetMSS+0x24>)
 800720a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800720c:	6952      	ldr	r2, [r2, #20]
 800720e:	ba1b      	rev	r3, r3
 8007210:	4053      	eors	r3, r2
 8007212:	4a07      	ldr	r2, [pc, #28]	; (8007230 <prvSocketSetMSS+0x28>)
 8007214:	6852      	ldr	r2, [r2, #4]
 8007216:	4213      	tst	r3, r2
		ulMSS = FreeRTOS_min_uint32( ( uint32_t ) REDUCED_MSS_THROUGH_INTERNET, ulMSS );
	}

	FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );

	pxSocket->u.xTCP.usInitMSS = pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 8007218:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800721c:	bf18      	it	ne
 800721e:	f44f 63af 	movne.w	r3, #1400	; 0x578
 8007222:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
 8007226:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
 800722a:	4770      	bx	lr
 800722c:	200001b0 	.word	0x200001b0
 8007230:	20004edc 	.word	0x20004edc

08007234 <prvTCPCreateWindow>:
{
 8007234:	b513      	push	{r0, r1, r4, lr}
	vTCPWindowCreate(
 8007236:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800723a:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 800723e:	f8d0 40d4 	ldr.w	r4, [r0, #212]	; 0xd4
	vTCPWindowCreate(
 8007242:	9301      	str	r3, [sp, #4]
 8007244:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8007248:	9300      	str	r3, [sp, #0]
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800724a:	f240 51b4 	movw	r1, #1460	; 0x5b4
	vTCPWindowCreate(
 800724e:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8007252:	434a      	muls	r2, r1
 8007254:	30dc      	adds	r0, #220	; 0xdc
 8007256:	4361      	muls	r1, r4
 8007258:	f001 fa78 	bl	800874c <vTCPWindowCreate>
}
 800725c:	b002      	add	sp, #8
 800725e:	bd10      	pop	{r4, pc}

08007260 <prvTCPNextTimeout>:
{
 8007260:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 8007262:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
TickType_t ulDelayMs = ( TickType_t ) 20000;
 8007266:	f644 6520 	movw	r5, #20000	; 0x4e20
	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800726a:	2b02      	cmp	r3, #2
{
 800726c:	4604      	mov	r4, r0
TickType_t ulDelayMs = ( TickType_t ) 20000;
 800726e:	9501      	str	r5, [sp, #4]
	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 8007270:	d122      	bne.n	80072b8 <prvTCPNextTimeout+0x58>
		if( pxSocket->u.xTCP.bits.bConnPrepared )
 8007272:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007276:	071b      	lsls	r3, r3, #28
 8007278:	d51b      	bpl.n	80072b2 <prvTCPNextTimeout+0x52>
			if( pxSocket->u.xTCP.ucRepCount < 3u )
 800727a:	f890 3052 	ldrb.w	r3, [r0, #82]	; 0x52
 800727e:	2b02      	cmp	r3, #2
				ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1u ) );
 8007280:	bf9d      	ittte	ls
 8007282:	f103 33ff 	addls.w	r3, r3, #4294967295
 8007286:	f640 32b8 	movwls	r2, #3000	; 0xbb8
 800728a:	fa02 f303 	lslls.w	r3, r2, r3
				ulDelayMs = 11000UL;
 800728e:	f642 23f8 	movwhi	r3, #11000	; 0x2af8
			ulDelayMs = 500UL;
 8007292:	9301      	str	r3, [sp, #4]
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 8007294:	9b01      	ldr	r3, [sp, #4]
 8007296:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800729a:	4353      	muls	r3, r2
 800729c:	4293      	cmp	r3, r2
 800729e:	bf34      	ite	cc
 80072a0:	2301      	movcc	r3, #1
 80072a2:	fbb3 f3f2 	udivcs	r3, r3, r2
 80072a6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
}
 80072aa:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 80072ae:	b003      	add	sp, #12
 80072b0:	bd30      	pop	{r4, r5, pc}
			ulDelayMs = 500UL;
 80072b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80072b6:	e7ec      	b.n	8007292 <prvTCPNextTimeout+0x32>
	else if( pxSocket->u.xTCP.usTimeout == 0u )
 80072b8:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1f4      	bne.n	80072aa <prvTCPNextTimeout+0x4a>
		BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 80072c0:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
 80072c4:	aa01      	add	r2, sp, #4
 80072c6:	30dc      	adds	r0, #220	; 0xdc
 80072c8:	f001 fb7d 	bl	80089c6 <xTCPWindowTxHasData>
		if( ulDelayMs == 0u )
 80072cc:	9b01      	ldr	r3, [sp, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e0      	bne.n	8007294 <prvTCPNextTimeout+0x34>
			ulDelayMs = xResult ? 1UL : 20000UL;
 80072d2:	2800      	cmp	r0, #0
 80072d4:	bf18      	it	ne
 80072d6:	2501      	movne	r5, #1
 80072d8:	9501      	str	r5, [sp, #4]
 80072da:	e7db      	b.n	8007294 <prvTCPNextTimeout+0x34>

080072dc <prvTCPReturnPacket.constprop.4>:
static void prvTCPReturnPacket( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulLen, BaseType_t xReleaseAfterSend )
 80072dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( pxNetworkBuffer == NULL )
 80072de:	460d      	mov	r5, r1
static void prvTCPReturnPacket( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulLen, BaseType_t xReleaseAfterSend )
 80072e0:	b08b      	sub	sp, #44	; 0x2c
	if( pxNetworkBuffer == NULL )
 80072e2:	b929      	cbnz	r1, 80072f0 <prvTCPReturnPacket.constprop.4+0x14>
		xTempBuffer.pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 80072e4:	f100 0382 	add.w	r3, r0, #130	; 0x82
 80072e8:	9307      	str	r3, [sp, #28]
		xTempBuffer.xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80072ea:	2346      	movs	r3, #70	; 0x46
 80072ec:	9308      	str	r3, [sp, #32]
		pxNetworkBuffer = &xTempBuffer;
 80072ee:	ad01      	add	r5, sp, #4
		pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 80072f0:	69ac      	ldr	r4, [r5, #24]
		if( pxSocket != NULL )
 80072f2:	2800      	cmp	r0, #0
 80072f4:	f000 80a8 	beq.w	8007448 <prvTCPReturnPacket.constprop.4+0x16c>
			if( pxSocket->u.xTCP.rxStream != NULL )
 80072f8:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80072fa:	2900      	cmp	r1, #0
 80072fc:	f000 808b 	beq.w	8007416 <prvTCPReturnPacket.constprop.4+0x13a>
size_t uxFront = pxBuffer->uxFront;
 8007300:	68ce      	ldr	r6, [r1, #12]
size_t uxTail = pxBuffer->uxTail;
 8007302:	680b      	ldr	r3, [r1, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 8007304:	6909      	ldr	r1, [r1, #16]
 8007306:	440b      	add	r3, r1
 8007308:	3b01      	subs	r3, #1
 800730a:	1b9b      	subs	r3, r3, r6
	if( uxCount >= pxBuffer->LENGTH )
 800730c:	4299      	cmp	r1, r3
 800730e:	d800      	bhi.n	8007312 <prvTCPReturnPacket.constprop.4+0x36>
		uxCount -= pxBuffer->LENGTH;
 8007310:	1a5b      	subs	r3, r3, r1
			if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 8007312:	4e51      	ldr	r6, [pc, #324]	; (8007458 <prvTCPReturnPacket.constprop.4+0x17c>)
 8007314:	6c01      	ldr	r1, [r0, #64]	; 0x40
			ulSpace = FreeRTOS_min_uint32( pxSocket->u.xTCP.ulRxCurWinSize, pxTCPWindow->xSize.ulRxWindowLength );
 8007316:	f8d0 70d0 	ldr.w	r7, [r0, #208]	; 0xd0
 800731a:	f8d0 e0e0 	ldr.w	lr, [r0, #224]	; 0xe0
			if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800731e:	400e      	ands	r6, r1
 8007320:	2e00      	cmp	r6, #0
 8007322:	d17a      	bne.n	800741a <prvTCPReturnPacket.constprop.4+0x13e>
 8007324:	45be      	cmp	lr, r7
 8007326:	4671      	mov	r1, lr
 8007328:	bf28      	it	cs
 800732a:	4639      	movcs	r1, r7
			if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 800732c:	f8b0 604a 	ldrh.w	r6, [r0, #74]	; 0x4a
 8007330:	428e      	cmp	r6, r1
 8007332:	d902      	bls.n	800733a <prvTCPReturnPacket.constprop.4+0x5e>
 8007334:	429e      	cmp	r6, r3
 8007336:	bf98      	it	ls
 8007338:	4631      	movls	r1, r6
			ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800733a:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
 800733e:	f64f 76fc 	movw	r6, #65532	; 0xfffc
 8007342:	fa21 f303 	lsr.w	r3, r1, r3
 8007346:	42b3      	cmp	r3, r6
 8007348:	bf28      	it	cs
 800734a:	4633      	movcs	r3, r6
			pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800734c:	4e43      	ldr	r6, [pc, #268]	; (800745c <prvTCPReturnPacket.constprop.4+0x180>)
 800734e:	ea06 2603 	and.w	r6, r6, r3, lsl #8
 8007352:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007356:	4333      	orrs	r3, r6
 8007358:	8623      	strh	r3, [r4, #48]	; 0x30
			pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800735a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800735e:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
			pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 8007362:	f36f 0300 	bfc	r3, #0, #1
 8007366:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
				if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800736a:	b2db      	uxtb	r3, r3
			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800736c:	4431      	add	r1, r6
				if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800736e:	079e      	lsls	r6, r3, #30
			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 8007370:	6441      	str	r1, [r0, #68]	; 0x44
				if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8007372:	d554      	bpl.n	800741e <prvTCPReturnPacket.constprop.4+0x142>
					pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 8007374:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8007378:	f043 0304 	orr.w	r3, r3, #4
 800737c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
					pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 8007380:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8007384:	3b01      	subs	r3, #1
 8007386:	ba1b      	rev	r3, r3
					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8007388:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 800738c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8007390:	ba1b      	rev	r3, r3
			vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 8007392:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
		pxIPHeader->ucTimeToLive           = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8007396:	2380      	movs	r3, #128	; 0x80
 8007398:	75a3      	strb	r3, [r4, #22]
		pxIPHeader->usLength               = FreeRTOS_htons( ulLen );
 800739a:	0a13      	lsrs	r3, r2, #8
 800739c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80073a0:	8223      	strh	r3, [r4, #16]
 80073a2:	4f2f      	ldr	r7, [pc, #188]	; (8007460 <prvTCPReturnPacket.constprop.4+0x184>)
		if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 80073a4:	b108      	cbz	r0, 80073aa <prvTCPReturnPacket.constprop.4+0xce>
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	b90b      	cbnz	r3, 80073ae <prvTCPReturnPacket.constprop.4+0xd2>
			ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 80073aa:	f8d4 301e 	ldr.w	r3, [r4, #30]
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 80073ae:	482d      	ldr	r0, [pc, #180]	; (8007464 <prvTCPReturnPacket.constprop.4+0x188>)
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80073b0:	f8d4 101a 	ldr.w	r1, [r4, #26]
		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 80073b4:	f8c4 301a 	str.w	r3, [r4, #26]
		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 80073b8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80073ba:	f8c4 101e 	str.w	r1, [r4, #30]
		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 80073be:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80073c0:	84a3      	strh	r3, [r4, #36]	; 0x24
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 80073c2:	8803      	ldrh	r3, [r0, #0]
		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 80073c4:	8461      	strh	r1, [r4, #34]	; 0x22
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 80073c6:	0a19      	lsrs	r1, r3, #8
 80073c8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80073cc:	8261      	strh	r1, [r4, #18]
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ),
 80073ce:	4626      	mov	r6, r4
		pxIPHeader->usFragmentOffset = 0u;
 80073d0:	2100      	movs	r1, #0
		pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 80073d2:	320e      	adds	r2, #14
		usPacketIdentifier++;
 80073d4:	3301      	adds	r3, #1
		pxIPHeader->usFragmentOffset = 0u;
 80073d6:	7521      	strb	r1, [r4, #20]
 80073d8:	7561      	strb	r1, [r4, #21]
		usPacketIdentifier++;
 80073da:	8003      	strh	r3, [r0, #0]
		pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 80073dc:	61ea      	str	r2, [r5, #28]
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ),
 80073de:	f856 3f06 	ldr.w	r3, [r6, #6]!
 80073e2:	6023      	str	r3, [r4, #0]
 80073e4:	88b3      	ldrh	r3, [r6, #4]
 80073e6:	80a3      	strh	r3, [r4, #4]
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80073e8:	6838      	ldr	r0, [r7, #0]
 80073ea:	f8c4 0006 	str.w	r0, [r4, #6]
 80073ee:	88bb      	ldrh	r3, [r7, #4]
 80073f0:	80b3      	strh	r3, [r6, #4]
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 80073f2:	4628      	mov	r0, r5
 80073f4:	f7fb fa8a 	bl	800290c <xNetworkInterfaceOutput>
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort);
 80073f8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80073fa:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 80073fc:	84a3      	strh	r3, [r4, #36]	; 0x24
			pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 80073fe:	f8d4 301e 	ldr.w	r3, [r4, #30]
 8007402:	f8c4 301a 	str.w	r3, [r4, #26]
			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	f8c4 3006 	str.w	r3, [r4, #6]
 800740c:	88a3      	ldrh	r3, [r4, #4]
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort);
 800740e:	8462      	strh	r2, [r4, #34]	; 0x22
			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8007410:	80b3      	strh	r3, [r6, #4]
}
 8007412:	b00b      	add	sp, #44	; 0x2c
 8007414:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8007416:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007418:	e77b      	b.n	8007312 <prvTCPReturnPacket.constprop.4+0x36>
				ulSpace = 0u;
 800741a:	2100      	movs	r1, #0
 800741c:	e786      	b.n	800732c <prvTCPReturnPacket.constprop.4+0x50>
 800741e:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
 8007422:	ba33      	rev	r3, r6
				pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 8007424:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
				if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u )
 8007428:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800742c:	07d9      	lsls	r1, r3, #31
 800742e:	d5ad      	bpl.n	800738c <prvTCPReturnPacket.constprop.4+0xb0>
					uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 8007430:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
					if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8007434:	4431      	add	r1, r6
 8007436:	f8d0 6100 	ldr.w	r6, [r0, #256]	; 0x100
 800743a:	42b1      	cmp	r1, r6
						pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_FIN );
 800743c:	bf1c      	itt	ne
 800743e:	f023 0301 	bicne.w	r3, r3, #1
 8007442:	f884 302f 	strbne.w	r3, [r4, #47]	; 0x2f
 8007446:	e7a1      	b.n	800738c <prvTCPReturnPacket.constprop.4+0xb0>
			vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 8007448:	f8d4 102a 	ldr.w	r1, [r4, #42]	; 0x2a
 800744c:	f8d4 3026 	ldr.w	r3, [r4, #38]	; 0x26
 8007450:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
 8007454:	e79d      	b.n	8007392 <prvTCPReturnPacket.constprop.4+0xb6>
 8007456:	bf00      	nop
 8007458:	00040080 	.word	0x00040080
 800745c:	00ffff00 	.word	0x00ffff00
 8007460:	200001b0 	.word	0x200001b0
 8007464:	20004e7c 	.word	0x20004e7c

08007468 <prvTCPSendReset>:
{
 8007468:	b508      	push	{r3, lr}
	TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800746a:	6983      	ldr	r3, [r0, #24]
		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_RST;
 800746c:	2214      	movs	r2, #20
 800746e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER + 0u ) << 2;
 8007472:	2250      	movs	r2, #80	; 0x50
{
 8007474:	4601      	mov	r1, r0
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER + 0u ) << 2;
 8007476:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		prvTCPReturnPacket( NULL, pxNetworkBuffer, ( uint32_t ) xSendLength, pdFALSE );
 800747a:	2000      	movs	r0, #0
 800747c:	2228      	movs	r2, #40	; 0x28
 800747e:	f7ff ff2d 	bl	80072dc <prvTCPReturnPacket.constprop.4>
}
 8007482:	2000      	movs	r0, #0
 8007484:	bd08      	pop	{r3, pc}

08007486 <prvTCPAddTxData>:
{
 8007486:	b510      	push	{r4, lr}
	lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 8007488:	6f82      	ldr	r2, [r0, #120]	; 0x78
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800748a:	6913      	ldr	r3, [r2, #16]
size_t uxHead = pxBuffer->uxHead;
 800748c:	6891      	ldr	r1, [r2, #8]
{
 800748e:	4604      	mov	r4, r0
size_t uxMid = pxBuffer->uxMid;
 8007490:	6850      	ldr	r0, [r2, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8007492:	4419      	add	r1, r3
 8007494:	1a09      	subs	r1, r1, r0
	if ( uxCount >= pxBuffer->LENGTH )
 8007496:	428b      	cmp	r3, r1
		uxCount -= pxBuffer->LENGTH;
 8007498:	bf98      	it	ls
 800749a:	1ac9      	subls	r1, r1, r3
	if( lLength > 0 )
 800749c:	2900      	cmp	r1, #0
 800749e:	dd1b      	ble.n	80074d8 <prvTCPAddTxData+0x52>
								( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 80074a0:	6852      	ldr	r2, [r2, #4]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 80074a2:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 80074a6:	f001 fa29 	bl	80088fc <lTCPWindowTxAdd>
		if( lCount > 0 )
 80074aa:	2800      	cmp	r0, #0
 80074ac:	dd14      	ble.n	80074d8 <prvTCPAddTxData+0x52>
			vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 80074ae:	6fa3      	ldr	r3, [r4, #120]	; 0x78
size_t uxHead = pxBuffer->uxHead;
 80074b0:	689a      	ldr	r2, [r3, #8]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 80074b2:	6919      	ldr	r1, [r3, #16]
size_t uxMid = pxBuffer->uxMid;
 80074b4:	685c      	ldr	r4, [r3, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 80074b6:	440a      	add	r2, r1
 80074b8:	1b12      	subs	r2, r2, r4
	if ( uxCount >= pxBuffer->LENGTH )
 80074ba:	4291      	cmp	r1, r2
	pxBuffer->uxMid += uxCount;
 80074bc:	685c      	ldr	r4, [r3, #4]
		uxCount -= pxBuffer->LENGTH;
 80074be:	bf98      	it	ls
 80074c0:	1a52      	subls	r2, r2, r1
	pxBuffer->uxMid += uxCount;
 80074c2:	4290      	cmp	r0, r2
 80074c4:	bf94      	ite	ls
 80074c6:	1822      	addls	r2, r4, r0
 80074c8:	18a2      	addhi	r2, r4, r2
 80074ca:	605a      	str	r2, [r3, #4]
	if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	428a      	cmp	r2, r1
		pxBuffer->uxMid -= pxBuffer->LENGTH;
 80074d0:	bf22      	ittt	cs
 80074d2:	685a      	ldrcs	r2, [r3, #4]
 80074d4:	1a51      	subcs	r1, r2, r1
 80074d6:	6059      	strcs	r1, [r3, #4]
 80074d8:	bd10      	pop	{r4, pc}

080074da <vTCPStateChange>:
{
 80074da:	b570      	push	{r4, r5, r6, lr}
BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connected ? */
 80074dc:	f890 2053 	ldrb.w	r2, [r0, #83]	; 0x53
 80074e0:	2a04      	cmp	r2, #4
{
 80074e2:	4604      	mov	r4, r0
 80074e4:	460e      	mov	r6, r1
BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connected ? */
 80074e6:	d92f      	bls.n	8007548 <vTCPStateChange+0x6e>
 80074e8:	f1b2 0508 	subs.w	r5, r2, #8
 80074ec:	bf18      	it	ne
 80074ee:	2501      	movne	r5, #1
BaseType_t bAfter  = ( BaseType_t ) NOW_CONNECTED( eTCPState );						/* Is it connected now ? */
 80074f0:	2e04      	cmp	r6, #4
 80074f2:	d901      	bls.n	80074f8 <vTCPStateChange+0x1e>
 80074f4:	2e08      	cmp	r6, #8
 80074f6:	d166      	bne.n	80075c6 <vTCPStateChange+0xec>
	if( bBefore != bAfter )
 80074f8:	2d00      	cmp	r5, #0
 80074fa:	d159      	bne.n	80075b0 <vTCPStateChange+0xd6>
		if( eTCPState == eCLOSED )
 80074fc:	b956      	cbnz	r6, 8007514 <vTCPStateChange+0x3a>
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 80074fe:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007502:	f013 0f06 	tst.w	r3, #6
 8007506:	d004      	beq.n	8007512 <vTCPStateChange+0x38>
				if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8007508:	071b      	lsls	r3, r3, #28
 800750a:	d402      	bmi.n	8007512 <vTCPStateChange+0x38>
					FreeRTOS_closesocket( pxSocket );
 800750c:	4620      	mov	r0, r4
 800750e:	f7ff fadd 	bl	8006acc <FreeRTOS_closesocket>
FreeRTOS_Socket_t *xParent = NULL;
 8007512:	2500      	movs	r5, #0
	pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 8007514:	f884 6053 	strb.w	r6, [r4, #83]	; 0x53
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 8007518:	f7fd fade 	bl	8004ad8 <xTaskGetTickCount>
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800751c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 8007520:	6620      	str	r0, [r4, #96]	; 0x60
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8007522:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8007526:	f36f 0341 	bfc	r3, #1, #1
 800752a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 800752e:	2300      	movs	r3, #0
 8007530:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 8007534:	f7fd fad0 	bl	8004ad8 <xTaskGetTickCount>
 8007538:	65e0      	str	r0, [r4, #92]	; 0x5c
	if( xParent != NULL )
 800753a:	2d00      	cmp	r5, #0
 800753c:	d057      	beq.n	80075ee <vTCPStateChange+0x114>
		vSocketWakeUpUser( xParent );
 800753e:	4628      	mov	r0, r5
}
 8007540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vSocketWakeUpUser( xParent );
 8007544:	f7ff bb3c 	b.w	8006bc0 <vSocketWakeUpUser>
 8007548:	2500      	movs	r5, #0
 800754a:	e7d1      	b.n	80074f0 <vTCPStateChange+0x16>
 800754c:	4625      	mov	r5, r4
					if( xParent->u.xTCP.pxPeerSocket == NULL )
 800754e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8007550:	b903      	cbnz	r3, 8007554 <vTCPStateChange+0x7a>
						xParent->u.xTCP.pxPeerSocket = pxSocket;
 8007552:	656c      	str	r4, [r5, #84]	; 0x54
					xParent->xEventBits |= eSOCKET_ACCEPT;
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	f043 0104 	orr.w	r1, r3, #4
 800755a:	6029      	str	r1, [r5, #0]
						if( ( xParent->xSelectBits & eSELECT_READ ) != 0 )
 800755c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800755e:	07c9      	lsls	r1, r1, #31
							xParent->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 8007560:	bf44      	itt	mi
 8007562:	f443 7382 	orrmi.w	r3, r3, #260	; 0x104
 8007566:	602b      	strmi	r3, [r5, #0]
				pxSocket->u.xTCP.pxPeerSocket = NULL;
 8007568:	2300      	movs	r3, #0
 800756a:	6563      	str	r3, [r4, #84]	; 0x54
				pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800756c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
				pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 8007570:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8007574:	f043 0302 	orr.w	r3, r3, #2
 8007578:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800757c:	2a0b      	cmp	r2, #11
 800757e:	d8c9      	bhi.n	8007514 <vTCPStateChange+0x3a>
 8007580:	2301      	movs	r3, #1
 8007582:	fa03 f202 	lsl.w	r2, r3, r2
 8007586:	f640 3381 	movw	r3, #2945	; 0xb81
 800758a:	421a      	tst	r2, r3
 800758c:	d0c2      	beq.n	8007514 <vTCPStateChange+0x3a>
			pxSocket->u.xTCP.usTimeout = 0u;
 800758e:	2300      	movs	r3, #0
 8007590:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8007594:	e7be      	b.n	8007514 <vTCPStateChange+0x3a>
				pxSocket->xEventBits |= eSOCKET_CONNECT;
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	f043 0108 	orr.w	r1, r3, #8
 800759c:	6021      	str	r1, [r4, #0]
					if( pxSocket->xSelectBits & eSELECT_WRITE )
 800759e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80075a0:	0788      	lsls	r0, r1, #30
 80075a2:	d401      	bmi.n	80075a8 <vTCPStateChange+0xce>
FreeRTOS_Socket_t *xParent = NULL;
 80075a4:	2500      	movs	r5, #0
 80075a6:	e7e9      	b.n	800757c <vTCPStateChange+0xa2>
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 80075a8:	f443 7302 	orr.w	r3, r3, #520	; 0x208
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	e7e5      	b.n	800757c <vTCPStateChange+0xa2>
			pxSocket->xEventBits |= eSOCKET_CLOSED;
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	f043 0120 	orr.w	r1, r3, #32
 80075b6:	6021      	str	r1, [r4, #0]
				if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 80075b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80075ba:	0749      	lsls	r1, r1, #29
					pxSocket->xEventBits |= ( eSELECT_EXCEPT << SOCKET_EVENT_BIT_COUNT );
 80075bc:	bf44      	itt	mi
 80075be:	f443 6384 	orrmi.w	r3, r3, #1056	; 0x420
 80075c2:	6023      	strmi	r3, [r4, #0]
 80075c4:	e7ee      	b.n	80075a4 <vTCPStateChange+0xca>
	if( bBefore != bAfter )
 80075c6:	2d00      	cmp	r5, #0
 80075c8:	d1a3      	bne.n	8007512 <vTCPStateChange+0x38>
			if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 80075ca:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80075ce:	0759      	lsls	r1, r3, #29
 80075d0:	d5e1      	bpl.n	8007596 <vTCPStateChange+0xbc>
				if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 80075d2:	0718      	lsls	r0, r3, #28
 80075d4:	d4ba      	bmi.n	800754c <vTCPStateChange+0x72>
					xParent = pxSocket->u.xTCP.pxPeerSocket;
 80075d6:	6d65      	ldr	r5, [r4, #84]	; 0x54
					configASSERT( xParent != NULL );
 80075d8:	2d00      	cmp	r5, #0
 80075da:	d1b8      	bne.n	800754e <vTCPStateChange+0x74>
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	e7fe      	b.n	80075ec <vTCPStateChange+0x112>
 80075ee:	bd70      	pop	{r4, r5, r6, pc}

080075f0 <prvTCPPrepareSend>:
{
 80075f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( ( *ppxNetworkBuffer ) != NULL )
 80075f4:	680b      	ldr	r3, [r1, #0]
{
 80075f6:	b085      	sub	sp, #20
 80075f8:	4604      	mov	r4, r0
 80075fa:	468b      	mov	fp, r1
 80075fc:	4690      	mov	r8, r2
	if( ( *ppxNetworkBuffer ) != NULL )
 80075fe:	b333      	cbz	r3, 800764e <prvTCPPrepareSend+0x5e>
		pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 8007600:	699d      	ldr	r5, [r3, #24]
	pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_ACK;
 8007602:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007606:	f043 0310 	orr.w	r3, r3, #16
 800760a:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	if( pxSocket->u.xTCP.txStream != NULL )
 800760e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
	lStreamPos = 0;
 8007610:	2600      	movs	r6, #0
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8007612:	f104 09dc 	add.w	r9, r4, #220	; 0xdc
	lStreamPos = 0;
 8007616:	9603      	str	r6, [sp, #12]
	if( pxSocket->u.xTCP.txStream != NULL )
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 80b7 	beq.w	800778c <prvTCPPrepareSend+0x19c>
		if( pxSocket->u.xTCP.usCurMSS > 1u )
 800761e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8007622:	2b01      	cmp	r3, #1
 8007624:	d96c      	bls.n	8007700 <prvTCPPrepareSend+0x110>
			lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 8007626:	aa03      	add	r2, sp, #12
 8007628:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
 800762c:	4648      	mov	r0, r9
 800762e:	f001 f9f7 	bl	8008a20 <ulTCPWindowTxGet>
		if( lDataLen > 0 )
 8007632:	1e06      	subs	r6, r0, #0
 8007634:	f340 80a1 	ble.w	800777a <prvTCPPrepareSend+0x18a>
	if( xBufferAllocFixedSize != pdFALSE )
 8007638:	4b74      	ldr	r3, [pc, #464]	; (800780c <prvTCPPrepareSend+0x21c>)
			pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 800763a:	f8db 7000 	ldr.w	r7, [fp]
	if( xBufferAllocFixedSize != pdFALSE )
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	b143      	cbz	r3, 8007654 <prvTCPPrepareSend+0x64>
	if( xResize != pdFALSE )
 8007642:	2f00      	cmp	r7, #0
 8007644:	f040 8093 	bne.w	800776e <prvTCPPrepareSend+0x17e>
		lNeeded = ( int32_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 8007648:	f240 50f2 	movw	r0, #1522	; 0x5f2
 800764c:	e00d      	b.n	800766a <prvTCPPrepareSend+0x7a>
		pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800764e:	f100 0582 	add.w	r5, r0, #130	; 0x82
 8007652:	e7d6      	b.n	8007602 <prvTCPPrepareSend+0x12>
			( int32_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen );
 8007654:	f108 0036 	add.w	r0, r8, #54	; 0x36
 8007658:	4430      	add	r0, r6
	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
 800765a:	2846      	cmp	r0, #70	; 0x46
 800765c:	bfb8      	it	lt
 800765e:	2046      	movlt	r0, #70	; 0x46
		xResize = ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < (size_t)lNeeded );
 8007660:	b11f      	cbz	r7, 800766a <prvTCPPrepareSend+0x7a>
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	4283      	cmp	r3, r0
 8007666:	f080 8082 	bcs.w	800776e <prvTCPPrepareSend+0x17e>
		pxReturn = pxGetNetworkBufferWithDescriptor( ( uint32_t ) lNeeded, 0u );
 800766a:	2100      	movs	r1, #0
 800766c:	f001 fb9e 	bl	8008dac <pxGetNetworkBufferWithDescriptor>
		if( pxReturn != NULL )
 8007670:	4682      	mov	sl, r0
 8007672:	2800      	cmp	r0, #0
 8007674:	d072      	beq.n	800775c <prvTCPPrepareSend+0x16c>
 8007676:	6980      	ldr	r0, [r0, #24]
			if( pxNetworkBuffer )
 8007678:	2f00      	cmp	r7, #0
 800767a:	d072      	beq.n	8007762 <prvTCPPrepareSend+0x172>
				memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800767c:	69fa      	ldr	r2, [r7, #28]
 800767e:	69b9      	ldr	r1, [r7, #24]
 8007680:	f001 fdf7 	bl	8009272 <memcpy>
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8007684:	4638      	mov	r0, r7
 8007686:	f001 fb6d 	bl	8008d64 <vReleaseNetworkBufferAndDescriptor>
				*ppxNetworkBuffer = pxNewBuffer;
 800768a:	f8cb a000 	str.w	sl, [fp]
				uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800768e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8007690:	9903      	ldr	r1, [sp, #12]
 8007692:	6903      	ldr	r3, [r0, #16]
 8007694:	6802      	ldr	r2, [r0, #0]
 8007696:	4419      	add	r1, r3
 8007698:	1a89      	subs	r1, r1, r2
	if ( uxCount >= pxBuffer->LENGTH )
 800769a:	428b      	cmp	r3, r1
 800769c:	d800      	bhi.n	80076a0 <prvTCPPrepareSend+0xb0>
		uxCount -= pxBuffer->LENGTH;
 800769e:	1ac9      	subs	r1, r1, r3
				pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 80076a0:	f8da 5018 	ldr.w	r5, [sl, #24]
				ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 80076a4:	2301      	movs	r3, #1
				pucSendData = pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80076a6:	f108 0236 	add.w	r2, r8, #54	; 0x36
				ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	442a      	add	r2, r5
 80076ae:	4633      	mov	r3, r6
 80076b0:	f7ff fd6a 	bl	8007188 <uxStreamBufferGet>
				if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 80076b4:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80076b8:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 80076bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80076c0:	045b      	lsls	r3, r3, #17
 80076c2:	0c5b      	lsrs	r3, r3, #17
 80076c4:	2b40      	cmp	r3, #64	; 0x40
 80076c6:	d11b      	bne.n	8007700 <prvTCPPrepareSend+0x110>
					ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 80076c8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 80076ca:	9903      	ldr	r1, [sp, #12]
 80076cc:	6893      	ldr	r3, [r2, #8]
 80076ce:	6912      	ldr	r2, [r2, #16]
 80076d0:	4413      	add	r3, r2
 80076d2:	1a5b      	subs	r3, r3, r1
	if ( uxCount >= pxBuffer->LENGTH )
 80076d4:	429a      	cmp	r2, r3
		uxCount -= pxBuffer->LENGTH;
 80076d6:	bf98      	it	ls
 80076d8:	1a9b      	subls	r3, r3, r2
					if( ulDistance == ulDataGot )
 80076da:	4298      	cmp	r0, r3
 80076dc:	d110      	bne.n	8007700 <prvTCPPrepareSend+0x110>
						pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 80076de:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80076e2:	f043 0301 	orr.w	r3, r3, #1
 80076e6:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
						pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 80076ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80076ee:	4433      	add	r3, r6
 80076f0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
						pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 80076f4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80076f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) )
 8007700:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8007704:	2b05      	cmp	r3, #5
 8007706:	d16a      	bne.n	80077de <prvTCPPrepareSend+0x1ee>
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8007708:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800770c:	0699      	lsls	r1, r3, #26
 800770e:	d51d      	bpl.n	800774c <prvTCPPrepareSend+0x15c>
			( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 8007710:	4648      	mov	r0, r9
 8007712:	f001 f952 	bl	80089ba <xTCPWindowTxDone>
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8007716:	b1c8      	cbz	r0, 800774c <prvTCPPrepareSend+0x15c>
			pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8007718:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800771c:	f36f 1345 	bfc	r3, #5, #1
 8007720:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 8007724:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007728:	f043 0301 	orr.w	r3, r3, #1
 800772c:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8007730:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8007734:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8007738:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800773c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8007740:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 8007744:	2106      	movs	r1, #6
 8007746:	4620      	mov	r0, r4
 8007748:	f7ff fec7 	bl	80074da <vTCPStateChange>
			if( pxSocket->u.xTCP.ucKeepRepCount > 3u )
 800774c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8007750:	2b03      	cmp	r3, #3
 8007752:	d91d      	bls.n	8007790 <prvTCPPrepareSend+0x1a0>
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8007754:	2108      	movs	r1, #8
 8007756:	4620      	mov	r0, r4
 8007758:	f7ff febf 	bl	80074da <vTCPStateChange>
				lDataLen = -1;
 800775c:	f04f 36ff 	mov.w	r6, #4294967295
 8007760:	e00c      	b.n	800777c <prvTCPPrepareSend+0x18c>
				memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8007762:	2246      	movs	r2, #70	; 0x46
 8007764:	f104 0182 	add.w	r1, r4, #130	; 0x82
 8007768:	f001 fd83 	bl	8009272 <memcpy>
 800776c:	e78d      	b.n	800768a <prvTCPPrepareSend+0x9a>
		pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800776e:	f108 0336 	add.w	r3, r8, #54	; 0x36
 8007772:	4433      	add	r3, r6
 8007774:	61fb      	str	r3, [r7, #28]
 8007776:	46ba      	mov	sl, r7
 8007778:	e787      	b.n	800768a <prvTCPPrepareSend+0x9a>
	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) )
 800777a:	d0c1      	beq.n	8007700 <prvTCPPrepareSend+0x110>
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800777c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007780:	079b      	lsls	r3, r3, #30
 8007782:	d12e      	bne.n	80077e2 <prvTCPPrepareSend+0x1f2>
}
 8007784:	4630      	mov	r0, r6
 8007786:	b005      	add	sp, #20
 8007788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lDataLen = 0;
 800778c:	461e      	mov	r6, r3
 800778e:	e7b7      	b.n	8007700 <prvTCPPrepareSend+0x110>
			if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 8007790:	bb3e      	cbnz	r6, 80077e2 <prvTCPPrepareSend+0x1f2>
 8007792:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007796:	07da      	lsls	r2, r3, #31
 8007798:	d4f0      	bmi.n	800777c <prvTCPPrepareSend+0x18c>
				TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastAliveTime;
 800779a:	f7fd f99d 	bl	8004ad8 <xTaskGetTickCount>
 800779e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
				if( pxSocket->u.xTCP.ucKeepRepCount )
 80077a0:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
				TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastAliveTime;
 80077a4:	1ac0      	subs	r0, r0, r3
				xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * configTICK_RATE_HZ );
 80077a6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80077aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80077ae:	2900      	cmp	r1, #0
 80077b0:	bf08      	it	eq
 80077b2:	4613      	moveq	r3, r2
				if( xAge > xMax )
 80077b4:	4283      	cmp	r3, r0
 80077b6:	d2e1      	bcs.n	800777c <prvTCPPrepareSend+0x18c>
					pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 80077b8:	f7fd f98e 	bl	8004ad8 <xTaskGetTickCount>
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 80077bc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
					pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 80077c0:	65e0      	str	r0, [r4, #92]	; 0x5c
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 80077c2:	f043 0302 	orr.w	r3, r3, #2
 80077c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500 ) );
 80077ca:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80077ce:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
					pxSocket->u.xTCP.ucKeepRepCount++;
 80077d2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80077d6:	3301      	adds	r3, #1
 80077d8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80077dc:	e7ce      	b.n	800777c <prvTCPPrepareSend+0x18c>
	if( ( lDataLen > 0 ) ||
 80077de:	2e00      	cmp	r6, #0
 80077e0:	d0cc      	beq.n	800777c <prvTCPPrepareSend+0x18c>
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
 80077e2:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80077e6:	f108 0214 	add.w	r2, r8, #20
 80077ea:	0092      	lsls	r2, r2, #2
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
 80077ec:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80077f0:	f885 202e 	strb.w	r2, [r5, #46]	; 0x2e
		if( lDataLen != 0l )
 80077f4:	b93e      	cbnz	r6, 8007806 <prvTCPPrepareSend+0x216>
		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
 80077f6:	f043 0310 	orr.w	r3, r3, #16
		lDataLen += ( int32_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 80077fa:	f108 0828 	add.w	r8, r8, #40	; 0x28
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_PSH;
 80077fe:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
		lDataLen += ( int32_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 8007802:	4446      	add	r6, r8
	return lDataLen;
 8007804:	e7be      	b.n	8007784 <prvTCPPrepareSend+0x194>
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_PSH;
 8007806:	f043 0318 	orr.w	r3, r3, #24
 800780a:	e7f6      	b.n	80077fa <prvTCPPrepareSend+0x20a>
 800780c:	08009790 	.word	0x08009790

08007810 <prvTCPSendRepeated>:
{
 8007810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007814:	4607      	mov	r7, r0
 8007816:	4688      	mov	r8, r1
 8007818:	2508      	movs	r5, #8
int32_t lResult = 0;
 800781a:	2400      	movs	r4, #0
		xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800781c:	2200      	movs	r2, #0
 800781e:	4641      	mov	r1, r8
 8007820:	4638      	mov	r0, r7
 8007822:	f7ff fee5 	bl	80075f0 <prvTCPPrepareSend>
		if( xSendLength <= 0 )
 8007826:	1e06      	subs	r6, r0, #0
 8007828:	dd08      	ble.n	800783c <prvTCPSendRepeated+0x2c>
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800782a:	4632      	mov	r2, r6
 800782c:	f8d8 1000 	ldr.w	r1, [r8]
 8007830:	4638      	mov	r0, r7
 8007832:	f7ff fd53 	bl	80072dc <prvTCPReturnPacket.constprop.4>
	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8007836:	3d01      	subs	r5, #1
		lResult += xSendLength;
 8007838:	4434      	add	r4, r6
	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800783a:	d1ef      	bne.n	800781c <prvTCPSendRepeated+0xc>
}
 800783c:	4620      	mov	r0, r4
 800783e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007844 <xTCPSocketCheck>:
{
 8007844:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 8007846:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
 800784a:	2b04      	cmp	r3, #4
{
 800784c:	4604      	mov	r4, r0
	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800784e:	d903      	bls.n	8007858 <xTCPSocketCheck+0x14>
 8007850:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007852:	b10b      	cbz	r3, 8007858 <xTCPSocketCheck+0x14>
		prvTCPAddTxData( pxSocket );
 8007854:	f7ff fe17 	bl	8007486 <prvTCPAddTxData>
		if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8007858:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800785a:	bb69      	cbnz	r1, 80078b8 <xTCPSocketCheck+0x74>
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 800785c:	f894 6053 	ldrb.w	r6, [r4, #83]	; 0x53
 8007860:	2e04      	cmp	r6, #4
 8007862:	d948      	bls.n	80078f6 <xTCPSocketCheck+0xb2>
		pxNetworkBuffer = NULL;
 8007864:	a904      	add	r1, sp, #16
 8007866:	2300      	movs	r3, #0
 8007868:	f841 3d08 	str.w	r3, [r1, #-8]!
		lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800786c:	4620      	mov	r0, r4
 800786e:	f7ff ffcf 	bl	8007810 <prvTCPSendRepeated>
		if( pxNetworkBuffer != NULL )
 8007872:	9802      	ldr	r0, [sp, #8]
 8007874:	b108      	cbz	r0, 800787a <xTCPSocketCheck+0x36>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8007876:	f001 fa75 	bl	8008d64 <vReleaseNetworkBufferAndDescriptor>
		prvTCPNextTimeout( pxSocket );
 800787a:	4620      	mov	r0, r4
 800787c:	f7ff fcf0 	bl	8007260 <prvTCPNextTimeout>
		switch( pxSocket->u.xTCP.ucTCPState )
 8007880:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 8007884:	2a08      	cmp	r2, #8
 8007886:	d805      	bhi.n	8007894 <xTCPSocketCheck+0x50>
 8007888:	2301      	movs	r3, #1
 800788a:	4093      	lsls	r3, r2
 800788c:	f240 1223 	movw	r2, #291	; 0x123
 8007890:	4213      	tst	r3, r2
 8007892:	d12b      	bne.n	80078ec <xTCPSocketCheck+0xa8>
			TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastActTime;
 8007894:	f7fd f920 	bl	8004ad8 <xTaskGetTickCount>
 8007898:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800789a:	1ac0      	subs	r0, r0, r3
			if( xAge > ( ipconfigTCP_HANG_PROTECTION_TIME * configTICK_RATE_HZ ) )
 800789c:	f247 5330 	movw	r3, #30000	; 0x7530
 80078a0:	4298      	cmp	r0, r3
 80078a2:	d907      	bls.n	80078b4 <xTCPSocketCheck+0x70>
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80078a4:	2108      	movs	r1, #8
 80078a6:	4620      	mov	r0, r4
 80078a8:	f7ff fe17 	bl	80074da <vTCPStateChange>
				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 80078ac:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80078b0:	075a      	lsls	r2, r3, #29
 80078b2:	d444      	bmi.n	800793e <xTCPSocketCheck+0xfa>
					xResult = -1;
 80078b4:	2001      	movs	r0, #1
 80078b6:	e01a      	b.n	80078ee <xTCPSocketCheck+0xaa>
			if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 80078b8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80078bc:	0698      	lsls	r0, r3, #26
 80078be:	d418      	bmi.n	80078f2 <xTCPSocketCheck+0xae>
				if( pxSocket->u.xTCP.ucTCPState != eCLOSED )
 80078c0:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 80078c4:	b11b      	cbz	r3, 80078ce <xTCPSocketCheck+0x8a>
					prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 80078c6:	2228      	movs	r2, #40	; 0x28
 80078c8:	4620      	mov	r0, r4
 80078ca:	f7ff fd07 	bl	80072dc <prvTCPReturnPacket.constprop.4>
				if( prvTCPNextTimeout( pxSocket ) > 1 )
 80078ce:	4620      	mov	r0, r4
 80078d0:	f7ff fcc6 	bl	8007260 <prvTCPNextTimeout>
 80078d4:	2801      	cmp	r0, #1
 80078d6:	bf94      	ite	ls
 80078d8:	2500      	movls	r5, #0
 80078da:	2501      	movhi	r5, #1
			if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80078dc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80078de:	b118      	cbz	r0, 80078e8 <xTCPSocketCheck+0xa4>
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80078e0:	f001 fa40 	bl	8008d64 <vReleaseNetworkBufferAndDescriptor>
				pxSocket->u.xTCP.pxAckMessage = NULL;
 80078e4:	2300      	movs	r3, #0
 80078e6:	67e3      	str	r3, [r4, #124]	; 0x7c
	if( xReady == pdFALSE )
 80078e8:	2d00      	cmp	r5, #0
 80078ea:	d0b7      	beq.n	800785c <xTCPSocketCheck+0x18>
BaseType_t xResult = 0;
 80078ec:	2000      	movs	r0, #0
}
 80078ee:	b004      	add	sp, #16
 80078f0:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReady = pdFALSE;
 80078f2:	2500      	movs	r5, #0
 80078f4:	e7f2      	b.n	80078dc <xTCPSocketCheck+0x98>
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 80078f6:	2e02      	cmp	r6, #2
 80078f8:	d1bf      	bne.n	800787a <xTCPSocketCheck+0x36>
		if( pxSocket->u.xTCP.ucRepCount >= 3u )
 80078fa:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d904      	bls.n	800790c <xTCPSocketCheck+0xc8>
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8007902:	2108      	movs	r1, #8
 8007904:	4620      	mov	r0, r4
 8007906:	f7ff fde8 	bl	80074da <vTCPStateChange>
 800790a:	e7b6      	b.n	800787a <xTCPSocketCheck+0x36>
		else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 800790c:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 8007910:	f015 0508 	ands.w	r5, r5, #8
 8007914:	d16f      	bne.n	80079f6 <xTCPSocketCheck+0x1b2>
 8007916:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 8007918:	a902      	add	r1, sp, #8
 800791a:	ba1b      	rev	r3, r3
 800791c:	a801      	add	r0, sp, #4
	ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800791e:	9301      	str	r3, [sp, #4]
	eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 8007920:	f7fd fde0 	bl	80054e4 <eARPGetCacheEntry>
	switch( eReturned )
 8007924:	2801      	cmp	r0, #1
 8007926:	d012      	beq.n	800794e <xTCPSocketCheck+0x10a>
		pxSocket->u.xTCP.ucRepCount++;
 8007928:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
		FreeRTOS_OutputARPRequest( ulRemoteIP );
 800792c:	9801      	ldr	r0, [sp, #4]
		pxSocket->u.xTCP.ucRepCount++;
 800792e:	3301      	adds	r3, #1
 8007930:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
		FreeRTOS_OutputARPRequest( ulRemoteIP );
 8007934:	f7fd fe44 	bl	80055c0 <FreeRTOS_OutputARPRequest>
 8007938:	e79f      	b.n	800787a <xTCPSocketCheck+0x36>
			uxWinSize >>= 1;
 800793a:	085b      	lsrs	r3, r3, #1
 800793c:	e06c      	b.n	8007a18 <xTCPSocketCheck+0x1d4>
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800793e:	071b      	lsls	r3, r3, #28
 8007940:	d402      	bmi.n	8007948 <xTCPSocketCheck+0x104>
						vSocketClose( pxSocket );
 8007942:	4620      	mov	r0, r4
 8007944:	f7ff f8d8 	bl	8006af8 <vSocketClose>
					xResult = -1;
 8007948:	f04f 30ff 	mov.w	r0, #4294967295
	return xResult;
 800794c:	e7cf      	b.n	80078ee <xTCPSocketCheck+0xaa>
		pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800794e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.ucRepCount = 0u;
 8007952:	f884 5052 	strb.w	r5, [r4, #82]	; 0x52
		pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8007956:	f043 0308 	orr.w	r3, r3, #8
 800795a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, '\0', sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800795e:	2246      	movs	r2, #70	; 0x46
 8007960:	4629      	mov	r1, r5
 8007962:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8007966:	f001 fca9 	bl	80092bc <memset>
		memcpy( &pxTCPPacket->xEthernetHeader.xSourceAddress, &xEthAddress, sizeof( xEthAddress ) );
 800796a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800796e:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
		pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8007972:	2308      	movs	r3, #8
 8007974:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
		pxIPHeader->ucVersionHeaderLength = 0x45u;
 8007978:	2345      	movs	r3, #69	; 0x45
 800797a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pxIPHeader->usLength = FreeRTOS_htons( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 800797e:	2338      	movs	r3, #56	; 0x38
 8007980:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8007984:	2380      	movs	r3, #128	; 0x80
 8007986:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
		pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 800798a:	2306      	movs	r3, #6
 800798c:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
		pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8007990:	4b36      	ldr	r3, [pc, #216]	; (8007a6c <xTCPSocketCheck+0x228>)
		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8007992:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
		pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800799a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		memcpy( &pxTCPPacket->xEthernetHeader.xSourceAddress, &xEthAddress, sizeof( xEthAddress ) );
 800799c:	9802      	ldr	r0, [sp, #8]
 800799e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80079a2:	ba1b      	rev	r3, r3
		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 80079a4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 80079a8:	0a13      	lsrs	r3, r2, #8
 80079aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 80079ae:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 80079b0:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 80079b4:	0a13      	lsrs	r3, r2, #8
 80079b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulNextInitialSequenceNumber;
 80079ba:	4a2d      	ldr	r2, [pc, #180]	; (8007a70 <xTCPSocketCheck+0x22c>)
		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 80079bc:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulNextInitialSequenceNumber;
 80079c0:	6813      	ldr	r3, [r2, #0]
 80079c2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		ulNextInitialSequenceNumber += 0x102UL;
 80079c6:	f503 7381 	add.w	r3, r3, #258	; 0x102
 80079ca:	6013      	str	r3, [r2, #0]
		pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50u;
 80079cc:	2350      	movs	r3, #80	; 0x50
 80079ce:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		prvSocketSetMSS( pxSocket );
 80079d2:	4620      	mov	r0, r4
		pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 80079d4:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
		pxIPHeader->usLength = FreeRTOS_htons( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 80079d8:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0ul;
 80079dc:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_SYN;
 80079e0:	f884 60b1 	strb.w	r6, [r4, #177]	; 0xb1
		prvSocketSetMSS( pxSocket );
 80079e4:	f7ff fc10 	bl	8007208 <prvSocketSetMSS>
		pxSocket->u.xTCP.ulRxCurWinSize = pxSocket->u.xTCP.usInitMSS;
 80079e8:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 80079ec:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		prvTCPCreateWindow( pxSocket );
 80079f0:	4620      	mov	r0, r4
 80079f2:	f7ff fc1f 	bl	8007234 <prvTCPCreateWindow>
uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 80079f6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
 80079fa:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) TCP_OPT_MSS;
 80079fe:	2302      	movs	r3, #2
 8007a00:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
 8007a04:	2304      	movs	r3, #4
 8007a06:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8007a0a:	0a13      	lsrs	r3, r2, #8
 8007a0c:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 8007a10:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8007a14:	4353      	muls	r3, r2
 8007a16:	2200      	movs	r2, #0
		while( uxWinSize > 0xfffful )
 8007a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a1c:	b2d1      	uxtb	r1, r2
 8007a1e:	f102 0201 	add.w	r2, r2, #1
 8007a22:	d28a      	bcs.n	800793a <xTCPSocketCheck+0xf6>
		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
 8007a24:	2301      	movs	r3, #1
 8007a26:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
			pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_NOOP;
 8007a2a:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
			pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
 8007a2e:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
			pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 8007a32:	2304      	movs	r3, #4
 8007a34:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
			pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
 8007a38:	2302      	movs	r3, #2
 8007a3a:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
			pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8007a3e:	2380      	movs	r3, #128	; 0x80
 8007a40:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
			pxSocket->u.xTCP.ucRepCount++;
 8007a44:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 8007a48:	f884 10c9 	strb.w	r1, [r4, #201]	; 0xc9
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 8007a4c:	2203      	movs	r2, #3
			pxSocket->u.xTCP.ucRepCount++;
 8007a4e:	3301      	adds	r3, #1
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 8007a50:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 8007a54:	f884 20be 	strb.w	r2, [r4, #190]	; 0xbe
		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 8007a58:	f884 10bf 	strb.w	r1, [r4, #191]	; 0xbf
			pxSocket->u.xTCP.ucRepCount++;
 8007a5c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
			prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8007a60:	2234      	movs	r2, #52	; 0x34
 8007a62:	2100      	movs	r1, #0
 8007a64:	4620      	mov	r0, r4
 8007a66:	f7ff fc39 	bl	80072dc <prvTCPReturnPacket.constprop.4>
 8007a6a:	e706      	b.n	800787a <xTCPSocketCheck+0x36>
 8007a6c:	200001b0 	.word	0x200001b0
 8007a70:	20004f20 	.word	0x20004f20

08007a74 <prvTCPHandleFin.isra.3>:
static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
 8007a74:	b538      	push	{r3, r4, r5, lr}
	if( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u )
 8007a76:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8007a7a:	f8d1 302a 	ldr.w	r3, [r1, #42]	; 0x2a
static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
 8007a7e:	4604      	mov	r4, r0
	if( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u )
 8007a80:	07d0      	lsls	r0, r2, #31
		pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1u;
 8007a82:	bf42      	ittt	mi
 8007a84:	f8d4 20f0 	ldrmi.w	r2, [r4, #240]	; 0xf0
 8007a88:	3201      	addmi	r2, #1
 8007a8a:	f8c4 20ec 	strmi.w	r2, [r4, #236]	; 0xec
	if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8007a8e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
 8007a92:	460d      	mov	r5, r1
	if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8007a94:	0651      	lsls	r1, r2, #25
 8007a96:	d418      	bmi.n	8007aca <prvTCPHandleFin.isra.3+0x56>
		pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8007a98:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8007a9c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8007aa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aa4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
	if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8007aa8:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8007aac:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007ab0:	f012 0f01 	tst.w	r2, #1
 8007ab4:	d120      	bne.n	8007af8 <prvTCPHandleFin.isra.3+0x84>
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8007ab6:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_FIN;
 8007aba:	2311      	movs	r3, #17
 8007abc:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
		vTCPStateChange( pxSocket, eLAST_ACK );
 8007ac0:	210a      	movs	r1, #10
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f7ff fd09 	bl	80074da <vTCPStateChange>
 8007ac8:	e020      	b.n	8007b0c <prvTCPHandleFin.isra.3+0x98>
uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8007aca:	0e1a      	lsrs	r2, r3, #24
 8007acc:	0219      	lsls	r1, r3, #8
 8007ace:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8007ad2:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8007ad6:	0a1b      	lsrs	r3, r3, #8
 8007ad8:	430a      	orrs	r2, r1
 8007ada:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007ade:	4313      	orrs	r3, r2
		if( ulAckNr == pxTCPWindow->tx.ulFINSequenceNumber + 1u )
 8007ae0:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8007ae4:	3201      	adds	r2, #1
 8007ae6:	4293      	cmp	r3, r2
			pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8007ae8:	bf02      	ittt	eq
 8007aea:	f894 3042 	ldrbeq.w	r3, [r4, #66]	; 0x42
 8007aee:	f043 0301 	orreq.w	r3, r3, #1
 8007af2:	f884 3042 	strbeq.w	r3, [r4, #66]	; 0x42
 8007af6:	e7d7      	b.n	8007aa8 <prvTCPHandleFin.isra.3+0x34>
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1u;
 8007af8:	3301      	adds	r3, #1
 8007afa:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 8007afe:	f994 3041 	ldrsb.w	r3, [r4, #65]	; 0x41
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	db12      	blt.n	8007b2c <prvTCPHandleFin.isra.3+0xb8>
			pxTCPHeader->ucTCPFlags = 0u;
 8007b06:	2300      	movs	r3, #0
 8007b08:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8007b0c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8007b10:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	if( pxTCPHeader->ucTCPFlags != 0u )
 8007b14:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 8007b18:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
 8007b1c:	b108      	cbz	r0, 8007b22 <prvTCPHandleFin.isra.3+0xae>
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 8007b1e:	f103 0028 	add.w	r0, r3, #40	; 0x28
	pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 8007b22:	3314      	adds	r3, #20
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
			if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 8007b2c:	0793      	lsls	r3, r2, #30
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 8007b2e:	bf54      	ite	pl
 8007b30:	2310      	movpl	r3, #16
				pxTCPHeader->ucTCPFlags = 0u;
 8007b32:	2300      	movmi	r3, #0
 8007b34:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8007b38:	2108      	movs	r1, #8
 8007b3a:	e7c2      	b.n	8007ac2 <prvTCPHandleFin.isra.3+0x4e>

08007b3c <xProcessReceivedTCPPacket>:
 *		prvTCPSendRepeated()
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC
*/
BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 8007b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b40:	b087      	sub	sp, #28
FreeRTOS_Socket_t *pxSocket;
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 8007b42:	6987      	ldr	r7, [r0, #24]
{
 8007b44:	9003      	str	r0, [sp, #12]
uint16_t ucTCPFlags = pxTCPPacket->xTCPHeader.ucTCPFlags;
uint32_t ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
uint16_t xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
uint32_t ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
uint16_t xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8007b46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
uint32_t ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8007b48:	f8d7 401a 	ldr.w	r4, [r7, #26]
uint16_t xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 8007b4c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
uint32_t ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 8007b4e:	f8d7 001e 	ldr.w	r0, [r7, #30]
uint16_t ucTCPFlags = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8007b52:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
uint16_t xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8007b56:	0a1a      	lsrs	r2, r3, #8
 8007b58:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
uint32_t ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8007b5c:	0e22      	lsrs	r2, r4, #24
 8007b5e:	ea42 6504 	orr.w	r5, r2, r4, lsl #24
 8007b62:	0222      	lsls	r2, r4, #8
 8007b64:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8007b68:	432a      	orrs	r2, r5
uint16_t xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 8007b6a:	0a0d      	lsrs	r5, r1, #8
 8007b6c:	ea45 2101 	orr.w	r1, r5, r1, lsl #8
uint32_t ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 8007b70:	ea4f 2e00 	mov.w	lr, r0, lsl #8
 8007b74:	0e05      	lsrs	r5, r0, #24
 8007b76:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
 8007b7a:	f40e 0e7f 	and.w	lr, lr, #16711680	; 0xff0000
uint32_t ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8007b7e:	0a24      	lsrs	r4, r4, #8
uint32_t ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 8007b80:	0a00      	lsrs	r0, r0, #8
 8007b82:	ea45 050e 	orr.w	r5, r5, lr
uint32_t ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8007b86:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
uint32_t ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 8007b8a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
BaseType_t xResult = pdPASS;

	/* Find the destination socket, and if not found: return a socket listing to
	the destination PORT. */
	pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 8007b8e:	4328      	orrs	r0, r5
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	4322      	orrs	r2, r4
 8007b94:	b289      	uxth	r1, r1
 8007b96:	f7ff f871 	bl	8006c7c <pxTCPSocketLookup>

	if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE ) )
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	b158      	cbz	r0, 8007bb6 <xProcessReceivedTCPPacket+0x7a>
 8007b9e:	f890 1053 	ldrb.w	r1, [r0, #83]	; 0x53
 8007ba2:	290b      	cmp	r1, #11
 8007ba4:	f200 83d6 	bhi.w	8008354 <xProcessReceivedTCPPacket+0x818>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	408b      	lsls	r3, r1
 8007bac:	f640 3281 	movw	r2, #2945	; 0xb81
 8007bb0:	4213      	tst	r3, r2
 8007bb2:	f000 83cf 	beq.w	8008354 <xProcessReceivedTCPPacket+0x818>
		the other party will get a ECONN error.  There are two exceptions:
		1) A packet that already has the RST flag set.
		2) A packet that only has the ACK flag set.
		A packet with only the ACK flag set might be the last ACK in
	 	a three-way hand-shake that closes a connection. */
		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
 8007bb6:	f006 031f 	and.w	r3, r6, #31
 8007bba:	2b10      	cmp	r3, #16
 8007bbc:	f040 83d5 	bne.w	800836a <xProcessReceivedTCPPacket+0x82e>
 8007bc0:	2400      	movs	r4, #0
 8007bc2:	e3d9      	b.n	8008378 <xProcessReceivedTCPPacket+0x83c>
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
FreeRTOS_Socket_t *pxReturn;

	/* A pure SYN (without ACK) has come in, create a new socket to answer
	it. */
	if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8007bc4:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
				pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 8007bc8:	f8dd 800c 	ldr.w	r8, [sp, #12]
	if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8007bcc:	f013 0608 	ands.w	r6, r3, #8
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 8007bd0:	f8d8 9018 	ldr.w	r9, [r8, #24]
	if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8007bd4:	f000 80fe 	beq.w	8007dd4 <xProcessReceivedTCPPacket+0x298>
	{
		/* The flag bReuseSocket indicates that the same instance of the
		listening socket should be used for the connection. */
		pxReturn = pxSocket;
		pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8007bd8:	f043 0304 	orr.w	r3, r3, #4
 8007bdc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8007be0:	656d      	str	r5, [r5, #84]	; 0x54
 8007be2:	462c      	mov	r4, r5
		}
	}

	if( pxReturn != NULL )
	{
		pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8007be4:	f8b9 2022 	ldrh.w	r2, [r9, #34]	; 0x22
		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
		pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulNextInitialSequenceNumber;
 8007be8:	4dcd      	ldr	r5, [pc, #820]	; (8007f20 <xProcessReceivedTCPPacket+0x3e4>)
		pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8007bea:	0a13      	lsrs	r3, r2, #8
 8007bec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007bf0:	87a3      	strh	r3, [r4, #60]	; 0x3c
		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8007bf2:	f8d9 301a 	ldr.w	r3, [r9, #26]
 8007bf6:	0e1a      	lsrs	r2, r3, #24
 8007bf8:	0219      	lsls	r1, r3, #8
 8007bfa:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8007bfe:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8007c02:	0a1b      	lsrs	r3, r3, #8
 8007c04:	430a      	orrs	r2, r1
 8007c06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	63a3      	str	r3, [r4, #56]	; 0x38
		pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulNextInitialSequenceNumber;
 8007c0e:	682b      	ldr	r3, [r5, #0]
 8007c10:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

		/* Here is the SYN action. */
		pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8007c14:	f8d9 3026 	ldr.w	r3, [r9, #38]	; 0x26
 8007c18:	0e1a      	lsrs	r2, r3, #24
 8007c1a:	0219      	lsls	r1, r3, #8
 8007c1c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8007c20:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8007c24:	0a1b      	lsrs	r3, r3, #8
 8007c26:	430a      	orrs	r2, r1
 8007c28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		prvSocketSetMSS( pxReturn );
 8007c32:	4620      	mov	r0, r4
 8007c34:	f7ff fae8 	bl	8007208 <prvSocketSetMSS>

		prvTCPCreateWindow( pxReturn );
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f7ff fafb 	bl	8007234 <prvTCPCreateWindow>

		/* It is recommended to increase the ISS for each new connection with a value of 0x102. */
		ulNextInitialSequenceNumber += INITIAL_SEQUENCE_NUMBER_INCREMENT;
 8007c3e:	682b      	ldr	r3, [r5, #0]

		vTCPStateChange( pxReturn, eSYN_FIRST );
 8007c40:	2103      	movs	r1, #3
		ulNextInitialSequenceNumber += INITIAL_SEQUENCE_NUMBER_INCREMENT;
 8007c42:	f503 7381 	add.w	r3, r3, #258	; 0x102
		vTCPStateChange( pxReturn, eSYN_FIRST );
 8007c46:	4620      	mov	r0, r4
		ulNextInitialSequenceNumber += INITIAL_SEQUENCE_NUMBER_INCREMENT;
 8007c48:	602b      	str	r3, [r5, #0]
		vTCPStateChange( pxReturn, eSYN_FIRST );
 8007c4a:	f7ff fc46 	bl	80074da <vTCPStateChange>

		/* Make a copy of the header up to the TCP header.  It is needed later
		on, whenever data must be sent to the peer. */
		memcpy( pxReturn->u.xTCP.xPacket.u.ucLastPacket, pxNetworkBuffer->pucEthernetBuffer, sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
 8007c4e:	2246      	movs	r2, #70	; 0x46
 8007c50:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8007c54:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8007c58:	f001 fb0b 	bl	8009272 <memcpy>
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 8007c5c:	f7fc ff3c 	bl	8004ad8 <xTaskGetTickCount>
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 8007c60:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 8007c64:	6620      	str	r0, [r4, #96]	; 0x60
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8007c66:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8007c6a:	f36f 0341 	bfc	r3, #1, #1
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 8007c6e:	f04f 0a00 	mov.w	sl, #0
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8007c72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 8007c76:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 8007c7a:	f7fc ff2d 	bl	8004ad8 <xTaskGetTickCount>
 8007c7e:	65e0      	str	r0, [r4, #92]	; 0x5c
		if( ( pxTCPPacket->xTCPHeader.ucTCPOffset & TCP_OFFSET_LENGTH_BITS ) > TCP_OFFSET_STANDARD_LENGTH )
 8007c80:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c88:	2b50      	cmp	r3, #80	; 0x50
 8007c8a:	f104 08dc 	add.w	r8, r4, #220	; 0xdc
 8007c8e:	d913      	bls.n	8007cb8 <xProcessReceivedTCPPacket+0x17c>
 8007c90:	9b03      	ldr	r3, [sp, #12]
 8007c92:	699b      	ldr	r3, [r3, #24]
	pucLast = pucPtr + (((pxTCPHeader->ucTCPOffset >> 4) - 5) << 2);
 8007c94:	f893 902e 	ldrb.w	r9, [r3, #46]	; 0x2e
 8007c98:	ea4f 1919 	mov.w	r9, r9, lsr #4
	pucPtr = pxTCPHeader->ucOptdata;
 8007c9c:	f103 0536 	add.w	r5, r3, #54	; 0x36
	pucLast = pucPtr + (((pxTCPHeader->ucTCPOffset >> 4) - 5) << 2);
 8007ca0:	f1a9 0905 	sub.w	r9, r9, #5
 8007ca4:	eb05 0989 	add.w	r9, r5, r9, lsl #2
									pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 8007ca8:	f240 2b02 	movw	fp, #514	; 0x202
	while( pucPtr < pucLast )
 8007cac:	45a9      	cmp	r9, r5
 8007cae:	d903      	bls.n	8007cb8 <xProcessReceivedTCPPacket+0x17c>
		if( pucPtr[ 0 ] == TCP_OPT_END )
 8007cb0:	782b      	ldrb	r3, [r5, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f040 80fd 	bne.w	8007eb2 <xProcessReceivedTCPPacket+0x376>
			pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usWindow );
 8007cb8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 8007cba:	f8dd b00c 	ldr.w	fp, [sp, #12]
			pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usWindow );
 8007cbe:	0a13      	lsrs	r3, r2, #8
 8007cc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8007cc4:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
			pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usWindow );
 8007cc8:	b29b      	uxth	r3, r3
				( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8007cca:	4093      	lsls	r3, r2
			pxSocket->u.xTCP.ulWindowSize =
 8007ccc:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 8007cd0:	f8db 6018 	ldr.w	r6, [fp, #24]
uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
 8007cd4:	f8d6 3026 	ldr.w	r3, [r6, #38]	; 0x26
    lTCPHeaderLength = ( BaseType_t ) ( ( pxTCPHeader->ucTCPOffset & VALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2 );
 8007cd8:	f896 502e 	ldrb.w	r5, [r6, #46]	; 0x2e
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8007cdc:	f896 a02f 	ldrb.w	sl, [r6, #47]	; 0x2f
uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
 8007ce0:	0e1f      	lsrs	r7, r3, #24
 8007ce2:	021a      	lsls	r2, r3, #8
    lTCPHeaderLength = ( BaseType_t ) ( ( pxTCPHeader->ucTCPOffset & VALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2 );
 8007ce4:	08ad      	lsrs	r5, r5, #2
 8007ce6:	f005 013c 	and.w	r1, r5, #60	; 0x3c
uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
 8007cea:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
	lLength =  ( int32_t )FreeRTOS_htons( pxTCPPacket->xIPHeader.usLength );
 8007cee:	8a35      	ldrh	r5, [r6, #16]
uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
 8007cf0:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8007cf4:	0a1b      	lsrs	r3, r3, #8
 8007cf6:	4317      	orrs	r7, r2
 8007cf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007cfc:	431f      	orrs	r7, r3
	lReceiveLength = ( ( int32_t ) pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 8007cfe:	f8db 201c 	ldr.w	r2, [fp, #28]
	lLength =  ( int32_t )FreeRTOS_htons( pxTCPPacket->xIPHeader.usLength );
 8007d02:	0a2b      	lsrs	r3, r5, #8
 8007d04:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8007d08:	b29d      	uxth	r5, r3
	lReceiveLength = ( ( int32_t ) pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 8007d0a:	3a0e      	subs	r2, #14
 8007d0c:	4295      	cmp	r5, r2
 8007d0e:	bfa8      	it	ge
 8007d10:	4615      	movge	r5, r2
	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER ) )
 8007d12:	f101 0314 	add.w	r3, r1, #20
	*ppucRecvData = pxNetworkBuffer->pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + lTCPHeaderLength;
 8007d16:	f101 0922 	add.w	r9, r1, #34	; 0x22
	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER ) )
 8007d1a:	429d      	cmp	r5, r3
	*ppucRecvData = pxNetworkBuffer->pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + lTCPHeaderLength;
 8007d1c:	44b1      	add	r9, r6
	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER ) )
 8007d1e:	f300 813c 	bgt.w	8007f9a <xProcessReceivedTCPPacket+0x45e>
		lReceiveLength = 0;
 8007d22:	2500      	movs	r5, #0
	if( ( pxTCPHeader->ucTCPFlags & ipTCP_FLAG_URG ) != 0u )
 8007d24:	f01a 0f20 	tst.w	sl, #32
 8007d28:	d009      	beq.n	8007d3e <xProcessReceivedTCPPacket+0x202>
		lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 8007d2a:	8eb2      	ldrh	r2, [r6, #52]	; 0x34
 8007d2c:	0a13      	lsrs	r3, r2, #8
 8007d2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007d32:	b29b      	uxth	r3, r3
		lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 8007d34:	42ab      	cmp	r3, r5
		*ppucRecvData += lUrgentLength;
 8007d36:	4499      	add	r9, r3
		lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 8007d38:	bfd4      	ite	le
 8007d3a:	1aed      	suble	r5, r5, r3
 8007d3c:	1b6d      	subgt	r5, r5, r5
	if( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED )
 8007d3e:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 8007d42:	2a04      	cmp	r2, #4
 8007d44:	d90a      	bls.n	8007d5c <xProcessReceivedTCPPacket+0x220>
		if ( pxTCPWindow->rx.ulCurrentSequenceNumber == ulSequenceNumber + 1u )
 8007d46:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 8007d4a:	1c7b      	adds	r3, r7, #1
 8007d4c:	4299      	cmp	r1, r3
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8007d4e:	bf02      	ittt	eq
 8007d50:	f894 3041 	ldrbeq.w	r3, [r4, #65]	; 0x41
 8007d54:	f043 0301 	orreq.w	r3, r3, #1
 8007d58:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
	if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0 )
 8007d5c:	197b      	adds	r3, r7, r5
 8007d5e:	9302      	str	r3, [sp, #8]
 8007d60:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8007d64:	1979      	adds	r1, r7, r5
 8007d66:	1acb      	subs	r3, r1, r3
 8007d68:	2b00      	cmp	r3, #0
		pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8007d6a:	bfc4      	itt	gt
 8007d6c:	460b      	movgt	r3, r1
 8007d6e:	f8c4 30f4 	strgt.w	r3, [r4, #244]	; 0xf4
	if( ( ulReceiveLength > 0u ) && ( pxSocket->u.xTCP.ucTCPState >= eSYN_RECEIVED ) )
 8007d72:	2d00      	cmp	r5, #0
 8007d74:	f000 8115 	beq.w	8007fa2 <xProcessReceivedTCPPacket+0x466>
 8007d78:	2a03      	cmp	r2, #3
 8007d7a:	f240 8112 	bls.w	8007fa2 <xProcessReceivedTCPPacket+0x466>
		if ( pxSocket->u.xTCP.rxStream )
 8007d7e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007d80:	2a00      	cmp	r2, #0
 8007d82:	f000 810c 	beq.w	8007f9e <xProcessReceivedTCPPacket+0x462>
size_t uxHead = pxBuffer->uxHead;
 8007d86:	6891      	ldr	r1, [r2, #8]
size_t uxTail = pxBuffer->uxTail;
 8007d88:	6813      	ldr	r3, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 8007d8a:	6912      	ldr	r2, [r2, #16]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	1a5b      	subs	r3, r3, r1
	if( uxCount >= pxBuffer->LENGTH )
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d800      	bhi.n	8007d98 <xProcessReceivedTCPPacket+0x25c>
		uxCount -= pxBuffer->LENGTH;
 8007d96:	1a9b      	subs	r3, r3, r2
		lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 8007d98:	4639      	mov	r1, r7
 8007d9a:	462a      	mov	r2, r5
 8007d9c:	4640      	mov	r0, r8
 8007d9e:	f000 fd2d 	bl	80087fc <lTCPWindowRxCheck>
		if( lOffset >= 0 )
 8007da2:	1e01      	subs	r1, r0, #0
 8007da4:	f2c0 82ec 	blt.w	8008380 <xProcessReceivedTCPPacket+0x844>
			lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 8007da8:	462b      	mov	r3, r5
 8007daa:	464a      	mov	r2, r9
 8007dac:	4620      	mov	r0, r4
 8007dae:	f7fe ff85 	bl	8006cbc <lTCPAddRxdata>
			if( lStored != ( int32_t ) ulReceiveLength )
 8007db2:	4285      	cmp	r5, r0
 8007db4:	f000 82e4 	beq.w	8008380 <xProcessReceivedTCPPacket+0x844>
				prvTCPSendReset( pxNetworkBuffer );
 8007db8:	4658      	mov	r0, fp
 8007dba:	f7ff fb55 	bl	8007468 <prvTCPSendReset>
		if( pxNetworkBuffer != NULL )
 8007dbe:	9803      	ldr	r0, [sp, #12]
 8007dc0:	b118      	cbz	r0, 8007dca <xProcessReceivedTCPPacket+0x28e>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8007dc2:	f000 ffcf 	bl	8008d64 <vReleaseNetworkBufferAndDescriptor>
			pxNetworkBuffer = NULL;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	9303      	str	r3, [sp, #12]
		prvTCPNextTimeout ( pxSocket );
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f7ff fa48 	bl	8007260 <prvTCPNextTimeout>
		xResult = pdPASS;
 8007dd0:	2401      	movs	r4, #1
	return xResult;
 8007dd2:	e2d1      	b.n	8008378 <xProcessReceivedTCPPacket+0x83c>
		if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8007dd4:	f8b5 204e 	ldrh.w	r2, [r5, #78]	; 0x4e
 8007dd8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d303      	bcc.n	8007de8 <xProcessReceivedTCPPacket+0x2ac>
				prvTCPSendReset( pxNetworkBuffer );
 8007de0:	4640      	mov	r0, r8
 8007de2:	f7ff fb41 	bl	8007468 <prvTCPSendReset>
 8007de6:	e6eb      	b.n	8007bc0 <xProcessReceivedTCPPacket+0x84>
			FreeRTOS_Socket_t *pxNewSocket = (FreeRTOS_Socket_t *)
 8007de8:	2206      	movs	r2, #6
 8007dea:	f7fe fc79 	bl	80066e0 <FreeRTOS_socket>
			if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8007dee:	1e43      	subs	r3, r0, #1
 8007df0:	3303      	adds	r3, #3
			FreeRTOS_Socket_t *pxNewSocket = (FreeRTOS_Socket_t *)
 8007df2:	4604      	mov	r4, r0
			if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8007df4:	d8f4      	bhi.n	8007de0 <xProcessReceivedTCPPacket+0x2a4>
 */
static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t *pxNewSocket, FreeRTOS_Socket_t *pxSocket )
{
struct freertos_sockaddr xAddress;

	pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 8007df6:	69eb      	ldr	r3, [r5, #28]
 8007df8:	61c3      	str	r3, [r0, #28]
	pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 8007dfa:	6a2b      	ldr	r3, [r5, #32]
 8007dfc:	6203      	str	r3, [r0, #32]
	pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 8007dfe:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8007e02:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
	pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 8007e06:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8007e08:	66c3      	str	r3, [r0, #108]	; 0x6c
	pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 8007e0a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007e0c:	6703      	str	r3, [r0, #112]	; 0x70
	pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 8007e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e10:	6643      	str	r3, [r0, #100]	; 0x64
	pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 8007e12:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8007e14:	6683      	str	r3, [r0, #104]	; 0x68
	pxNewSocket->u.xTCP.uxRxWinSize  = pxSocket->u.xTCP.uxRxWinSize;
 8007e16:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
 8007e1a:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
	pxNewSocket->u.xTCP.uxTxWinSize  = pxSocket->u.xTCP.uxTxWinSize;
 8007e1e:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 8007e22:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		/* Child socket of listening sockets will inherit the Socket Set
		Otherwise the owner has no chance of including it into the set. */
		if( pxSocket->pxSocketSet )
 8007e26:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007e28:	b123      	cbz	r3, 8007e34 <xProcessReceivedTCPPacket+0x2f8>
		{
			pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 8007e2a:	6283      	str	r3, [r0, #40]	; 0x28
			pxNewSocket->xSelectBits = pxSocket->xSelectBits | eSELECT_READ | eSELECT_EXCEPT;
 8007e2c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007e2e:	f043 0305 	orr.w	r3, r3, #5
 8007e32:	62c3      	str	r3, [r0, #44]	; 0x2c
		}
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	/* And bind it to the same local port as its parent. */
	xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 8007e34:	4b3b      	ldr	r3, [pc, #236]	; (8007f24 <xProcessReceivedTCPPacket+0x3e8>)
	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 8007e36:	8caa      	ldrh	r2, [r5, #36]	; 0x24
	xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	9305      	str	r3, [sp, #20]
	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 8007e3c:	0a13      	lsrs	r3, r2, #8
 8007e3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007e42:	f8ad 3012 	strh.w	r3, [sp, #18]
		orphan temporarily.  Once this socket is really connected, the owner of
		the server socket will be notified. */

		/* When bPassQueued is true, the socket is an orphan until it gets
		connected. */
		pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8007e46:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
		pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 8007e4a:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8007e4c:	f043 0304 	orr.w	r3, r3, #4
 8007e50:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
		}
	}
	#endif

	pxSocket->u.xTCP.usChildCount++;
 8007e54:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
 8007e58:	3301      	adds	r3, #1
 8007e5a:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
		pxSocket->u.xTCP.usChildCount,
		pxSocket->u.xTCP.usBacklog,
		pxSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );

	/* Now bind the child socket to the same port as the listening socket. */
	if( vSocketBind ( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 8007e5e:	2208      	movs	r2, #8
 8007e60:	2301      	movs	r3, #1
 8007e62:	a904      	add	r1, sp, #16
 8007e64:	4620      	mov	r0, r4
 8007e66:	f7fe fdcd 	bl	8006a04 <vSocketBind>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	f43f aeba 	beq.w	8007be4 <xProcessReceivedTCPPacket+0xa8>
	{
		FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
		vSocketClose( pxNewSocket );
 8007e70:	4620      	mov	r0, r4
 8007e72:	f7fe fe41 	bl	8006af8 <vSocketClose>
 8007e76:	e6a3      	b.n	8007bc0 <xProcessReceivedTCPPacket+0x84>
			if( ( ucTCPFlags & ipTCP_FLAG_RST ) != 0u )
 8007e78:	0770      	lsls	r0, r6, #29
 8007e7a:	d504      	bpl.n	8007e86 <xProcessReceivedTCPPacket+0x34a>
				vTCPStateChange( pxSocket, eCLOSED );
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f7ff fb2b 	bl	80074da <vTCPStateChange>
 8007e84:	e278      	b.n	8008378 <xProcessReceivedTCPPacket+0x83c>
			else if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) )
 8007e86:	f006 041f 	and.w	r4, r6, #31
 8007e8a:	2c02      	cmp	r4, #2
 8007e8c:	d102      	bne.n	8007e94 <xProcessReceivedTCPPacket+0x358>
 8007e8e:	2904      	cmp	r1, #4
 8007e90:	f63f ae96 	bhi.w	8007bc0 <xProcessReceivedTCPPacket+0x84>
				memcpy( pxSocket->u.xTCP.xPacket.u.ucLastPacket + lOffset, pxNetworkBuffer->pucEthernetBuffer + lOffset, ipSIZE_OF_TCP_HEADER );
 8007e94:	9b03      	ldr	r3, [sp, #12]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	f105 01a4 	add.w	r1, r5, #164	; 0xa4
 8007e9c:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8007ea0:	3336      	adds	r3, #54	; 0x36
 8007ea2:	f852 0b04 	ldr.w	r0, [r2], #4
 8007ea6:	f841 0b04 	str.w	r0, [r1], #4
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d1f9      	bne.n	8007ea2 <xProcessReceivedTCPPacket+0x366>
 8007eae:	462c      	mov	r4, r5
 8007eb0:	e6d4      	b.n	8007c5c <xProcessReceivedTCPPacket+0x120>
		if( pucPtr[ 0 ] == TCP_OPT_NOOP)
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d101      	bne.n	8007eba <xProcessReceivedTCPPacket+0x37e>
			pucPtr++;
 8007eb6:	3501      	adds	r5, #1
 8007eb8:	e6f8      	b.n	8007cac <xProcessReceivedTCPPacket+0x170>
		else if( ( pucPtr[ 0 ] == TCP_OPT_WSOPT ) && ( pucPtr[ 1 ] == TCP_OPT_WSOPT_LEN ) )
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	786e      	ldrb	r6, [r5, #1]
 8007ebe:	d10c      	bne.n	8007eda <xProcessReceivedTCPPacket+0x39e>
 8007ec0:	2e03      	cmp	r6, #3
 8007ec2:	d131      	bne.n	8007f28 <xProcessReceivedTCPPacket+0x3ec>
			pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 8007ec4:	78ab      	ldrb	r3, [r5, #2]
 8007ec6:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
			pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 8007eca:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8007ece:	f043 0310 	orr.w	r3, r3, #16
 8007ed2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			pucPtr += TCP_OPT_WSOPT_LEN;
 8007ed6:	3503      	adds	r5, #3
 8007ed8:	e6e8      	b.n	8007cac <xProcessReceivedTCPPacket+0x170>
		else if( ( pucPtr[ 0 ] == TCP_OPT_MSS ) && ( pucPtr[ 1 ] == TCP_OPT_MSS_LEN ) )
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d124      	bne.n	8007f28 <xProcessReceivedTCPPacket+0x3ec>
 8007ede:	2e04      	cmp	r6, #4
 8007ee0:	d122      	bne.n	8007f28 <xProcessReceivedTCPPacket+0x3ec>
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 8007ee2:	78aa      	ldrb	r2, [r5, #2]
			  ( ( ( uint32_t )apChr[1] ) ) );
 8007ee4:	78eb      	ldrb	r3, [r5, #3]
	return ( uint16_t )
 8007ee6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
 8007eea:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
			if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d214      	bcs.n	8007f1c <xProcessReceivedTCPPacket+0x3e0>
				pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 8007ef2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
				pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 8007ef6:	f8a4 319a 	strh.w	r3, [r4, #410]	; 0x19a
				pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 8007efa:	f042 0201 	orr.w	r2, r2, #1
 8007efe:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
				pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 8007f02:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8007f06:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f0a:	435a      	muls	r2, r3
 8007f0c:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
				pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 8007f10:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
				pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 8007f14:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
				pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 8007f18:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
				pucPtr += TCP_OPT_MSS_LEN;
 8007f1c:	3504      	adds	r5, #4
 8007f1e:	e6c5      	b.n	8007cac <xProcessReceivedTCPPacket+0x170>
 8007f20:	20004f20 	.word	0x20004f20
 8007f24:	200001b0 	.word	0x200001b0
			if( len == 0 )
 8007f28:	2e00      	cmp	r6, #0
 8007f2a:	f43f aec5 	beq.w	8007cb8 <xProcessReceivedTCPPacket+0x17c>
				if( pucPtr[0] == TCP_OPT_SACK_A )
 8007f2e:	2b05      	cmp	r3, #5
 8007f30:	d103      	bne.n	8007f3a <xProcessReceivedTCPPacket+0x3fe>
					len -= 2;
 8007f32:	3e02      	subs	r6, #2
					pucPtr += 2;
 8007f34:	3502      	adds	r5, #2
					while( len >= 8 )
 8007f36:	2e07      	cmp	r6, #7
 8007f38:	dc01      	bgt.n	8007f3e <xProcessReceivedTCPPacket+0x402>
			pucPtr += len;
 8007f3a:	4435      	add	r5, r6
 8007f3c:	e6b6      	b.n	8007cac <xProcessReceivedTCPPacket+0x170>
			( ( ( uint32_t )apChr[1] ) << 16) |
 8007f3e:	796a      	ldrb	r2, [r5, #5]
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 8007f40:	792b      	ldrb	r3, [r5, #4]
 8007f42:	7829      	ldrb	r1, [r5, #0]
			( ( ( uint32_t )apChr[2] ) << 8) |
 8007f44:	79a8      	ldrb	r0, [r5, #6]
			( ( ( uint32_t )apChr[1] ) << 16) |
 8007f46:	0412      	lsls	r2, r2, #16
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 8007f48:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
			( ( ( uint32_t )apChr[3] ) );
 8007f4c:	79eb      	ldrb	r3, [r5, #7]
			( ( ( uint32_t )apChr[2] ) << 8) |
 8007f4e:	431a      	orrs	r2, r3
			( ( ( uint32_t )apChr[1] ) << 16) |
 8007f50:	786b      	ldrb	r3, [r5, #1]
 8007f52:	041b      	lsls	r3, r3, #16
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 8007f54:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
			( ( ( uint32_t )apChr[3] ) );
 8007f58:	78e9      	ldrb	r1, [r5, #3]
			( ( ( uint32_t )apChr[2] ) << 8) |
 8007f5a:	430b      	orrs	r3, r1
 8007f5c:	78a9      	ldrb	r1, [r5, #2]
					uint32_t ulCount = ulTCPWindowTxSack( &pxSocket->u.xTCP.xTCPWindow, ulFirst, ulLast );
 8007f5e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007f62:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8007f66:	4640      	mov	r0, r8
 8007f68:	f000 fde0 	bl	8008b2c <ulTCPWindowTxSack>
 8007f6c:	4603      	mov	r3, r0
						if( ( pxSocket->u.xTCP.txStream  != NULL ) && ( ulCount > 0 ) )
 8007f6e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007f70:	b180      	cbz	r0, 8007f94 <xProcessReceivedTCPPacket+0x458>
 8007f72:	b17b      	cbz	r3, 8007f94 <xProcessReceivedTCPPacket+0x458>
							uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 8007f74:	2200      	movs	r2, #0
 8007f76:	4611      	mov	r1, r2
 8007f78:	f8cd a000 	str.w	sl, [sp]
 8007f7c:	f7ff f904 	bl	8007188 <uxStreamBufferGet>
							pxSocket->xEventBits |= eSOCKET_SEND;
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	f043 0202 	orr.w	r2, r3, #2
 8007f86:	6022      	str	r2, [r4, #0]
								if( pxSocket->xSelectBits & eSELECT_WRITE )
 8007f88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007f8a:	0792      	lsls	r2, r2, #30
									pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 8007f8c:	bf44      	itt	mi
 8007f8e:	ea43 030b 	orrmi.w	r3, r3, fp
 8007f92:	6023      	strmi	r3, [r4, #0]
						pucPtr += 8;
 8007f94:	3508      	adds	r5, #8
						len -= 8;
 8007f96:	3e08      	subs	r6, #8
 8007f98:	e7cd      	b.n	8007f36 <xProcessReceivedTCPPacket+0x3fa>
		lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER );
 8007f9a:	1aed      	subs	r5, r5, r3
 8007f9c:	e6c2      	b.n	8007d24 <xProcessReceivedTCPPacket+0x1e8>
			ulSpace = ( uint32_t )pxSocket->u.xTCP.uxRxStreamSize;
 8007f9e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007fa0:	e6fa      	b.n	8007d98 <xProcessReceivedTCPPacket+0x25c>
		pxTCPWindow->ucOptionLength = 0u;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 8007fa8:	e1f5      	b.n	8008396 <xProcessReceivedTCPPacket+0x85a>
	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 8007faa:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	f240 8206 	bls.w	80083c0 <xProcessReceivedTCPPacket+0x884>
 8007fb4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007fb8:	07d8      	lsls	r0, r3, #31
 8007fba:	f140 8201 	bpl.w	80083c0 <xProcessReceivedTCPPacket+0x884>
		pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 8007fbe:	f369 0300 	bfi	r3, r9, #0, #1
 8007fc2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		pxTCPHeader->ucOptdata[ 1 ] = TCP_OPT_MSS_LEN;
 8007fc6:	f04f 0904 	mov.w	r9, #4
		pxTCPHeader->ucOptdata[ 0 ] = TCP_OPT_MSS;
 8007fca:	2302      	movs	r3, #2
 8007fcc:	f88b 3036 	strb.w	r3, [fp, #54]	; 0x36
		pxTCPHeader->ucOptdata[ 1 ] = TCP_OPT_MSS_LEN;
 8007fd0:	f88b 9037 	strb.w	r9, [fp, #55]	; 0x37
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 8007fd4:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffu );
 8007fd8:	f88b 3039 	strb.w	r3, [fp, #57]	; 0x39
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 8007fdc:	0a1a      	lsrs	r2, r3, #8
 8007fde:	f88b 2038 	strb.w	r2, [fp, #56]	; 0x38
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8007fe2:	2360      	movs	r3, #96	; 0x60
 8007fe4:	e1ea      	b.n	80083bc <xProcessReceivedTCPPacket+0x880>
uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 8007fe6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
 8007fea:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) TCP_OPT_MSS;
 8007fee:	2302      	movs	r3, #2
 8007ff0:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
 8007ff4:	2304      	movs	r3, #4
 8007ff6:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8007ffa:	0a13      	lsrs	r3, r2, #8
 8007ffc:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 8008000:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8008004:	4353      	muls	r3, r2
 8008006:	2200      	movs	r2, #0
		while( uxWinSize > 0xfffful )
 8008008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800800c:	b2d1      	uxtb	r1, r2
 800800e:	f102 0201 	add.w	r2, r2, #1
 8008012:	d27e      	bcs.n	8008112 <xProcessReceivedTCPPacket+0x5d6>
		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
 8008014:	2301      	movs	r3, #1
		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 8008016:	f884 10c9 	strb.w	r1, [r4, #201]	; 0xc9
		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
 800801a:	f886 303a 	strb.w	r3, [r6, #58]	; 0x3a
			pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_NOOP;
 800801e:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
			pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
 8008022:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
			pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
 8008026:	2302      	movs	r3, #2
 8008028:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_SYN | ipTCP_FLAG_ACK;
 800802c:	2312      	movs	r3, #18
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 800802e:	2203      	movs	r2, #3
		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 8008030:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_SYN | ipTCP_FLAG_ACK;
 8008034:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
			pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 8008038:	2104      	movs	r1, #4
				pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800803a:	2380      	movs	r3, #128	; 0x80
 800803c:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 8008040:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 8008044:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
			pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 8008048:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
				vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800804c:	4620      	mov	r0, r4
 800804e:	f7ff fa44 	bl	80074da <vTCPStateChange>
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u; /* because we send a TCP_SYN. */
 8008052:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
				pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 8008056:	3701      	adds	r7, #1
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u; /* because we send a TCP_SYN. */
 8008058:	3301      	adds	r3, #1
				pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 800805a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
 800805e:	f8c4 70ec 	str.w	r7, [r4, #236]	; 0xec
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u; /* because we send a TCP_SYN. */
 8008062:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8008066:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
				xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800806a:	2634      	movs	r6, #52	; 0x34
									 ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800806c:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 8008070:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 8008074:	9903      	ldr	r1, [sp, #12]
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 8008076:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
	if( pxSocket->u.xTCP.rxStream != NULL )
 800807a:	6f62      	ldr	r2, [r4, #116]	; 0x74
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800807c:	f8d1 e018 	ldr.w	lr, [r1, #24]
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 8008080:	443b      	add	r3, r7
 8008082:	1a18      	subs	r0, r3, r0
	if( pxSocket->u.xTCP.rxStream != NULL )
 8008084:	2a00      	cmp	r2, #0
 8008086:	f000 814e 	beq.w	8008326 <xProcessReceivedTCPPacket+0x7ea>
size_t uxFront = pxBuffer->uxFront;
 800808a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
size_t uxTail = pxBuffer->uxTail;
 800808e:	6813      	ldr	r3, [r2, #0]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 8008090:	6912      	ldr	r2, [r2, #16]
 8008092:	4413      	add	r3, r2
 8008094:	3b01      	subs	r3, #1
 8008096:	eba3 030c 	sub.w	r3, r3, ip
	if( uxCount >= pxBuffer->LENGTH )
 800809a:	429a      	cmp	r2, r3
 800809c:	d800      	bhi.n	80080a0 <xProcessReceivedTCPPacket+0x564>
		uxCount -= pxBuffer->LENGTH;
 800809e:	1a9b      	subs	r3, r3, r2
	pxSocket->u.xTCP.ulRxCurWinSize = FreeRTOS_min_uint32( ulFrontSpace, pxSocket->u.xTCP.ulRxCurWinSize );
 80080a0:	4298      	cmp	r0, r3
 80080a2:	bf94      	ite	ls
 80080a4:	f8c4 00d0 	strls.w	r0, [r4, #208]	; 0xd0
 80080a8:	f8c4 30d0 	strhi.w	r3, [r4, #208]	; 0xd0
 80080ac:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
		if( ( ulReceiveLength > 0 ) &&							/* Data was sent to this socket. */
 80080ae:	2d00      	cmp	r5, #0
 80080b0:	f000 813d 	beq.w	800832e <xProcessReceivedTCPPacket+0x7f2>
	lRxSpace = (int32_t)( pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber );
 80080b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80080b6:	1bdf      	subs	r7, r3, r7
			lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 80080b8:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
		if( ( ulReceiveLength > 0 ) &&							/* Data was sent to this socket. */
 80080bc:	ebb7 0f43 	cmp.w	r7, r3, lsl #1
 80080c0:	f2c0 8135 	blt.w	800832e <xProcessReceivedTCPPacket+0x7f2>
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 80080c4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
 80080c8:	065b      	lsls	r3, r3, #25
 80080ca:	f100 8130 	bmi.w	800832e <xProcessReceivedTCPPacket+0x7f2>
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 80080ce:	2e28      	cmp	r6, #40	; 0x28
 80080d0:	f040 812d 	bne.w	800832e <xProcessReceivedTCPPacket+0x7f2>
			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
 80080d4:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 80080d8:	2b05      	cmp	r3, #5
 80080da:	f040 8128 	bne.w	800832e <xProcessReceivedTCPPacket+0x7f2>
			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 80080de:	f89e 302f 	ldrb.w	r3, [lr, #47]	; 0x2f
 80080e2:	2b10      	cmp	r3, #16
 80080e4:	f040 8123 	bne.w	800832e <xProcessReceivedTCPPacket+0x7f2>
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 80080e8:	4281      	cmp	r1, r0
 80080ea:	d004      	beq.n	80080f6 <xProcessReceivedTCPPacket+0x5ba>
				if( pxSocket->u.xTCP.pxAckMessage != 0 )
 80080ec:	b108      	cbz	r0, 80080f2 <xProcessReceivedTCPPacket+0x5b6>
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80080ee:	f000 fe39 	bl	8008d64 <vReleaseNetworkBufferAndDescriptor>
				pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 80080f2:	9b03      	ldr	r3, [sp, #12]
 80080f4:	67e3      	str	r3, [r4, #124]	; 0x7c
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 80080f6:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80080fa:	429d      	cmp	r5, r3
 80080fc:	d303      	bcc.n	8008106 <xProcessReceivedTCPPacket+0x5ca>
 80080fe:	ebb7 0f43 	cmp.w	r7, r3, lsl #1
 8008102:	f280 8112 	bge.w	800832a <xProcessReceivedTCPPacket+0x7ee>
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_SHORT_DELAY_MS );
 8008106:	2302      	movs	r3, #2
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_LONGER_DELAY_MS );
 8008108:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
			*ppxNetworkBuffer = NULL;
 800810c:	2300      	movs	r3, #0
 800810e:	9303      	str	r3, [sp, #12]
 8008110:	e655      	b.n	8007dbe <xProcessReceivedTCPPacket+0x282>
			uxWinSize >>= 1;
 8008112:	085b      	lsrs	r3, r3, #1
 8008114:	e778      	b.n	8008008 <xProcessReceivedTCPPacket+0x4cc>
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 8008116:	9b03      	ldr	r3, [sp, #12]
 8008118:	699f      	ldr	r7, [r3, #24]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800811a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
		usExpect |= ( uint16_t ) ipTCP_FLAG_SYN;
 800811e:	2a02      	cmp	r2, #2
 8008120:	bf14      	ite	ne
 8008122:	2110      	movne	r1, #16
 8008124:	2112      	moveq	r1, #18
	if( ( ucTCPFlags & 0x17u ) != usExpect )
 8008126:	f003 0317 	and.w	r3, r3, #23
 800812a:	428b      	cmp	r3, r1
 800812c:	d012      	beq.n	8008154 <xProcessReceivedTCPPacket+0x618>
		vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800812e:	2108      	movs	r1, #8
 8008130:	4620      	mov	r0, r4
 8008132:	f7ff f9d2 	bl	80074da <vTCPStateChange>
		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
 8008136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800813a:	f109 0628 	add.w	r6, r9, #40	; 0x28
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800813e:	f109 0914 	add.w	r9, r9, #20
		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
 8008142:	f043 0304 	orr.w	r3, r3, #4
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8008146:	ea4f 0989 	mov.w	r9, r9, lsl #2
		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
 800814a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800814e:	f887 902e 	strb.w	r9, [r7, #46]	; 0x2e
 8008152:	e78b      	b.n	800806c <xProcessReceivedTCPPacket+0x530>
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8008154:	f8d7 3026 	ldr.w	r3, [r7, #38]	; 0x26
 8008158:	0e1e      	lsrs	r6, r3, #24
 800815a:	0219      	lsls	r1, r3, #8
 800815c:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 8008160:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8008164:	0a1b      	lsrs	r3, r3, #8
 8008166:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800816a:	430e      	orrs	r6, r1
 800816c:	431e      	orrs	r6, r3
		pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800816e:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8008170:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
		if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 8008174:	2a02      	cmp	r2, #2
		pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8008176:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8008178:	f8a4 3194 	strh.w	r3, [r4, #404]	; 0x194
		if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800817c:	d13f      	bne.n	80081fe <xProcessReceivedTCPPacket+0x6c2>
			pxLastTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK;
 800817e:	2310      	movs	r3, #16
 8008180:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8008184:	4631      	mov	r1, r6
 8008186:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800818a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
 800818e:	4640      	mov	r0, r8
 8008190:	f000 fab8 	bl	8008704 <vTCPWindowInit>
			pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 8008194:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8008198:	3301      	adds	r3, #1
 800819a:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
			pxTCPWindow->ulNextTxSequenceNumber++;
 800819e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 80081a2:	3601      	adds	r6, #1
			pxTCPWindow->ulNextTxSequenceNumber++;
 80081a4:	3301      	adds	r3, #1
			pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 80081a6:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
 80081aa:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
			pxTCPWindow->ulNextTxSequenceNumber++;
 80081ae:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u;
 80081b2:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 80081b6:	3301      	adds	r3, #1
 80081b8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		if( ( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0u ) )
 80081bc:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d000      	beq.n	80081c6 <xProcessReceivedTCPPacket+0x68a>
 80081c4:	b305      	cbz	r5, 8008208 <xProcessReceivedTCPPacket+0x6cc>
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 80081c6:	f109 0628 	add.w	r6, r9, #40	; 0x28
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80081ca:	f109 0914 	add.w	r9, r9, #20
			pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 80081ce:	2310      	movs	r3, #16
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80081d0:	ea4f 0989 	mov.w	r9, r9, lsl #2
			pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 80081d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80081d8:	f887 902e 	strb.w	r9, [r7, #46]	; 0x2e
		if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 80081dc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80081e0:	f013 0310 	ands.w	r3, r3, #16
			pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 80081e4:	bf04      	itt	eq
 80081e6:	f884 30c9 	strbeq.w	r3, [r4, #201]	; 0xc9
			pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 80081ea:	f884 30ca 	strbeq.w	r3, [r4, #202]	; 0xca
		vTCPStateChange( pxSocket, eESTABLISHED );
 80081ee:	2105      	movs	r1, #5
 80081f0:	4620      	mov	r0, r4
 80081f2:	f7ff f972 	bl	80074da <vTCPStateChange>
	if( xSendLength > 0 )
 80081f6:	2e00      	cmp	r6, #0
 80081f8:	f73f af38 	bgt.w	800806c <xProcessReceivedTCPPacket+0x530>
 80081fc:	e5df      	b.n	8007dbe <xProcessReceivedTCPPacket+0x282>
		else if( ulReceiveLength == 0u )
 80081fe:	2d00      	cmp	r5, #0
 8008200:	d1d7      	bne.n	80081b2 <xProcessReceivedTCPPacket+0x676>
			pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8008202:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
 8008206:	e7d4      	b.n	80081b2 <xProcessReceivedTCPPacket+0x676>
BaseType_t xSendLength = 0;
 8008208:	462e      	mov	r6, r5
 800820a:	e7e7      	b.n	80081dc <xProcessReceivedTCPPacket+0x6a0>
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800820c:	9b03      	ldr	r3, [sp, #12]
 800820e:	699f      	ldr	r7, [r3, #24]
	pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8008210:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8008212:	f897 a02f 	ldrb.w	sl, [r7, #47]	; 0x2f
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
 8008216:	f8d7 6026 	ldr.w	r6, [r7, #38]	; 0x26
	pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800821a:	0a13      	lsrs	r3, r2, #8
 800821c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8008220:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
	pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8008224:	b29b      	uxth	r3, r3
		( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8008226:	4093      	lsls	r3, r2
	if( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_ACK ) != 0u )
 8008228:	f01a 0f10 	tst.w	sl, #16
	pxSocket->u.xTCP.ulWindowSize =
 800822c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	if( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_ACK ) != 0u )
 8008230:	d025      	beq.n	800827e <xProcessReceivedTCPPacket+0x742>
		ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulAckNr ) );
 8008232:	f8d7 302a 	ldr.w	r3, [r7, #42]	; 0x2a
 8008236:	0e19      	lsrs	r1, r3, #24
 8008238:	021a      	lsls	r2, r3, #8
 800823a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 800823e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8008242:	0a1b      	lsrs	r3, r3, #8
 8008244:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008248:	4311      	orrs	r1, r2
 800824a:	4319      	orrs	r1, r3
 800824c:	4640      	mov	r0, r8
 800824e:	f000 fc63 	bl	8008b18 <ulTCPWindowTxAck>
 8008252:	4603      	mov	r3, r0
		if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0u ) )
 8008254:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8008256:	b1b8      	cbz	r0, 8008288 <xProcessReceivedTCPPacket+0x74c>
 8008258:	b19b      	cbz	r3, 8008282 <xProcessReceivedTCPPacket+0x746>
			if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0u, NULL, ( size_t ) ulCount, pdFALSE ) != 0u )
 800825a:	2200      	movs	r2, #0
 800825c:	9200      	str	r2, [sp, #0]
 800825e:	4611      	mov	r1, r2
 8008260:	f7fe ff92 	bl	8007188 <uxStreamBufferGet>
 8008264:	b158      	cbz	r0, 800827e <xProcessReceivedTCPPacket+0x742>
				pxSocket->xEventBits |= eSOCKET_SEND;
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	f043 0202 	orr.w	r2, r3, #2
 800826c:	6022      	str	r2, [r4, #0]
					if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 800826e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008270:	0792      	lsls	r2, r2, #30
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 8008272:	bf42      	ittt	mi
 8008274:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
 8008278:	f043 0302 	orrmi.w	r3, r3, #2
 800827c:	6023      	strmi	r3, [r4, #0]
	if( pxSocket->u.xTCP.txStream != NULL )
 800827e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008280:	b113      	cbz	r3, 8008288 <xProcessReceivedTCPPacket+0x74c>
		prvTCPAddTxData( pxSocket );
 8008282:	4620      	mov	r0, r4
 8008284:	f7ff f8ff 	bl	8007486 <prvTCPAddTxData>
	pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8008288:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800828c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u ) )
 8008290:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008294:	0698      	lsls	r0, r3, #26
 8008296:	d403      	bmi.n	80082a0 <xProcessReceivedTCPPacket+0x764>
 8008298:	f01a 0f01 	tst.w	sl, #1
 800829c:	f000 80d0 	beq.w	8008440 <xProcessReceivedTCPPacket+0x904>
		if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 80082a0:	0659      	lsls	r1, r3, #25
 80082a2:	d41f      	bmi.n	80082e4 <xProcessReceivedTCPPacket+0x7a8>
			bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 80082a4:	4640      	mov	r0, r8
 80082a6:	f000 fa05 	bl	80086b4 <xTCPWindowRxEmpty>
 80082aa:	4682      	mov	sl, r0
			bTxDone     = xTCPWindowTxDone( pxTCPWindow );
 80082ac:	4640      	mov	r0, r8
 80082ae:	f000 fb84 	bl	80089ba <xTCPWindowTxDone>
			if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 80082b2:	f1ba 0f00 	cmp.w	sl, #0
 80082b6:	f000 80c3 	beq.w	8008440 <xProcessReceivedTCPPacket+0x904>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	f000 80c0 	beq.w	8008440 <xProcessReceivedTCPPacket+0x904>
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
 80082c0:	0e33      	lsrs	r3, r6, #24
 80082c2:	0232      	lsls	r2, r6, #8
 80082c4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80082c8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80082cc:	0a36      	lsrs	r6, r6, #8
 80082ce:	4313      	orrs	r3, r2
 80082d0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
				lDistance = ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber );
 80082d4:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
 80082d8:	4333      	orrs	r3, r6
				lDistance = ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber );
 80082da:	1a9b      	subs	r3, r3, r2
 80082dc:	442b      	add	r3, r5
				if( lDistance > 1 )
 80082de:	2b01      	cmp	r3, #1
 80082e0:	f300 80ae 	bgt.w	8008440 <xProcessReceivedTCPPacket+0x904>
			pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 80082e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80082e8:	f043 0320 	orr.w	r3, r3, #32
 80082ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 80082f0:	9b03      	ldr	r3, [sp, #12]
 80082f2:	4620      	mov	r0, r4
 80082f4:	6999      	ldr	r1, [r3, #24]
 80082f6:	f7ff fbbd 	bl	8007a74 <prvTCPHandleFin.isra.3>
 80082fa:	4606      	mov	r6, r0
 80082fc:	e77b      	b.n	80081f6 <xProcessReceivedTCPPacket+0x6ba>
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80082fe:	f109 0314 	add.w	r3, r9, #20
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8008308:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800830c:	065a      	lsls	r2, r3, #25
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800830e:	f109 0628 	add.w	r6, r9, #40	; 0x28
			if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8008312:	d503      	bpl.n	800831c <xProcessReceivedTCPPacket+0x7e0>
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8008314:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8008318:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		if( uxOptionsLength == 0u )
 800831c:	f1b9 0f00 	cmp.w	r9, #0
 8008320:	f47f aea4 	bne.w	800806c <xProcessReceivedTCPPacket+0x530>
 8008324:	e097      	b.n	8008456 <xProcessReceivedTCPPacket+0x91a>
		ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8008326:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008328:	e6ba      	b.n	80080a0 <xProcessReceivedTCPPacket+0x564>
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_LONGER_DELAY_MS );
 800832a:	2314      	movs	r3, #20
 800832c:	e6ec      	b.n	8008108 <xProcessReceivedTCPPacket+0x5cc>
		else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800832e:	b128      	cbz	r0, 800833c <xProcessReceivedTCPPacket+0x800>
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8008330:	4281      	cmp	r1, r0
 8008332:	d001      	beq.n	8008338 <xProcessReceivedTCPPacket+0x7fc>
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8008334:	f000 fd16 	bl	8008d64 <vReleaseNetworkBufferAndDescriptor>
			pxSocket->u.xTCP.pxAckMessage = NULL;
 8008338:	2300      	movs	r3, #0
 800833a:	67e3      	str	r3, [r4, #124]	; 0x7c
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800833c:	ad06      	add	r5, sp, #24
 800833e:	4620      	mov	r0, r4
 8008340:	f855 1d0c 	ldr.w	r1, [r5, #-12]!
 8008344:	4632      	mov	r2, r6
 8008346:	f7fe ffc9 	bl	80072dc <prvTCPReturnPacket.constprop.4>
				prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800834a:	4629      	mov	r1, r5
 800834c:	4620      	mov	r0, r4
 800834e:	f7ff fa5f 	bl	8007810 <prvTCPSendRepeated>
 8008352:	e534      	b.n	8007dbe <xProcessReceivedTCPPacket+0x282>
		pxSocket->u.xTCP.ucRepCount = 0u;
 8008354:	2400      	movs	r4, #0
		if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 8008356:	2901      	cmp	r1, #1
		pxSocket->u.xTCP.ucRepCount = 0u;
 8008358:	f885 4052 	strb.w	r4, [r5, #82]	; 0x52
		if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800835c:	f47f ad8c 	bne.w	8007e78 <xProcessReceivedTCPPacket+0x33c>
			if( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_SYN )
 8008360:	f006 001f 	and.w	r0, r6, #31
 8008364:	2802      	cmp	r0, #2
 8008366:	f43f ac2d 	beq.w	8007bc4 <xProcessReceivedTCPPacket+0x88>
				if( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u )
 800836a:	f016 0404 	ands.w	r4, r6, #4
 800836e:	f47f ac27 	bne.w	8007bc0 <xProcessReceivedTCPPacket+0x84>
					prvTCPSendReset( pxNetworkBuffer );
 8008372:	9803      	ldr	r0, [sp, #12]
 8008374:	f7ff f878 	bl	8007468 <prvTCPSendReset>
}
 8008378:	4620      	mov	r0, r4
 800837a:	b007      	add	sp, #28
 800837c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 8008380:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8008384:	b13b      	cbz	r3, 8008396 <xProcessReceivedTCPPacket+0x85a>
				lTCPAddRxdata( pxSocket, 0ul, NULL, pxTCPWindow->ulUserDataLength );
 8008386:	2200      	movs	r2, #0
 8008388:	4611      	mov	r1, r2
 800838a:	4620      	mov	r0, r4
 800838c:	f7fe fc96 	bl	8006cbc <lTCPAddRxdata>
				pxTCPWindow->ulUserDataLength = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8008396:	9b03      	ldr	r3, [sp, #12]
UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8008398:	f894 9118 	ldrb.w	r9, [r4, #280]	; 0x118
 800839c:	f8d3 b018 	ldr.w	fp, [r3, #24]
		if( uxOptionsLength != 0u )
 80083a0:	f1b9 0f00 	cmp.w	r9, #0
 80083a4:	f43f ae01 	beq.w	8007faa <xProcessReceivedTCPPacket+0x46e>
			memcpy( pxTCPHeader->ucOptdata, pxTCPWindow->ulOptionsData, ( size_t ) uxOptionsLength );
 80083a8:	464a      	mov	r2, r9
 80083aa:	f504 71ae 	add.w	r1, r4, #348	; 0x15c
 80083ae:	f10b 0036 	add.w	r0, fp, #54	; 0x36
 80083b2:	f000 ff5e 	bl	8009272 <memcpy>
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80083b6:	f109 0314 	add.w	r3, r9, #20
 80083ba:	009b      	lsls	r3, r3, #2
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80083bc:	f88b 302e 	strb.w	r3, [fp, #46]	; 0x2e
		if( ( pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) )
 80083c0:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	d107      	bne.n	80083d8 <xProcessReceivedTCPPacket+0x89c>
 80083c8:	f00a 031f 	and.w	r3, sl, #31
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d103      	bne.n	80083d8 <xProcessReceivedTCPPacket+0x89c>
			vTCPStateChange( pxSocket, eSYN_FIRST );
 80083d0:	2103      	movs	r1, #3
 80083d2:	4620      	mov	r0, r4
 80083d4:	f7ff f881 	bl	80074da <vTCPStateChange>
		if( ( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 80083d8:	f01a 0f01 	tst.w	sl, #1
 80083dc:	d014      	beq.n	8008408 <xProcessReceivedTCPPacket+0x8cc>
 80083de:	f994 3041 	ldrsb.w	r3, [r4, #65]	; 0x41
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	db10      	blt.n	8008408 <xProcessReceivedTCPPacket+0x8cc>
			pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 80083e6:	197b      	adds	r3, r7, r5
 80083e8:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
			pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 80083ec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80083f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 80083f4:	0659      	lsls	r1, r3, #25
			pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 80083f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
				pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 80083fa:	bf5e      	ittt	pl
 80083fc:	f894 3042 	ldrbpl.w	r3, [r4, #66]	; 0x42
 8008400:	f043 0302 	orrpl.w	r3, r3, #2
 8008404:	f884 3042 	strbpl.w	r3, [r4, #66]	; 0x42
		switch (pxSocket->u.xTCP.ucTCPState)
 8008408:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 800840c:	1e93      	subs	r3, r2, #2
 800840e:	2b08      	cmp	r3, #8
 8008410:	f63f acd5 	bhi.w	8007dbe <xProcessReceivedTCPPacket+0x282>
 8008414:	a101      	add	r1, pc, #4	; (adr r1, 800841c <xProcessReceivedTCPPacket+0x8e0>)
 8008416:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	08008117 	.word	0x08008117
 8008420:	08007fe7 	.word	0x08007fe7
 8008424:	08008117 	.word	0x08008117
 8008428:	0800820d 	.word	0x0800820d
 800842c:	080082f1 	.word	0x080082f1
 8008430:	080082f1 	.word	0x080082f1
 8008434:	08007dbf 	.word	0x08007dbf
 8008438:	08007dbf 	.word	0x08007dbf
 800843c:	080082f1 	.word	0x080082f1
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 8008440:	2310      	movs	r3, #16
 8008442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ulReceiveLength != 0u )
 8008446:	2d00      	cmp	r5, #0
 8008448:	f47f af59 	bne.w	80082fe <xProcessReceivedTCPPacket+0x7c2>
		if( uxOptionsLength == 0u )
 800844c:	f1b9 0f00 	cmp.w	r9, #0
 8008450:	f47f acb5 	bne.w	8007dbe <xProcessReceivedTCPPacket+0x282>
 8008454:	462e      	mov	r6, r5
			lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8008456:	2200      	movs	r2, #0
 8008458:	a903      	add	r1, sp, #12
 800845a:	4620      	mov	r0, r4
 800845c:	f7ff f8c8 	bl	80075f0 <prvTCPPrepareSend>
			if( lSendResult > 0 )
 8008460:	2800      	cmp	r0, #0
 8008462:	f77f aec8 	ble.w	80081f6 <xProcessReceivedTCPPacket+0x6ba>
 8008466:	4606      	mov	r6, r0
 8008468:	e600      	b.n	800806c <xProcessReceivedTCPPacket+0x530>
 800846a:	bf00      	nop

0800846c <xTCPCheckNewClient>:
 * In the API accept(), the user asks is there is a new client?  As API's can
 * not walk through the xBoundTCPSocketsList the IP-task will do this.
 */
BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t *pxSocket )
{
TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800846c:	8c83      	ldrh	r3, [r0, #36]	; 0x24
FreeRTOS_Socket_t *pxFound;
BaseType_t xResult = pdFALSE;

	/* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
	who has access. */
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800846e:	490e      	ldr	r1, [pc, #56]	; (80084a8 <xTCPCheckNewClient+0x3c>)
{
 8008470:	b530      	push	{r4, r5, lr}
TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8008472:	0a1a      	lsrs	r2, r3, #8
 8008474:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8008478:	b292      	uxth	r2, r2
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800847a:	68cb      	ldr	r3, [r1, #12]
 800847c:	3108      	adds	r1, #8
 800847e:	428b      	cmp	r3, r1
 8008480:	d101      	bne.n	8008486 <xTCPCheckNewClient+0x1a>
BaseType_t xResult = pdFALSE;
 8008482:	2000      	movs	r0, #0
				break;
			}
		}
	}
	return xResult;
}
 8008484:	bd30      	pop	{r4, r5, pc}
		if( listGET_LIST_ITEM_VALUE( pxIterator ) == xLocalPort )
 8008486:	681c      	ldr	r4, [r3, #0]
 8008488:	42a2      	cmp	r2, r4
 800848a:	d10b      	bne.n	80084a4 <xTCPCheckNewClient+0x38>
			pxFound = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800848c:	68dc      	ldr	r4, [r3, #12]
			if( ( pxFound->ucProtocol == FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800848e:	f894 5027 	ldrb.w	r5, [r4, #39]	; 0x27
 8008492:	2d06      	cmp	r5, #6
 8008494:	d106      	bne.n	80084a4 <xTCPCheckNewClient+0x38>
 8008496:	f894 5040 	ldrb.w	r5, [r4, #64]	; 0x40
 800849a:	07ad      	lsls	r5, r5, #30
 800849c:	d502      	bpl.n	80084a4 <xTCPCheckNewClient+0x38>
				pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800849e:	6544      	str	r4, [r0, #84]	; 0x54
				xResult = pdTRUE;
 80084a0:	2001      	movs	r0, #1
				break;
 80084a2:	bd30      	pop	{r4, r5, pc}
		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	e7ea      	b.n	800847e <xTCPCheckNewClient+0x12>
 80084a8:	20006504 	.word	0x20006504

080084ac <xTCPWindowRxFind>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxFind( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 80084ac:	b510      	push	{r4, lr}
		/* Find a segment with a given sequence number in the list of received
		segments. */

		pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xRxSegments );

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 80084ae:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
		pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xRxSegments );
 80084b2:	f100 02ac 	add.w	r2, r0, #172	; 0xac
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d101      	bne.n	80084be <xTCPWindowRxFind+0x12>
	TCPSegment_t *pxSegment, *pxReturn = NULL;
 80084ba:	2000      	movs	r0, #0
				break;
			}
		}

		return pxReturn;
	}
 80084bc:	bd10      	pop	{r4, pc}
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 80084be:	68d8      	ldr	r0, [r3, #12]
			if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 80084c0:	6804      	ldr	r4, [r0, #0]
 80084c2:	428c      	cmp	r4, r1
 80084c4:	d0fa      	beq.n	80084bc <xTCPWindowRxFind+0x10>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	e7f5      	b.n	80084b6 <xTCPWindowRxFind+0xa>

080084ca <xTCPWindowPeekHead>:
	{
	ListItem_t *pxItem;
	TCPSegment_t *pxReturn;

		/* Returns the head of a queue but it won't be detached. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 80084ca:	6803      	ldr	r3, [r0, #0]
 80084cc:	b90b      	cbnz	r3, 80084d2 <xTCPWindowPeekHead+0x8>
		{
			pxReturn = NULL;
 80084ce:	4618      	mov	r0, r3
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
			pxReturn = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
		}

		return pxReturn;
 80084d0:	4770      	bx	lr
			pxReturn = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 80084d2:	68c3      	ldr	r3, [r0, #12]
 80084d4:	68d8      	ldr	r0, [r3, #12]
	}
 80084d6:	4770      	bx	lr

080084d8 <prvTCPWindowTxHasSpace>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t *pxWindow, uint32_t ulWindowSize )
	{
 80084d8:	b510      	push	{r4, lr}
 80084da:	4602      	mov	r2, r0
	TCPSegment_t *pxSegment;

		/* This function will look if there is new transmission data.  It will
		return true if there is data to be sent. */

		pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 80084dc:	3054      	adds	r0, #84	; 0x54
 80084de:	f7ff fff4 	bl	80084ca <xTCPWindowPeekHead>

		if( pxSegment == NULL )
 80084e2:	b1a0      	cbz	r0, 800850e <prvTCPWindowTxHasSpace+0x36>
		}
		else
		{
			/* How much data is outstanding, i.e. how much data has been sent
			but not yet acknowledged ? */
			if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 80084e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80084e6:	6a14      	ldr	r4, [r2, #32]
 80084e8:	42a3      	cmp	r3, r4
			{
				ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 80084ea:	bf2c      	ite	cs
 80084ec:	1b1b      	subcs	r3, r3, r4
			}
			else
			{
				ulTxOutstanding = 0UL;
 80084ee:	2300      	movcc	r3, #0

			/* Subtract this from the peer's space. */
			ulWindowSize -= FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );

			/* See if the next segment may be sent. */
			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
 80084f0:	6884      	ldr	r4, [r0, #8]
			ulWindowSize -= FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 80084f2:	428b      	cmp	r3, r1
 80084f4:	bf94      	ite	ls
 80084f6:	1ac9      	subls	r1, r1, r3
 80084f8:	1a49      	subhi	r1, r1, r1
			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
 80084fa:	42a1      	cmp	r1, r4
 80084fc:	bf34      	ite	cc
 80084fe:	2000      	movcc	r0, #0
 8008500:	2001      	movcs	r0, #1

			/* If 'xHasSpace', it looks like the peer has at least space for 1
			more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
			limitation of the transmission window (in case of many resends it
			may be decreased). */
			if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) )
 8008502:	b123      	cbz	r3, 800850e <prvTCPWindowTxHasSpace+0x36>
 8008504:	6892      	ldr	r2, [r2, #8]
 8008506:	4423      	add	r3, r4
			{
				xHasSpace = pdFALSE;
 8008508:	429a      	cmp	r2, r3
 800850a:	bf38      	it	cc
 800850c:	2000      	movcc	r0, #0
			}
		}

		return xHasSpace;
	}
 800850e:	bd10      	pop	{r4, pc}

08008510 <xTCPWindowGetHead>:
	{
 8008510:	b510      	push	{r4, lr}
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8008512:	6804      	ldr	r4, [r0, #0]
 8008514:	b11c      	cbz	r4, 800851e <xTCPWindowGetHead+0xe>
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8008516:	68c0      	ldr	r0, [r0, #12]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 8008518:	68c4      	ldr	r4, [r0, #12]
			uxListRemove( pxItem );
 800851a:	f7fb fba6 	bl	8003c6a <uxListRemove>
	}
 800851e:	4620      	mov	r0, r4
 8008520:	bd10      	pop	{r4, pc}

08008522 <vListInsertGeneric>:
	pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8008522:	6893      	ldr	r3, [r2, #8]
 8008524:	608b      	str	r3, [r1, #8]
	pxNewListItem->pxNext = (struct xLIST_ITEM * configLIST_VOLATILE)pxWhere;
 8008526:	604a      	str	r2, [r1, #4]
	pxWhere->pxPrevious->pxNext = pxNewListItem;
 8008528:	6059      	str	r1, [r3, #4]
	( pxList->uxNumberOfItems )++;
 800852a:	6803      	ldr	r3, [r0, #0]
	pxWhere->pxPrevious = pxNewListItem;
 800852c:	6091      	str	r1, [r2, #8]
	( pxList->uxNumberOfItems )++;
 800852e:	3301      	adds	r3, #1
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008530:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008532:	6003      	str	r3, [r0, #0]
 8008534:	4770      	bx	lr
	...

08008538 <vTCPWindowFree>:
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8008538:	6a83      	ldr	r3, [r0, #40]	; 0x28
	{
 800853a:	b510      	push	{r4, lr}
 800853c:	4604      	mov	r4, r0
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 800853e:	b113      	cbz	r3, 8008546 <vTCPWindowFree+0xe>
			uxListRemove( &( pxSegment->xQueueItem ) );
 8008540:	3018      	adds	r0, #24
 8008542:	f7fb fb92 	bl	8003c6a <uxListRemove>
		pxSegment->ulSequenceNumber = 0u;
 8008546:	2300      	movs	r3, #0
 8008548:	6023      	str	r3, [r4, #0]
		pxSegment->lDataLength = 0l;
 800854a:	60a3      	str	r3, [r4, #8]
		pxSegment->u.ulFlags = 0u;
 800854c:	6163      	str	r3, [r4, #20]
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xListItem ) ) != NULL )
 800854e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008550:	342c      	adds	r4, #44	; 0x2c
 8008552:	b113      	cbz	r3, 800855a <vTCPWindowFree+0x22>
			uxListRemove( &( pxSegment->xListItem ) );
 8008554:	4620      	mov	r0, r4
 8008556:	f7fb fb88 	bl	8003c6a <uxListRemove>
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800855a:	4a04      	ldr	r2, [pc, #16]	; (800856c <vTCPWindowFree+0x34>)
 800855c:	4621      	mov	r1, r4
 800855e:	f1a2 0008 	sub.w	r0, r2, #8
	}
 8008562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8008566:	f7ff bfdc 	b.w	8008522 <vListInsertGeneric>
 800856a:	bf00      	nop
 800856c:	20004f2c 	.word	0x20004f2c

08008570 <prvTCPWindowTxCheckAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 8008570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008574:	b085      	sub	sp, #20
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 8008576:	1e53      	subs	r3, r2, #1

		 A Smoothed RTT will increase quickly, but it is conservative when
		 becoming smaller. */

		for(
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8008578:	f8d0 609c 	ldr.w	r6, [r0, #156]	; 0x9c
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 800857c:	9301      	str	r3, [sp, #4]
	{
 800857e:	4604      	mov	r4, r0
 8008580:	4691      	mov	r9, r2
	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xTxSegments );
 8008582:	f100 0a98 	add.w	sl, r0, #152	; 0x98
	uint32_t ulBytesConfirmed = 0u;
 8008586:	f04f 0800 	mov.w	r8, #0
		return ( ( a - b - 1UL ) & 0x80000000UL ) == 0UL;
 800858a:	ea6f 0b02 	mvn.w	fp, r2
		for(
 800858e:	4556      	cmp	r6, sl
 8008590:	d003      	beq.n	800859a <prvTCPWindowTxCheckAck+0x2a>
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 8008592:	9b01      	ldr	r3, [sp, #4]
 8008594:	1a5b      	subs	r3, r3, r1
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
 8008596:	2b00      	cmp	r3, #0
 8008598:	da03      	bge.n	80085a2 <prvTCPWindowTxCheckAck+0x32>

			ulSequenceNumber += ulDataLength;
		}

		return ulBytesConfirmed;
	}
 800859a:	4640      	mov	r0, r8
 800859c:	b005      	add	sp, #20
 800859e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 80085a2:	68f5      	ldr	r5, [r6, #12]
			pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 80085a4:	6876      	ldr	r6, [r6, #4]
			if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 80085a6:	682b      	ldr	r3, [r5, #0]
		return ( ( a - b - 1UL ) & 0x80000000UL ) == 0UL;
 80085a8:	43da      	mvns	r2, r3
			if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 80085aa:	42ca      	cmn	r2, r1
 80085ac:	d5ef      	bpl.n	800858e <prvTCPWindowTxCheckAck+0x1e>
			if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 80085ae:	4299      	cmp	r1, r3
 80085b0:	d1f3      	bne.n	800859a <prvTCPWindowTxCheckAck+0x2a>
			if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 80085b2:	7dab      	ldrb	r3, [r5, #22]
			ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 80085b4:	68aa      	ldr	r2, [r5, #8]
			if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 80085b6:	f013 0f02 	tst.w	r3, #2
 80085ba:	eb01 0702 	add.w	r7, r1, r2
 80085be:	d132      	bne.n	8008626 <prvTCPWindowTxCheckAck+0xb6>
				if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t )ulDataLength, ulLast ) != pdFALSE )
 80085c0:	eb1b 0f07 	cmn.w	fp, r7
 80085c4:	d5e9      	bpl.n	800859a <prvTCPWindowTxCheckAck+0x2a>
				pxSegment->u.bits.bAcked = pdTRUE_UNSIGNED;
 80085c6:	f043 0302 	orr.w	r3, r3, #2
 80085ca:	75ab      	strb	r3, [r5, #22]
				if( ( pxSegment->u.bits.ucTransmitCount == 1 ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 80085cc:	7d2b      	ldrb	r3, [r5, #20]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d00a      	beq.n	80085e8 <prvTCPWindowTxCheckAck+0x78>
				xDoUnlink = pdTRUE;
 80085d2:	2001      	movs	r0, #1
			if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 80085d4:	6a23      	ldr	r3, [r4, #32]
 80085d6:	4299      	cmp	r1, r3
 80085d8:	d127      	bne.n	800862a <prvTCPWindowTxCheckAck+0xba>
				pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 80085da:	6227      	str	r7, [r4, #32]
				vTCPWindowFree( pxSegment );
 80085dc:	4628      	mov	r0, r5
				ulBytesConfirmed += ulDataLength;
 80085de:	4490      	add	r8, r2
				vTCPWindowFree( pxSegment );
 80085e0:	f7ff ffaa 	bl	8008538 <vTCPWindowFree>
			ulSequenceNumber += ulDataLength;
 80085e4:	4639      	mov	r1, r7
 80085e6:	e7d2      	b.n	800858e <prvTCPWindowTxCheckAck+0x1e>
				if( ( pxSegment->u.bits.ucTransmitCount == 1 ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 80085e8:	45b9      	cmp	r9, r7
 80085ea:	d1f2      	bne.n	80085d2 <prvTCPWindowTxCheckAck+0x62>
 80085ec:	9103      	str	r1, [sp, #12]
 80085ee:	9202      	str	r2, [sp, #8]
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 80085f0:	f7fc fa72 	bl	8004ad8 <xTaskGetTickCount>
 80085f4:	692b      	ldr	r3, [r5, #16]
					if( pxWindow->lSRTT >= mS )
 80085f6:	9a02      	ldr	r2, [sp, #8]
 80085f8:	9903      	ldr	r1, [sp, #12]
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 80085fa:	1ac0      	subs	r0, r0, r3
					if( pxWindow->lSRTT >= mS )
 80085fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085fe:	4298      	cmp	r0, r3
						pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8008600:	bfd5      	itete	le
 8008602:	ebc3 03c3 	rsble	r3, r3, r3, lsl #3
						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8008606:	eb03 0343 	addgt.w	r3, r3, r3, lsl #1
						pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 800860a:	181b      	addle	r3, r3, r0
						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 800860c:	181b      	addgt	r3, r3, r0
						pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 800860e:	bfd4      	ite	le
 8008610:	2008      	movle	r0, #8
						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8008612:	2004      	movgt	r0, #4
 8008614:	fb93 f3f0 	sdiv	r3, r3, r0
 8008618:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxWindow->lSRTT < winSRTT_CAP_mS )
 800861a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800861c:	2b31      	cmp	r3, #49	; 0x31
						pxWindow->lSRTT = winSRTT_CAP_mS;
 800861e:	bfdc      	itt	le
 8008620:	2332      	movle	r3, #50	; 0x32
 8008622:	63a3      	strle	r3, [r4, #56]	; 0x38
 8008624:	e7d5      	b.n	80085d2 <prvTCPWindowTxCheckAck+0x62>
			xDoUnlink = pdFALSE;
 8008626:	2000      	movs	r0, #0
 8008628:	e7d4      	b.n	80085d4 <prvTCPWindowTxCheckAck+0x64>
			if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 800862a:	2800      	cmp	r0, #0
 800862c:	d0da      	beq.n	80085e4 <prvTCPWindowTxCheckAck+0x74>
 800862e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0d7      	beq.n	80085e4 <prvTCPWindowTxCheckAck+0x74>
				uxListRemove( &pxSegment->xQueueItem );
 8008634:	f105 0018 	add.w	r0, r5, #24
 8008638:	f7fb fb17 	bl	8003c6a <uxListRemove>
 800863c:	e7d2      	b.n	80085e4 <prvTCPWindowTxCheckAck+0x74>
	...

08008640 <xTCPWindowNew>:
	{
 8008640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008644:	461e      	mov	r6, r3
		if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8008646:	4b1a      	ldr	r3, [pc, #104]	; (80086b0 <xTCPWindowNew+0x70>)
 8008648:	681c      	ldr	r4, [r3, #0]
	{
 800864a:	4605      	mov	r5, r0
 800864c:	4689      	mov	r9, r1
 800864e:	4690      	mov	r8, r2
		if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8008650:	b33c      	cbz	r4, 80086a2 <xTCPWindowNew+0x62>
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8008652:	68df      	ldr	r7, [r3, #12]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 8008654:	68fc      	ldr	r4, [r7, #12]
			configASSERT( pxSegment != NULL );
 8008656:	b944      	cbnz	r4, 800866a <xTCPWindowNew+0x2a>
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	e7fe      	b.n	8008668 <xTCPWindowNew+0x28>
			uxListRemove( pxItem );
 800866a:	4638      	mov	r0, r7
 800866c:	f7fb fafd 	bl	8003c6a <uxListRemove>
			vListInsertFifo( xIsForRx ? &pxWindow->xRxSegments : &pxWindow->xTxSegments, pxItem );
 8008670:	b1d6      	cbz	r6, 80086a8 <xTCPWindowNew+0x68>
 8008672:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8008676:	f100 0208 	add.w	r2, r0, #8
 800867a:	4639      	mov	r1, r7
 800867c:	f7ff ff51 	bl	8008522 <vListInsertGeneric>
	pxTimer->ulBorn = xTaskGetTickCount ( );
 8008680:	f7fc fa2a 	bl	8004ad8 <xTaskGetTickCount>
			pxSegment->u.ulFlags = 0;
 8008684:	2300      	movs	r3, #0
			pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 );
 8008686:	1af6      	subs	r6, r6, r3
 8008688:	bf18      	it	ne
 800868a:	2601      	movne	r6, #1
			pxSegment->u.ulFlags = 0;
 800868c:	6163      	str	r3, [r4, #20]
			pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 );
 800868e:	f366 0382 	bfi	r3, r6, #2, #1
	pxTimer->ulBorn = xTaskGetTickCount ( );
 8008692:	6120      	str	r0, [r4, #16]
			pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 );
 8008694:	75a3      	strb	r3, [r4, #22]
			pxSegment->lMaxLength = lCount;
 8008696:	f8c4 8004 	str.w	r8, [r4, #4]
			pxSegment->lDataLength = lCount;
 800869a:	f8c4 8008 	str.w	r8, [r4, #8]
			pxSegment->ulSequenceNumber = ulSequenceNumber;
 800869e:	f8c4 9000 	str.w	r9, [r4]
	}
 80086a2:	4620      	mov	r0, r4
 80086a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			vListInsertFifo( xIsForRx ? &pxWindow->xRxSegments : &pxWindow->xTxSegments, pxItem );
 80086a8:	f105 0090 	add.w	r0, r5, #144	; 0x90
 80086ac:	e7e3      	b.n	8008676 <xTCPWindowNew+0x36>
 80086ae:	bf00      	nop
 80086b0:	20004f24 	.word	0x20004f24

080086b4 <xTCPWindowRxEmpty>:
		if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 80086b4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80086b8:	b92b      	cbnz	r3, 80086c6 <xTCPWindowRxEmpty+0x12>
	return ( ( a - b ) & 0x80000000UL ) == 0UL;
 80086ba:	6903      	ldr	r3, [r0, #16]
 80086bc:	6980      	ldr	r0, [r0, #24]
 80086be:	1a18      	subs	r0, r3, r0
		else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 80086c0:	43c0      	mvns	r0, r0
 80086c2:	0fc0      	lsrs	r0, r0, #31
 80086c4:	4770      	bx	lr
 80086c6:	2000      	movs	r0, #0
	}
 80086c8:	4770      	bx	lr

080086ca <vTCPWindowDestroy>:
			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
 80086ca:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 80086ce:	3301      	adds	r3, #1
	{
 80086d0:	b510      	push	{r4, lr}
 80086d2:	4604      	mov	r4, r0
			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
 80086d4:	d108      	bne.n	80086e8 <vTCPWindowDestroy+0x1e>
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 80086d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80086da:	b12b      	cbz	r3, 80086e8 <vTCPWindowDestroy+0x1e>
					pxSegment = ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments );
 80086dc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
					vTCPWindowFree( pxSegment );
 80086e0:	68d8      	ldr	r0, [r3, #12]
 80086e2:	f7ff ff29 	bl	8008538 <vTCPWindowFree>
 80086e6:	e7f6      	b.n	80086d6 <vTCPWindowDestroy+0xc>
			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
 80086e8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80086ec:	3301      	adds	r3, #1
 80086ee:	d108      	bne.n	8008702 <vTCPWindowDestroy+0x38>
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 80086f0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80086f4:	b12b      	cbz	r3, 8008702 <vTCPWindowDestroy+0x38>
					pxSegment = ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments );
 80086f6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
					vTCPWindowFree( pxSegment );
 80086fa:	68d8      	ldr	r0, [r3, #12]
 80086fc:	f7ff ff1c 	bl	8008538 <vTCPWindowFree>
 8008700:	e7f6      	b.n	80086f0 <vTCPWindowDestroy+0x26>
 8008702:	bd10      	pop	{r4, pc}

08008704 <vTCPWindowInit>:
{
 8008704:	b510      	push	{r4, lr}
	pxWindow->u.ulFlags = 0ul;
 8008706:	2400      	movs	r4, #0
 8008708:	6004      	str	r4, [r0, #0]
	pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 800870a:	2401      	movs	r4, #1
 800870c:	7004      	strb	r4, [r0, #0]
	if( ulMSS != 0ul )
 800870e:	b183      	cbz	r3, 8008732 <vTCPWindowInit+0x2e>
		if( pxWindow->usMSSInit != 0u )
 8008710:	f8b0 40be 	ldrh.w	r4, [r0, #190]	; 0xbe
 8008714:	b10c      	cbz	r4, 800871a <vTCPWindowInit+0x16>
			pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8008716:	f8a0 30be 	strh.w	r3, [r0, #190]	; 0xbe
		if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0u ) )
 800871a:	f8b0 40bc 	ldrh.w	r4, [r0, #188]	; 0xbc
 800871e:	42a3      	cmp	r3, r4
 8008720:	d300      	bcc.n	8008724 <vTCPWindowInit+0x20>
 8008722:	b934      	cbnz	r4, 8008732 <vTCPWindowInit+0x2e>
			pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8008724:	6844      	ldr	r4, [r0, #4]
 8008726:	fbb4 f4f3 	udiv	r4, r4, r3
 800872a:	435c      	muls	r4, r3
 800872c:	6044      	str	r4, [r0, #4]
			pxWindow->usMSS = ( uint16_t ) ulMSS;
 800872e:	f8a0 30bc 	strh.w	r3, [r0, #188]	; 0xbc
	pxWindow->lSRTT = l500ms;
 8008732:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008736:	6383      	str	r3, [r0, #56]	; 0x38
	pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8008738:	60c1      	str	r1, [r0, #12]
	pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 800873a:	6101      	str	r1, [r0, #16]
	pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 800873c:	6181      	str	r1, [r0, #24]
	pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 800873e:	61c2      	str	r2, [r0, #28]
	pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 8008740:	6202      	str	r2, [r0, #32]
	pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8008742:	6342      	str	r2, [r0, #52]	; 0x34
	pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 8008744:	6282      	str	r2, [r0, #40]	; 0x28
	pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 8008746:	62c2      	str	r2, [r0, #44]	; 0x2c
 8008748:	bd10      	pop	{r4, pc}
	...

0800874c <vTCPWindowCreate>:
{
 800874c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008750:	4698      	mov	r8, r3
		if( xTCPSegments == NULL )
 8008752:	4b27      	ldr	r3, [pc, #156]	; (80087f0 <vTCPWindowCreate+0xa4>)
{
 8008754:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
		if( xTCPSegments == NULL )
 8008758:	f8d3 b000 	ldr.w	fp, [r3]
{
 800875c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8008760:	4605      	mov	r5, r0
 8008762:	460e      	mov	r6, r1
 8008764:	4617      	mov	r7, r2
		if( xTCPSegments == NULL )
 8008766:	f1bb 0f00 	cmp.w	fp, #0
 800876a:	d01e      	beq.n	80087aa <vTCPWindowCreate+0x5e>
		vListInitialise( &pxWindow->xTxSegments );
 800876c:	f105 0090 	add.w	r0, r5, #144	; 0x90
 8008770:	f7fb fa4a 	bl	8003c08 <vListInitialise>
		vListInitialise( &pxWindow->xRxSegments );
 8008774:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8008778:	f7fb fa46 	bl	8003c08 <vListInitialise>
		vListInitialise( &pxWindow->xPriorityQueue );			/* Priority queue: segments which must be sent immediately */
 800877c:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8008780:	f7fb fa42 	bl	8003c08 <vListInitialise>
		vListInitialise( &pxWindow->xTxQueue   );			/* Transmit queue: segments queued for transmission */
 8008784:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8008788:	f7fb fa3e 	bl	8003c08 <vListInitialise>
		vListInitialise( &pxWindow->xWaitQueue );			/* Waiting queue:  outstanding segments */
 800878c:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8008790:	f7fb fa3a 	bl	8003c08 <vListInitialise>
	vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 8008794:	4653      	mov	r3, sl
 8008796:	464a      	mov	r2, r9
 8008798:	4641      	mov	r1, r8
 800879a:	4628      	mov	r0, r5
	pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 800879c:	606e      	str	r6, [r5, #4]
	pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 800879e:	60af      	str	r7, [r5, #8]
}
 80087a0:	b003      	add	sp, #12
 80087a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 80087a6:	f7ff bfad 	b.w	8008704 <vTCPWindowInit>
		vListInitialise( &xSegmentList );
 80087aa:	4812      	ldr	r0, [pc, #72]	; (80087f4 <vTCPWindowCreate+0xa8>)
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	f7fb fa2b 	bl	8003c08 <vListInitialise>
		xTCPSegments = ( TCPSegment_t * ) pvPortMallocLarge( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 80087b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80087b6:	f7fb fc1f 	bl	8003ff8 <pvPortMalloc>
 80087ba:	9b01      	ldr	r3, [sp, #4]
 80087bc:	4604      	mov	r4, r0
 80087be:	6018      	str	r0, [r3, #0]
		if( xTCPSegments == NULL )
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d0d3      	beq.n	800876c <vTCPWindowCreate+0x20>
			memset( xTCPSegments, '\0', ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 80087c4:	4659      	mov	r1, fp
 80087c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80087ca:	f000 fd77 	bl	80092bc <memset>
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80087ce:	4b0a      	ldr	r3, [pc, #40]	; (80087f8 <vTCPWindowCreate+0xac>)
 80087d0:	f504 5b80 	add.w	fp, r4, #4096	; 0x1000
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xListItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 80087d4:	63a4      	str	r4, [r4, #56]	; 0x38
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 80087d6:	6264      	str	r4, [r4, #36]	; 0x24
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80087d8:	461a      	mov	r2, r3
 80087da:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80087de:	4805      	ldr	r0, [pc, #20]	; (80087f4 <vTCPWindowCreate+0xa8>)
 80087e0:	9301      	str	r3, [sp, #4]
 80087e2:	3440      	adds	r4, #64	; 0x40
 80087e4:	f7ff fe9d 	bl	8008522 <vListInsertGeneric>
			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 80087e8:	455c      	cmp	r4, fp
 80087ea:	9b01      	ldr	r3, [sp, #4]
 80087ec:	d1f2      	bne.n	80087d4 <vTCPWindowCreate+0x88>
 80087ee:	e7bd      	b.n	800876c <vTCPWindowCreate+0x20>
 80087f0:	20004f38 	.word	0x20004f38
 80087f4:	20004f24 	.word	0x20004f24
 80087f8:	20004f2c 	.word	0x20004f2c

080087fc <lTCPWindowRxCheck>:
	{
 80087fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8008800:	6906      	ldr	r6, [r0, #16]
	{
 8008802:	4604      	mov	r4, r0
		if( ulCurrentSequenceNumber == ulSequenceNumber )
 8008804:	428e      	cmp	r6, r1
		pxWindow->ucOptionLength = 0u;
 8008806:	f04f 0000 	mov.w	r0, #0
	{
 800880a:	460d      	mov	r5, r1
 800880c:	4690      	mov	r8, r2
		pxWindow->ucOptionLength = 0u;
 800880e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
		pxWindow->ulUserDataLength = 0ul;
 8008812:	6320      	str	r0, [r4, #48]	; 0x30
		if( ulCurrentSequenceNumber == ulSequenceNumber )
 8008814:	d13e      	bne.n	8008894 <lTCPWindowRxCheck+0x98>
			if( ulLength > ulSpace )
 8008816:	429a      	cmp	r2, r3
 8008818:	d903      	bls.n	8008822 <lTCPWindowRxCheck+0x26>
						lReturn = -1;
 800881a:	f04f 30ff 	mov.w	r0, #4294967295
 800881e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0 )
 8008822:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
				ulCurrentSequenceNumber += ulLength;
 8008826:	188e      	adds	r6, r1, r2
				if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0 )
 8008828:	b393      	cbz	r3, 8008890 <lTCPWindowRxCheck+0x94>
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800882a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
	const MiniListItem_t* pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &pxWindow->xRxSegments );
 800882e:	f104 0eac 	add.w	lr, r4, #172	; 0xac
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 8008832:	f106 3cff 	add.w	ip, r6, #4294967295
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8008836:	4596      	cmp	lr, r2
 8008838:	d106      	bne.n	8008848 <lTCPWindowRxCheck+0x4c>
					if( pxFound != NULL )
 800883a:	b1c0      	cbz	r0, 800886e <lTCPWindowRxCheck+0x72>
						ulCurrentSequenceNumber = pxFound->ulSequenceNumber + ( ( uint32_t ) pxFound->lDataLength );
 800883c:	6805      	ldr	r5, [r0, #0]
 800883e:	6883      	ldr	r3, [r0, #8]
						ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 8008840:	441d      	add	r5, r3
						vTCPWindowFree( pxFound );
 8008842:	f7ff fe79 	bl	8008538 <vTCPWindowFree>
 8008846:	e013      	b.n	8008870 <lTCPWindowRxCheck+0x74>
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8008848:	68d7      	ldr	r7, [r2, #12]
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800884a:	683b      	ldr	r3, [r7, #0]
	return ( ( a - b ) & 0x80000000UL ) == 0UL;
 800884c:	1b59      	subs	r1, r3, r5
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800884e:	2900      	cmp	r1, #0
 8008850:	db09      	blt.n	8008866 <lTCPWindowRxCheck+0x6a>
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 8008852:	ebac 0103 	sub.w	r1, ip, r3
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8008856:	2900      	cmp	r1, #0
 8008858:	db05      	blt.n	8008866 <lTCPWindowRxCheck+0x6a>
				if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 800885a:	b130      	cbz	r0, 800886a <lTCPWindowRxCheck+0x6e>
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 800885c:	6801      	ldr	r1, [r0, #0]
 800885e:	43db      	mvns	r3, r3
				if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8008860:	42cb      	cmn	r3, r1
 8008862:	bf58      	it	pl
 8008864:	4638      	movpl	r0, r7
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8008866:	6852      	ldr	r2, [r2, #4]
 8008868:	e7e5      	b.n	8008836 <lTCPWindowRxCheck+0x3a>
				if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 800886a:	4638      	mov	r0, r7
 800886c:	e7fb      	b.n	8008866 <lTCPWindowRxCheck+0x6a>
				ulCurrentSequenceNumber += ulLength;
 800886e:	4635      	mov	r5, r6
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
 8008870:	4629      	mov	r1, r5
 8008872:	4620      	mov	r0, r4
 8008874:	f7ff fe1a 	bl	80084ac <xTCPWindowRxFind>
 8008878:	4603      	mov	r3, r0
 800887a:	b938      	cbnz	r0, 800888c <lTCPWindowRxCheck+0x90>
					if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 800887c:	42b5      	cmp	r5, r6
 800887e:	d001      	beq.n	8008884 <lTCPWindowRxCheck+0x88>
						pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 8008880:	1bae      	subs	r6, r5, r6
 8008882:	6326      	str	r6, [r4, #48]	; 0x30
				pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 8008884:	6125      	str	r5, [r4, #16]
				lReturn = 0;
 8008886:	2000      	movs	r0, #0
 8008888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	e7d7      	b.n	8008840 <lTCPWindowRxCheck+0x44>
				ulCurrentSequenceNumber += ulLength;
 8008890:	4635      	mov	r5, r6
 8008892:	e7f7      	b.n	8008884 <lTCPWindowRxCheck+0x88>
		else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 8008894:	1c4a      	adds	r2, r1, #1
 8008896:	4296      	cmp	r6, r2
 8008898:	d0bf      	beq.n	800881a <lTCPWindowRxCheck+0x1e>
			ulLast = ulSequenceNumber + ulLength;
 800889a:	eb01 0708 	add.w	r7, r1, r8
			lDistance = ( int32_t ) ( ulLast - ulCurrentSequenceNumber );
 800889e:	1bba      	subs	r2, r7, r6
			if( lDistance <= 0 )
 80088a0:	2a00      	cmp	r2, #0
 80088a2:	ddba      	ble.n	800881a <lTCPWindowRxCheck+0x1e>
			else if( lDistance > ( int32_t ) ulSpace )
 80088a4:	429a      	cmp	r2, r3
 80088a6:	dcb8      	bgt.n	800881a <lTCPWindowRxCheck+0x1e>
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
 80088a8:	4639      	mov	r1, r7
 80088aa:	4620      	mov	r0, r4
 80088ac:	f7ff fdfe 	bl	80084ac <xTCPWindowRxFind>
 80088b0:	b9d8      	cbnz	r0, 80088ea <lTCPWindowRxCheck+0xee>
				pxWindow->ulOptionsData[0] = OPTION_CODE_SINGLE_SACK;
 80088b2:	4b11      	ldr	r3, [pc, #68]	; (80088f8 <lTCPWindowRxCheck+0xfc>)
 80088b4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80088b8:	ba2b      	rev	r3, r5
				pxWindow->ulOptionsData[1] = FreeRTOS_htonl( ulSequenceNumber );
 80088ba:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80088be:	ba3f      	rev	r7, r7
				pxWindow->ucOptionLength = 3 * sizeof( pxWindow->ulOptionsData[ 0 ] );
 80088c0:	230c      	movs	r3, #12
				pxWindow->ulOptionsData[2] = FreeRTOS_htonl( ulLast );
 80088c2:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
				pxWindow->ucOptionLength = 3 * sizeof( pxWindow->ulOptionsData[ 0 ] );
 80088c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 80088ca:	4629      	mov	r1, r5
 80088cc:	4620      	mov	r0, r4
 80088ce:	f7ff fded 	bl	80084ac <xTCPWindowRxFind>
				if( pxFound != NULL )
 80088d2:	2800      	cmp	r0, #0
 80088d4:	d1a1      	bne.n	800881a <lTCPWindowRxCheck+0x1e>
					pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 80088d6:	2301      	movs	r3, #1
 80088d8:	4642      	mov	r2, r8
 80088da:	4629      	mov	r1, r5
 80088dc:	4620      	mov	r0, r4
 80088de:	f7ff feaf 	bl	8008640 <xTCPWindowNew>
					if( pxFound == NULL )
 80088e2:	b928      	cbnz	r0, 80088f0 <lTCPWindowRxCheck+0xf4>
						pxWindow->ucOptionLength = 0u;
 80088e4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80088e8:	e797      	b.n	800881a <lTCPWindowRxCheck+0x1e>
					ulLast += ( uint32_t ) pxFound->lDataLength;
 80088ea:	6883      	ldr	r3, [r0, #8]
 80088ec:	441f      	add	r7, r3
 80088ee:	e7db      	b.n	80088a8 <lTCPWindowRxCheck+0xac>
						lReturn = ( int32_t ) ( ulSequenceNumber - ulCurrentSequenceNumber );
 80088f0:	1ba8      	subs	r0, r5, r6
	}
 80088f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f6:	bf00      	nop
 80088f8:	0a050101 	.word	0x0a050101

080088fc <lTCPWindowTxAdd>:
	{
 80088fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008900:	4616      	mov	r6, r2
	TCPSegment_t *pxSegment = pxWindow->pxHeadSegment;
 8008902:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
	{
 8008904:	4605      	mov	r5, r0
 8008906:	4698      	mov	r8, r3
	int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 8008908:	460f      	mov	r7, r1
		if( pxSegment != NULL )
 800890a:	b34a      	cbz	r2, 8008960 <lTCPWindowTxAdd+0x64>
			if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800890c:	6893      	ldr	r3, [r2, #8]
 800890e:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8008912:	4573      	cmp	r3, lr
 8008914:	da24      	bge.n	8008960 <lTCPWindowTxAdd+0x64>
				if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 8008916:	7d90      	ldrb	r0, [r2, #22]
 8008918:	f010 0001 	ands.w	r0, r0, #1
 800891c:	d120      	bne.n	8008960 <lTCPWindowTxAdd+0x64>
 800891e:	b30b      	cbz	r3, 8008964 <lTCPWindowTxAdd+0x68>
					lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 8008920:	ebae 0403 	sub.w	r4, lr, r3
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 8008924:	428c      	cmp	r4, r1
 8008926:	bfa8      	it	ge
 8008928:	460c      	movge	r4, r1
					pxSegment->lDataLength += lToWrite;
 800892a:	4423      	add	r3, r4
 800892c:	6093      	str	r3, [r2, #8]
					if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 800892e:	459e      	cmp	lr, r3
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8008930:	6b6b      	ldr	r3, [r5, #52]	; 0x34
						pxWindow->pxHeadSegment = NULL;
 8008932:	bfd8      	it	le
 8008934:	67e8      	strle	r0, [r5, #124]	; 0x7c
		lPosition += lCount;
 8008936:	4426      	add	r6, r4
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8008938:	4423      	add	r3, r4
		if( lPosition >= lMax )
 800893a:	45b0      	cmp	r8, r6
					lBytesLeft -= lToWrite;
 800893c:	eba1 0704 	sub.w	r7, r1, r4
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8008940:	636b      	str	r3, [r5, #52]	; 0x34
		if( lPosition >= lMax )
 8008942:	dc01      	bgt.n	8008948 <lTCPWindowTxAdd+0x4c>
			lPosition -= lMax;
 8008944:	eba6 0608 	sub.w	r6, r6, r8
			pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, pxWindow->usMSS );
 8008948:	f04f 0900 	mov.w	r9, #0
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800894c:	f105 0a54 	add.w	sl, r5, #84	; 0x54
 8008950:	f105 0b5c 	add.w	fp, r5, #92	; 0x5c
		while( lBytesLeft > 0 )
 8008954:	2f00      	cmp	r7, #0
 8008956:	dc07      	bgt.n	8008968 <lTCPWindowTxAdd+0x6c>
	}
 8008958:	4620      	mov	r0, r4
 800895a:	b003      	add	sp, #12
 800895c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int32_t lDone = 0;
 8008960:	2400      	movs	r4, #0
 8008962:	e7f1      	b.n	8008948 <lTCPWindowTxAdd+0x4c>
 8008964:	461c      	mov	r4, r3
 8008966:	e7ef      	b.n	8008948 <lTCPWindowTxAdd+0x4c>
			pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, pxWindow->usMSS );
 8008968:	2300      	movs	r3, #0
 800896a:	f8b5 20bc 	ldrh.w	r2, [r5, #188]	; 0xbc
 800896e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8008970:	4628      	mov	r0, r5
 8008972:	f7ff fe65 	bl	8008640 <xTCPWindowNew>
			if( pxSegment != NULL )
 8008976:	2800      	cmp	r0, #0
 8008978:	d0ee      	beq.n	8008958 <lTCPWindowTxAdd+0x5c>
 800897a:	6842      	ldr	r2, [r0, #4]
				pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800897c:	6b69      	ldr	r1, [r5, #52]	; 0x34
				pxSegment->lStreamPos = lPosition;
 800897e:	60c6      	str	r6, [r0, #12]
 8008980:	42ba      	cmp	r2, r7
 8008982:	bfa8      	it	ge
 8008984:	463a      	movge	r2, r7
		lPosition += lCount;
 8008986:	4416      	add	r6, r2
				pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8008988:	4411      	add	r1, r2
				pxSegment->lDataLength = lToWrite;
 800898a:	6082      	str	r2, [r0, #8]
		if( lPosition >= lMax )
 800898c:	45b0      	cmp	r8, r6
				pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800898e:	6369      	str	r1, [r5, #52]	; 0x34
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8008990:	9001      	str	r0, [sp, #4]
 8008992:	f100 0118 	add.w	r1, r0, #24
				lBytesLeft -= lToWrite;
 8008996:	eba7 0702 	sub.w	r7, r7, r2
				lDone += lToWrite;
 800899a:	4414      	add	r4, r2
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800899c:	4650      	mov	r0, sl
 800899e:	465a      	mov	r2, fp
			lPosition -= lMax;
 80089a0:	bfd8      	it	le
 80089a2:	eba6 0608 	suble.w	r6, r6, r8
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 80089a6:	f7ff fdbc 	bl	8008522 <vListInsertGeneric>
				if( pxSegment->lDataLength < pxSegment->lMaxLength )
 80089aa:	9b01      	ldr	r3, [sp, #4]
 80089ac:	6899      	ldr	r1, [r3, #8]
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	4291      	cmp	r1, r2
					pxWindow->pxHeadSegment = pxSegment;
 80089b2:	bfa8      	it	ge
 80089b4:	464b      	movge	r3, r9
 80089b6:	67eb      	str	r3, [r5, #124]	; 0x7c
 80089b8:	e7cc      	b.n	8008954 <lTCPWindowTxAdd+0x58>

080089ba <xTCPWindowTxDone>:
		return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments) );
 80089ba:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
	}
 80089be:	fab0 f080 	clz	r0, r0
 80089c2:	0940      	lsrs	r0, r0, #5
 80089c4:	4770      	bx	lr

080089c6 <xTCPWindowTxHasData>:
		*pulDelay = 0u;
 80089c6:	2300      	movs	r3, #0
	{
 80089c8:	b570      	push	{r4, r5, r6, lr}
		*pulDelay = 0u;
 80089ca:	6013      	str	r3, [r2, #0]
		if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 80089cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
	{
 80089ce:	4605      	mov	r5, r0
 80089d0:	4616      	mov	r6, r2
		if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 80089d2:	b97b      	cbnz	r3, 80089f4 <xTCPWindowTxHasData+0x2e>
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 80089d4:	3068      	adds	r0, #104	; 0x68
 80089d6:	f7ff fd78 	bl	80084ca <xTCPWindowPeekHead>
			if( pxSegment != NULL )
 80089da:	4604      	mov	r4, r0
 80089dc:	b160      	cbz	r0, 80089f8 <xTCPWindowTxHasData+0x32>
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 80089de:	f7fc f87b 	bl	8004ad8 <xTaskGetTickCount>
 80089e2:	6923      	ldr	r3, [r4, #16]
				ulMaxAge = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 80089e4:	7d22      	ldrb	r2, [r4, #20]
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 80089e6:	1ac0      	subs	r0, r0, r3
				ulMaxAge = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 80089e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80089ea:	4093      	lsls	r3, r2
				if( ulMaxAge > ulAge )
 80089ec:	4283      	cmp	r3, r0
 80089ee:	d901      	bls.n	80089f4 <xTCPWindowTxHasData+0x2e>
					*pulDelay = ulMaxAge - ulAge;
 80089f0:	1a1b      	subs	r3, r3, r0
 80089f2:	6033      	str	r3, [r6, #0]
					xReturn = pdTRUE;
 80089f4:	2001      	movs	r0, #1
 80089f6:	bd70      	pop	{r4, r5, r6, pc}
				pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 80089f8:	f105 0054 	add.w	r0, r5, #84	; 0x54
 80089fc:	f7ff fd65 	bl	80084ca <xTCPWindowPeekHead>
				if( pxSegment == NULL )
 8008a00:	4606      	mov	r6, r0
 8008a02:	b160      	cbz	r0, 8008a1e <xTCPWindowTxHasData+0x58>
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8008a04:	4628      	mov	r0, r5
 8008a06:	f7ff fd67 	bl	80084d8 <prvTCPWindowTxHasSpace>
 8008a0a:	b138      	cbz	r0, 8008a1c <xTCPWindowTxHasData+0x56>
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8008a0c:	782b      	ldrb	r3, [r5, #0]
 8008a0e:	079b      	lsls	r3, r3, #30
 8008a10:	d5f0      	bpl.n	80089f4 <xTCPWindowTxHasData+0x2e>
 8008a12:	68b2      	ldr	r2, [r6, #8]
 8008a14:	6873      	ldr	r3, [r6, #4]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	daec      	bge.n	80089f4 <xTCPWindowTxHasData+0x2e>
					xReturn = pdFALSE;
 8008a1a:	4620      	mov	r0, r4
	}
 8008a1c:	bd70      	pop	{r4, r5, r6, pc}
 8008a1e:	bd70      	pop	{r4, r5, r6, pc}

08008a20 <ulTCPWindowTxGet>:
	{
 8008a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a24:	4605      	mov	r5, r0
		pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 8008a26:	3040      	adds	r0, #64	; 0x40
	{
 8008a28:	460f      	mov	r7, r1
 8008a2a:	4616      	mov	r6, r2
		pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 8008a2c:	f7ff fd70 	bl	8008510 <xTCPWindowGetHead>
		pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 8008a30:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008a32:	62eb      	str	r3, [r5, #44]	; 0x2c
		if( pxSegment == NULL )
 8008a34:	4604      	mov	r4, r0
 8008a36:	b9c0      	cbnz	r0, 8008a6a <ulTCPWindowTxGet+0x4a>
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8008a38:	f105 0868 	add.w	r8, r5, #104	; 0x68
 8008a3c:	4640      	mov	r0, r8
 8008a3e:	f7ff fd44 	bl	80084ca <xTCPWindowPeekHead>
			if( pxSegment != NULL )
 8008a42:	4681      	mov	r9, r0
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d05c      	beq.n	8008b02 <ulTCPWindowTxGet+0xe2>
				ulMaxTime = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 8008a48:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008a4a:	7d04      	ldrb	r4, [r0, #20]
 8008a4c:	fa03 f404 	lsl.w	r4, r3, r4
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 8008a50:	f7fc f842 	bl	8004ad8 <xTaskGetTickCount>
 8008a54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a58:	1ac0      	subs	r0, r0, r3
				if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 8008a5a:	4284      	cmp	r4, r0
 8008a5c:	d251      	bcs.n	8008b02 <ulTCPWindowTxGet+0xe2>
					pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8008a5e:	4640      	mov	r0, r8
 8008a60:	f7ff fd56 	bl	8008510 <xTCPWindowGetHead>
					pxSegment->u.bits.ucDupAckCount = pdFALSE_UNSIGNED;
 8008a64:	2300      	movs	r3, #0
					pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8008a66:	4604      	mov	r4, r0
					pxSegment->u.bits.ucDupAckCount = pdFALSE_UNSIGNED;
 8008a68:	7543      	strb	r3, [r0, #21]
			configASSERT( listLIST_ITEM_CONTAINER( &(pxSegment->xQueueItem ) ) == NULL );
 8008a6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d13c      	bne.n	8008aea <ulTCPWindowTxGet+0xca>
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8008a70:	f105 0270 	add.w	r2, r5, #112	; 0x70
 8008a74:	f104 0118 	add.w	r1, r4, #24
 8008a78:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8008a7c:	f7ff fd51 	bl	8008522 <vListInsertGeneric>
			pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8008a80:	7da3      	ldrb	r3, [r4, #22]
 8008a82:	f043 0301 	orr.w	r3, r3, #1
 8008a86:	75a3      	strb	r3, [r4, #22]
			( pxSegment->u.bits.ucTransmitCount )++;
 8008a88:	7d23      	ldrb	r3, [r4, #20]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	b2db      	uxtb	r3, r3
			if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 8008a8e:	2b04      	cmp	r3, #4
			( pxSegment->u.bits.ucTransmitCount )++;
 8008a90:	7523      	strb	r3, [r4, #20]
			if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 8008a92:	d106      	bne.n	8008aa2 <ulTCPWindowTxGet+0x82>
				if( pxWindow->xSize.ulTxWindowLength > ( 2U * pxWindow->usMSS ) )
 8008a94:	f8b5 30bc 	ldrh.w	r3, [r5, #188]	; 0xbc
 8008a98:	68aa      	ldr	r2, [r5, #8]
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	429a      	cmp	r2, r3
					pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 8008a9e:	bf88      	it	hi
 8008aa0:	60ab      	strhi	r3, [r5, #8]
	pxTimer->ulBorn = xTaskGetTickCount ( );
 8008aa2:	f7fc f819 	bl	8004ad8 <xTaskGetTickCount>
			pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8008aa6:	6823      	ldr	r3, [r4, #0]
	pxTimer->ulBorn = xTaskGetTickCount ( );
 8008aa8:	6120      	str	r0, [r4, #16]
			pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8008aaa:	62eb      	str	r3, [r5, #44]	; 0x2c
			*plPosition = pxSegment->lStreamPos;
 8008aac:	68e3      	ldr	r3, [r4, #12]
 8008aae:	6033      	str	r3, [r6, #0]
			ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8008ab0:	68a0      	ldr	r0, [r4, #8]
 8008ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8008ab6:	782b      	ldrb	r3, [r5, #0]
 8008ab8:	079b      	lsls	r3, r3, #30
 8008aba:	d503      	bpl.n	8008ac4 <ulTCPWindowTxGet+0xa4>
 8008abc:	6882      	ldr	r2, [r0, #8]
 8008abe:	6843      	ldr	r3, [r0, #4]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	db1b      	blt.n	8008afc <ulTCPWindowTxGet+0xdc>
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	f7ff fd06 	bl	80084d8 <prvTCPWindowTxHasSpace>
 8008acc:	b310      	cbz	r0, 8008b14 <ulTCPWindowTxGet+0xf4>
					pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f7ff fd1e 	bl	8008510 <xTCPWindowGetHead>
					if( pxWindow->pxHeadSegment == pxSegment )
 8008ad4:	6feb      	ldr	r3, [r5, #124]	; 0x7c
					pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8008ad6:	6882      	ldr	r2, [r0, #8]
					if( pxWindow->pxHeadSegment == pxSegment )
 8008ad8:	4298      	cmp	r0, r3
						pxWindow->pxHeadSegment = NULL;
 8008ada:	bf04      	itt	eq
 8008adc:	2300      	moveq	r3, #0
 8008ade:	67eb      	streq	r3, [r5, #124]	; 0x7c
					pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8008ae0:	6803      	ldr	r3, [r0, #0]
 8008ae2:	4413      	add	r3, r2
					pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 8008ae4:	4604      	mov	r4, r0
					pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8008ae6:	62ab      	str	r3, [r5, #40]	; 0x28
 8008ae8:	e7bf      	b.n	8008a6a <ulTCPWindowTxGet+0x4a>
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	e7fe      	b.n	8008afa <ulTCPWindowTxGet+0xda>
 8008afc:	2000      	movs	r0, #0
 8008afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8008b02:	f105 0454 	add.w	r4, r5, #84	; 0x54
 8008b06:	4620      	mov	r0, r4
 8008b08:	f7ff fcdf 	bl	80084ca <xTCPWindowPeekHead>
				if( pxSegment == NULL )
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d1d2      	bne.n	8008ab6 <ulTCPWindowTxGet+0x96>
 8008b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}
 8008b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008b18 <ulTCPWindowTxAck>:
	{
	uint32_t ulFirstSequence, ulReturn;

		/* Receive a normal ACK. */

		ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 8008b18:	6a03      	ldr	r3, [r0, #32]
	{
 8008b1a:	460a      	mov	r2, r1
		return ( ( b - a ) & 0x80000000UL ) == 0UL;
 8008b1c:	1a59      	subs	r1, r3, r1

		if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8008b1e:	2900      	cmp	r1, #0
 8008b20:	da02      	bge.n	8008b28 <ulTCPWindowTxAck+0x10>
		{
			ulReturn = 0UL;
		}
		else
		{
			ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8008b22:	4619      	mov	r1, r3
 8008b24:	f7ff bd24 	b.w	8008570 <prvTCPWindowTxCheckAck>
		}

		return ulReturn;
	}
 8008b28:	2000      	movs	r0, #0
 8008b2a:	4770      	bx	lr

08008b2c <ulTCPWindowTxSack>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxSack( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 8008b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b30:	4605      	mov	r5, r0
 8008b32:	460f      	mov	r7, r1
	uint32_t ulAckCount = 0UL;
	uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;

		/* Receive a SACK option. */
		ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8008b34:	f7ff fd1c 	bl	8008570 <prvTCPWindowTxCheckAck>
		pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 8008b38:	f105 0a70 	add.w	sl, r5, #112	; 0x70
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8008b3c:	6f6e      	ldr	r6, [r5, #116]	; 0x74
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8008b3e:	f105 0940 	add.w	r9, r5, #64	; 0x40
		ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8008b42:	4680      	mov	r8, r0
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 8008b44:	3f01      	subs	r7, #1
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8008b46:	3548      	adds	r5, #72	; 0x48
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 8008b48:	45b2      	cmp	sl, r6
 8008b4a:	d102      	bne.n	8008b52 <ulTCPWindowTxSack+0x26>
				pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
			FreeRTOS_flush_logging( );
		}

		return ulAckCount;
	}
 8008b4c:	4640      	mov	r0, r8
 8008b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8008b52:	68f4      	ldr	r4, [r6, #12]
			pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8008b54:	6876      	ldr	r6, [r6, #4]
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 8008b56:	7da3      	ldrb	r3, [r4, #22]
 8008b58:	f013 0202 	ands.w	r2, r3, #2
 8008b5c:	d1f4      	bne.n	8008b48 <ulTCPWindowTxSack+0x1c>
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	1afb      	subs	r3, r7, r3
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	dbf0      	blt.n	8008b48 <ulTCPWindowTxSack+0x1c>
				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
 8008b66:	7d63      	ldrb	r3, [r4, #21]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	b2db      	uxtb	r3, r3
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	7563      	strb	r3, [r4, #21]
 8008b70:	d1ea      	bne.n	8008b48 <ulTCPWindowTxSack+0x1c>
				pxSegment->u.bits.ucTransmitCount = pdFALSE_UNSIGNED;
 8008b72:	7522      	strb	r2, [r4, #20]
				uxListRemove( &pxSegment->xQueueItem );
 8008b74:	3418      	adds	r4, #24
 8008b76:	4620      	mov	r0, r4
 8008b78:	f7fb f877 	bl	8003c6a <uxListRemove>
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8008b7c:	462a      	mov	r2, r5
 8008b7e:	4621      	mov	r1, r4
 8008b80:	4648      	mov	r0, r9
 8008b82:	f7ff fcce 	bl	8008522 <vListInsertGeneric>
 8008b86:	e7df      	b.n	8008b48 <ulTCPWindowTxSack+0x1c>

08008b88 <vProcessGeneratedUDPPacket>:
	}
};
/*-----------------------------------------------------------*/

void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b8a:	4604      	mov	r4, r0
UDPPacket_t *pxUDPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8008b8c:	6943      	ldr	r3, [r0, #20]

	/* Map the UDP packet onto the start of the frame. */
	pxUDPPacket = ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8008b8e:	69a5      	ldr	r5, [r4, #24]
uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8008b90:	a802      	add	r0, sp, #8

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 8008b92:	4629      	mov	r1, r5
uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8008b94:	f840 3d04 	str.w	r3, [r0, #-4]!
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 8008b98:	f7fc fca4 	bl	80054e4 <eARPGetCacheEntry>

	if( eReturned != eCantSendPacket )
 8008b9c:	2802      	cmp	r0, #2
 8008b9e:	d046      	beq.n	8008c2e <vProcessGeneratedUDPPacket+0xa6>
	{
		if( eReturned == eARPCacheHit )
 8008ba0:	2801      	cmp	r0, #1
 8008ba2:	d13a      	bne.n	8008c1a <vProcessGeneratedUDPPacket+0x92>
			pxIPHeader = &( pxUDPPacket->xIPHeader );

		#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
			/* Is it possible that the packet is not actually a UDP packet
			after all, but an ICMP packet. */
			if( pxNetworkBuffer->usPort != ipPACKET_CONTAINS_ICMP_DATA )
 8008ba4:	8c23      	ldrh	r3, [r4, #32]
 8008ba6:	b15b      	cbz	r3, 8008bc0 <vProcessGeneratedUDPPacket+0x38>
			{
			UDPHeader_t *pxUDPHeader;

				pxUDPHeader = &( pxUDPPacket->xUDPHeader );

				pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8008ba8:	84ab      	strh	r3, [r5, #36]	; 0x24
				pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8008baa:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8008bac:	846b      	strh	r3, [r5, #34]	; 0x22
				pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) );
 8008bae:	69e3      	ldr	r3, [r4, #28]
 8008bb0:	3308      	adds	r3, #8
				pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8008bb2:	ba5b      	rev16	r3, r3
 8008bb4:	84eb      	strh	r3, [r5, #38]	; 0x26
				pxUDPHeader->usChecksum = 0u;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 8008bbc:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
			*/
			/* Save options now, as they will be overwritten by memcpy */
			#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
				ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
			#endif
			memcpy( ( void *) &( pxUDPPacket->xEthernetHeader.xSourceAddress ), ( void * ) xDefaultPartUDPPacketHeader.ucBytes, sizeof( xDefaultPartUDPPacketHeader ) );
 8008bc0:	4e1d      	ldr	r6, [pc, #116]	; (8008c38 <vProcessGeneratedUDPPacket+0xb0>)
 8008bc2:	1daa      	adds	r2, r5, #6
 8008bc4:	f106 0718 	add.w	r7, r6, #24
 8008bc8:	4633      	mov	r3, r6
 8008bca:	cb03      	ldmia	r3!, {r0, r1}
 8008bcc:	42bb      	cmp	r3, r7
 8008bce:	6010      	str	r0, [r2, #0]
 8008bd0:	6051      	str	r1, [r2, #4]
 8008bd2:	461e      	mov	r6, r3
 8008bd4:	f102 0208 	add.w	r2, r2, #8
 8008bd8:	d1f6      	bne.n	8008bc8 <vProcessGeneratedUDPPacket+0x40>

		#if ipconfigSUPPORT_OUTGOING_PINGS == 1
			if( pxNetworkBuffer->usPort == ipPACKET_CONTAINS_ICMP_DATA )
 8008bda:	8c23      	ldrh	r3, [r4, #32]
 8008bdc:	b9d3      	cbnz	r3, 8008c14 <vProcessGeneratedUDPPacket+0x8c>
			{
				pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 8008bde:	2301      	movs	r3, #1
 8008be0:	75eb      	strb	r3, [r5, #23]
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) );
 8008be2:	69e3      	ldr	r3, [r4, #28]
 8008be4:	3314      	adds	r3, #20
			}
			else
		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
			{
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 8008be6:	822b      	strh	r3, [r5, #16]
			}

			/* The total transmit size adds on the Ethernet header. */
			pxNetworkBuffer->xDataLength = pxIPHeader->usLength + sizeof( EthernetHeader_t );
 8008be8:	8a2a      	ldrh	r2, [r5, #16]
 8008bea:	f102 030e 	add.w	r3, r2, #14
 8008bee:	61e3      	str	r3, [r4, #28]
			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8008bf0:	0a13      	lsrs	r3, r2, #8
 8008bf2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008bf6:	822b      	strh	r3, [r5, #16]

			#if( ipconfigUSE_LLMNR == 1 )
			{
				/* LLMNR messages are typically used on a LAN and they're
				 * not supposed to cross routers */
				if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 8008bf8:	4a10      	ldr	r2, [pc, #64]	; (8008c3c <vProcessGeneratedUDPPacket+0xb4>)
			pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 8008bfa:	6963      	ldr	r3, [r4, #20]
 8008bfc:	f8c5 301e 	str.w	r3, [r5, #30]
				if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d101      	bne.n	8008c08 <vProcessGeneratedUDPPacket+0x80>
				{
					pxIPHeader->ucTimeToLive = 0x01;
 8008c04:	2301      	movs	r3, #1
 8008c06:	75ab      	strb	r3, [r5, #22]
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
			}
		}
		#endif

		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8008c08:	2101      	movs	r1, #1
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f7f9 fe7e 	bl	800290c <xNetworkInterfaceOutput>
	{
		/* The packet can't be sent (DHCP not completed?).  Just drop the
		packet. */
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
	}
}
 8008c10:	b003      	add	sp, #12
 8008c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 8008c14:	69e3      	ldr	r3, [r4, #28]
 8008c16:	331c      	adds	r3, #28
 8008c18:	e7e5      	b.n	8008be6 <vProcessGeneratedUDPPacket+0x5e>
		else if( eReturned == eARPCacheMiss )
 8008c1a:	b940      	cbnz	r0, 8008c2e <vProcessGeneratedUDPPacket+0xa6>
			vARPRefreshCacheEntry( NULL, ulIPAddress );
 8008c1c:	9901      	ldr	r1, [sp, #4]
 8008c1e:	f7fc fb95 	bl	800534c <vARPRefreshCacheEntry>
			pxNetworkBuffer->ulIPAddress = ulIPAddress;
 8008c22:	9b01      	ldr	r3, [sp, #4]
 8008c24:	6163      	str	r3, [r4, #20]
			vARPGenerateRequestPacket( pxNetworkBuffer );
 8008c26:	4620      	mov	r0, r4
 8008c28:	f7fc fca6 	bl	8005578 <vARPGenerateRequestPacket>
 8008c2c:	e7ec      	b.n	8008c08 <vProcessGeneratedUDPPacket+0x80>
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 f898 	bl	8008d64 <vReleaseNetworkBufferAndDescriptor>
 8008c34:	e7ec      	b.n	8008c10 <vProcessGeneratedUDPPacket+0x88>
 8008c36:	bf00      	nop
 8008c38:	200001b0 	.word	0x200001b0
 8008c3c:	fc0000e0 	.word	0xfc0000e0

08008c40 <xProcessReceivedUDPPacket>:
/*-----------------------------------------------------------*/

BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer, uint16_t usPort )
{
 8008c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn = pdPASS;
FreeRTOS_Socket_t *pxSocket;

UDPPacket_t *pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 8008c42:	6985      	ldr	r5, [r0, #24]
{
 8008c44:	4606      	mov	r6, r0

	pxSocket = pxUDPSocketLookup( usPort );
 8008c46:	4608      	mov	r0, r1
{
 8008c48:	460f      	mov	r7, r1
	pxSocket = pxUDPSocketLookup( usPort );
 8008c4a:	f7fd ffa5 	bl	8006b98 <pxUDPSocketLookup>

	if( pxSocket )
 8008c4e:	4604      	mov	r4, r0
 8008c50:	b340      	cbz	r0, 8008ca4 <xProcessReceivedUDPPacket+0x64>
	{

		/* When refreshing the ARP cache with received UDP packets we must be
		careful;  hundreds of broadcast messages may pass and if we're not
		handling them, no use to fill the ARP cache with those IP addresses. */
		vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8008c52:	f8d5 101a 	ldr.w	r1, [r5, #26]
 8008c56:	1da8      	adds	r0, r5, #6
 8008c58:	f7fc fb78 	bl	800534c <vARPRefreshCacheEntry>
		}
		#endif

		if( xReturn == pdPASS )
		{
			vTaskSuspendAll();
 8008c5c:	f7fb ff34 	bl	8004ac8 <vTaskSuspendAll>
			{
				if( xReturn == pdPASS )
				{
					taskENTER_CRITICAL();
 8008c60:	f7fb f870 	bl	8003d44 <vPortEnterCritical>
					{
						/* Add the network packet to the list of packets to be
						processed by the socket. */
						vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8008c64:	4631      	mov	r1, r6
 8008c66:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8008c6a:	f7fa ffdb 	bl	8003c24 <vListInsertEnd>
					}
					taskEXIT_CRITICAL();
 8008c6e:	f7fb f88b 	bl	8003d88 <vPortExitCritical>
				}
			}
			xTaskResumeAll();
 8008c72:	f7fb ffc9 	bl	8004c08 <xTaskResumeAll>

			/* Set the socket's receive event */
			if( pxSocket->xEventGroup != NULL )
 8008c76:	6860      	ldr	r0, [r4, #4]
 8008c78:	b110      	cbz	r0, 8008c80 <xProcessReceivedUDPPacket+0x40>
			{
				xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 8008c7a:	2101      	movs	r1, #1
 8008c7c:	f7fa ff63 	bl	8003b46 <xEventGroupSetBits>
			}

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) )
 8008c80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c82:	b133      	cbz	r3, 8008c92 <xProcessReceivedUDPPacket+0x52>
 8008c84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008c86:	07d2      	lsls	r2, r2, #31
 8008c88:	d503      	bpl.n	8008c92 <xProcessReceivedUDPPacket+0x52>
				{
					xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_READ );
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	6818      	ldr	r0, [r3, #0]
 8008c8e:	f7fa ff5a 	bl	8003b46 <xEventGroupSetBits>
			}
			#endif

			#if( ipconfigUSE_DHCP == 1 )
			{
				if( xIsDHCPSocket( pxSocket ) )
 8008c92:	4620      	mov	r0, r4
 8008c94:	f7fc fe60 	bl	8005958 <xIsDHCPSocket>
 8008c98:	b110      	cbz	r0, 8008ca0 <xProcessReceivedUDPPacket+0x60>
				{
					xSendEventToIPTask( eDHCPEvent );
 8008c9a:	2004      	movs	r0, #4
 8008c9c:	f7fd fa52 	bl	8006144 <xSendEventToIPTask>
BaseType_t xReturn = pdPASS;
 8008ca0:	2001      	movs	r0, #1
 8008ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		#if( ipconfigUSE_DNS == 1 )
			/* a DNS reply, check for the source port.  Although the DNS client
			does open a UDP socket to send a messages, this socket will be
			closed after a short timeout.  Messages that come late (after the
			socket is closed) will be treated here. */
			if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ipDNS_PORT )
 8008ca4:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 8008ca6:	0a13      	lsrs	r3, r2, #8
 8008ca8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008cac:	b21b      	sxth	r3, r3
 8008cae:	2b35      	cmp	r3, #53	; 0x35
 8008cb0:	d109      	bne.n	8008cc6 <xProcessReceivedUDPPacket+0x86>
		#if( ipconfigUSE_LLMNR == 1 )
			/* a LLMNR request, check for the destination port. */
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
				( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
			{
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8008cb2:	1da8      	adds	r0, r5, #6
 8008cb4:	f8d5 101a 	ldr.w	r1, [r5, #26]
 8008cb8:	f7fc fb48 	bl	800534c <vARPRefreshCacheEntry>
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 8008cbc:	4630      	mov	r0, r6
			xReturn = pdFAIL;
		}
	}

	return xReturn;
}
 8008cbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 8008cc2:	f7fd b8ef 	b.w	8005ea4 <ulDNSHandlePacket>
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8008cc6:	f64e 3314 	movw	r3, #60180	; 0xeb14
 8008cca:	429f      	cmp	r7, r3
 8008ccc:	d0f1      	beq.n	8008cb2 <xProcessReceivedUDPPacket+0x72>
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d0ef      	beq.n	8008cb2 <xProcessReceivedUDPPacket+0x72>
}
 8008cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008cd4 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 8008cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
BaseType_t xReturn, x;

	/* Only initialise the buffers and their associated kernel objects if they
	have not been initialised before. */
	if( xNetworkBufferSemaphore == NULL )
 8008cd8:	4c1a      	ldr	r4, [pc, #104]	; (8008d44 <xNetworkBuffersInitialise+0x70>)
 8008cda:	6825      	ldr	r5, [r4, #0]
 8008cdc:	4626      	mov	r6, r4
 8008cde:	bb55      	cbnz	r5, 8008d36 <xNetworkBuffersInitialise+0x62>
	{
		xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 8008ce0:	2119      	movs	r1, #25
 8008ce2:	4608      	mov	r0, r1
 8008ce4:	f7fb fb33 	bl	800434e <xQueueCreateCountingSemaphore>
 8008ce8:	6020      	str	r0, [r4, #0]
		configASSERT( xNetworkBufferSemaphore );
 8008cea:	b940      	cbnz	r0, 8008cfe <xNetworkBuffersInitialise+0x2a>
 8008cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	e7fe      	b.n	8008cfc <xNetworkBuffersInitialise+0x28>
		#if ( configQUEUE_REGISTRY_SIZE > 0 )
		{
			vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 8008cfe:	4912      	ldr	r1, [pc, #72]	; (8008d48 <xNetworkBuffersInitialise+0x74>)
 8008d00:	f7fb fd34 	bl	800476c <vQueueAddToRegistry>
			vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
			vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
		}
		#endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

		if( xNetworkBufferSemaphore != NULL )
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	b1b3      	cbz	r3, 8008d36 <xNetworkBuffersInitialise+0x62>
		{
			vListInitialise( &xFreeBuffersList );
 8008d08:	4810      	ldr	r0, [pc, #64]	; (8008d4c <xNetworkBuffersInitialise+0x78>)
 8008d0a:	4c11      	ldr	r4, [pc, #68]	; (8008d50 <xNetworkBuffersInitialise+0x7c>)
				xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
				vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
				listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );

				/* Currently, all buffers are available for use. */
				vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 8008d0c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8008d4c <xNetworkBuffersInitialise+0x78>
			vListInitialise( &xFreeBuffersList );
 8008d10:	f7fa ff7a 	bl	8003c08 <vListInitialise>
 8008d14:	f504 7761 	add.w	r7, r4, #900	; 0x384
				xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 8008d18:	61a5      	str	r5, [r4, #24]
				vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f7fa ff7f 	bl	8003c1e <vListInitialiseItem>
				listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 8008d20:	60e4      	str	r4, [r4, #12]
				vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 8008d22:	4621      	mov	r1, r4
 8008d24:	4640      	mov	r0, r8
 8008d26:	3424      	adds	r4, #36	; 0x24
 8008d28:	f7fa ff88 	bl	8003c3c <vListInsert>
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8008d2c:	42bc      	cmp	r4, r7
 8008d2e:	d1f3      	bne.n	8008d18 <xNetworkBuffersInitialise+0x44>
			}

			uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 8008d30:	4b08      	ldr	r3, [pc, #32]	; (8008d54 <xNetworkBuffersInitialise+0x80>)
 8008d32:	2219      	movs	r2, #25
 8008d34:	601a      	str	r2, [r3, #0]
		}
	}

	if( xNetworkBufferSemaphore == NULL )
 8008d36:	6830      	ldr	r0, [r6, #0]
	{
		xReturn = pdPASS;
	}

	return xReturn;
}
 8008d38:	3000      	adds	r0, #0
 8008d3a:	bf18      	it	ne
 8008d3c:	2001      	movne	r0, #1
 8008d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d42:	bf00      	nop
 8008d44:	200052d8 	.word	0x200052d8
 8008d48:	08009794 	.word	0x08009794
 8008d4c:	20004f40 	.word	0x20004f40
 8008d50:	20004f54 	.word	0x20004f54
 8008d54:	20004f3c 	.word	0x20004f3c

08008d58 <vReleaseNetworkBuffer>:
void vReleaseNetworkBuffer( uint8_t *pucEthernetBuffer )
{
	/* There is space before the Ethernet buffer in which a pointer to the
	network buffer that references this Ethernet buffer is stored.  Remove the
	space before freeing the buffer. */
	if( pucEthernetBuffer != NULL )
 8008d58:	b110      	cbz	r0, 8008d60 <vReleaseNetworkBuffer+0x8>
	{
		pucEthernetBuffer -= ipBUFFER_PADDING;
		vPortFree( ( void * ) pucEthernetBuffer );
 8008d5a:	380a      	subs	r0, #10
 8008d5c:	f7fb b9de 	b.w	800411c <vPortFree>
 8008d60:	4770      	bx	lr
	...

08008d64 <vReleaseNetworkBufferAndDescriptor>:
	return pxReturn;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008d64:	b570      	push	{r4, r5, r6, lr}
 8008d66:	4605      	mov	r5, r0
	/* Ensure the buffer is returned to the list of free buffers before the
	counting semaphore is 'given' to say a buffer is available.  Release the
	storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
	IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
	MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
	vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 8008d68:	6980      	ldr	r0, [r0, #24]

	taskENTER_CRITICAL();
	{
		xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );

		if( xListItemAlreadyInFreeList == pdFALSE )
 8008d6a:	4c0e      	ldr	r4, [pc, #56]	; (8008da4 <vReleaseNetworkBufferAndDescriptor+0x40>)
	vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 8008d6c:	f7ff fff4 	bl	8008d58 <vReleaseNetworkBuffer>
	pxNetworkBuffer->pucEthernetBuffer = NULL;
 8008d70:	2300      	movs	r3, #0
 8008d72:	61ab      	str	r3, [r5, #24]
	taskENTER_CRITICAL();
 8008d74:	f7fa ffe6 	bl	8003d44 <vPortEnterCritical>
		xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8008d78:	692e      	ldr	r6, [r5, #16]
		if( xListItemAlreadyInFreeList == pdFALSE )
 8008d7a:	42a6      	cmp	r6, r4
 8008d7c:	d003      	beq.n	8008d86 <vReleaseNetworkBufferAndDescriptor+0x22>
		{
			vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8008d7e:	4629      	mov	r1, r5
 8008d80:	4620      	mov	r0, r4
 8008d82:	f7fa ff4f 	bl	8003c24 <vListInsertEnd>
		}
	}
	taskEXIT_CRITICAL();
 8008d86:	f7fa ffff 	bl	8003d88 <vPortExitCritical>

	if( xListItemAlreadyInFreeList == pdFALSE )
 8008d8a:	42a6      	cmp	r6, r4
 8008d8c:	d008      	beq.n	8008da0 <vReleaseNetworkBufferAndDescriptor+0x3c>
	{
		xSemaphoreGive( xNetworkBufferSemaphore );
 8008d8e:	4806      	ldr	r0, [pc, #24]	; (8008da8 <vReleaseNetworkBufferAndDescriptor+0x44>)
 8008d90:	2300      	movs	r3, #0
 8008d92:	461a      	mov	r2, r3
 8008d94:	4619      	mov	r1, r3
 8008d96:	6800      	ldr	r0, [r0, #0]
	}

	iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
}
 8008d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		xSemaphoreGive( xNetworkBufferSemaphore );
 8008d9c:	f7fb baf6 	b.w	800438c <xQueueGenericSend>
 8008da0:	bd70      	pop	{r4, r5, r6, pc}
 8008da2:	bf00      	nop
 8008da4:	20004f40 	.word	0x20004f40
 8008da8:	200052d8 	.word	0x200052d8

08008dac <pxGetNetworkBufferWithDescriptor>:
	if( ( xRequestedSizeBytes != 0u ) && ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 8008dac:	1e43      	subs	r3, r0, #1
		xRequestedSizeBytes = baMINIMAL_BUFFER_SIZE;
 8008dae:	2b44      	cmp	r3, #68	; 0x44
 8008db0:	bf98      	it	ls
 8008db2:	2046      	movls	r0, #70	; 0x46
{
 8008db4:	b570      	push	{r4, r5, r6, lr}
	xRequestedSizeBytes += 2u;
 8008db6:	1c84      	adds	r4, r0, #2
	if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8008db8:	481e      	ldr	r0, [pc, #120]	; (8008e34 <pxGetNetworkBufferWithDescriptor+0x88>)
	if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1u ) ) != 0u )
 8008dba:	07a3      	lsls	r3, r4, #30
	if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8008dbc:	f04f 0300 	mov.w	r3, #0
		xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1u ) ) + 1u;
 8008dc0:	bf18      	it	ne
 8008dc2:	f044 0403 	orrne.w	r4, r4, #3
{
 8008dc6:	460a      	mov	r2, r1
	if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8008dc8:	6800      	ldr	r0, [r0, #0]
 8008dca:	4619      	mov	r1, r3
		xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1u ) ) + 1u;
 8008dcc:	bf18      	it	ne
 8008dce:	3401      	addne	r4, #1
	if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8008dd0:	f7fb fbf4 	bl	80045bc <xQueueGenericReceive>
 8008dd4:	2801      	cmp	r0, #1
 8008dd6:	d125      	bne.n	8008e24 <pxGetNetworkBufferWithDescriptor+0x78>
			pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8008dd8:	4e17      	ldr	r6, [pc, #92]	; (8008e38 <pxGetNetworkBufferWithDescriptor+0x8c>)
		taskENTER_CRITICAL();
 8008dda:	f7fa ffb3 	bl	8003d44 <vPortEnterCritical>
			pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8008dde:	68f3      	ldr	r3, [r6, #12]
 8008de0:	68dd      	ldr	r5, [r3, #12]
			uxListRemove( &( pxReturn->xBufferListItem ) );
 8008de2:	4628      	mov	r0, r5
 8008de4:	f7fa ff41 	bl	8003c6a <uxListRemove>
		taskEXIT_CRITICAL();
 8008de8:	f7fa ffce 	bl	8003d88 <vPortExitCritical>
		if( uxMinimumFreeNetworkBuffers > uxCount )
 8008dec:	4b13      	ldr	r3, [pc, #76]	; (8008e3c <pxGetNetworkBufferWithDescriptor+0x90>)
		uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8008dee:	6832      	ldr	r2, [r6, #0]
		if( uxMinimumFreeNetworkBuffers > uxCount )
 8008df0:	6819      	ldr	r1, [r3, #0]
 8008df2:	428a      	cmp	r2, r1
			uxMinimumFreeNetworkBuffers = uxCount;
 8008df4:	bf38      	it	cc
 8008df6:	601a      	strcc	r2, [r3, #0]
		configASSERT( pxReturn->pucEthernetBuffer == NULL );
 8008df8:	69ab      	ldr	r3, [r5, #24]
 8008dfa:	b143      	cbz	r3, 8008e0e <pxGetNetworkBufferWithDescriptor+0x62>
 8008dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	e7fe      	b.n	8008e0c <pxGetNetworkBufferWithDescriptor+0x60>
		if( xRequestedSizeBytes > 0 )
 8008e0e:	b17c      	cbz	r4, 8008e30 <pxGetNetworkBufferWithDescriptor+0x84>
			pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
 8008e10:	f104 000a 	add.w	r0, r4, #10
 8008e14:	f7fb f8f0 	bl	8003ff8 <pvPortMalloc>
 8008e18:	4606      	mov	r6, r0
 8008e1a:	61a8      	str	r0, [r5, #24]
			if( pxReturn->pucEthernetBuffer == NULL )
 8008e1c:	b920      	cbnz	r0, 8008e28 <pxGetNetworkBufferWithDescriptor+0x7c>
				vReleaseNetworkBufferAndDescriptor( pxReturn );
 8008e1e:	4628      	mov	r0, r5
 8008e20:	f7ff ffa0 	bl	8008d64 <vReleaseNetworkBufferAndDescriptor>
NetworkBufferDescriptor_t *pxReturn = NULL;
 8008e24:	2500      	movs	r5, #0
	return pxReturn;
 8008e26:	e003      	b.n	8008e30 <pxGetNetworkBufferWithDescriptor+0x84>
				*( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 8008e28:	f846 5b0a 	str.w	r5, [r6], #10
				pxReturn->xDataLength = xRequestedSizeBytes;
 8008e2c:	61ec      	str	r4, [r5, #28]
				pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 8008e2e:	61ae      	str	r6, [r5, #24]
}
 8008e30:	4628      	mov	r0, r5
 8008e32:	bd70      	pop	{r4, r5, r6, pc}
 8008e34:	200052d8 	.word	0x200052d8
 8008e38:	20004f40 	.word	0x20004f40
 8008e3c:	20004f3c 	.word	0x20004f3c

08008e40 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8008e40:	e7fe      	b.n	8008e40 <vApplicationStackOverflowHook>

08008e42 <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8008e42:	e7fe      	b.n	8008e42 <vApplicationMallocFailedHook>

08008e44 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8008e44:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8008e46:	f7f9 f8ef 	bl	8002028 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8008e4a:	4c05      	ldr	r4, [pc, #20]	; (8008e60 <StartDefaultTask+0x1c>)
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e52:	f7f7 fce4 	bl	800081e <HAL_GPIO_TogglePin>
    osDelay(1000);
 8008e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008e5a:	f7fa fda7 	bl	80039ac <osDelay>
 8008e5e:	e7f5      	b.n	8008e4c <StartDefaultTask+0x8>
 8008e60:	40020c00 	.word	0x40020c00

08008e64 <SystemClock_Config>:
{
 8008e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e66:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e68:	4b27      	ldr	r3, [pc, #156]	; (8008f08 <SystemClock_Config+0xa4>)
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	9101      	str	r1, [sp, #4]
 8008e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008e74:	641a      	str	r2, [r3, #64]	; 0x40
 8008e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e7c:	9301      	str	r3, [sp, #4]
 8008e7e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e80:	4b22      	ldr	r3, [pc, #136]	; (8008f0c <SystemClock_Config+0xa8>)
 8008e82:	9102      	str	r1, [sp, #8]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008e92:	9302      	str	r3, [sp, #8]
 8008e94:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e9a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008e9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008ea0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8008ea2:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008ea4:	2404      	movs	r4, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008ea6:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008ea8:	2702      	movs	r7, #2
  RCC_OscInitStruct.PLL.PLLN = 96;
 8008eaa:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008eac:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8008eae:	2306      	movs	r3, #6
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008eb0:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008eb2:	970e      	str	r7, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008eb4:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8008eb6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008eb8:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008eba:	f7f8 f907 	bl	80010cc <HAL_RCC_OscConfig>
 8008ebe:	b100      	cbz	r0, 8008ec2 <SystemClock_Config+0x5e>
 8008ec0:	e7fe      	b.n	8008ec0 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008ec2:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8008ec4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008ec8:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008eca:	4631      	mov	r1, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008ecc:	250f      	movs	r5, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008ece:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008ed0:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008ed2:	9704      	str	r7, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8008ed4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008ed6:	f7f8 faa9 	bl	800142c <HAL_RCC_ClockConfig>
 8008eda:	4606      	mov	r6, r0
 8008edc:	b100      	cbz	r0, 8008ee0 <SystemClock_Config+0x7c>
 8008ede:	e7fe      	b.n	8008ede <SystemClock_Config+0x7a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008ee0:	f7f8 fb3e 	bl	8001560 <HAL_RCC_GetHCLKFreq>
 8008ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ee8:	fbb0 f0f3 	udiv	r0, r0, r3
 8008eec:	f7f7 fb9a 	bl	8000624 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f7f7 fbad 	bl	8000650 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8008ef6:	4632      	mov	r2, r6
 8008ef8:	4629      	mov	r1, r5
 8008efa:	f04f 30ff 	mov.w	r0, #4294967295
 8008efe:	f7f7 fb51 	bl	80005a4 <HAL_NVIC_SetPriority>
}
 8008f02:	b015      	add	sp, #84	; 0x54
 8008f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f06:	bf00      	nop
 8008f08:	40023800 	.word	0x40023800
 8008f0c:	40007000 	.word	0x40007000

08008f10 <main>:
{
 8008f10:	b500      	push	{lr}
 8008f12:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008f14:	2400      	movs	r4, #0
  HAL_Init();
 8008f16:	f7f7 faf3 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 8008f1a:	f7ff ffa3 	bl	8008e64 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008f1e:	4b23      	ldr	r3, [pc, #140]	; (8008fac <main+0x9c>)
 8008f20:	9402      	str	r4, [sp, #8]
 8008f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8008f24:	4822      	ldr	r0, [pc, #136]	; (8008fb0 <main+0xa0>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8008f26:	4e23      	ldr	r6, [pc, #140]	; (8008fb4 <main+0xa4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008f28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f2c:	631a      	str	r2, [r3, #48]	; 0x30
 8008f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f30:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8008f34:	9202      	str	r2, [sp, #8]
 8008f36:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008f38:	9403      	str	r4, [sp, #12]
 8008f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f3c:	f042 0208 	orr.w	r2, r2, #8
 8008f40:	631a      	str	r2, [r3, #48]	; 0x30
 8008f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f44:	f002 0208 	and.w	r2, r2, #8
 8008f48:	9203      	str	r2, [sp, #12]
 8008f4a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f4c:	9404      	str	r4, [sp, #16]
 8008f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f50:	f042 0201 	orr.w	r2, r2, #1
 8008f54:	631a      	str	r2, [r3, #48]	; 0x30
 8008f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f58:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8008f5c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f5e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8008f60:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f64:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8008f66:	f7f7 fc55 	bl	8000814 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8008f6a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8008f6e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f70:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f72:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f74:	480e      	ldr	r0, [pc, #56]	; (8008fb0 <main+0xa0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f76:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f78:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f7a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f7c:	f7f7 fb74 	bl	8000668 <HAL_GPIO_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8008f80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008f82:	ad05      	add	r5, sp, #20
 8008f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008f86:	6833      	ldr	r3, [r6, #0]
 8008f88:	602b      	str	r3, [r5, #0]
	FreeRTOS_IPInit( ucIPAddress,
 8008f8a:	4b0b      	ldr	r3, [pc, #44]	; (8008fb8 <main+0xa8>)
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	4a0b      	ldr	r2, [pc, #44]	; (8008fbc <main+0xac>)
 8008f90:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <main+0xb0>)
 8008f92:	490c      	ldr	r1, [pc, #48]	; (8008fc4 <main+0xb4>)
 8008f94:	480c      	ldr	r0, [pc, #48]	; (8008fc8 <main+0xb8>)
 8008f96:	f7fd f811 	bl	8005fbc <FreeRTOS_IPInit>
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	a805      	add	r0, sp, #20
 8008f9e:	f7fa fced 	bl	800397c <osThreadCreate>
 8008fa2:	4b0a      	ldr	r3, [pc, #40]	; (8008fcc <main+0xbc>)
 8008fa4:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8008fa6:	f7fa fce4 	bl	8003972 <osKernelStart>
 8008faa:	e7fe      	b.n	8008faa <main+0x9a>
 8008fac:	40023800 	.word	0x40023800
 8008fb0:	40020c00 	.word	0x40020c00
 8008fb4:	080095d8 	.word	0x080095d8
 8008fb8:	200001c8 	.word	0x200001c8
 8008fbc:	080097b7 	.word	0x080097b7
 8008fc0:	080097b3 	.word	0x080097b3
 8008fc4:	080097bf 	.word	0x080097bf
 8008fc8:	080097bb 	.word	0x080097bb
 8008fcc:	2000652c 	.word	0x2000652c

08008fd0 <vApplicationPingReplyHook>:
{
 8008fd0:	4770      	bx	lr

08008fd2 <vApplicationIPNetworkEventHook>:
{
 8008fd2:	4770      	bx	lr

08008fd4 <pcApplicationHostnameHook>:
}
 8008fd4:	4800      	ldr	r0, [pc, #0]	; (8008fd8 <pcApplicationHostnameHook+0x4>)
 8008fd6:	4770      	bx	lr
 8008fd8:	0800979e 	.word	0x0800979e

08008fdc <uxRand>:
{
 8008fdc:	b508      	push	{r3, lr}
	return( ( int ) ( rand() >> 16UL ) & 0x7fffUL );
 8008fde:	f000 fa21 	bl	8009424 <rand>
}
 8008fe2:	f3c0 400e 	ubfx	r0, r0, #16, #15
 8008fe6:	bd08      	pop	{r3, pc}

08008fe8 <xApplicationDNSQueryHook>:
{
 8008fe8:	b510      	push	{r4, lr}
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8008fea:	4907      	ldr	r1, [pc, #28]	; (8009008 <xApplicationDNSQueryHook+0x20>)
{
 8008fec:	4604      	mov	r4, r0
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8008fee:	f000 fa63 	bl	80094b8 <strcasecmp>
 8008ff2:	b138      	cbz	r0, 8009004 <xApplicationDNSQueryHook+0x1c>
	else if( strcasecmp( pcName, mainDEVICE_NICK_NAME ) == 0 )
 8008ff4:	4905      	ldr	r1, [pc, #20]	; (800900c <xApplicationDNSQueryHook+0x24>)
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f000 fa5e 	bl	80094b8 <strcasecmp>
 8008ffc:	fab0 f080 	clz	r0, r0
 8009000:	0940      	lsrs	r0, r0, #5
 8009002:	bd10      	pop	{r4, pc}
 8009004:	2001      	movs	r0, #1
}
 8009006:	bd10      	pop	{r4, pc}
 8009008:	0800979e 	.word	0x0800979e
 800900c:	080097c3 	.word	0x080097c3

08009010 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8009010:	6802      	ldr	r2, [r0, #0]
 8009012:	4b03      	ldr	r3, [pc, #12]	; (8009020 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8009014:	429a      	cmp	r2, r3
 8009016:	d101      	bne.n	800901c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8009018:	f7f7 ba8c 	b.w	8000534 <HAL_IncTick>
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	40010000 	.word	0x40010000

08009024 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8009024:	e7fe      	b.n	8009024 <_Error_Handler>
	...

08009028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009028:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800902a:	4b22      	ldr	r3, [pc, #136]	; (80090b4 <HAL_MspInit+0x8c>)
 800902c:	2400      	movs	r4, #0
 800902e:	9400      	str	r4, [sp, #0]
 8009030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009032:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009036:	645a      	str	r2, [r3, #68]	; 0x44
 8009038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800903a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800903e:	9200      	str	r2, [sp, #0]
 8009040:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009042:	9401      	str	r4, [sp, #4]
 8009044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009046:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800904a:	641a      	str	r2, [r3, #64]	; 0x40
 800904c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009052:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009054:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8009056:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009058:	f7f7 fa92 	bl	8000580 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800905c:	4622      	mov	r2, r4
 800905e:	4621      	mov	r1, r4
 8009060:	f06f 000b 	mvn.w	r0, #11
 8009064:	f7f7 fa9e 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8009068:	4622      	mov	r2, r4
 800906a:	4621      	mov	r1, r4
 800906c:	f06f 000a 	mvn.w	r0, #10
 8009070:	f7f7 fa98 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8009074:	4622      	mov	r2, r4
 8009076:	4621      	mov	r1, r4
 8009078:	f06f 0009 	mvn.w	r0, #9
 800907c:	f7f7 fa92 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8009080:	4622      	mov	r2, r4
 8009082:	4621      	mov	r1, r4
 8009084:	f06f 0004 	mvn.w	r0, #4
 8009088:	f7f7 fa8c 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800908c:	4622      	mov	r2, r4
 800908e:	4621      	mov	r1, r4
 8009090:	f06f 0003 	mvn.w	r0, #3
 8009094:	f7f7 fa86 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009098:	4622      	mov	r2, r4
 800909a:	210f      	movs	r1, #15
 800909c:	f06f 0001 	mvn.w	r0, #1
 80090a0:	f7f7 fa80 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80090a4:	4622      	mov	r2, r4
 80090a6:	210f      	movs	r1, #15
 80090a8:	f04f 30ff 	mov.w	r0, #4294967295
 80090ac:	f7f7 fa7a 	bl	80005a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80090b0:	b002      	add	sp, #8
 80090b2:	bd10      	pop	{r4, pc}
 80090b4:	40023800 	.word	0x40023800

080090b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80090b8:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80090ba:	4601      	mov	r1, r0
{
 80090bc:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80090be:	2200      	movs	r2, #0
 80090c0:	2019      	movs	r0, #25
 80090c2:	f7f7 fa6f 	bl	80005a4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80090c6:	2019      	movs	r0, #25
 80090c8:	f7f7 faa0 	bl	800060c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80090cc:	2500      	movs	r5, #0
 80090ce:	4b14      	ldr	r3, [pc, #80]	; (8009120 <HAL_InitTick+0x68>)
 80090d0:	9502      	str	r5, [sp, #8]
 80090d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80090d4:	4c13      	ldr	r4, [pc, #76]	; (8009124 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 80090d6:	f042 0201 	orr.w	r2, r2, #1
 80090da:	645a      	str	r2, [r3, #68]	; 0x44
 80090dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80090e4:	a901      	add	r1, sp, #4
 80090e6:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 80090e8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80090ea:	f7f8 fa4f 	bl	800158c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80090ee:	f7f8 fa3d 	bl	800156c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80090f2:	4b0d      	ldr	r3, [pc, #52]	; (8009128 <HAL_InitTick+0x70>)
 80090f4:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80090f6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80090fa:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80090fc:	4b0b      	ldr	r3, [pc, #44]	; (800912c <HAL_InitTick+0x74>)
 80090fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8009102:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8009104:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8009106:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8009108:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800910a:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800910c:	f7f8 fb5a 	bl	80017c4 <HAL_TIM_Base_Init>
 8009110:	b920      	cbnz	r0, 800911c <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8009112:	4620      	mov	r0, r4
 8009114:	f7f8 fa59 	bl	80015ca <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8009118:	b009      	add	sp, #36	; 0x24
 800911a:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800911c:	2001      	movs	r0, #1
 800911e:	e7fb      	b.n	8009118 <HAL_InitTick+0x60>
 8009120:	40023800 	.word	0x40023800
 8009124:	20006530 	.word	0x20006530
 8009128:	40010000 	.word	0x40010000
 800912c:	000f4240 	.word	0x000f4240

08009130 <NMI_Handler>:
 8009130:	4770      	bx	lr

08009132 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8009132:	e7fe      	b.n	8009132 <HardFault_Handler>

08009134 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8009134:	e7fe      	b.n	8009134 <MemManage_Handler>

08009136 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8009136:	e7fe      	b.n	8009136 <BusFault_Handler>

08009138 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8009138:	e7fe      	b.n	8009138 <UsageFault_Handler>

0800913a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800913a:	4770      	bx	lr

0800913c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800913c:	f7fa bc3e 	b.w	80039bc <osSystickHandler>

08009140 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009140:	4801      	ldr	r0, [pc, #4]	; (8009148 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8009142:	f7f8 ba51 	b.w	80015e8 <HAL_TIM_IRQHandler>
 8009146:	bf00      	nop
 8009148:	20006530 	.word	0x20006530

0800914c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800914c:	490f      	ldr	r1, [pc, #60]	; (800918c <SystemInit+0x40>)
 800914e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8009152:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800915a:	4b0d      	ldr	r3, [pc, #52]	; (8009190 <SystemInit+0x44>)
 800915c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800915e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8009160:	f042 0201 	orr.w	r2, r2, #1
 8009164:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8009166:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800916e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009172:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009174:	4a07      	ldr	r2, [pc, #28]	; (8009194 <SystemInit+0x48>)
 8009176:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800917e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009180:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009182:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009186:	608b      	str	r3, [r1, #8]
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	e000ed00 	.word	0xe000ed00
 8009190:	40023800 	.word	0x40023800
 8009194:	24003010 	.word	0x24003010

08009198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8009198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80091d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800919c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800919e:	e003      	b.n	80091a8 <LoopCopyDataInit>

080091a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80091a0:	4b0c      	ldr	r3, [pc, #48]	; (80091d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80091a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80091a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80091a6:	3104      	adds	r1, #4

080091a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80091a8:	480b      	ldr	r0, [pc, #44]	; (80091d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80091aa:	4b0c      	ldr	r3, [pc, #48]	; (80091dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80091ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80091ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80091b0:	d3f6      	bcc.n	80091a0 <CopyDataInit>
  ldr  r2, =_sbss
 80091b2:	4a0b      	ldr	r2, [pc, #44]	; (80091e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80091b4:	e002      	b.n	80091bc <LoopFillZerobss>

080091b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80091b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80091b8:	f842 3b04 	str.w	r3, [r2], #4

080091bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80091bc:	4b09      	ldr	r3, [pc, #36]	; (80091e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80091be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80091c0:	d3f9      	bcc.n	80091b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80091c2:	f7ff ffc3 	bl	800914c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80091c6:	f000 f811 	bl	80091ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80091ca:	f7ff fea1 	bl	8008f10 <main>
  bx  lr    
 80091ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80091d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80091d4:	080098fc 	.word	0x080098fc
  ldr  r0, =_sdata
 80091d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80091dc:	200003a4 	.word	0x200003a4
  ldr  r2, =_sbss
 80091e0:	200003a8 	.word	0x200003a8
  ldr  r3, = _ebss
 80091e4:	20006570 	.word	0x20006570

080091e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80091e8:	e7fe      	b.n	80091e8 <ADC_IRQHandler>
	...

080091ec <__libc_init_array>:
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	4e0d      	ldr	r6, [pc, #52]	; (8009224 <__libc_init_array+0x38>)
 80091f0:	4c0d      	ldr	r4, [pc, #52]	; (8009228 <__libc_init_array+0x3c>)
 80091f2:	1ba4      	subs	r4, r4, r6
 80091f4:	10a4      	asrs	r4, r4, #2
 80091f6:	2500      	movs	r5, #0
 80091f8:	42a5      	cmp	r5, r4
 80091fa:	d109      	bne.n	8009210 <__libc_init_array+0x24>
 80091fc:	4e0b      	ldr	r6, [pc, #44]	; (800922c <__libc_init_array+0x40>)
 80091fe:	4c0c      	ldr	r4, [pc, #48]	; (8009230 <__libc_init_array+0x44>)
 8009200:	f000 f9de 	bl	80095c0 <_init>
 8009204:	1ba4      	subs	r4, r4, r6
 8009206:	10a4      	asrs	r4, r4, #2
 8009208:	2500      	movs	r5, #0
 800920a:	42a5      	cmp	r5, r4
 800920c:	d105      	bne.n	800921a <__libc_init_array+0x2e>
 800920e:	bd70      	pop	{r4, r5, r6, pc}
 8009210:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009214:	4798      	blx	r3
 8009216:	3501      	adds	r5, #1
 8009218:	e7ee      	b.n	80091f8 <__libc_init_array+0xc>
 800921a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800921e:	4798      	blx	r3
 8009220:	3501      	adds	r5, #1
 8009222:	e7f2      	b.n	800920a <__libc_init_array+0x1e>
 8009224:	080098f4 	.word	0x080098f4
 8009228:	080098f4 	.word	0x080098f4
 800922c:	080098f4 	.word	0x080098f4
 8009230:	080098f8 	.word	0x080098f8

08009234 <malloc>:
 8009234:	4b02      	ldr	r3, [pc, #8]	; (8009240 <malloc+0xc>)
 8009236:	4601      	mov	r1, r0
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	f000 b895 	b.w	8009368 <_malloc_r>
 800923e:	bf00      	nop
 8009240:	200001d4 	.word	0x200001d4

08009244 <free>:
 8009244:	4b02      	ldr	r3, [pc, #8]	; (8009250 <free+0xc>)
 8009246:	4601      	mov	r1, r0
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	f000 b83f 	b.w	80092cc <_free_r>
 800924e:	bf00      	nop
 8009250:	200001d4 	.word	0x200001d4

08009254 <memcmp>:
 8009254:	b510      	push	{r4, lr}
 8009256:	3901      	subs	r1, #1
 8009258:	4402      	add	r2, r0
 800925a:	4290      	cmp	r0, r2
 800925c:	d101      	bne.n	8009262 <memcmp+0xe>
 800925e:	2000      	movs	r0, #0
 8009260:	bd10      	pop	{r4, pc}
 8009262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009266:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800926a:	42a3      	cmp	r3, r4
 800926c:	d0f5      	beq.n	800925a <memcmp+0x6>
 800926e:	1b18      	subs	r0, r3, r4
 8009270:	bd10      	pop	{r4, pc}

08009272 <memcpy>:
 8009272:	b510      	push	{r4, lr}
 8009274:	1e43      	subs	r3, r0, #1
 8009276:	440a      	add	r2, r1
 8009278:	4291      	cmp	r1, r2
 800927a:	d100      	bne.n	800927e <memcpy+0xc>
 800927c:	bd10      	pop	{r4, pc}
 800927e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009286:	e7f7      	b.n	8009278 <memcpy+0x6>

08009288 <memmove>:
 8009288:	4288      	cmp	r0, r1
 800928a:	b510      	push	{r4, lr}
 800928c:	eb01 0302 	add.w	r3, r1, r2
 8009290:	d803      	bhi.n	800929a <memmove+0x12>
 8009292:	1e42      	subs	r2, r0, #1
 8009294:	4299      	cmp	r1, r3
 8009296:	d10c      	bne.n	80092b2 <memmove+0x2a>
 8009298:	bd10      	pop	{r4, pc}
 800929a:	4298      	cmp	r0, r3
 800929c:	d2f9      	bcs.n	8009292 <memmove+0xa>
 800929e:	1881      	adds	r1, r0, r2
 80092a0:	1ad2      	subs	r2, r2, r3
 80092a2:	42d3      	cmn	r3, r2
 80092a4:	d100      	bne.n	80092a8 <memmove+0x20>
 80092a6:	bd10      	pop	{r4, pc}
 80092a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80092b0:	e7f7      	b.n	80092a2 <memmove+0x1a>
 80092b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80092ba:	e7eb      	b.n	8009294 <memmove+0xc>

080092bc <memset>:
 80092bc:	4402      	add	r2, r0
 80092be:	4603      	mov	r3, r0
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d100      	bne.n	80092c6 <memset+0xa>
 80092c4:	4770      	bx	lr
 80092c6:	f803 1b01 	strb.w	r1, [r3], #1
 80092ca:	e7f9      	b.n	80092c0 <memset+0x4>

080092cc <_free_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	4605      	mov	r5, r0
 80092d0:	2900      	cmp	r1, #0
 80092d2:	d045      	beq.n	8009360 <_free_r+0x94>
 80092d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092d8:	1f0c      	subs	r4, r1, #4
 80092da:	2b00      	cmp	r3, #0
 80092dc:	bfb8      	it	lt
 80092de:	18e4      	addlt	r4, r4, r3
 80092e0:	f000 f950 	bl	8009584 <__malloc_lock>
 80092e4:	4a1f      	ldr	r2, [pc, #124]	; (8009364 <_free_r+0x98>)
 80092e6:	6813      	ldr	r3, [r2, #0]
 80092e8:	4610      	mov	r0, r2
 80092ea:	b933      	cbnz	r3, 80092fa <_free_r+0x2e>
 80092ec:	6063      	str	r3, [r4, #4]
 80092ee:	6014      	str	r4, [r2, #0]
 80092f0:	4628      	mov	r0, r5
 80092f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092f6:	f000 b946 	b.w	8009586 <__malloc_unlock>
 80092fa:	42a3      	cmp	r3, r4
 80092fc:	d90c      	bls.n	8009318 <_free_r+0x4c>
 80092fe:	6821      	ldr	r1, [r4, #0]
 8009300:	1862      	adds	r2, r4, r1
 8009302:	4293      	cmp	r3, r2
 8009304:	bf04      	itt	eq
 8009306:	681a      	ldreq	r2, [r3, #0]
 8009308:	685b      	ldreq	r3, [r3, #4]
 800930a:	6063      	str	r3, [r4, #4]
 800930c:	bf04      	itt	eq
 800930e:	1852      	addeq	r2, r2, r1
 8009310:	6022      	streq	r2, [r4, #0]
 8009312:	6004      	str	r4, [r0, #0]
 8009314:	e7ec      	b.n	80092f0 <_free_r+0x24>
 8009316:	4613      	mov	r3, r2
 8009318:	685a      	ldr	r2, [r3, #4]
 800931a:	b10a      	cbz	r2, 8009320 <_free_r+0x54>
 800931c:	42a2      	cmp	r2, r4
 800931e:	d9fa      	bls.n	8009316 <_free_r+0x4a>
 8009320:	6819      	ldr	r1, [r3, #0]
 8009322:	1858      	adds	r0, r3, r1
 8009324:	42a0      	cmp	r0, r4
 8009326:	d10b      	bne.n	8009340 <_free_r+0x74>
 8009328:	6820      	ldr	r0, [r4, #0]
 800932a:	4401      	add	r1, r0
 800932c:	1858      	adds	r0, r3, r1
 800932e:	4282      	cmp	r2, r0
 8009330:	6019      	str	r1, [r3, #0]
 8009332:	d1dd      	bne.n	80092f0 <_free_r+0x24>
 8009334:	6810      	ldr	r0, [r2, #0]
 8009336:	6852      	ldr	r2, [r2, #4]
 8009338:	605a      	str	r2, [r3, #4]
 800933a:	4401      	add	r1, r0
 800933c:	6019      	str	r1, [r3, #0]
 800933e:	e7d7      	b.n	80092f0 <_free_r+0x24>
 8009340:	d902      	bls.n	8009348 <_free_r+0x7c>
 8009342:	230c      	movs	r3, #12
 8009344:	602b      	str	r3, [r5, #0]
 8009346:	e7d3      	b.n	80092f0 <_free_r+0x24>
 8009348:	6820      	ldr	r0, [r4, #0]
 800934a:	1821      	adds	r1, r4, r0
 800934c:	428a      	cmp	r2, r1
 800934e:	bf04      	itt	eq
 8009350:	6811      	ldreq	r1, [r2, #0]
 8009352:	6852      	ldreq	r2, [r2, #4]
 8009354:	6062      	str	r2, [r4, #4]
 8009356:	bf04      	itt	eq
 8009358:	1809      	addeq	r1, r1, r0
 800935a:	6021      	streq	r1, [r4, #0]
 800935c:	605c      	str	r4, [r3, #4]
 800935e:	e7c7      	b.n	80092f0 <_free_r+0x24>
 8009360:	bd38      	pop	{r3, r4, r5, pc}
 8009362:	bf00      	nop
 8009364:	200052dc 	.word	0x200052dc

08009368 <_malloc_r>:
 8009368:	b570      	push	{r4, r5, r6, lr}
 800936a:	1ccd      	adds	r5, r1, #3
 800936c:	f025 0503 	bic.w	r5, r5, #3
 8009370:	3508      	adds	r5, #8
 8009372:	2d0c      	cmp	r5, #12
 8009374:	bf38      	it	cc
 8009376:	250c      	movcc	r5, #12
 8009378:	2d00      	cmp	r5, #0
 800937a:	4606      	mov	r6, r0
 800937c:	db01      	blt.n	8009382 <_malloc_r+0x1a>
 800937e:	42a9      	cmp	r1, r5
 8009380:	d903      	bls.n	800938a <_malloc_r+0x22>
 8009382:	230c      	movs	r3, #12
 8009384:	6033      	str	r3, [r6, #0]
 8009386:	2000      	movs	r0, #0
 8009388:	bd70      	pop	{r4, r5, r6, pc}
 800938a:	f000 f8fb 	bl	8009584 <__malloc_lock>
 800938e:	4a23      	ldr	r2, [pc, #140]	; (800941c <_malloc_r+0xb4>)
 8009390:	6814      	ldr	r4, [r2, #0]
 8009392:	4621      	mov	r1, r4
 8009394:	b991      	cbnz	r1, 80093bc <_malloc_r+0x54>
 8009396:	4c22      	ldr	r4, [pc, #136]	; (8009420 <_malloc_r+0xb8>)
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	b91b      	cbnz	r3, 80093a4 <_malloc_r+0x3c>
 800939c:	4630      	mov	r0, r6
 800939e:	f000 f87b 	bl	8009498 <_sbrk_r>
 80093a2:	6020      	str	r0, [r4, #0]
 80093a4:	4629      	mov	r1, r5
 80093a6:	4630      	mov	r0, r6
 80093a8:	f000 f876 	bl	8009498 <_sbrk_r>
 80093ac:	1c43      	adds	r3, r0, #1
 80093ae:	d126      	bne.n	80093fe <_malloc_r+0x96>
 80093b0:	230c      	movs	r3, #12
 80093b2:	6033      	str	r3, [r6, #0]
 80093b4:	4630      	mov	r0, r6
 80093b6:	f000 f8e6 	bl	8009586 <__malloc_unlock>
 80093ba:	e7e4      	b.n	8009386 <_malloc_r+0x1e>
 80093bc:	680b      	ldr	r3, [r1, #0]
 80093be:	1b5b      	subs	r3, r3, r5
 80093c0:	d41a      	bmi.n	80093f8 <_malloc_r+0x90>
 80093c2:	2b0b      	cmp	r3, #11
 80093c4:	d90f      	bls.n	80093e6 <_malloc_r+0x7e>
 80093c6:	600b      	str	r3, [r1, #0]
 80093c8:	50cd      	str	r5, [r1, r3]
 80093ca:	18cc      	adds	r4, r1, r3
 80093cc:	4630      	mov	r0, r6
 80093ce:	f000 f8da 	bl	8009586 <__malloc_unlock>
 80093d2:	f104 000b 	add.w	r0, r4, #11
 80093d6:	1d23      	adds	r3, r4, #4
 80093d8:	f020 0007 	bic.w	r0, r0, #7
 80093dc:	1ac3      	subs	r3, r0, r3
 80093de:	d01b      	beq.n	8009418 <_malloc_r+0xb0>
 80093e0:	425a      	negs	r2, r3
 80093e2:	50e2      	str	r2, [r4, r3]
 80093e4:	bd70      	pop	{r4, r5, r6, pc}
 80093e6:	428c      	cmp	r4, r1
 80093e8:	bf0d      	iteet	eq
 80093ea:	6863      	ldreq	r3, [r4, #4]
 80093ec:	684b      	ldrne	r3, [r1, #4]
 80093ee:	6063      	strne	r3, [r4, #4]
 80093f0:	6013      	streq	r3, [r2, #0]
 80093f2:	bf18      	it	ne
 80093f4:	460c      	movne	r4, r1
 80093f6:	e7e9      	b.n	80093cc <_malloc_r+0x64>
 80093f8:	460c      	mov	r4, r1
 80093fa:	6849      	ldr	r1, [r1, #4]
 80093fc:	e7ca      	b.n	8009394 <_malloc_r+0x2c>
 80093fe:	1cc4      	adds	r4, r0, #3
 8009400:	f024 0403 	bic.w	r4, r4, #3
 8009404:	42a0      	cmp	r0, r4
 8009406:	d005      	beq.n	8009414 <_malloc_r+0xac>
 8009408:	1a21      	subs	r1, r4, r0
 800940a:	4630      	mov	r0, r6
 800940c:	f000 f844 	bl	8009498 <_sbrk_r>
 8009410:	3001      	adds	r0, #1
 8009412:	d0cd      	beq.n	80093b0 <_malloc_r+0x48>
 8009414:	6025      	str	r5, [r4, #0]
 8009416:	e7d9      	b.n	80093cc <_malloc_r+0x64>
 8009418:	bd70      	pop	{r4, r5, r6, pc}
 800941a:	bf00      	nop
 800941c:	200052dc 	.word	0x200052dc
 8009420:	200052e0 	.word	0x200052e0

08009424 <rand>:
 8009424:	4b19      	ldr	r3, [pc, #100]	; (800948c <rand+0x68>)
 8009426:	b510      	push	{r4, lr}
 8009428:	681c      	ldr	r4, [r3, #0]
 800942a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800942c:	b9d3      	cbnz	r3, 8009464 <rand+0x40>
 800942e:	2018      	movs	r0, #24
 8009430:	f7ff ff00 	bl	8009234 <malloc>
 8009434:	f243 330e 	movw	r3, #13070	; 0x330e
 8009438:	63a0      	str	r0, [r4, #56]	; 0x38
 800943a:	8003      	strh	r3, [r0, #0]
 800943c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8009440:	8043      	strh	r3, [r0, #2]
 8009442:	f241 2334 	movw	r3, #4660	; 0x1234
 8009446:	8083      	strh	r3, [r0, #4]
 8009448:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800944c:	80c3      	strh	r3, [r0, #6]
 800944e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8009452:	8103      	strh	r3, [r0, #8]
 8009454:	2305      	movs	r3, #5
 8009456:	8143      	strh	r3, [r0, #10]
 8009458:	230b      	movs	r3, #11
 800945a:	8183      	strh	r3, [r0, #12]
 800945c:	2201      	movs	r2, #1
 800945e:	2300      	movs	r3, #0
 8009460:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009464:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009466:	480a      	ldr	r0, [pc, #40]	; (8009490 <rand+0x6c>)
 8009468:	690a      	ldr	r2, [r1, #16]
 800946a:	694b      	ldr	r3, [r1, #20]
 800946c:	4c09      	ldr	r4, [pc, #36]	; (8009494 <rand+0x70>)
 800946e:	4350      	muls	r0, r2
 8009470:	fb04 0003 	mla	r0, r4, r3, r0
 8009474:	fba2 2304 	umull	r2, r3, r2, r4
 8009478:	3201      	adds	r2, #1
 800947a:	4403      	add	r3, r0
 800947c:	f143 0300 	adc.w	r3, r3, #0
 8009480:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8009484:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8009488:	bd10      	pop	{r4, pc}
 800948a:	bf00      	nop
 800948c:	200001d4 	.word	0x200001d4
 8009490:	5851f42d 	.word	0x5851f42d
 8009494:	4c957f2d 	.word	0x4c957f2d

08009498 <_sbrk_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4c06      	ldr	r4, [pc, #24]	; (80094b4 <_sbrk_r+0x1c>)
 800949c:	2300      	movs	r3, #0
 800949e:	4605      	mov	r5, r0
 80094a0:	4608      	mov	r0, r1
 80094a2:	6023      	str	r3, [r4, #0]
 80094a4:	f000 f87e 	bl	80095a4 <_sbrk>
 80094a8:	1c43      	adds	r3, r0, #1
 80094aa:	d102      	bne.n	80094b2 <_sbrk_r+0x1a>
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	b103      	cbz	r3, 80094b2 <_sbrk_r+0x1a>
 80094b0:	602b      	str	r3, [r5, #0]
 80094b2:	bd38      	pop	{r3, r4, r5, pc}
 80094b4:	2000656c 	.word	0x2000656c

080094b8 <strcasecmp>:
 80094b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ba:	4606      	mov	r6, r0
 80094bc:	460f      	mov	r7, r1
 80094be:	f816 4b01 	ldrb.w	r4, [r6], #1
 80094c2:	f000 f83f 	bl	8009544 <__locale_ctype_ptr>
 80094c6:	4420      	add	r0, r4
 80094c8:	f817 5b01 	ldrb.w	r5, [r7], #1
 80094cc:	7843      	ldrb	r3, [r0, #1]
 80094ce:	f003 0303 	and.w	r3, r3, #3
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	bf08      	it	eq
 80094d6:	3420      	addeq	r4, #32
 80094d8:	f000 f834 	bl	8009544 <__locale_ctype_ptr>
 80094dc:	4428      	add	r0, r5
 80094de:	7843      	ldrb	r3, [r0, #1]
 80094e0:	f003 0303 	and.w	r3, r3, #3
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	bf08      	it	eq
 80094e8:	3520      	addeq	r5, #32
 80094ea:	1b60      	subs	r0, r4, r5
 80094ec:	d101      	bne.n	80094f2 <strcasecmp+0x3a>
 80094ee:	2d00      	cmp	r5, #0
 80094f0:	d1e5      	bne.n	80094be <strcasecmp+0x6>
 80094f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080094f4 <strncmp>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	b16a      	cbz	r2, 8009514 <strncmp+0x20>
 80094f8:	3901      	subs	r1, #1
 80094fa:	1884      	adds	r4, r0, r2
 80094fc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009500:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009504:	4293      	cmp	r3, r2
 8009506:	d103      	bne.n	8009510 <strncmp+0x1c>
 8009508:	42a0      	cmp	r0, r4
 800950a:	d001      	beq.n	8009510 <strncmp+0x1c>
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1f5      	bne.n	80094fc <strncmp+0x8>
 8009510:	1a98      	subs	r0, r3, r2
 8009512:	bd10      	pop	{r4, pc}
 8009514:	4610      	mov	r0, r2
 8009516:	bd10      	pop	{r4, pc}

08009518 <strncpy>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	4604      	mov	r4, r0
 800951c:	b902      	cbnz	r2, 8009520 <strncpy+0x8>
 800951e:	bd70      	pop	{r4, r5, r6, pc}
 8009520:	4623      	mov	r3, r4
 8009522:	f811 5b01 	ldrb.w	r5, [r1], #1
 8009526:	f803 5b01 	strb.w	r5, [r3], #1
 800952a:	1e56      	subs	r6, r2, #1
 800952c:	b91d      	cbnz	r5, 8009536 <strncpy+0x1e>
 800952e:	4414      	add	r4, r2
 8009530:	42a3      	cmp	r3, r4
 8009532:	d103      	bne.n	800953c <strncpy+0x24>
 8009534:	bd70      	pop	{r4, r5, r6, pc}
 8009536:	461c      	mov	r4, r3
 8009538:	4632      	mov	r2, r6
 800953a:	e7ef      	b.n	800951c <strncpy+0x4>
 800953c:	f803 5b01 	strb.w	r5, [r3], #1
 8009540:	e7f6      	b.n	8009530 <strncpy+0x18>
	...

08009544 <__locale_ctype_ptr>:
 8009544:	4b04      	ldr	r3, [pc, #16]	; (8009558 <__locale_ctype_ptr+0x14>)
 8009546:	4a05      	ldr	r2, [pc, #20]	; (800955c <__locale_ctype_ptr+0x18>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6a1b      	ldr	r3, [r3, #32]
 800954c:	2b00      	cmp	r3, #0
 800954e:	bf08      	it	eq
 8009550:	4613      	moveq	r3, r2
 8009552:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8009556:	4770      	bx	lr
 8009558:	200001d4 	.word	0x200001d4
 800955c:	20000238 	.word	0x20000238

08009560 <__ascii_mbtowc>:
 8009560:	b082      	sub	sp, #8
 8009562:	b901      	cbnz	r1, 8009566 <__ascii_mbtowc+0x6>
 8009564:	a901      	add	r1, sp, #4
 8009566:	b142      	cbz	r2, 800957a <__ascii_mbtowc+0x1a>
 8009568:	b14b      	cbz	r3, 800957e <__ascii_mbtowc+0x1e>
 800956a:	7813      	ldrb	r3, [r2, #0]
 800956c:	600b      	str	r3, [r1, #0]
 800956e:	7812      	ldrb	r2, [r2, #0]
 8009570:	1c10      	adds	r0, r2, #0
 8009572:	bf18      	it	ne
 8009574:	2001      	movne	r0, #1
 8009576:	b002      	add	sp, #8
 8009578:	4770      	bx	lr
 800957a:	4610      	mov	r0, r2
 800957c:	e7fb      	b.n	8009576 <__ascii_mbtowc+0x16>
 800957e:	f06f 0001 	mvn.w	r0, #1
 8009582:	e7f8      	b.n	8009576 <__ascii_mbtowc+0x16>

08009584 <__malloc_lock>:
 8009584:	4770      	bx	lr

08009586 <__malloc_unlock>:
 8009586:	4770      	bx	lr

08009588 <__ascii_wctomb>:
 8009588:	b149      	cbz	r1, 800959e <__ascii_wctomb+0x16>
 800958a:	2aff      	cmp	r2, #255	; 0xff
 800958c:	bf85      	ittet	hi
 800958e:	238a      	movhi	r3, #138	; 0x8a
 8009590:	6003      	strhi	r3, [r0, #0]
 8009592:	700a      	strbls	r2, [r1, #0]
 8009594:	f04f 30ff 	movhi.w	r0, #4294967295
 8009598:	bf98      	it	ls
 800959a:	2001      	movls	r0, #1
 800959c:	4770      	bx	lr
 800959e:	4608      	mov	r0, r1
 80095a0:	4770      	bx	lr
	...

080095a4 <_sbrk>:
 80095a4:	4b04      	ldr	r3, [pc, #16]	; (80095b8 <_sbrk+0x14>)
 80095a6:	6819      	ldr	r1, [r3, #0]
 80095a8:	4602      	mov	r2, r0
 80095aa:	b909      	cbnz	r1, 80095b0 <_sbrk+0xc>
 80095ac:	4903      	ldr	r1, [pc, #12]	; (80095bc <_sbrk+0x18>)
 80095ae:	6019      	str	r1, [r3, #0]
 80095b0:	6818      	ldr	r0, [r3, #0]
 80095b2:	4402      	add	r2, r0
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	4770      	bx	lr
 80095b8:	200052e4 	.word	0x200052e4
 80095bc:	20006570 	.word	0x20006570

080095c0 <_init>:
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c2:	bf00      	nop
 80095c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095c6:	bc08      	pop	{r3}
 80095c8:	469e      	mov	lr, r3
 80095ca:	4770      	bx	lr

080095cc <_fini>:
 80095cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ce:	bf00      	nop
 80095d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d2:	bc08      	pop	{r3}
 80095d4:	469e      	mov	lr, r3
 80095d6:	4770      	bx	lr
