
ADHOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010658  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  080107f8  080107f8  000207f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010aec  08010aec  00020aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010af4  08010af4  00020af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010af8  08010af8  00020af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  20000000  08010afc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005ec4  200002c8  08010dc4  000302c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000618c  08010dc4  0003618c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033e45  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006377  00000000  00000000  0006413d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001dc0  00000000  00000000  0006a4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001bb8  00000000  00000000  0006c278  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f3d4  00000000  00000000  0006de30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000a65b  00000000  00000000  0007d204  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0008785f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007e48  00000000  00000000  000878dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080107e0 	.word	0x080107e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	080107e0 	.word	0x080107e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000504:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000528:	2003      	movs	r0, #3
 800052a:	f000 f917 	bl	800075c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052e:	2000      	movs	r0, #0
 8000530:	f00f fa80 	bl	800fa34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000534:	f00f fa2c 	bl	800f990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_IncTick+0x20>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_IncTick+0x24>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4413      	add	r3, r2
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_IncTick+0x24>)
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000000 	.word	0x20000000
 8000568:	20004bdc 	.word	0x20004bdc

0800056c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return uwTick;
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <HAL_GetTick+0x14>)
 8000572:	681b      	ldr	r3, [r3, #0]
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20004bdc 	.word	0x20004bdc

08000584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800058c:	f7ff ffee 	bl	800056c <HAL_GetTick>
 8000590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800059c:	d005      	beq.n	80005aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_Delay+0x40>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4413      	add	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005aa:	bf00      	nop
 80005ac:	f7ff ffde 	bl	800056c <HAL_GetTick>
 80005b0:	4602      	mov	r2, r0
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	1ad2      	subs	r2, r2, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d3f7      	bcc.n	80005ac <HAL_Delay+0x28>
  {
  }
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000000 	.word	0x20000000

080005c8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <NVIC_SetPriorityGrouping+0x44>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fa:	4a04      	ldr	r2, [pc, #16]	; (800060c <NVIC_SetPriorityGrouping+0x44>)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <NVIC_GetPriorityGrouping+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	f003 0307 	and.w	r3, r3, #7
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000636:	4909      	ldr	r1, [pc, #36]	; (800065c <NVIC_EnableIRQ+0x30>)
 8000638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063c:	095b      	lsrs	r3, r3, #5
 800063e:	79fa      	ldrb	r2, [r7, #7]
 8000640:	f002 021f 	and.w	r2, r2, #31
 8000644:	2001      	movs	r0, #1
 8000646:	fa00 f202 	lsl.w	r2, r0, r2
 800064a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000e100 	.word	0xe000e100

08000660 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800066c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	da0b      	bge.n	800068c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	490d      	ldr	r1, [pc, #52]	; (80006ac <NVIC_SetPriority+0x4c>)
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 030f 	and.w	r3, r3, #15
 800067c:	3b04      	subs	r3, #4
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	0112      	lsls	r2, r2, #4
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440b      	add	r3, r1
 8000688:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800068a:	e009      	b.n	80006a0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	4908      	ldr	r1, [pc, #32]	; (80006b0 <NVIC_SetPriority+0x50>)
 800068e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	b2d2      	uxtb	r2, r2
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b089      	sub	sp, #36	; 0x24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	f1c3 0307 	rsb	r3, r3, #7
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	bf28      	it	cs
 80006d2:	2304      	movcs	r3, #4
 80006d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3304      	adds	r3, #4
 80006da:	2b06      	cmp	r3, #6
 80006dc:	d902      	bls.n	80006e4 <NVIC_EncodePriority+0x30>
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3b03      	subs	r3, #3
 80006e2:	e000      	b.n	80006e6 <NVIC_EncodePriority+0x32>
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	2201      	movs	r2, #1
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	1e5a      	subs	r2, r3, #1
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	401a      	ands	r2, r3
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fa:	2101      	movs	r1, #1
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000702:	1e59      	subs	r1, r3, #1
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	4313      	orrs	r3, r2
         );
}
 800070a:	4618      	mov	r0, r3
 800070c:	3724      	adds	r7, #36	; 0x24
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000728:	d301      	bcc.n	800072e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800072a:	2301      	movs	r3, #1
 800072c:	e00f      	b.n	800074e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <SysTick_Config+0x40>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000736:	210f      	movs	r1, #15
 8000738:	f04f 30ff 	mov.w	r0, #4294967295
 800073c:	f7ff ff90 	bl	8000660 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <SysTick_Config+0x40>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <SysTick_Config+0x40>)
 8000748:	2207      	movs	r2, #7
 800074a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	e000e010 	.word	0xe000e010

0800075c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff ff2f 	bl	80005c8 <NVIC_SetPriorityGrouping>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000772:	b580      	push	{r7, lr}
 8000774:	b086      	sub	sp, #24
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	60b9      	str	r1, [r7, #8]
 800077c:	607a      	str	r2, [r7, #4]
 800077e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000784:	f7ff ff44 	bl	8000610 <NVIC_GetPriorityGrouping>
 8000788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	68b9      	ldr	r1, [r7, #8]
 800078e:	6978      	ldr	r0, [r7, #20]
 8000790:	f7ff ff90 	bl	80006b4 <NVIC_EncodePriority>
 8000794:	4602      	mov	r2, r0
 8000796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff5f 	bl	8000660 <NVIC_SetPriority>
}
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff37 	bl	800062c <NVIC_EnableIRQ>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ffa2 	bl	8000718 <SysTick_Config>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d106      	bne.n	80007fc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007ee:	4a09      	ldr	r2, [pc, #36]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80007fa:	e005      	b.n	8000808 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007fc:	4a05      	ldr	r2, [pc, #20]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f023 0304 	bic.w	r3, r3, #4
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	b480      	push	{r7}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
 8000832:	e159      	b.n	8000ae8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000834:	2201      	movs	r2, #1
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	429a      	cmp	r2, r3
 800084e:	f040 8148 	bne.w	8000ae2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d003      	beq.n	8000862 <HAL_GPIO_Init+0x4a>
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2b12      	cmp	r3, #18
 8000860:	d123      	bne.n	80008aa <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	08da      	lsrs	r2, r3, #3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3208      	adds	r2, #8
 800086a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800086e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	220f      	movs	r2, #15
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43db      	mvns	r3, r3
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	4013      	ands	r3, r2
 8000884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	691a      	ldr	r2, [r3, #16]
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	f003 0307 	and.w	r3, r3, #7
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	4313      	orrs	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	08da      	lsrs	r2, r3, #3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3208      	adds	r2, #8
 80008a4:	69b9      	ldr	r1, [r7, #24]
 80008a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2203      	movs	r2, #3
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4013      	ands	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 0203 	and.w	r2, r3, #3
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d00b      	beq.n	80008fe <HAL_GPIO_Init+0xe6>
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d007      	beq.n	80008fe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f2:	2b11      	cmp	r3, #17
 80008f4:	d003      	beq.n	80008fe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b12      	cmp	r3, #18
 80008fc:	d130      	bne.n	8000960 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	2203      	movs	r2, #3
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4013      	ands	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	68da      	ldr	r2, [r3, #12]
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	4313      	orrs	r3, r2
 8000926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	69ba      	ldr	r2, [r7, #24]
 800092c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000934:	2201      	movs	r2, #1
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	4013      	ands	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	091b      	lsrs	r3, r3, #4
 800094a:	f003 0201 	and.w	r2, r3, #1
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4313      	orrs	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	2203      	movs	r2, #3
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	4013      	ands	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	689a      	ldr	r2, [r3, #8]
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	4313      	orrs	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 80a2 	beq.w	8000ae2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4a56      	ldr	r2, [pc, #344]	; (8000afc <HAL_GPIO_Init+0x2e4>)
 80009a4:	4b55      	ldr	r3, [pc, #340]	; (8000afc <HAL_GPIO_Init+0x2e4>)
 80009a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b53      	ldr	r3, [pc, #332]	; (8000afc <HAL_GPIO_Init+0x2e4>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ba:	4a51      	ldr	r2, [pc, #324]	; (8000b00 <HAL_GPIO_Init+0x2e8>)
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	089b      	lsrs	r3, r3, #2
 80009c0:	3302      	adds	r3, #2
 80009c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f003 0303 	and.w	r3, r3, #3
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	220f      	movs	r2, #15
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4013      	ands	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a48      	ldr	r2, [pc, #288]	; (8000b04 <HAL_GPIO_Init+0x2ec>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d019      	beq.n	8000a1a <HAL_GPIO_Init+0x202>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a47      	ldr	r2, [pc, #284]	; (8000b08 <HAL_GPIO_Init+0x2f0>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d013      	beq.n	8000a16 <HAL_GPIO_Init+0x1fe>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a46      	ldr	r2, [pc, #280]	; (8000b0c <HAL_GPIO_Init+0x2f4>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00d      	beq.n	8000a12 <HAL_GPIO_Init+0x1fa>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a45      	ldr	r2, [pc, #276]	; (8000b10 <HAL_GPIO_Init+0x2f8>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d007      	beq.n	8000a0e <HAL_GPIO_Init+0x1f6>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a44      	ldr	r2, [pc, #272]	; (8000b14 <HAL_GPIO_Init+0x2fc>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d101      	bne.n	8000a0a <HAL_GPIO_Init+0x1f2>
 8000a06:	2304      	movs	r3, #4
 8000a08:	e008      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	e006      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a0e:	2303      	movs	r3, #3
 8000a10:	e004      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e002      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a16:	2301      	movs	r3, #1
 8000a18:	e000      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	69fa      	ldr	r2, [r7, #28]
 8000a1e:	f002 0203 	and.w	r2, r2, #3
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	4093      	lsls	r3, r2
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a2c:	4934      	ldr	r1, [pc, #208]	; (8000b00 <HAL_GPIO_Init+0x2e8>)
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a3a:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a5e:	4a2e      	ldr	r2, [pc, #184]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a64:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4013      	ands	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a88:	4a23      	ldr	r2, [pc, #140]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a8e:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ab2:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000adc:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	61fb      	str	r3, [r7, #28]
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	2b0f      	cmp	r3, #15
 8000aec:	f67f aea2 	bls.w	8000834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000af0:	bf00      	nop
 8000af2:	3724      	adds	r7, #36	; 0x24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40013800 	.word	0x40013800
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020400 	.word	0x40020400
 8000b0c:	40020800 	.word	0x40020800
 8000b10:	40020c00 	.word	0x40020c00
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40013c00 	.word	0x40013c00

08000b1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1e:	b08f      	sub	sp, #60	; 0x3c
 8000b20:	af0a      	add	r7, sp, #40	; 0x28
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e0f7      	b.n	8000d22 <HAL_PCD_Init+0x206>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2203      	movs	r2, #3
 8000b36:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f00f f852 	bl	800fbe4 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 ff69 	bl	8002a1c <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	687e      	ldr	r6, [r7, #4]
 8000b52:	466d      	mov	r5, sp
 8000b54:	f106 0410 	add.w	r4, r6, #16
 8000b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b64:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b68:	1d33      	adds	r3, r6, #4
 8000b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b6c:	6838      	ldr	r0, [r7, #0]
 8000b6e:	f001 fef3 	bl	8002958 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 ff60 	bl	8002a3e <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	e04c      	b.n	8000c1e <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	1a9b      	subs	r3, r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	440b      	add	r3, r1
 8000b92:	3339      	adds	r3, #57	; 0x39
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	b2d8      	uxtb	r0, r3
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	1a9b      	subs	r3, r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	440b      	add	r3, r1
 8000baa:	3338      	adds	r3, #56	; 0x38
 8000bac:	4602      	mov	r2, r0
 8000bae:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	b298      	uxth	r0, r3
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	1a9b      	subs	r3, r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	333e      	adds	r3, #62	; 0x3e
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	1a9b      	subs	r3, r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	333b      	adds	r3, #59	; 0x3b
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket = 0U;
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4613      	mov	r3, r2
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	1a9b      	subs	r3, r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	440b      	add	r3, r1
 8000bea:	3340      	adds	r3, #64	; 0x40
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	1a9b      	subs	r3, r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	3344      	adds	r3, #68	; 0x44
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	1a9b      	subs	r3, r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	440b      	add	r3, r1
 8000c12:	334c      	adds	r3, #76	; 0x4c
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < 15U; i++)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2b0e      	cmp	r3, #14
 8000c22:	d9af      	bls.n	8000b84 <HAL_PCD_Init+0x68>
 }
 
 for (i = 0U; i < 15U; i++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	e05a      	b.n	8000ce0 <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	1a9b      	subs	r3, r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	440b      	add	r3, r1
 8000c38:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	b2d8      	uxtb	r0, r3
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	1a9b      	subs	r3, r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	440b      	add	r3, r1
 8000c52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000c56:	4602      	mov	r2, r0
 8000c58:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	b298      	uxth	r0, r3
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	4613      	mov	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	1a9b      	subs	r3, r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	333e      	adds	r3, #62	; 0x3e
 8000c6e:	4602      	mov	r2, r0
 8000c70:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	4613      	mov	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	1a9b      	subs	r3, r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	440b      	add	r3, r1
 8000c96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	1a9b      	subs	r3, r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	440b      	add	r3, r1
 8000cac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	1a9b      	subs	r3, r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	3340      	adds	r3, #64	; 0x40
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	605a      	str	r2, [r3, #4]
 for (i = 0U; i < 15U; i++)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2b0e      	cmp	r3, #14
 8000ce4:	d9a1      	bls.n	8000c2a <HAL_PCD_Init+0x10e>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	687e      	ldr	r6, [r7, #4]
 8000cee:	466d      	mov	r5, sp
 8000cf0:	f106 0410 	add.w	r4, r6, #16
 8000cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d00:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d04:	1d33      	adds	r3, r6, #4
 8000d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d08:	6838      	ldr	r0, [r7, #0]
 8000d0a:	f001 febf 	bl	8002a8c <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f002 fee0 	bl	8003ae0 <USB_DevDisconnect>
 return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d2a <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d101      	bne.n	8000d40 <HAL_PCD_Start+0x16>
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	e012      	b.n	8000d66 <HAL_PCD_Start+0x3c>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2201      	movs	r2, #1
 8000d44:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 feb0 	bl	8003ab2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 fe4f 	bl	80029fa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	623b      	str	r3, [r7, #32]
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
 8000d96:	4b7c      	ldr	r3, [pc, #496]	; (8000f88 <HAL_PCD_IRQHandler+0x218>)
 8000d98:	613b      	str	r3, [r7, #16]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 ff40 	bl	8003c24 <USB_GetMode>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8468 	bne.w	800167c <HAL_PCD_IRQHandler+0x90c>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f002 feac 	bl	8003b0e <USB_ReadInterrupts>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 845e 	beq.w	800167a <HAL_PCD_IRQHandler+0x90a>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fea3 	bl	8003b0e <USB_ReadInterrupts>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d107      	bne.n	8000de2 <HAL_PCD_IRQHandler+0x72>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	6952      	ldr	r2, [r2, #20]
 8000ddc:	f002 0202 	and.w	r2, r2, #2
 8000de0:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 fe91 	bl	8003b0e <USB_ReadInterrupts>
 8000dec:	4603      	mov	r3, r0
 8000dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000df2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000df6:	f040 80b2 	bne.w	8000f5e <HAL_PCD_IRQHandler+0x1ee>
    {
      epnum = 0U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f002 fe98 	bl	8003b38 <USB_ReadDevAllOutEpInterrupt>
 8000e08:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 8000e0a:	e0a4      	b.n	8000f56 <HAL_PCD_IRQHandler+0x1e6>
      {
        if (ep_intr & 0x1U)
 8000e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 8099 	beq.w	8000f4a <HAL_PCD_IRQHandler+0x1da>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	4611      	mov	r1, r2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 feb8 	bl	8003b98 <USB_ReadDevOutEPInterrupt>
 8000e28:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d06b      	beq.n	8000f0c <HAL_PCD_IRQHandler+0x19c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	015a      	lsls	r2, r3, #5
 8000e38:	6a3b      	ldr	r3, [r7, #32]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000e40:	461a      	mov	r2, r3
 8000e42:	2301      	movs	r3, #1
 8000e44:	6093      	str	r3, [r2, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d13c      	bne.n	8000ec8 <HAL_PCD_IRQHandler+0x158>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e52:	4613      	mov	r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	1a9b      	subs	r3, r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	0159      	lsls	r1, r3, #5
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	440b      	add	r3, r1
 8000e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e74:	1ad1      	subs	r1, r2, r3
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	1a9b      	subs	r3, r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4403      	add	r3, r0
 8000e84:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000e88:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e8e:	4613      	mov	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	440b      	add	r3, r1
 8000e98:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000e9c:	6819      	ldr	r1, [r3, #0]
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	1a9b      	subs	r3, r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4403      	add	r3, r0
 8000eac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4419      	add	r1, r3
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb8:	4613      	mov	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	1a9b      	subs	r3, r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4403      	add	r3, r0
 8000ec2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000ec6:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4619      	mov	r1, r3
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f00e fee6 	bl	800fca0 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d117      	bne.n	8000f0c <HAL_PCD_IRQHandler+0x19c>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d114      	bne.n	8000f0c <HAL_PCD_IRQHandler+0x19c>
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	1a9b      	subs	r3, r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d108      	bne.n	8000f0c <HAL_PCD_IRQHandler+0x19c>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8000f04:	461a      	mov	r2, r3
 8000f06:	2101      	movs	r1, #1
 8000f08:	f002 fed0 	bl	8003cac <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00b      	beq.n	8000f2e <HAL_PCD_IRQHandler+0x1be>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f00e feb0 	bl	800fc7c <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	015a      	lsls	r2, r3, #5
 8000f20:	6a3b      	ldr	r3, [r7, #32]
 8000f22:	4413      	add	r3, r2
 8000f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f28:	461a      	mov	r2, r3
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d008      	beq.n	8000f4a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	015a      	lsls	r2, r3, #5
 8000f3c:	6a3b      	ldr	r3, [r7, #32]
 8000f3e:	4413      	add	r3, r2
 8000f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f44:	461a      	mov	r2, r3
 8000f46:	2310      	movs	r3, #16
 8000f48:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f52:	085b      	lsrs	r3, r3, #1
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8000f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f47f af57 	bne.w	8000e0c <HAL_PCD_IRQHandler+0x9c>
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 fdd3 	bl	8003b0e <USB_ReadInterrupts>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000f72:	f040 80c5 	bne.w	8001100 <HAL_PCD_IRQHandler+0x390>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 fdf4 	bl	8003b68 <USB_ReadDevAllInEpInterrupt>
 8000f80:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 8000f86:	e0b7      	b.n	80010f8 <HAL_PCD_IRQHandler+0x388>
 8000f88:	0aba9500 	.word	0x0aba9500
      {
        if (ep_intr & 0x1U) /* In ITR */
 8000f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 80aa 	beq.w	80010ec <HAL_PCD_IRQHandler+0x37c>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 fe14 	bl	8003bd0 <USB_ReadDevInEPInterrupt>
 8000fa8:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d05a      	beq.n	800106a <HAL_PCD_IRQHandler+0x2fa>
          {
            fifoemptymsk = 0x1U << epnum;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
 8000fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	6a3b      	ldr	r3, [r7, #32]
 8000fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	015a      	lsls	r2, r3, #5
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	4413      	add	r3, r2
 8000fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d11b      	bne.n	8001028 <HAL_PCD_IRQHandler+0x2b8>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	1a9b      	subs	r3, r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3344      	adds	r3, #68	; 0x44
 8001000:	6819      	ldr	r1, [r3, #0]
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001006:	4613      	mov	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	1a9b      	subs	r3, r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4403      	add	r3, r0
 8001010:	3340      	adds	r3, #64	; 0x40
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4419      	add	r1, r3
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800101a:	4613      	mov	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	1a9b      	subs	r3, r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4403      	add	r3, r0
 8001024:	3344      	adds	r3, #68	; 0x44
 8001026:	6019      	str	r1, [r3, #0]
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4619      	mov	r1, r3
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f00e fe51 	bl	800fcd6 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d116      	bne.n	800106a <HAL_PCD_IRQHandler+0x2fa>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	2b00      	cmp	r3, #0
 8001040:	d113      	bne.n	800106a <HAL_PCD_IRQHandler+0x2fa>
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001046:	4613      	mov	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	1a9b      	subs	r3, r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	440b      	add	r3, r1
 8001050:	334c      	adds	r3, #76	; 0x4c
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d108      	bne.n	800106a <HAL_PCD_IRQHandler+0x2fa>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001062:	461a      	mov	r2, r3
 8001064:	2101      	movs	r1, #1
 8001066:	f002 fe21 	bl	8003cac <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b00      	cmp	r3, #0
 8001072:	d008      	beq.n	8001086 <HAL_PCD_IRQHandler+0x316>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	015a      	lsls	r2, r3, #5
 8001078:	6a3b      	ldr	r3, [r7, #32]
 800107a:	4413      	add	r3, r2
 800107c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001080:	461a      	mov	r2, r3
 8001082:	2308      	movs	r3, #8
 8001084:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	2b00      	cmp	r3, #0
 800108e:	d008      	beq.n	80010a2 <HAL_PCD_IRQHandler+0x332>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	015a      	lsls	r2, r3, #5
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	4413      	add	r3, r2
 8001098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800109c:	461a      	mov	r2, r3
 800109e:	2310      	movs	r3, #16
 80010a0:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d008      	beq.n	80010be <HAL_PCD_IRQHandler+0x34e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	015a      	lsls	r2, r3, #5
 80010b0:	6a3b      	ldr	r3, [r7, #32]
 80010b2:	4413      	add	r3, r2
 80010b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010b8:	461a      	mov	r2, r3
 80010ba:	2340      	movs	r3, #64	; 0x40
 80010bc:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d008      	beq.n	80010da <HAL_PCD_IRQHandler+0x36a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	015a      	lsls	r2, r3, #5
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	4413      	add	r3, r2
 80010d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010d4:	461a      	mov	r2, r3
 80010d6:	2302      	movs	r3, #2
 80010d8:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_PCD_IRQHandler+0x37c>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 80010e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 fcf1 	bl	8001ace <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	3301      	adds	r3, #1
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80010f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f4:	085b      	lsrs	r3, r3, #1
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 80010f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f47f af46 	bne.w	8000f8c <HAL_PCD_IRQHandler+0x21c>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fd02 	bl	8003b0e <USB_ReadInterrupts>
 800110a:	4603      	mov	r3, r0
 800110c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001110:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001114:	d115      	bne.n	8001142 <HAL_PCD_IRQHandler+0x3d2>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001116:	6a3b      	ldr	r3, [r7, #32]
 8001118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800111c:	461a      	mov	r2, r3
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f023 0301 	bic.w	r3, r3, #1
 800112a:	6053      	str	r3, [r2, #4]
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f00e fe4b 	bl	800fdc8 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	6812      	ldr	r2, [r2, #0]
 800113a:	6952      	ldr	r2, [r2, #20]
 800113c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001140:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f002 fce1 	bl	8003b0e <USB_ReadInterrupts>
 800114c:	4603      	mov	r3, r0
 800114e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001156:	d112      	bne.n	800117e <HAL_PCD_IRQHandler+0x40e>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b01      	cmp	r3, #1
 8001166:	d102      	bne.n	800116e <HAL_PCD_IRQHandler+0x3fe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f00e fe05 	bl	800fd78 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	6812      	ldr	r2, [r2, #0]
 8001176:	6952      	ldr	r2, [r2, #20]
 8001178:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800117c:	615a      	str	r2, [r3, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f002 fcc3 	bl	8003b0e <USB_ReadInterrupts>
 8001188:	4603      	mov	r3, r0
 800118a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800118e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001192:	f040 8091 	bne.w	80012b8 <HAL_PCD_IRQHandler+0x548>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800119c:	461a      	mov	r2, r3
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f023 0301 	bic.w	r3, r3, #1
 80011aa:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2110      	movs	r1, #16
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 fd9c 	bl	8002cf0 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011bc:	e014      	b.n	80011e8 <HAL_PCD_IRQHandler+0x478>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 80011be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c0:	015a      	lsls	r2, r3, #5
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	4413      	add	r3, r2
 80011c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011ca:	461a      	mov	r2, r3
 80011cc:	23ff      	movs	r3, #255	; 0xff
 80011ce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 80011d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d2:	015a      	lsls	r2, r3, #5
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	4413      	add	r3, r2
 80011d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011dc:	461a      	mov	r2, r3
 80011de:	23ff      	movs	r3, #255	; 0xff
 80011e0:	6093      	str	r3, [r2, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e4:	3301      	adds	r3, #1
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d8e5      	bhi.n	80011be <HAL_PCD_IRQHandler+0x44e>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011f8:	461a      	mov	r2, r3
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001206:	461a      	mov	r2, r3
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001214:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	2b00      	cmp	r3, #0
 800121c:	d018      	beq.n	8001250 <HAL_PCD_IRQHandler+0x4e0>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001224:	461a      	mov	r2, r3
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800122c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001230:	f043 030b 	orr.w	r3, r3, #11
 8001234:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800123e:	461a      	mov	r2, r3
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001248:	f043 030b 	orr.w	r3, r3, #11
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	e015      	b.n	800127c <HAL_PCD_IRQHandler+0x50c>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001256:	461a      	mov	r2, r3
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f043 030b 	orr.w	r3, r3, #11
 8001264:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800126c:	461a      	mov	r2, r3
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	f043 030b 	orr.w	r3, r3, #11
 800127a:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001282:	461a      	mov	r2, r3
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001290:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	b2d9      	uxtb	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80012a2:	461a      	mov	r2, r3
 80012a4:	f002 fd02 	bl	8003cac <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	6952      	ldr	r2, [r2, #20]
 80012b2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80012b6:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 fc26 	bl	8003b0e <USB_ReadInterrupts>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012cc:	f040 80da 	bne.w	8001484 <HAL_PCD_IRQHandler+0x714>
    {
      USB_ActivateSetup(hpcd->Instance);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 fcb3 	bl	8003c40 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	68d2      	ldr	r2, [r2, #12]
 80012e4:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80012e8:	60da      	str	r2, [r3, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 fd5e 	bl	8002db0 <USB_GetDevSpeed>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10f      	bne.n	800131a <HAL_PCD_IRQHandler+0x5aa>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001306:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	68d2      	ldr	r2, [r2, #12]
 8001312:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	e0a9      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2203      	movs	r2, #3
 800131e:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2240      	movs	r2, #64	; 0x40
 8001324:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8001326:	f001 f8ad 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 800132a:	6138      	str	r0, [r7, #16]
        
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4a7b      	ldr	r2, [pc, #492]	; (800151c <HAL_PCD_IRQHandler+0x7ac>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d90c      	bls.n	800134e <HAL_PCD_IRQHandler+0x5de>
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4a7a      	ldr	r2, [pc, #488]	; (8001520 <HAL_PCD_IRQHandler+0x7b0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d808      	bhi.n	800134e <HAL_PCD_IRQHandler+0x5de>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	68d2      	ldr	r2, [r2, #12]
 8001346:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	e08f      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4a73      	ldr	r2, [pc, #460]	; (8001520 <HAL_PCD_IRQHandler+0x7b0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d90c      	bls.n	8001370 <HAL_PCD_IRQHandler+0x600>
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4a72      	ldr	r2, [pc, #456]	; (8001524 <HAL_PCD_IRQHandler+0x7b4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d808      	bhi.n	8001370 <HAL_PCD_IRQHandler+0x600>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	68d2      	ldr	r2, [r2, #12]
 8001368:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	e07e      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4a6c      	ldr	r2, [pc, #432]	; (8001524 <HAL_PCD_IRQHandler+0x7b4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d90c      	bls.n	8001392 <HAL_PCD_IRQHandler+0x622>
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4a6b      	ldr	r2, [pc, #428]	; (8001528 <HAL_PCD_IRQHandler+0x7b8>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d808      	bhi.n	8001392 <HAL_PCD_IRQHandler+0x622>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	68d2      	ldr	r2, [r2, #12]
 800138a:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	e06d      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4a64      	ldr	r2, [pc, #400]	; (8001528 <HAL_PCD_IRQHandler+0x7b8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d90c      	bls.n	80013b4 <HAL_PCD_IRQHandler+0x644>
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4a63      	ldr	r2, [pc, #396]	; (800152c <HAL_PCD_IRQHandler+0x7bc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d808      	bhi.n	80013b4 <HAL_PCD_IRQHandler+0x644>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	68d2      	ldr	r2, [r2, #12]
 80013ac:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	e05c      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4a5d      	ldr	r2, [pc, #372]	; (800152c <HAL_PCD_IRQHandler+0x7bc>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d90c      	bls.n	80013d6 <HAL_PCD_IRQHandler+0x666>
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4a5c      	ldr	r2, [pc, #368]	; (8001530 <HAL_PCD_IRQHandler+0x7c0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d808      	bhi.n	80013d6 <HAL_PCD_IRQHandler+0x666>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	68d2      	ldr	r2, [r2, #12]
 80013ce:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	e04b      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4a55      	ldr	r2, [pc, #340]	; (8001530 <HAL_PCD_IRQHandler+0x7c0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d90c      	bls.n	80013f8 <HAL_PCD_IRQHandler+0x688>
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4a54      	ldr	r2, [pc, #336]	; (8001534 <HAL_PCD_IRQHandler+0x7c4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d808      	bhi.n	80013f8 <HAL_PCD_IRQHandler+0x688>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	68d2      	ldr	r2, [r2, #12]
 80013f0:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	e03a      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4a4e      	ldr	r2, [pc, #312]	; (8001534 <HAL_PCD_IRQHandler+0x7c4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d90c      	bls.n	800141a <HAL_PCD_IRQHandler+0x6aa>
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4a4d      	ldr	r2, [pc, #308]	; (8001538 <HAL_PCD_IRQHandler+0x7c8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d808      	bhi.n	800141a <HAL_PCD_IRQHandler+0x6aa>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	68d2      	ldr	r2, [r2, #12]
 8001412:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	e029      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4a46      	ldr	r2, [pc, #280]	; (8001538 <HAL_PCD_IRQHandler+0x7c8>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d90c      	bls.n	800143c <HAL_PCD_IRQHandler+0x6cc>
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4a45      	ldr	r2, [pc, #276]	; (800153c <HAL_PCD_IRQHandler+0x7cc>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d808      	bhi.n	800143c <HAL_PCD_IRQHandler+0x6cc>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	68d2      	ldr	r2, [r2, #12]
 8001434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	e018      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4a3f      	ldr	r2, [pc, #252]	; (800153c <HAL_PCD_IRQHandler+0x7cc>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d90c      	bls.n	800145e <HAL_PCD_IRQHandler+0x6ee>
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4a3e      	ldr	r2, [pc, #248]	; (8001540 <HAL_PCD_IRQHandler+0x7d0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d808      	bhi.n	800145e <HAL_PCD_IRQHandler+0x6ee>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	68d2      	ldr	r2, [r2, #12]
 8001456:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	e007      	b.n	800146e <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	68d2      	ldr	r2, [r2, #12]
 8001468:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 800146c:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f00e fc59 	bl	800fd26 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	6952      	ldr	r2, [r2, #20]
 800147e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001482:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fb40 	bl	8003b0e <USB_ReadInterrupts>
 800148e:	4603      	mov	r3, r0
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b10      	cmp	r3, #16
 8001496:	d174      	bne.n	8001582 <HAL_PCD_IRQHandler+0x812>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	6992      	ldr	r2, [r2, #24]
 80014a2:	f022 0210 	bic.w	r2, r2, #16
 80014a6:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f003 020f 	and.w	r2, r3, #15
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	0c5b      	lsrs	r3, r3, #17
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d138      	bne.n	8001544 <HAL_PCD_IRQHandler+0x7d4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d049      	beq.n	8001572 <HAL_PCD_IRQHandler+0x802>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	68d9      	ldr	r1, [r3, #12]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	6a38      	ldr	r0, [r7, #32]
 80014f2:	f002 f9b3 	bl	800385c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001502:	441a      	add	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	699a      	ldr	r2, [r3, #24]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	091b      	lsrs	r3, r3, #4
 8001510:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001514:	441a      	add	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	619a      	str	r2, [r3, #24]
 800151a:	e02a      	b.n	8001572 <HAL_PCD_IRQHandler+0x802>
 800151c:	00d8acbf 	.word	0x00d8acbf
 8001520:	00e4e1bf 	.word	0x00e4e1bf
 8001524:	00f423ff 	.word	0x00f423ff
 8001528:	0106737f 	.word	0x0106737f
 800152c:	011a499f 	.word	0x011a499f
 8001530:	01312cff 	.word	0x01312cff
 8001534:	014ca43f 	.word	0x014ca43f
 8001538:	016e35ff 	.word	0x016e35ff
 800153c:	01a6ab1f 	.word	0x01a6ab1f
 8001540:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	0c5b      	lsrs	r3, r3, #17
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	2b06      	cmp	r3, #6
 800154e:	d110      	bne.n	8001572 <HAL_PCD_IRQHandler+0x802>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001556:	2208      	movs	r2, #8
 8001558:	4619      	mov	r1, r3
 800155a:	6a38      	ldr	r0, [r7, #32]
 800155c:	f002 f97e 	bl	800385c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	699a      	ldr	r2, [r3, #24]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800156c:	441a      	add	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6812      	ldr	r2, [r2, #0]
 800157a:	6992      	ldr	r2, [r2, #24]
 800157c:	f042 0210 	orr.w	r2, r2, #16
 8001580:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f002 fac1 	bl	8003b0e <USB_ReadInterrupts>
 800158c:	4603      	mov	r3, r0
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b08      	cmp	r3, #8
 8001594:	d10a      	bne.n	80015ac <HAL_PCD_IRQHandler+0x83c>
    {
      HAL_PCD_SOFCallback(hpcd);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f00e fbb7 	bl	800fd0a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	6952      	ldr	r2, [r2, #20]
 80015a6:	f002 0208 	and.w	r2, r2, #8
 80015aa:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 faac 	bl	8003b0e <USB_ReadInterrupts>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015c0:	d10d      	bne.n	80015de <HAL_PCD_IRQHandler+0x86e>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4619      	mov	r1, r3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f00e fc1d 	bl	800fe08 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	6952      	ldr	r2, [r2, #20]
 80015d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80015dc:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 fa93 	bl	8003b0e <USB_ReadInterrupts>
 80015e8:	4603      	mov	r3, r0
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80015f2:	d10d      	bne.n	8001610 <HAL_PCD_IRQHandler+0x8a0>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4619      	mov	r1, r3
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f00e fbf2 	bl	800fde4 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	6952      	ldr	r2, [r2, #20]
 800160a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800160e:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f002 fa7a 	bl	8003b0e <USB_ReadInterrupts>
 800161a:	4603      	mov	r3, r0
 800161c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001624:	d10a      	bne.n	800163c <HAL_PCD_IRQHandler+0x8cc>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f00e fc00 	bl	800fe2c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	6952      	ldr	r2, [r2, #20]
 8001636:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800163a:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f002 fa64 	bl	8003b0e <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b04      	cmp	r3, #4
 800164e:	d115      	bne.n	800167c <HAL_PCD_IRQHandler+0x90c>
    {
      temp = hpcd->Instance->GOTGINT;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <HAL_PCD_IRQHandler+0x8f8>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f00e fbf0 	bl	800fe48 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	6851      	ldr	r1, [r2, #4]
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	430a      	orrs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	e000      	b.n	800167c <HAL_PCD_IRQHandler+0x90c>
      return;
 800167a:	bf00      	nop
    }
  }
}
 800167c:	3730      	adds	r7, #48	; 0x30
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop

08001684 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_PCD_SetAddress+0x1a>
 800169a:	2302      	movs	r3, #2
 800169c:	e00f      	b.n	80016be <HAL_PCD_SetAddress+0x3a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f002 f9d9 	bl	8003a66 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	4608      	mov	r0, r1
 80016d0:	4611      	mov	r1, r2
 80016d2:	461a      	mov	r2, r3
 80016d4:	4603      	mov	r3, r0
 80016d6:	70fb      	strb	r3, [r7, #3]
 80016d8:	460b      	mov	r3, r1
 80016da:	803b      	strh	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80016e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da0b      	bge.n	8001704 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016f2:	4613      	mov	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	3338      	adds	r3, #56	; 0x38
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e00b      	b.n	800171c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800170a:	4613      	mov	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	1a9b      	subs	r3, r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001722:	b2da      	uxtb	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	09db      	lsrs	r3, r3, #7
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8001738:	883a      	ldrh	r2, [r7, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	78ba      	ldrb	r2, [r7, #2]
 8001742:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	785b      	ldrb	r3, [r3, #1]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d004      	beq.n	8001756 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b29a      	uxth	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8001756:	78bb      	ldrb	r3, [r7, #2]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d102      	bne.n	8001762 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	711a      	strb	r2, [r3, #4]
  }
  
  __HAL_LOCK(hpcd); 
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_PCD_EP_Open+0xaa>
 800176c:	2302      	movs	r3, #2
 800176e:	e00e      	b.n	800178e <HAL_PCD_EP_Open+0xc8>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68f9      	ldr	r1, [r7, #12]
 800177e:	4618      	mov	r0, r3
 8001780:	f001 fb4b 	bl	8002e1a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 800178c:	7afb      	ldrb	r3, [r7, #11]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80017a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da0b      	bge.n	80017c2 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017b0:	4613      	mov	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	3338      	adds	r3, #56	; 0x38
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	e00b      	b.n	80017da <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017c8:	4613      	mov	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80017e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	09db      	lsrs	r3, r3, #7
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_PCD_EP_Close+0x6e>
 8001800:	2302      	movs	r3, #2
 8001802:	e00e      	b.n	8001822 <HAL_PCD_EP_Close+0x8c>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68f9      	ldr	r1, [r7, #12]
 8001812:	4618      	mov	r0, r3
 8001814:	f001 fb8a 	bl	8002f2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	460b      	mov	r3, r1
 8001838:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800183a:	7afb      	ldrb	r3, [r7, #11]
 800183c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001840:	4613      	mov	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	1a9b      	subs	r3, r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2200      	movs	r2, #0
 8001868:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 800186a:	7afb      	ldrb	r3, [r7, #11]
 800186c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001870:	b2da      	uxtb	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d102      	bne.n	8001884 <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 8001884:	7afb      	ldrb	r3, [r7, #11]
 8001886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	6979      	ldr	r1, [r7, #20]
 800189c:	f001 fe4a 	bl	8003534 <USB_EP0StartXfer>
 80018a0:	e008      	b.n	80018b4 <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	6979      	ldr	r1, [r7, #20]
 80018b0:	f001 fbfe 	bl	80030b0 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	f003 020f 	and.w	r2, r3, #15
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	460b      	mov	r3, r1
 80018fe:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001900:	7afb      	ldrb	r3, [r7, #11]
 8001902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001906:	4613      	mov	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	3338      	adds	r3, #56	; 0x38
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2201      	movs	r2, #1
 800192c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 800192e:	7afb      	ldrb	r3, [r7, #11]
 8001930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001934:	b2da      	uxtb	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d102      	bne.n	8001948 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 8001948:	7afb      	ldrb	r3, [r7, #11]
 800194a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	6979      	ldr	r1, [r7, #20]
 8001960:	f001 fde8 	bl	8003534 <USB_EP0StartXfer>
 8001964:	e008      	b.n	8001978 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	6979      	ldr	r1, [r7, #20]
 8001974:	f001 fb9c 	bl	80030b0 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 800198e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001992:	2b00      	cmp	r3, #0
 8001994:	da0b      	bge.n	80019ae <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800199c:	4613      	mov	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	3338      	adds	r3, #56	; 0x38
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e009      	b.n	80019c2 <HAL_PCD_EP_SetStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	4413      	add	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2201      	movs	r2, #1
 80019c6:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80019d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	09db      	lsrs	r3, r3, #7
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_PCD_EP_SetStall+0x70>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e01e      	b.n	8001a30 <HAL_PCD_EP_SetStall+0xae>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 ff52 	bl	80038aa <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10a      	bne.n	8001a26 <HAL_PCD_EP_SetStall+0xa4>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	b2d9      	uxtb	r1, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001a20:	461a      	mov	r2, r3
 8001a22:	f002 f943 	bl	8003cac <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8001a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	da0b      	bge.n	8001a64 <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a52:	4613      	mov	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	3338      	adds	r3, #56	; 0x38
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	e009      	b.n	8001a78 <HAL_PCD_EP_ClrStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001a8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	09db      	lsrs	r3, r3, #7
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_PCD_EP_ClrStall+0x70>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e00e      	b.n	8001ac6 <HAL_PCD_EP_ClrStall+0x8e>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68f9      	ldr	r1, [r7, #12]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f001 ff68 	bl	800398c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b08a      	sub	sp, #40	; 0x28
 8001ad2:	af02      	add	r7, sp, #8
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	3338      	adds	r3, #56	; 0x38
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d202      	bcs.n	8001b14 <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3U) / 4U;
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	3303      	adds	r3, #3
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	61bb      	str	r3, [r7, #24]
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b1c:	e02b      	b.n	8001b76 <PCD_WriteEmptyTxFifo+0xa8>
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d202      	bcs.n	8001b3a <PCD_WriteEmptyTxFifo+0x6c>
    {
      len = ep->maxpacket;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3303      	adds	r3, #3
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	68d9      	ldr	r1, [r3, #12]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	b298      	uxth	r0, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	4603      	mov	r3, r0
 8001b58:	6978      	ldr	r0, [r7, #20]
 8001b5a:	f001 fe4a 	bl	80037f2 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	441a      	add	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	441a      	add	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	619a      	str	r2, [r3, #24]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	015a      	lsls	r2, r3, #5
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d909      	bls.n	8001ba0 <PCD_WriteEmptyTxFifo+0xd2>
          (ep->xfer_count < ep->xfer_len) &&
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	699a      	ldr	r2, [r3, #24]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	695b      	ldr	r3, [r3, #20]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d203      	bcs.n	8001ba0 <PCD_WriteEmptyTxFifo+0xd2>
            (ep->xfer_len != 0U))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	695b      	ldr	r3, [r3, #20]
          (ep->xfer_count < ep->xfer_len) &&
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1be      	bne.n	8001b1e <PCD_WriteEmptyTxFifo+0x50>
  }
  
  if(len <= 0U)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d110      	bne.n	8001bc8 <PCD_WriteEmptyTxFifo+0xfa>
  {
    fifoemptymsk = 0x1U << epnum;
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	70fb      	strb	r3, [r7, #3]
 8001bde:	4613      	mov	r3, r2
 8001be0:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d107      	bne.n	8001c08 <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	883a      	ldrh	r2, [r7, #0]
 8001bfe:	0411      	lsls	r1, r2, #16
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28
 8001c06:	e028      	b.n	8001c5a <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	0c1b      	lsrs	r3, r3, #16
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	4413      	add	r3, r2
 8001c14:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
 8001c1a:	e00d      	b.n	8001c38 <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	3340      	adds	r3, #64	; 0x40
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	0c1b      	lsrs	r3, r3, #16
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	4413      	add	r3, r2
 8001c30:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	3301      	adds	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	dbec      	blt.n	8001c1c <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6819      	ldr	r1, [r3, #0]
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	883a      	ldrh	r2, [r7, #0]
 8001c4c:	0410      	lsls	r0, r2, #16
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	4302      	orrs	r2, r0
 8001c52:	3340      	adds	r3, #64	; 0x40
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	887a      	ldrh	r2, [r7, #2]
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e22d      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d075      	beq.n	8001d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001caa:	4ba3      	ldr	r3, [pc, #652]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d00c      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb6:	4ba0      	ldr	r3, [pc, #640]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d112      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc2:	4b9d      	ldr	r3, [pc, #628]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cce:	d10b      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	4b99      	ldr	r3, [pc, #612]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d05b      	beq.n	8001d94 <HAL_RCC_OscConfig+0x108>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d157      	bne.n	8001d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e208      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf0:	d106      	bne.n	8001d00 <HAL_RCC_OscConfig+0x74>
 8001cf2:	4a91      	ldr	r2, [pc, #580]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	4b90      	ldr	r3, [pc, #576]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e01d      	b.n	8001d3c <HAL_RCC_OscConfig+0xb0>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x98>
 8001d0a:	4a8b      	ldr	r2, [pc, #556]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d0c:	4b8a      	ldr	r3, [pc, #552]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4a88      	ldr	r2, [pc, #544]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	4b87      	ldr	r3, [pc, #540]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e00b      	b.n	8001d3c <HAL_RCC_OscConfig+0xb0>
 8001d24:	4a84      	ldr	r2, [pc, #528]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d26:	4b84      	ldr	r3, [pc, #528]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4a81      	ldr	r2, [pc, #516]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d32:	4b81      	ldr	r3, [pc, #516]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7fe fc12 	bl	800056c <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7fe fc0e 	bl	800056c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1cd      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	4b76      	ldr	r3, [pc, #472]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0xc0>
 8001d6a:	e014      	b.n	8001d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7fe fbfe 	bl	800056c <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d74:	f7fe fbfa 	bl	800056c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e1b9      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d86:	4b6c      	ldr	r3, [pc, #432]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0xe8>
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d063      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001da2:	4b65      	ldr	r3, [pc, #404]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dae:	4b62      	ldr	r3, [pc, #392]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d11c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dba:	4b5f      	ldr	r3, [pc, #380]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d116      	bne.n	8001df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	4b5c      	ldr	r3, [pc, #368]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <HAL_RCC_OscConfig+0x152>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d001      	beq.n	8001dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e18d      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dde:	4956      	ldr	r1, [pc, #344]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	4b55      	ldr	r3, [pc, #340]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df2:	e03a      	b.n	8001e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d020      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfc:	4b4f      	ldr	r3, [pc, #316]	; (8001f3c <HAL_RCC_OscConfig+0x2b0>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e02:	f7fe fbb3 	bl	800056c <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e0a:	f7fe fbaf 	bl	800056c <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e16e      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1c:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	4943      	ldr	r1, [pc, #268]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001e2a:	4b43      	ldr	r3, [pc, #268]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
 8001e3c:	e015      	b.n	8001e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3e:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HAL_RCC_OscConfig+0x2b0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7fe fb92 	bl	800056c <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7fe fb8e 	bl	800056c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e14d      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5e:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d030      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d016      	beq.n	8001eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7e:	4b30      	ldr	r3, [pc, #192]	; (8001f40 <HAL_RCC_OscConfig+0x2b4>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7fe fb72 	bl	800056c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7fe fb6e 	bl	800056c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e12d      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x200>
 8001eaa:	e015      	b.n	8001ed8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eac:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_RCC_OscConfig+0x2b4>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7fe fb5b 	bl	800056c <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eba:	f7fe fb57 	bl	800056c <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e116      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f0      	bne.n	8001eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80a0 	beq.w	8002026 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10f      	bne.n	8001f16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f12:	2301      	movs	r3, #1
 8001f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_OscConfig+0x2b8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d121      	bne.n	8001f66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <HAL_RCC_OscConfig+0x2b8>)
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <HAL_RCC_OscConfig+0x2b8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2e:	f7fe fb1d 	bl	800056c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f34:	e011      	b.n	8001f5a <HAL_RCC_OscConfig+0x2ce>
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	42470000 	.word	0x42470000
 8001f40:	42470e80 	.word	0x42470e80
 8001f44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f48:	f7fe fb10 	bl	800056c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e0cf      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5a:	4b6a      	ldr	r3, [pc, #424]	; (8002104 <HAL_RCC_OscConfig+0x478>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d106      	bne.n	8001f7c <HAL_RCC_OscConfig+0x2f0>
 8001f6e:	4a66      	ldr	r2, [pc, #408]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001f70:	4b65      	ldr	r3, [pc, #404]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7a:	e01c      	b.n	8001fb6 <HAL_RCC_OscConfig+0x32a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d10c      	bne.n	8001f9e <HAL_RCC_OscConfig+0x312>
 8001f84:	4a60      	ldr	r2, [pc, #384]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001f86:	4b60      	ldr	r3, [pc, #384]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f90:	4a5d      	ldr	r2, [pc, #372]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001f92:	4b5d      	ldr	r3, [pc, #372]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9c:	e00b      	b.n	8001fb6 <HAL_RCC_OscConfig+0x32a>
 8001f9e:	4a5a      	ldr	r2, [pc, #360]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001fa0:	4b59      	ldr	r3, [pc, #356]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8001faa:	4a57      	ldr	r2, [pc, #348]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001fac:	4b56      	ldr	r3, [pc, #344]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d015      	beq.n	8001fea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbe:	f7fe fad5 	bl	800056c <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7fe fad1 	bl	800056c <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e08e      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fdc:	4b4a      	ldr	r3, [pc, #296]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ee      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x33a>
 8001fe8:	e014      	b.n	8002014 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7fe fabf 	bl	800056c <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7fe fabb 	bl	800056c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e078      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002008:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ee      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d105      	bne.n	8002026 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201a:	4a3b      	ldr	r2, [pc, #236]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 800201c:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d064      	beq.n	80020f8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800202e:	4b36      	ldr	r3, [pc, #216]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b08      	cmp	r3, #8
 8002038:	d05c      	beq.n	80020f4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d141      	bne.n	80020c6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002042:	4b32      	ldr	r3, [pc, #200]	; (800210c <HAL_RCC_OscConfig+0x480>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7fe fa90 	bl	800056c <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002050:	f7fe fa8c 	bl	800056c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e04b      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002062:	4b29      	ldr	r3, [pc, #164]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800206e:	4926      	ldr	r1, [pc, #152]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69da      	ldr	r2, [r3, #28]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	019b      	lsls	r3, r3, #6
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002086:	085b      	lsrs	r3, r3, #1
 8002088:	3b01      	subs	r3, #1
 800208a:	041b      	lsls	r3, r3, #16
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002092:	061b      	lsls	r3, r3, #24
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <HAL_RCC_OscConfig+0x480>)
 800209a:	2201      	movs	r2, #1
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7fe fa65 	bl	800056c <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a6:	f7fe fa61 	bl	800056c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e020      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x41a>
 80020c4:	e018      	b.n	80020f8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_RCC_OscConfig+0x480>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7fe fa4e 	bl	800056c <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d4:	f7fe fa4a 	bl	800056c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e009      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_RCC_OscConfig+0x47c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x448>
 80020f2:	e001      	b.n	80020f8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40007000 	.word	0x40007000
 8002108:	40023800 	.word	0x40023800
 800210c:	42470060 	.word	0x42470060

08002110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0ca      	b.n	80022ba <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002124:	4b67      	ldr	r3, [pc, #412]	; (80022c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 020f 	and.w	r2, r3, #15
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d20c      	bcs.n	800214c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b64      	ldr	r3, [pc, #400]	; (80022c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b62      	ldr	r3, [pc, #392]	; (80022c4 <HAL_RCC_ClockConfig+0x1b4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 020f 	and.w	r2, r3, #15
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0b6      	b.n	80022ba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002164:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002166:	4b58      	ldr	r3, [pc, #352]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800216e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800217c:	4a52      	ldr	r2, [pc, #328]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 800217e:	4b52      	ldr	r3, [pc, #328]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	494f      	ldr	r1, [pc, #316]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 800218a:	4b4f      	ldr	r3, [pc, #316]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d044      	beq.n	8002230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d119      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e07d      	b.n	80022ba <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d003      	beq.n	80021ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ce:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e06d      	b.n	80022ba <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021de:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e065      	b.n	80022ba <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ee:	4936      	ldr	r1, [pc, #216]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f023 0203 	bic.w	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002200:	f7fe f9b4 	bl	800056c <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	e00a      	b.n	800221e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002208:	f7fe f9b0 	bl	800056c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e04d      	b.n	80022ba <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 020c 	and.w	r2, r3, #12
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	429a      	cmp	r2, r3
 800222e:	d1eb      	bne.n	8002208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 020f 	and.w	r2, r3, #15
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d90c      	bls.n	8002258 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <HAL_RCC_ClockConfig+0x1b4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 020f 	and.w	r2, r3, #15
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e030      	b.n	80022ba <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002264:	4918      	ldr	r1, [pc, #96]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002282:	4911      	ldr	r1, [pc, #68]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002296:	f000 f81d 	bl	80022d4 <HAL_RCC_GetSysClockFreq>
 800229a:	4601      	mov	r1, r0
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	4a09      	ldr	r2, [pc, #36]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	5cd3      	ldrb	r3, [r2, r3]
 80022aa:	fa21 f303 	lsr.w	r3, r1, r3
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80022b2:	2000      	movs	r0, #0
 80022b4:	f00d fbbe 	bl	800fa34 <HAL_InitTick>

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023c00 	.word	0x40023c00
 80022c8:	40023800 	.word	0x40023800
 80022cc:	080109c8 	.word	0x080109c8
 80022d0:	200000c0 	.word	0x200000c0

080022d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d8:	b08f      	sub	sp, #60	; 0x3c
 80022da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e0:	2300      	movs	r3, #0
 80022e2:	637b      	str	r3, [r7, #52]	; 0x34
 80022e4:	2300      	movs	r3, #0
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ec:	4b62      	ldr	r3, [pc, #392]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d007      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x34>
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d008      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x3a>
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f040 80b2 	bne.w	8002466 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002302:	4b5e      	ldr	r3, [pc, #376]	; (800247c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002304:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8002306:	e0b1      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002308:	4b5d      	ldr	r3, [pc, #372]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800230c:	e0ae      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800230e:	4b5a      	ldr	r3, [pc, #360]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002318:	4b57      	ldr	r3, [pc, #348]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d04e      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002324:	4b54      	ldr	r3, [pc, #336]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	f04f 0400 	mov.w	r4, #0
 800232e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	ea01 0103 	and.w	r1, r1, r3
 800233a:	ea02 0204 	and.w	r2, r2, r4
 800233e:	460b      	mov	r3, r1
 8002340:	4614      	mov	r4, r2
 8002342:	0160      	lsls	r0, r4, #5
 8002344:	6278      	str	r0, [r7, #36]	; 0x24
 8002346:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002348:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800234c:	6278      	str	r0, [r7, #36]	; 0x24
 800234e:	015b      	lsls	r3, r3, #5
 8002350:	623b      	str	r3, [r7, #32]
 8002352:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002356:	1a5b      	subs	r3, r3, r1
 8002358:	eb64 0402 	sbc.w	r4, r4, r2
 800235c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8002360:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8002364:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002368:	ebb8 0803 	subs.w	r8, r8, r3
 800236c:	eb69 0904 	sbc.w	r9, r9, r4
 8002370:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002388:	eb18 0801 	adds.w	r8, r8, r1
 800238c:	eb49 0902 	adc.w	r9, r9, r2
 8002390:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80023a8:	4640      	mov	r0, r8
 80023aa:	4649      	mov	r1, r9
 80023ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ae:	f04f 0400 	mov.w	r4, #0
 80023b2:	461a      	mov	r2, r3
 80023b4:	4623      	mov	r3, r4
 80023b6:	f7fd ff1b 	bl	80001f0 <__aeabi_uldivmod>
 80023ba:	4603      	mov	r3, r0
 80023bc:	460c      	mov	r4, r1
 80023be:	637b      	str	r3, [r7, #52]	; 0x34
 80023c0:	e043      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c2:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	099b      	lsrs	r3, r3, #6
 80023c8:	f04f 0400 	mov.w	r4, #0
 80023cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	ea01 0103 	and.w	r1, r1, r3
 80023d8:	ea02 0204 	and.w	r2, r2, r4
 80023dc:	460b      	mov	r3, r1
 80023de:	4614      	mov	r4, r2
 80023e0:	0160      	lsls	r0, r4, #5
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	015b      	lsls	r3, r3, #5
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80023f4:	1a5b      	subs	r3, r3, r1
 80023f6:	eb64 0402 	sbc.w	r4, r4, r2
 80023fa:	01a6      	lsls	r6, r4, #6
 80023fc:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002400:	019d      	lsls	r5, r3, #6
 8002402:	1aed      	subs	r5, r5, r3
 8002404:	eb66 0604 	sbc.w	r6, r6, r4
 8002408:	00f3      	lsls	r3, r6, #3
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	00eb      	lsls	r3, r5, #3
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	e897 0060 	ldmia.w	r7, {r5, r6}
 800241c:	186d      	adds	r5, r5, r1
 800241e:	eb46 0602 	adc.w	r6, r6, r2
 8002422:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8002426:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800242a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800242e:	4655      	mov	r5, sl
 8002430:	465e      	mov	r6, fp
 8002432:	4628      	mov	r0, r5
 8002434:	4631      	mov	r1, r6
 8002436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002438:	f04f 0400 	mov.w	r4, #0
 800243c:	461a      	mov	r2, r3
 800243e:	4623      	mov	r3, r4
 8002440:	f7fd fed6 	bl	80001f0 <__aeabi_uldivmod>
 8002444:	4603      	mov	r3, r0
 8002446:	460c      	mov	r4, r1
 8002448:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	0c1b      	lsrs	r3, r3, #16
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	3301      	adds	r3, #1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800245a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002464:	e002      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800246a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800246e:	4618      	mov	r0, r3
 8002470:	373c      	adds	r7, #60	; 0x3c
 8002472:	46bd      	mov	sp, r7
 8002474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	00f42400 	.word	0x00f42400
 8002480:	007a1200 	.word	0x007a1200

08002484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_RCC_GetHCLKFreq+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	200000c0 	.word	0x200000c0

0800249c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024a0:	f7ff fff0 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024a4:	4601      	mov	r1, r0
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	0b5b      	lsrs	r3, r3, #13
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	4a03      	ldr	r2, [pc, #12]	; (80024c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
 80024b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800
 80024c0:	080109d8 	.word	0x080109d8

080024c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	220f      	movs	r2, #15
 80024d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_GetClockConfig+0x5c>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0203 	and.w	r2, r3, #3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_RCC_GetClockConfig+0x5c>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_RCC_GetClockConfig+0x5c>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_GetClockConfig+0x5c>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	08db      	lsrs	r3, r3, #3
 80024fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <HAL_RCC_GetClockConfig+0x60>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 020f 	and.w	r2, r3, #15
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	601a      	str	r2, [r3, #0]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	40023c00 	.word	0x40023c00

08002528 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e01d      	b.n	8002576 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f815 	bl	800257e <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3304      	adds	r3, #4
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f000 f95e 	bl	8002828 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	68d2      	ldr	r2, [r2, #12]
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	f042 0201 	orr.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d122      	bne.n	8002624 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d11b      	bne.n	8002624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0202 	mvn.w	r2, #2
 80025f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f8ee 	bl	80027ec <HAL_TIM_IC_CaptureCallback>
 8002610:	e005      	b.n	800261e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f8e0 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f8f1 	bl	8002800 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b04      	cmp	r3, #4
 8002630:	d122      	bne.n	8002678 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b04      	cmp	r3, #4
 800263e:	d11b      	bne.n	8002678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0204 	mvn.w	r2, #4
 8002648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2202      	movs	r2, #2
 800264e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8c4 	bl	80027ec <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f8b6 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f8c7 	bl	8002800 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b08      	cmp	r3, #8
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b08      	cmp	r3, #8
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0208 	mvn.w	r2, #8
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2204      	movs	r2, #4
 80026a2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f89a 	bl	80027ec <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f88c 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f89d 	bl	8002800 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0210 	mvn.w	r2, #16
 80026f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2208      	movs	r2, #8
 80026f6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f870 	bl	80027ec <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f862 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f873 	bl	8002800 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	d10e      	bne.n	800274c <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b01      	cmp	r3, #1
 800273a:	d107      	bne.n	800274c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0201 	mvn.w	r2, #1
 8002744:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f00d f90a 	bl	800f960 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b80      	cmp	r3, #128	; 0x80
 8002758:	d10e      	bne.n	8002778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	2b80      	cmp	r3, #128	; 0x80
 8002766:	d107      	bne.n	8002778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002770:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f8e6 	bl	8002944 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002782:	2b40      	cmp	r3, #64	; 0x40
 8002784:	d10e      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b40      	cmp	r3, #64	; 0x40
 8002792:	d107      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800279c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f838 	bl	8002814 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	d10e      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d107      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0220 	mvn.w	r2, #32
 80027c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f8b0 	bl	8002930 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a35      	ldr	r2, [pc, #212]	; (8002914 <TIM_Base_SetConfig+0xec>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00f      	beq.n	8002864 <TIM_Base_SetConfig+0x3c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284a:	d00b      	beq.n	8002864 <TIM_Base_SetConfig+0x3c>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a32      	ldr	r2, [pc, #200]	; (8002918 <TIM_Base_SetConfig+0xf0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d007      	beq.n	8002864 <TIM_Base_SetConfig+0x3c>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a31      	ldr	r2, [pc, #196]	; (800291c <TIM_Base_SetConfig+0xf4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d003      	beq.n	8002864 <TIM_Base_SetConfig+0x3c>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a30      	ldr	r2, [pc, #192]	; (8002920 <TIM_Base_SetConfig+0xf8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d101      	bne.n	8002868 <TIM_Base_SetConfig+0x40>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <TIM_Base_SetConfig+0x42>
 8002868:	2300      	movs	r3, #0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a24      	ldr	r2, [pc, #144]	; (8002914 <TIM_Base_SetConfig+0xec>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d01b      	beq.n	80028c0 <TIM_Base_SetConfig+0x98>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288e:	d017      	beq.n	80028c0 <TIM_Base_SetConfig+0x98>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a21      	ldr	r2, [pc, #132]	; (8002918 <TIM_Base_SetConfig+0xf0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d013      	beq.n	80028c0 <TIM_Base_SetConfig+0x98>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a20      	ldr	r2, [pc, #128]	; (800291c <TIM_Base_SetConfig+0xf4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00f      	beq.n	80028c0 <TIM_Base_SetConfig+0x98>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a1f      	ldr	r2, [pc, #124]	; (8002920 <TIM_Base_SetConfig+0xf8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d00b      	beq.n	80028c0 <TIM_Base_SetConfig+0x98>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a1e      	ldr	r2, [pc, #120]	; (8002924 <TIM_Base_SetConfig+0xfc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d007      	beq.n	80028c0 <TIM_Base_SetConfig+0x98>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <TIM_Base_SetConfig+0x100>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d003      	beq.n	80028c0 <TIM_Base_SetConfig+0x98>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a1c      	ldr	r2, [pc, #112]	; (800292c <TIM_Base_SetConfig+0x104>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d101      	bne.n	80028c4 <TIM_Base_SetConfig+0x9c>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <TIM_Base_SetConfig+0x9e>
 80028c4:	2300      	movs	r3, #0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a07      	ldr	r2, [pc, #28]	; (8002914 <TIM_Base_SetConfig+0xec>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d103      	bne.n	8002902 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	615a      	str	r2, [r3, #20]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40010000 	.word	0x40010000
 8002918:	40000400 	.word	0x40000400
 800291c:	40000800 	.word	0x40000800
 8002920:	40000c00 	.word	0x40000c00
 8002924:	40014000 	.word	0x40014000
 8002928:	40014400 	.word	0x40014400
 800292c:	40014800 	.word	0x40014800

08002930 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002958:	b084      	sub	sp, #16
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	f107 0014 	add.w	r0, r7, #20
 8002966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296c:	2b01      	cmp	r3, #1
 800296e:	d120      	bne.n	80029b2 <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 8002998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800299a:	2b01      	cmp	r3, #1
 800299c:	d105      	bne.n	80029aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f001 f9c4 	bl	8003d38 <USB_CoreReset>
 80029b0:	e00c      	b.n	80029cc <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f001 f9ba 	bl	8003d38 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d10b      	bne.n	80029ea <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f043 0206 	orr.w	r2, r3, #6
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f043 0220 	orr.w	r2, r3, #32
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029f6:	b004      	add	sp, #16
 80029f8:	4770      	bx	lr

080029fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f043 0201 	orr.w	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f023 0201 	bic.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002a56:	78fb      	ldrb	r3, [r7, #3]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d106      	bne.n	8002a6a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	60da      	str	r2, [r3, #12]
 8002a68:	e008      	b.n	8002a7c <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 8002a7c:	2032      	movs	r0, #50	; 0x32
 8002a7e:	f7fd fd81 	bl	8000584 <HAL_Delay>
  
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	f107 001c 	add.w	r0, r7, #28
 8002a9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
 8002aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <USB_DevInit+0x2a>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ab4:	e005      	b.n	8002ac2 <USB_DevInit+0x36>
  }
  else
  {
    /* Enable VBUS */
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2300      	movs	r3, #0
 8002acc:	6013      	str	r3, [r2, #0]
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6013      	str	r3, [r2, #0]
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d10c      	bne.n	8002b00 <USB_DevInit+0x74>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d104      	bne.n	8002af6 <USB_DevInit+0x6a>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8002aec:	2100      	movs	r1, #0
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f946 	bl	8002d80 <USB_SetDevSpeed>
 8002af4:	e008      	b.n	8002b08 <USB_DevInit+0x7c>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8002af6:	2101      	movs	r1, #1
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f941 	bl	8002d80 <USB_SetDevSpeed>
 8002afe:	e003      	b.n	8002b08 <USB_DevInit+0x7c>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002b00:	2103      	movs	r1, #3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f93c 	bl	8002d80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8002b08:	2110      	movs	r1, #16
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f8f0 	bl	8002cf0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f913 	bl	8002d3c <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2300      	movs	r3, #0
 8002b20:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b34:	461a      	mov	r2, r3
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3a:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b42:	461a      	mov	r2, r3
 8002b44:	2300      	movs	r3, #0
 8002b46:	61d3      	str	r3, [r2, #28]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e034      	b.n	8002bb8 <USB_DevInit+0x12c>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b64:	d10a      	bne.n	8002b7c <USB_DevInit+0xf0>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b72:	461a      	mov	r2, r3
 8002b74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e008      	b.n	8002b8e <USB_DevInit+0x102>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bac:	461a      	mov	r2, r3
 8002bae:	23ff      	movs	r3, #255	; 0xff
 8002bb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d8c6      	bhi.n	8002b4e <USB_DevInit+0xc2>
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	e034      	b.n	8002c30 <USB_DevInit+0x1a4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bdc:	d10a      	bne.n	8002bf4 <USB_DevInit+0x168>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bea:	461a      	mov	r2, r3
 8002bec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e008      	b.n	8002c06 <USB_DevInit+0x17a>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c00:	461a      	mov	r2, r3
 8002c02:	2300      	movs	r3, #0
 8002c04:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c12:	461a      	mov	r2, r3
 8002c14:	2300      	movs	r3, #0
 8002c16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c24:	461a      	mov	r2, r3
 8002c26:	23ff      	movs	r3, #255	; 0xff
 8002c28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d8c6      	bhi.n	8002bc6 <USB_DevInit+0x13a>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c3e:	461a      	mov	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c4c:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1U)
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d117      	bne.n	8002c84 <USB_DevInit+0x1f8>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <USB_DevInit+0x25c>)
 8002c5e:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c66:	461a      	mov	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c74:	f043 0303 	orr.w	r3, r3, #3
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002c90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f043 0210 	orr.w	r2, r3, #16
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699a      	ldr	r2, [r3, #24]
 8002ca8:	4b10      	ldr	r3, [pc, #64]	; (8002cec <USB_DevInit+0x260>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <USB_DevInit+0x236>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f043 0208 	orr.w	r2, r3, #8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8002cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d107      	bne.n	8002cd8 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ce4:	b004      	add	sp, #16
 8002ce6:	4770      	bx	lr
 8002ce8:	00800100 	.word	0x00800100
 8002cec:	803c3800 	.word	0x803c3800

08002cf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <USB_FlushTxFifo+0x48>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e006      	b.n	8002d2a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d0f0      	beq.n	8002d0a <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	00030d40 	.word	0x00030d40

08002d3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3301      	adds	r3, #1
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <USB_FlushRxFifo+0x40>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e006      	b.n	8002d6e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d0f0      	beq.n	8002d4e <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	00030d40 	.word	0x00030d40

08002d80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d92:	4619      	mov	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0306 	and.w	r3, r3, #6
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]
 8002dd0:	e01c      	b.n	8002e0c <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0306 	and.w	r3, r3, #6
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d007      	beq.n	8002df2 <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d102      	bne.n	8002df8 <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 8002df2:	2303      	movs	r3, #3
 8002df4:	73fb      	strb	r3, [r7, #15]
 8002df6:	e009      	b.n	8002e0c <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0306 	and.w	r3, r3, #6
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d101      	bne.n	8002e0c <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	785b      	ldrb	r3, [r3, #1]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d13e      	bne.n	8002eaa <USB_ActivateEndpoint+0x90>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e32:	4619      	mov	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e3a:	69da      	ldr	r2, [r3, #28]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	2301      	movs	r3, #1
 8002e44:	4083      	lsls	r3, r0
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d15c      	bne.n	8002f1e <USB_ActivateEndpoint+0x104>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e72:	4618      	mov	r0, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e8c:	6839      	ldr	r1, [r7, #0]
 8002e8e:	78c9      	ldrb	r1, [r1, #3]
 8002e90:	0489      	lsls	r1, r1, #18
 8002e92:	430b      	orrs	r3, r1
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 8002e94:	6839      	ldr	r1, [r7, #0]
 8002e96:	7809      	ldrb	r1, [r1, #0]
 8002e98:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea6:	6003      	str	r3, [r0, #0]
 8002ea8:	e039      	b.n	8002f1e <USB_ActivateEndpoint+0x104>
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	4083      	lsls	r3, r0
 8002ec4:	041b      	lsls	r3, r3, #16
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11d      	bne.n	8002f1e <USB_ActivateEndpoint+0x104>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f0a:	6839      	ldr	r1, [r7, #0]
 8002f0c:	78c9      	ldrb	r1, [r1, #3]
 8002f0e:	0489      	lsls	r1, r1, #18
 8002f10:	430b      	orrs	r3, r1
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f1c:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	785b      	ldrb	r3, [r3, #1]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d154      	bne.n	8002fec <USB_DeactivateEndpoint+0xc0>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f50:	4619      	mov	r1, r3
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f66:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f76:	461a      	mov	r2, r3
 8002f78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f7c:	6013      	str	r3, [r2, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f92:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3301      	adds	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4a43      	ldr	r2, [pc, #268]	; (80030ac <USB_DeactivateEndpoint+0x180>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <USB_DeactivateEndpoint+0x7a>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e07d      	b.n	80030a2 <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbe:	d0e9      	beq.n	8002f94 <USB_DeactivateEndpoint+0x68>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8002fc0:	2110      	movs	r1, #16
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fe94 	bl	8002cf0 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fce:	4619      	mov	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd6:	69da      	ldr	r2, [r3, #28]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	2301      	movs	r3, #1
 8002fe0:	4083      	lsls	r3, r0
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61cb      	str	r3, [r1, #28]
 8002fea:	e059      	b.n	80030a0 <USB_DeactivateEndpoint+0x174>
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003010:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003020:	461a      	mov	r2, r3
 8003022:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003026:	6013      	str	r3, [r2, #0]
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003036:	461a      	mov	r2, r3
 8003038:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800303c:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3301      	adds	r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a19      	ldr	r2, [pc, #100]	; (80030ac <USB_DeactivateEndpoint+0x180>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <USB_DeactivateEndpoint+0x124>
      {
        return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e028      	b.n	80030a2 <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b10      	cmp	r3, #16
 8003066:	d0ea      	beq.n	800303e <USB_DeactivateEndpoint+0x112>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800306e:	461a      	mov	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800307c:	6053      	str	r3, [r2, #4]
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003084:	4619      	mov	r1, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	2301      	movs	r3, #1
 8003096:	4083      	lsls	r3, r0
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	43db      	mvns	r3, r3
 800309c:	4013      	ands	r3, r2
 800309e:	61cb      	str	r3, [r1, #28]
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	00030d40 	.word	0x00030d40

080030b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	785b      	ldrb	r3, [r3, #1]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	f040 8146 	bne.w	8003358 <USB_EPStartXfer+0x2a8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d13b      	bne.n	800314c <USB_EPStartXfer+0x9c>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e2:	4619      	mov	r1, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80030f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80030fc:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800310c:	4619      	mov	r1, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003122:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003132:	4619      	mov	r1, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	0cdb      	lsrs	r3, r3, #19
 8003146:	04db      	lsls	r3, r3, #19
 8003148:	610b      	str	r3, [r1, #16]
 800314a:	e086      	b.n	800325a <USB_EPStartXfer+0x1aa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315a:	4619      	mov	r1, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	0cdb      	lsrs	r3, r3, #19
 800316e:	04db      	lsls	r3, r3, #19
 8003170:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003180:	4619      	mov	r1, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003196:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800319a:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031aa:	4618      	mov	r0, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	6959      	ldr	r1, [r3, #20]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	440b      	add	r3, r1
 80031c6:	1e59      	subs	r1, r3, #1
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80031d0:	04d9      	lsls	r1, r3, #19
 80031d2:	4b8c      	ldr	r3, [pc, #560]	; (8003404 <USB_EPStartXfer+0x354>)
 80031d4:	400b      	ands	r3, r1
 80031d6:	4313      	orrs	r3, r2
 80031d8:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e8:	4619      	mov	r1, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003202:	4313      	orrs	r3, r2
 8003204:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	78db      	ldrb	r3, [r3, #3]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d125      	bne.n	800325a <USB_EPStartXfer+0x1aa>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800321c:	4619      	mov	r1, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003232:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003242:	4619      	mov	r1, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4413      	add	r3, r2
 800324e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003258:	610b      	str	r3, [r1, #16]
      }       
    }

    if (dma == 1U)
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d10b      	bne.n	8003278 <USB_EPStartXfer+0x1c8>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800326e:	461a      	mov	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	6153      	str	r3, [r2, #20]
 8003276:	e016      	b.n	80032a6 <USB_EPStartXfer+0x1f6>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	78db      	ldrb	r3, [r3, #3]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d012      	beq.n	80032a6 <USB_EPStartXfer+0x1f6>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00e      	beq.n	80032a6 <USB_EPStartXfer+0x1f6>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328e:	4619      	mov	r1, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	2301      	movs	r3, #1
 80032a0:	4083      	lsls	r3, r0
 80032a2:	4313      	orrs	r3, r2
 80032a4:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	78db      	ldrb	r3, [r3, #3]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d12e      	bne.n	800330c <USB_EPStartXfer+0x25c>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d113      	bne.n	80032e6 <USB_EPStartXfer+0x236>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032cc:	4619      	mov	r1, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032e2:	600b      	str	r3, [r1, #0]
 80032e4:	e012      	b.n	800330c <USB_EPStartXfer+0x25c>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f4:	4619      	mov	r1, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330a:	600b      	str	r3, [r1, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4413      	add	r3, r2
 8003316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800331a:	4619      	mov	r1, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003330:	600b      	str	r3, [r1, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	78db      	ldrb	r3, [r3, #3]
 8003336:	2b01      	cmp	r3, #1
 8003338:	f040 80f5 	bne.w	8003526 <USB_EPStartXfer+0x476>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	68d9      	ldr	r1, [r3, #12]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	b298      	uxth	r0, r3
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	4603      	mov	r3, r0
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fa4e 	bl	80037f2 <USB_WritePacket>
 8003356:	e0e6      	b.n	8003526 <USB_EPStartXfer+0x476>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003366:	4619      	mov	r1, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	0cdb      	lsrs	r3, r3, #19
 800337a:	04db      	lsls	r3, r3, #19
 800337c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338c:	4619      	mov	r1, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033a6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d12b      	bne.n	8003408 <USB_EPStartXfer+0x358>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033be:	4619      	mov	r1, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d8:	4313      	orrs	r3, r2
 80033da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ea:	4619      	mov	r1, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003400:	610b      	str	r3, [r1, #16]
 8003402:	e03c      	b.n	800347e <USB_EPStartXfer+0x3ce>
 8003404:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4413      	add	r3, r2
 8003412:	1e5a      	subs	r2, r3, #1
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	fbb2 f3f3 	udiv	r3, r2, r3
 800341c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342c:	4619      	mov	r1, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	8afb      	ldrh	r3, [r7, #22]
 8003440:	04db      	lsls	r3, r3, #19
 8003442:	4618      	mov	r0, r3
 8003444:	4b3a      	ldr	r3, [pc, #232]	; (8003530 <USB_EPStartXfer+0x480>)
 8003446:	4003      	ands	r3, r0
 8003448:	4313      	orrs	r3, r2
 800344a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345a:	4618      	mov	r0, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	8af9      	ldrh	r1, [r7, #22]
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347a:	4313      	orrs	r3, r2
 800347c:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1U)
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d10a      	bne.n	800349a <USB_EPStartXfer+0x3ea>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4413      	add	r3, r2
 800348e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003492:	461a      	mov	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	6153      	str	r3, [r2, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	78db      	ldrb	r3, [r3, #3]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d12e      	bne.n	8003500 <USB_EPStartXfer+0x450>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d113      	bne.n	80034da <USB_EPStartXfer+0x42a>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c0:	4619      	mov	r1, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034d6:	600b      	str	r3, [r1, #0]
 80034d8:	e012      	b.n	8003500 <USB_EPStartXfer+0x450>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e8:	4619      	mov	r1, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fe:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350e:	4619      	mov	r1, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003524:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	1ff80000 	.word	0x1ff80000

08003534 <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	4613      	mov	r3, r2
 8003540:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	785b      	ldrb	r3, [r3, #1]
 8003546:	2b01      	cmp	r3, #1
 8003548:	f040 80d2 	bne.w	80036f0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d13b      	bne.n	80035cc <USB_EP0StartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003562:	4619      	mov	r1, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003578:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800357c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	4619      	mov	r1, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b2:	4619      	mov	r1, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	0cdb      	lsrs	r3, r3, #19
 80035c6:	04db      	lsls	r3, r3, #19
 80035c8:	610b      	str	r3, [r1, #16]
 80035ca:	e05a      	b.n	8003682 <USB_EP0StartXfer+0x14e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035da:	4619      	mov	r1, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	0cdb      	lsrs	r3, r3, #19
 80035ee:	04db      	lsls	r3, r3, #19
 80035f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003600:	4619      	mov	r1, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003616:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800361a:	610b      	str	r3, [r1, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	d903      	bls.n	8003630 <USB_EP0StartXfer+0xfc>
      {
        ep->xfer_len = ep->maxpacket;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363e:	4619      	mov	r1, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003654:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003664:	4619      	mov	r1, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367e:	4313      	orrs	r3, r2
 8003680:	610b      	str	r3, [r1, #16]
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003690:	4619      	mov	r1, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036a6:	600b      	str	r3, [r1, #0]
    
    if (dma == 1)
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d10b      	bne.n	80036c6 <USB_EP0StartXfer+0x192>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036bc:	461a      	mov	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	6153      	str	r3, [r2, #20]
 80036c4:	e08e      	b.n	80037e4 <USB_EP0StartXfer+0x2b0>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 808a 	beq.w	80037e4 <USB_EP0StartXfer+0x2b0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d6:	4619      	mov	r1, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	2301      	movs	r3, #1
 80036e8:	4083      	lsls	r3, r0
 80036ea:	4313      	orrs	r3, r2
 80036ec:	634b      	str	r3, [r1, #52]	; 0x34
 80036ee:	e079      	b.n	80037e4 <USB_EP0StartXfer+0x2b0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fe:	4619      	mov	r1, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	0cdb      	lsrs	r3, r3, #19
 8003712:	04db      	lsls	r3, r3, #19
 8003714:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003724:	4619      	mov	r1, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800373a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800373e:	610b      	str	r3, [r1, #16]
      
    if (ep->xfer_len > 0U)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <USB_EP0StartXfer+0x21c>
    {
      ep->xfer_len = ep->maxpacket;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800375e:	4619      	mov	r1, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003774:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003784:	4619      	mov	r1, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379e:	4313      	orrs	r3, r2
 80037a0:	610b      	str	r3, [r1, #16]
    

    if (dma == 1U)
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d10a      	bne.n	80037be <USB_EP0StartXfer+0x28a>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b6:	461a      	mov	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	6153      	str	r3, [r2, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037cc:	4619      	mov	r1, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037e2:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b087      	sub	sp, #28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	4611      	mov	r1, r2
 80037fe:	461a      	mov	r2, r3
 8003800:	460b      	mov	r3, r1
 8003802:	71fb      	strb	r3, [r7, #7]
 8003804:	4613      	mov	r3, r2
 8003806:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 8003810:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d11a      	bne.n	800384e <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 8003818:	88bb      	ldrh	r3, [r7, #4]
 800381a:	3303      	adds	r3, #3
 800381c:	089b      	lsrs	r3, r3, #2
 800381e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e00f      	b.n	8003846 <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	031a      	lsls	r2, r3, #12
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4413      	add	r3, r2
 800382e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003832:	461a      	mov	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3301      	adds	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	3304      	adds	r3, #4
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	429a      	cmp	r2, r3
 800384c:	d3eb      	bcc.n	8003826 <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	3303      	adds	r3, #3
 8003872:	089b      	lsrs	r3, r3, #2
 8003874:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	e00b      	b.n	8003894 <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	3301      	adds	r3, #1
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	3304      	adds	r3, #4
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	429a      	cmp	r2, r3
 800389a:	d3ef      	bcc.n	800387c <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 800389c:	68bb      	ldr	r3, [r7, #8]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	785b      	ldrb	r3, [r3, #1]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d130      	bne.n	800391e <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	db12      	blt.n	80038f6 <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038de:	4619      	mov	r1, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038f4:	600b      	str	r3, [r1, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003904:	4619      	mov	r1, r3
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800391a:	600b      	str	r3, [r1, #0]
 800391c:	e02f      	b.n	800397e <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	db12      	blt.n	8003958 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003940:	4619      	mov	r1, r3
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003956:	600b      	str	r3, [r1, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003966:	4619      	mov	r1, r3
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800397c:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	785b      	ldrb	r3, [r3, #1]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d12e      	bne.n	80039fc <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ac:	4619      	mov	r1, r3
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039c2:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	78db      	ldrb	r3, [r3, #3]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d003      	beq.n	80039d4 <USB_EPClearStall+0x48>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	78db      	ldrb	r3, [r3, #3]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d141      	bne.n	8003a58 <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e2:	4619      	mov	r1, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f8:	600b      	str	r3, [r1, #0]
 80039fa:	e02d      	b.n	8003a58 <USB_EPClearStall+0xcc>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a20:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	78db      	ldrb	r3, [r3, #3]
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d003      	beq.n	8003a32 <USB_EPClearStall+0xa6>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	78db      	ldrb	r3, [r3, #3]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d112      	bne.n	8003a58 <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a40:	4619      	mov	r1, r3
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a56:	600b      	str	r3, [r1, #0]
    }    
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	460b      	mov	r3, r1
 8003a70:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a78:	461a      	mov	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a86:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a8e:	4619      	mov	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f023 0302 	bic.w	r3, r3, #2
 8003ace:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003ad0:	2003      	movs	r0, #3
 8003ad2:	f7fc fd57 	bl	8000584 <HAL_Delay>
  
  return HAL_OK;  
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aee:	461a      	mov	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f043 0302 	orr.w	r3, r3, #2
 8003afc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003afe:	2003      	movs	r0, #3
 8003b00:	f7fc fd40 	bl	8000584 <HAL_Delay>
  
  return HAL_OK;  
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b085      	sub	sp, #20
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4013      	ands	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
  return v;  
 8003b2a:	68fb      	ldr	r3, [r7, #12]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4013      	ands	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000U) >> 16U);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	0c1b      	lsrs	r3, r3, #16
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4013      	ands	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFFU));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	b29b      	uxth	r3, r3
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  return v;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf8:	01db      	lsls	r3, r3, #7
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4013      	ands	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
  return v;
 8003c16:	68fb      	ldr	r3, [r7, #12]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f003 0301 	and.w	r3, r3, #1
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4e:	461a      	mov	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c5c:	f023 0307 	bic.w	r3, r3, #7
 8003c60:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0306 	and.w	r3, r3, #6
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d10a      	bne.n	8003c88 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c78:	461a      	mov	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f043 0303 	orr.w	r3, r3, #3
 8003c86:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8e:	461a      	mov	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cda:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f043 0318 	orr.w	r3, r3, #24
 8003cf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003d06:	6113      	str	r3, [r2, #16]
  
  if (dma == 1U)
 8003d08:	7afb      	ldrb	r3, [r7, #11]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d10c      	bne.n	8003d28 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d14:	461a      	mov	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d20:	461a      	mov	r2, r3
 8003d22:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8003d26:	6013      	str	r3, [r2, #0]
  }
  
  return HAL_OK;  
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3301      	adds	r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4a13      	ldr	r2, [pc, #76]	; (8003d9c <USB_CoreReset+0x64>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e01b      	b.n	8003d8e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	daf2      	bge.n	8003d44 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3301      	adds	r3, #1
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4a09      	ldr	r2, [pc, #36]	; (8003d9c <USB_CoreReset+0x64>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d901      	bls.n	8003d80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e006      	b.n	8003d8e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d0f0      	beq.n	8003d6e <USB_CoreReset+0x36>
  
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	00030d40 	.word	0x00030d40

08003da0 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	70fb      	strb	r3, [r7, #3]
    /* Open EP IN */
	USBD_LL_OpenEP(pdev, RNDIS_NOTIFICATION_IN_EP, USBD_EP_TYPE_INTR, RNDIS_NOTIFICATION_IN_SZ);
 8003dac:	2308      	movs	r3, #8
 8003dae:	2203      	movs	r2, #3
 8003db0:	2181      	movs	r1, #129	; 0x81
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f00c f8dc 	bl	800ff70 <USBD_LL_OpenEP>
    
    /* Open EP OUT */
	USBD_LL_OpenEP(pdev, RNDIS_DATA_IN_EP, USBD_EP_TYPE_BULK, RNDIS_DATA_IN_SZ);
 8003db8:	2340      	movs	r3, #64	; 0x40
 8003dba:	2202      	movs	r2, #2
 8003dbc:	2182      	movs	r1, #130	; 0x82
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f00c f8d6 	bl	800ff70 <USBD_LL_OpenEP>

    /* Open EP IN */
	USBD_LL_OpenEP(pdev, RNDIS_DATA_OUT_EP, USBD_EP_TYPE_BULK, RNDIS_DATA_OUT_SZ);
 8003dc4:	2340      	movs	r3, #64	; 0x40
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	2101      	movs	r1, #1
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f00c f8d0 	bl	800ff70 <USBD_LL_OpenEP>
    
    /* Init Xfer states */
    //txState =0;
    //rxState =0;
	pDev = pdev;
 8003dd0:	4a06      	ldr	r2, [pc, #24]	; (8003dec <USBD_CDC_Init+0x4c>)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6013      	str	r3, [r2, #0]
    USBD_LL_PrepareReceive(pdev, RNDIS_DATA_OUT_EP, (uint8_t*)usb_rx_buffer, RNDIS_DATA_OUT_SZ);
 8003dd6:	2340      	movs	r3, #64	; 0x40
 8003dd8:	4a05      	ldr	r2, [pc, #20]	; (8003df0 <USBD_CDC_Init+0x50>)
 8003dda:	2101      	movs	r1, #1
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f00c fa43 	bl	8010268 <USBD_LL_PrepareReceive>
    return 0;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	200058c8 	.word	0x200058c8
 8003df0:	20004be0 	.word	0x20004be0

08003df4 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev, RNDIS_NOTIFICATION_IN_EP);
 8003e00:	2181      	movs	r1, #129	; 0x81
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f00c f8f2 	bl	800ffec <USBD_LL_CloseEP>
  
  USBD_LL_CloseEP(pdev, RNDIS_DATA_IN_EP);
 8003e08:	2182      	movs	r1, #130	; 0x82
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f00c f8ee 	bl	800ffec <USBD_LL_CloseEP>
  
  USBD_LL_CloseEP(pdev, RNDIS_DATA_OUT_EP);
 8003e10:	2101      	movs	r1, #1
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f00c f8ea 	bl	800ffec <USBD_LL_CloseEP>
  
  return 0;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <USBD_CDC_Setup>:
  *         Handle the CDC specific requests
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
	switch (req->bmRequest & USB_REQ_TYPE_MASK){
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d000      	beq.n	8003e3c <USBD_CDC_Setup+0x18>
				{
					USBD_CtlPrepareRx (pdev, encapsulated_buffer, req->wLength);
				}
			}
		default:
			break;
 8003e3a:	e018      	b.n	8003e6e <USBD_CDC_Setup+0x4a>
			if (req->wLength){
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	88db      	ldrh	r3, [r3, #6]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d014      	beq.n	8003e6e <USBD_CDC_Setup+0x4a>
				if (req->bmRequest & 0x80)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	b25b      	sxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	da08      	bge.n	8003e60 <USBD_CDC_Setup+0x3c>
					USBD_CtlSendData(pdev, encapsulated_buffer, ((rndis_generic_msg_t *)encapsulated_buffer)->MessageLength);
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <USBD_CDC_Setup+0x58>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	4909      	ldr	r1, [pc, #36]	; (8003e7c <USBD_CDC_Setup+0x58>)
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f001 fbd9 	bl	8005610 <USBD_CtlSendData>
			break;
 8003e5e:	e006      	b.n	8003e6e <USBD_CDC_Setup+0x4a>
					USBD_CtlPrepareRx (pdev, encapsulated_buffer, req->wLength);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	88db      	ldrh	r3, [r3, #6]
 8003e64:	461a      	mov	r2, r3
 8003e66:	4905      	ldr	r1, [pc, #20]	; (8003e7c <USBD_CDC_Setup+0x58>)
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f001 fbff 	bl	800566c <USBD_CtlPrepareRx>
			break;
 8003e6e:	bf00      	nop
	}
	return USBD_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20005238 	.word	0x20005238

08003e80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
	epnum &= 0x0F;
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	70fb      	strb	r3, [r7, #3]
	if (epnum == (RNDIS_DATA_IN_EP & 0x0F)){
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d11d      	bne.n	8003ed6 <USBD_CDC_DataIn+0x56>
		rndis_first_tx = 0;
 8003e9a:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <USBD_CDC_DataIn+0x60>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
		rndis_sended += sended;
 8003ea0:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <USBD_CDC_DataIn+0x64>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <USBD_CDC_DataIn+0x68>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	4a0e      	ldr	r2, [pc, #56]	; (8003ee4 <USBD_CDC_DataIn+0x64>)
 8003eac:	6013      	str	r3, [r2, #0]
		rndis_tx_size -= sended;
 8003eae:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <USBD_CDC_DataIn+0x6c>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <USBD_CDC_DataIn+0x68>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	4a0c      	ldr	r2, [pc, #48]	; (8003eec <USBD_CDC_DataIn+0x6c>)
 8003eba:	6013      	str	r3, [r2, #0]
		rndis_tx_ptr += sended;
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <USBD_CDC_DataIn+0x70>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <USBD_CDC_DataIn+0x68>)
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <USBD_CDC_DataIn+0x70>)
 8003ec8:	6013      	str	r3, [r2, #0]
		sended = 0;
 8003eca:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <USBD_CDC_DataIn+0x68>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
		usbd_cdc_transfer(pdev);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f951 	bl	8004178 <usbd_cdc_transfer>
	}
	return USBD_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20000004 	.word	0x20000004
 8003ee4:	20000300 	.word	0x20000300
 8003ee8:	20000304 	.word	0x20000304
 8003eec:	200002fc 	.word	0x200002fc
 8003ef0:	200002f8 	.word	0x200002f8

08003ef4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	70fb      	strb	r3, [r7, #3]
	uint32_t xfer_count = USBD_LL_GetRxDataSize (pdev, epnum);
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	4619      	mov	r1, r3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f00c f9e9 	bl	80102dc <USBD_LL_GetRxDataSize>
 8003f0a:	60f8      	str	r0, [r7, #12]
	static int rndis_received = 0;
	if (epnum == RNDIS_DATA_OUT_EP){
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d146      	bne.n	8003fa0 <USBD_CDC_DataOut+0xac>
		if (rndis_received + xfer_count > RNDIS_RX_BUFFER_SIZE){
 8003f12:	4b26      	ldr	r3, [pc, #152]	; (8003fac <USBD_CDC_DataOut+0xb8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f240 6216 	movw	r2, #1558	; 0x616
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d908      	bls.n	8003f36 <USBD_CDC_DataOut+0x42>
			usb_eth_stat.rxbad++;
 8003f24:	4b22      	ldr	r3, [pc, #136]	; (8003fb0 <USBD_CDC_DataOut+0xbc>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	4a21      	ldr	r2, [pc, #132]	; (8003fb0 <USBD_CDC_DataOut+0xbc>)
 8003f2c:	60d3      	str	r3, [r2, #12]
			rndis_received = 0;
 8003f2e:	4b1f      	ldr	r3, [pc, #124]	; (8003fac <USBD_CDC_DataOut+0xb8>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	e02e      	b.n	8003f94 <USBD_CDC_DataOut+0xa0>
		}
		else{
			if (rndis_received + xfer_count <= RNDIS_RX_BUFFER_SIZE){
 8003f36:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <USBD_CDC_DataOut+0xb8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f240 6216 	movw	r2, #1558	; 0x616
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d81d      	bhi.n	8003f84 <USBD_CDC_DataOut+0x90>
				memcpy(&rndis_rx_buffer[rndis_received], usb_rx_buffer, xfer_count);
 8003f48:	4b18      	ldr	r3, [pc, #96]	; (8003fac <USBD_CDC_DataOut+0xb8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a19      	ldr	r2, [pc, #100]	; (8003fb4 <USBD_CDC_DataOut+0xc0>)
 8003f4e:	4413      	add	r3, r2
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4919      	ldr	r1, [pc, #100]	; (8003fb8 <USBD_CDC_DataOut+0xc4>)
 8003f54:	4618      	mov	r0, r3
 8003f56:	f00c fae2 	bl	801051e <memcpy>
				rndis_received += xfer_count;
 8003f5a:	4b14      	ldr	r3, [pc, #80]	; (8003fac <USBD_CDC_DataOut+0xb8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b11      	ldr	r3, [pc, #68]	; (8003fac <USBD_CDC_DataOut+0xb8>)
 8003f68:	601a      	str	r2, [r3, #0]
				if (xfer_count != RNDIS_DATA_OUT_SZ){
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b40      	cmp	r3, #64	; 0x40
 8003f6e:	d011      	beq.n	8003f94 <USBD_CDC_DataOut+0xa0>
					handle_packet(rndis_rx_buffer, rndis_received);
 8003f70:	4b0e      	ldr	r3, [pc, #56]	; (8003fac <USBD_CDC_DataOut+0xb8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4619      	mov	r1, r3
 8003f76:	480f      	ldr	r0, [pc, #60]	; (8003fb4 <USBD_CDC_DataOut+0xc0>)
 8003f78:	f000 f970 	bl	800425c <handle_packet>
					rndis_received = 0;
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <USBD_CDC_DataOut+0xb8>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e007      	b.n	8003f94 <USBD_CDC_DataOut+0xa0>
				}
			}
			else{
				rndis_received = 0;
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <USBD_CDC_DataOut+0xb8>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
				usb_eth_stat.rxbad++;
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <USBD_CDC_DataOut+0xbc>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	4a07      	ldr	r2, [pc, #28]	; (8003fb0 <USBD_CDC_DataOut+0xbc>)
 8003f92:	60d3      	str	r3, [r2, #12]
			}
		}
	    USBD_LL_PrepareReceive(pdev, RNDIS_DATA_OUT_EP, (uint8_t*)usb_rx_buffer, RNDIS_DATA_OUT_SZ);
 8003f94:	2340      	movs	r3, #64	; 0x40
 8003f96:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <USBD_CDC_DataOut+0xc4>)
 8003f98:	2101      	movs	r1, #1
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f00c f964 	bl	8010268 <USBD_LL_PrepareReceive>
	}
    return USBD_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000308 	.word	0x20000308
 8003fb0:	200002e4 	.word	0x200002e4
 8003fb4:	20004c20 	.word	0x20004c20
 8003fb8:	20004be0 	.word	0x20004be0

08003fbc <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
	switch (((rndis_generic_msg_t *)encapsulated_buffer)->MessageType){
 8003fc4:	4b3f      	ldr	r3, [pc, #252]	; (80040c4 <USBD_CDC_EP0_RxReady+0x108>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3b02      	subs	r3, #2
 8003fca:	2b06      	cmp	r3, #6
 8003fcc:	d873      	bhi.n	80040b6 <USBD_CDC_EP0_RxReady+0xfa>
 8003fce:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <USBD_CDC_EP0_RxReady+0x18>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08003ff1 	.word	0x08003ff1
 8003fd8:	080040b7 	.word	0x080040b7
 8003fdc:	08004053 	.word	0x08004053
 8003fe0:	0800405b 	.word	0x0800405b
 8003fe4:	08004063 	.word	0x08004063
 8003fe8:	080040b7 	.word	0x080040b7
 8003fec:	08004093 	.word	0x08004093
		case REMOTE_NDIS_INITIALIZE_MSG:
			{
				rndis_initialize_cmplt_t *m;
				m = ((rndis_initialize_cmplt_t *)encapsulated_buffer);
 8003ff0:	4b34      	ldr	r3, [pc, #208]	; (80040c4 <USBD_CDC_EP0_RxReady+0x108>)
 8003ff2:	617b      	str	r3, [r7, #20]
				/* m->MessageID is same as before */
				m->MessageType = REMOTE_NDIS_INITIALIZE_CMPLT;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	4a34      	ldr	r2, [pc, #208]	; (80040c8 <USBD_CDC_EP0_RxReady+0x10c>)
 8003ff8:	601a      	str	r2, [r3, #0]
				m->MessageLength = sizeof(rndis_initialize_cmplt_t);
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2234      	movs	r2, #52	; 0x34
 8003ffe:	605a      	str	r2, [r3, #4]
				m->MajorVersion = RNDIS_MAJOR_VERSION;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2201      	movs	r2, #1
 8004004:	611a      	str	r2, [r3, #16]
				m->MinorVersion = RNDIS_MINOR_VERSION;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2200      	movs	r2, #0
 800400a:	615a      	str	r2, [r3, #20]
				m->Status = RNDIS_STATUS_SUCCESS;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2200      	movs	r2, #0
 8004010:	60da      	str	r2, [r3, #12]
				m->DeviceFlags = RNDIS_DF_CONNECTIONLESS;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2201      	movs	r2, #1
 8004016:	619a      	str	r2, [r3, #24]
				m->Medium = RNDIS_MEDIUM_802_3;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2200      	movs	r2, #0
 800401c:	61da      	str	r2, [r3, #28]
				m->MaxPacketsPerTransfer = 1;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2201      	movs	r2, #1
 8004022:	621a      	str	r2, [r3, #32]
				m->MaxTransferSize = RNDIS_RX_BUFFER_SIZE;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f240 6216 	movw	r2, #1558	; 0x616
 800402a:	625a      	str	r2, [r3, #36]	; 0x24
				m->PacketAlignmentFactor = 0;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2200      	movs	r2, #0
 8004030:	629a      	str	r2, [r3, #40]	; 0x28
				m->AfListOffset = 0;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2200      	movs	r2, #0
 8004036:	62da      	str	r2, [r3, #44]	; 0x2c
				m->AfListSize = 0;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2200      	movs	r2, #0
 800403c:	631a      	str	r2, [r3, #48]	; 0x30
				rndis_state = rndis_initialized;
 800403e:	4b23      	ldr	r3, [pc, #140]	; (80040cc <USBD_CDC_EP0_RxReady+0x110>)
 8004040:	2201      	movs	r2, #1
 8004042:	701a      	strb	r2, [r3, #0]
				USBD_LL_Transmit(pdev, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 8004044:	2308      	movs	r3, #8
 8004046:	4a22      	ldr	r2, [pc, #136]	; (80040d0 <USBD_CDC_EP0_RxReady+0x114>)
 8004048:	2181      	movs	r1, #129	; 0x81
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f00c f8d2 	bl	80101f4 <USBD_LL_Transmit>
			}
			break;
 8004050:	e032      	b.n	80040b8 <USBD_CDC_EP0_RxReady+0xfc>

		case REMOTE_NDIS_QUERY_MSG:
			rndis_query(pdev);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f936 	bl	80042c4 <rndis_query>
			break;
 8004058:	e02e      	b.n	80040b8 <USBD_CDC_EP0_RxReady+0xfc>

		case REMOTE_NDIS_SET_MSG:
			rndis_handle_set_msg(pdev);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fb3e 	bl	80046dc <rndis_handle_set_msg>
			break;
 8004060:	e02a      	b.n	80040b8 <USBD_CDC_EP0_RxReady+0xfc>

		case REMOTE_NDIS_RESET_MSG:
			{
				rndis_reset_cmplt_t * m;
				m = ((rndis_reset_cmplt_t *)encapsulated_buffer);
 8004062:	4b18      	ldr	r3, [pc, #96]	; (80040c4 <USBD_CDC_EP0_RxReady+0x108>)
 8004064:	613b      	str	r3, [r7, #16]
				rndis_state = rndis_uninitialized;
 8004066:	4b19      	ldr	r3, [pc, #100]	; (80040cc <USBD_CDC_EP0_RxReady+0x110>)
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
				m->MessageType = REMOTE_NDIS_RESET_CMPLT;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4a19      	ldr	r2, [pc, #100]	; (80040d4 <USBD_CDC_EP0_RxReady+0x118>)
 8004070:	601a      	str	r2, [r3, #0]
				m->MessageLength = sizeof(rndis_reset_cmplt_t);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2210      	movs	r2, #16
 8004076:	605a      	str	r2, [r3, #4]
				m->Status = RNDIS_STATUS_SUCCESS;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2200      	movs	r2, #0
 800407c:	609a      	str	r2, [r3, #8]
				m->AddressingReset = 1; /* Make it look like we did something */
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2201      	movs	r2, #1
 8004082:	60da      	str	r2, [r3, #12]
				/* m->AddressingReset = 0; - Windows halts if set to 1 for some reason */
				USBD_LL_Transmit(pdev,RNDIS_NOTIFICATION_IN_EP,(uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00",8);
 8004084:	2308      	movs	r3, #8
 8004086:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <USBD_CDC_EP0_RxReady+0x114>)
 8004088:	2181      	movs	r1, #129	; 0x81
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f00c f8b2 	bl	80101f4 <USBD_LL_Transmit>
			}
			break;
 8004090:	e012      	b.n	80040b8 <USBD_CDC_EP0_RxReady+0xfc>

		case REMOTE_NDIS_KEEPALIVE_MSG:
			{
				rndis_keepalive_cmplt_t * m;
				m = (rndis_keepalive_cmplt_t *)encapsulated_buffer;
 8004092:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <USBD_CDC_EP0_RxReady+0x108>)
 8004094:	60fb      	str	r3, [r7, #12]
				m->MessageType = REMOTE_NDIS_KEEPALIVE_CMPLT;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a0f      	ldr	r2, [pc, #60]	; (80040d8 <USBD_CDC_EP0_RxReady+0x11c>)
 800409a:	601a      	str	r2, [r3, #0]
				m->MessageLength = sizeof(rndis_keepalive_cmplt_t);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2210      	movs	r2, #16
 80040a0:	605a      	str	r2, [r3, #4]
				m->Status = RNDIS_STATUS_SUCCESS;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	60da      	str	r2, [r3, #12]
			}
			/* We have data to send back */
			USBD_LL_Transmit(pdev,RNDIS_NOTIFICATION_IN_EP,(uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00",8);
 80040a8:	2308      	movs	r3, #8
 80040aa:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <USBD_CDC_EP0_RxReady+0x114>)
 80040ac:	2181      	movs	r1, #129	; 0x81
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f00c f8a0 	bl	80101f4 <USBD_LL_Transmit>
			break;
 80040b4:	e000      	b.n	80040b8 <USBD_CDC_EP0_RxReady+0xfc>

		default:
			break;
 80040b6:	bf00      	nop
	}
	return USBD_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20005238 	.word	0x20005238
 80040c8:	80000002 	.word	0x80000002
 80040cc:	200058c6 	.word	0x200058c6
 80040d0:	080107f8 	.word	0x080107f8
 80040d4:	80000006 	.word	0x80000006
 80040d8:	80000008 	.word	0x80000008

080040dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length){
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
    *length = sizeof(usbd_cdc_CfgDesc);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	224b      	movs	r2, #75	; 0x4b
 80040e8:	801a      	strh	r2, [r3, #0]
    usbd_cdc_CfgDesc[2] = sizeof(usbd_cdc_CfgDesc) & 0xFF;
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <USBD_CDC_GetFSCfgDesc+0x28>)
 80040ec:	224b      	movs	r2, #75	; 0x4b
 80040ee:	709a      	strb	r2, [r3, #2]
    usbd_cdc_CfgDesc[3] = (sizeof(usbd_cdc_CfgDesc) >> 8) & 0xFF;
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <USBD_CDC_GetFSCfgDesc+0x28>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	70da      	strb	r2, [r3, #3]
    return usbd_cdc_CfgDesc;
 80040f6:	4b03      	ldr	r3, [pc, #12]	; (8004104 <USBD_CDC_GetFSCfgDesc+0x28>)
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	20000040 	.word	0x20000040

08004108 <usbd_rndis_sof>:

// Start Of Frame event management
static uint8_t usbd_rndis_sof(USBD_HandleTypeDef *pdev){
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  //rndis_send();
  return usbd_cdc_transfer(pdev);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f831 	bl	8004178 <usbd_cdc_transfer>
 8004116:	4603      	mov	r3, r0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <rndis_iso_in_incomplete>:

static uint8_t rndis_iso_in_incomplete(USBD_HandleTypeDef *pdev, uint8_t epnum){
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	70fb      	strb	r3, [r7, #3]
  return usbd_cdc_transfer(pdev);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f823 	bl	8004178 <usbd_cdc_transfer>
 8004132:	4603      	mov	r3, r0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <rndis_iso_out_incomplete>:

static uint8_t rndis_iso_out_incomplete(USBD_HandleTypeDef *pdev, uint8_t epnum){
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	70fb      	strb	r3, [r7, #3]
  return usbd_cdc_transfer(pdev);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f815 	bl	8004178 <usbd_cdc_transfer>
 800414e:	4603      	mov	r3, r0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <usbd_rndis_GetDeviceQualifierDesc>:

static uint8_t  *usbd_rndis_GetDeviceQualifierDesc (uint16_t *length){
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_DeviceQualifierDesc);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	220a      	movs	r2, #10
 8004164:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceQualifierDesc;
 8004166:	4b03      	ldr	r3, [pc, #12]	; (8004174 <usbd_rndis_GetDeviceQualifierDesc+0x1c>)
}
 8004168:	4618      	mov	r0, r3
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	2000008c 	.word	0x2000008c

08004178 <usbd_cdc_transfer>:

static uint8_t usbd_cdc_transfer(void *pdev){
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
	if (sended != 0 || rndis_tx_ptr == NULL || rndis_tx_size <= 0) return USBD_OK;
 8004180:	4b30      	ldr	r3, [pc, #192]	; (8004244 <usbd_cdc_transfer+0xcc>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d107      	bne.n	8004198 <usbd_cdc_transfer+0x20>
 8004188:	4b2f      	ldr	r3, [pc, #188]	; (8004248 <usbd_cdc_transfer+0xd0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <usbd_cdc_transfer+0x20>
 8004190:	4b2e      	ldr	r3, [pc, #184]	; (800424c <usbd_cdc_transfer+0xd4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	dc01      	bgt.n	800419c <usbd_cdc_transfer+0x24>
 8004198:	2300      	movs	r3, #0
 800419a:	e04f      	b.n	800423c <usbd_cdc_transfer+0xc4>
	if (rndis_first_tx)
 800419c:	4b2c      	ldr	r3, [pc, #176]	; (8004250 <usbd_cdc_transfer+0xd8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d037      	beq.n	8004214 <usbd_cdc_transfer+0x9c>
	{
		static uint8_t first[RNDIS_DATA_IN_SZ];
		rndis_data_packet_t *hdr;

		hdr = (rndis_data_packet_t *)first;
 80041a4:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <usbd_cdc_transfer+0xdc>)
 80041a6:	60bb      	str	r3, [r7, #8]
		memset(hdr, 0, sizeof(rndis_data_packet_t));
 80041a8:	222c      	movs	r2, #44	; 0x2c
 80041aa:	2100      	movs	r1, #0
 80041ac:	68b8      	ldr	r0, [r7, #8]
 80041ae:	f00c f9db 	bl	8010568 <memset>
		hdr->MessageType = REMOTE_NDIS_PACKET_MSG;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
		hdr->MessageLength = sizeof(rndis_data_packet_t) + rndis_tx_size;
 80041b8:	4b24      	ldr	r3, [pc, #144]	; (800424c <usbd_cdc_transfer+0xd4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	605a      	str	r2, [r3, #4]
		hdr->DataOffset = sizeof(rndis_data_packet_t) - offsetof(rndis_data_packet_t, DataOffset);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2224      	movs	r2, #36	; 0x24
 80041c8:	609a      	str	r2, [r3, #8]
		hdr->DataLength = rndis_tx_size;
 80041ca:	4b20      	ldr	r3, [pc, #128]	; (800424c <usbd_cdc_transfer+0xd4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	60da      	str	r2, [r3, #12]

		sended = RNDIS_DATA_IN_SZ - sizeof(rndis_data_packet_t);
 80041d4:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <usbd_cdc_transfer+0xcc>)
 80041d6:	2214      	movs	r2, #20
 80041d8:	601a      	str	r2, [r3, #0]
		if (sended > rndis_tx_size) sended = rndis_tx_size;
 80041da:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <usbd_cdc_transfer+0xcc>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b1b      	ldr	r3, [pc, #108]	; (800424c <usbd_cdc_transfer+0xd4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	dd03      	ble.n	80041ee <usbd_cdc_transfer+0x76>
 80041e6:	4b19      	ldr	r3, [pc, #100]	; (800424c <usbd_cdc_transfer+0xd4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a16      	ldr	r2, [pc, #88]	; (8004244 <usbd_cdc_transfer+0xcc>)
 80041ec:	6013      	str	r3, [r2, #0]
		memcpy(first + sizeof(rndis_data_packet_t), rndis_tx_ptr, sended);
 80041ee:	481a      	ldr	r0, [pc, #104]	; (8004258 <usbd_cdc_transfer+0xe0>)
 80041f0:	4b15      	ldr	r3, [pc, #84]	; (8004248 <usbd_cdc_transfer+0xd0>)
 80041f2:	6819      	ldr	r1, [r3, #0]
 80041f4:	4b13      	ldr	r3, [pc, #76]	; (8004244 <usbd_cdc_transfer+0xcc>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	f00c f990 	bl	801051e <memcpy>

		USBD_LL_Transmit(pdev, RNDIS_DATA_IN_EP, (uint8_t *)&first, sizeof(rndis_data_packet_t) + sended);
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <usbd_cdc_transfer+0xcc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	332c      	adds	r3, #44	; 0x2c
 8004206:	b29b      	uxth	r3, r3
 8004208:	4a12      	ldr	r2, [pc, #72]	; (8004254 <usbd_cdc_transfer+0xdc>)
 800420a:	2182      	movs	r1, #130	; 0x82
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f00b fff1 	bl	80101f4 <USBD_LL_Transmit>
 8004212:	e012      	b.n	800423a <usbd_cdc_transfer+0xc2>
	}
	else
	{
		int n = rndis_tx_size;
 8004214:	4b0d      	ldr	r3, [pc, #52]	; (800424c <usbd_cdc_transfer+0xd4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60fb      	str	r3, [r7, #12]
		if (n > RNDIS_DATA_IN_SZ) n = RNDIS_DATA_IN_SZ;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	dd01      	ble.n	8004224 <usbd_cdc_transfer+0xac>
 8004220:	2340      	movs	r3, #64	; 0x40
 8004222:	60fb      	str	r3, [r7, #12]
		USBD_LL_Transmit(pdev, RNDIS_DATA_IN_EP, rndis_tx_ptr, n);
 8004224:	4b08      	ldr	r3, [pc, #32]	; (8004248 <usbd_cdc_transfer+0xd0>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	b29b      	uxth	r3, r3
 800422c:	2182      	movs	r1, #130	; 0x82
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f00b ffe0 	bl	80101f4 <USBD_LL_Transmit>
		sended = n;
 8004234:	4a03      	ldr	r2, [pc, #12]	; (8004244 <usbd_cdc_transfer+0xcc>)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6013      	str	r3, [r2, #0]
	}
	return USBD_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20000304 	.word	0x20000304
 8004248:	200002f8 	.word	0x200002f8
 800424c:	200002fc 	.word	0x200002fc
 8004250:	20000004 	.word	0x20000004
 8004254:	2000030c 	.word	0x2000030c
 8004258:	20000338 	.word	0x20000338

0800425c <handle_packet>:

static void handle_packet(const char *data, int size){
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
	rndis_data_packet_t *p;
	p = (rndis_data_packet_t *)data;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60fb      	str	r3, [r7, #12]
	if (size < sizeof(rndis_data_packet_t)) return;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b2b      	cmp	r3, #43	; 0x2b
 800426e:	d91e      	bls.n	80042ae <handle_packet+0x52>
	if (p->MessageType != REMOTE_NDIS_PACKET_MSG || p->MessageLength != size) return;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d11c      	bne.n	80042b2 <handle_packet+0x56>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d117      	bne.n	80042b2 <handle_packet+0x56>
	if (p->DataOffset + offsetof(rndis_data_packet_t, DataOffset) + p->DataLength != size)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	4413      	add	r3, r2
 800428c:	f103 0208 	add.w	r2, r3, #8
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d005      	beq.n	80042a2 <handle_packet+0x46>
	{
		usb_eth_stat.rxbad++;
 8004296:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <handle_packet+0x64>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	3301      	adds	r3, #1
 800429c:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <handle_packet+0x64>)
 800429e:	60d3      	str	r3, [r2, #12]
		return;
 80042a0:	e008      	b.n	80042b4 <handle_packet+0x58>
	}
	usb_eth_stat.rxok++;
 80042a2:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <handle_packet+0x64>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	3301      	adds	r3, #1
 80042a8:	4a05      	ldr	r2, [pc, #20]	; (80042c0 <handle_packet+0x64>)
 80042aa:	6053      	str	r3, [r2, #4]
 80042ac:	e002      	b.n	80042b4 <handle_packet+0x58>
	if (size < sizeof(rndis_data_packet_t)) return;
 80042ae:	bf00      	nop
 80042b0:	e000      	b.n	80042b4 <handle_packet+0x58>
	if (p->MessageType != REMOTE_NDIS_PACKET_MSG || p->MessageLength != size) return;
 80042b2:	bf00      	nop
	//rndis_rxproc(&rndis_rx_buffer[p->DataOffset + offsetof(rndis_data_packet_t, DataOffset)], p->DataLength);
}
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	200002e4 	.word	0x200002e4

080042c4 <rndis_query>:

static const char *rndis_vendor = RNDIS_VENDOR;

void rndis_query(void  *pdev){
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
	switch (((rndis_query_msg_t *)encapsulated_buffer)->Oid){
 80042cc:	4bb2      	ldr	r3, [pc, #712]	; (8004598 <rndis_query+0x2d4>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4ab2      	ldr	r2, [pc, #712]	; (800459c <rndis_query+0x2d8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	f000 808d 	beq.w	80043f2 <rndis_query+0x12e>
 80042d8:	4ab0      	ldr	r2, [pc, #704]	; (800459c <rndis_query+0x2d8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d83f      	bhi.n	800435e <rndis_query+0x9a>
 80042de:	4ab0      	ldr	r2, [pc, #704]	; (80045a0 <rndis_query+0x2dc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	f000 80e5 	beq.w	80044b0 <rndis_query+0x1ec>
 80042e6:	4aae      	ldr	r2, [pc, #696]	; (80045a0 <rndis_query+0x2dc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d81b      	bhi.n	8004324 <rndis_query+0x60>
 80042ec:	4aad      	ldr	r2, [pc, #692]	; (80045a4 <rndis_query+0x2e0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	f000 8094 	beq.w	800441c <rndis_query+0x158>
 80042f4:	4aab      	ldr	r2, [pc, #684]	; (80045a4 <rndis_query+0x2e0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d807      	bhi.n	800430a <rndis_query+0x46>
 80042fa:	4aab      	ldr	r2, [pc, #684]	; (80045a8 <rndis_query+0x2e4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d071      	beq.n	80043e4 <rndis_query+0x120>
 8004300:	4aaa      	ldr	r2, [pc, #680]	; (80045ac <rndis_query+0x2e8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	f000 809c 	beq.w	8004440 <rndis_query+0x17c>
 8004308:	e13c      	b.n	8004584 <rndis_query+0x2c0>
 800430a:	4aa9      	ldr	r2, [pc, #676]	; (80045b0 <rndis_query+0x2ec>)
 800430c:	4293      	cmp	r3, r2
 800430e:	f000 80c1 	beq.w	8004494 <rndis_query+0x1d0>
 8004312:	4aa8      	ldr	r2, [pc, #672]	; (80045b4 <rndis_query+0x2f0>)
 8004314:	4293      	cmp	r3, r2
 8004316:	f000 8099 	beq.w	800444c <rndis_query+0x188>
 800431a:	4aa7      	ldr	r2, [pc, #668]	; (80045b8 <rndis_query+0x2f4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	f000 8083 	beq.w	8004428 <rndis_query+0x164>
 8004322:	e12f      	b.n	8004584 <rndis_query+0x2c0>
 8004324:	4aa5      	ldr	r2, [pc, #660]	; (80045bc <rndis_query+0x2f8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	f000 80ac 	beq.w	8004484 <rndis_query+0x1c0>
 800432c:	4aa3      	ldr	r2, [pc, #652]	; (80045bc <rndis_query+0x2f8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d808      	bhi.n	8004344 <rndis_query+0x80>
 8004332:	4aa3      	ldr	r2, [pc, #652]	; (80045c0 <rndis_query+0x2fc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	f000 808f 	beq.w	8004458 <rndis_query+0x194>
 800433a:	4aa1      	ldr	r2, [pc, #644]	; (80045c0 <rndis_query+0x2fc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	f200 8092 	bhi.w	8004466 <rndis_query+0x1a2>
 8004342:	e0bc      	b.n	80044be <rndis_query+0x1fa>
 8004344:	4a9f      	ldr	r2, [pc, #636]	; (80045c4 <rndis_query+0x300>)
 8004346:	4293      	cmp	r3, r2
 8004348:	f000 80de 	beq.w	8004508 <rndis_query+0x244>
 800434c:	4a9e      	ldr	r2, [pc, #632]	; (80045c8 <rndis_query+0x304>)
 800434e:	4293      	cmp	r3, r2
 8004350:	f000 80bc 	beq.w	80044cc <rndis_query+0x208>
 8004354:	4a9d      	ldr	r2, [pc, #628]	; (80045cc <rndis_query+0x308>)
 8004356:	4293      	cmp	r3, r2
 8004358:	f000 80a3 	beq.w	80044a2 <rndis_query+0x1de>
 800435c:	e112      	b.n	8004584 <rndis_query+0x2c0>
 800435e:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 8004362:	d054      	beq.n	800440e <rndis_query+0x14a>
 8004364:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 8004368:	d81f      	bhi.n	80043aa <rndis_query+0xe6>
 800436a:	4a99      	ldr	r2, [pc, #612]	; (80045d0 <rndis_query+0x30c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	f000 80eb 	beq.w	8004548 <rndis_query+0x284>
 8004372:	4a97      	ldr	r2, [pc, #604]	; (80045d0 <rndis_query+0x30c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d80b      	bhi.n	8004390 <rndis_query+0xcc>
 8004378:	4a96      	ldr	r2, [pc, #600]	; (80045d4 <rndis_query+0x310>)
 800437a:	4293      	cmp	r3, r2
 800437c:	f000 80ac 	beq.w	80044d8 <rndis_query+0x214>
 8004380:	4a95      	ldr	r2, [pc, #596]	; (80045d8 <rndis_query+0x314>)
 8004382:	4293      	cmp	r3, r2
 8004384:	f000 80d8 	beq.w	8004538 <rndis_query+0x274>
 8004388:	4a94      	ldr	r2, [pc, #592]	; (80045dc <rndis_query+0x318>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d052      	beq.n	8004434 <rndis_query+0x170>
 800438e:	e0f9      	b.n	8004584 <rndis_query+0x2c0>
 8004390:	4a93      	ldr	r2, [pc, #588]	; (80045e0 <rndis_query+0x31c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	f000 80e0 	beq.w	8004558 <rndis_query+0x294>
 8004398:	4a91      	ldr	r2, [pc, #580]	; (80045e0 <rndis_query+0x31c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	f0c0 80e4 	bcc.w	8004568 <rndis_query+0x2a4>
 80043a0:	4a90      	ldr	r2, [pc, #576]	; (80045e4 <rndis_query+0x320>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	f000 80e8 	beq.w	8004578 <rndis_query+0x2b4>
 80043a8:	e0ec      	b.n	8004584 <rndis_query+0x2c0>
 80043aa:	4a8f      	ldr	r2, [pc, #572]	; (80045e8 <rndis_query+0x324>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	f000 80a5 	beq.w	80044fc <rndis_query+0x238>
 80043b2:	4a8d      	ldr	r2, [pc, #564]	; (80045e8 <rndis_query+0x324>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d808      	bhi.n	80043ca <rndis_query+0x106>
 80043b8:	4a8c      	ldr	r2, [pc, #560]	; (80045ec <rndis_query+0x328>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	f000 8098 	beq.w	80044f0 <rndis_query+0x22c>
 80043c0:	4a8a      	ldr	r2, [pc, #552]	; (80045ec <rndis_query+0x328>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	f200 808e 	bhi.w	80044e4 <rndis_query+0x220>
 80043c8:	e01a      	b.n	8004400 <rndis_query+0x13c>
 80043ca:	4a89      	ldr	r2, [pc, #548]	; (80045f0 <rndis_query+0x32c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	f000 80a7 	beq.w	8004520 <rndis_query+0x25c>
 80043d2:	4a88      	ldr	r2, [pc, #544]	; (80045f4 <rndis_query+0x330>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	f000 80a9 	beq.w	800452c <rndis_query+0x268>
 80043da:	4a87      	ldr	r2, [pc, #540]	; (80045f8 <rndis_query+0x334>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	f000 8099 	beq.w	8004514 <rndis_query+0x250>
 80043e2:	e0cf      	b.n	8004584 <rndis_query+0x2c0>
		case OID_GEN_SUPPORTED_LIST:         rndis_query_cmplt(pdev, RNDIS_STATUS_SUCCESS, OIDSupportedList, 4 * OID_LIST_LENGTH); return;
 80043e4:	2358      	movs	r3, #88	; 0x58
 80043e6:	4a85      	ldr	r2, [pc, #532]	; (80045fc <rndis_query+0x338>)
 80043e8:	2100      	movs	r1, #0
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f918 	bl	8004620 <rndis_query_cmplt>
 80043f0:	e0cf      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_VENDOR_DRIVER_VERSION:  rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0x00001000);  return;
 80043f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043f6:	2100      	movs	r1, #0
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f943 	bl	8004684 <rndis_query_cmplt32>
 80043fe:	e0c8      	b.n	8004592 <rndis_query+0x2ce>
		case OID_802_3_CURRENT_ADDRESS:      rndis_query_cmplt(pdev, RNDIS_STATUS_SUCCESS, &station_hwaddr, 6); return;
 8004400:	2306      	movs	r3, #6
 8004402:	4a7f      	ldr	r2, [pc, #508]	; (8004600 <rndis_query+0x33c>)
 8004404:	2100      	movs	r1, #0
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f90a 	bl	8004620 <rndis_query_cmplt>
 800440c:	e0c1      	b.n	8004592 <rndis_query+0x2ce>
		case OID_802_3_PERMANENT_ADDRESS:    rndis_query_cmplt(pdev, RNDIS_STATUS_SUCCESS, &permanent_hwaddr, 6); return;
 800440e:	2306      	movs	r3, #6
 8004410:	4a7c      	ldr	r2, [pc, #496]	; (8004604 <rndis_query+0x340>)
 8004412:	2100      	movs	r1, #0
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f903 	bl	8004620 <rndis_query_cmplt>
 800441a:	e0ba      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_MEDIA_SUPPORTED:        rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 800441c:	2200      	movs	r2, #0
 800441e:	2100      	movs	r1, #0
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f92f 	bl	8004684 <rndis_query_cmplt32>
 8004426:	e0b4      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_MEDIA_IN_USE:           rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 8004428:	2200      	movs	r2, #0
 800442a:	2100      	movs	r1, #0
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f929 	bl	8004684 <rndis_query_cmplt32>
 8004432:	e0ae      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_PHYSICAL_MEDIUM:        rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 8004434:	2200      	movs	r2, #0
 8004436:	2100      	movs	r1, #0
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f923 	bl	8004684 <rndis_query_cmplt32>
 800443e:	e0a8      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_HARDWARE_STATUS:        rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 8004440:	2200      	movs	r2, #0
 8004442:	2100      	movs	r1, #0
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f91d 	bl	8004684 <rndis_query_cmplt32>
 800444a:	e0a2      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_LINK_SPEED:             rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, RNDIS_LINK_SPEED / 100); return;
 800444c:	4a6e      	ldr	r2, [pc, #440]	; (8004608 <rndis_query+0x344>)
 800444e:	2100      	movs	r1, #0
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f917 	bl	8004684 <rndis_query_cmplt32>
 8004456:	e09c      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_VENDOR_ID:              rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0x00FFFFFF); return;
 8004458:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800445c:	2100      	movs	r1, #0
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f910 	bl	8004684 <rndis_query_cmplt32>
 8004464:	e095      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_VENDOR_DESCRIPTION:     rndis_query_cmplt(pdev, RNDIS_STATUS_SUCCESS, rndis_vendor, strlen(rndis_vendor) + 1); return;
 8004466:	4b69      	ldr	r3, [pc, #420]	; (800460c <rndis_query+0x348>)
 8004468:	681c      	ldr	r4, [r3, #0]
 800446a:	4b68      	ldr	r3, [pc, #416]	; (800460c <rndis_query+0x348>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7fb feb6 	bl	80001e0 <strlen>
 8004474:	4603      	mov	r3, r0
 8004476:	3301      	adds	r3, #1
 8004478:	4622      	mov	r2, r4
 800447a:	2100      	movs	r1, #0
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f8cf 	bl	8004620 <rndis_query_cmplt>
 8004482:	e086      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_CURRENT_PACKET_FILTER:  rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, oid_packet_filter); return;
 8004484:	4b62      	ldr	r3, [pc, #392]	; (8004610 <rndis_query+0x34c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	2100      	movs	r1, #0
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f8f9 	bl	8004684 <rndis_query_cmplt32>
 8004492:	e07e      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_MAXIMUM_FRAME_SIZE:     rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE - ETH_HEADER_SIZE); return;
 8004494:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004498:	2100      	movs	r1, #0
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f8f2 	bl	8004684 <rndis_query_cmplt32>
 80044a0:	e077      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_MAXIMUM_TOTAL_SIZE:     rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE); return;
 80044a2:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80044a6:	2100      	movs	r1, #0
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f8eb 	bl	8004684 <rndis_query_cmplt32>
 80044ae:	e070      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_TRANSMIT_BLOCK_SIZE:    rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE); return;
 80044b0:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80044b4:	2100      	movs	r1, #0
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f8e4 	bl	8004684 <rndis_query_cmplt32>
 80044bc:	e069      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_RECEIVE_BLOCK_SIZE:     rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE); return;
 80044be:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80044c2:	2100      	movs	r1, #0
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f8dd 	bl	8004684 <rndis_query_cmplt32>
 80044ca:	e062      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_MEDIA_CONNECT_STATUS:   rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, NDIS_MEDIA_STATE_CONNECTED); return;
 80044cc:	2200      	movs	r2, #0
 80044ce:	2100      	movs	r1, #0
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f8d7 	bl	8004684 <rndis_query_cmplt32>
 80044d6:	e05c      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_RNDIS_CONFIG_PARAMETER: rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 80044d8:	2200      	movs	r2, #0
 80044da:	2100      	movs	r1, #0
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f8d1 	bl	8004684 <rndis_query_cmplt32>
 80044e2:	e056      	b.n	8004592 <rndis_query+0x2ce>
		case OID_802_3_MAXIMUM_LIST_SIZE:    rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 1); return;
 80044e4:	2201      	movs	r2, #1
 80044e6:	2100      	movs	r1, #0
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f8cb 	bl	8004684 <rndis_query_cmplt32>
 80044ee:	e050      	b.n	8004592 <rndis_query+0x2ce>
		case OID_802_3_MULTICAST_LIST:       rndis_query_cmplt32(pdev, RNDIS_STATUS_NOT_SUPPORTED, 0); return;
 80044f0:	2200      	movs	r2, #0
 80044f2:	4948      	ldr	r1, [pc, #288]	; (8004614 <rndis_query+0x350>)
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f8c5 	bl	8004684 <rndis_query_cmplt32>
 80044fa:	e04a      	b.n	8004592 <rndis_query+0x2ce>
		case OID_802_3_MAC_OPTIONS:          rndis_query_cmplt32(pdev, RNDIS_STATUS_NOT_SUPPORTED, 0); return;
 80044fc:	2200      	movs	r2, #0
 80044fe:	4945      	ldr	r1, [pc, #276]	; (8004614 <rndis_query+0x350>)
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f8bf 	bl	8004684 <rndis_query_cmplt32>
 8004506:	e044      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_MAC_OPTIONS:            rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, /*MAC_OPT*/ 0); return;
 8004508:	2200      	movs	r2, #0
 800450a:	2100      	movs	r1, #0
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f8b9 	bl	8004684 <rndis_query_cmplt32>
 8004512:	e03e      	b.n	8004592 <rndis_query+0x2ce>
		case OID_802_3_RCV_ERROR_ALIGNMENT:  rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 8004514:	2200      	movs	r2, #0
 8004516:	2100      	movs	r1, #0
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f8b3 	bl	8004684 <rndis_query_cmplt32>
 800451e:	e038      	b.n	8004592 <rndis_query+0x2ce>
		case OID_802_3_XMIT_ONE_COLLISION:   rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 8004520:	2200      	movs	r2, #0
 8004522:	2100      	movs	r1, #0
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f8ad 	bl	8004684 <rndis_query_cmplt32>
 800452a:	e032      	b.n	8004592 <rndis_query+0x2ce>
		case OID_802_3_XMIT_MORE_COLLISIONS: rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 800452c:	2200      	movs	r2, #0
 800452e:	2100      	movs	r1, #0
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f8a7 	bl	8004684 <rndis_query_cmplt32>
 8004536:	e02c      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_XMIT_OK:                rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, usb_eth_stat.txok); return;
 8004538:	4b37      	ldr	r3, [pc, #220]	; (8004618 <rndis_query+0x354>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	2100      	movs	r1, #0
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f89f 	bl	8004684 <rndis_query_cmplt32>
 8004546:	e024      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_RCV_OK:                 rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, usb_eth_stat.rxok); return;
 8004548:	4b33      	ldr	r3, [pc, #204]	; (8004618 <rndis_query+0x354>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	461a      	mov	r2, r3
 800454e:	2100      	movs	r1, #0
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f897 	bl	8004684 <rndis_query_cmplt32>
 8004556:	e01c      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_RCV_ERROR:              rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, usb_eth_stat.rxbad); return;
 8004558:	4b2f      	ldr	r3, [pc, #188]	; (8004618 <rndis_query+0x354>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	461a      	mov	r2, r3
 800455e:	2100      	movs	r1, #0
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f88f 	bl	8004684 <rndis_query_cmplt32>
 8004566:	e014      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_XMIT_ERROR:             rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, usb_eth_stat.txbad); return;
 8004568:	4b2b      	ldr	r3, [pc, #172]	; (8004618 <rndis_query+0x354>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	461a      	mov	r2, r3
 800456e:	2100      	movs	r1, #0
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f887 	bl	8004684 <rndis_query_cmplt32>
 8004576:	e00c      	b.n	8004592 <rndis_query+0x2ce>
		case OID_GEN_RCV_NO_BUFFER:          rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 8004578:	2200      	movs	r2, #0
 800457a:	2100      	movs	r1, #0
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f881 	bl	8004684 <rndis_query_cmplt32>
 8004582:	e006      	b.n	8004592 <rndis_query+0x2ce>
		default:                             rndis_query_cmplt(pdev, RNDIS_STATUS_FAILURE, NULL, 0); return;
 8004584:	2300      	movs	r3, #0
 8004586:	2200      	movs	r2, #0
 8004588:	4924      	ldr	r1, [pc, #144]	; (800461c <rndis_query+0x358>)
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f848 	bl	8004620 <rndis_query_cmplt>
 8004590:	bf00      	nop
	}
}
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bd90      	pop	{r4, r7, pc}
 8004598:	20005238 	.word	0x20005238
 800459c:	00010116 	.word	0x00010116
 80045a0:	0001010a 	.word	0x0001010a
 80045a4:	00010103 	.word	0x00010103
 80045a8:	00010101 	.word	0x00010101
 80045ac:	00010102 	.word	0x00010102
 80045b0:	00010106 	.word	0x00010106
 80045b4:	00010107 	.word	0x00010107
 80045b8:	00010104 	.word	0x00010104
 80045bc:	0001010e 	.word	0x0001010e
 80045c0:	0001010c 	.word	0x0001010c
 80045c4:	00010113 	.word	0x00010113
 80045c8:	00010114 	.word	0x00010114
 80045cc:	00010111 	.word	0x00010111
 80045d0:	00020102 	.word	0x00020102
 80045d4:	0001021b 	.word	0x0001021b
 80045d8:	00020101 	.word	0x00020101
 80045dc:	00010202 	.word	0x00010202
 80045e0:	00020104 	.word	0x00020104
 80045e4:	00020105 	.word	0x00020105
 80045e8:	01010105 	.word	0x01010105
 80045ec:	01010103 	.word	0x01010103
 80045f0:	01020102 	.word	0x01020102
 80045f4:	01020103 	.word	0x01020103
 80045f8:	01020101 	.word	0x01020101
 80045fc:	080108e0 	.word	0x080108e0
 8004600:	08010938 	.word	0x08010938
 8004604:	08010940 	.word	0x08010940
 8004608:	0001d4c0 	.word	0x0001d4c0
 800460c:	20000098 	.word	0x20000098
 8004610:	200002f4 	.word	0x200002f4
 8004614:	c00000bb 	.word	0xc00000bb
 8004618:	200002e4 	.word	0x200002e4
 800461c:	c0000001 	.word	0xc0000001

08004620 <rndis_query_cmplt>:

void rndis_query_cmplt(void *pdev, int status, const void *data, int size){
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
	rndis_query_cmplt_t *c;
	c = (rndis_query_cmplt_t *)encapsulated_buffer;
 800462e:	4b12      	ldr	r3, [pc, #72]	; (8004678 <rndis_query_cmplt+0x58>)
 8004630:	617b      	str	r3, [r7, #20]
	c->MessageType = REMOTE_NDIS_QUERY_CMPLT;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	4a11      	ldr	r2, [pc, #68]	; (800467c <rndis_query_cmplt+0x5c>)
 8004636:	601a      	str	r2, [r3, #0]
	c->MessageLength = sizeof(rndis_query_cmplt_t) + size;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	f103 0218 	add.w	r2, r3, #24
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	605a      	str	r2, [r3, #4]
	c->InformationBufferLength = size;
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	611a      	str	r2, [r3, #16]
	c->InformationBufferOffset = 16;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	2210      	movs	r2, #16
 800464c:	615a      	str	r2, [r3, #20]
	c->Status = status;
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	60da      	str	r2, [r3, #12]
	memcpy(c + 1, data, size);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	3318      	adds	r3, #24
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4618      	mov	r0, r3
 800465e:	f00b ff5e 	bl	801051e <memcpy>
	USBD_LL_Transmit(pdev, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 8004662:	2308      	movs	r3, #8
 8004664:	4a06      	ldr	r2, [pc, #24]	; (8004680 <rndis_query_cmplt+0x60>)
 8004666:	2181      	movs	r1, #129	; 0x81
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f00b fdc3 	bl	80101f4 <USBD_LL_Transmit>
}
 800466e:	bf00      	nop
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20005238 	.word	0x20005238
 800467c:	80000004 	.word	0x80000004
 8004680:	080107f8 	.word	0x080107f8

08004684 <rndis_query_cmplt32>:

void rndis_query_cmplt32(void *pdev, int status, uint32_t data){
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
	rndis_query_cmplt_t *c;
	c = (rndis_query_cmplt_t *)encapsulated_buffer;
 8004690:	4b0f      	ldr	r3, [pc, #60]	; (80046d0 <rndis_query_cmplt32+0x4c>)
 8004692:	617b      	str	r3, [r7, #20]
	c->MessageType = REMOTE_NDIS_QUERY_CMPLT;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	4a0f      	ldr	r2, [pc, #60]	; (80046d4 <rndis_query_cmplt32+0x50>)
 8004698:	601a      	str	r2, [r3, #0]
	c->MessageLength = sizeof(rndis_query_cmplt_t) + 4;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	221c      	movs	r2, #28
 800469e:	605a      	str	r2, [r3, #4]
	c->InformationBufferLength = 4;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2204      	movs	r2, #4
 80046a4:	611a      	str	r2, [r3, #16]
	c->InformationBufferOffset = 16;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2210      	movs	r2, #16
 80046aa:	615a      	str	r2, [r3, #20]
	c->Status = status;
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	60da      	str	r2, [r3, #12]
	*(uint32_t *)(c + 1) = data;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	3318      	adds	r3, #24
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	601a      	str	r2, [r3, #0]
	USBD_LL_Transmit(pdev, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 80046ba:	2308      	movs	r3, #8
 80046bc:	4a06      	ldr	r2, [pc, #24]	; (80046d8 <rndis_query_cmplt32+0x54>)
 80046be:	2181      	movs	r1, #129	; 0x81
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f00b fd97 	bl	80101f4 <USBD_LL_Transmit>
}
 80046c6:	bf00      	nop
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20005238 	.word	0x20005238
 80046d4:	80000004 	.word	0x80000004
 80046d8:	080107f8 	.word	0x080107f8

080046dc <rndis_handle_set_msg>:
#define PARMNAME  ((uint8_t *)CFGBUF + CFGBUF->ParameterNameOffset)
#define PARMVALUE ((uint8_t *)CFGBUF + CFGBUF->ParameterValueOffset)
#define PARMVALUELENGTH	CFGBUF->ParameterValueLength
#define PARM_NAME_LENGTH 25 /* Maximum parameter name length */

void rndis_handle_set_msg(void  *pdev){
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
	rndis_set_cmplt_t *c;
	rndis_set_msg_t *m;
	rndis_Oid_t oid;

	c = (rndis_set_cmplt_t *)encapsulated_buffer;
 80046e4:	4b2c      	ldr	r3, [pc, #176]	; (8004798 <rndis_handle_set_msg+0xbc>)
 80046e6:	61fb      	str	r3, [r7, #28]
	m = (rndis_set_msg_t *)encapsulated_buffer;
 80046e8:	4b2b      	ldr	r3, [pc, #172]	; (8004798 <rndis_handle_set_msg+0xbc>)
 80046ea:	61bb      	str	r3, [r7, #24]
		parmlength -= 2;
		i++;
	}
	*/

	oid = m->Oid;
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	617b      	str	r3, [r7, #20]
	c->MessageType = REMOTE_NDIS_SET_CMPLT;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	4a29      	ldr	r2, [pc, #164]	; (800479c <rndis_handle_set_msg+0xc0>)
 80046f6:	601a      	str	r2, [r3, #0]
	c->MessageLength = sizeof(rndis_set_cmplt_t);
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2210      	movs	r2, #16
 80046fc:	605a      	str	r2, [r3, #4]
	c->Status = RNDIS_STATUS_SUCCESS;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	2200      	movs	r2, #0
 8004702:	60da      	str	r2, [r3, #12]

	switch (oid)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	4a26      	ldr	r2, [pc, #152]	; (80047a0 <rndis_handle_set_msg+0xc4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d036      	beq.n	800477a <rndis_handle_set_msg+0x9e>
 800470c:	4a24      	ldr	r2, [pc, #144]	; (80047a0 <rndis_handle_set_msg+0xc4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d806      	bhi.n	8004720 <rndis_handle_set_msg+0x44>
 8004712:	4a24      	ldr	r2, [pc, #144]	; (80047a4 <rndis_handle_set_msg+0xc8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d017      	beq.n	8004748 <rndis_handle_set_msg+0x6c>
 8004718:	4a23      	ldr	r2, [pc, #140]	; (80047a8 <rndis_handle_set_msg+0xcc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d02f      	beq.n	800477e <rndis_handle_set_msg+0xa2>
 800471e:	e028      	b.n	8004772 <rndis_handle_set_msg+0x96>
 8004720:	4a22      	ldr	r2, [pc, #136]	; (80047ac <rndis_handle_set_msg+0xd0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d003      	beq.n	800472e <rndis_handle_set_msg+0x52>
 8004726:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <rndis_handle_set_msg+0xd4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d02a      	beq.n	8004782 <rndis_handle_set_msg+0xa6>
 800472c:	e021      	b.n	8004772 <rndis_handle_set_msg+0x96>
	{
		/* Parameters set up in 'Advanced' tab */
		case OID_GEN_RNDIS_CONFIG_PARAMETER:
			{
                rndis_config_parameter_t *p;
				char *ptr = (char *)m;
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	613b      	str	r3, [r7, #16]
				ptr += sizeof(rndis_generic_msg_t);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	3308      	adds	r3, #8
 8004736:	613b      	str	r3, [r7, #16]
				ptr += m->InformationBufferOffset;
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4413      	add	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
				p = (rndis_config_parameter_t *)ptr;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	60fb      	str	r3, [r7, #12]
				//rndis_handle_config_parm(ptr, p->ParameterNameOffset, p->ParameterValueOffset, p->ParameterNameLength, p->ParameterValueLength);
			}
			break;
 8004746:	e01d      	b.n	8004784 <rndis_handle_set_msg+0xa8>

		/* Mandatory general OIDs */
		case OID_GEN_CURRENT_PACKET_FILTER:
			oid_packet_filter = *INFBUF;
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f103 0208 	add.w	r2, r3, #8
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	4413      	add	r3, r2
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <rndis_handle_set_msg+0xd8>)
 8004758:	6013      	str	r3, [r2, #0]
			if (oid_packet_filter)
 800475a:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <rndis_handle_set_msg+0xd8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <rndis_handle_set_msg+0x8e>
			{
				//rndis_packetFilter(oid_packet_filter);
				rndis_state = rndis_data_initialized;
 8004762:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <rndis_handle_set_msg+0xdc>)
 8004764:	2202      	movs	r2, #2
 8004766:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				rndis_state = rndis_initialized;
			}
			break;
 8004768:	e00c      	b.n	8004784 <rndis_handle_set_msg+0xa8>
				rndis_state = rndis_initialized;
 800476a:	4b13      	ldr	r3, [pc, #76]	; (80047b8 <rndis_handle_set_msg+0xdc>)
 800476c:	2201      	movs	r2, #1
 800476e:	701a      	strb	r2, [r3, #0]
			break;
 8004770:	e008      	b.n	8004784 <rndis_handle_set_msg+0xa8>
		/* Power Managment: fails for now */
		case OID_PNP_ADD_WAKE_UP_PATTERN:
		case OID_PNP_REMOVE_WAKE_UP_PATTERN:
		case OID_PNP_ENABLE_WAKE_UP:
		default:
			c->Status = RNDIS_STATUS_FAILURE;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	4a11      	ldr	r2, [pc, #68]	; (80047bc <rndis_handle_set_msg+0xe0>)
 8004776:	60da      	str	r2, [r3, #12]
			break;
 8004778:	e004      	b.n	8004784 <rndis_handle_set_msg+0xa8>
			break;
 800477a:	bf00      	nop
 800477c:	e002      	b.n	8004784 <rndis_handle_set_msg+0xa8>
			break;
 800477e:	bf00      	nop
 8004780:	e000      	b.n	8004784 <rndis_handle_set_msg+0xa8>
			break;
 8004782:	bf00      	nop
	}

	/* c->MessageID is same as before */
	USBD_LL_Transmit(pdev, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 8004784:	2308      	movs	r3, #8
 8004786:	4a0e      	ldr	r2, [pc, #56]	; (80047c0 <rndis_handle_set_msg+0xe4>)
 8004788:	2181      	movs	r1, #129	; 0x81
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f00b fd32 	bl	80101f4 <USBD_LL_Transmit>
	return;
 8004790:	bf00      	nop
}
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20005238 	.word	0x20005238
 800479c:	80000005 	.word	0x80000005
 80047a0:	00010112 	.word	0x00010112
 80047a4:	0001010e 	.word	0x0001010e
 80047a8:	0001010f 	.word	0x0001010f
 80047ac:	0001021b 	.word	0x0001021b
 80047b0:	01010103 	.word	0x01010103
 80047b4:	200002f4 	.word	0x200002f4
 80047b8:	200058c6 	.word	0x200058c6
 80047bc:	c0000001 	.word	0xc0000001
 80047c0:	080107f8 	.word	0x080107f8

080047c4 <xNetworkInterfaceInitialise>:

BaseType_t xNetworkInterfaceInitialise( void )
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
	//xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, configMAX_PRIORITIES - 1, &xEMACTaskHandle );

    return pdTRUE;
 80047c8:	2301      	movs	r3, #1
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <xNetworkInterfaceOutput>:

BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor, BaseType_t xReleaseAfterSend ){
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
    This example assumes SendData() is a peripheral driver library function that
    takes a pointer to the start of the data to be sent and the length of the
    data to be sent as two separate parameters.  The start of the data is located
    by pxDescriptor->pucEthernetBuffer.  The length of the data is located
    by pxDescriptor->xDataLength. */
	if (pxDescriptor->xDataLength <= 0 ||
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <xNetworkInterfaceOutput+0x26>
			pxDescriptor->xDataLength > ETH_MAX_PACKET_SIZE ||
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
	if (pxDescriptor->xDataLength <= 0 ||
 80047ea:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d803      	bhi.n	80047fa <xNetworkInterfaceOutput+0x26>
		rndis_tx_size > 0) return false;
 80047f2:	4b14      	ldr	r3, [pc, #80]	; (8004844 <xNetworkInterfaceOutput+0x70>)
 80047f4:	681b      	ldr	r3, [r3, #0]
			pxDescriptor->xDataLength > ETH_MAX_PACKET_SIZE ||
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	dd01      	ble.n	80047fe <xNetworkInterfaceOutput+0x2a>
		rndis_tx_size > 0) return false;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e01e      	b.n	800483c <xNetworkInterfaceOutput+0x68>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047fe:	b672      	cpsid	i
    static char data[RNDIS_MTU + 14 + 4];

	__disable_irq();
	rndis_first_tx = true;
 8004800:	4b11      	ldr	r3, [pc, #68]	; (8004848 <xNetworkInterfaceOutput+0x74>)
 8004802:	2201      	movs	r2, #1
 8004804:	601a      	str	r2, [r3, #0]
	memcpy((void *) data, (void *) pxDescriptor->pucEthernetBuffer, pxDescriptor->xDataLength);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6999      	ldr	r1, [r3, #24]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	461a      	mov	r2, r3
 8004810:	480e      	ldr	r0, [pc, #56]	; (800484c <xNetworkInterfaceOutput+0x78>)
 8004812:	f00b fe84 	bl	801051e <memcpy>
	rndis_tx_ptr = (uint8_t *)data;
 8004816:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <xNetworkInterfaceOutput+0x7c>)
 8004818:	4a0c      	ldr	r2, [pc, #48]	; (800484c <xNetworkInterfaceOutput+0x78>)
 800481a:	601a      	str	r2, [r3, #0]
	rndis_tx_size = pxDescriptor->xDataLength;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	461a      	mov	r2, r3
 8004822:	4b08      	ldr	r3, [pc, #32]	; (8004844 <xNetworkInterfaceOutput+0x70>)
 8004824:	601a      	str	r2, [r3, #0]
	rndis_sended = 0;
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <xNetworkInterfaceOutput+0x80>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800482c:	b662      	cpsie	i
	//usbd_cdc_transfer(pDev);
	__enable_irq();
    /* Call the standard trace macro to log the send event. */
    iptraceNETWORK_INTERFACE_TRANSMIT();
	if( xReleaseAfterSend != pdFALSE ){
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <xNetworkInterfaceOutput+0x66>
        /* It is assumed SendData() copies the data out of the FreeRTOS+TCP Ethernet
        buffer.  The Ethernet buffer is therefore no longer needed, and must be
        freed for re-use. */
        vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f00a ff35 	bl	800f6a4 <vReleaseNetworkBufferAndDescriptor>
    }
    return pdTRUE;
 800483a:	2301      	movs	r3, #1
}
 800483c:	4618      	mov	r0, r3
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	200002fc 	.word	0x200002fc
 8004848:	20000004 	.word	0x20000004
 800484c:	2000034c 	.word	0x2000034c
 8004850:	200002f8 	.word	0x200002f8
 8004854:	20000300 	.word	0x20000300

08004858 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	4613      	mov	r3, r2
 8004864:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800486c:	2302      	movs	r3, #2
 800486e:	e01a      	b.n	80048a6 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	79fa      	ldrb	r2, [r7, #7]
 800489c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f00b fae0 	bl	800fe64 <USBD_LL_Init>
  
  return USBD_OK; 
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d006      	beq.n	80048d0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	73fb      	strb	r3, [r7, #15]
 80048ce:	e001      	b.n	80048d4 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80048d0:	2302      	movs	r3, #2
 80048d2:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f00b fb0e 	bl	800ff0c <USBD_LL_Start>
  
  return USBD_OK;  
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800491c:	2302      	movs	r3, #2
 800491e:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00c      	beq.n	8004944 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	78fa      	ldrb	r2, [r7, #3]
 8004934:	4611      	mov	r1, r2
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	4798      	blx	r3
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8004944:	7bfb      	ldrb	r3, [r7, #15]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	460b      	mov	r3, r1
 8004958:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	78fa      	ldrb	r2, [r7, #3]
 8004964:	4611      	mov	r1, r2
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
  return USBD_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fd99 	bl	80054be <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800499a:	461a      	mov	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d00b      	beq.n	80049c8 <USBD_LL_SetupStage+0x54>
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d011      	beq.n	80049d8 <USBD_LL_SetupStage+0x64>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d117      	bne.n	80049e8 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049be:	4619      	mov	r1, r3
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f9c7 	bl	8004d54 <USBD_StdDevReq>
    break;
 80049c6:	e01a      	b.n	80049fe <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049ce:	4619      	mov	r1, r3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fa0f 	bl	8004df4 <USBD_StdItfReq>
    break;
 80049d6:	e012      	b.n	80049fe <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049de:	4619      	mov	r1, r3
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fa3a 	bl	8004e5a <USBD_StdEPReq>
    break;
 80049e6:	e00a      	b.n	80049fe <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80049ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f00b fb2e 	bl	8010058 <USBD_LL_StallEP>
    break;
 80049fc:	bf00      	nop
  }  
  return USBD_OK;  
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	460b      	mov	r3, r1
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004a16:	7afb      	ldrb	r3, [r7, #11]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d138      	bne.n	8004a8e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004a22:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d142      	bne.n	8004ab4 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d914      	bls.n	8004a64 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	1ad2      	subs	r2, r2, r3
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	4293      	cmp	r3, r2
 8004a52:	bf28      	it	cs
 8004a54:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 fe23 	bl	80056a8 <USBD_CtlContinueRx>
 8004a62:	e027      	b.n	8004ab4 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d105      	bne.n	8004a86 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fe20 	bl	80056cc <USBD_CtlSendStatus>
 8004a8c:	e012      	b.n	8004ab4 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00c      	beq.n	8004ab4 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d107      	bne.n	8004ab4 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	7afa      	ldrb	r2, [r7, #11]
 8004aae:	4611      	mov	r1, r2
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	4798      	blx	r3
  }  
  return USBD_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b086      	sub	sp, #24
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8004acc:	7afb      	ldrb	r3, [r7, #11]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d16c      	bne.n	8004bac <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3314      	adds	r3, #20
 8004ad6:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d157      	bne.n	8004b92 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d915      	bls.n	8004b1a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	1ad2      	subs	r2, r2, r3
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 fd9e 	bl	8005648 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2100      	movs	r1, #0
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f00b fba8 	bl	8010268 <USBD_LL_PrepareReceive>
 8004b18:	e03b      	b.n	8004b92 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	68d2      	ldr	r2, [r2, #12]
 8004b22:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b26:	fb02 f201 	mul.w	r2, r2, r1
 8004b2a:	1a9b      	subs	r3, r3, r2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d11c      	bne.n	8004b6a <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d316      	bcc.n	8004b6a <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d20f      	bcs.n	8004b6a <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 fd7a 	bl	8005648 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2100      	movs	r1, #0
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f00b fb80 	bl	8010268 <USBD_LL_PrepareReceive>
 8004b68:	e013      	b.n	8004b92 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d105      	bne.n	8004b8c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 fdb0 	bl	80056f2 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d11a      	bne.n	8004bd2 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f7ff feac 	bl	80048fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8004baa:	e012      	b.n	8004bd2 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00c      	beq.n	8004bd2 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	d107      	bne.n	8004bd2 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	7afa      	ldrb	r2, [r7, #11]
 8004bcc:	4611      	mov	r1, r2
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	4798      	blx	r3
  }  
  return USBD_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004be4:	2340      	movs	r3, #64	; 0x40
 8004be6:	2200      	movs	r2, #0
 8004be8:	2100      	movs	r1, #0
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f00b f9c0 	bl	800ff70 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2240      	movs	r2, #64	; 0x40
 8004bf4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004bf8:	2340      	movs	r3, #64	; 0x40
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2180      	movs	r1, #128	; 0x80
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f00b f9b6 	bl	800ff70 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2240      	movs	r2, #64	; 0x40
 8004c08:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6852      	ldr	r2, [r2, #4]
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	4798      	blx	r3
 
  
  return USBD_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	460b      	mov	r3, r1
 8004c44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	78fa      	ldrb	r2, [r7, #3]
 8004c4a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2204      	movs	r2, #4
 8004c72:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d10b      	bne.n	8004cd0 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6852      	ldr	r2, [r2, #4]
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	4611      	mov	r1, r2
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
   
  return USBD_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	785b      	ldrb	r3, [r3, #1]
 8004d66:	2b09      	cmp	r3, #9
 8004d68:	d839      	bhi.n	8004dde <USBD_StdDevReq+0x8a>
 8004d6a:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <USBD_StdDevReq+0x1c>)
 8004d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d70:	08004dc1 	.word	0x08004dc1
 8004d74:	08004dd5 	.word	0x08004dd5
 8004d78:	08004ddf 	.word	0x08004ddf
 8004d7c:	08004dcb 	.word	0x08004dcb
 8004d80:	08004ddf 	.word	0x08004ddf
 8004d84:	08004da3 	.word	0x08004da3
 8004d88:	08004d99 	.word	0x08004d99
 8004d8c:	08004ddf 	.word	0x08004ddf
 8004d90:	08004db7 	.word	0x08004db7
 8004d94:	08004dad 	.word	0x08004dad
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8004d98:	6839      	ldr	r1, [r7, #0]
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f936 	bl	800500c <USBD_GetDescriptor>
    break;
 8004da0:	e022      	b.n	8004de8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8004da2:	6839      	ldr	r1, [r7, #0]
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fa25 	bl	80051f4 <USBD_SetAddress>
    break;
 8004daa:	e01d      	b.n	8004de8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fa5e 	bl	8005270 <USBD_SetConfig>
    break;
 8004db4:	e018      	b.n	8004de8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8004db6:	6839      	ldr	r1, [r7, #0]
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fae1 	bl	8005380 <USBD_GetConfig>
    break;
 8004dbe:	e013      	b.n	8004de8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fb0e 	bl	80053e4 <USBD_GetStatus>
    break;
 8004dc8:	e00e      	b.n	8004de8 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8004dca:	6839      	ldr	r1, [r7, #0]
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fb33 	bl	8005438 <USBD_SetFeature>
    break;
 8004dd2:	e009      	b.n	8004de8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8004dd4:	6839      	ldr	r1, [r7, #0]
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fb49 	bl	800546e <USBD_ClrFeature>
    break;
 8004ddc:	e004      	b.n	8004de8 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8004dde:	6839      	ldr	r1, [r7, #0]
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fba9 	bl	8005538 <USBD_CtlError>
    break;
 8004de6:	bf00      	nop
  }
  
  return ret;
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop

08004df4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8004dfe:	2300      	movs	r3, #0
 8004e00:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d11b      	bne.n	8004e44 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	889b      	ldrh	r3, [r3, #4]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d811      	bhi.n	8004e3a <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	6839      	ldr	r1, [r7, #0]
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	88db      	ldrh	r3, [r3, #6]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d110      	bne.n	8004e4e <USBD_StdItfReq+0x5a>
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10d      	bne.n	8004e4e <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fc4a 	bl	80056cc <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8004e38:	e009      	b.n	8004e4e <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8004e3a:	6839      	ldr	r1, [r7, #0]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fb7b 	bl	8005538 <USBD_CtlError>
    break;
 8004e42:	e004      	b.n	8004e4e <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8004e44:	6839      	ldr	r1, [r7, #0]
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fb76 	bl	8005538 <USBD_CtlError>
    break;
 8004e4c:	e000      	b.n	8004e50 <USBD_StdItfReq+0x5c>
    break;
 8004e4e:	bf00      	nop
  }
  return USBD_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8004e64:	2300      	movs	r3, #0
 8004e66:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	889b      	ldrh	r3, [r3, #4]
 8004e6c:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d108      	bne.n	8004e8c <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	6839      	ldr	r1, [r7, #0]
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	4798      	blx	r3
    
    return USBD_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e0ba      	b.n	8005002 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	785b      	ldrb	r3, [r3, #1]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d039      	beq.n	8004f08 <USBD_StdEPReq+0xae>
 8004e94:	2b03      	cmp	r3, #3
 8004e96:	d002      	beq.n	8004e9e <USBD_StdEPReq+0x44>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d06b      	beq.n	8004f74 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8004e9c:	e0b0      	b.n	8005000 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d002      	beq.n	8004eae <USBD_StdEPReq+0x54>
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d00c      	beq.n	8004ec6 <USBD_StdEPReq+0x6c>
 8004eac:	e025      	b.n	8004efa <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004eae:	7bbb      	ldrb	r3, [r7, #14]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d027      	beq.n	8004f04 <USBD_StdEPReq+0xaa>
 8004eb4:	7bbb      	ldrb	r3, [r7, #14]
 8004eb6:	2b80      	cmp	r3, #128	; 0x80
 8004eb8:	d024      	beq.n	8004f04 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8004eba:	7bbb      	ldrb	r3, [r7, #14]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f00b f8ca 	bl	8010058 <USBD_LL_StallEP>
      break;	
 8004ec4:	e01e      	b.n	8004f04 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	885b      	ldrh	r3, [r3, #2]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10a      	bne.n	8004ee4 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004ece:	7bbb      	ldrb	r3, [r7, #14]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <USBD_StdEPReq+0x8a>
 8004ed4:	7bbb      	ldrb	r3, [r7, #14]
 8004ed6:	2b80      	cmp	r3, #128	; 0x80
 8004ed8:	d004      	beq.n	8004ee4 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8004eda:	7bbb      	ldrb	r3, [r7, #14]
 8004edc:	4619      	mov	r1, r3
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f00b f8ba 	bl	8010058 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	6839      	ldr	r1, [r7, #0]
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fbea 	bl	80056cc <USBD_CtlSendStatus>
      break;
 8004ef8:	e005      	b.n	8004f06 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 8004efa:	6839      	ldr	r1, [r7, #0]
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fb1b 	bl	8005538 <USBD_CtlError>
      break;    
 8004f02:	e000      	b.n	8004f06 <USBD_StdEPReq+0xac>
      break;	
 8004f04:	bf00      	nop
    break;
 8004f06:	e07b      	b.n	8005000 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d002      	beq.n	8004f18 <USBD_StdEPReq+0xbe>
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d00c      	beq.n	8004f30 <USBD_StdEPReq+0xd6>
 8004f16:	e024      	b.n	8004f62 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004f18:	7bbb      	ldrb	r3, [r7, #14]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d026      	beq.n	8004f6c <USBD_StdEPReq+0x112>
 8004f1e:	7bbb      	ldrb	r3, [r7, #14]
 8004f20:	2b80      	cmp	r3, #128	; 0x80
 8004f22:	d023      	beq.n	8004f6c <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8004f24:	7bbb      	ldrb	r3, [r7, #14]
 8004f26:	4619      	mov	r1, r3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f00b f895 	bl	8010058 <USBD_LL_StallEP>
      break;	
 8004f2e:	e01d      	b.n	8004f6c <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	885b      	ldrh	r3, [r3, #2]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d11b      	bne.n	8004f70 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8004f38:	7bbb      	ldrb	r3, [r7, #14]
 8004f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004f42:	7bbb      	ldrb	r3, [r7, #14]
 8004f44:	4619      	mov	r1, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f00b f8bc 	bl	80100c4 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	6839      	ldr	r1, [r7, #0]
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fbb6 	bl	80056cc <USBD_CtlSendStatus>
      break;
 8004f60:	e006      	b.n	8004f70 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fae7 	bl	8005538 <USBD_CtlError>
      break;    
 8004f6a:	e002      	b.n	8004f72 <USBD_StdEPReq+0x118>
      break;	
 8004f6c:	bf00      	nop
 8004f6e:	e047      	b.n	8005000 <USBD_StdEPReq+0x1a6>
      break;
 8004f70:	bf00      	nop
    break;
 8004f72:	e045      	b.n	8005000 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d002      	beq.n	8004f84 <USBD_StdEPReq+0x12a>
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d00b      	beq.n	8004f9a <USBD_StdEPReq+0x140>
 8004f82:	e036      	b.n	8004ff2 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8004f84:	7bbb      	ldrb	r3, [r7, #14]
 8004f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d036      	beq.n	8004ffc <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8004f8e:	7bbb      	ldrb	r3, [r7, #14]
 8004f90:	4619      	mov	r1, r3
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f00b f860 	bl	8010058 <USBD_LL_StallEP>
      break;	
 8004f98:	e030      	b.n	8004ffc <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004f9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	da08      	bge.n	8004fb4 <USBD_StdEPReq+0x15a>
 8004fa2:	7bbb      	ldrb	r3, [r7, #14]
 8004fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa8:	3301      	adds	r3, #1
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	4413      	add	r3, r2
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	e007      	b.n	8004fc4 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8004fb4:	7bbb      	ldrb	r3, [r7, #14]
 8004fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004fba:	3310      	adds	r3, #16
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004fc6:	7bbb      	ldrb	r3, [r7, #14]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f00b f8b0 	bl	8010130 <USBD_LL_IsStallEP>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	e002      	b.n	8004fe4 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8004fe4:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	4619      	mov	r1, r3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fb10 	bl	8005610 <USBD_CtlSendData>
      break;
 8004ff0:	e005      	b.n	8004ffe <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8004ff2:	6839      	ldr	r1, [r7, #0]
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fa9f 	bl	8005538 <USBD_CtlError>
      break;
 8004ffa:	e000      	b.n	8004ffe <USBD_StdEPReq+0x1a4>
      break;	
 8004ffc:	bf00      	nop
    break;
 8004ffe:	bf00      	nop
  }
  return ret;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	885b      	ldrh	r3, [r3, #2]
 800501a:	0a1b      	lsrs	r3, r3, #8
 800501c:	b29b      	uxth	r3, r3
 800501e:	3b01      	subs	r3, #1
 8005020:	2b06      	cmp	r3, #6
 8005022:	f200 80c9 	bhi.w	80051b8 <USBD_GetDescriptor+0x1ac>
 8005026:	a201      	add	r2, pc, #4	; (adr r2, 800502c <USBD_GetDescriptor+0x20>)
 8005028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502c:	08005049 	.word	0x08005049
 8005030:	08005061 	.word	0x08005061
 8005034:	080050a1 	.word	0x080050a1
 8005038:	080051b9 	.word	0x080051b9
 800503c:	080051b9 	.word	0x080051b9
 8005040:	08005165 	.word	0x08005165
 8005044:	0800518b 	.word	0x0800518b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	7c12      	ldrb	r2, [r2, #16]
 8005054:	f107 010a 	add.w	r1, r7, #10
 8005058:	4610      	mov	r0, r2
 800505a:	4798      	blx	r3
 800505c:	60f8      	str	r0, [r7, #12]
    break;
 800505e:	e0b0      	b.n	80051c2 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	7c1b      	ldrb	r3, [r3, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10d      	bne.n	8005084 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	f107 020a 	add.w	r2, r7, #10
 8005074:	4610      	mov	r0, r2
 8005076:	4798      	blx	r3
 8005078:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3301      	adds	r3, #1
 800507e:	2202      	movs	r2, #2
 8005080:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005082:	e09e      	b.n	80051c2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	f107 020a 	add.w	r2, r7, #10
 8005090:	4610      	mov	r0, r2
 8005092:	4798      	blx	r3
 8005094:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3301      	adds	r3, #1
 800509a:	2202      	movs	r2, #2
 800509c:	701a      	strb	r2, [r3, #0]
    break;
 800509e:	e090      	b.n	80051c2 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	885b      	ldrh	r3, [r3, #2]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b05      	cmp	r3, #5
 80050a8:	d856      	bhi.n	8005158 <USBD_GetDescriptor+0x14c>
 80050aa:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <USBD_GetDescriptor+0xa4>)
 80050ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b0:	080050c9 	.word	0x080050c9
 80050b4:	080050e1 	.word	0x080050e1
 80050b8:	080050f9 	.word	0x080050f9
 80050bc:	08005111 	.word	0x08005111
 80050c0:	08005129 	.word	0x08005129
 80050c4:	08005141 	.word	0x08005141
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	7c12      	ldrb	r2, [r2, #16]
 80050d4:	f107 010a 	add.w	r1, r7, #10
 80050d8:	4610      	mov	r0, r2
 80050da:	4798      	blx	r3
 80050dc:	60f8      	str	r0, [r7, #12]
      break;
 80050de:	e040      	b.n	8005162 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	7c12      	ldrb	r2, [r2, #16]
 80050ec:	f107 010a 	add.w	r1, r7, #10
 80050f0:	4610      	mov	r0, r2
 80050f2:	4798      	blx	r3
 80050f4:	60f8      	str	r0, [r7, #12]
      break;
 80050f6:	e034      	b.n	8005162 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	7c12      	ldrb	r2, [r2, #16]
 8005104:	f107 010a 	add.w	r1, r7, #10
 8005108:	4610      	mov	r0, r2
 800510a:	4798      	blx	r3
 800510c:	60f8      	str	r0, [r7, #12]
      break;
 800510e:	e028      	b.n	8005162 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	7c12      	ldrb	r2, [r2, #16]
 800511c:	f107 010a 	add.w	r1, r7, #10
 8005120:	4610      	mov	r0, r2
 8005122:	4798      	blx	r3
 8005124:	60f8      	str	r0, [r7, #12]
      break;
 8005126:	e01c      	b.n	8005162 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	7c12      	ldrb	r2, [r2, #16]
 8005134:	f107 010a 	add.w	r1, r7, #10
 8005138:	4610      	mov	r0, r2
 800513a:	4798      	blx	r3
 800513c:	60f8      	str	r0, [r7, #12]
      break;
 800513e:	e010      	b.n	8005162 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	7c12      	ldrb	r2, [r2, #16]
 800514c:	f107 010a 	add.w	r1, r7, #10
 8005150:	4610      	mov	r0, r2
 8005152:	4798      	blx	r3
 8005154:	60f8      	str	r0, [r7, #12]
      break;
 8005156:	e004      	b.n	8005162 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8005158:	6839      	ldr	r1, [r7, #0]
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f9ec 	bl	8005538 <USBD_CtlError>
      return;
 8005160:	e044      	b.n	80051ec <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8005162:	e02e      	b.n	80051c2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	7c1b      	ldrb	r3, [r3, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d109      	bne.n	8005180 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005174:	f107 020a 	add.w	r2, r7, #10
 8005178:	4610      	mov	r0, r2
 800517a:	4798      	blx	r3
 800517c:	60f8      	str	r0, [r7, #12]
      break;
 800517e:	e020      	b.n	80051c2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005180:	6839      	ldr	r1, [r7, #0]
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f9d8 	bl	8005538 <USBD_CtlError>
      return;
 8005188:	e030      	b.n	80051ec <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	7c1b      	ldrb	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10d      	bne.n	80051ae <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	f107 020a 	add.w	r2, r7, #10
 800519e:	4610      	mov	r0, r2
 80051a0:	4798      	blx	r3
 80051a2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3301      	adds	r3, #1
 80051a8:	2207      	movs	r2, #7
 80051aa:	701a      	strb	r2, [r3, #0]
      break; 
 80051ac:	e009      	b.n	80051c2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f9c1 	bl	8005538 <USBD_CtlError>
      return;
 80051b6:	e019      	b.n	80051ec <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 80051b8:	6839      	ldr	r1, [r7, #0]
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f9bc 	bl	8005538 <USBD_CtlError>
    return;
 80051c0:	e014      	b.n	80051ec <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 80051c2:	897b      	ldrh	r3, [r7, #10]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d011      	beq.n	80051ec <USBD_GetDescriptor+0x1e0>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	88db      	ldrh	r3, [r3, #6]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00d      	beq.n	80051ec <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	88da      	ldrh	r2, [r3, #6]
 80051d4:	897b      	ldrh	r3, [r7, #10]
 80051d6:	4293      	cmp	r3, r2
 80051d8:	bf28      	it	cs
 80051da:	4613      	movcs	r3, r2
 80051dc:	b29b      	uxth	r3, r3
 80051de:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 80051e0:	897b      	ldrh	r3, [r7, #10]
 80051e2:	461a      	mov	r2, r3
 80051e4:	68f9      	ldr	r1, [r7, #12]
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fa12 	bl	8005610 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop

080051f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	889b      	ldrh	r3, [r3, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d12c      	bne.n	8005260 <USBD_SetAddress+0x6c>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	88db      	ldrh	r3, [r3, #6]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d128      	bne.n	8005260 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	885b      	ldrh	r3, [r3, #2]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005218:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005220:	2b03      	cmp	r3, #3
 8005222:	d104      	bne.n	800522e <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8005224:	6839      	ldr	r1, [r7, #0]
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f986 	bl	8005538 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800522c:	e01c      	b.n	8005268 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	7bfa      	ldrb	r2, [r7, #15]
 8005232:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	4619      	mov	r1, r3
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f00a ffa4 	bl	8010188 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fa43 	bl	80056cc <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005254:	e008      	b.n	8005268 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800525e:	e003      	b.n	8005268 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8005260:	6839      	ldr	r1, [r7, #0]
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f968 	bl	8005538 <USBD_CtlError>
  } 
}
 8005268:	bf00      	nop
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	885b      	ldrh	r3, [r3, #2]
 800527e:	b2da      	uxtb	r2, r3
 8005280:	4b3e      	ldr	r3, [pc, #248]	; (800537c <USBD_SetConfig+0x10c>)
 8005282:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005284:	4b3d      	ldr	r3, [pc, #244]	; (800537c <USBD_SetConfig+0x10c>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d904      	bls.n	8005296 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 800528c:	6839      	ldr	r1, [r7, #0]
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f952 	bl	8005538 <USBD_CtlError>
 8005294:	e06f      	b.n	8005376 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800529c:	2b02      	cmp	r3, #2
 800529e:	d002      	beq.n	80052a6 <USBD_SetConfig+0x36>
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d023      	beq.n	80052ec <USBD_SetConfig+0x7c>
 80052a4:	e062      	b.n	800536c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80052a6:	4b35      	ldr	r3, [pc, #212]	; (800537c <USBD_SetConfig+0x10c>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d01a      	beq.n	80052e4 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80052ae:	4b33      	ldr	r3, [pc, #204]	; (800537c <USBD_SetConfig+0x10c>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2203      	movs	r2, #3
 80052bc:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80052c0:	4b2e      	ldr	r3, [pc, #184]	; (800537c <USBD_SetConfig+0x10c>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	4619      	mov	r1, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff fb22 	bl	8004910 <USBD_SetClassConfig>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d104      	bne.n	80052dc <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 80052d2:	6839      	ldr	r1, [r7, #0]
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f92f 	bl	8005538 <USBD_CtlError>
          return;
 80052da:	e04c      	b.n	8005376 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f9f5 	bl	80056cc <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80052e2:	e048      	b.n	8005376 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f9f1 	bl	80056cc <USBD_CtlSendStatus>
      break;
 80052ea:	e044      	b.n	8005376 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80052ec:	4b23      	ldr	r3, [pc, #140]	; (800537c <USBD_SetConfig+0x10c>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d112      	bne.n	800531a <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80052fc:	4b1f      	ldr	r3, [pc, #124]	; (800537c <USBD_SetConfig+0x10c>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8005306:	4b1d      	ldr	r3, [pc, #116]	; (800537c <USBD_SetConfig+0x10c>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	4619      	mov	r1, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff fb1e 	bl	800494e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f9da 	bl	80056cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005318:	e02d      	b.n	8005376 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 800531a:	4b18      	ldr	r3, [pc, #96]	; (800537c <USBD_SetConfig+0x10c>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	429a      	cmp	r2, r3
 8005326:	d01d      	beq.n	8005364 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	4619      	mov	r1, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff fb0c 	bl	800494e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005336:	4b11      	ldr	r3, [pc, #68]	; (800537c <USBD_SetConfig+0x10c>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005340:	4b0e      	ldr	r3, [pc, #56]	; (800537c <USBD_SetConfig+0x10c>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	4619      	mov	r1, r3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff fae2 	bl	8004910 <USBD_SetClassConfig>
 800534c:	4603      	mov	r3, r0
 800534e:	2b02      	cmp	r3, #2
 8005350:	d104      	bne.n	800535c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8005352:	6839      	ldr	r1, [r7, #0]
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f8ef 	bl	8005538 <USBD_CtlError>
          return;
 800535a:	e00c      	b.n	8005376 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f9b5 	bl	80056cc <USBD_CtlSendStatus>
      break;
 8005362:	e008      	b.n	8005376 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f9b1 	bl	80056cc <USBD_CtlSendStatus>
      break;
 800536a:	e004      	b.n	8005376 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800536c:	6839      	ldr	r1, [r7, #0]
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f8e2 	bl	8005538 <USBD_CtlError>
      break;
 8005374:	bf00      	nop
    }
  }
}
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	2000093a 	.word	0x2000093a

08005380 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	88db      	ldrh	r3, [r3, #6]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d004      	beq.n	800539c <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8005392:	6839      	ldr	r1, [r7, #0]
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f8cf 	bl	8005538 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800539a:	e01f      	b.n	80053dc <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d002      	beq.n	80053ac <USBD_GetConfig+0x2c>
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d00b      	beq.n	80053c2 <USBD_GetConfig+0x42>
 80053aa:	e012      	b.n	80053d2 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 80053b6:	2201      	movs	r2, #1
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f928 	bl	8005610 <USBD_CtlSendData>
      break;
 80053c0:	e00c      	b.n	80053dc <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 80053c6:	2201      	movs	r2, #1
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f920 	bl	8005610 <USBD_CtlSendData>
      break;
 80053d0:	e004      	b.n	80053dc <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 80053d2:	6839      	ldr	r1, [r7, #0]
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f8af 	bl	8005538 <USBD_CtlError>
      break;
 80053da:	bf00      	nop
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80053f4:	3b02      	subs	r3, #2
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d815      	bhi.n	8005426 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f043 0202 	orr.w	r2, r3, #2
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 800541a:	2202      	movs	r2, #2
 800541c:	4619      	mov	r1, r3
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f8f6 	bl	8005610 <USBD_CtlSendData>
                      2);
    break;
 8005424:	e004      	b.n	8005430 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8005426:	6839      	ldr	r1, [r7, #0]
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f885 	bl	8005538 <USBD_CtlError>
    break;
 800542e:	bf00      	nop
  }
}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	885b      	ldrh	r3, [r3, #2]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d10d      	bne.n	8005466 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	6839      	ldr	r1, [r7, #0]
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f933 	bl	80056cc <USBD_CtlSendStatus>
  }

}
 8005466:	bf00      	nop
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b082      	sub	sp, #8
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800547e:	3b02      	subs	r3, #2
 8005480:	2b01      	cmp	r3, #1
 8005482:	d812      	bhi.n	80054aa <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	885b      	ldrh	r3, [r3, #2]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d113      	bne.n	80054b4 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f912 	bl	80056cc <USBD_CtlSendStatus>
    }
    break;
 80054a8:	e004      	b.n	80054b4 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 80054aa:	6839      	ldr	r1, [r7, #0]
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f843 	bl	8005538 <USBD_CtlError>
    break;
 80054b2:	e000      	b.n	80054b6 <USBD_ClrFeature+0x48>
    break;
 80054b4:	bf00      	nop
  }
}
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781a      	ldrb	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	785a      	ldrb	r2, [r3, #1]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	3302      	adds	r3, #2
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	b29a      	uxth	r2, r3
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	3303      	adds	r3, #3
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	021b      	lsls	r3, r3, #8
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	4413      	add	r3, r2
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	3304      	adds	r3, #4
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	3305      	adds	r3, #5
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	b29b      	uxth	r3, r3
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	b29b      	uxth	r3, r3
 8005508:	4413      	add	r3, r2
 800550a:	b29a      	uxth	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	3306      	adds	r3, #6
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	b29a      	uxth	r2, r3
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	3307      	adds	r3, #7
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	021b      	lsls	r3, r3, #8
 8005522:	b29b      	uxth	r3, r3
 8005524:	4413      	add	r3, r2
 8005526:	b29a      	uxth	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	80da      	strh	r2, [r3, #6]

}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8005542:	2180      	movs	r1, #128	; 0x80
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f00a fd87 	bl	8010058 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800554a:	2100      	movs	r1, #0
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f00a fd83 	bl	8010058 <USBD_LL_StallEP>
}
 8005552:	bf00      	nop
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b086      	sub	sp, #24
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d033      	beq.n	80055d8 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f835 	bl	80055e0 <USBD_GetLen>
 8005576:	4603      	mov	r3, r0
 8005578:	3301      	adds	r3, #1
 800557a:	b29b      	uxth	r3, r3
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	75fa      	strb	r2, [r7, #23]
 800558a:	461a      	mov	r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4413      	add	r3, r2
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	8812      	ldrh	r2, [r2, #0]
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8005598:	7dfb      	ldrb	r3, [r7, #23]
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	75fa      	strb	r2, [r7, #23]
 800559e:	461a      	mov	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4413      	add	r3, r2
 80055a4:	2203      	movs	r2, #3
 80055a6:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80055a8:	e012      	b.n	80055d0 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	75fa      	strb	r2, [r7, #23]
 80055b0:	461a      	mov	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	441a      	add	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1c59      	adds	r1, r3, #1
 80055ba:	60f9      	str	r1, [r7, #12]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	75fa      	strb	r2, [r7, #23]
 80055c6:	461a      	mov	r2, r3
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4413      	add	r3, r2
 80055cc:	2200      	movs	r2, #0
 80055ce:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e8      	bne.n	80055aa <USBD_GetString+0x50>
    }
  } 
}
 80055d8:	bf00      	nop
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 80055ec:	e005      	b.n	80055fa <USBD_GetLen+0x1a>
    {
        len++;
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	3301      	adds	r3, #1
 80055f2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3301      	adds	r3, #1
 80055f8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f5      	bne.n	80055ee <USBD_GetLen+0xe>
    }

    return len;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	4613      	mov	r3, r2
 800561c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2202      	movs	r2, #2
 8005622:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8005626:	88fa      	ldrh	r2, [r7, #6]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800562c:	88fa      	ldrh	r2, [r7, #6]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	2100      	movs	r1, #0
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f00a fddb 	bl	80101f4 <USBD_LL_Transmit>
  
  return USBD_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	4613      	mov	r3, r2
 8005654:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	2100      	movs	r1, #0
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f00a fdc9 	bl	80101f4 <USBD_LL_Transmit>
  
  return USBD_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	4613      	mov	r3, r2
 8005678:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2203      	movs	r2, #3
 800567e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8005682:	88fa      	ldrh	r2, [r7, #6]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800568a:	88fa      	ldrh	r2, [r7, #6]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	2100      	movs	r1, #0
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f00a fde5 	bl	8010268 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	4613      	mov	r3, r2
 80056b4:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	2100      	movs	r1, #0
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f00a fdd3 	bl	8010268 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2204      	movs	r2, #4
 80056d8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80056dc:	2300      	movs	r3, #0
 80056de:	2200      	movs	r2, #0
 80056e0:	2100      	movs	r1, #0
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f00a fd86 	bl	80101f4 <USBD_LL_Transmit>
  
  return USBD_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b082      	sub	sp, #8
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2205      	movs	r2, #5
 80056fe:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8005702:	2300      	movs	r3, #0
 8005704:	2200      	movs	r2, #0
 8005706:	2100      	movs	r1, #0
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f00a fdad 	bl	8010268 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	4603      	mov	r3, r0
 8005720:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800572a:	2b84      	cmp	r3, #132	; 0x84
 800572c:	d005      	beq.n	800573a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800572e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4413      	add	r3, r2
 8005736:	3303      	adds	r3, #3
 8005738:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800573a:	68fb      	ldr	r3, [r7, #12]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800574c:	f001 fdaa 	bl	80072a4 <vTaskStartScheduler>
  
  return osOK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	bd80      	pop	{r7, pc}

08005756 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005758:	b087      	sub	sp, #28
 800575a:	af02      	add	r7, sp, #8
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685c      	ldr	r4, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800576c:	b29e      	uxth	r6, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff ffcf 	bl	8005718 <makeFreeRtosPriority>
 800577a:	4602      	mov	r2, r0
 800577c:	f107 030c 	add.w	r3, r7, #12
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	9200      	str	r2, [sp, #0]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	4632      	mov	r2, r6
 8005788:	4629      	mov	r1, r5
 800578a:	4620      	mov	r0, r4
 800578c:	f001 fc2c 	bl	8006fe8 <xTaskCreate>
 8005790:	4603      	mov	r3, r0
 8005792:	2b01      	cmp	r3, #1
 8005794:	d001      	beq.n	800579a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8005796:	2300      	movs	r3, #0
 8005798:	e000      	b.n	800579c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800579a:	68fb      	ldr	r3, [r7, #12]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057a4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <osDelay+0x16>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	e000      	b.n	80057bc <osDelay+0x18>
 80057ba:	2301      	movs	r3, #1
 80057bc:	4618      	mov	r0, r3
 80057be:	f001 fd3d 	bl	800723c <vTaskDelay>
  
  return osOK;
 80057c2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80057d0:	f002 fa10 	bl	8007bf4 <xTaskGetSchedulerState>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d001      	beq.n	80057de <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80057da:	f000 fc5d 	bl	8006098 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80057de:	bf00      	nop
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b082      	sub	sp, #8
 80057e6:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80057e8:	2018      	movs	r0, #24
 80057ea:	f000 fca3 	bl	8006134 <pvPortMalloc>
 80057ee:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3304      	adds	r3, #4
 8005800:	4618      	mov	r0, r3
 8005802:	f000 f9e0 	bl	8005bc6 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005806:	687b      	ldr	r3, [r7, #4]
	}
 8005808:	4618      	mov	r0, r3
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b090      	sub	sp, #64	; 0x40
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005826:	2300      	movs	r3, #0
 8005828:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d109      	bne.n	8005844 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	623b      	str	r3, [r7, #32]
 8005842:	e7fe      	b.n	8005842 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <xEventGroupWaitBits+0x52>
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	61fb      	str	r3, [r7, #28]
 8005860:	e7fe      	b.n	8005860 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <xEventGroupWaitBits+0x6c>
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	e7fe      	b.n	800587a <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800587c:	f002 f9ba 	bl	8007bf4 <xTaskGetSchedulerState>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d102      	bne.n	800588c <xEventGroupWaitBits+0x7c>
 8005886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <xEventGroupWaitBits+0x80>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <xEventGroupWaitBits+0x82>
 8005890:	2300      	movs	r3, #0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d109      	bne.n	80058aa <xEventGroupWaitBits+0x9a>
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e7fe      	b.n	80058a8 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 80058aa:	f001 fd41 	bl	8007330 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80058ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	68b9      	ldr	r1, [r7, #8]
 80058b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058ba:	f000 f962 	bl	8005b82 <prvTestWaitCondition>
 80058be:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00e      	beq.n	80058e4 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80058c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d028      	beq.n	8005926 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80058d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	43db      	mvns	r3, r3
 80058dc:	401a      	ands	r2, r3
 80058de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	e020      	b.n	8005926 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80058e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d104      	bne.n	80058f4 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80058ee:	2301      	movs	r3, #1
 80058f0:	633b      	str	r3, [r7, #48]	; 0x30
 80058f2:	e018      	b.n	8005926 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005900:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800590e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005912:	1d18      	adds	r0, r3, #4
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	4313      	orrs	r3, r2
 800591a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800591c:	4619      	mov	r1, r3
 800591e:	f001 fefb 	bl	8007718 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005926:	f001 fd11 	bl	800734c <xTaskResumeAll>
 800592a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800592c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800592e:	2b00      	cmp	r3, #0
 8005930:	d031      	beq.n	8005996 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	2b00      	cmp	r3, #0
 8005936:	d107      	bne.n	8005948 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8005938:	4b19      	ldr	r3, [pc, #100]	; (80059a0 <xEventGroupWaitBits+0x190>)
 800593a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005948:	f002 fb1a 	bl	8007f80 <uxTaskResetEventItemValue>
 800594c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800594e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d11a      	bne.n	800598e <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8005958:	f000 fb10 	bl	8005f7c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800595c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005968:	f000 f90b 	bl	8005b82 <prvTestWaitCondition>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d006      	beq.n	8005986 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	43db      	mvns	r3, r3
 8005980:	401a      	ands	r2, r3
 8005982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005984:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005986:	2301      	movs	r3, #1
 8005988:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800598a:	f000 fb25 	bl	8005fd8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800598e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005990:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005994:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005998:	4618      	mov	r0, r3
 800599a:	3740      	adds	r7, #64	; 0x40
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	e000ed04 	.word	0xe000ed04

080059a4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d109      	bne.n	80059cc <xEventGroupClearBits+0x28>
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	e7fe      	b.n	80059ca <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d009      	beq.n	80059ea <xEventGroupClearBits+0x46>
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	60bb      	str	r3, [r7, #8]
 80059e8:	e7fe      	b.n	80059e8 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 80059ea:	f000 fac7 	bl	8005f7c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	43db      	mvns	r3, r3
 80059fc:	401a      	ands	r2, r3
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8005a02:	f000 fae9 	bl	8005fd8 <vPortExitCritical>

	return uxReturn;
 8005a06:	693b      	ldr	r3, [r7, #16]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08e      	sub	sp, #56	; 0x38
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005a22:	2300      	movs	r3, #0
 8005a24:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d109      	bne.n	8005a40 <xEventGroupSetBits+0x30>
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	e7fe      	b.n	8005a3e <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <xEventGroupSetBits+0x4e>
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	e7fe      	b.n	8005a5c <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	3304      	adds	r3, #4
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	3308      	adds	r3, #8
 8005a68:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005a6a:	f001 fc61 	bl	8007330 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005a80:	e03c      	b.n	8005afc <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005a98:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005aa0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d108      	bne.n	8005abe <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00b      	beq.n	8005ad0 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005abc:	e008      	b.n	8005ad0 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	401a      	ands	r2, r3
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d101      	bne.n	8005ad0 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005acc:	2301      	movs	r3, #1
 8005ace:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d010      	beq.n	8005af8 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005af0:	4619      	mov	r1, r3
 8005af2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005af4:	f001 feac 	bl	8007850 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005afc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d1be      	bne.n	8005a82 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	43db      	mvns	r3, r3
 8005b0c:	401a      	ands	r2, r3
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005b12:	f001 fc1b 	bl	800734c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	681b      	ldr	r3, [r3, #0]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3738      	adds	r7, #56	; 0x38
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b086      	sub	sp, #24
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	3304      	adds	r3, #4
 8005b32:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 8005b34:	f001 fbfc 	bl	8007330 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8005b38:	e016      	b.n	8005b68 <vEventGroupDelete+0x46>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	3308      	adds	r3, #8
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d109      	bne.n	8005b5a <vEventGroupDelete+0x38>
 8005b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	e7fe      	b.n	8005b58 <vEventGroupDelete+0x36>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 fe74 	bl	8007850 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e4      	bne.n	8005b3a <vEventGroupDelete+0x18>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
 8005b70:	6978      	ldr	r0, [r7, #20]
 8005b72:	f000 fba1 	bl	80062b8 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 8005b76:	f001 fbe9 	bl	800734c <xTaskResumeAll>
}
 8005b7a:	bf00      	nop
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005b82:	b480      	push	{r7}
 8005b84:	b087      	sub	sp, #28
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d107      	bne.n	8005ba8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	e007      	b.n	8005bb8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	401a      	ands	r2, r3
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d101      	bne.n	8005bb8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005bb8:	697b      	ldr	r3, [r7, #20]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f103 0208 	add.w	r2, r3, #8
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f04f 32ff 	mov.w	r2, #4294967295
 8005bde:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f103 0208 	add.w	r2, r3, #8
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f103 0208 	add.w	r2, r3, #8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	601a      	str	r2, [r3, #0]
}
 8005c5c:	bf00      	nop
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d103      	bne.n	8005c88 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	e00c      	b.n	8005ca2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	e002      	b.n	8005c96 <vListInsert+0x2e>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d9f6      	bls.n	8005c90 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	601a      	str	r2, [r3, #0]
}
 8005cce:	bf00      	nop
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b085      	sub	sp, #20
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6892      	ldr	r2, [r2, #8]
 8005cf0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6852      	ldr	r2, [r2, #4]
 8005cfa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d103      	bne.n	8005d0e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	1e5a      	subs	r2, r3, #1
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
	...

08005d30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3b04      	subs	r3, #4
 8005d40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3b04      	subs	r3, #4
 8005d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f023 0201 	bic.w	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3b04      	subs	r3, #4
 8005d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d60:	4a0c      	ldr	r2, [pc, #48]	; (8005d94 <pxPortInitialiseStack+0x64>)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3b14      	subs	r3, #20
 8005d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3b04      	subs	r3, #4
 8005d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f06f 0202 	mvn.w	r2, #2
 8005d7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3b20      	subs	r3, #32
 8005d84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d86:	68fb      	ldr	r3, [r7, #12]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	08005d99 	.word	0x08005d99

08005d98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005da2:	4b11      	ldr	r3, [pc, #68]	; (8005de8 <prvTaskExitError+0x50>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005daa:	d009      	beq.n	8005dc0 <prvTaskExitError+0x28>
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	e7fe      	b.n	8005dbe <prvTaskExitError+0x26>
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005dd2:	bf00      	nop
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0fc      	beq.n	8005dd4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	2000009c 	.word	0x2000009c
 8005dec:	00000000 	.word	0x00000000

08005df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <pxCurrentTCBConst2>)
 8005df2:	6819      	ldr	r1, [r3, #0]
 8005df4:	6808      	ldr	r0, [r1, #0]
 8005df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfa:	f380 8809 	msr	PSP, r0
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f04f 0000 	mov.w	r0, #0
 8005e06:	f380 8811 	msr	BASEPRI, r0
 8005e0a:	4770      	bx	lr
 8005e0c:	f3af 8000 	nop.w

08005e10 <pxCurrentTCBConst2>:
 8005e10:	20004558 	.word	0x20004558
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop

08005e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e18:	4808      	ldr	r0, [pc, #32]	; (8005e3c <prvPortStartFirstTask+0x24>)
 8005e1a:	6800      	ldr	r0, [r0, #0]
 8005e1c:	6800      	ldr	r0, [r0, #0]
 8005e1e:	f380 8808 	msr	MSP, r0
 8005e22:	f04f 0000 	mov.w	r0, #0
 8005e26:	f380 8814 	msr	CONTROL, r0
 8005e2a:	b662      	cpsie	i
 8005e2c:	b661      	cpsie	f
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	df00      	svc	0
 8005e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e3a:	bf00      	nop
 8005e3c:	e000ed08 	.word	0xe000ed08

08005e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e46:	4b44      	ldr	r3, [pc, #272]	; (8005f58 <xPortStartScheduler+0x118>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a44      	ldr	r2, [pc, #272]	; (8005f5c <xPortStartScheduler+0x11c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d109      	bne.n	8005e64 <xPortStartScheduler+0x24>
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	e7fe      	b.n	8005e62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e64:	4b3c      	ldr	r3, [pc, #240]	; (8005f58 <xPortStartScheduler+0x118>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a3d      	ldr	r2, [pc, #244]	; (8005f60 <xPortStartScheduler+0x120>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d109      	bne.n	8005e82 <xPortStartScheduler+0x42>
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e7fe      	b.n	8005e80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e82:	4b38      	ldr	r3, [pc, #224]	; (8005f64 <xPortStartScheduler+0x124>)
 8005e84:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	22ff      	movs	r2, #255	; 0xff
 8005e92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	4b30      	ldr	r3, [pc, #192]	; (8005f68 <xPortStartScheduler+0x128>)
 8005ea8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005eaa:	4b30      	ldr	r3, [pc, #192]	; (8005f6c <xPortStartScheduler+0x12c>)
 8005eac:	2207      	movs	r2, #7
 8005eae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eb0:	e009      	b.n	8005ec6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005eb2:	4b2e      	ldr	r3, [pc, #184]	; (8005f6c <xPortStartScheduler+0x12c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	4a2c      	ldr	r2, [pc, #176]	; (8005f6c <xPortStartScheduler+0x12c>)
 8005eba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ebc:	78fb      	ldrb	r3, [r7, #3]
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ece:	2b80      	cmp	r3, #128	; 0x80
 8005ed0:	d0ef      	beq.n	8005eb2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ed2:	4b26      	ldr	r3, [pc, #152]	; (8005f6c <xPortStartScheduler+0x12c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f1c3 0307 	rsb	r3, r3, #7
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d009      	beq.n	8005ef2 <xPortStartScheduler+0xb2>
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	60bb      	str	r3, [r7, #8]
 8005ef0:	e7fe      	b.n	8005ef0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ef2:	4b1e      	ldr	r3, [pc, #120]	; (8005f6c <xPortStartScheduler+0x12c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	4a1c      	ldr	r2, [pc, #112]	; (8005f6c <xPortStartScheduler+0x12c>)
 8005efa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005efc:	4b1b      	ldr	r3, [pc, #108]	; (8005f6c <xPortStartScheduler+0x12c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f04:	4a19      	ldr	r2, [pc, #100]	; (8005f6c <xPortStartScheduler+0x12c>)
 8005f06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f10:	4a17      	ldr	r2, [pc, #92]	; (8005f70 <xPortStartScheduler+0x130>)
 8005f12:	4b17      	ldr	r3, [pc, #92]	; (8005f70 <xPortStartScheduler+0x130>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f1c:	4a14      	ldr	r2, [pc, #80]	; (8005f70 <xPortStartScheduler+0x130>)
 8005f1e:	4b14      	ldr	r3, [pc, #80]	; (8005f70 <xPortStartScheduler+0x130>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f28:	f000 f8d6 	bl	80060d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f2c:	4b11      	ldr	r3, [pc, #68]	; (8005f74 <xPortStartScheduler+0x134>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f32:	f000 f8f5 	bl	8006120 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f36:	4a10      	ldr	r2, [pc, #64]	; (8005f78 <xPortStartScheduler+0x138>)
 8005f38:	4b0f      	ldr	r3, [pc, #60]	; (8005f78 <xPortStartScheduler+0x138>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f42:	f7ff ff69 	bl	8005e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f46:	f001 fb69 	bl	800761c <vTaskSwitchContext>
	prvTaskExitError();
 8005f4a:	f7ff ff25 	bl	8005d98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	e000ed00 	.word	0xe000ed00
 8005f5c:	410fc271 	.word	0x410fc271
 8005f60:	410fc270 	.word	0x410fc270
 8005f64:	e000e400 	.word	0xe000e400
 8005f68:	2000093b 	.word	0x2000093b
 8005f6c:	2000093c 	.word	0x2000093c
 8005f70:	e000ed20 	.word	0xe000ed20
 8005f74:	2000009c 	.word	0x2000009c
 8005f78:	e000ef34 	.word	0xe000ef34

08005f7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f94:	4b0e      	ldr	r3, [pc, #56]	; (8005fd0 <vPortEnterCritical+0x54>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	4a0d      	ldr	r2, [pc, #52]	; (8005fd0 <vPortEnterCritical+0x54>)
 8005f9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f9e:	4b0c      	ldr	r3, [pc, #48]	; (8005fd0 <vPortEnterCritical+0x54>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d10e      	bne.n	8005fc4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fa6:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <vPortEnterCritical+0x58>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d009      	beq.n	8005fc4 <vPortEnterCritical+0x48>
 8005fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	603b      	str	r3, [r7, #0]
 8005fc2:	e7fe      	b.n	8005fc2 <vPortEnterCritical+0x46>
	}
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	2000009c 	.word	0x2000009c
 8005fd4:	e000ed04 	.word	0xe000ed04

08005fd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005fde:	4b11      	ldr	r3, [pc, #68]	; (8006024 <vPortExitCritical+0x4c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d109      	bne.n	8005ffa <vPortExitCritical+0x22>
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	607b      	str	r3, [r7, #4]
 8005ff8:	e7fe      	b.n	8005ff8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005ffa:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <vPortExitCritical+0x4c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	4a08      	ldr	r2, [pc, #32]	; (8006024 <vPortExitCritical+0x4c>)
 8006002:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006004:	4b07      	ldr	r3, [pc, #28]	; (8006024 <vPortExitCritical+0x4c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <vPortExitCritical+0x3e>
 800600c:	2300      	movs	r3, #0
 800600e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	2000009c 	.word	0x2000009c
	...

08006030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006030:	f3ef 8009 	mrs	r0, PSP
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	4b15      	ldr	r3, [pc, #84]	; (8006090 <pxCurrentTCBConst>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	f01e 0f10 	tst.w	lr, #16
 8006040:	bf08      	it	eq
 8006042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604a:	6010      	str	r0, [r2, #0]
 800604c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006054:	f380 8811 	msr	BASEPRI, r0
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f001 fadc 	bl	800761c <vTaskSwitchContext>
 8006064:	f04f 0000 	mov.w	r0, #0
 8006068:	f380 8811 	msr	BASEPRI, r0
 800606c:	bc09      	pop	{r0, r3}
 800606e:	6819      	ldr	r1, [r3, #0]
 8006070:	6808      	ldr	r0, [r1, #0]
 8006072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006076:	f01e 0f10 	tst.w	lr, #16
 800607a:	bf08      	it	eq
 800607c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006080:	f380 8809 	msr	PSP, r0
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	f3af 8000 	nop.w

08006090 <pxCurrentTCBConst>:
 8006090:	20004558 	.word	0x20004558
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop

08006098 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060b0:	f001 f9f8 	bl	80074a4 <xTaskIncrementTick>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060ba:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <xPortSysTickHandler+0x3c>)
 80060bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	2300      	movs	r3, #0
 80060c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80060cc:	bf00      	nop
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	e000ed04 	.word	0xe000ed04

080060d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060dc:	4b0b      	ldr	r3, [pc, #44]	; (800610c <vPortSetupTimerInterrupt+0x34>)
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060e2:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <vPortSetupTimerInterrupt+0x38>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060e8:	4a0a      	ldr	r2, [pc, #40]	; (8006114 <vPortSetupTimerInterrupt+0x3c>)
 80060ea:	4b0b      	ldr	r3, [pc, #44]	; (8006118 <vPortSetupTimerInterrupt+0x40>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	490b      	ldr	r1, [pc, #44]	; (800611c <vPortSetupTimerInterrupt+0x44>)
 80060f0:	fba1 1303 	umull	r1, r3, r1, r3
 80060f4:	099b      	lsrs	r3, r3, #6
 80060f6:	3b01      	subs	r3, #1
 80060f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060fa:	4b04      	ldr	r3, [pc, #16]	; (800610c <vPortSetupTimerInterrupt+0x34>)
 80060fc:	2207      	movs	r2, #7
 80060fe:	601a      	str	r2, [r3, #0]
}
 8006100:	bf00      	nop
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	e000e010 	.word	0xe000e010
 8006110:	e000e018 	.word	0xe000e018
 8006114:	e000e014 	.word	0xe000e014
 8006118:	200000c0 	.word	0x200000c0
 800611c:	10624dd3 	.word	0x10624dd3

08006120 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006120:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006130 <vPortEnableVFP+0x10>
 8006124:	6801      	ldr	r1, [r0, #0]
 8006126:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800612a:	6001      	str	r1, [r0, #0]
 800612c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800612e:	bf00      	nop
 8006130:	e000ed88 	.word	0xe000ed88

08006134 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08a      	sub	sp, #40	; 0x28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800613c:	2300      	movs	r3, #0
 800613e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006140:	f001 f8f6 	bl	8007330 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006144:	4b57      	ldr	r3, [pc, #348]	; (80062a4 <pvPortMalloc+0x170>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800614c:	f000 f90c 	bl	8006368 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006150:	4b55      	ldr	r3, [pc, #340]	; (80062a8 <pvPortMalloc+0x174>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4013      	ands	r3, r2
 8006158:	2b00      	cmp	r3, #0
 800615a:	f040 808c 	bne.w	8006276 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01c      	beq.n	800619e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006164:	2208      	movs	r2, #8
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4413      	add	r3, r2
 800616a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	2b00      	cmp	r3, #0
 8006174:	d013      	beq.n	800619e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f023 0307 	bic.w	r3, r3, #7
 800617c:	3308      	adds	r3, #8
 800617e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	2b00      	cmp	r3, #0
 8006188:	d009      	beq.n	800619e <pvPortMalloc+0x6a>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	e7fe      	b.n	800619c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d068      	beq.n	8006276 <pvPortMalloc+0x142>
 80061a4:	4b41      	ldr	r3, [pc, #260]	; (80062ac <pvPortMalloc+0x178>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d863      	bhi.n	8006276 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061ae:	4b40      	ldr	r3, [pc, #256]	; (80062b0 <pvPortMalloc+0x17c>)
 80061b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061b2:	4b3f      	ldr	r3, [pc, #252]	; (80062b0 <pvPortMalloc+0x17c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061b8:	e004      	b.n	80061c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d203      	bcs.n	80061d6 <pvPortMalloc+0xa2>
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f1      	bne.n	80061ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061d6:	4b33      	ldr	r3, [pc, #204]	; (80062a4 <pvPortMalloc+0x170>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061dc:	429a      	cmp	r2, r3
 80061de:	d04a      	beq.n	8006276 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2208      	movs	r2, #8
 80061e6:	4413      	add	r3, r2
 80061e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	1ad2      	subs	r2, r2, r3
 80061fa:	2308      	movs	r3, #8
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	429a      	cmp	r2, r3
 8006200:	d91e      	bls.n	8006240 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4413      	add	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	2b00      	cmp	r3, #0
 8006212:	d009      	beq.n	8006228 <pvPortMalloc+0xf4>
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	e7fe      	b.n	8006226 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800623a:	69b8      	ldr	r0, [r7, #24]
 800623c:	f000 f8f6 	bl	800642c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006240:	4b1a      	ldr	r3, [pc, #104]	; (80062ac <pvPortMalloc+0x178>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	4a18      	ldr	r2, [pc, #96]	; (80062ac <pvPortMalloc+0x178>)
 800624c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800624e:	4b17      	ldr	r3, [pc, #92]	; (80062ac <pvPortMalloc+0x178>)
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4b18      	ldr	r3, [pc, #96]	; (80062b4 <pvPortMalloc+0x180>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d203      	bcs.n	8006262 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800625a:	4b14      	ldr	r3, [pc, #80]	; (80062ac <pvPortMalloc+0x178>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a15      	ldr	r2, [pc, #84]	; (80062b4 <pvPortMalloc+0x180>)
 8006260:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	4b10      	ldr	r3, [pc, #64]	; (80062a8 <pvPortMalloc+0x174>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	431a      	orrs	r2, r3
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006276:	f001 f869 	bl	800734c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	2b00      	cmp	r3, #0
 8006282:	d009      	beq.n	8006298 <pvPortMalloc+0x164>
 8006284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	e7fe      	b.n	8006296 <pvPortMalloc+0x162>
	return pvReturn;
 8006298:	69fb      	ldr	r3, [r7, #28]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3728      	adds	r7, #40	; 0x28
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20004548 	.word	0x20004548
 80062a8:	20004554 	.word	0x20004554
 80062ac:	2000454c 	.word	0x2000454c
 80062b0:	20004540 	.word	0x20004540
 80062b4:	20004550 	.word	0x20004550

080062b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d046      	beq.n	8006358 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062ca:	2308      	movs	r3, #8
 80062cc:	425b      	negs	r3, r3
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4413      	add	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	4b20      	ldr	r3, [pc, #128]	; (8006360 <vPortFree+0xa8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4013      	ands	r3, r2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <vPortFree+0x42>
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	e7fe      	b.n	80062f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d009      	beq.n	8006316 <vPortFree+0x5e>
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	60bb      	str	r3, [r7, #8]
 8006314:	e7fe      	b.n	8006314 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	4b11      	ldr	r3, [pc, #68]	; (8006360 <vPortFree+0xa8>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4013      	ands	r3, r2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d019      	beq.n	8006358 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d115      	bne.n	8006358 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <vPortFree+0xa8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	43db      	mvns	r3, r3
 8006336:	401a      	ands	r2, r3
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800633c:	f000 fff8 	bl	8007330 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	4b07      	ldr	r3, [pc, #28]	; (8006364 <vPortFree+0xac>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4413      	add	r3, r2
 800634a:	4a06      	ldr	r2, [pc, #24]	; (8006364 <vPortFree+0xac>)
 800634c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800634e:	6938      	ldr	r0, [r7, #16]
 8006350:	f000 f86c 	bl	800642c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006354:	f000 fffa 	bl	800734c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006358:	bf00      	nop
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20004554 	.word	0x20004554
 8006364:	2000454c 	.word	0x2000454c

08006368 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800636e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006372:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006374:	4b27      	ldr	r3, [pc, #156]	; (8006414 <prvHeapInit+0xac>)
 8006376:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00c      	beq.n	800639c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3307      	adds	r3, #7
 8006386:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0307 	bic.w	r3, r3, #7
 800638e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	4a1f      	ldr	r2, [pc, #124]	; (8006414 <prvHeapInit+0xac>)
 8006398:	4413      	add	r3, r2
 800639a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063a0:	4a1d      	ldr	r2, [pc, #116]	; (8006418 <prvHeapInit+0xb0>)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063a6:	4b1c      	ldr	r3, [pc, #112]	; (8006418 <prvHeapInit+0xb0>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4413      	add	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063b4:	2208      	movs	r2, #8
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	1a9b      	subs	r3, r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0307 	bic.w	r3, r3, #7
 80063c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4a15      	ldr	r2, [pc, #84]	; (800641c <prvHeapInit+0xb4>)
 80063c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063ca:	4b14      	ldr	r3, [pc, #80]	; (800641c <prvHeapInit+0xb4>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2200      	movs	r2, #0
 80063d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063d2:	4b12      	ldr	r3, [pc, #72]	; (800641c <prvHeapInit+0xb4>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2200      	movs	r2, #0
 80063d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	1ad2      	subs	r2, r2, r3
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80063e8:	4b0c      	ldr	r3, [pc, #48]	; (800641c <prvHeapInit+0xb4>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	4a0a      	ldr	r2, [pc, #40]	; (8006420 <prvHeapInit+0xb8>)
 80063f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	4a09      	ldr	r2, [pc, #36]	; (8006424 <prvHeapInit+0xbc>)
 80063fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006400:	4b09      	ldr	r3, [pc, #36]	; (8006428 <prvHeapInit+0xc0>)
 8006402:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006406:	601a      	str	r2, [r3, #0]
}
 8006408:	bf00      	nop
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	20000940 	.word	0x20000940
 8006418:	20004540 	.word	0x20004540
 800641c:	20004548 	.word	0x20004548
 8006420:	20004550 	.word	0x20004550
 8006424:	2000454c 	.word	0x2000454c
 8006428:	20004554 	.word	0x20004554

0800642c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006434:	4b28      	ldr	r3, [pc, #160]	; (80064d8 <prvInsertBlockIntoFreeList+0xac>)
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	e002      	b.n	8006440 <prvInsertBlockIntoFreeList+0x14>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	429a      	cmp	r2, r3
 8006448:	d3f7      	bcc.n	800643a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	441a      	add	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	429a      	cmp	r2, r3
 800645a:	d108      	bne.n	800646e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	441a      	add	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	441a      	add	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d118      	bne.n	80064b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	4b15      	ldr	r3, [pc, #84]	; (80064dc <prvInsertBlockIntoFreeList+0xb0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d00d      	beq.n	80064aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	441a      	add	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	e008      	b.n	80064bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064aa:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <prvInsertBlockIntoFreeList+0xb0>)
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	e003      	b.n	80064bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d002      	beq.n	80064ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064ca:	bf00      	nop
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	20004540 	.word	0x20004540
 80064dc:	20004548 	.word	0x20004548

080064e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d109      	bne.n	8006508 <xQueueGenericReset+0x28>
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	60bb      	str	r3, [r7, #8]
 8006506:	e7fe      	b.n	8006506 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006508:	f7ff fd38 	bl	8005f7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006514:	68f9      	ldr	r1, [r7, #12]
 8006516:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006518:	fb01 f303 	mul.w	r3, r1, r3
 800651c:	441a      	add	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006538:	3b01      	subs	r3, #1
 800653a:	68f9      	ldr	r1, [r7, #12]
 800653c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800653e:	fb01 f303 	mul.w	r3, r1, r3
 8006542:	441a      	add	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	22ff      	movs	r2, #255	; 0xff
 800654c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	22ff      	movs	r2, #255	; 0xff
 8006554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d114      	bne.n	8006588 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d01a      	beq.n	800659c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3310      	adds	r3, #16
 800656a:	4618      	mov	r0, r3
 800656c:	f001 f90e 	bl	800778c <xTaskRemoveFromEventList>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d012      	beq.n	800659c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006576:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <xQueueGenericReset+0xcc>)
 8006578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	e009      	b.n	800659c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3310      	adds	r3, #16
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff fb1a 	bl	8005bc6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3324      	adds	r3, #36	; 0x24
 8006596:	4618      	mov	r0, r3
 8006598:	f7ff fb15 	bl	8005bc6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800659c:	f7ff fd1c 	bl	8005fd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80065a0:	2301      	movs	r3, #1
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	e000ed04 	.word	0xe000ed04

080065b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	; 0x28
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	4613      	mov	r3, r2
 80065bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d109      	bne.n	80065d8 <xQueueGenericCreate+0x28>
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	e7fe      	b.n	80065d6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d102      	bne.n	80065e4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	61fb      	str	r3, [r7, #28]
 80065e2:	e004      	b.n	80065ee <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	fb02 f303 	mul.w	r3, r2, r3
 80065ec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	3348      	adds	r3, #72	; 0x48
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff fd9e 	bl	8006134 <pvPortMalloc>
 80065f8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00b      	beq.n	8006618 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	3348      	adds	r3, #72	; 0x48
 8006604:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006606:	79fa      	ldrb	r2, [r7, #7]
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	4613      	mov	r3, r2
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 f805 	bl	8006622 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006618:	69bb      	ldr	r3, [r7, #24]
	}
 800661a:	4618      	mov	r0, r3
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	607a      	str	r2, [r7, #4]
 800662e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d103      	bne.n	800663e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	e002      	b.n	8006644 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006650:	2101      	movs	r1, #1
 8006652:	69b8      	ldr	r0, [r7, #24]
 8006654:	f7ff ff44 	bl	80064e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006658:	bf00      	nop
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d109      	bne.n	8006684 <xQueueCreateCountingSemaphore+0x24>
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	613b      	str	r3, [r7, #16]
 8006682:	e7fe      	b.n	8006682 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	429a      	cmp	r2, r3
 800668a:	d909      	bls.n	80066a0 <xQueueCreateCountingSemaphore+0x40>
 800668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	e7fe      	b.n	800669e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80066a0:	2202      	movs	r2, #2
 80066a2:	2100      	movs	r1, #0
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7ff ff83 	bl	80065b0 <xQueueGenericCreate>
 80066aa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80066b8:	697b      	ldr	r3, [r7, #20]
	}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08e      	sub	sp, #56	; 0x38
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80066d2:	2300      	movs	r3, #0
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d109      	bne.n	80066f4 <xQueueGenericSend+0x30>
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066f2:	e7fe      	b.n	80066f2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d103      	bne.n	8006702 <xQueueGenericSend+0x3e>
 80066fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <xQueueGenericSend+0x42>
 8006702:	2301      	movs	r3, #1
 8006704:	e000      	b.n	8006708 <xQueueGenericSend+0x44>
 8006706:	2300      	movs	r3, #0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d109      	bne.n	8006720 <xQueueGenericSend+0x5c>
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	627b      	str	r3, [r7, #36]	; 0x24
 800671e:	e7fe      	b.n	800671e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2b02      	cmp	r3, #2
 8006724:	d103      	bne.n	800672e <xQueueGenericSend+0x6a>
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <xQueueGenericSend+0x6e>
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <xQueueGenericSend+0x70>
 8006732:	2300      	movs	r3, #0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d109      	bne.n	800674c <xQueueGenericSend+0x88>
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	623b      	str	r3, [r7, #32]
 800674a:	e7fe      	b.n	800674a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800674c:	f001 fa52 	bl	8007bf4 <xTaskGetSchedulerState>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d102      	bne.n	800675c <xQueueGenericSend+0x98>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <xQueueGenericSend+0x9c>
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <xQueueGenericSend+0x9e>
 8006760:	2300      	movs	r3, #0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d109      	bne.n	800677a <xQueueGenericSend+0xb6>
 8006766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	61fb      	str	r3, [r7, #28]
 8006778:	e7fe      	b.n	8006778 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800677a:	f7ff fbff 	bl	8005f7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006786:	429a      	cmp	r2, r3
 8006788:	d302      	bcc.n	8006790 <xQueueGenericSend+0xcc>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d129      	bne.n	80067e4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006796:	f000 fac5 	bl	8006d24 <prvCopyDataToQueue>
 800679a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d010      	beq.n	80067c6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	3324      	adds	r3, #36	; 0x24
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 ffef 	bl	800778c <xTaskRemoveFromEventList>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d013      	beq.n	80067dc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80067b4:	4b3f      	ldr	r3, [pc, #252]	; (80068b4 <xQueueGenericSend+0x1f0>)
 80067b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	e00a      	b.n	80067dc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80067c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d007      	beq.n	80067dc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80067cc:	4b39      	ldr	r3, [pc, #228]	; (80068b4 <xQueueGenericSend+0x1f0>)
 80067ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067dc:	f7ff fbfc 	bl	8005fd8 <vPortExitCritical>
				return pdPASS;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e063      	b.n	80068ac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d103      	bne.n	80067f2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067ea:	f7ff fbf5 	bl	8005fd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e05c      	b.n	80068ac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067f8:	f107 0314 	add.w	r3, r7, #20
 80067fc:	4618      	mov	r0, r3
 80067fe:	f001 f8ad 	bl	800795c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006802:	2301      	movs	r3, #1
 8006804:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006806:	f7ff fbe7 	bl	8005fd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800680a:	f000 fd91 	bl	8007330 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800680e:	f7ff fbb5 	bl	8005f7c <vPortEnterCritical>
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006818:	b25b      	sxtb	r3, r3
 800681a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681e:	d103      	bne.n	8006828 <xQueueGenericSend+0x164>
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800682e:	b25b      	sxtb	r3, r3
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d103      	bne.n	800683e <xQueueGenericSend+0x17a>
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800683e:	f7ff fbcb 	bl	8005fd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006842:	1d3a      	adds	r2, r7, #4
 8006844:	f107 0314 	add.w	r3, r7, #20
 8006848:	4611      	mov	r1, r2
 800684a:	4618      	mov	r0, r3
 800684c:	f001 f89c 	bl	8007988 <xTaskCheckForTimeOut>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d124      	bne.n	80068a0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006856:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006858:	f000 fb5c 	bl	8006f14 <prvIsQueueFull>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d018      	beq.n	8006894 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	3310      	adds	r3, #16
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	4611      	mov	r1, r2
 800686a:	4618      	mov	r0, r3
 800686c:	f000 ff30 	bl	80076d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006872:	f000 fae7 	bl	8006e44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006876:	f000 fd69 	bl	800734c <xTaskResumeAll>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	f47f af7c 	bne.w	800677a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006882:	4b0c      	ldr	r3, [pc, #48]	; (80068b4 <xQueueGenericSend+0x1f0>)
 8006884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	e772      	b.n	800677a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006896:	f000 fad5 	bl	8006e44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800689a:	f000 fd57 	bl	800734c <xTaskResumeAll>
 800689e:	e76c      	b.n	800677a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80068a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068a2:	f000 facf 	bl	8006e44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068a6:	f000 fd51 	bl	800734c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80068aa:	2300      	movs	r3, #0
		}
	}
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3738      	adds	r7, #56	; 0x38
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	e000ed04 	.word	0xe000ed04

080068b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08c      	sub	sp, #48	; 0x30
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80068c4:	2300      	movs	r3, #0
 80068c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d109      	bne.n	80068e6 <xQueueReceive+0x2e>
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	623b      	str	r3, [r7, #32]
 80068e4:	e7fe      	b.n	80068e4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d103      	bne.n	80068f4 <xQueueReceive+0x3c>
 80068ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <xQueueReceive+0x40>
 80068f4:	2301      	movs	r3, #1
 80068f6:	e000      	b.n	80068fa <xQueueReceive+0x42>
 80068f8:	2300      	movs	r3, #0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d109      	bne.n	8006912 <xQueueReceive+0x5a>
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	61fb      	str	r3, [r7, #28]
 8006910:	e7fe      	b.n	8006910 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006912:	f001 f96f 	bl	8007bf4 <xTaskGetSchedulerState>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d102      	bne.n	8006922 <xQueueReceive+0x6a>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <xQueueReceive+0x6e>
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <xQueueReceive+0x70>
 8006926:	2300      	movs	r3, #0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d109      	bne.n	8006940 <xQueueReceive+0x88>
 800692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	e7fe      	b.n	800693e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006940:	f7ff fb1c 	bl	8005f7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01f      	beq.n	8006990 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006950:	68b9      	ldr	r1, [r7, #8]
 8006952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006954:	f000 fa50 	bl	8006df8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	1e5a      	subs	r2, r3, #1
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00f      	beq.n	8006988 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696a:	3310      	adds	r3, #16
 800696c:	4618      	mov	r0, r3
 800696e:	f000 ff0d 	bl	800778c <xTaskRemoveFromEventList>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d007      	beq.n	8006988 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006978:	4b3c      	ldr	r3, [pc, #240]	; (8006a6c <xQueueReceive+0x1b4>)
 800697a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006988:	f7ff fb26 	bl	8005fd8 <vPortExitCritical>
				return pdPASS;
 800698c:	2301      	movs	r3, #1
 800698e:	e069      	b.n	8006a64 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d103      	bne.n	800699e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006996:	f7ff fb1f 	bl	8005fd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800699a:	2300      	movs	r3, #0
 800699c:	e062      	b.n	8006a64 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800699e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d106      	bne.n	80069b2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069a4:	f107 0310 	add.w	r3, r7, #16
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 ffd7 	bl	800795c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069ae:	2301      	movs	r3, #1
 80069b0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069b2:	f7ff fb11 	bl	8005fd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069b6:	f000 fcbb 	bl	8007330 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069ba:	f7ff fadf 	bl	8005f7c <vPortEnterCritical>
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069c4:	b25b      	sxtb	r3, r3
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ca:	d103      	bne.n	80069d4 <xQueueReceive+0x11c>
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069da:	b25b      	sxtb	r3, r3
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e0:	d103      	bne.n	80069ea <xQueueReceive+0x132>
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069ea:	f7ff faf5 	bl	8005fd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069ee:	1d3a      	adds	r2, r7, #4
 80069f0:	f107 0310 	add.w	r3, r7, #16
 80069f4:	4611      	mov	r1, r2
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 ffc6 	bl	8007988 <xTaskCheckForTimeOut>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d123      	bne.n	8006a4a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a04:	f000 fa70 	bl	8006ee8 <prvIsQueueEmpty>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d017      	beq.n	8006a3e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	3324      	adds	r3, #36	; 0x24
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	4611      	mov	r1, r2
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fe5a 	bl	80076d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a1e:	f000 fa11 	bl	8006e44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a22:	f000 fc93 	bl	800734c <xTaskResumeAll>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d189      	bne.n	8006940 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006a2c:	4b0f      	ldr	r3, [pc, #60]	; (8006a6c <xQueueReceive+0x1b4>)
 8006a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	e780      	b.n	8006940 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a40:	f000 fa00 	bl	8006e44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a44:	f000 fc82 	bl	800734c <xTaskResumeAll>
 8006a48:	e77a      	b.n	8006940 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a4c:	f000 f9fa 	bl	8006e44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a50:	f000 fc7c 	bl	800734c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a56:	f000 fa47 	bl	8006ee8 <prvIsQueueEmpty>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f43f af6f 	beq.w	8006940 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3730      	adds	r7, #48	; 0x30
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	e000ed04 	.word	0xe000ed04

08006a70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08e      	sub	sp, #56	; 0x38
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006a82:	2300      	movs	r3, #0
 8006a84:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d109      	bne.n	8006aa0 <xQueueSemaphoreTake+0x30>
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	623b      	str	r3, [r7, #32]
 8006a9e:	e7fe      	b.n	8006a9e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d009      	beq.n	8006abc <xQueueSemaphoreTake+0x4c>
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	61fb      	str	r3, [r7, #28]
 8006aba:	e7fe      	b.n	8006aba <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006abc:	f001 f89a 	bl	8007bf4 <xTaskGetSchedulerState>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d102      	bne.n	8006acc <xQueueSemaphoreTake+0x5c>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <xQueueSemaphoreTake+0x60>
 8006acc:	2301      	movs	r3, #1
 8006ace:	e000      	b.n	8006ad2 <xQueueSemaphoreTake+0x62>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d109      	bne.n	8006aea <xQueueSemaphoreTake+0x7a>
 8006ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	61bb      	str	r3, [r7, #24]
 8006ae8:	e7fe      	b.n	8006ae8 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006aea:	f7ff fa47 	bl	8005f7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d024      	beq.n	8006b44 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	1e5a      	subs	r2, r3, #1
 8006afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b00:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d104      	bne.n	8006b14 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006b0a:	f001 fa51 	bl	8007fb0 <pvTaskIncrementMutexHeldCount>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00f      	beq.n	8006b3c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	3310      	adds	r3, #16
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fe33 	bl	800778c <xTaskRemoveFromEventList>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d007      	beq.n	8006b3c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b2c:	4b53      	ldr	r3, [pc, #332]	; (8006c7c <xQueueSemaphoreTake+0x20c>)
 8006b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b3c:	f7ff fa4c 	bl	8005fd8 <vPortExitCritical>
				return pdPASS;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e096      	b.n	8006c72 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d110      	bne.n	8006b6c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d009      	beq.n	8006b64 <xQueueSemaphoreTake+0xf4>
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	e7fe      	b.n	8006b62 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006b64:	f7ff fa38 	bl	8005fd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e082      	b.n	8006c72 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b72:	f107 030c 	add.w	r3, r7, #12
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 fef0 	bl	800795c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b80:	f7ff fa2a 	bl	8005fd8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b84:	f000 fbd4 	bl	8007330 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b88:	f7ff f9f8 	bl	8005f7c <vPortEnterCritical>
 8006b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b92:	b25b      	sxtb	r3, r3
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d103      	bne.n	8006ba2 <xQueueSemaphoreTake+0x132>
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ba8:	b25b      	sxtb	r3, r3
 8006baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bae:	d103      	bne.n	8006bb8 <xQueueSemaphoreTake+0x148>
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bb8:	f7ff fa0e 	bl	8005fd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bbc:	463a      	mov	r2, r7
 8006bbe:	f107 030c 	add.w	r3, r7, #12
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 fedf 	bl	8007988 <xTaskCheckForTimeOut>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d132      	bne.n	8006c36 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bd2:	f000 f989 	bl	8006ee8 <prvIsQueueEmpty>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d026      	beq.n	8006c2a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d109      	bne.n	8006bf8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006be4:	f7ff f9ca 	bl	8005f7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f001 f81f 	bl	8007c30 <xTaskPriorityInherit>
 8006bf2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006bf4:	f7ff f9f0 	bl	8005fd8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfa:	3324      	adds	r3, #36	; 0x24
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	4611      	mov	r1, r2
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fd65 	bl	80076d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c08:	f000 f91c 	bl	8006e44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c0c:	f000 fb9e 	bl	800734c <xTaskResumeAll>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f47f af69 	bne.w	8006aea <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006c18:	4b18      	ldr	r3, [pc, #96]	; (8006c7c <xQueueSemaphoreTake+0x20c>)
 8006c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	e75f      	b.n	8006aea <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006c2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c2c:	f000 f90a 	bl	8006e44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c30:	f000 fb8c 	bl	800734c <xTaskResumeAll>
 8006c34:	e759      	b.n	8006aea <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006c36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c38:	f000 f904 	bl	8006e44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c3c:	f000 fb86 	bl	800734c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c42:	f000 f951 	bl	8006ee8 <prvIsQueueEmpty>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f43f af4e 	beq.w	8006aea <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00d      	beq.n	8006c70 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006c54:	f7ff f992 	bl	8005f7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006c58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c5a:	f000 f84b 	bl	8006cf4 <prvGetDisinheritPriorityAfterTimeout>
 8006c5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c66:	4618      	mov	r0, r3
 8006c68:	f001 f8ec 	bl	8007e44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006c6c:	f7ff f9b4 	bl	8005fd8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3738      	adds	r7, #56	; 0x38
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	e000ed04 	.word	0xe000ed04

08006c80 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d109      	bne.n	8006ca2 <uxQueueMessagesWaiting+0x22>
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	60bb      	str	r3, [r7, #8]
 8006ca0:	e7fe      	b.n	8006ca0 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8006ca2:	f7ff f96b 	bl	8005f7c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006cac:	f7ff f994 	bl	8005fd8 <vPortExitCritical>

	return uxReturn;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d109      	bne.n	8006ce0 <vQueueDelete+0x26>
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	60bb      	str	r3, [r7, #8]
 8006cde:	e7fe      	b.n	8006cde <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f957 	bl	8006f94 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f7ff fae6 	bl	80062b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d006      	beq.n	8006d12 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f1c3 0307 	rsb	r3, r3, #7
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	e001      	b.n	8006d16 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006d16:	68fb      	ldr	r3, [r7, #12]
	}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10d      	bne.n	8006d5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d14d      	bne.n	8006de6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fff4 	bl	8007d3c <xTaskPriorityDisinherit>
 8006d54:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	605a      	str	r2, [r3, #4]
 8006d5c:	e043      	b.n	8006de6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d119      	bne.n	8006d98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6898      	ldr	r0, [r3, #8]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	68b9      	ldr	r1, [r7, #8]
 8006d70:	f009 fbd5 	bl	801051e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7c:	441a      	add	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d32b      	bcc.n	8006de6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	609a      	str	r2, [r3, #8]
 8006d96:	e026      	b.n	8006de6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	68d8      	ldr	r0, [r3, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	461a      	mov	r2, r3
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	f009 fbbb 	bl	801051e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db0:	425b      	negs	r3, r3
 8006db2:	441a      	add	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d207      	bcs.n	8006dd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dcc:	425b      	negs	r3, r3
 8006dce:	441a      	add	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d105      	bne.n	8006de6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006dee:	697b      	ldr	r3, [r7, #20]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d018      	beq.n	8006e3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	441a      	add	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d303      	bcc.n	8006e2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68d9      	ldr	r1, [r3, #12]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	461a      	mov	r2, r3
 8006e36:	6838      	ldr	r0, [r7, #0]
 8006e38:	f009 fb71 	bl	801051e <memcpy>
	}
}
 8006e3c:	bf00      	nop
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e4c:	f7ff f896 	bl	8005f7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e58:	e011      	b.n	8006e7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d012      	beq.n	8006e88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3324      	adds	r3, #36	; 0x24
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 fc90 	bl	800778c <xTaskRemoveFromEventList>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e72:	f000 fde9 	bl	8007a48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	dce9      	bgt.n	8006e5a <prvUnlockQueue+0x16>
 8006e86:	e000      	b.n	8006e8a <prvUnlockQueue+0x46>
					break;
 8006e88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	22ff      	movs	r2, #255	; 0xff
 8006e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e92:	f7ff f8a1 	bl	8005fd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e96:	f7ff f871 	bl	8005f7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ea0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ea2:	e011      	b.n	8006ec8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d012      	beq.n	8006ed2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3310      	adds	r3, #16
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fc6b 	bl	800778c <xTaskRemoveFromEventList>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ebc:	f000 fdc4 	bl	8007a48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ec0:	7bbb      	ldrb	r3, [r7, #14]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ec8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	dce9      	bgt.n	8006ea4 <prvUnlockQueue+0x60>
 8006ed0:	e000      	b.n	8006ed4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ed2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	22ff      	movs	r2, #255	; 0xff
 8006ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006edc:	f7ff f87c 	bl	8005fd8 <vPortExitCritical>
}
 8006ee0:	bf00      	nop
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ef0:	f7ff f844 	bl	8005f7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d102      	bne.n	8006f02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006efc:	2301      	movs	r3, #1
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	e001      	b.n	8006f06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f02:	2300      	movs	r3, #0
 8006f04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f06:	f7ff f867 	bl	8005fd8 <vPortExitCritical>

	return xReturn;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f1c:	f7ff f82e 	bl	8005f7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d102      	bne.n	8006f32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	e001      	b.n	8006f36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f36:	f7ff f84f 	bl	8005fd8 <vPortExitCritical>

	return xReturn;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	e014      	b.n	8006f7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f54:	4a0e      	ldr	r2, [pc, #56]	; (8006f90 <vQueueAddToRegistry+0x4c>)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10b      	bne.n	8006f78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f60:	490b      	ldr	r1, [pc, #44]	; (8006f90 <vQueueAddToRegistry+0x4c>)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f6a:	4a09      	ldr	r2, [pc, #36]	; (8006f90 <vQueueAddToRegistry+0x4c>)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	4413      	add	r3, r2
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f76:	e005      	b.n	8006f84 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	60fb      	str	r3, [r7, #12]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2b07      	cmp	r3, #7
 8006f82:	d9e7      	bls.n	8006f54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f84:	bf00      	nop
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	200058cc 	.word	0x200058cc

08006f94 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	e016      	b.n	8006fd0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006fa2:	4a10      	ldr	r2, [pc, #64]	; (8006fe4 <vQueueUnregisterQueue+0x50>)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	00db      	lsls	r3, r3, #3
 8006fa8:	4413      	add	r3, r2
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d10b      	bne.n	8006fca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006fb2:	4a0c      	ldr	r2, [pc, #48]	; (8006fe4 <vQueueUnregisterQueue+0x50>)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006fbc:	4a09      	ldr	r2, [pc, #36]	; (8006fe4 <vQueueUnregisterQueue+0x50>)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	00db      	lsls	r3, r3, #3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	605a      	str	r2, [r3, #4]
				break;
 8006fc8:	e005      	b.n	8006fd6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2b07      	cmp	r3, #7
 8006fd4:	d9e5      	bls.n	8006fa2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	200058cc 	.word	0x200058cc

08006fe8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08c      	sub	sp, #48	; 0x30
 8006fec:	af04      	add	r7, sp, #16
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	603b      	str	r3, [r7, #0]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ff8:	88fb      	ldrh	r3, [r7, #6]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff f899 	bl	8006134 <pvPortMalloc>
 8007002:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00e      	beq.n	8007028 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800700a:	2054      	movs	r0, #84	; 0x54
 800700c:	f7ff f892 	bl	8006134 <pvPortMalloc>
 8007010:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	631a      	str	r2, [r3, #48]	; 0x30
 800701e:	e005      	b.n	800702c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007020:	6978      	ldr	r0, [r7, #20]
 8007022:	f7ff f949 	bl	80062b8 <vPortFree>
 8007026:	e001      	b.n	800702c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007028:	2300      	movs	r3, #0
 800702a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d013      	beq.n	800705a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007032:	88fa      	ldrh	r2, [r7, #6]
 8007034:	2300      	movs	r3, #0
 8007036:	9303      	str	r3, [sp, #12]
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	9302      	str	r3, [sp, #8]
 800703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	68b9      	ldr	r1, [r7, #8]
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 f80e 	bl	800706a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800704e:	69f8      	ldr	r0, [r7, #28]
 8007050:	f000 f88a 	bl	8007168 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007054:	2301      	movs	r3, #1
 8007056:	61bb      	str	r3, [r7, #24]
 8007058:	e002      	b.n	8007060 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800705a:	f04f 33ff 	mov.w	r3, #4294967295
 800705e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007060:	69bb      	ldr	r3, [r7, #24]
	}
 8007062:	4618      	mov	r0, r3
 8007064:	3720      	adds	r7, #32
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b088      	sub	sp, #32
 800706e:	af00      	add	r7, sp, #0
 8007070:	60f8      	str	r0, [r7, #12]
 8007072:	60b9      	str	r1, [r7, #8]
 8007074:	607a      	str	r2, [r7, #4]
 8007076:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007082:	3b01      	subs	r3, #1
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	f023 0307 	bic.w	r3, r3, #7
 8007090:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	f003 0307 	and.w	r3, r3, #7
 8007098:	2b00      	cmp	r3, #0
 800709a:	d009      	beq.n	80070b0 <prvInitialiseNewTask+0x46>
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	e7fe      	b.n	80070ae <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070b0:	2300      	movs	r3, #0
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	e012      	b.n	80070dc <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	4413      	add	r3, r2
 80070bc:	7819      	ldrb	r1, [r3, #0]
 80070be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	4413      	add	r3, r2
 80070c4:	3334      	adds	r3, #52	; 0x34
 80070c6:	460a      	mov	r2, r1
 80070c8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	4413      	add	r3, r2
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d006      	beq.n	80070e4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	3301      	adds	r3, #1
 80070da:	61fb      	str	r3, [r7, #28]
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	2b0f      	cmp	r3, #15
 80070e0:	d9e9      	bls.n	80070b6 <prvInitialiseNewTask+0x4c>
 80070e2:	e000      	b.n	80070e6 <prvInitialiseNewTask+0x7c>
		{
			break;
 80070e4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	2b06      	cmp	r3, #6
 80070f2:	d901      	bls.n	80070f8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070f4:	2306      	movs	r3, #6
 80070f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007102:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	2200      	movs	r2, #0
 8007108:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	3304      	adds	r3, #4
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe fd79 	bl	8005c06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	3318      	adds	r3, #24
 8007118:	4618      	mov	r0, r3
 800711a:	f7fe fd74 	bl	8005c06 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007122:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007126:	f1c3 0207 	rsb	r2, r3, #7
 800712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007132:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	2200      	movs	r2, #0
 8007138:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	68f9      	ldr	r1, [r7, #12]
 8007146:	69b8      	ldr	r0, [r7, #24]
 8007148:	f7fe fdf2 	bl	8005d30 <pxPortInitialiseStack>
 800714c:	4602      	mov	r2, r0
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800715e:	bf00      	nop
 8007160:	3720      	adds	r7, #32
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007170:	f7fe ff04 	bl	8005f7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007174:	4b2a      	ldr	r3, [pc, #168]	; (8007220 <prvAddNewTaskToReadyList+0xb8>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3301      	adds	r3, #1
 800717a:	4a29      	ldr	r2, [pc, #164]	; (8007220 <prvAddNewTaskToReadyList+0xb8>)
 800717c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800717e:	4b29      	ldr	r3, [pc, #164]	; (8007224 <prvAddNewTaskToReadyList+0xbc>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d109      	bne.n	800719a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007186:	4a27      	ldr	r2, [pc, #156]	; (8007224 <prvAddNewTaskToReadyList+0xbc>)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800718c:	4b24      	ldr	r3, [pc, #144]	; (8007220 <prvAddNewTaskToReadyList+0xb8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d110      	bne.n	80071b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007194:	f000 fc7c 	bl	8007a90 <prvInitialiseTaskLists>
 8007198:	e00d      	b.n	80071b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800719a:	4b23      	ldr	r3, [pc, #140]	; (8007228 <prvAddNewTaskToReadyList+0xc0>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d109      	bne.n	80071b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071a2:	4b20      	ldr	r3, [pc, #128]	; (8007224 <prvAddNewTaskToReadyList+0xbc>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d802      	bhi.n	80071b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071b0:	4a1c      	ldr	r2, [pc, #112]	; (8007224 <prvAddNewTaskToReadyList+0xbc>)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071b6:	4b1d      	ldr	r3, [pc, #116]	; (800722c <prvAddNewTaskToReadyList+0xc4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3301      	adds	r3, #1
 80071bc:	4a1b      	ldr	r2, [pc, #108]	; (800722c <prvAddNewTaskToReadyList+0xc4>)
 80071be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	2201      	movs	r2, #1
 80071c6:	409a      	lsls	r2, r3
 80071c8:	4b19      	ldr	r3, [pc, #100]	; (8007230 <prvAddNewTaskToReadyList+0xc8>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	4a18      	ldr	r2, [pc, #96]	; (8007230 <prvAddNewTaskToReadyList+0xc8>)
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4a15      	ldr	r2, [pc, #84]	; (8007234 <prvAddNewTaskToReadyList+0xcc>)
 80071e0:	441a      	add	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	3304      	adds	r3, #4
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f7fe fd19 	bl	8005c20 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071ee:	f7fe fef3 	bl	8005fd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071f2:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <prvAddNewTaskToReadyList+0xc0>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00e      	beq.n	8007218 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071fa:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <prvAddNewTaskToReadyList+0xbc>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	429a      	cmp	r2, r3
 8007206:	d207      	bcs.n	8007218 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007208:	4b0b      	ldr	r3, [pc, #44]	; (8007238 <prvAddNewTaskToReadyList+0xd0>)
 800720a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007218:	bf00      	nop
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	20004658 	.word	0x20004658
 8007224:	20004558 	.word	0x20004558
 8007228:	20004664 	.word	0x20004664
 800722c:	20004674 	.word	0x20004674
 8007230:	20004660 	.word	0x20004660
 8007234:	2000455c 	.word	0x2000455c
 8007238:	e000ed04 	.word	0xe000ed04

0800723c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d016      	beq.n	800727c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800724e:	4b13      	ldr	r3, [pc, #76]	; (800729c <vTaskDelay+0x60>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <vTaskDelay+0x2e>
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	60bb      	str	r3, [r7, #8]
 8007268:	e7fe      	b.n	8007268 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800726a:	f000 f861 	bl	8007330 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800726e:	2100      	movs	r1, #0
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 feb1 	bl	8007fd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007276:	f000 f869 	bl	800734c <xTaskResumeAll>
 800727a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d107      	bne.n	8007292 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007282:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <vTaskDelay+0x64>)
 8007284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007292:	bf00      	nop
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20004680 	.word	0x20004680
 80072a0:	e000ed04 	.word	0xe000ed04

080072a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80072aa:	4b1b      	ldr	r3, [pc, #108]	; (8007318 <vTaskStartScheduler+0x74>)
 80072ac:	9301      	str	r3, [sp, #4]
 80072ae:	2300      	movs	r3, #0
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	2300      	movs	r3, #0
 80072b4:	2280      	movs	r2, #128	; 0x80
 80072b6:	4919      	ldr	r1, [pc, #100]	; (800731c <vTaskStartScheduler+0x78>)
 80072b8:	4819      	ldr	r0, [pc, #100]	; (8007320 <vTaskStartScheduler+0x7c>)
 80072ba:	f7ff fe95 	bl	8006fe8 <xTaskCreate>
 80072be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d115      	bne.n	80072f2 <vTaskStartScheduler+0x4e>
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80072d8:	4b12      	ldr	r3, [pc, #72]	; (8007324 <vTaskStartScheduler+0x80>)
 80072da:	f04f 32ff 	mov.w	r2, #4294967295
 80072de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80072e0:	4b11      	ldr	r3, [pc, #68]	; (8007328 <vTaskStartScheduler+0x84>)
 80072e2:	2201      	movs	r2, #1
 80072e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80072e6:	4b11      	ldr	r3, [pc, #68]	; (800732c <vTaskStartScheduler+0x88>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072ec:	f7fe fda8 	bl	8005e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072f0:	e00d      	b.n	800730e <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f8:	d109      	bne.n	800730e <vTaskStartScheduler+0x6a>
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	e7fe      	b.n	800730c <vTaskStartScheduler+0x68>
}
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	2000467c 	.word	0x2000467c
 800731c:	0801080c 	.word	0x0801080c
 8007320:	08007a61 	.word	0x08007a61
 8007324:	20004678 	.word	0x20004678
 8007328:	20004664 	.word	0x20004664
 800732c:	2000465c 	.word	0x2000465c

08007330 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007334:	4b04      	ldr	r3, [pc, #16]	; (8007348 <vTaskSuspendAll+0x18>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3301      	adds	r3, #1
 800733a:	4a03      	ldr	r2, [pc, #12]	; (8007348 <vTaskSuspendAll+0x18>)
 800733c:	6013      	str	r3, [r2, #0]
}
 800733e:	bf00      	nop
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	20004680 	.word	0x20004680

0800734c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007352:	2300      	movs	r3, #0
 8007354:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007356:	2300      	movs	r3, #0
 8007358:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800735a:	4b41      	ldr	r3, [pc, #260]	; (8007460 <xTaskResumeAll+0x114>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d109      	bne.n	8007376 <xTaskResumeAll+0x2a>
 8007362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	603b      	str	r3, [r7, #0]
 8007374:	e7fe      	b.n	8007374 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007376:	f7fe fe01 	bl	8005f7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800737a:	4b39      	ldr	r3, [pc, #228]	; (8007460 <xTaskResumeAll+0x114>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3b01      	subs	r3, #1
 8007380:	4a37      	ldr	r2, [pc, #220]	; (8007460 <xTaskResumeAll+0x114>)
 8007382:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007384:	4b36      	ldr	r3, [pc, #216]	; (8007460 <xTaskResumeAll+0x114>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d161      	bne.n	8007450 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800738c:	4b35      	ldr	r3, [pc, #212]	; (8007464 <xTaskResumeAll+0x118>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d05d      	beq.n	8007450 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007394:	e02e      	b.n	80073f4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007396:	4b34      	ldr	r3, [pc, #208]	; (8007468 <xTaskResumeAll+0x11c>)
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3318      	adds	r3, #24
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fe fc99 	bl	8005cda <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3304      	adds	r3, #4
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7fe fc94 	bl	8005cda <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b6:	2201      	movs	r2, #1
 80073b8:	409a      	lsls	r2, r3
 80073ba:	4b2c      	ldr	r3, [pc, #176]	; (800746c <xTaskResumeAll+0x120>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4313      	orrs	r3, r2
 80073c0:	4a2a      	ldr	r2, [pc, #168]	; (800746c <xTaskResumeAll+0x120>)
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c8:	4613      	mov	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4a27      	ldr	r2, [pc, #156]	; (8007470 <xTaskResumeAll+0x124>)
 80073d2:	441a      	add	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3304      	adds	r3, #4
 80073d8:	4619      	mov	r1, r3
 80073da:	4610      	mov	r0, r2
 80073dc:	f7fe fc20 	bl	8005c20 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e4:	4b23      	ldr	r3, [pc, #140]	; (8007474 <xTaskResumeAll+0x128>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d302      	bcc.n	80073f4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80073ee:	4b22      	ldr	r3, [pc, #136]	; (8007478 <xTaskResumeAll+0x12c>)
 80073f0:	2201      	movs	r2, #1
 80073f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073f4:	4b1c      	ldr	r3, [pc, #112]	; (8007468 <xTaskResumeAll+0x11c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1cc      	bne.n	8007396 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007402:	f000 fbc1 	bl	8007b88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007406:	4b1d      	ldr	r3, [pc, #116]	; (800747c <xTaskResumeAll+0x130>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d010      	beq.n	8007434 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007412:	f000 f847 	bl	80074a4 <xTaskIncrementTick>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800741c:	4b16      	ldr	r3, [pc, #88]	; (8007478 <xTaskResumeAll+0x12c>)
 800741e:	2201      	movs	r2, #1
 8007420:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3b01      	subs	r3, #1
 8007426:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1f1      	bne.n	8007412 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800742e:	4b13      	ldr	r3, [pc, #76]	; (800747c <xTaskResumeAll+0x130>)
 8007430:	2200      	movs	r2, #0
 8007432:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007434:	4b10      	ldr	r3, [pc, #64]	; (8007478 <xTaskResumeAll+0x12c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d009      	beq.n	8007450 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800743c:	2301      	movs	r3, #1
 800743e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007440:	4b0f      	ldr	r3, [pc, #60]	; (8007480 <xTaskResumeAll+0x134>)
 8007442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007450:	f7fe fdc2 	bl	8005fd8 <vPortExitCritical>

	return xAlreadyYielded;
 8007454:	68bb      	ldr	r3, [r7, #8]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	20004680 	.word	0x20004680
 8007464:	20004658 	.word	0x20004658
 8007468:	20004618 	.word	0x20004618
 800746c:	20004660 	.word	0x20004660
 8007470:	2000455c 	.word	0x2000455c
 8007474:	20004558 	.word	0x20004558
 8007478:	2000466c 	.word	0x2000466c
 800747c:	20004668 	.word	0x20004668
 8007480:	e000ed04 	.word	0xe000ed04

08007484 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800748a:	4b05      	ldr	r3, [pc, #20]	; (80074a0 <xTaskGetTickCount+0x1c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007490:	687b      	ldr	r3, [r7, #4]
}
 8007492:	4618      	mov	r0, r3
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	2000465c 	.word	0x2000465c

080074a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074aa:	2300      	movs	r3, #0
 80074ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074ae:	4b50      	ldr	r3, [pc, #320]	; (80075f0 <xTaskIncrementTick+0x14c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f040 808c 	bne.w	80075d0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074b8:	4b4e      	ldr	r3, [pc, #312]	; (80075f4 <xTaskIncrementTick+0x150>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3301      	adds	r3, #1
 80074be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074c0:	4a4c      	ldr	r2, [pc, #304]	; (80075f4 <xTaskIncrementTick+0x150>)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d11f      	bne.n	800750c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80074cc:	4b4a      	ldr	r3, [pc, #296]	; (80075f8 <xTaskIncrementTick+0x154>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <xTaskIncrementTick+0x46>
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	e7fe      	b.n	80074e8 <xTaskIncrementTick+0x44>
 80074ea:	4b43      	ldr	r3, [pc, #268]	; (80075f8 <xTaskIncrementTick+0x154>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	4b42      	ldr	r3, [pc, #264]	; (80075fc <xTaskIncrementTick+0x158>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a40      	ldr	r2, [pc, #256]	; (80075f8 <xTaskIncrementTick+0x154>)
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	4a40      	ldr	r2, [pc, #256]	; (80075fc <xTaskIncrementTick+0x158>)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	4b40      	ldr	r3, [pc, #256]	; (8007600 <xTaskIncrementTick+0x15c>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3301      	adds	r3, #1
 8007504:	4a3e      	ldr	r2, [pc, #248]	; (8007600 <xTaskIncrementTick+0x15c>)
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	f000 fb3e 	bl	8007b88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800750c:	4b3d      	ldr	r3, [pc, #244]	; (8007604 <xTaskIncrementTick+0x160>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	429a      	cmp	r2, r3
 8007514:	d34d      	bcc.n	80075b2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007516:	4b38      	ldr	r3, [pc, #224]	; (80075f8 <xTaskIncrementTick+0x154>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d101      	bne.n	8007524 <xTaskIncrementTick+0x80>
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <xTaskIncrementTick+0x82>
 8007524:	2300      	movs	r3, #0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d004      	beq.n	8007534 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800752a:	4b36      	ldr	r3, [pc, #216]	; (8007604 <xTaskIncrementTick+0x160>)
 800752c:	f04f 32ff 	mov.w	r2, #4294967295
 8007530:	601a      	str	r2, [r3, #0]
					break;
 8007532:	e03e      	b.n	80075b2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007534:	4b30      	ldr	r3, [pc, #192]	; (80075f8 <xTaskIncrementTick+0x154>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	429a      	cmp	r2, r3
 800754a:	d203      	bcs.n	8007554 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800754c:	4a2d      	ldr	r2, [pc, #180]	; (8007604 <xTaskIncrementTick+0x160>)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6013      	str	r3, [r2, #0]
						break;
 8007552:	e02e      	b.n	80075b2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	3304      	adds	r3, #4
 8007558:	4618      	mov	r0, r3
 800755a:	f7fe fbbe 	bl	8005cda <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	3318      	adds	r3, #24
 800756a:	4618      	mov	r0, r3
 800756c:	f7fe fbb5 	bl	8005cda <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007574:	2201      	movs	r2, #1
 8007576:	409a      	lsls	r2, r3
 8007578:	4b23      	ldr	r3, [pc, #140]	; (8007608 <xTaskIncrementTick+0x164>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4313      	orrs	r3, r2
 800757e:	4a22      	ldr	r2, [pc, #136]	; (8007608 <xTaskIncrementTick+0x164>)
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007586:	4613      	mov	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4413      	add	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4a1f      	ldr	r2, [pc, #124]	; (800760c <xTaskIncrementTick+0x168>)
 8007590:	441a      	add	r2, r3
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	3304      	adds	r3, #4
 8007596:	4619      	mov	r1, r3
 8007598:	4610      	mov	r0, r2
 800759a:	f7fe fb41 	bl	8005c20 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a2:	4b1b      	ldr	r3, [pc, #108]	; (8007610 <xTaskIncrementTick+0x16c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d3b4      	bcc.n	8007516 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80075ac:	2301      	movs	r3, #1
 80075ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075b0:	e7b1      	b.n	8007516 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075b2:	4b17      	ldr	r3, [pc, #92]	; (8007610 <xTaskIncrementTick+0x16c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b8:	4914      	ldr	r1, [pc, #80]	; (800760c <xTaskIncrementTick+0x168>)
 80075ba:	4613      	mov	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	440b      	add	r3, r1
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d907      	bls.n	80075da <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80075ca:	2301      	movs	r3, #1
 80075cc:	617b      	str	r3, [r7, #20]
 80075ce:	e004      	b.n	80075da <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80075d0:	4b10      	ldr	r3, [pc, #64]	; (8007614 <xTaskIncrementTick+0x170>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3301      	adds	r3, #1
 80075d6:	4a0f      	ldr	r2, [pc, #60]	; (8007614 <xTaskIncrementTick+0x170>)
 80075d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80075da:	4b0f      	ldr	r3, [pc, #60]	; (8007618 <xTaskIncrementTick+0x174>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80075e2:	2301      	movs	r3, #1
 80075e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80075e6:	697b      	ldr	r3, [r7, #20]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3718      	adds	r7, #24
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	20004680 	.word	0x20004680
 80075f4:	2000465c 	.word	0x2000465c
 80075f8:	20004610 	.word	0x20004610
 80075fc:	20004614 	.word	0x20004614
 8007600:	20004670 	.word	0x20004670
 8007604:	20004678 	.word	0x20004678
 8007608:	20004660 	.word	0x20004660
 800760c:	2000455c 	.word	0x2000455c
 8007610:	20004558 	.word	0x20004558
 8007614:	20004668 	.word	0x20004668
 8007618:	2000466c 	.word	0x2000466c

0800761c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007622:	4b26      	ldr	r3, [pc, #152]	; (80076bc <vTaskSwitchContext+0xa0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800762a:	4b25      	ldr	r3, [pc, #148]	; (80076c0 <vTaskSwitchContext+0xa4>)
 800762c:	2201      	movs	r2, #1
 800762e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007630:	e03e      	b.n	80076b0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007632:	4b23      	ldr	r3, [pc, #140]	; (80076c0 <vTaskSwitchContext+0xa4>)
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007638:	4b22      	ldr	r3, [pc, #136]	; (80076c4 <vTaskSwitchContext+0xa8>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	fab3 f383 	clz	r3, r3
 8007644:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007646:	7afb      	ldrb	r3, [r7, #11]
 8007648:	f1c3 031f 	rsb	r3, r3, #31
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	491e      	ldr	r1, [pc, #120]	; (80076c8 <vTaskSwitchContext+0xac>)
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	440b      	add	r3, r1
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d109      	bne.n	8007676 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	607b      	str	r3, [r7, #4]
 8007674:	e7fe      	b.n	8007674 <vTaskSwitchContext+0x58>
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	4613      	mov	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4a11      	ldr	r2, [pc, #68]	; (80076c8 <vTaskSwitchContext+0xac>)
 8007682:	4413      	add	r3, r2
 8007684:	613b      	str	r3, [r7, #16]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	605a      	str	r2, [r3, #4]
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	3308      	adds	r3, #8
 8007698:	429a      	cmp	r2, r3
 800769a:	d104      	bne.n	80076a6 <vTaskSwitchContext+0x8a>
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	605a      	str	r2, [r3, #4]
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	4a07      	ldr	r2, [pc, #28]	; (80076cc <vTaskSwitchContext+0xb0>)
 80076ae:	6013      	str	r3, [r2, #0]
}
 80076b0:	bf00      	nop
 80076b2:	371c      	adds	r7, #28
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	20004680 	.word	0x20004680
 80076c0:	2000466c 	.word	0x2000466c
 80076c4:	20004660 	.word	0x20004660
 80076c8:	2000455c 	.word	0x2000455c
 80076cc:	20004558 	.word	0x20004558

080076d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d109      	bne.n	80076f4 <vTaskPlaceOnEventList+0x24>
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	60fb      	str	r3, [r7, #12]
 80076f2:	e7fe      	b.n	80076f2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076f4:	4b07      	ldr	r3, [pc, #28]	; (8007714 <vTaskPlaceOnEventList+0x44>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3318      	adds	r3, #24
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7fe fab3 	bl	8005c68 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007702:	2101      	movs	r1, #1
 8007704:	6838      	ldr	r0, [r7, #0]
 8007706:	f000 fc67 	bl	8007fd8 <prvAddCurrentTaskToDelayedList>
}
 800770a:	bf00      	nop
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	20004558 	.word	0x20004558

08007718 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <vTaskPlaceOnUnorderedEventList+0x26>
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	e7fe      	b.n	800773c <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800773e:	4b11      	ldr	r3, [pc, #68]	; (8007784 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d109      	bne.n	800775a <vTaskPlaceOnUnorderedEventList+0x42>
 8007746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774a:	f383 8811 	msr	BASEPRI, r3
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f3bf 8f4f 	dsb	sy
 8007756:	613b      	str	r3, [r7, #16]
 8007758:	e7fe      	b.n	8007758 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800775a:	4b0b      	ldr	r3, [pc, #44]	; (8007788 <vTaskPlaceOnUnorderedEventList+0x70>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007764:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007766:	4b08      	ldr	r3, [pc, #32]	; (8007788 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3318      	adds	r3, #24
 800776c:	4619      	mov	r1, r3
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f7fe fa56 	bl	8005c20 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007774:	2101      	movs	r1, #1
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fc2e 	bl	8007fd8 <prvAddCurrentTaskToDelayedList>
}
 800777c:	bf00      	nop
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	20004680 	.word	0x20004680
 8007788:	20004558 	.word	0x20004558

0800778c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d109      	bne.n	80077b6 <xTaskRemoveFromEventList+0x2a>
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	e7fe      	b.n	80077b4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	3318      	adds	r3, #24
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe fa8d 	bl	8005cda <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077c0:	4b1d      	ldr	r3, [pc, #116]	; (8007838 <xTaskRemoveFromEventList+0xac>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d11c      	bne.n	8007802 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	3304      	adds	r3, #4
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7fe fa84 	bl	8005cda <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d6:	2201      	movs	r2, #1
 80077d8:	409a      	lsls	r2, r3
 80077da:	4b18      	ldr	r3, [pc, #96]	; (800783c <xTaskRemoveFromEventList+0xb0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4313      	orrs	r3, r2
 80077e0:	4a16      	ldr	r2, [pc, #88]	; (800783c <xTaskRemoveFromEventList+0xb0>)
 80077e2:	6013      	str	r3, [r2, #0]
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e8:	4613      	mov	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4a13      	ldr	r2, [pc, #76]	; (8007840 <xTaskRemoveFromEventList+0xb4>)
 80077f2:	441a      	add	r2, r3
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	3304      	adds	r3, #4
 80077f8:	4619      	mov	r1, r3
 80077fa:	4610      	mov	r0, r2
 80077fc:	f7fe fa10 	bl	8005c20 <vListInsertEnd>
 8007800:	e005      	b.n	800780e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	3318      	adds	r3, #24
 8007806:	4619      	mov	r1, r3
 8007808:	480e      	ldr	r0, [pc, #56]	; (8007844 <xTaskRemoveFromEventList+0xb8>)
 800780a:	f7fe fa09 	bl	8005c20 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007812:	4b0d      	ldr	r3, [pc, #52]	; (8007848 <xTaskRemoveFromEventList+0xbc>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	429a      	cmp	r2, r3
 800781a:	d905      	bls.n	8007828 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800781c:	2301      	movs	r3, #1
 800781e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007820:	4b0a      	ldr	r3, [pc, #40]	; (800784c <xTaskRemoveFromEventList+0xc0>)
 8007822:	2201      	movs	r2, #1
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	e001      	b.n	800782c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007828:	2300      	movs	r3, #0
 800782a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800782c:	697b      	ldr	r3, [r7, #20]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20004680 	.word	0x20004680
 800783c:	20004660 	.word	0x20004660
 8007840:	2000455c 	.word	0x2000455c
 8007844:	20004618 	.word	0x20004618
 8007848:	20004558 	.word	0x20004558
 800784c:	2000466c 	.word	0x2000466c

08007850 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800785a:	4b28      	ldr	r3, [pc, #160]	; (80078fc <vTaskRemoveFromUnorderedEventList+0xac>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d109      	bne.n	8007876 <vTaskRemoveFromUnorderedEventList+0x26>
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	613b      	str	r3, [r7, #16]
 8007874:	e7fe      	b.n	8007874 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d109      	bne.n	80078a0 <vTaskRemoveFromUnorderedEventList+0x50>
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	e7fe      	b.n	800789e <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7fe fa1a 	bl	8005cda <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	3304      	adds	r3, #4
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fa15 	bl	8005cda <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	2201      	movs	r2, #1
 80078b6:	409a      	lsls	r2, r3
 80078b8:	4b11      	ldr	r3, [pc, #68]	; (8007900 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4313      	orrs	r3, r2
 80078be:	4a10      	ldr	r2, [pc, #64]	; (8007900 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4a0d      	ldr	r2, [pc, #52]	; (8007904 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80078d0:	441a      	add	r2, r3
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4619      	mov	r1, r3
 80078d8:	4610      	mov	r0, r2
 80078da:	f7fe f9a1 	bl	8005c20 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e2:	4b09      	ldr	r3, [pc, #36]	; (8007908 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d902      	bls.n	80078f2 <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80078ec:	4b07      	ldr	r3, [pc, #28]	; (800790c <vTaskRemoveFromUnorderedEventList+0xbc>)
 80078ee:	2201      	movs	r2, #1
 80078f0:	601a      	str	r2, [r3, #0]
	}
}
 80078f2:	bf00      	nop
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20004680 	.word	0x20004680
 8007900:	20004660 	.word	0x20004660
 8007904:	2000455c 	.word	0x2000455c
 8007908:	20004558 	.word	0x20004558
 800790c:	2000466c 	.word	0x2000466c

08007910 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d109      	bne.n	8007932 <vTaskSetTimeOutState+0x22>
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	e7fe      	b.n	8007930 <vTaskSetTimeOutState+0x20>
	taskENTER_CRITICAL();
 8007932:	f7fe fb23 	bl	8005f7c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007936:	4b07      	ldr	r3, [pc, #28]	; (8007954 <vTaskSetTimeOutState+0x44>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800793e:	4b06      	ldr	r3, [pc, #24]	; (8007958 <vTaskSetTimeOutState+0x48>)
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007946:	f7fe fb47 	bl	8005fd8 <vPortExitCritical>
}
 800794a:	bf00      	nop
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20004670 	.word	0x20004670
 8007958:	2000465c 	.word	0x2000465c

0800795c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007964:	4b06      	ldr	r3, [pc, #24]	; (8007980 <vTaskInternalSetTimeOutState+0x24>)
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800796c:	4b05      	ldr	r3, [pc, #20]	; (8007984 <vTaskInternalSetTimeOutState+0x28>)
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	605a      	str	r2, [r3, #4]
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	20004670 	.word	0x20004670
 8007984:	2000465c 	.word	0x2000465c

08007988 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <xTaskCheckForTimeOut+0x24>
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	e7fe      	b.n	80079aa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d109      	bne.n	80079c6 <xTaskCheckForTimeOut+0x3e>
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	e7fe      	b.n	80079c4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80079c6:	f7fe fad9 	bl	8005f7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079ca:	4b1d      	ldr	r3, [pc, #116]	; (8007a40 <xTaskCheckForTimeOut+0xb8>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e2:	d102      	bne.n	80079ea <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079e4:	2300      	movs	r3, #0
 80079e6:	61fb      	str	r3, [r7, #28]
 80079e8:	e023      	b.n	8007a32 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	4b15      	ldr	r3, [pc, #84]	; (8007a44 <xTaskCheckForTimeOut+0xbc>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d007      	beq.n	8007a06 <xTaskCheckForTimeOut+0x7e>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d802      	bhi.n	8007a06 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a00:	2301      	movs	r3, #1
 8007a02:	61fb      	str	r3, [r7, #28]
 8007a04:	e015      	b.n	8007a32 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d90b      	bls.n	8007a28 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	1ad2      	subs	r2, r2, r3
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff ff9d 	bl	800795c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a22:	2300      	movs	r3, #0
 8007a24:	61fb      	str	r3, [r7, #28]
 8007a26:	e004      	b.n	8007a32 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a32:	f7fe fad1 	bl	8005fd8 <vPortExitCritical>

	return xReturn;
 8007a36:	69fb      	ldr	r3, [r7, #28]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3720      	adds	r7, #32
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	2000465c 	.word	0x2000465c
 8007a44:	20004670 	.word	0x20004670

08007a48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a4c:	4b03      	ldr	r3, [pc, #12]	; (8007a5c <vTaskMissedYield+0x14>)
 8007a4e:	2201      	movs	r2, #1
 8007a50:	601a      	str	r2, [r3, #0]
}
 8007a52:	bf00      	nop
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	2000466c 	.word	0x2000466c

08007a60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a68:	f000 f852 	bl	8007b10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a6c:	4b06      	ldr	r3, [pc, #24]	; (8007a88 <prvIdleTask+0x28>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d9f9      	bls.n	8007a68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a74:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <prvIdleTask+0x2c>)
 8007a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a84:	e7f0      	b.n	8007a68 <prvIdleTask+0x8>
 8007a86:	bf00      	nop
 8007a88:	2000455c 	.word	0x2000455c
 8007a8c:	e000ed04 	.word	0xe000ed04

08007a90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a96:	2300      	movs	r3, #0
 8007a98:	607b      	str	r3, [r7, #4]
 8007a9a:	e00c      	b.n	8007ab6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4a12      	ldr	r2, [pc, #72]	; (8007af0 <prvInitialiseTaskLists+0x60>)
 8007aa8:	4413      	add	r3, r2
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe f88b 	bl	8005bc6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	607b      	str	r3, [r7, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b06      	cmp	r3, #6
 8007aba:	d9ef      	bls.n	8007a9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007abc:	480d      	ldr	r0, [pc, #52]	; (8007af4 <prvInitialiseTaskLists+0x64>)
 8007abe:	f7fe f882 	bl	8005bc6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ac2:	480d      	ldr	r0, [pc, #52]	; (8007af8 <prvInitialiseTaskLists+0x68>)
 8007ac4:	f7fe f87f 	bl	8005bc6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ac8:	480c      	ldr	r0, [pc, #48]	; (8007afc <prvInitialiseTaskLists+0x6c>)
 8007aca:	f7fe f87c 	bl	8005bc6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ace:	480c      	ldr	r0, [pc, #48]	; (8007b00 <prvInitialiseTaskLists+0x70>)
 8007ad0:	f7fe f879 	bl	8005bc6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ad4:	480b      	ldr	r0, [pc, #44]	; (8007b04 <prvInitialiseTaskLists+0x74>)
 8007ad6:	f7fe f876 	bl	8005bc6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ada:	4b0b      	ldr	r3, [pc, #44]	; (8007b08 <prvInitialiseTaskLists+0x78>)
 8007adc:	4a05      	ldr	r2, [pc, #20]	; (8007af4 <prvInitialiseTaskLists+0x64>)
 8007ade:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ae0:	4b0a      	ldr	r3, [pc, #40]	; (8007b0c <prvInitialiseTaskLists+0x7c>)
 8007ae2:	4a05      	ldr	r2, [pc, #20]	; (8007af8 <prvInitialiseTaskLists+0x68>)
 8007ae4:	601a      	str	r2, [r3, #0]
}
 8007ae6:	bf00      	nop
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	2000455c 	.word	0x2000455c
 8007af4:	200045e8 	.word	0x200045e8
 8007af8:	200045fc 	.word	0x200045fc
 8007afc:	20004618 	.word	0x20004618
 8007b00:	2000462c 	.word	0x2000462c
 8007b04:	20004644 	.word	0x20004644
 8007b08:	20004610 	.word	0x20004610
 8007b0c:	20004614 	.word	0x20004614

08007b10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b16:	e019      	b.n	8007b4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b18:	f7fe fa30 	bl	8005f7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007b1c:	4b0f      	ldr	r3, [pc, #60]	; (8007b5c <prvCheckTasksWaitingTermination+0x4c>)
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3304      	adds	r3, #4
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fe f8d6 	bl	8005cda <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b2e:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <prvCheckTasksWaitingTermination+0x50>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3b01      	subs	r3, #1
 8007b34:	4a0a      	ldr	r2, [pc, #40]	; (8007b60 <prvCheckTasksWaitingTermination+0x50>)
 8007b36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b38:	4b0a      	ldr	r3, [pc, #40]	; (8007b64 <prvCheckTasksWaitingTermination+0x54>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	4a09      	ldr	r2, [pc, #36]	; (8007b64 <prvCheckTasksWaitingTermination+0x54>)
 8007b40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b42:	f7fe fa49 	bl	8005fd8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f80e 	bl	8007b68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b4c:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <prvCheckTasksWaitingTermination+0x54>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e1      	bne.n	8007b18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	2000462c 	.word	0x2000462c
 8007b60:	20004658 	.word	0x20004658
 8007b64:	20004640 	.word	0x20004640

08007b68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fe fb9f 	bl	80062b8 <vPortFree>
			vPortFree( pxTCB );
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7fe fb9c 	bl	80062b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b8e:	4b0f      	ldr	r3, [pc, #60]	; (8007bcc <prvResetNextTaskUnblockTime+0x44>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <prvResetNextTaskUnblockTime+0x14>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e000      	b.n	8007b9e <prvResetNextTaskUnblockTime+0x16>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d004      	beq.n	8007bac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ba2:	4b0b      	ldr	r3, [pc, #44]	; (8007bd0 <prvResetNextTaskUnblockTime+0x48>)
 8007ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007baa:	e008      	b.n	8007bbe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007bac:	4b07      	ldr	r3, [pc, #28]	; (8007bcc <prvResetNextTaskUnblockTime+0x44>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	4a05      	ldr	r2, [pc, #20]	; (8007bd0 <prvResetNextTaskUnblockTime+0x48>)
 8007bbc:	6013      	str	r3, [r2, #0]
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	20004610 	.word	0x20004610
 8007bd0:	20004678 	.word	0x20004678

08007bd4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007bda:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <xTaskGetCurrentTaskHandle+0x1c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007be0:	687b      	ldr	r3, [r7, #4]
	}
 8007be2:	4618      	mov	r0, r3
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	20004558 	.word	0x20004558

08007bf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bfa:	4b0b      	ldr	r3, [pc, #44]	; (8007c28 <xTaskGetSchedulerState+0x34>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d102      	bne.n	8007c08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c02:	2301      	movs	r3, #1
 8007c04:	607b      	str	r3, [r7, #4]
 8007c06:	e008      	b.n	8007c1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c08:	4b08      	ldr	r3, [pc, #32]	; (8007c2c <xTaskGetSchedulerState+0x38>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d102      	bne.n	8007c16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c10:	2302      	movs	r3, #2
 8007c12:	607b      	str	r3, [r7, #4]
 8007c14:	e001      	b.n	8007c1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c16:	2300      	movs	r3, #0
 8007c18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c1a:	687b      	ldr	r3, [r7, #4]
	}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	20004664 	.word	0x20004664
 8007c2c:	20004680 	.word	0x20004680

08007c30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d06e      	beq.n	8007d24 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c4a:	4b39      	ldr	r3, [pc, #228]	; (8007d30 <xTaskPriorityInherit+0x100>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d25e      	bcs.n	8007d12 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	db06      	blt.n	8007c6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c5c:	4b34      	ldr	r3, [pc, #208]	; (8007d30 <xTaskPriorityInherit+0x100>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c62:	f1c3 0207 	rsb	r2, r3, #7
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	6959      	ldr	r1, [r3, #20]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4a2e      	ldr	r2, [pc, #184]	; (8007d34 <xTaskPriorityInherit+0x104>)
 8007c7c:	4413      	add	r3, r2
 8007c7e:	4299      	cmp	r1, r3
 8007c80:	d101      	bne.n	8007c86 <xTaskPriorityInherit+0x56>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <xTaskPriorityInherit+0x58>
 8007c86:	2300      	movs	r3, #0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d03a      	beq.n	8007d02 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	3304      	adds	r3, #4
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fe f822 	bl	8005cda <uxListRemove>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d115      	bne.n	8007cc8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca0:	4924      	ldr	r1, [pc, #144]	; (8007d34 <xTaskPriorityInherit+0x104>)
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	440b      	add	r3, r1
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10a      	bne.n	8007cc8 <xTaskPriorityInherit+0x98>
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cbc:	43da      	mvns	r2, r3
 8007cbe:	4b1e      	ldr	r3, [pc, #120]	; (8007d38 <xTaskPriorityInherit+0x108>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	4a1c      	ldr	r2, [pc, #112]	; (8007d38 <xTaskPriorityInherit+0x108>)
 8007cc6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007cc8:	4b19      	ldr	r3, [pc, #100]	; (8007d30 <xTaskPriorityInherit+0x100>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	409a      	lsls	r2, r3
 8007cda:	4b17      	ldr	r3, [pc, #92]	; (8007d38 <xTaskPriorityInherit+0x108>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	4a15      	ldr	r2, [pc, #84]	; (8007d38 <xTaskPriorityInherit+0x108>)
 8007ce2:	6013      	str	r3, [r2, #0]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce8:	4613      	mov	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4a10      	ldr	r2, [pc, #64]	; (8007d34 <xTaskPriorityInherit+0x104>)
 8007cf2:	441a      	add	r2, r3
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	f7fd ff90 	bl	8005c20 <vListInsertEnd>
 8007d00:	e004      	b.n	8007d0c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d02:	4b0b      	ldr	r3, [pc, #44]	; (8007d30 <xTaskPriorityInherit+0x100>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	e008      	b.n	8007d24 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d16:	4b06      	ldr	r3, [pc, #24]	; (8007d30 <xTaskPriorityInherit+0x100>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d201      	bcs.n	8007d24 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d20:	2301      	movs	r3, #1
 8007d22:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d24:	68fb      	ldr	r3, [r7, #12]
	}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20004558 	.word	0x20004558
 8007d34:	2000455c 	.word	0x2000455c
 8007d38:	20004660 	.word	0x20004660

08007d3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d06c      	beq.n	8007e2c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d52:	4b39      	ldr	r3, [pc, #228]	; (8007e38 <xTaskPriorityDisinherit+0xfc>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d009      	beq.n	8007d70 <xTaskPriorityDisinherit+0x34>
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	e7fe      	b.n	8007d6e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d109      	bne.n	8007d8c <xTaskPriorityDisinherit+0x50>
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	60bb      	str	r3, [r7, #8]
 8007d8a:	e7fe      	b.n	8007d8a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d90:	1e5a      	subs	r2, r3, #1
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d044      	beq.n	8007e2c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d140      	bne.n	8007e2c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	3304      	adds	r3, #4
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fd ff93 	bl	8005cda <uxListRemove>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d115      	bne.n	8007de6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dbe:	491f      	ldr	r1, [pc, #124]	; (8007e3c <xTaskPriorityDisinherit+0x100>)
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	440b      	add	r3, r1
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10a      	bne.n	8007de6 <xTaskPriorityDisinherit+0xaa>
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dda:	43da      	mvns	r2, r3
 8007ddc:	4b18      	ldr	r3, [pc, #96]	; (8007e40 <xTaskPriorityDisinherit+0x104>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4013      	ands	r3, r2
 8007de2:	4a17      	ldr	r2, [pc, #92]	; (8007e40 <xTaskPriorityDisinherit+0x104>)
 8007de4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	f1c3 0207 	rsb	r2, r3, #7
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfe:	2201      	movs	r2, #1
 8007e00:	409a      	lsls	r2, r3
 8007e02:	4b0f      	ldr	r3, [pc, #60]	; (8007e40 <xTaskPriorityDisinherit+0x104>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	4a0d      	ldr	r2, [pc, #52]	; (8007e40 <xTaskPriorityDisinherit+0x104>)
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4a08      	ldr	r2, [pc, #32]	; (8007e3c <xTaskPriorityDisinherit+0x100>)
 8007e1a:	441a      	add	r2, r3
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f7fd fefc 	bl	8005c20 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e2c:	697b      	ldr	r3, [r7, #20]
	}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3718      	adds	r7, #24
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20004558 	.word	0x20004558
 8007e3c:	2000455c 	.word	0x2000455c
 8007e40:	20004660 	.word	0x20004660

08007e44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b088      	sub	sp, #32
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007e52:	2301      	movs	r3, #1
 8007e54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 8086 	beq.w	8007f6a <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d109      	bne.n	8007e7a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8007e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	e7fe      	b.n	8007e78 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d202      	bcs.n	8007e8a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	61fb      	str	r3, [r7, #28]
 8007e88:	e002      	b.n	8007e90 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d067      	beq.n	8007f6a <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d162      	bne.n	8007f6a <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007ea4:	4b33      	ldr	r3, [pc, #204]	; (8007f74 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d109      	bne.n	8007ec2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	60bb      	str	r3, [r7, #8]
 8007ec0:	e7fe      	b.n	8007ec0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	69fa      	ldr	r2, [r7, #28]
 8007ecc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	db04      	blt.n	8007ee0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	f1c3 0207 	rsb	r2, r3, #7
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	6959      	ldr	r1, [r3, #20]
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4a22      	ldr	r2, [pc, #136]	; (8007f78 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007ef0:	4413      	add	r3, r2
 8007ef2:	4299      	cmp	r1, r3
 8007ef4:	d101      	bne.n	8007efa <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e000      	b.n	8007efc <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007efa:	2300      	movs	r3, #0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d034      	beq.n	8007f6a <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	3304      	adds	r3, #4
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fd fee8 	bl	8005cda <uxListRemove>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d115      	bne.n	8007f3c <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f14:	4918      	ldr	r1, [pc, #96]	; (8007f78 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	440b      	add	r3, r1
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10a      	bne.n	8007f3c <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f30:	43da      	mvns	r2, r3
 8007f32:	4b12      	ldr	r3, [pc, #72]	; (8007f7c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4013      	ands	r3, r2
 8007f38:	4a10      	ldr	r2, [pc, #64]	; (8007f7c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007f3a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f40:	2201      	movs	r2, #1
 8007f42:	409a      	lsls	r2, r3
 8007f44:	4b0d      	ldr	r3, [pc, #52]	; (8007f7c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	4a0c      	ldr	r2, [pc, #48]	; (8007f7c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4a07      	ldr	r2, [pc, #28]	; (8007f78 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007f5c:	441a      	add	r2, r3
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	3304      	adds	r3, #4
 8007f62:	4619      	mov	r1, r3
 8007f64:	4610      	mov	r0, r2
 8007f66:	f7fd fe5b 	bl	8005c20 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f6a:	bf00      	nop
 8007f6c:	3720      	adds	r7, #32
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20004558 	.word	0x20004558
 8007f78:	2000455c 	.word	0x2000455c
 8007f7c:	20004660 	.word	0x20004660

08007f80 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007f86:	4b09      	ldr	r3, [pc, #36]	; (8007fac <uxTaskResetEventItemValue+0x2c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f8e:	4b07      	ldr	r3, [pc, #28]	; (8007fac <uxTaskResetEventItemValue+0x2c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a06      	ldr	r2, [pc, #24]	; (8007fac <uxTaskResetEventItemValue+0x2c>)
 8007f94:	6812      	ldr	r2, [r2, #0]
 8007f96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007f98:	f1c2 0207 	rsb	r2, r2, #7
 8007f9c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007f9e:	687b      	ldr	r3, [r7, #4]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	20004558 	.word	0x20004558

08007fb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007fb0:	b480      	push	{r7}
 8007fb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007fb4:	4b07      	ldr	r3, [pc, #28]	; (8007fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d004      	beq.n	8007fc6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007fbc:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fc2:	3201      	adds	r2, #1
 8007fc4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007fc6:	4b03      	ldr	r3, [pc, #12]	; (8007fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
	}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	20004558 	.word	0x20004558

08007fd8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fe2:	4b29      	ldr	r3, [pc, #164]	; (8008088 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fe8:	4b28      	ldr	r3, [pc, #160]	; (800808c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3304      	adds	r3, #4
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fd fe73 	bl	8005cda <uxListRemove>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10b      	bne.n	8008012 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007ffa:	4b24      	ldr	r3, [pc, #144]	; (800808c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008000:	2201      	movs	r2, #1
 8008002:	fa02 f303 	lsl.w	r3, r2, r3
 8008006:	43da      	mvns	r2, r3
 8008008:	4b21      	ldr	r3, [pc, #132]	; (8008090 <prvAddCurrentTaskToDelayedList+0xb8>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4013      	ands	r3, r2
 800800e:	4a20      	ldr	r2, [pc, #128]	; (8008090 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008010:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008018:	d10a      	bne.n	8008030 <prvAddCurrentTaskToDelayedList+0x58>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d007      	beq.n	8008030 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008020:	4b1a      	ldr	r3, [pc, #104]	; (800808c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3304      	adds	r3, #4
 8008026:	4619      	mov	r1, r3
 8008028:	481a      	ldr	r0, [pc, #104]	; (8008094 <prvAddCurrentTaskToDelayedList+0xbc>)
 800802a:	f7fd fdf9 	bl	8005c20 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800802e:	e026      	b.n	800807e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4413      	add	r3, r2
 8008036:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008038:	4b14      	ldr	r3, [pc, #80]	; (800808c <prvAddCurrentTaskToDelayedList+0xb4>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	429a      	cmp	r2, r3
 8008046:	d209      	bcs.n	800805c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008048:	4b13      	ldr	r3, [pc, #76]	; (8008098 <prvAddCurrentTaskToDelayedList+0xc0>)
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	4b0f      	ldr	r3, [pc, #60]	; (800808c <prvAddCurrentTaskToDelayedList+0xb4>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3304      	adds	r3, #4
 8008052:	4619      	mov	r1, r3
 8008054:	4610      	mov	r0, r2
 8008056:	f7fd fe07 	bl	8005c68 <vListInsert>
}
 800805a:	e010      	b.n	800807e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800805c:	4b0f      	ldr	r3, [pc, #60]	; (800809c <prvAddCurrentTaskToDelayedList+0xc4>)
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	4b0a      	ldr	r3, [pc, #40]	; (800808c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3304      	adds	r3, #4
 8008066:	4619      	mov	r1, r3
 8008068:	4610      	mov	r0, r2
 800806a:	f7fd fdfd 	bl	8005c68 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800806e:	4b0c      	ldr	r3, [pc, #48]	; (80080a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	429a      	cmp	r2, r3
 8008076:	d202      	bcs.n	800807e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008078:	4a09      	ldr	r2, [pc, #36]	; (80080a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	6013      	str	r3, [r2, #0]
}
 800807e:	bf00      	nop
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	2000465c 	.word	0x2000465c
 800808c:	20004558 	.word	0x20004558
 8008090:	20004660 	.word	0x20004660
 8008094:	20004644 	.word	0x20004644
 8008098:	20004614 	.word	0x20004614
 800809c:	20004610 	.word	0x20004610
 80080a0:	20004678 	.word	0x20004678

080080a4 <eARPProcessPacket>:
};

/*-----------------------------------------------------------*/

eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
eFrameProcessingResult_t eReturn = eReleaseBuffer;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73fb      	strb	r3, [r7, #15]
ARPHeader_t *pxARPHeader;

	pxARPHeader = &( pxARPFrame->xARPHeader );
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	330e      	adds	r3, #14
 80080b4:	60bb      	str	r3, [r7, #8]

	traceARP_PACKET_RECEIVED();

	/* Don't do anything if the local IP address is zero because
	that means a DHCP request has not completed. */
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 80080b6:	4b39      	ldr	r3, [pc, #228]	; (800819c <eARPProcessPacket+0xf8>)
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d068      	beq.n	8008190 <eARPProcessPacket+0xec>
	{
		switch( pxARPHeader->usOperation )
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	88db      	ldrh	r3, [r3, #6]
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c8:	d003      	beq.n	80080d2 <eARPProcessPacket+0x2e>
 80080ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ce:	d053      	beq.n	8008178 <eARPProcessPacket+0xd4>
				#endif /* ipconfigARP_USE_CLASH_DETECTION */
				break;

			default :
				/* Invalid. */
				break;
 80080d0:	e05e      	b.n	8008190 <eARPProcessPacket+0xec>
				if( pxARPHeader->ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	699a      	ldr	r2, [r3, #24]
 80080d6:	4b31      	ldr	r3, [pc, #196]	; (800819c <eARPProcessPacket+0xf8>)
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d157      	bne.n	800818e <eARPProcessPacket+0xea>
					vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), pxARPHeader->ulSenderProtocolAddress );
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f103 0208 	add.w	r2, r3, #8
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80080ea:	4619      	mov	r1, r3
 80080ec:	4610      	mov	r0, r2
 80080ee:	f000 f859 	bl	80081a4 <vARPRefreshCacheEntry>
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2200      	movs	r2, #0
 80080f6:	719a      	strb	r2, [r3, #6]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f042 0202 	orr.w	r2, r2, #2
 80080fe:	71da      	strb	r2, [r3, #7]
					if( pxARPHeader->ulTargetProtocolAddress == pxARPHeader->ulSenderProtocolAddress )
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	699a      	ldr	r2, [r3, #24]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800810a:	429a      	cmp	r2, r3
 800810c:	d117      	bne.n	800813e <eARPProcessPacket+0x9a>
						memcpy( pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes, xBroadcastMACAddress.ucBytes, sizeof( xBroadcastMACAddress ) );
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	3306      	adds	r3, #6
 8008112:	4a23      	ldr	r2, [pc, #140]	; (80081a0 <eARPProcessPacket+0xfc>)
 8008114:	6811      	ldr	r1, [r2, #0]
 8008116:	6019      	str	r1, [r3, #0]
 8008118:	8892      	ldrh	r2, [r2, #4]
 800811a:	809a      	strh	r2, [r3, #4]
						memset( pxARPHeader->xTargetHardwareAddress.ucBytes, '\0', sizeof( MACAddress_t ) );
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	3312      	adds	r3, #18
 8008120:	2206      	movs	r2, #6
 8008122:	2100      	movs	r1, #0
 8008124:	4618      	mov	r0, r3
 8008126:	f008 fa1f 	bl	8010568 <memset>
						pxARPHeader->ulTargetProtocolAddress = 0UL;
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2200      	movs	r2, #0
 800812e:	761a      	strb	r2, [r3, #24]
 8008130:	2200      	movs	r2, #0
 8008132:	765a      	strb	r2, [r3, #25]
 8008134:	2200      	movs	r2, #0
 8008136:	769a      	strb	r2, [r3, #26]
 8008138:	2200      	movs	r2, #0
 800813a:	76da      	strb	r2, [r3, #27]
 800813c:	e00d      	b.n	800815a <eARPProcessPacket+0xb6>
						memcpy( pxARPHeader->xTargetHardwareAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, sizeof( MACAddress_t ) );
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	f103 0012 	add.w	r0, r3, #18
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	3308      	adds	r3, #8
 8008148:	2206      	movs	r2, #6
 800814a:	4619      	mov	r1, r3
 800814c:	f008 f9e7 	bl	801051e <memcpy>
						pxARPHeader->ulTargetProtocolAddress = pxARPHeader->ulSenderProtocolAddress;
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	619a      	str	r2, [r3, #24]
					memcpy( pxARPHeader->xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	3308      	adds	r3, #8
 800815e:	2206      	movs	r2, #6
 8008160:	490e      	ldr	r1, [pc, #56]	; (800819c <eARPProcessPacket+0xf8>)
 8008162:	4618      	mov	r0, r3
 8008164:	f008 f9db 	bl	801051e <memcpy>
					pxARPHeader->ulSenderProtocolAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8008168:	4b0c      	ldr	r3, [pc, #48]	; (800819c <eARPProcessPacket+0xf8>)
 800816a:	695a      	ldr	r2, [r3, #20]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f8c3 200e 	str.w	r2, [r3, #14]
					eReturn = eReturnEthernetFrame;
 8008172:	2302      	movs	r3, #2
 8008174:	73fb      	strb	r3, [r7, #15]
				break;
 8008176:	e00a      	b.n	800818e <eARPProcessPacket+0xea>
				vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), pxARPHeader->ulSenderProtocolAddress );
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f103 0208 	add.w	r2, r3, #8
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	f000 f80c 	bl	80081a4 <vARPRefreshCacheEntry>
				break;
 800818c:	e000      	b.n	8008190 <eARPProcessPacket+0xec>
				break;
 800818e:	bf00      	nop
		}
	}

	return eReturn;
 8008190:	7bfb      	ldrb	r3, [r7, #15]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	200000a0 	.word	0x200000a0
 80081a0:	080109a4 	.word	0x080109a4

080081a4 <vARPRefreshCacheEntry>:

#endif	/* ipconfigUSE_ARP_REMOVE_ENTRY != 0 */
/*-----------------------------------------------------------*/

void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress, const uint32_t ulIPAddress )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b088      	sub	sp, #32
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
BaseType_t x, xIpEntry = -1, xMacEntry = -1, xUseEntry = 0;
 80081ae:	f04f 33ff 	mov.w	r3, #4294967295
 80081b2:	61bb      	str	r3, [r7, #24]
 80081b4:	f04f 33ff 	mov.w	r3, #4294967295
 80081b8:	617b      	str	r3, [r7, #20]
 80081ba:	2300      	movs	r3, #0
 80081bc:	613b      	str	r3, [r7, #16]
uint8_t ucMinAgeFound = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]

	#if( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )
		/* Only process the IP address if it is on the local network.
		Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
		and netmask are still unknown. */
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 80081c2:	4b71      	ldr	r3, [pc, #452]	; (8008388 <vARPRefreshCacheEntry+0x1e4>)
 80081c4:	695a      	ldr	r2, [r3, #20]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	405a      	eors	r2, r3
 80081ca:	4b70      	ldr	r3, [pc, #448]	; (800838c <vARPRefreshCacheEntry+0x1e8>)
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	4013      	ands	r3, r2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d004      	beq.n	80081de <vARPRefreshCacheEntry+0x3a>
			( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 80081d4:	4b6c      	ldr	r3, [pc, #432]	; (8008388 <vARPRefreshCacheEntry+0x1e4>)
 80081d6:	695b      	ldr	r3, [r3, #20]
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f040 80d2 	bne.w	8008382 <vARPRefreshCacheEntry+0x1de>
		zero the the gateway address is the only option. */
		if( pdTRUE )
	#endif
	{
		/* Start with the maximum possible number. */
		ucMinAgeFound--;
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	73fb      	strb	r3, [r7, #15]

		/* For each entry in the ARP cache table. */
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80081e4:	2300      	movs	r3, #0
 80081e6:	61fb      	str	r3, [r7, #28]
 80081e8:	e069      	b.n	80082be <vARPRefreshCacheEntry+0x11a>
		{
			/* Does this line in the cache table hold an entry for the IP
			address	being queried? */
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 80081ea:	4969      	ldr	r1, [pc, #420]	; (8008390 <vARPRefreshCacheEntry+0x1ec>)
 80081ec:	69fa      	ldr	r2, [r7, #28]
 80081ee:	4613      	mov	r3, r2
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	4413      	add	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	440b      	add	r3, r1
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d12d      	bne.n	800825c <vARPRefreshCacheEntry+0xb8>
			{
				if( pxMACAddress == NULL )
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d102      	bne.n	800820c <vARPRefreshCacheEntry+0x68>
				{
					/* In case the parameter pxMACAddress is NULL, an entry will be reserved to
					indicate that there is an outstanding ARP request, This entry will have
					"ucValid == pdFALSE". */
					xIpEntry = x;
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	61bb      	str	r3, [r7, #24]
					break;
 800820a:	e05b      	b.n	80082c4 <vARPRefreshCacheEntry+0x120>
				}

				/* See if the MAC-address also matches. */
				if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	4613      	mov	r3, r2
 8008210:	005b      	lsls	r3, r3, #1
 8008212:	4413      	add	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4a5e      	ldr	r2, [pc, #376]	; (8008390 <vARPRefreshCacheEntry+0x1ec>)
 8008218:	4413      	add	r3, r2
 800821a:	3304      	adds	r3, #4
 800821c:	6879      	ldr	r1, [r7, #4]
 800821e:	2206      	movs	r2, #6
 8008220:	4618      	mov	r0, r3
 8008222:	f008 f96d 	bl	8010500 <memcmp>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d114      	bne.n	8008256 <vARPRefreshCacheEntry+0xb2>
				{
					/* This function will be called for each received packet
					As this is by far the most common path the coding standard
					is relaxed in this case and a return is permitted as an
					optimisation. */
					xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800822c:	4958      	ldr	r1, [pc, #352]	; (8008390 <vARPRefreshCacheEntry+0x1ec>)
 800822e:	69fa      	ldr	r2, [r7, #28]
 8008230:	4613      	mov	r3, r2
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	330a      	adds	r3, #10
 800823c:	2296      	movs	r2, #150	; 0x96
 800823e:	701a      	strb	r2, [r3, #0]
					xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 8008240:	4953      	ldr	r1, [pc, #332]	; (8008390 <vARPRefreshCacheEntry+0x1ec>)
 8008242:	69fa      	ldr	r2, [r7, #28]
 8008244:	4613      	mov	r3, r2
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	440b      	add	r3, r1
 800824e:	330b      	adds	r3, #11
 8008250:	2201      	movs	r2, #1
 8008252:	701a      	strb	r2, [r3, #0]
					return;
 8008254:	e095      	b.n	8008382 <vARPRefreshCacheEntry+0x1de>
				/* Found an entry containing ulIPAddress, but the MAC address
				doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
				for an ARP reply.  Still want to see if there is match with the
				given MAC address.ucBytes.  If found, either of the two entries
				must be cleared. */
				xIpEntry = x;
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	61bb      	str	r3, [r7, #24]
 800825a:	e02d      	b.n	80082b8 <vARPRefreshCacheEntry+0x114>
			}
			else if( ( pxMACAddress != NULL ) && ( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 ) )
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d012      	beq.n	8008288 <vARPRefreshCacheEntry+0xe4>
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	4613      	mov	r3, r2
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4a48      	ldr	r2, [pc, #288]	; (8008390 <vARPRefreshCacheEntry+0x1ec>)
 800826e:	4413      	add	r3, r2
 8008270:	3304      	adds	r3, #4
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	2206      	movs	r2, #6
 8008276:	4618      	mov	r0, r3
 8008278:	f008 f942 	bl	8010500 <memcmp>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d102      	bne.n	8008288 <vARPRefreshCacheEntry+0xe4>
				if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
				{
					xMacEntry = x;
				}
	#else
				xMacEntry = x;
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	617b      	str	r3, [r7, #20]
 8008286:	e017      	b.n	80082b8 <vARPRefreshCacheEntry+0x114>
	#endif
			}
			/* _HT_
			Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8008288:	4941      	ldr	r1, [pc, #260]	; (8008390 <vARPRefreshCacheEntry+0x1ec>)
 800828a:	69fa      	ldr	r2, [r7, #28]
 800828c:	4613      	mov	r3, r2
 800828e:	005b      	lsls	r3, r3, #1
 8008290:	4413      	add	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	330a      	adds	r3, #10
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	7bfa      	ldrb	r2, [r7, #15]
 800829c:	429a      	cmp	r2, r3
 800829e:	d90b      	bls.n	80082b8 <vARPRefreshCacheEntry+0x114>
			{
				/* As the table is traversed, remember the table row that
				contains the oldest entry (the lowest age count, as ages are
				decremented to zero) so the row can be re-used if this function
				needs to add an entry that does not already exist. */
				ucMinAgeFound = xARPCache[ x ].ucAge;
 80082a0:	493b      	ldr	r1, [pc, #236]	; (8008390 <vARPRefreshCacheEntry+0x1ec>)
 80082a2:	69fa      	ldr	r2, [r7, #28]
 80082a4:	4613      	mov	r3, r2
 80082a6:	005b      	lsls	r3, r3, #1
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	440b      	add	r3, r1
 80082ae:	330a      	adds	r3, #10
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	73fb      	strb	r3, [r7, #15]
				xUseEntry = x;
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	613b      	str	r3, [r7, #16]
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	3301      	adds	r3, #1
 80082bc:	61fb      	str	r3, [r7, #28]
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	2b05      	cmp	r3, #5
 80082c2:	dd92      	ble.n	80081ea <vARPRefreshCacheEntry+0x46>
			}
		}

		if( xMacEntry >= 0 )
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	db11      	blt.n	80082ee <vARPRefreshCacheEntry+0x14a>
		{
			xUseEntry = xMacEntry;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	613b      	str	r3, [r7, #16]

			if( xIpEntry >= 0 )
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	db11      	blt.n	80082f8 <vARPRefreshCacheEntry+0x154>
			{
				/* Both the MAC address as well as the IP address were found in
				different locations: clear the entry which matches the
				IP-address */
				memset( &xARPCache[ xIpEntry ], '\0', sizeof( xARPCache[ xIpEntry ] ) );
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	4613      	mov	r3, r2
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	4413      	add	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4a2c      	ldr	r2, [pc, #176]	; (8008390 <vARPRefreshCacheEntry+0x1ec>)
 80082e0:	4413      	add	r3, r2
 80082e2:	220c      	movs	r2, #12
 80082e4:	2100      	movs	r1, #0
 80082e6:	4618      	mov	r0, r3
 80082e8:	f008 f93e 	bl	8010568 <memset>
 80082ec:	e004      	b.n	80082f8 <vARPRefreshCacheEntry+0x154>
			}
		}
		else if( xIpEntry >= 0 )
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	db01      	blt.n	80082f8 <vARPRefreshCacheEntry+0x154>
		{
			/* An entry containing the IP-address was found, but it had a different MAC address */
			xUseEntry = xIpEntry;
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	613b      	str	r3, [r7, #16]
		}

		/* If the entry was not found, we use the oldest entry and set the IPaddress */
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 80082f8:	4925      	ldr	r1, [pc, #148]	; (8008390 <vARPRefreshCacheEntry+0x1ec>)
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	4613      	mov	r3, r2
 80082fe:	005b      	lsls	r3, r3, #1
 8008300:	4413      	add	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	440b      	add	r3, r1
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	601a      	str	r2, [r3, #0]

		if( pxMACAddress != NULL )
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d021      	beq.n	8008354 <vARPRefreshCacheEntry+0x1b0>
		{
			memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	4613      	mov	r3, r2
 8008314:	005b      	lsls	r3, r3, #1
 8008316:	4413      	add	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4a1d      	ldr	r2, [pc, #116]	; (8008390 <vARPRefreshCacheEntry+0x1ec>)
 800831c:	4413      	add	r3, r2
 800831e:	3304      	adds	r3, #4
 8008320:	6879      	ldr	r1, [r7, #4]
 8008322:	2206      	movs	r2, #6
 8008324:	4618      	mov	r0, r3
 8008326:	f008 f8fa 	bl	801051e <memcpy>

			iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, (*pxMACAddress) );
			/* And this entry does not need immediate attention */
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800832a:	4919      	ldr	r1, [pc, #100]	; (8008390 <vARPRefreshCacheEntry+0x1ec>)
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	4613      	mov	r3, r2
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	440b      	add	r3, r1
 8008338:	330a      	adds	r3, #10
 800833a:	2296      	movs	r2, #150	; 0x96
 800833c:	701a      	strb	r2, [r3, #0]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 800833e:	4914      	ldr	r1, [pc, #80]	; (8008390 <vARPRefreshCacheEntry+0x1ec>)
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	4613      	mov	r3, r2
 8008344:	005b      	lsls	r3, r3, #1
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	440b      	add	r3, r1
 800834c:	330b      	adds	r3, #11
 800834e:	2201      	movs	r2, #1
 8008350:	701a      	strb	r2, [r3, #0]
 8008352:	e016      	b.n	8008382 <vARPRefreshCacheEntry+0x1de>
		}
		else if( xIpEntry < 0 )
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	2b00      	cmp	r3, #0
 8008358:	da13      	bge.n	8008382 <vARPRefreshCacheEntry+0x1de>
		{
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 800835a:	490d      	ldr	r1, [pc, #52]	; (8008390 <vARPRefreshCacheEntry+0x1ec>)
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	4613      	mov	r3, r2
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	440b      	add	r3, r1
 8008368:	330a      	adds	r3, #10
 800836a:	2205      	movs	r2, #5
 800836c:	701a      	strb	r2, [r3, #0]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 800836e:	4908      	ldr	r1, [pc, #32]	; (8008390 <vARPRefreshCacheEntry+0x1ec>)
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	4613      	mov	r3, r2
 8008374:	005b      	lsls	r3, r3, #1
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	440b      	add	r3, r1
 800837c:	330b      	adds	r3, #11
 800837e:	2200      	movs	r2, #0
 8008380:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8008382:	3720      	adds	r7, #32
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	200000a0 	.word	0x200000a0
 800838c:	20004774 	.word	0x20004774
 8008390:	20004684 	.word	0x20004684

08008394 <eARPGetCacheEntry>:
#endif /* ipconfigUSE_ARP_REVERSED_LOOKUP */

/*-----------------------------------------------------------*/

eARPLookupResult_t eARPGetCacheEntry( uint32_t *pulIPAddress, MACAddress_t * const pxMACAddress )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
eARPLookupResult_t eReturn;
uint32_t ulAddressToLookup;

#if( ipconfigUSE_LLMNR == 1 )
	if( *pulIPAddress == ipLLMNR_IP_ADDR )	/* Is in network byte order */
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a2a      	ldr	r2, [pc, #168]	; (800844c <eARPGetCacheEntry+0xb8>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d108      	bne.n	80083ba <eARPGetCacheEntry+0x26>
	{
		/* The LLMNR IP-address has a fixed virtual MAC address */
		memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	4a29      	ldr	r2, [pc, #164]	; (8008450 <eARPGetCacheEntry+0xbc>)
 80083ac:	6811      	ldr	r1, [r2, #0]
 80083ae:	6019      	str	r1, [r3, #0]
 80083b0:	8892      	ldrh	r2, [r2, #4]
 80083b2:	809a      	strh	r2, [r3, #4]
		eReturn = eARPCacheHit;
 80083b4:	2301      	movs	r3, #1
 80083b6:	73fb      	strb	r3, [r7, #15]
 80083b8:	e042      	b.n	8008440 <eARPGetCacheEntry+0xac>
	}
	else
#endif
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c2:	d005      	beq.n	80083d0 <eARPGetCacheEntry+0x3c>
		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 192.168.1.255? */
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	4b22      	ldr	r3, [pc, #136]	; (8008454 <eARPGetCacheEntry+0xc0>)
 80083ca:	691b      	ldr	r3, [r3, #16]
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d108      	bne.n	80083e2 <eARPGetCacheEntry+0x4e>
	{
		/* This is a broadcast so uses the broadcast MAC address. */
		memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	4a21      	ldr	r2, [pc, #132]	; (8008458 <eARPGetCacheEntry+0xc4>)
 80083d4:	6811      	ldr	r1, [r2, #0]
 80083d6:	6019      	str	r1, [r3, #0]
 80083d8:	8892      	ldrh	r2, [r2, #4]
 80083da:	809a      	strh	r2, [r3, #4]
		eReturn = eARPCacheHit;
 80083dc:	2301      	movs	r3, #1
 80083de:	73fb      	strb	r3, [r7, #15]
 80083e0:	e02e      	b.n	8008440 <eARPGetCacheEntry+0xac>
	}
	else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 80083e2:	4b1e      	ldr	r3, [pc, #120]	; (800845c <eARPGetCacheEntry+0xc8>)
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d102      	bne.n	80083f0 <eARPGetCacheEntry+0x5c>
	{
		/* The IP address has not yet been assigned, so there is nothing that
		can be done. */
		eReturn = eCantSendPacket;
 80083ea:	2302      	movs	r3, #2
 80083ec:	73fb      	strb	r3, [r7, #15]
 80083ee:	e027      	b.n	8008440 <eARPGetCacheEntry+0xac>
	}
	else
	{
		eReturn = eARPCacheMiss;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]

		if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	4b18      	ldr	r3, [pc, #96]	; (800845c <eARPGetCacheEntry+0xc8>)
 80083fa:	695b      	ldr	r3, [r3, #20]
 80083fc:	405a      	eors	r2, r3
 80083fe:	4b15      	ldr	r3, [pc, #84]	; (8008454 <eARPGetCacheEntry+0xc0>)
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	4013      	ands	r3, r2
 8008404:	2b00      	cmp	r3, #0
 8008406:	d003      	beq.n	8008410 <eARPGetCacheEntry+0x7c>
			else
#endif
			{
				/* The IP address is off the local network, so look up the
				hardware address of the router, if any. */
				ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 8008408:	4b12      	ldr	r3, [pc, #72]	; (8008454 <eARPGetCacheEntry+0xc0>)
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	60bb      	str	r3, [r7, #8]
 800840e:	e002      	b.n	8008416 <eARPGetCacheEntry+0x82>
		}
		else
		{
			/* The IP address is on the local network, so lookup the requested
			IP address directly. */
			ulAddressToLookup = *pulIPAddress;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	60bb      	str	r3, [r7, #8]
		}

		if( eReturn == eARPCacheMiss )
 8008416:	7bfb      	ldrb	r3, [r7, #15]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d111      	bne.n	8008440 <eARPGetCacheEntry+0xac>
		{
			if( ulAddressToLookup == 0UL )
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d102      	bne.n	8008428 <eARPGetCacheEntry+0x94>
			{
				/* The address is not on the local network, and there is not a
				router. */
				eReturn = eCantSendPacket;
 8008422:	2302      	movs	r3, #2
 8008424:	73fb      	strb	r3, [r7, #15]
 8008426:	e00b      	b.n	8008440 <eARPGetCacheEntry+0xac>
			}
			else
			{
				eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	68b8      	ldr	r0, [r7, #8]
 800842c:	f000 f818 	bl	8008460 <prvCacheLookup>
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]

				if( eReturn == eARPCacheMiss )
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d102      	bne.n	8008440 <eARPGetCacheEntry+0xac>
				{
					/* It might be that the ARP has to go to the gateway. */
					*pulIPAddress = ulAddressToLookup;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

	return eReturn;
 8008440:	7bfb      	ldrb	r3, [r7, #15]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	fc0000e0 	.word	0xfc0000e0
 8008450:	0801099c 	.word	0x0801099c
 8008454:	20004774 	.word	0x20004774
 8008458:	080109a4 	.word	0x080109a4
 800845c:	200000a0 	.word	0x200000a0

08008460 <prvCacheLookup>:

/*-----------------------------------------------------------*/

static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup, MACAddress_t * const pxMACAddress )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
BaseType_t x;
eARPLookupResult_t eReturn = eARPCacheMiss;
 800846a:	2300      	movs	r3, #0
 800846c:	72fb      	strb	r3, [r7, #11]

	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800846e:	2300      	movs	r3, #0
 8008470:	60fb      	str	r3, [r7, #12]
 8008472:	e02b      	b.n	80084cc <prvCacheLookup+0x6c>
	{
		/* Does this row in the ARP cache table hold an entry for the IP address
		being queried? */
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8008474:	4919      	ldr	r1, [pc, #100]	; (80084dc <prvCacheLookup+0x7c>)
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	4613      	mov	r3, r2
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	4413      	add	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	440b      	add	r3, r1
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	429a      	cmp	r2, r3
 8008488:	d11d      	bne.n	80084c6 <prvCacheLookup+0x66>
		{
			/* A matching valid entry was found. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800848a:	4914      	ldr	r1, [pc, #80]	; (80084dc <prvCacheLookup+0x7c>)
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	4613      	mov	r3, r2
 8008490:	005b      	lsls	r3, r3, #1
 8008492:	4413      	add	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	440b      	add	r3, r1
 8008498:	330b      	adds	r3, #11
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d102      	bne.n	80084a6 <prvCacheLookup+0x46>
			{
				/* This entry is waiting an ARP reply, so is not valid. */
				eReturn = eCantSendPacket;
 80084a0:	2302      	movs	r3, #2
 80084a2:	72fb      	strb	r3, [r7, #11]
			{
				/* A valid entry was found. */
				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
				eReturn = eARPCacheHit;
			}
			break;
 80084a4:	e015      	b.n	80084d2 <prvCacheLookup+0x72>
				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80084a6:	6838      	ldr	r0, [r7, #0]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	4613      	mov	r3, r2
 80084ac:	005b      	lsls	r3, r3, #1
 80084ae:	4413      	add	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4a0a      	ldr	r2, [pc, #40]	; (80084dc <prvCacheLookup+0x7c>)
 80084b4:	4413      	add	r3, r2
 80084b6:	3304      	adds	r3, #4
 80084b8:	2206      	movs	r2, #6
 80084ba:	4619      	mov	r1, r3
 80084bc:	f008 f82f 	bl	801051e <memcpy>
				eReturn = eARPCacheHit;
 80084c0:	2301      	movs	r3, #1
 80084c2:	72fb      	strb	r3, [r7, #11]
			break;
 80084c4:	e005      	b.n	80084d2 <prvCacheLookup+0x72>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3301      	adds	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2b05      	cmp	r3, #5
 80084d0:	ddd0      	ble.n	8008474 <prvCacheLookup+0x14>
		}
	}

	return eReturn;
 80084d2:	7afb      	ldrb	r3, [r7, #11]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	20004684 	.word	0x20004684

080084e0 <vARPAgeCache>:
/*-----------------------------------------------------------*/

void vARPAgeCache( void )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
BaseType_t x;
TickType_t xTimeNow;

	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80084e6:	2300      	movs	r3, #0
 80084e8:	607b      	str	r3, [r7, #4]
 80084ea:	e063      	b.n	80085b4 <vARPAgeCache+0xd4>
	{
		/* If the entry is valid (its age is greater than zero). */
		if( xARPCache[ x ].ucAge > 0U )
 80084ec:	4940      	ldr	r1, [pc, #256]	; (80085f0 <vARPAgeCache+0x110>)
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	4613      	mov	r3, r2
 80084f2:	005b      	lsls	r3, r3, #1
 80084f4:	4413      	add	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	440b      	add	r3, r1
 80084fa:	330a      	adds	r3, #10
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d055      	beq.n	80085ae <vARPAgeCache+0xce>
		{
			/* Decrement the age value of the entry in this ARP cache table row.
			When the age reaches zero it is no longer considered valid. */
			( xARPCache[ x ].ucAge )--;
 8008502:	493b      	ldr	r1, [pc, #236]	; (80085f0 <vARPAgeCache+0x110>)
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	4613      	mov	r3, r2
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	4413      	add	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	440b      	add	r3, r1
 8008510:	330a      	adds	r3, #10
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	3b01      	subs	r3, #1
 8008516:	b2d8      	uxtb	r0, r3
 8008518:	4935      	ldr	r1, [pc, #212]	; (80085f0 <vARPAgeCache+0x110>)
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	4613      	mov	r3, r2
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	4413      	add	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	440b      	add	r3, r1
 8008526:	330a      	adds	r3, #10
 8008528:	4602      	mov	r2, r0
 800852a:	701a      	strb	r2, [r3, #0]

			/* If the entry is not yet valid, then it is waiting an ARP
			reply, and the ARP request should be retransmitted. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800852c:	4930      	ldr	r1, [pc, #192]	; (80085f0 <vARPAgeCache+0x110>)
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	4613      	mov	r3, r2
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	4413      	add	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	440b      	add	r3, r1
 800853a:	330b      	adds	r3, #11
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10b      	bne.n	800855a <vARPAgeCache+0x7a>
			{
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8008542:	492b      	ldr	r1, [pc, #172]	; (80085f0 <vARPAgeCache+0x110>)
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	4613      	mov	r3, r2
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	4413      	add	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	440b      	add	r3, r1
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4618      	mov	r0, r3
 8008554:	f000 f85e 	bl	8008614 <FreeRTOS_OutputARPRequest>
 8008558:	e015      	b.n	8008586 <vARPAgeCache+0xa6>
			}
			else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 800855a:	4925      	ldr	r1, [pc, #148]	; (80085f0 <vARPAgeCache+0x110>)
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	4613      	mov	r3, r2
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	4413      	add	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	440b      	add	r3, r1
 8008568:	330a      	adds	r3, #10
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	2b03      	cmp	r3, #3
 800856e:	d80a      	bhi.n	8008586 <vARPAgeCache+0xa6>
			{
				/* This entry will get removed soon.  See if the MAC address is
				still valid to prevent this happening. */
				iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8008570:	491f      	ldr	r1, [pc, #124]	; (80085f0 <vARPAgeCache+0x110>)
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	4613      	mov	r3, r2
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	4413      	add	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	440b      	add	r3, r1
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4618      	mov	r0, r3
 8008582:	f000 f847 	bl	8008614 <FreeRTOS_OutputARPRequest>
			else
			{
				/* The age has just ticked down, with nothing to do. */
			}

			if( xARPCache[ x ].ucAge == 0u )
 8008586:	491a      	ldr	r1, [pc, #104]	; (80085f0 <vARPAgeCache+0x110>)
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	4613      	mov	r3, r2
 800858c:	005b      	lsls	r3, r3, #1
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	440b      	add	r3, r1
 8008594:	330a      	adds	r3, #10
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d108      	bne.n	80085ae <vARPAgeCache+0xce>
			{
				/* The entry is no longer valid.  Wipe it out. */
				iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
				xARPCache[ x ].ulIPAddress = 0UL;
 800859c:	4914      	ldr	r1, [pc, #80]	; (80085f0 <vARPAgeCache+0x110>)
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	4613      	mov	r3, r2
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	4413      	add	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	440b      	add	r3, r1
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3301      	adds	r3, #1
 80085b2:	607b      	str	r3, [r7, #4]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b05      	cmp	r3, #5
 80085b8:	dd98      	ble.n	80084ec <vARPAgeCache+0xc>
			}
		}
	}

	xTimeNow = xTaskGetTickCount ();
 80085ba:	f7fe ff63 	bl	8007484 <xTaskGetTickCount>
 80085be:	6038      	str	r0, [r7, #0]

	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 80085c0:	4b0c      	ldr	r3, [pc, #48]	; (80085f4 <vARPAgeCache+0x114>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d007      	beq.n	80085d8 <vARPAgeCache+0xf8>
 80085c8:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <vARPAgeCache+0x114>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d907      	bls.n	80085e8 <vARPAgeCache+0x108>
	{
		FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 80085d8:	4b07      	ldr	r3, [pc, #28]	; (80085f8 <vARPAgeCache+0x118>)
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 f819 	bl	8008614 <FreeRTOS_OutputARPRequest>
		xLastGratuitousARPTime = xTimeNow;
 80085e2:	4a04      	ldr	r2, [pc, #16]	; (80085f4 <vARPAgeCache+0x114>)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	6013      	str	r3, [r2, #0]
	}
}
 80085e8:	bf00      	nop
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	20004684 	.word	0x20004684
 80085f4:	200046cc 	.word	0x200046cc
 80085f8:	200000a0 	.word	0x200000a0

080085fc <vARPSendGratuitous>:
/*-----------------------------------------------------------*/

void vARPSendGratuitous( void )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
	/* Setting xLastGratuitousARPTime to 0 will force a gratuitous ARP the next
	time vARPAgeCache() is called. */
	xLastGratuitousARPTime = ( TickType_t ) 0;
 8008600:	4b03      	ldr	r3, [pc, #12]	; (8008610 <vARPSendGratuitous+0x14>)
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]

	/* Let the IP-task call vARPAgeCache(). */
	xSendEventToIPTask( eARPTimerEvent );
 8008606:	2002      	movs	r0, #2
 8008608:	f001 fc96 	bl	8009f38 <xSendEventToIPTask>
}
 800860c:	bf00      	nop
 800860e:	bd80      	pop	{r7, pc}
 8008610:	200046cc 	.word	0x200046cc

08008614 <FreeRTOS_OutputARPRequest>:

/*-----------------------------------------------------------*/
void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
NetworkBufferDescriptor_t *pxNetworkBuffer;

	/* This is called from the context of the IP event task, so a block time
	must not be used. */
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0 );
 800861c:	2100      	movs	r1, #0
 800861e:	202a      	movs	r0, #42	; 0x2a
 8008620:	f006 ffc8 	bl	800f5b4 <pxGetNetworkBufferWithDescriptor>
 8008624:	60f8      	str	r0, [r7, #12]

	if( pxNetworkBuffer != NULL )
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d009      	beq.n	8008640 <FreeRTOS_OutputARPRequest+0x2c>
	{
		pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	615a      	str	r2, [r3, #20]
		vARPGenerateRequestPacket( pxNetworkBuffer );
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 f808 	bl	8008648 <vARPGenerateRequestPacket>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
			}
		}
		#endif

		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8008638:	2101      	movs	r1, #1
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7fc f8ca 	bl	80047d4 <xNetworkInterfaceOutput>
	}
}
 8008640:	bf00      	nop
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <vARPGenerateRequestPacket>:

void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
ARPPacket_t *pxARPPacket;

	pxARPPacket = ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	60fb      	str	r3, [r7, #12]
		xARPHeader.ucHardwareAddressLength;
		xARPHeader.ucProtocolAddressLength;
		xARPHeader.usOperation;
		xARPHeader.xTargetHardwareAddress;
	*/
	memcpy( ( void * ) &( pxARPPacket->xEthernetHeader ), ( void * ) xDefaultPartARPPacketHeader, sizeof( xDefaultPartARPPacketHeader ) );
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	4a1a      	ldr	r2, [pc, #104]	; (80086c4 <vARPGenerateRequestPacket+0x7c>)
 800865a:	4614      	mov	r4, r2
 800865c:	469e      	mov	lr, r3
 800865e:	f104 0c20 	add.w	ip, r4, #32
 8008662:	4675      	mov	r5, lr
 8008664:	4626      	mov	r6, r4
 8008666:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008668:	6028      	str	r0, [r5, #0]
 800866a:	6069      	str	r1, [r5, #4]
 800866c:	60aa      	str	r2, [r5, #8]
 800866e:	60eb      	str	r3, [r5, #12]
 8008670:	3410      	adds	r4, #16
 8008672:	f10e 0e10 	add.w	lr, lr, #16
 8008676:	4564      	cmp	r4, ip
 8008678:	d1f3      	bne.n	8008662 <vARPGenerateRequestPacket+0x1a>
 800867a:	4673      	mov	r3, lr
 800867c:	4622      	mov	r2, r4
 800867e:	6810      	ldr	r0, [r2, #0]
 8008680:	6018      	str	r0, [r3, #0]
 8008682:	8892      	ldrh	r2, [r2, #4]
 8008684:	809a      	strh	r2, [r3, #4]
	memcpy( ( void * ) pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	3306      	adds	r3, #6
 800868a:	2206      	movs	r2, #6
 800868c:	490e      	ldr	r1, [pc, #56]	; (80086c8 <vARPGenerateRequestPacket+0x80>)
 800868e:	4618      	mov	r0, r3
 8008690:	f007 ff45 	bl	801051e <memcpy>
	memcpy( ( void * ) pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3316      	adds	r3, #22
 8008698:	2206      	movs	r2, #6
 800869a:	490b      	ldr	r1, [pc, #44]	; (80086c8 <vARPGenerateRequestPacket+0x80>)
 800869c:	4618      	mov	r0, r3
 800869e:	f007 ff3e 	bl	801051e <memcpy>
	/* HT:endian: network to network */
	pxARPPacket->xARPHeader.ulSenderProtocolAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 80086a2:	4b09      	ldr	r3, [pc, #36]	; (80086c8 <vARPGenerateRequestPacket+0x80>)
 80086a4:	695a      	ldr	r2, [r3, #20]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	61da      	str	r2, [r3, #28]
	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	695a      	ldr	r2, [r3, #20]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	222a      	movs	r2, #42	; 0x2a
 80086b8:	61da      	str	r2, [r3, #28]

	iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
 80086ba:	bf00      	nop
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086c2:	bf00      	nop
 80086c4:	08010948 	.word	0x08010948
 80086c8:	200000a0 	.word	0x200000a0

080086cc <xIsDHCPSocket>:
static DHCPData_t xDHCPData;

/*-----------------------------------------------------------*/

BaseType_t xIsDHCPSocket( Socket_t xSocket )
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	if( xDHCPData.xDHCPSocket == xSocket )
 80086d4:	4b08      	ldr	r3, [pc, #32]	; (80086f8 <xIsDHCPSocket+0x2c>)
 80086d6:	6a1a      	ldr	r2, [r3, #32]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d102      	bne.n	80086e4 <xIsDHCPSocket+0x18>
	{
		xReturn = pdTRUE;
 80086de:	2301      	movs	r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	e001      	b.n	80086e8 <xIsDHCPSocket+0x1c>
	}
	else
	{
		xReturn = pdFALSE;
 80086e4:	2300      	movs	r3, #0
 80086e6:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80086e8:	68fb      	ldr	r3, [r7, #12]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	200046d0 	.word	0x200046d0

080086fc <vDHCPProcess>:
/*-----------------------------------------------------------*/

void vDHCPProcess( BaseType_t xReset )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
BaseType_t xGivingUp = pdFALSE;
 8008704:	2300      	movs	r3, #0
 8008706:	60fb      	str	r3, [r7, #12]
#if( ipconfigUSE_DHCP_HOOK != 0 )
	eDHCPCallbackAnswer_t eAnswer;
#endif	/* ipconfigUSE_DHCP_HOOK */

	/* Is DHCP starting over? */
	if( xReset != pdFALSE )
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <vDHCPProcess+0x18>
	{
		xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 800870e:	4b8d      	ldr	r3, [pc, #564]	; (8008944 <vDHCPProcess+0x248>)
 8008710:	2200      	movs	r2, #0
 8008712:	771a      	strb	r2, [r3, #28]
	}

	switch( xDHCPData.eDHCPState )
 8008714:	4b8b      	ldr	r3, [pc, #556]	; (8008944 <vDHCPProcess+0x248>)
 8008716:	7f1b      	ldrb	r3, [r3, #28]
 8008718:	2b04      	cmp	r3, #4
 800871a:	f200 80e6 	bhi.w	80088ea <vDHCPProcess+0x1ee>
 800871e:	a201      	add	r2, pc, #4	; (adr r2, 8008724 <vDHCPProcess+0x28>)
 8008720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008724:	08008739 	.word	0x08008739
 8008728:	08008771 	.word	0x08008771
 800872c:	080087ff 	.word	0x080087ff
 8008730:	080088b3 	.word	0x080088b3
 8008734:	080088e3 	.word	0x080088e3
			if( eAnswer == eDHCPContinue )
		#endif	/* ipconfigUSE_DHCP_HOOK */
			{
				/* Initial state.  Create the DHCP socket, timer, etc. if they
				have not already been created. */
				prvInitialiseDHCP();
 8008738:	f000 f956 	bl	80089e8 <prvInitialiseDHCP>

				/* See if prvInitialiseDHCP() has creates a socket. */
				if( xDHCPData.xDHCPSocket == NULL )
 800873c:	4b81      	ldr	r3, [pc, #516]	; (8008944 <vDHCPProcess+0x248>)
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d102      	bne.n	800874a <vDHCPProcess+0x4e>
				{
					xGivingUp = pdTRUE;
 8008744:	2301      	movs	r3, #1
 8008746:	60fb      	str	r3, [r7, #12]
					break;
 8008748:	e0d8      	b.n	80088fc <vDHCPProcess+0x200>
				}

				*ipLOCAL_IP_ADDRESS_POINTER = 0UL;
 800874a:	4b7f      	ldr	r3, [pc, #508]	; (8008948 <vDHCPProcess+0x24c>)
 800874c:	2200      	movs	r2, #0
 800874e:	615a      	str	r2, [r3, #20]

				/* Send the first discover request. */
				if( xDHCPData.xDHCPSocket != NULL )
 8008750:	4b7c      	ldr	r3, [pc, #496]	; (8008944 <vDHCPProcess+0x248>)
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 80ca 	beq.w	80088ee <vDHCPProcess+0x1f2>
				{
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 800875a:	f7fe fe93 	bl	8007484 <xTaskGetTickCount>
 800875e:	4602      	mov	r2, r0
 8008760:	4b78      	ldr	r3, [pc, #480]	; (8008944 <vDHCPProcess+0x248>)
 8008762:	611a      	str	r2, [r3, #16]
					prvSendDHCPDiscover( );
 8008764:	f000 fbd6 	bl	8008f14 <prvSendDHCPDiscover>
					xDHCPData.eDHCPState = eWaitingOffer;
 8008768:	4b76      	ldr	r3, [pc, #472]	; (8008944 <vDHCPProcess+0x248>)
 800876a:	2201      	movs	r2, #1
 800876c:	771a      	strb	r2, [r3, #28]

				/* The user indicates that the DHCP process does not continue. */
				xGivingUp = pdTRUE;
			}
		#endif	/* ipconfigUSE_DHCP_HOOK */
			break;
 800876e:	e0be      	b.n	80088ee <vDHCPProcess+0x1f2>

		case eWaitingOffer :

			xGivingUp = pdFALSE;
 8008770:	2300      	movs	r3, #0
 8008772:	60fb      	str	r3, [r7, #12]

			/* Look for offers coming in. */
			if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_OFFER ) == pdPASS )
 8008774:	2002      	movs	r0, #2
 8008776:	f000 f95f 	bl	8008a38 <prvProcessDHCPReplies>
 800877a:	4603      	mov	r3, r0
 800877c:	2b01      	cmp	r3, #1
 800877e:	d10e      	bne.n	800879e <vDHCPProcess+0xa2>
				if( eAnswer == eDHCPContinue )
			#endif	/* ipconfigUSE_DHCP_HOOK */
				{
					/* An offer has been made, the user wants to continue,
					generate the request. */
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008780:	f7fe fe80 	bl	8007484 <xTaskGetTickCount>
 8008784:	4602      	mov	r2, r0
 8008786:	4b6f      	ldr	r3, [pc, #444]	; (8008944 <vDHCPProcess+0x248>)
 8008788:	611a      	str	r2, [r3, #16]
					xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 800878a:	4b6e      	ldr	r3, [pc, #440]	; (8008944 <vDHCPProcess+0x248>)
 800878c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008790:	615a      	str	r2, [r3, #20]
					prvSendDHCPRequest( );
 8008792:	f000 fb8d 	bl	8008eb0 <prvSendDHCPRequest>
					xDHCPData.eDHCPState = eWaitingAcknowledge;
 8008796:	4b6b      	ldr	r3, [pc, #428]	; (8008944 <vDHCPProcess+0x248>)
 8008798:	2202      	movs	r2, #2
 800879a:	771a      	strb	r2, [r3, #28]
					break;
 800879c:	e0ae      	b.n	80088fc <vDHCPProcess+0x200>

				/* The user indicates that the DHCP process does not continue. */
				xGivingUp = pdTRUE;
			#endif	/* ipconfigUSE_DHCP_HOOK */
			}
			else if( ( xTaskGetTickCount() - xDHCPData.xDHCPTxTime ) > xDHCPData.xDHCPTxPeriod )
 800879e:	f7fe fe71 	bl	8007484 <xTaskGetTickCount>
 80087a2:	4602      	mov	r2, r0
 80087a4:	4b67      	ldr	r3, [pc, #412]	; (8008944 <vDHCPProcess+0x248>)
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	1ad2      	subs	r2, r2, r3
 80087aa:	4b66      	ldr	r3, [pc, #408]	; (8008944 <vDHCPProcess+0x248>)
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	f240 809f 	bls.w	80088f2 <vDHCPProcess+0x1f6>
			{
				/* It is time to send another Discover.  Increase the time
				period, and if it has not got to the point of giving up - send
				another discovery. */
				xDHCPData.xDHCPTxPeriod <<= 1;
 80087b4:	4b63      	ldr	r3, [pc, #396]	; (8008944 <vDHCPProcess+0x248>)
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	005b      	lsls	r3, r3, #1
 80087ba:	4a62      	ldr	r2, [pc, #392]	; (8008944 <vDHCPProcess+0x248>)
 80087bc:	6153      	str	r3, [r2, #20]

				if( xDHCPData.xDHCPTxPeriod <= ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 80087be:	4b61      	ldr	r3, [pc, #388]	; (8008944 <vDHCPProcess+0x248>)
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	f247 5230 	movw	r2, #30000	; 0x7530
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d816      	bhi.n	80087f8 <vDHCPProcess+0xfc>
				{
					xDHCPData.ulTransactionId++;
 80087ca:	4b5e      	ldr	r3, [pc, #376]	; (8008944 <vDHCPProcess+0x248>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3301      	adds	r3, #1
 80087d0:	4a5c      	ldr	r2, [pc, #368]	; (8008944 <vDHCPProcess+0x248>)
 80087d2:	6013      	str	r3, [r2, #0]
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 80087d4:	f7fe fe56 	bl	8007484 <xTaskGetTickCount>
 80087d8:	4602      	mov	r2, r0
 80087da:	4b5a      	ldr	r3, [pc, #360]	; (8008944 <vDHCPProcess+0x248>)
 80087dc:	611a      	str	r2, [r3, #16]
					xDHCPData.xUseBroadcast = !xDHCPData.xUseBroadcast;
 80087de:	4b59      	ldr	r3, [pc, #356]	; (8008944 <vDHCPProcess+0x248>)
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	bf0c      	ite	eq
 80087e6:	2301      	moveq	r3, #1
 80087e8:	2300      	movne	r3, #0
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	461a      	mov	r2, r3
 80087ee:	4b55      	ldr	r3, [pc, #340]	; (8008944 <vDHCPProcess+0x248>)
 80087f0:	619a      	str	r2, [r3, #24]
					prvSendDHCPDiscover( );
 80087f2:	f000 fb8f 	bl	8008f14 <prvSendDHCPDiscover>
						xGivingUp = pdTRUE;
					}
					#endif /* ipconfigDHCP_FALL_BACK_AUTO_IP */
				}
			}
			break;
 80087f6:	e07c      	b.n	80088f2 <vDHCPProcess+0x1f6>
						xGivingUp = pdTRUE;
 80087f8:	2301      	movs	r3, #1
 80087fa:	60fb      	str	r3, [r7, #12]
			break;
 80087fc:	e079      	b.n	80088f2 <vDHCPProcess+0x1f6>

		case eWaitingAcknowledge :

			/* Look for acks coming in. */
			if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_ACK ) == pdPASS )
 80087fe:	2005      	movs	r0, #5
 8008800:	f000 f91a 	bl	8008a38 <prvProcessDHCPReplies>
 8008804:	4603      	mov	r3, r0
 8008806:	2b01      	cmp	r3, #1
 8008808:	d132      	bne.n	8008870 <vDHCPProcess+0x174>
			{
				FreeRTOS_debug_printf( ( "vDHCPProcess: acked %lxip\n", FreeRTOS_ntohl( xDHCPData.ulOfferedIPAddress ) ) );

				/* DHCP completed.  The IP address can now be used, and the
				timer set to the lease timeout time. */
				*ipLOCAL_IP_ADDRESS_POINTER = xDHCPData.ulOfferedIPAddress;
 800880a:	4b4e      	ldr	r3, [pc, #312]	; (8008944 <vDHCPProcess+0x248>)
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	4a4e      	ldr	r2, [pc, #312]	; (8008948 <vDHCPProcess+0x24c>)
 8008810:	6153      	str	r3, [r2, #20]

				/* Setting the 'local' broadcast address, something like
				'192.168.1.255'. */
				xNetworkAddressing.ulBroadcastAddress = ( xDHCPData.ulOfferedIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
 8008812:	4b4c      	ldr	r3, [pc, #304]	; (8008944 <vDHCPProcess+0x248>)
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	4b4d      	ldr	r3, [pc, #308]	; (800894c <vDHCPProcess+0x250>)
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	43db      	mvns	r3, r3
 800881c:	4313      	orrs	r3, r2
 800881e:	4a4b      	ldr	r2, [pc, #300]	; (800894c <vDHCPProcess+0x250>)
 8008820:	6113      	str	r3, [r2, #16]
				xDHCPData.eDHCPState = eLeasedAddress;
 8008822:	4b48      	ldr	r3, [pc, #288]	; (8008944 <vDHCPProcess+0x248>)
 8008824:	2203      	movs	r2, #3
 8008826:	771a      	strb	r2, [r3, #28]
				iptraceDHCP_SUCCEDEED( xDHCPData.ulOfferedIPAddress );

				/* DHCP failed, the default configured IP-address will be used
				Now call vIPNetworkUpCalls() to send the network-up event and
				start the ARP timer. */
				vIPNetworkUpCalls( );
 8008828:	f001 fc10 	bl	800a04c <vIPNetworkUpCalls>

				/* Close socket to ensure packets don't queue on it. */
				vSocketClose( xDHCPData.xDHCPSocket );
 800882c:	4b45      	ldr	r3, [pc, #276]	; (8008944 <vDHCPProcess+0x248>)
 800882e:	6a1b      	ldr	r3, [r3, #32]
 8008830:	4618      	mov	r0, r3
 8008832:	f002 fb11 	bl	800ae58 <vSocketClose>
				xDHCPData.xDHCPSocket = NULL;
 8008836:	4b43      	ldr	r3, [pc, #268]	; (8008944 <vDHCPProcess+0x248>)
 8008838:	2200      	movs	r2, #0
 800883a:	621a      	str	r2, [r3, #32]

				if( xDHCPData.ulLeaseTime == 0UL )
 800883c:	4b41      	ldr	r3, [pc, #260]	; (8008944 <vDHCPProcess+0x248>)
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d103      	bne.n	800884c <vDHCPProcess+0x150>
				{
					xDHCPData.ulLeaseTime = dhcpDEFAULT_LEASE_TIME;
 8008844:	4b3f      	ldr	r3, [pc, #252]	; (8008944 <vDHCPProcess+0x248>)
 8008846:	4a42      	ldr	r2, [pc, #264]	; (8008950 <vDHCPProcess+0x254>)
 8008848:	60da      	str	r2, [r3, #12]
 800884a:	e009      	b.n	8008860 <vDHCPProcess+0x164>
				}
				else if( xDHCPData.ulLeaseTime < dhcpMINIMUM_LEASE_TIME )
 800884c:	4b3d      	ldr	r3, [pc, #244]	; (8008944 <vDHCPProcess+0x248>)
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8008854:	4293      	cmp	r3, r2
 8008856:	d803      	bhi.n	8008860 <vDHCPProcess+0x164>
				{
					xDHCPData.ulLeaseTime = dhcpMINIMUM_LEASE_TIME;
 8008858:	4b3a      	ldr	r3, [pc, #232]	; (8008944 <vDHCPProcess+0x248>)
 800885a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800885e:	60da      	str	r2, [r3, #12]
				{
					/* The lease time is already valid. */
				}

				/* Check for clashes. */
				vARPSendGratuitous();
 8008860:	f7ff fecc 	bl	80085fc <vARPSendGratuitous>
				vIPReloadDHCPTimer( xDHCPData.ulLeaseTime );
 8008864:	4b37      	ldr	r3, [pc, #220]	; (8008944 <vDHCPProcess+0x248>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	4618      	mov	r0, r3
 800886a:	f001 fe39 	bl	800a4e0 <vIPReloadDHCPTimer>
						/* Give up, start again. */
						xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
					}
				}
			}
			break;
 800886e:	e042      	b.n	80088f6 <vDHCPProcess+0x1fa>
				if( ( xTaskGetTickCount() - xDHCPData.xDHCPTxTime ) > xDHCPData.xDHCPTxPeriod )
 8008870:	f7fe fe08 	bl	8007484 <xTaskGetTickCount>
 8008874:	4602      	mov	r2, r0
 8008876:	4b33      	ldr	r3, [pc, #204]	; (8008944 <vDHCPProcess+0x248>)
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	1ad2      	subs	r2, r2, r3
 800887c:	4b31      	ldr	r3, [pc, #196]	; (8008944 <vDHCPProcess+0x248>)
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	429a      	cmp	r2, r3
 8008882:	d938      	bls.n	80088f6 <vDHCPProcess+0x1fa>
					xDHCPData.xDHCPTxPeriod <<= 1;
 8008884:	4b2f      	ldr	r3, [pc, #188]	; (8008944 <vDHCPProcess+0x248>)
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	4a2e      	ldr	r2, [pc, #184]	; (8008944 <vDHCPProcess+0x248>)
 800888c:	6153      	str	r3, [r2, #20]
					if( xDHCPData.xDHCPTxPeriod <= ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 800888e:	4b2d      	ldr	r3, [pc, #180]	; (8008944 <vDHCPProcess+0x248>)
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	f247 5230 	movw	r2, #30000	; 0x7530
 8008896:	4293      	cmp	r3, r2
 8008898:	d807      	bhi.n	80088aa <vDHCPProcess+0x1ae>
						xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 800889a:	f7fe fdf3 	bl	8007484 <xTaskGetTickCount>
 800889e:	4602      	mov	r2, r0
 80088a0:	4b28      	ldr	r3, [pc, #160]	; (8008944 <vDHCPProcess+0x248>)
 80088a2:	611a      	str	r2, [r3, #16]
						prvSendDHCPRequest( );
 80088a4:	f000 fb04 	bl	8008eb0 <prvSendDHCPRequest>
			break;
 80088a8:	e025      	b.n	80088f6 <vDHCPProcess+0x1fa>
						xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 80088aa:	4b26      	ldr	r3, [pc, #152]	; (8008944 <vDHCPProcess+0x248>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	771a      	strb	r2, [r3, #28]
			break;
 80088b0:	e021      	b.n	80088f6 <vDHCPProcess+0x1fa>
	#endif	/* ipconfigDHCP_FALL_BACK_AUTO_IP */

		case eLeasedAddress :

			/* Resend the request at the appropriate time to renew the lease. */
			prvCreateDHCPSocket();
 80088b2:	f000 f84f 	bl	8008954 <prvCreateDHCPSocket>

			if( xDHCPData.xDHCPSocket != NULL )
 80088b6:	4b23      	ldr	r3, [pc, #140]	; (8008944 <vDHCPProcess+0x248>)
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d01d      	beq.n	80088fa <vDHCPProcess+0x1fe>
			{
				xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 80088be:	f7fe fde1 	bl	8007484 <xTaskGetTickCount>
 80088c2:	4602      	mov	r2, r0
 80088c4:	4b1f      	ldr	r3, [pc, #124]	; (8008944 <vDHCPProcess+0x248>)
 80088c6:	611a      	str	r2, [r3, #16]
				xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 80088c8:	4b1e      	ldr	r3, [pc, #120]	; (8008944 <vDHCPProcess+0x248>)
 80088ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ce:	615a      	str	r2, [r3, #20]
				prvSendDHCPRequest( );
 80088d0:	f000 faee 	bl	8008eb0 <prvSendDHCPRequest>
				xDHCPData.eDHCPState = eWaitingAcknowledge;
 80088d4:	4b1b      	ldr	r3, [pc, #108]	; (8008944 <vDHCPProcess+0x248>)
 80088d6:	2202      	movs	r2, #2
 80088d8:	771a      	strb	r2, [r3, #28]

				/* From now on, we should be called more often */
				vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 80088da:	20fa      	movs	r0, #250	; 0xfa
 80088dc:	f001 fe00 	bl	800a4e0 <vIPReloadDHCPTimer>
			}
			break;
 80088e0:	e00b      	b.n	80088fa <vDHCPProcess+0x1fe>

		case eNotUsingLeasedAddress:

			vIPSetDHCPTimerEnableState( pdFALSE );
 80088e2:	2000      	movs	r0, #0
 80088e4:	f001 fde2 	bl	800a4ac <vIPSetDHCPTimerEnableState>
			break;
 80088e8:	e008      	b.n	80088fc <vDHCPProcess+0x200>

		default:
			break;
 80088ea:	bf00      	nop
 80088ec:	e006      	b.n	80088fc <vDHCPProcess+0x200>
			break;
 80088ee:	bf00      	nop
 80088f0:	e004      	b.n	80088fc <vDHCPProcess+0x200>
			break;
 80088f2:	bf00      	nop
 80088f4:	e002      	b.n	80088fc <vDHCPProcess+0x200>
			break;
 80088f6:	bf00      	nop
 80088f8:	e000      	b.n	80088fc <vDHCPProcess+0x200>
			break;
 80088fa:	bf00      	nop
	}

	if( xGivingUp != pdFALSE )
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d01b      	beq.n	800893a <vDHCPProcess+0x23e>
		/* xGivingUp became true either because of a time-out, or because
		xApplicationDHCPHook() returned another value than 'eDHCPContinue',
		meaning that the conversion is canceled from here. */

		/* Revert to static IP address. */
		taskENTER_CRITICAL();
 8008902:	f7fd fb3b 	bl	8005f7c <vPortEnterCritical>
		{
			*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 8008906:	4b11      	ldr	r3, [pc, #68]	; (800894c <vDHCPProcess+0x250>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a0f      	ldr	r2, [pc, #60]	; (8008948 <vDHCPProcess+0x24c>)
 800890c:	6153      	str	r3, [r2, #20]
			iptraceDHCP_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( xNetworkAddressing.ulDefaultIPAddress );
		}
		taskEXIT_CRITICAL();
 800890e:	f7fd fb63 	bl	8005fd8 <vPortExitCritical>

		xDHCPData.eDHCPState = eNotUsingLeasedAddress;
 8008912:	4b0c      	ldr	r3, [pc, #48]	; (8008944 <vDHCPProcess+0x248>)
 8008914:	2204      	movs	r2, #4
 8008916:	771a      	strb	r2, [r3, #28]
		vIPSetDHCPTimerEnableState( pdFALSE );
 8008918:	2000      	movs	r0, #0
 800891a:	f001 fdc7 	bl	800a4ac <vIPSetDHCPTimerEnableState>

		/* DHCP failed, the default configured IP-address will be used.  Now
		call vIPNetworkUpCalls() to send the network-up event and start the ARP
		timer. */
		vIPNetworkUpCalls( );
 800891e:	f001 fb95 	bl	800a04c <vIPNetworkUpCalls>

		/* Test if socket was indeed created. */
		if( xDHCPData.xDHCPSocket != NULL )
 8008922:	4b08      	ldr	r3, [pc, #32]	; (8008944 <vDHCPProcess+0x248>)
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d007      	beq.n	800893a <vDHCPProcess+0x23e>
		{
			/* Close socket to ensure packets don't queue on it. */
			vSocketClose( xDHCPData.xDHCPSocket );
 800892a:	4b06      	ldr	r3, [pc, #24]	; (8008944 <vDHCPProcess+0x248>)
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	4618      	mov	r0, r3
 8008930:	f002 fa92 	bl	800ae58 <vSocketClose>
			xDHCPData.xDHCPSocket = NULL;
 8008934:	4b03      	ldr	r3, [pc, #12]	; (8008944 <vDHCPProcess+0x248>)
 8008936:	2200      	movs	r2, #0
 8008938:	621a      	str	r2, [r3, #32]
		}
	}
}
 800893a:	bf00      	nop
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	200046d0 	.word	0x200046d0
 8008948:	200000a0 	.word	0x200000a0
 800894c:	20004774 	.word	0x20004774
 8008950:	0a4cb800 	.word	0x0a4cb800

08008954 <prvCreateDHCPSocket>:
/*-----------------------------------------------------------*/

static void prvCreateDHCPSocket( void )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af02      	add	r7, sp, #8
struct freertos_sockaddr xAddress;
BaseType_t xReturn;
TickType_t xTimeoutTime = ( TickType_t ) 0;
 800895a:	2300      	movs	r3, #0
 800895c:	603b      	str	r3, [r7, #0]

	/* Create the socket, if it has not already been created. */
	if( xDHCPData.xDHCPSocket == NULL )
 800895e:	4b21      	ldr	r3, [pc, #132]	; (80089e4 <prvCreateDHCPSocket+0x90>)
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d13a      	bne.n	80089dc <prvCreateDHCPSocket+0x88>
	{
		xDHCPData.xDHCPSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8008966:	2211      	movs	r2, #17
 8008968:	2102      	movs	r1, #2
 800896a:	2002      	movs	r0, #2
 800896c:	f001 ff5c 	bl	800a828 <FreeRTOS_socket>
 8008970:	4602      	mov	r2, r0
 8008972:	4b1c      	ldr	r3, [pc, #112]	; (80089e4 <prvCreateDHCPSocket+0x90>)
 8008974:	621a      	str	r2, [r3, #32]
		if( xDHCPData.xDHCPSocket != FREERTOS_INVALID_SOCKET )
 8008976:	4b1b      	ldr	r3, [pc, #108]	; (80089e4 <prvCreateDHCPSocket+0x90>)
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897e:	d02a      	beq.n	80089d6 <prvCreateDHCPSocket+0x82>
		{

			/* Ensure the Rx and Tx timeouts are zero as the DHCP executes in the
			context of the IP task. */
			FreeRTOS_setsockopt( xDHCPData.xDHCPSocket, 0, FREERTOS_SO_RCVTIMEO, ( void * ) &xTimeoutTime, sizeof( TickType_t ) );
 8008980:	4b18      	ldr	r3, [pc, #96]	; (80089e4 <prvCreateDHCPSocket+0x90>)
 8008982:	6a18      	ldr	r0, [r3, #32]
 8008984:	463a      	mov	r2, r7
 8008986:	2304      	movs	r3, #4
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	4613      	mov	r3, r2
 800898c:	2200      	movs	r2, #0
 800898e:	2100      	movs	r1, #0
 8008990:	f002 fafa 	bl	800af88 <FreeRTOS_setsockopt>
			FreeRTOS_setsockopt( xDHCPData.xDHCPSocket, 0, FREERTOS_SO_SNDTIMEO, ( void * ) &xTimeoutTime, sizeof( TickType_t ) );
 8008994:	4b13      	ldr	r3, [pc, #76]	; (80089e4 <prvCreateDHCPSocket+0x90>)
 8008996:	6a18      	ldr	r0, [r3, #32]
 8008998:	463a      	mov	r2, r7
 800899a:	2304      	movs	r3, #4
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	4613      	mov	r3, r2
 80089a0:	2201      	movs	r2, #1
 80089a2:	2100      	movs	r1, #0
 80089a4:	f002 faf0 	bl	800af88 <FreeRTOS_setsockopt>

			/* Bind to the standard DHCP client port. */
			xAddress.sin_port = ( uint16_t ) dhcpCLIENT_PORT;
 80089a8:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80089ac:	80fb      	strh	r3, [r7, #6]
			xReturn = vSocketBind( xDHCPData.xDHCPSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 80089ae:	4b0d      	ldr	r3, [pc, #52]	; (80089e4 <prvCreateDHCPSocket+0x90>)
 80089b0:	6a18      	ldr	r0, [r3, #32]
 80089b2:	1d39      	adds	r1, r7, #4
 80089b4:	2300      	movs	r3, #0
 80089b6:	2208      	movs	r2, #8
 80089b8:	f002 f998 	bl	800acec <vSocketBind>
 80089bc:	60f8      	str	r0, [r7, #12]
			if( xReturn != 0 )
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00b      	beq.n	80089dc <prvCreateDHCPSocket+0x88>
			{
				/* Binding failed, close the socket again. */
				vSocketClose( xDHCPData.xDHCPSocket );
 80089c4:	4b07      	ldr	r3, [pc, #28]	; (80089e4 <prvCreateDHCPSocket+0x90>)
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f002 fa45 	bl	800ae58 <vSocketClose>
				xDHCPData.xDHCPSocket = NULL;
 80089ce:	4b05      	ldr	r3, [pc, #20]	; (80089e4 <prvCreateDHCPSocket+0x90>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	621a      	str	r2, [r3, #32]
		{
			/* Change to NULL for easier testing. */
			xDHCPData.xDHCPSocket = NULL;
		}
	}
}
 80089d4:	e002      	b.n	80089dc <prvCreateDHCPSocket+0x88>
			xDHCPData.xDHCPSocket = NULL;
 80089d6:	4b03      	ldr	r3, [pc, #12]	; (80089e4 <prvCreateDHCPSocket+0x90>)
 80089d8:	2200      	movs	r2, #0
 80089da:	621a      	str	r2, [r3, #32]
}
 80089dc:	bf00      	nop
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	200046d0 	.word	0x200046d0

080089e8 <prvInitialiseDHCP>:
/*-----------------------------------------------------------*/

static void prvInitialiseDHCP( void )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	af00      	add	r7, sp, #0
	/* Initialise the parameters that will be set by the DHCP process. */
	if( xDHCPData.ulTransactionId == 0ul )
 80089ec:	4b11      	ldr	r3, [pc, #68]	; (8008a34 <prvInitialiseDHCP+0x4c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d105      	bne.n	8008a00 <prvInitialiseDHCP+0x18>
	{
		xDHCPData.ulTransactionId = ipconfigRAND32();
 80089f4:	f006 fee0 	bl	800f7b8 <uxRand>
 80089f8:	4602      	mov	r2, r0
 80089fa:	4b0e      	ldr	r3, [pc, #56]	; (8008a34 <prvInitialiseDHCP+0x4c>)
 80089fc:	601a      	str	r2, [r3, #0]
 80089fe:	e004      	b.n	8008a0a <prvInitialiseDHCP+0x22>
	}
	else
	{
		xDHCPData.ulTransactionId++;
 8008a00:	4b0c      	ldr	r3, [pc, #48]	; (8008a34 <prvInitialiseDHCP+0x4c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	3301      	adds	r3, #1
 8008a06:	4a0b      	ldr	r2, [pc, #44]	; (8008a34 <prvInitialiseDHCP+0x4c>)
 8008a08:	6013      	str	r3, [r2, #0]
	}

	xDHCPData.xUseBroadcast = 0;
 8008a0a:	4b0a      	ldr	r3, [pc, #40]	; (8008a34 <prvInitialiseDHCP+0x4c>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	619a      	str	r2, [r3, #24]
	xDHCPData.ulOfferedIPAddress = 0UL;
 8008a10:	4b08      	ldr	r3, [pc, #32]	; (8008a34 <prvInitialiseDHCP+0x4c>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	605a      	str	r2, [r3, #4]
	xDHCPData.ulDHCPServerAddress = 0UL;
 8008a16:	4b07      	ldr	r3, [pc, #28]	; (8008a34 <prvInitialiseDHCP+0x4c>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	609a      	str	r2, [r3, #8]
	xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 8008a1c:	4b05      	ldr	r3, [pc, #20]	; (8008a34 <prvInitialiseDHCP+0x4c>)
 8008a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a22:	615a      	str	r2, [r3, #20]

	/* Create the DHCP socket if it has not already been created. */
	prvCreateDHCPSocket();
 8008a24:	f7ff ff96 	bl	8008954 <prvCreateDHCPSocket>
	FreeRTOS_debug_printf( ( "prvInitialiseDHCP: start after %lu ticks\n", dhcpINITIAL_TIMER_PERIOD ) );
	vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 8008a28:	20fa      	movs	r0, #250	; 0xfa
 8008a2a:	f001 fd59 	bl	800a4e0 <vIPReloadDHCPTimer>
}
 8008a2e:	bf00      	nop
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	200046d0 	.word	0x200046d0

08008a38 <prvProcessDHCPReplies>:
/*-----------------------------------------------------------*/

static BaseType_t prvProcessDHCPReplies( BaseType_t xExpectedMessageType )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b092      	sub	sp, #72	; 0x48
 8008a3c:	af02      	add	r7, sp, #8
 8008a3e:	6078      	str	r0, [r7, #4]
uint8_t *pucUDPPayload, *pucLastByte;
struct freertos_sockaddr xClient;
uint32_t xClientLength = sizeof( xClient );
 8008a40:	2308      	movs	r3, #8
 8008a42:	613b      	str	r3, [r7, #16]
int32_t lBytes;
DHCPMessage_t *pxDHCPMessage;
uint8_t *pucByte, ucOptionCode, ucLength;
uint32_t ulProcessed, ulParameter;
BaseType_t xReturn = pdFALSE;
 8008a44:	2300      	movs	r3, #0
 8008a46:	637b      	str	r3, [r7, #52]	; 0x34
const uint32_t ulMandatoryOptions = 2ul; /* DHCP server address, and the correct DHCP message type must be present in the options. */
 8008a48:	2302      	movs	r3, #2
 8008a4a:	633b      	str	r3, [r7, #48]	; 0x30

	lBytes = FreeRTOS_recvfrom( xDHCPData.xDHCPSocket, ( void * ) &pucUDPPayload, 0ul, FREERTOS_ZERO_COPY, &xClient, &xClientLength );
 8008a4c:	4bb9      	ldr	r3, [pc, #740]	; (8008d34 <prvProcessDHCPReplies+0x2fc>)
 8008a4e:	6a18      	ldr	r0, [r3, #32]
 8008a50:	f107 011c 	add.w	r1, r7, #28
 8008a54:	f107 0310 	add.w	r3, r7, #16
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	f107 0314 	add.w	r3, r7, #20
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	2301      	movs	r3, #1
 8008a62:	2200      	movs	r2, #0
 8008a64:	f001 ff7a 	bl	800a95c <FreeRTOS_recvfrom>
 8008a68:	62f8      	str	r0, [r7, #44]	; 0x2c

	if( lBytes > 0 )
 8008a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f340 815b 	ble.w	8008d28 <prvProcessDHCPReplies+0x2f0>
	{
		/* Map a DHCP structure onto the received data. */
		pxDHCPMessage = ( DHCPMessage_t * ) ( pucUDPPayload );
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Sanity check. */
		if( ( pxDHCPMessage->ulDHCPCookie == ( uint32_t ) dhcpCOOKIE ) &&
 8008a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a78:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008a7c:	4aae      	ldr	r2, [pc, #696]	; (8008d38 <prvProcessDHCPReplies+0x300>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	f040 814e 	bne.w	8008d20 <prvProcessDHCPReplies+0x2e8>
			( pxDHCPMessage->ucOpcode == ( uint8_t ) dhcpREPLY_OPCODE ) &&
 8008a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a86:	781b      	ldrb	r3, [r3, #0]
		if( ( pxDHCPMessage->ulDHCPCookie == ( uint32_t ) dhcpCOOKIE ) &&
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	f040 8149 	bne.w	8008d20 <prvProcessDHCPReplies+0x2e8>
			( pxDHCPMessage->ulTransactionID == FreeRTOS_htonl( xDHCPData.ulTransactionId ) ) )
 8008a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	4ba8      	ldr	r3, [pc, #672]	; (8008d34 <prvProcessDHCPReplies+0x2fc>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	0619      	lsls	r1, r3, #24
 8008a98:	4ba6      	ldr	r3, [pc, #664]	; (8008d34 <prvProcessDHCPReplies+0x2fc>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	021b      	lsls	r3, r3, #8
 8008a9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008aa2:	4319      	orrs	r1, r3
 8008aa4:	4ba3      	ldr	r3, [pc, #652]	; (8008d34 <prvProcessDHCPReplies+0x2fc>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	0a1b      	lsrs	r3, r3, #8
 8008aaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008aae:	4319      	orrs	r1, r3
 8008ab0:	4ba0      	ldr	r3, [pc, #640]	; (8008d34 <prvProcessDHCPReplies+0x2fc>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	0e1b      	lsrs	r3, r3, #24
 8008ab6:	430b      	orrs	r3, r1
			( pxDHCPMessage->ucOpcode == ( uint8_t ) dhcpREPLY_OPCODE ) &&
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	f040 8131 	bne.w	8008d20 <prvProcessDHCPReplies+0x2e8>
		{
			if( memcmp( ( void * ) &( pxDHCPMessage->ucClientHardwareAddress ), ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) ) == 0 )
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	331c      	adds	r3, #28
 8008ac2:	2206      	movs	r2, #6
 8008ac4:	499d      	ldr	r1, [pc, #628]	; (8008d3c <prvProcessDHCPReplies+0x304>)
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f007 fd1a 	bl	8010500 <memcmp>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f040 8126 	bne.w	8008d20 <prvProcessDHCPReplies+0x2e8>
			{
				/* None of the essential options have been processed yet. */
				ulProcessed = 0ul;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	63bb      	str	r3, [r7, #56]	; 0x38

				/* Walk through the options until the dhcpOPTION_END_BYTE byte
				is found, taking care not to walk off the end of the options. */
				pucByte = &( pxDHCPMessage->ucFirstOptionByte );
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	33f0      	adds	r3, #240	; 0xf0
 8008adc:	63fb      	str	r3, [r7, #60]	; 0x3c
				pucLastByte = &( pucUDPPayload[ lBytes - dhcpMAX_OPTION_LENGTH_OF_INTEREST ] );
 8008ade:	69fa      	ldr	r2, [r7, #28]
 8008ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae2:	3b02      	subs	r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	627b      	str	r3, [r7, #36]	; 0x24

				while( pucByte < pucLastByte )
 8008ae8:	e107      	b.n	8008cfa <prvProcessDHCPReplies+0x2c2>
				{
					ucOptionCode = pucByte[ 0 ];
 8008aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					if( ucOptionCode == dhcpOPTION_END_BYTE )
 8008af2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008af6:	2bff      	cmp	r3, #255	; 0xff
 8008af8:	f000 8105 	beq.w	8008d06 <prvProcessDHCPReplies+0x2ce>
					{
						/* Ready, the last byte has been seen. */
						break;
					}
					if( ucOptionCode == dhcpZERO_PAD_OPTION_CODE )
 8008afc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d103      	bne.n	8008b0c <prvProcessDHCPReplies+0xd4>
					{
						/* The value zero is used as a pad byte,
						it is not followed by a length byte. */
						pucByte += 1;
 8008b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b06:	3301      	adds	r3, #1
 8008b08:	63fb      	str	r3, [r7, #60]	; 0x3c
						continue;
 8008b0a:	e0f6      	b.n	8008cfa <prvProcessDHCPReplies+0x2c2>
					}
					ucLength = pucByte[ 1 ];
 8008b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b0e:	785b      	ldrb	r3, [r3, #1]
 8008b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					pucByte += 2;
 8008b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b16:	3302      	adds	r3, #2
 8008b18:	63fb      	str	r3, [r7, #60]	; 0x3c

					/* In most cases, a 4-byte network-endian parameter follows,
					just get it once here and use later */
					memcpy( ( void * ) &( ulParameter ), ( void * ) pucByte, ( size_t ) sizeof( ulParameter ) );
 8008b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	60fb      	str	r3, [r7, #12]

					switch( ucOptionCode )
 8008b20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b24:	3b01      	subs	r3, #1
 8008b26:	2b35      	cmp	r3, #53	; 0x35
 8008b28:	f200 80d3 	bhi.w	8008cd2 <prvProcessDHCPReplies+0x29a>
 8008b2c:	a201      	add	r2, pc, #4	; (adr r2, 8008b34 <prvProcessDHCPReplies+0xfc>)
 8008b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b32:	bf00      	nop
 8008b34:	08008c37 	.word	0x08008c37
 8008b38:	08008cd3 	.word	0x08008cd3
 8008b3c:	08008c47 	.word	0x08008c47
 8008b40:	08008cd3 	.word	0x08008cd3
 8008b44:	08008cd3 	.word	0x08008cd3
 8008b48:	08008c57 	.word	0x08008c57
 8008b4c:	08008cd3 	.word	0x08008cd3
 8008b50:	08008cd3 	.word	0x08008cd3
 8008b54:	08008cd3 	.word	0x08008cd3
 8008b58:	08008cd3 	.word	0x08008cd3
 8008b5c:	08008cd3 	.word	0x08008cd3
 8008b60:	08008cd3 	.word	0x08008cd3
 8008b64:	08008cd3 	.word	0x08008cd3
 8008b68:	08008cd3 	.word	0x08008cd3
 8008b6c:	08008cd3 	.word	0x08008cd3
 8008b70:	08008cd3 	.word	0x08008cd3
 8008b74:	08008cd3 	.word	0x08008cd3
 8008b78:	08008cd3 	.word	0x08008cd3
 8008b7c:	08008cd3 	.word	0x08008cd3
 8008b80:	08008cd3 	.word	0x08008cd3
 8008b84:	08008cd3 	.word	0x08008cd3
 8008b88:	08008cd3 	.word	0x08008cd3
 8008b8c:	08008cd3 	.word	0x08008cd3
 8008b90:	08008cd3 	.word	0x08008cd3
 8008b94:	08008cd3 	.word	0x08008cd3
 8008b98:	08008cd3 	.word	0x08008cd3
 8008b9c:	08008cd3 	.word	0x08008cd3
 8008ba0:	08008cd3 	.word	0x08008cd3
 8008ba4:	08008cd3 	.word	0x08008cd3
 8008ba8:	08008cd3 	.word	0x08008cd3
 8008bac:	08008cd3 	.word	0x08008cd3
 8008bb0:	08008cd3 	.word	0x08008cd3
 8008bb4:	08008cd3 	.word	0x08008cd3
 8008bb8:	08008cd3 	.word	0x08008cd3
 8008bbc:	08008cd3 	.word	0x08008cd3
 8008bc0:	08008cd3 	.word	0x08008cd3
 8008bc4:	08008cd3 	.word	0x08008cd3
 8008bc8:	08008cd3 	.word	0x08008cd3
 8008bcc:	08008cd3 	.word	0x08008cd3
 8008bd0:	08008cd3 	.word	0x08008cd3
 8008bd4:	08008cd3 	.word	0x08008cd3
 8008bd8:	08008cd3 	.word	0x08008cd3
 8008bdc:	08008cd3 	.word	0x08008cd3
 8008be0:	08008cd3 	.word	0x08008cd3
 8008be4:	08008cd3 	.word	0x08008cd3
 8008be8:	08008cd3 	.word	0x08008cd3
 8008bec:	08008cd3 	.word	0x08008cd3
 8008bf0:	08008cd3 	.word	0x08008cd3
 8008bf4:	08008cd3 	.word	0x08008cd3
 8008bf8:	08008cd3 	.word	0x08008cd3
 8008bfc:	08008c8d 	.word	0x08008c8d
 8008c00:	08008cd3 	.word	0x08008cd3
 8008c04:	08008c0d 	.word	0x08008c0d
 8008c08:	08008c5f 	.word	0x08008c5f
					{
						case dhcpMESSAGE_TYPE_OPTION_CODE	:

							if( *pucByte == ( uint8_t ) xExpectedMessageType )
 8008c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c0e:	781a      	ldrb	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d103      	bne.n	8008c20 <prvProcessDHCPReplies+0x1e8>
							{
								/* The message type is the message type the
								state machine is expecting. */
								ulProcessed++;
 8008c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	63bb      	str	r3, [r7, #56]	; 0x38
							}
							else
							{
								/* Don't process other message types. */
							}
							break;
 8008c1e:	e05a      	b.n	8008cd6 <prvProcessDHCPReplies+0x29e>
							else if( *pucByte == ( uint8_t ) dhcpMESSAGE_TYPE_NACK )
 8008c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2b06      	cmp	r3, #6
 8008c26:	d156      	bne.n	8008cd6 <prvProcessDHCPReplies+0x29e>
								if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_ACK )
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b05      	cmp	r3, #5
 8008c2c:	d153      	bne.n	8008cd6 <prvProcessDHCPReplies+0x29e>
									xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 8008c2e:	4b41      	ldr	r3, [pc, #260]	; (8008d34 <prvProcessDHCPReplies+0x2fc>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	771a      	strb	r2, [r3, #28]
							break;
 8008c34:	e04f      	b.n	8008cd6 <prvProcessDHCPReplies+0x29e>

						case dhcpSUBNET_MASK_OPTION_CODE :

							if( ucLength == sizeof( uint32_t ) )
 8008c36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008c3a:	2b04      	cmp	r3, #4
 8008c3c:	d14d      	bne.n	8008cda <prvProcessDHCPReplies+0x2a2>
							{
								xNetworkAddressing.ulNetMask = ulParameter;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	4a3f      	ldr	r2, [pc, #252]	; (8008d40 <prvProcessDHCPReplies+0x308>)
 8008c42:	6053      	str	r3, [r2, #4]
							}
							break;
 8008c44:	e049      	b.n	8008cda <prvProcessDHCPReplies+0x2a2>

						case dhcpGATEWAY_OPTION_CODE :

							if( ucLength == sizeof( uint32_t ) )
 8008c46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d147      	bne.n	8008cde <prvProcessDHCPReplies+0x2a6>
							{
								/* ulProcessed is not incremented in this case
								because the gateway is not essential. */
								xNetworkAddressing.ulGatewayAddress = ulParameter;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	4a3b      	ldr	r2, [pc, #236]	; (8008d40 <prvProcessDHCPReplies+0x308>)
 8008c52:	6093      	str	r3, [r2, #8]
							}
							break;
 8008c54:	e043      	b.n	8008cde <prvProcessDHCPReplies+0x2a6>
						case dhcpDNS_SERVER_OPTIONS_CODE :

							/* ulProcessed is not incremented in this case
							because the DNS server is not essential.  Only the
							first DNS server address is taken. */
							xNetworkAddressing.ulDNSServerAddress = ulParameter;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4a39      	ldr	r2, [pc, #228]	; (8008d40 <prvProcessDHCPReplies+0x308>)
 8008c5a:	60d3      	str	r3, [r2, #12]
							break;
 8008c5c:	e044      	b.n	8008ce8 <prvProcessDHCPReplies+0x2b0>

						case dhcpSERVER_IP_ADDRESS_OPTION_CODE :

							if( ucLength == sizeof( uint32_t ) )
 8008c5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008c62:	2b04      	cmp	r3, #4
 8008c64:	d13d      	bne.n	8008ce2 <prvProcessDHCPReplies+0x2aa>
							{
								if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_OFFER )
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d106      	bne.n	8008c7a <prvProcessDHCPReplies+0x242>
								{
									/* Offers state the replying server. */
									ulProcessed++;
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6e:	3301      	adds	r3, #1
 8008c70:	63bb      	str	r3, [r7, #56]	; 0x38
									xDHCPData.ulDHCPServerAddress = ulParameter;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	4a2f      	ldr	r2, [pc, #188]	; (8008d34 <prvProcessDHCPReplies+0x2fc>)
 8008c76:	6093      	str	r3, [r2, #8]
									{
										ulProcessed++;
									}
								}
							}
							break;
 8008c78:	e033      	b.n	8008ce2 <prvProcessDHCPReplies+0x2aa>
									if( xDHCPData.ulDHCPServerAddress == ulParameter )
 8008c7a:	4b2e      	ldr	r3, [pc, #184]	; (8008d34 <prvProcessDHCPReplies+0x2fc>)
 8008c7c:	689a      	ldr	r2, [r3, #8]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d12e      	bne.n	8008ce2 <prvProcessDHCPReplies+0x2aa>
										ulProcessed++;
 8008c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c86:	3301      	adds	r3, #1
 8008c88:	63bb      	str	r3, [r7, #56]	; 0x38
							break;
 8008c8a:	e02a      	b.n	8008ce2 <prvProcessDHCPReplies+0x2aa>

						case dhcpLEASE_TIME_OPTION_CODE :

							if( ucLength == sizeof( &( xDHCPData.ulLeaseTime ) ) )
 8008c8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	d128      	bne.n	8008ce6 <prvProcessDHCPReplies+0x2ae>
							{
								/* ulProcessed is not incremented in this case
								because the lease time is not essential. */
								/* The DHCP parameter is in seconds, convert
								to host-endian format. */
								xDHCPData.ulLeaseTime = FreeRTOS_ntohl( ulParameter );
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	061a      	lsls	r2, r3, #24
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	0a1b      	lsrs	r3, r3, #8
 8008ca6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008caa:	431a      	orrs	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	0e1b      	lsrs	r3, r3, #24
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	4a20      	ldr	r2, [pc, #128]	; (8008d34 <prvProcessDHCPReplies+0x2fc>)
 8008cb4:	60d3      	str	r3, [r2, #12]

								/* Divide the lease time by two to ensure a
								renew request is sent before the lease actually
								expires. */
								xDHCPData.ulLeaseTime >>= 1UL;
 8008cb6:	4b1f      	ldr	r3, [pc, #124]	; (8008d34 <prvProcessDHCPReplies+0x2fc>)
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	085b      	lsrs	r3, r3, #1
 8008cbc:	4a1d      	ldr	r2, [pc, #116]	; (8008d34 <prvProcessDHCPReplies+0x2fc>)
 8008cbe:	60d3      	str	r3, [r2, #12]

								/* Multiply with configTICK_RATE_HZ to get clock
								ticks. */
								xDHCPData.ulLeaseTime = configTICK_RATE_HZ * xDHCPData.ulLeaseTime;
 8008cc0:	4b1c      	ldr	r3, [pc, #112]	; (8008d34 <prvProcessDHCPReplies+0x2fc>)
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008cc8:	fb02 f303 	mul.w	r3, r2, r3
 8008ccc:	4a19      	ldr	r2, [pc, #100]	; (8008d34 <prvProcessDHCPReplies+0x2fc>)
 8008cce:	60d3      	str	r3, [r2, #12]
							}
							break;
 8008cd0:	e009      	b.n	8008ce6 <prvProcessDHCPReplies+0x2ae>

						default :

							/* Not interested in this field. */

							break;
 8008cd2:	bf00      	nop
 8008cd4:	e008      	b.n	8008ce8 <prvProcessDHCPReplies+0x2b0>
							break;
 8008cd6:	bf00      	nop
 8008cd8:	e006      	b.n	8008ce8 <prvProcessDHCPReplies+0x2b0>
							break;
 8008cda:	bf00      	nop
 8008cdc:	e004      	b.n	8008ce8 <prvProcessDHCPReplies+0x2b0>
							break;
 8008cde:	bf00      	nop
 8008ce0:	e002      	b.n	8008ce8 <prvProcessDHCPReplies+0x2b0>
							break;
 8008ce2:	bf00      	nop
 8008ce4:	e000      	b.n	8008ce8 <prvProcessDHCPReplies+0x2b0>
							break;
 8008ce6:	bf00      	nop
					}

					/* Jump over the data to find the next option code. */
					if( ucLength == 0u )
 8008ce8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00c      	beq.n	8008d0a <prvProcessDHCPReplies+0x2d2>
					{
						break;
					}
					else
					{
						pucByte += ucLength;
 8008cf0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008cf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008cf6:	4413      	add	r3, r2
 8008cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
				while( pucByte < pucLastByte )
 8008cfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	f4ff aef3 	bcc.w	8008aea <prvProcessDHCPReplies+0xb2>
 8008d04:	e002      	b.n	8008d0c <prvProcessDHCPReplies+0x2d4>
						break;
 8008d06:	bf00      	nop
 8008d08:	e000      	b.n	8008d0c <prvProcessDHCPReplies+0x2d4>
						break;
 8008d0a:	bf00      	nop
					}
				}

				/* Were all the mandatory options received? */
				if( ulProcessed >= ulMandatoryOptions )
 8008d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d305      	bcc.n	8008d20 <prvProcessDHCPReplies+0x2e8>
				{
					/* HT:endian: used to be network order */
					xDHCPData.ulOfferedIPAddress = pxDHCPMessage->ulYourIPAddress_yiaddr;
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	4a06      	ldr	r2, [pc, #24]	; (8008d34 <prvProcessDHCPReplies+0x2fc>)
 8008d1a:	6053      	str	r3, [r2, #4]
					FreeRTOS_printf( ( "vDHCPProcess: offer %lxip\n", FreeRTOS_ntohl( xDHCPData.ulOfferedIPAddress ) ) );
					xReturn = pdPASS;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}

		FreeRTOS_ReleaseUDPPayloadBuffer( ( void * ) pucUDPPayload );
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f001 f80e 	bl	8009d44 <FreeRTOS_ReleaseUDPPayloadBuffer>
	}

	return xReturn;
 8008d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3740      	adds	r7, #64	; 0x40
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	200046d0 	.word	0x200046d0
 8008d38:	63538263 	.word	0x63538263
 8008d3c:	200000a0 	.word	0x200000a0
 8008d40:	20004774 	.word	0x20004774

08008d44 <prvCreatePartDHCPMessage>:
/*-----------------------------------------------------------*/

static uint8_t *prvCreatePartDHCPMessage( struct freertos_sockaddr *pxAddress, BaseType_t xOpcode, const uint8_t * const pucOptionsArray, size_t *pxOptionsArraySize )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b08a      	sub	sp, #40	; 0x28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	603b      	str	r3, [r7, #0]
DHCPMessage_t *pxDHCPMessage;
size_t xRequiredBufferSize = sizeof( DHCPMessage_t ) + *pxOptionsArraySize;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	33f1      	adds	r3, #241	; 0xf1
 8008d58:	627b      	str	r3, [r7, #36]	; 0x24
uint8_t *pucUDPPayloadBuffer;

#if( ipconfigDHCP_REGISTER_HOSTNAME == 1 )
	const char *pucHostName = pcApplicationHostnameHook ();
 8008d5a:	f006 fd23 	bl	800f7a4 <pcApplicationHostnameHook>
 8008d5e:	6238      	str	r0, [r7, #32]
	size_t xNameLength = strlen( pucHostName );
 8008d60:	6a38      	ldr	r0, [r7, #32]
 8008d62:	f7f7 fa3d 	bl	80001e0 <strlen>
 8008d66:	61f8      	str	r0, [r7, #28]
	uint8_t *pucPtr;

	xRequiredBufferSize += ( 2 + xNameLength );
 8008d68:	69fa      	ldr	r2, [r7, #28]
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	4413      	add	r3, r2
 8008d6e:	3302      	adds	r3, #2
 8008d70:	627b      	str	r3, [r7, #36]	; 0x24
	/* Get a buffer.  This uses a maximum delay, but the delay will be capped
	to ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS so the return value still needs to
	be test. */
	do
	{
	} while( ( pucUDPPayloadBuffer = ( uint8_t * ) FreeRTOS_GetUDPPayloadBuffer( xRequiredBufferSize, portMAX_DELAY ) ) == NULL );
 8008d72:	f04f 31ff 	mov.w	r1, #4294967295
 8008d76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d78:	f000 ff78 	bl	8009c6c <FreeRTOS_GetUDPPayloadBuffer>
 8008d7c:	61b8      	str	r0, [r7, #24]
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d0f6      	beq.n	8008d72 <prvCreatePartDHCPMessage+0x2e>

	pxDHCPMessage = ( DHCPMessage_t * ) pucUDPPayloadBuffer;
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	617b      	str	r3, [r7, #20]

	/* Most fields need to be zero. */
	memset( ( void * ) pxDHCPMessage, 0x00, sizeof( DHCPMessage_t ) );
 8008d88:	22f1      	movs	r2, #241	; 0xf1
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	6978      	ldr	r0, [r7, #20]
 8008d8e:	f007 fbeb 	bl	8010568 <memset>

	/* Create the message. */
	pxDHCPMessage->ucOpcode = ( uint8_t ) xOpcode;
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	701a      	strb	r2, [r3, #0]
	pxDHCPMessage->ucAddressType = ( uint8_t ) dhcpADDRESS_TYPE_ETHERNET;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	705a      	strb	r2, [r3, #1]
	pxDHCPMessage->ucAddressLength = ( uint8_t ) dhcpETHERNET_ADDRESS_LENGTH;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	2206      	movs	r2, #6
 8008da4:	709a      	strb	r2, [r3, #2]

	/* ulTransactionID doesn't really need a htonl() translation, but when DHCP
	times out, it is nicer to see an increasing number in this ID field */
	pxDHCPMessage->ulTransactionID = FreeRTOS_htonl( xDHCPData.ulTransactionId );
 8008da6:	4b40      	ldr	r3, [pc, #256]	; (8008ea8 <prvCreatePartDHCPMessage+0x164>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	061a      	lsls	r2, r3, #24
 8008dac:	4b3e      	ldr	r3, [pc, #248]	; (8008ea8 <prvCreatePartDHCPMessage+0x164>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	021b      	lsls	r3, r3, #8
 8008db2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008db6:	431a      	orrs	r2, r3
 8008db8:	4b3b      	ldr	r3, [pc, #236]	; (8008ea8 <prvCreatePartDHCPMessage+0x164>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	0a1b      	lsrs	r3, r3, #8
 8008dbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	4b38      	ldr	r3, [pc, #224]	; (8008ea8 <prvCreatePartDHCPMessage+0x164>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	0e1b      	lsrs	r3, r3, #24
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	605a      	str	r2, [r3, #4]
	pxDHCPMessage->ulDHCPCookie = ( uint32_t ) dhcpCOOKIE;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8008dd8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8008de2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8008de6:	2200      	movs	r2, #0
 8008de8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8008dec:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8008df0:	2200      	movs	r2, #0
 8008df2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8008df6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
	if( xDHCPData.xUseBroadcast != pdFALSE )
 8008dfa:	4b2b      	ldr	r3, [pc, #172]	; (8008ea8 <prvCreatePartDHCPMessage+0x164>)
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d007      	beq.n	8008e12 <prvCreatePartDHCPMessage+0xce>
	{
		pxDHCPMessage->usFlags = ( uint16_t ) dhcpBROADCAST;
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e0a:	729a      	strb	r2, [r3, #10]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	72da      	strb	r2, [r3, #11]
 8008e10:	e004      	b.n	8008e1c <prvCreatePartDHCPMessage+0xd8>
	}
	else
	{
		pxDHCPMessage->usFlags = 0u;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2200      	movs	r2, #0
 8008e16:	729a      	strb	r2, [r3, #10]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	72da      	strb	r2, [r3, #11]
	}

	memcpy( ( void * ) &( pxDHCPMessage->ucClientHardwareAddress[ 0 ] ), ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	331c      	adds	r3, #28
 8008e20:	2206      	movs	r2, #6
 8008e22:	4922      	ldr	r1, [pc, #136]	; (8008eac <prvCreatePartDHCPMessage+0x168>)
 8008e24:	4618      	mov	r0, r3
 8008e26:	f007 fb7a 	bl	801051e <memcpy>

	/* Copy in the const part of the options options. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET ] ), ( void * ) pucOptionsArray, *pxOptionsArraySize );
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	6879      	ldr	r1, [r7, #4]
 8008e38:	f007 fb71 	bl	801051e <memcpy>
	{
		/* With this option, the hostname can be registered as well which makes
		it easier to lookup a device in a router's list of DHCP clients. */

		/* Point to where the OPTION_END was stored to add data. */
		pucPtr = &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + ( *pxOptionsArraySize - 1 ) ] );
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	33ef      	adds	r3, #239	; 0xef
 8008e42:	69ba      	ldr	r2, [r7, #24]
 8008e44:	4413      	add	r3, r2
 8008e46:	613b      	str	r3, [r7, #16]
		pucPtr[ 0 ] = dhcpDNS_HOSTNAME_OPTIONS_CODE;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	220c      	movs	r2, #12
 8008e4c:	701a      	strb	r2, [r3, #0]
		pucPtr[ 1 ] = ( uint8_t ) xNameLength;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	3301      	adds	r3, #1
 8008e52:	69fa      	ldr	r2, [r7, #28]
 8008e54:	b2d2      	uxtb	r2, r2
 8008e56:	701a      	strb	r2, [r3, #0]
		memcpy( ( void *) ( pucPtr + 2 ), pucHostName, xNameLength );
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	3302      	adds	r3, #2
 8008e5c:	69fa      	ldr	r2, [r7, #28]
 8008e5e:	6a39      	ldr	r1, [r7, #32]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f007 fb5c 	bl	801051e <memcpy>
		pucPtr[ 2 + xNameLength ] = dhcpOPTION_END_BYTE;
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	3302      	adds	r3, #2
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	22ff      	movs	r2, #255	; 0xff
 8008e70:	701a      	strb	r2, [r3, #0]
		*pxOptionsArraySize += ( 2 + xNameLength );
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	4413      	add	r3, r2
 8008e7a:	1c9a      	adds	r2, r3, #2
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	601a      	str	r2, [r3, #0]
	}
	#endif

	/* Map in the client identifier. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpCLIENT_IDENTIFIER_OFFSET ] ),
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	33f5      	adds	r3, #245	; 0xf5
 8008e84:	2206      	movs	r2, #6
 8008e86:	4909      	ldr	r1, [pc, #36]	; (8008eac <prvCreatePartDHCPMessage+0x168>)
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f007 fb48 	bl	801051e <memcpy>
		( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );

	/* Set the addressing. */
	pxAddress->sin_addr = ipBROADCAST_IP_ADDRESS;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f04f 32ff 	mov.w	r2, #4294967295
 8008e94:	605a      	str	r2, [r3, #4]
	pxAddress->sin_port = ( uint16_t ) dhcpSERVER_PORT;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f44f 4286 	mov.w	r2, #17152	; 0x4300
 8008e9c:	805a      	strh	r2, [r3, #2]

	return pucUDPPayloadBuffer;
 8008e9e:	69bb      	ldr	r3, [r7, #24]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3728      	adds	r7, #40	; 0x28
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	200046d0 	.word	0x200046d0
 8008eac:	200000a0 	.word	0x200000a0

08008eb0 <prvSendDHCPRequest>:
/*-----------------------------------------------------------*/

static void prvSendDHCPRequest( void )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af02      	add	r7, sp, #8
	dhcpCLIENT_IDENTIFIER_OPTION_CODE, 6, 0, 0, 0, 0, 0, 0,			/* Client identifier. */
	dhcpREQUEST_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,				/* The IP address being requested. */
	dhcpSERVER_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,				/* The IP address of the DHCP server. */
	dhcpOPTION_END_BYTE
};
size_t xOptionsLength = sizeof( ucDHCPRequestOptions );
 8008eb6:	2318      	movs	r3, #24
 8008eb8:	603b      	str	r3, [r7, #0]

	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress, dhcpREQUEST_OPCODE, ucDHCPRequestOptions, &xOptionsLength );
 8008eba:	463b      	mov	r3, r7
 8008ebc:	1d38      	adds	r0, r7, #4
 8008ebe:	4a13      	ldr	r2, [pc, #76]	; (8008f0c <prvSendDHCPRequest+0x5c>)
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	f7ff ff3f 	bl	8008d44 <prvCreatePartDHCPMessage>
 8008ec6:	60f8      	str	r0, [r7, #12]

	/* Copy in the IP address being requested. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpREQUESTED_IP_ADDRESS_OFFSET ] ),
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	33fd      	adds	r3, #253	; 0xfd
 8008ecc:	4a10      	ldr	r2, [pc, #64]	; (8008f10 <prvSendDHCPRequest+0x60>)
 8008ece:	6852      	ldr	r2, [r2, #4]
 8008ed0:	601a      	str	r2, [r3, #0]
		( void * ) &( xDHCPData.ulOfferedIPAddress ), sizeof( xDHCPData.ulOfferedIPAddress ) );

	/* Copy in the address of the DHCP server being used. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpDHCP_SERVER_IP_ADDRESS_OFFSET ] ),
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f203 1303 	addw	r3, r3, #259	; 0x103
 8008ed8:	4a0d      	ldr	r2, [pc, #52]	; (8008f10 <prvSendDHCPRequest+0x60>)
 8008eda:	6892      	ldr	r2, [r2, #8]
 8008edc:	601a      	str	r2, [r3, #0]
		( void * ) &( xDHCPData.ulDHCPServerAddress ), sizeof( xDHCPData.ulDHCPServerAddress ) );

	FreeRTOS_debug_printf( ( "vDHCPProcess: reply %lxip\n", FreeRTOS_ntohl( xDHCPData.ulOfferedIPAddress ) ) );
	iptraceSENDING_DHCP_REQUEST();

	if( FreeRTOS_sendto( xDHCPData.xDHCPSocket, pucUDPPayloadBuffer, ( sizeof( DHCPMessage_t ) + xOptionsLength ), FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
 8008ede:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <prvSendDHCPRequest+0x60>)
 8008ee0:	6a18      	ldr	r0, [r3, #32]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	f103 02f1 	add.w	r2, r3, #241	; 0xf1
 8008ee8:	2308      	movs	r3, #8
 8008eea:	9301      	str	r3, [sp, #4]
 8008eec:	1d3b      	adds	r3, r7, #4
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	68f9      	ldr	r1, [r7, #12]
 8008ef4:	f001 fdff 	bl	800aaf6 <FreeRTOS_sendto>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d102      	bne.n	8008f04 <prvSendDHCPRequest+0x54>
	{
		/* The packet was not successfully queued for sending and must be
		returned to the stack. */
		FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f000 ff20 	bl	8009d44 <FreeRTOS_ReleaseUDPPayloadBuffer>
	}
}
 8008f04:	bf00      	nop
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	08010970 	.word	0x08010970
 8008f10:	200046d0 	.word	0x200046d0

08008f14 <prvSendDHCPDiscover>:
/*-----------------------------------------------------------*/

static void prvSendDHCPDiscover( void )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af02      	add	r7, sp, #8
	dhcpMESSAGE_TYPE_OPTION_CODE, 1, dhcpMESSAGE_TYPE_DISCOVER,					/* Message type option. */
	dhcpCLIENT_IDENTIFIER_OPTION_CODE, 6, 0, 0, 0, 0, 0, 0,						/* Client identifier. */
	dhcpPARAMETER_REQUEST_OPTION_CODE, 3, dhcpSUBNET_MASK_OPTION_CODE, dhcpGATEWAY_OPTION_CODE, dhcpDNS_SERVER_OPTIONS_CODE,	/* Parameter request option. */
	dhcpOPTION_END_BYTE
};
size_t xOptionsLength = sizeof( ucDHCPDiscoverOptions );
 8008f1a:	2311      	movs	r3, #17
 8008f1c:	603b      	str	r3, [r7, #0]

	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress, dhcpREQUEST_OPCODE, ucDHCPDiscoverOptions, &xOptionsLength );
 8008f1e:	463b      	mov	r3, r7
 8008f20:	1d38      	adds	r0, r7, #4
 8008f22:	4a0e      	ldr	r2, [pc, #56]	; (8008f5c <prvSendDHCPDiscover+0x48>)
 8008f24:	2101      	movs	r1, #1
 8008f26:	f7ff ff0d 	bl	8008d44 <prvCreatePartDHCPMessage>
 8008f2a:	60f8      	str	r0, [r7, #12]

	FreeRTOS_debug_printf( ( "vDHCPProcess: discover\n" ) );
	iptraceSENDING_DHCP_DISCOVER();

	if( FreeRTOS_sendto( xDHCPData.xDHCPSocket, pucUDPPayloadBuffer, ( sizeof( DHCPMessage_t ) + xOptionsLength ), FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
 8008f2c:	4b0c      	ldr	r3, [pc, #48]	; (8008f60 <prvSendDHCPDiscover+0x4c>)
 8008f2e:	6a18      	ldr	r0, [r3, #32]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	f103 02f1 	add.w	r2, r3, #241	; 0xf1
 8008f36:	2308      	movs	r3, #8
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	1d3b      	adds	r3, r7, #4
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	2301      	movs	r3, #1
 8008f40:	68f9      	ldr	r1, [r7, #12]
 8008f42:	f001 fdd8 	bl	800aaf6 <FreeRTOS_sendto>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d102      	bne.n	8008f52 <prvSendDHCPDiscover+0x3e>
	{
		/* The packet was not successfully queued for sending and must be
		returned to the stack. */
		FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f000 fef9 	bl	8009d44 <FreeRTOS_ReleaseUDPPayloadBuffer>
	}
}
 8008f52:	bf00      	nop
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	08010988 	.word	0x08010988
 8008f60:	200046d0 	.word	0x200046d0

08008f64 <usChar2u16>:
			( ( ( uint32_t )apChr[3] ) );
}

static portINLINE uint16_t usChar2u16 (const uint8_t *apChr);
static portINLINE uint16_t usChar2u16 (const uint8_t *apChr)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
	return ( uint16_t )
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	021b      	lsls	r3, r3, #8
 8008f74:	b29a      	uxth	r2, r3
			  ( ( ( uint32_t )apChr[1] ) ) );
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	b29b      	uxth	r3, r3
	return ( uint16_t )
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	b29b      	uxth	r3, r3
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	370c      	adds	r7, #12
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
	...

08008f90 <vDNSInitialise>:
	/*-----------------------------------------------------------*/

	/* Initialise the list of call-back structures. */
	void vDNSInitialise( void );
	void vDNSInitialise( void )
	{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	af00      	add	r7, sp, #0
		vListInitialise( &xCallbackList );
 8008f94:	4802      	ldr	r0, [pc, #8]	; (8008fa0 <vDNSInitialise+0x10>)
 8008f96:	f7fc fe16 	bl	8005bc6 <vListInitialise>
	}
 8008f9a:	bf00      	nop
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20004754 	.word	0x20004754

08008fa4 <vDNSCheckCallBack>:
	As soon as the list hase become empty, the DNS timer will be stopped
	In case pvSearchID is supplied, the user wants to cancel a DNS request
	*/
	void vDNSCheckCallBack( void *pvSearchID );
	void vDNSCheckCallBack( void *pvSearchID )
	{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
	const ListItem_t *pxIterator;
	const MiniListItem_t* xEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xCallbackList );
 8008fac:	4b25      	ldr	r3, [pc, #148]	; (8009044 <vDNSCheckCallBack+0xa0>)
 8008fae:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8008fb0:	f7fe f9be 	bl	8007330 <vTaskSuspendAll>
		{
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	617b      	str	r3, [r7, #20]
 8008fba:	e031      	b.n	8009020 <vDNSCheckCallBack+0x7c>
				 pxIterator != ( const ListItem_t * ) xEnd;
				  )
			{
				DNSCallback_t *pxCallback = ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	60fb      	str	r3, [r7, #12]
				/* Move to the next item because we might remove this item */
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	617b      	str	r3, [r7, #20]
				if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00d      	beq.n	8008fea <vDNSCheckCallBack+0x46>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	691a      	ldr	r2, [r3, #16]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d108      	bne.n	8008fea <vDNSCheckCallBack+0x46>
				{
					uxListRemove( &pxCallback->xListItem );
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3314      	adds	r3, #20
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fc fe7c 	bl	8005cda <uxListRemove>
					vPortFree( pxCallback );
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f7fd f968 	bl	80062b8 <vPortFree>
 8008fe8:	e01a      	b.n	8009020 <vDNSCheckCallBack+0x7c>
				}
				else if( xTaskCheckForTimeOut( &pxCallback->xTimeoutState, &pxCallback->xRemaningTime ) != pdFALSE )
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	3308      	adds	r3, #8
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fe fcc8 	bl	8007988 <xTaskCheckForTimeOut>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d010      	beq.n	8009020 <vDNSCheckCallBack+0x7c>
				{
					pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0 );
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	f102 0028 	add.w	r0, r2, #40	; 0x28
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	6911      	ldr	r1, [r2, #16]
 800900c:	2200      	movs	r2, #0
 800900e:	4798      	blx	r3
					uxListRemove( &pxCallback->xListItem );
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	3314      	adds	r3, #20
 8009014:	4618      	mov	r0, r3
 8009016:	f7fc fe60 	bl	8005cda <uxListRemove>
					vPortFree( ( void * ) pxCallback );
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f7fd f94c 	bl	80062b8 <vPortFree>
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	429a      	cmp	r2, r3
 8009026:	d1c9      	bne.n	8008fbc <vDNSCheckCallBack+0x18>
				}
			}
		}
		xTaskResumeAll();
 8009028:	f7fe f990 	bl	800734c <xTaskResumeAll>

		if( listLIST_IS_EMPTY( &xCallbackList ) )
 800902c:	4b06      	ldr	r3, [pc, #24]	; (8009048 <vDNSCheckCallBack+0xa4>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d102      	bne.n	800903a <vDNSCheckCallBack+0x96>
		{
			vIPSetDnsTimerEnableState( pdFALSE );
 8009034:	2000      	movs	r0, #0
 8009036:	f001 fa61 	bl	800a4fc <vIPSetDnsTimerEnableState>
		}
	}
 800903a:	bf00      	nop
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	2000475c 	.word	0x2000475c
 8009048:	20004754 	.word	0x20004754

0800904c <vDNSDoCallback>:

	/* A DNS reply was received, see if there is any matching entry and
	call the handler. */
	static void vDNSDoCallback( TickType_t xIdentifier, const char *pcName, uint32_t ulIPAddress );
	static void vDNSDoCallback( TickType_t xIdentifier, const char *pcName, uint32_t ulIPAddress )
	{
 800904c:	b580      	push	{r7, lr}
 800904e:	b088      	sub	sp, #32
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
		const ListItem_t *pxIterator;
		const MiniListItem_t* xEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xCallbackList );
 8009058:	4b1a      	ldr	r3, [pc, #104]	; (80090c4 <vDNSDoCallback+0x78>)
 800905a:	61bb      	str	r3, [r7, #24]

		vTaskSuspendAll();
 800905c:	f7fe f968 	bl	8007330 <vTaskSuspendAll>
		{
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	61fb      	str	r3, [r7, #28]
 8009066:	e021      	b.n	80090ac <vDNSDoCallback+0x60>
				 pxIterator != ( const ListItem_t * ) xEnd;
				 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
			{
				if( listGET_LIST_ITEM_VALUE( pxIterator ) == xIdentifier )
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	429a      	cmp	r2, r3
 8009070:	d119      	bne.n	80090a6 <vDNSDoCallback+0x5a>
				{
					DNSCallback_t *pxCallback = ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	617b      	str	r3, [r7, #20]
					pxCallback->pCallbackFunction( pcName, pxCallback->pvSearchID, ulIPAddress );
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	697a      	ldr	r2, [r7, #20]
 800907e:	6911      	ldr	r1, [r2, #16]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	68b8      	ldr	r0, [r7, #8]
 8009084:	4798      	blx	r3
					uxListRemove( &pxCallback->xListItem );
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	3314      	adds	r3, #20
 800908a:	4618      	mov	r0, r3
 800908c:	f7fc fe25 	bl	8005cda <uxListRemove>
					vPortFree( pxCallback );
 8009090:	6978      	ldr	r0, [r7, #20]
 8009092:	f7fd f911 	bl	80062b8 <vPortFree>
					if( listLIST_IS_EMPTY( &xCallbackList ) )
 8009096:	4b0c      	ldr	r3, [pc, #48]	; (80090c8 <vDNSDoCallback+0x7c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10b      	bne.n	80090b6 <vDNSDoCallback+0x6a>
					{
						vIPSetDnsTimerEnableState( pdFALSE );
 800909e:	2000      	movs	r0, #0
 80090a0:	f001 fa2c 	bl	800a4fc <vIPSetDnsTimerEnableState>
					}
					break;
 80090a4:	e007      	b.n	80090b6 <vDNSDoCallback+0x6a>
				 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	61fb      	str	r3, [r7, #28]
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80090ac:	69fa      	ldr	r2, [r7, #28]
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d1d9      	bne.n	8009068 <vDNSDoCallback+0x1c>
 80090b4:	e000      	b.n	80090b8 <vDNSDoCallback+0x6c>
					break;
 80090b6:	bf00      	nop
				}
			}
		}
		xTaskResumeAll();
 80090b8:	f7fe f948 	bl	800734c <xTaskResumeAll>
	}
 80090bc:	bf00      	nop
 80090be:	3720      	adds	r7, #32
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	2000475c 	.word	0x2000475c
 80090c8:	20004754 	.word	0x20004754

080090cc <prvReadNameField>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DNS_CACHE == 1 )

	static uint8_t *prvReadNameField( uint8_t *pucByte, char *pcName, BaseType_t xLen )
	{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
	BaseType_t xNameLen = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	617b      	str	r3, [r7, #20]
		/* Determine if the name is the fully coded name, or an offset to the name
		elsewhere in the message. */
		if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80090e4:	2bc0      	cmp	r3, #192	; 0xc0
 80090e6:	d12f      	bne.n	8009148 <prvReadNameField+0x7c>
		{
			/* Jump over the two byte offset. */
			pucByte += sizeof( uint16_t );
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3302      	adds	r3, #2
 80090ec:	60fb      	str	r3, [r7, #12]
 80090ee:	e032      	b.n	8009156 <prvReadNameField+0x8a>
		{
			/* pucByte points to the full name.  Walk over the string. */
			while( *pucByte != 0x00 )
			{
				BaseType_t xCount;
				if( xNameLen && xNameLen < xLen - 1 )
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00c      	beq.n	8009110 <prvReadNameField+0x44>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	1e5a      	subs	r2, r3, #1
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	dd07      	ble.n	8009110 <prvReadNameField+0x44>
					pcName[xNameLen++] = '.';
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	617a      	str	r2, [r7, #20]
 8009106:	461a      	mov	r2, r3
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	4413      	add	r3, r2
 800910c:	222e      	movs	r2, #46	; 0x2e
 800910e:	701a      	strb	r2, [r3, #0]
				for( xCount = *(pucByte++); xCount--; pucByte++ )
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	1c5a      	adds	r2, r3, #1
 8009114:	60fa      	str	r2, [r7, #12]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	613b      	str	r3, [r7, #16]
 800911a:	e010      	b.n	800913e <prvReadNameField+0x72>
				{
					if( xNameLen < xLen - 1 )
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	1e5a      	subs	r2, r3, #1
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	429a      	cmp	r2, r3
 8009124:	dd08      	ble.n	8009138 <prvReadNameField+0x6c>
						pcName[xNameLen++] = *( ( char * ) pucByte );
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	1c5a      	adds	r2, r3, #1
 800912a:	617a      	str	r2, [r7, #20]
 800912c:	461a      	mov	r2, r3
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	4413      	add	r3, r2
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	7812      	ldrb	r2, [r2, #0]
 8009136:	701a      	strb	r2, [r3, #0]
				for( xCount = *(pucByte++); xCount--; pucByte++ )
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3301      	adds	r3, #1
 800913c:	60fb      	str	r3, [r7, #12]
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	1e5a      	subs	r2, r3, #1
 8009142:	613a      	str	r2, [r7, #16]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e9      	bne.n	800911c <prvReadNameField+0x50>
			while( *pucByte != 0x00 )
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1cf      	bne.n	80090f0 <prvReadNameField+0x24>
				}
			}

			pucByte++;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	3301      	adds	r3, #1
 8009154:	60fb      	str	r3, [r7, #12]
		}

		return pucByte;
 8009156:	68fb      	ldr	r3, [r7, #12]
	}
 8009158:	4618      	mov	r0, r3
 800915a:	371c      	adds	r7, #28
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <prvSkipNameField>:
#endif	/* ipconfigUSE_DNS_CACHE == 1 */
/*-----------------------------------------------------------*/

static uint8_t *prvSkipNameField( uint8_t *pucByte )
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
	/* Determine if the name is the fully coded name, or an offset to the name
	elsewhere in the message. */
	if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009174:	2bc0      	cmp	r3, #192	; 0xc0
 8009176:	d109      	bne.n	800918c <prvSkipNameField+0x28>
	{
		/* Jump over the two byte offset. */
		pucByte += sizeof( uint16_t );
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3302      	adds	r3, #2
 800917c:	607b      	str	r3, [r7, #4]
 800917e:	e00c      	b.n	800919a <prvSkipNameField+0x36>
		/* pucByte points to the full name.  Walk over the string. */
		while( *pucByte != 0x00 )
		{
			/* The number of bytes to jump for each name section is stored in the byte
			before the name section. */
			pucByte += ( *pucByte + 1 );
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	3301      	adds	r3, #1
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	4413      	add	r3, r2
 800918a:	607b      	str	r3, [r7, #4]
		while( *pucByte != 0x00 )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1f5      	bne.n	8009180 <prvSkipNameField+0x1c>
		}

		pucByte++;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3301      	adds	r3, #1
 8009198:	607b      	str	r3, [r7, #4]
	}

	return pucByte;
 800919a:	687b      	ldr	r3, [r7, #4]
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <ulDNSHandlePacket>:
/*-----------------------------------------------------------*/

uint32_t ulDNSHandlePacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
uint8_t *pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + sizeof( UDPPacket_t );
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	332a      	adds	r3, #42	; 0x2a
 80091b6:	60fb      	str	r3, [r7, #12]
DNSMessage_t *pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	60bb      	str	r3, [r7, #8]

	prvParseDNSReply( pucUDPPayloadBuffer, ( uint32_t ) pxDNSMessageHeader->usIdentifier );
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	881b      	ldrh	r3, [r3, #0]
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	4619      	mov	r1, r3
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 f805 	bl	80091d4 <prvParseDNSReply>

	/* The packet was not consumed. */
	return pdFAIL;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <prvParseDNSReply>:

#endif /* ipconfigUSE_NBNS */
/*-----------------------------------------------------------*/

static uint32_t prvParseDNSReply( uint8_t *pucUDPPayloadBuffer, TickType_t xIdentifier )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b0b2      	sub	sp, #200	; 0xc8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
DNSMessage_t *pxDNSMessageHeader;
uint32_t ulIPAddress = 0UL;
 80091de:	2300      	movs	r3, #0
 80091e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#if( ipconfigUSE_LLMNR == 1 )
	char *pcRequestedName = NULL;
 80091e4:	2300      	movs	r3, #0
 80091e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
#endif
uint8_t *pucByte;
uint16_t x, usDataLength, usQuestions;
#if( ipconfigUSE_LLMNR == 1 )
	uint16_t usType = 0, usClass = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 80091f0:	2300      	movs	r3, #0
 80091f2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
#endif
#if( ipconfigUSE_DNS_CACHE == 1 )
	char pcName[128] = ""; /*_RB_ What is the significance of 128?  Probably too big to go on the stack for a small MCU but don't know how else it could be made re-entrant.  Might be necessary. */
 80091f6:	2300      	movs	r3, #0
 80091f8:	60fb      	str	r3, [r7, #12]
 80091fa:	f107 0310 	add.w	r3, r7, #16
 80091fe:	227c      	movs	r2, #124	; 0x7c
 8009200:	2100      	movs	r1, #0
 8009202:	4618      	mov	r0, r3
 8009204:	f007 f9b0 	bl	8010568 <memset>
#endif

	pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	if( pxDNSMessageHeader->usIdentifier == ( uint16_t ) xIdentifier )
 800920e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	b29a      	uxth	r2, r3
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	b29b      	uxth	r3, r3
 800921a:	429a      	cmp	r2, r3
 800921c:	f040 8221 	bne.w	8009662 <prvParseDNSReply+0x48e>
	{
		/* Start at the first byte after the header. */
		pucByte = pucUDPPayloadBuffer + sizeof( DNSMessage_t );
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	330c      	adds	r3, #12
 8009224:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Skip any question records. */
		usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 8009228:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800922c:	889b      	ldrh	r3, [r3, #4]
 800922e:	b29b      	uxth	r3, r3
 8009230:	021b      	lsls	r3, r3, #8
 8009232:	b21a      	sxth	r2, r3
 8009234:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009238:	889b      	ldrh	r3, [r3, #4]
 800923a:	b29b      	uxth	r3, r3
 800923c:	0a1b      	lsrs	r3, r3, #8
 800923e:	b29b      	uxth	r3, r3
 8009240:	b21b      	sxth	r3, r3
 8009242:	4313      	orrs	r3, r2
 8009244:	b21b      	sxth	r3, r3
 8009246:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		for( x = 0; x < usQuestions; x++ )
 800924a:	2300      	movs	r3, #0
 800924c:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8009250:	e036      	b.n	80092c0 <prvParseDNSReply+0xec>
		{
			#if( ipconfigUSE_LLMNR == 1 )
			{
				if( x == 0 )
 8009252:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8009256:	2b00      	cmp	r3, #0
 8009258:	d103      	bne.n	8009262 <prvParseDNSReply+0x8e>
				{
					pcRequestedName = ( char * ) pucByte;
 800925a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800925e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
				}
			}
			#endif

#if( ipconfigUSE_DNS_CACHE == 1 )
			if( x == 0 )
 8009262:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10a      	bne.n	8009280 <prvParseDNSReply+0xac>
			{
				pucByte = prvReadNameField( pucByte, pcName, sizeof( pcName ) );
 800926a:	f107 030c 	add.w	r3, r7, #12
 800926e:	2280      	movs	r2, #128	; 0x80
 8009270:	4619      	mov	r1, r3
 8009272:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8009276:	f7ff ff29 	bl	80090cc <prvReadNameField>
 800927a:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 800927e:	e005      	b.n	800928c <prvParseDNSReply+0xb8>
			}
			else
#endif /* ipconfigUSE_DNS_CACHE */
			{
				/* Skip the variable length pcName field. */
				pucByte = prvSkipNameField( pucByte );
 8009280:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8009284:	f7ff ff6e 	bl	8009164 <prvSkipNameField>
 8009288:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
			}

			#if( ipconfigUSE_LLMNR == 1 )
			{
				/* usChar2u16 returns value in host endianness */
				usType = usChar2u16( pucByte );
 800928c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8009290:	f7ff fe68 	bl	8008f64 <usChar2u16>
 8009294:	4603      	mov	r3, r0
 8009296:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
				usClass = usChar2u16( pucByte + 2 );
 800929a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800929e:	3302      	adds	r3, #2
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7ff fe5f 	bl	8008f64 <usChar2u16>
 80092a6:	4603      	mov	r3, r0
 80092a8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
			}
			#endif /* ipconfigUSE_LLMNR */

			/* Skip the type and class fields. */
			pucByte += sizeof( uint32_t );
 80092ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092b0:	3304      	adds	r3, #4
 80092b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		for( x = 0; x < usQuestions; x++ )
 80092b6:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80092ba:	3301      	adds	r3, #1
 80092bc:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 80092c0:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80092c4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d3c2      	bcc.n	8009252 <prvParseDNSReply+0x7e>
		}

		/* Search through the answers records. */
		pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 80092cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80092d0:	88db      	ldrh	r3, [r3, #6]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	021b      	lsls	r3, r3, #8
 80092d6:	b21a      	sxth	r2, r3
 80092d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80092dc:	88db      	ldrh	r3, [r3, #6]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	0a1b      	lsrs	r3, r3, #8
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	b21b      	sxth	r3, r3
 80092e6:	4313      	orrs	r3, r2
 80092e8:	b21b      	sxth	r3, r3
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80092f0:	80da      	strh	r2, [r3, #6]

		if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 80092f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80092f6:	885b      	ldrh	r3, [r3, #2]
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	f403 6378 	and.w	r3, r3, #3968	; 0xf80
 80092fe:	2b80      	cmp	r3, #128	; 0x80
 8009300:	d169      	bne.n	80093d6 <prvParseDNSReply+0x202>
		{
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 8009302:	2300      	movs	r3, #0
 8009304:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8009308:	e05c      	b.n	80093c4 <prvParseDNSReply+0x1f0>
			{
				pucByte = prvSkipNameField( pucByte );
 800930a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800930e:	f7ff ff29 	bl	8009164 <prvSkipNameField>
 8009312:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

				/* Is the type field that of an A record? */
				if( usChar2u16( pucByte ) == dnsTYPE_A_HOST )
 8009316:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800931a:	f7ff fe23 	bl	8008f64 <usChar2u16>
 800931e:	4603      	mov	r3, r0
 8009320:	2b01      	cmp	r3, #1
 8009322:	d129      	bne.n	8009378 <prvParseDNSReply+0x1a4>
				{
					/* This is the required record.  Skip the type, class, and
					time to live fields, plus the first byte of the data
					length. */
					pucByte += ( sizeof( uint32_t ) + sizeof( uint32_t ) + sizeof( uint8_t ) );
 8009324:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009328:	3309      	adds	r3, #9
 800932a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

					/* Sanity check the data length. */
					if( ( size_t ) *pucByte == sizeof( uint32_t ) )
 800932e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	2b04      	cmp	r3, #4
 8009336:	f040 8193 	bne.w	8009660 <prvParseDNSReply+0x48c>
					{
						/* Skip the second byte of the length. */
						pucByte++;
 800933a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800933e:	3301      	adds	r3, #1
 8009340:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

						/* Copy the IP address out of the record. */
						memcpy( ( void * ) &ulIPAddress, ( void * ) pucByte, sizeof( uint32_t ) );
 8009344:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

						#if( ipconfigUSE_DNS_CACHE == 1 )
						{
							prvProcessDNSCache( pcName, &ulIPAddress, pdFALSE );
 800934e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8009352:	f107 030c 	add.w	r3, r7, #12
 8009356:	2200      	movs	r2, #0
 8009358:	4618      	mov	r0, r3
 800935a:	f000 f9f7 	bl	800974c <prvProcessDNSCache>
						}
						#endif /* ipconfigUSE_DNS_CACHE */
						#if( ipconfigDNS_USE_CALLBACKS != 0 )
						{
							/* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
							vDNSDoCallback( ( TickType_t ) pxDNSMessageHeader->usIdentifier, pcName, ulIPAddress );
 800935e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	b29b      	uxth	r3, r3
 8009366:	4618      	mov	r0, r3
 8009368:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800936c:	f107 030c 	add.w	r3, r7, #12
 8009370:	4619      	mov	r1, r3
 8009372:	f7ff fe6b 	bl	800904c <vDNSDoCallback>
						}
						#endif	/* ipconfigDNS_USE_CALLBACKS != 0 */
					}

					break;
 8009376:	e173      	b.n	8009660 <prvParseDNSReply+0x48c>
				}
				else
				{
					/* Skip the type, class and time to live fields. */
					pucByte += ( sizeof( uint32_t ) + sizeof( uint32_t ) );
 8009378:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800937c:	3308      	adds	r3, #8
 800937e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

					/* Determine the length of the data in the field. */
					memcpy( ( void * ) &usDataLength, ( void * ) pucByte, sizeof( uint16_t ) );
 8009382:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	b29b      	uxth	r3, r3
 800938a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					usDataLength = FreeRTOS_ntohs( usDataLength );
 800938e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009392:	021b      	lsls	r3, r3, #8
 8009394:	b21a      	sxth	r2, r3
 8009396:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800939a:	0a1b      	lsrs	r3, r3, #8
 800939c:	b29b      	uxth	r3, r3
 800939e:	b21b      	sxth	r3, r3
 80093a0:	4313      	orrs	r3, r2
 80093a2:	b21b      	sxth	r3, r3
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

					/* Jump over the data length bytes, and the data itself. */
					pucByte += usDataLength + sizeof( uint16_t );
 80093aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80093ae:	3302      	adds	r3, #2
 80093b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80093b4:	4413      	add	r3, r2
 80093b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 80093ba:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80093be:	3301      	adds	r3, #1
 80093c0:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 80093c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093c8:	88db      	ldrh	r3, [r3, #6]
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d39a      	bcc.n	800930a <prvParseDNSReply+0x136>
 80093d4:	e145      	b.n	8009662 <prvParseDNSReply+0x48e>
				}
			}
		}
#if( ipconfigUSE_LLMNR == 1 )
		else if( usQuestions && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) )
 80093d6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f000 8141 	beq.w	8009662 <prvParseDNSReply+0x48e>
 80093e0:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	f040 813c 	bne.w	8009662 <prvParseDNSReply+0x48e>
 80093ea:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	f040 8137 	bne.w	8009662 <prvParseDNSReply+0x48e>
		{
			/* If this is not a reply to our DNS request, it might an LLMNR
			request. */
			if( xApplicationDNSQueryHook ( ( pcRequestedName + 1 ) ) )
 80093f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80093f8:	3301      	adds	r3, #1
 80093fa:	4618      	mov	r0, r3
 80093fc:	f006 f9e6 	bl	800f7cc <xApplicationDNSQueryHook>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 812d 	beq.w	8009662 <prvParseDNSReply+0x48e>
			{
			int16_t usLength;
			NetworkBufferDescriptor_t *pxNewBuffer = NULL;
 8009408:	2300      	movs	r3, #0
 800940a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			NetworkBufferDescriptor_t *pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fc77 	bl	8009d02 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8009414:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
			LLMNRAnswer_t *pxAnswer;

				if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 8009418:	4b95      	ldr	r3, [pc, #596]	; (8009670 <prvParseDNSReply+0x49c>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d144      	bne.n	80094aa <prvParseDNSReply+0x2d6>
 8009420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009424:	2b00      	cmp	r3, #0
 8009426:	d040      	beq.n	80094aa <prvParseDNSReply+0x2d6>
				{
				BaseType_t xDataLength = pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) +
 8009428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800942c:	69db      	ldr	r3, [r3, #28]
					sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 800942e:	332a      	adds	r3, #42	; 0x2a
				BaseType_t xDataLength = pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) +
 8009430:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

					/* The field xDataLength was set to the length of the UDP payload.
					The answer (reply) will be longer than the request, so the packet
					must be duplicaed into a bigger buffer */
					pxNetworkBuffer->xDataLength = xDataLength;
 8009434:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800943c:	61da      	str	r2, [r3, #28]
					pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, xDataLength + 16 );
 800943e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009442:	3310      	adds	r3, #16
 8009444:	4619      	mov	r1, r3
 8009446:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800944a:	f000 fc32 	bl	8009cb2 <pxDuplicateNetworkBufferWithDescriptor>
 800944e:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
					if( pxNewBuffer != NULL )
 8009452:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d024      	beq.n	80094a4 <prvParseDNSReply+0x2d0>
					{
					BaseType_t xOffset1, xOffset2;

						xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 800945a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
 8009466:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

						pxNetworkBuffer = pxNewBuffer;
 8009472:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009476:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
						pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + ipUDP_PAYLOAD_OFFSET_IPv4;
 800947a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800947e:	699b      	ldr	r3, [r3, #24]
 8009480:	332a      	adds	r3, #42	; 0x2a
 8009482:	607b      	str	r3, [r7, #4]

						pucByte = pucUDPPayloadBuffer + xOffset1;
 8009484:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	4413      	add	r3, r2
 800948c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						pcRequestedName = ( char * ) ( pucUDPPayloadBuffer + xOffset2 );
 8009490:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	4413      	add	r3, r2
 8009498:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
						pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094a2:	e002      	b.n	80094aa <prvParseDNSReply+0x2d6>

					}
					else
					{
						/* Just to indicate that the message may not be answered. */
						pxNetworkBuffer = NULL;
 80094a4:	2300      	movs	r3, #0
 80094a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					}
				}
				if( pxNetworkBuffer != NULL )
 80094aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 80d7 	beq.w	8009662 <prvParseDNSReply+0x48e>
				{
					pxAnswer = (LLMNRAnswer_t *)pucByte;
 80094b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

					/* We leave 'usIdentifier' and 'usQuestions' untouched */
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE );	/* Set the response flag */
 80094bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094c0:	3302      	adds	r3, #2
 80094c2:	2280      	movs	r2, #128	; 0x80
 80094c4:	701a      	strb	r2, [r3, #0]
 80094c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094ca:	3303      	adds	r3, #3
 80094cc:	2200      	movs	r2, #0
 80094ce:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );	/* Provide a single answer */
 80094d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094d4:	3306      	adds	r3, #6
 80094d6:	2200      	movs	r2, #0
 80094d8:	701a      	strb	r2, [r3, #0]
 80094da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094de:	3307      	adds	r3, #7
 80094e0:	2201      	movs	r2, #1
 80094e2:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );	/* No authority */
 80094e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094e8:	3308      	adds	r3, #8
 80094ea:	2200      	movs	r2, #0
 80094ec:	701a      	strb	r2, [r3, #0]
 80094ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094f2:	3309      	adds	r3, #9
 80094f4:	2200      	movs	r2, #0
 80094f6:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );	/* No additional info */
 80094f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80094fc:	330a      	adds	r3, #10
 80094fe:	2200      	movs	r2, #0
 8009500:	701a      	strb	r2, [r3, #0]
 8009502:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009506:	330b      	adds	r3, #11
 8009508:	2200      	movs	r2, #0
 800950a:	701a      	strb	r2, [r3, #0]

					pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 800950c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009510:	22c0      	movs	r2, #192	; 0xc0
 8009512:	701a      	strb	r2, [r3, #0]
					pxAnswer->ucNameOffset = ( uint8_t )( pcRequestedName - ( char * ) pucUDPPayloadBuffer );
 8009514:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	b2da      	uxtb	r2, r3
 800951e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009522:	705a      	strb	r2, [r3, #1]

					vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST );	/* Type A: host */
 8009524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009528:	3302      	adds	r3, #2
 800952a:	2200      	movs	r2, #0
 800952c:	701a      	strb	r2, [r3, #0]
 800952e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009532:	3303      	adds	r3, #3
 8009534:	2201      	movs	r2, #1
 8009536:	701a      	strb	r2, [r3, #0]
					vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );	/* 1: Class IN */
 8009538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800953c:	3304      	adds	r3, #4
 800953e:	2200      	movs	r2, #0
 8009540:	701a      	strb	r2, [r3, #0]
 8009542:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009546:	3305      	adds	r3, #5
 8009548:	2201      	movs	r2, #1
 800954a:	701a      	strb	r2, [r3, #0]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 800954c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009550:	3306      	adds	r3, #6
 8009552:	2200      	movs	r2, #0
 8009554:	701a      	strb	r2, [r3, #0]
 8009556:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800955a:	3307      	adds	r3, #7
 800955c:	2204      	movs	r2, #4
 800955e:	701a      	strb	r2, [r3, #0]
 8009560:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009564:	3308      	adds	r3, #8
 8009566:	2293      	movs	r2, #147	; 0x93
 8009568:	701a      	strb	r2, [r3, #0]
 800956a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800956e:	3309      	adds	r3, #9
 8009570:	22e0      	movs	r2, #224	; 0xe0
 8009572:	701a      	strb	r2, [r3, #0]
					vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 8009574:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009578:	330a      	adds	r3, #10
 800957a:	2200      	movs	r2, #0
 800957c:	701a      	strb	r2, [r3, #0]
 800957e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009582:	330b      	adds	r3, #11
 8009584:	2204      	movs	r2, #4
 8009586:	701a      	strb	r2, [r3, #0]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 8009588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800958c:	330c      	adds	r3, #12
 800958e:	4a39      	ldr	r2, [pc, #228]	; (8009674 <prvParseDNSReply+0x4a0>)
 8009590:	6952      	ldr	r2, [r2, #20]
 8009592:	0611      	lsls	r1, r2, #24
 8009594:	4a37      	ldr	r2, [pc, #220]	; (8009674 <prvParseDNSReply+0x4a0>)
 8009596:	6952      	ldr	r2, [r2, #20]
 8009598:	0212      	lsls	r2, r2, #8
 800959a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800959e:	4311      	orrs	r1, r2
 80095a0:	4a34      	ldr	r2, [pc, #208]	; (8009674 <prvParseDNSReply+0x4a0>)
 80095a2:	6952      	ldr	r2, [r2, #20]
 80095a4:	0a12      	lsrs	r2, r2, #8
 80095a6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80095aa:	4311      	orrs	r1, r2
 80095ac:	4a31      	ldr	r2, [pc, #196]	; (8009674 <prvParseDNSReply+0x4a0>)
 80095ae:	6952      	ldr	r2, [r2, #20]
 80095b0:	0e12      	lsrs	r2, r2, #24
 80095b2:	430a      	orrs	r2, r1
 80095b4:	0e12      	lsrs	r2, r2, #24
 80095b6:	b2d2      	uxtb	r2, r2
 80095b8:	701a      	strb	r2, [r3, #0]
 80095ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80095be:	330d      	adds	r3, #13
 80095c0:	4a2c      	ldr	r2, [pc, #176]	; (8009674 <prvParseDNSReply+0x4a0>)
 80095c2:	6952      	ldr	r2, [r2, #20]
 80095c4:	0611      	lsls	r1, r2, #24
 80095c6:	4a2b      	ldr	r2, [pc, #172]	; (8009674 <prvParseDNSReply+0x4a0>)
 80095c8:	6952      	ldr	r2, [r2, #20]
 80095ca:	0212      	lsls	r2, r2, #8
 80095cc:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80095d0:	4311      	orrs	r1, r2
 80095d2:	4a28      	ldr	r2, [pc, #160]	; (8009674 <prvParseDNSReply+0x4a0>)
 80095d4:	6952      	ldr	r2, [r2, #20]
 80095d6:	0a12      	lsrs	r2, r2, #8
 80095d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80095dc:	4311      	orrs	r1, r2
 80095de:	4a25      	ldr	r2, [pc, #148]	; (8009674 <prvParseDNSReply+0x4a0>)
 80095e0:	6952      	ldr	r2, [r2, #20]
 80095e2:	0e12      	lsrs	r2, r2, #24
 80095e4:	430a      	orrs	r2, r1
 80095e6:	0c12      	lsrs	r2, r2, #16
 80095e8:	b2d2      	uxtb	r2, r2
 80095ea:	701a      	strb	r2, [r3, #0]
 80095ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80095f0:	330e      	adds	r3, #14
 80095f2:	4a20      	ldr	r2, [pc, #128]	; (8009674 <prvParseDNSReply+0x4a0>)
 80095f4:	6952      	ldr	r2, [r2, #20]
 80095f6:	0611      	lsls	r1, r2, #24
 80095f8:	4a1e      	ldr	r2, [pc, #120]	; (8009674 <prvParseDNSReply+0x4a0>)
 80095fa:	6952      	ldr	r2, [r2, #20]
 80095fc:	0212      	lsls	r2, r2, #8
 80095fe:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8009602:	4311      	orrs	r1, r2
 8009604:	4a1b      	ldr	r2, [pc, #108]	; (8009674 <prvParseDNSReply+0x4a0>)
 8009606:	6952      	ldr	r2, [r2, #20]
 8009608:	0a12      	lsrs	r2, r2, #8
 800960a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800960e:	4311      	orrs	r1, r2
 8009610:	4a18      	ldr	r2, [pc, #96]	; (8009674 <prvParseDNSReply+0x4a0>)
 8009612:	6952      	ldr	r2, [r2, #20]
 8009614:	0e12      	lsrs	r2, r2, #24
 8009616:	430a      	orrs	r2, r1
 8009618:	0a12      	lsrs	r2, r2, #8
 800961a:	b2d2      	uxtb	r2, r2
 800961c:	701a      	strb	r2, [r3, #0]
 800961e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009622:	330f      	adds	r3, #15
 8009624:	4a13      	ldr	r2, [pc, #76]	; (8009674 <prvParseDNSReply+0x4a0>)
 8009626:	6952      	ldr	r2, [r2, #20]
 8009628:	0e12      	lsrs	r2, r2, #24
 800962a:	b2d2      	uxtb	r2, r2
 800962c:	701a      	strb	r2, [r3, #0]

					usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucUDPPayloadBuffer ) );
 800962e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	b29b      	uxth	r3, r3
 8009638:	3310      	adds	r3, #16
 800963a:	b29b      	uxth	r3, r3
 800963c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

					prvReplyDNSMessage( pxNetworkBuffer, usLength );
 8009640:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8009644:	4619      	mov	r1, r3
 8009646:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800964a:	f000 f815 	bl	8009678 <prvReplyDNSMessage>

					if( pxNewBuffer != NULL )
 800964e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d005      	beq.n	8009662 <prvParseDNSReply+0x48e>
					{
						vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8009656:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800965a:	f006 f823 	bl	800f6a4 <vReleaseNetworkBufferAndDescriptor>
 800965e:	e000      	b.n	8009662 <prvParseDNSReply+0x48e>
					break;
 8009660:	bf00      	nop
			}
		}
#endif /* ipconfigUSE_LLMNR == 1 */
	}

	return ulIPAddress;
 8009662:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8009666:	4618      	mov	r0, r3
 8009668:	37c8      	adds	r7, #200	; 0xc8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	080109b4 	.word	0x080109b4
 8009674:	200000a0 	.word	0x200000a0

08009678 <prvReplyDNSMessage>:
/*-----------------------------------------------------------*/

#if( ( ipconfigUSE_NBNS == 1 ) || ( ipconfigUSE_LLMNR == 1 ) )

	static void prvReplyDNSMessage( NetworkBufferDescriptor_t *pxNetworkBuffer, BaseType_t lNetLength )
	{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
	UDPPacket_t *pxUDPPacket;
	IPHeader_t *pxIPHeader;
	UDPHeader_t *pxUDPHeader;

		pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	617b      	str	r3, [r7, #20]
		pxIPHeader = &pxUDPPacket->xIPHeader;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	330e      	adds	r3, #14
 800968c:	613b      	str	r3, [r7, #16]
		pxUDPHeader = &pxUDPPacket->xUDPHeader;
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	3322      	adds	r3, #34	; 0x22
 8009692:	60fb      	str	r3, [r7, #12]
		/* HT: started using defines like 'ipSIZE_OF_xxx' */
		pxIPHeader->usLength               = FreeRTOS_htons( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	b29b      	uxth	r3, r3
 8009698:	331c      	adds	r3, #28
 800969a:	b29b      	uxth	r3, r3
 800969c:	021b      	lsls	r3, r3, #8
 800969e:	b29a      	uxth	r2, r3
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	331c      	adds	r3, #28
 80096a4:	0a1b      	lsrs	r3, r3, #8
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	4313      	orrs	r3, r2
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	805a      	strh	r2, [r3, #2]
		/* HT:endian: should not be translated, copying from packet to packet */
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	68da      	ldr	r2, [r3, #12]
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress      = *ipLOCAL_IP_ADDRESS_POINTER;
 80096b8:	4b22      	ldr	r3, [pc, #136]	; (8009744 <prvReplyDNSMessage+0xcc>)
 80096ba:	695a      	ldr	r2, [r3, #20]
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	60da      	str	r2, [r3, #12]
		pxIPHeader->ucTimeToLive           = ipconfigUDP_TIME_TO_LIVE;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	2280      	movs	r2, #128	; 0x80
 80096c4:	721a      	strb	r2, [r3, #8]
		pxIPHeader->usIdentification       = FreeRTOS_htons( usPacketIdentifier );
 80096c6:	4b20      	ldr	r3, [pc, #128]	; (8009748 <prvReplyDNSMessage+0xd0>)
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	021b      	lsls	r3, r3, #8
 80096cc:	b21a      	sxth	r2, r3
 80096ce:	4b1e      	ldr	r3, [pc, #120]	; (8009748 <prvReplyDNSMessage+0xd0>)
 80096d0:	881b      	ldrh	r3, [r3, #0]
 80096d2:	0a1b      	lsrs	r3, r3, #8
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	b21b      	sxth	r3, r3
 80096d8:	4313      	orrs	r3, r2
 80096da:	b21b      	sxth	r3, r3
 80096dc:	b29a      	uxth	r2, r3
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	809a      	strh	r2, [r3, #4]
		usPacketIdentifier++;
 80096e2:	4b19      	ldr	r3, [pc, #100]	; (8009748 <prvReplyDNSMessage+0xd0>)
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	3301      	adds	r3, #1
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	4b17      	ldr	r3, [pc, #92]	; (8009748 <prvReplyDNSMessage+0xd0>)
 80096ec:	801a      	strh	r2, [r3, #0]
		pxUDPHeader->usLength              = FreeRTOS_htons( lNetLength + ipSIZE_OF_UDP_HEADER );
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	3308      	adds	r3, #8
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	021b      	lsls	r3, r3, #8
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	3308      	adds	r3, #8
 80096fe:	0a1b      	lsrs	r3, r3, #8
 8009700:	b29b      	uxth	r3, r3
 8009702:	4313      	orrs	r3, r2
 8009704:	b29a      	uxth	r2, r3
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	809a      	strh	r2, [r3, #4]
		vFlip_16( pxUDPPacket->xUDPHeader.usSourcePort, pxUDPPacket->xUDPHeader.usDestinationPort );
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8009710:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009714:	021b      	lsls	r3, r3, #8
 8009716:	4313      	orrs	r3, r2
 8009718:	817b      	strh	r3, [r7, #10]
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800971e:	b29a      	uxth	r2, r3
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	845a      	strh	r2, [r3, #34]	; 0x22
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	897a      	ldrh	r2, [r7, #10]
 8009728:	849a      	strh	r2, [r3, #36]	; 0x24
			usGenerateProtocolChecksum( ( uint8_t* ) pxUDPPacket, pdTRUE );
		}
		#endif

		/* Important: tell NIC driver how many bytes must be sent */
		pxNetworkBuffer->xDataLength = ( size_t ) ( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER );
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	61da      	str	r2, [r3, #28]

		/* This function will fill in the eth addresses and send the packet */
		vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8009734:	2100      	movs	r1, #0
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fe98 	bl	800a46c <vReturnEthernetFrame>
	}
 800973c:	bf00      	nop
 800973e:	3718      	adds	r7, #24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	200000a0 	.word	0x200000a0
 8009748:	20004770 	.word	0x20004770

0800974c <prvProcessDNSCache>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DNS_CACHE == 1 )

	static void prvProcessDNSCache( const char *pcName, uint32_t *pulIP, BaseType_t xLookUp )
	{
 800974c:	b580      	push	{r7, lr}
 800974e:	b086      	sub	sp, #24
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
	BaseType_t x;
	BaseType_t xFound = pdFALSE;
 8009758:	2300      	movs	r3, #0
 800975a:	613b      	str	r3, [r7, #16]
	static BaseType_t xFreeEntry = 0;

		/* For each entry in the DNS cache table. */
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 800975c:	2300      	movs	r3, #0
 800975e:	617b      	str	r3, [r7, #20]
 8009760:	e038      	b.n	80097d4 <prvProcessDNSCache+0x88>
		{
			if( xDNSCache[ x ].pcName[ 0 ] == 0 )
 8009762:	4939      	ldr	r1, [pc, #228]	; (8009848 <prvProcessDNSCache+0xfc>)
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	4613      	mov	r3, r2
 8009768:	005b      	lsls	r3, r3, #1
 800976a:	4413      	add	r3, r2
 800976c:	00db      	lsls	r3, r3, #3
 800976e:	440b      	add	r3, r1
 8009770:	3304      	adds	r3, #4
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d031      	beq.n	80097dc <prvProcessDNSCache+0x90>
			{
				break;
			}

			if( strncmp( xDNSCache[ x ].pcName, pcName, sizeof( xDNSCache[ x ].pcName ) ) == 0 )
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	4613      	mov	r3, r2
 800977c:	005b      	lsls	r3, r3, #1
 800977e:	4413      	add	r3, r2
 8009780:	00db      	lsls	r3, r3, #3
 8009782:	4a31      	ldr	r2, [pc, #196]	; (8009848 <prvProcessDNSCache+0xfc>)
 8009784:	4413      	add	r3, r2
 8009786:	3304      	adds	r3, #4
 8009788:	2210      	movs	r2, #16
 800978a:	68f9      	ldr	r1, [r7, #12]
 800978c:	4618      	mov	r0, r3
 800978e:	f006 ff4b 	bl	8010628 <strncmp>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d11a      	bne.n	80097ce <prvProcessDNSCache+0x82>
			{
				/* Is this function called for a lookup or to add/update an IP address? */
				if( xLookUp != pdFALSE )
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00a      	beq.n	80097b4 <prvProcessDNSCache+0x68>
				{
					*pulIP = xDNSCache[ x ].ulIPAddress;
 800979e:	492a      	ldr	r1, [pc, #168]	; (8009848 <prvProcessDNSCache+0xfc>)
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	4613      	mov	r3, r2
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	4413      	add	r3, r2
 80097a8:	00db      	lsls	r3, r3, #3
 80097aa:	440b      	add	r3, r1
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	e009      	b.n	80097c8 <prvProcessDNSCache+0x7c>
				}
				else
				{
					xDNSCache[ x ].ulIPAddress = *pulIP;
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	6819      	ldr	r1, [r3, #0]
 80097b8:	4823      	ldr	r0, [pc, #140]	; (8009848 <prvProcessDNSCache+0xfc>)
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	4613      	mov	r3, r2
 80097be:	005b      	lsls	r3, r3, #1
 80097c0:	4413      	add	r3, r2
 80097c2:	00db      	lsls	r3, r3, #3
 80097c4:	4403      	add	r3, r0
 80097c6:	6019      	str	r1, [r3, #0]
				}

				xFound = pdTRUE;
 80097c8:	2301      	movs	r3, #1
 80097ca:	613b      	str	r3, [r7, #16]
				break;
 80097cc:	e007      	b.n	80097de <prvProcessDNSCache+0x92>
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	3301      	adds	r3, #1
 80097d2:	617b      	str	r3, [r7, #20]
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	2b03      	cmp	r3, #3
 80097d8:	ddc3      	ble.n	8009762 <prvProcessDNSCache+0x16>
 80097da:	e000      	b.n	80097de <prvProcessDNSCache+0x92>
				break;
 80097dc:	bf00      	nop
			}
		}

		if( xFound == pdFALSE )
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d12b      	bne.n	800983c <prvProcessDNSCache+0xf0>
		{
			if( xLookUp != pdFALSE )
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <prvProcessDNSCache+0xa6>
			{
				*pulIP = 0;
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	2200      	movs	r2, #0
 80097ee:	601a      	str	r2, [r3, #0]
 80097f0:	e024      	b.n	800983c <prvProcessDNSCache+0xf0>
			}
			else
			{
				/* Called to add or update an item */
				strncpy( xDNSCache[ xFreeEntry ].pcName, pcName, sizeof( xDNSCache[ xFreeEntry ].pcName ) );
 80097f2:	4b16      	ldr	r3, [pc, #88]	; (800984c <prvProcessDNSCache+0x100>)
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	4613      	mov	r3, r2
 80097f8:	005b      	lsls	r3, r3, #1
 80097fa:	4413      	add	r3, r2
 80097fc:	00db      	lsls	r3, r3, #3
 80097fe:	4a12      	ldr	r2, [pc, #72]	; (8009848 <prvProcessDNSCache+0xfc>)
 8009800:	4413      	add	r3, r2
 8009802:	3304      	adds	r3, #4
 8009804:	2210      	movs	r2, #16
 8009806:	68f9      	ldr	r1, [r7, #12]
 8009808:	4618      	mov	r0, r3
 800980a:	f006 ff1f 	bl	801064c <strncpy>
				xDNSCache[ xFreeEntry ].ulIPAddress = *pulIP;
 800980e:	4b0f      	ldr	r3, [pc, #60]	; (800984c <prvProcessDNSCache+0x100>)
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	6819      	ldr	r1, [r3, #0]
 8009816:	480c      	ldr	r0, [pc, #48]	; (8009848 <prvProcessDNSCache+0xfc>)
 8009818:	4613      	mov	r3, r2
 800981a:	005b      	lsls	r3, r3, #1
 800981c:	4413      	add	r3, r2
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	4403      	add	r3, r0
 8009822:	6019      	str	r1, [r3, #0]

				xFreeEntry++;
 8009824:	4b09      	ldr	r3, [pc, #36]	; (800984c <prvProcessDNSCache+0x100>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	3301      	adds	r3, #1
 800982a:	4a08      	ldr	r2, [pc, #32]	; (800984c <prvProcessDNSCache+0x100>)
 800982c:	6013      	str	r3, [r2, #0]
				if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 800982e:	4b07      	ldr	r3, [pc, #28]	; (800984c <prvProcessDNSCache+0x100>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b04      	cmp	r3, #4
 8009834:	d102      	bne.n	800983c <prvProcessDNSCache+0xf0>
				{
					xFreeEntry = 0;
 8009836:	4b05      	ldr	r3, [pc, #20]	; (800984c <prvProcessDNSCache+0x100>)
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]
				}
			}
		}

		if( ( xLookUp == 0 ) || ( *pulIP != 0 ) )
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2b00      	cmp	r3, #0
		{
			FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", xLookUp ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
		}
	}
 8009840:	bf00      	nop
 8009842:	3718      	adds	r7, #24
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	200046f4 	.word	0x200046f4
 800984c:	20004768 	.word	0x20004768

08009850 <prvIPTask>:
#endif

/*-----------------------------------------------------------*/

static void prvIPTask( void *pvParameters )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b088      	sub	sp, #32
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]

	/* Generate a dummy message to say that the network connection has gone
	down.  This will cause this task to initialise the network interface.  After
	this it is the responsibility of the network interface hardware driver to
	send this message if a previously connected network is disconnected. */
	FreeRTOS_NetworkDown();
 8009858:	f000 f9ec 	bl	8009c34 <FreeRTOS_NetworkDown>

	#if( ipconfigUSE_TCP == 1 )
	{
		/* Initialise the TCP timer. */
		prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 800985c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009860:	4850      	ldr	r0, [pc, #320]	; (80099a4 <prvIPTask+0x154>)
 8009862:	f000 f9a7 	bl	8009bb4 <prvIPTimerReload>
	}
	#endif

	/* Initialisation is complete and events can now be processed. */
	xIPTaskInitialised = pdTRUE;
 8009866:	4b50      	ldr	r3, [pc, #320]	; (80099a8 <prvIPTask+0x158>)
 8009868:	2201      	movs	r2, #1
 800986a:	601a      	str	r2, [r3, #0]
	{
		ipconfigWATCHDOG_TIMER();

		/* Check the ARP, DHCP and TCP timers to see if there is any periodic
		or timeout processing to perform. */
		prvCheckNetworkTimers();
 800986c:	f000 f910 	bl	8009a90 <prvCheckNetworkTimers>

		/* Calculate the acceptable maximum sleep time. */
		xNextIPSleep = prvCalculateSleepTime();
 8009870:	f000 f8c4 	bl	80099fc <prvCalculateSleepTime>
 8009874:	61f8      	str	r0, [r7, #28]

		/* Wait until there is something to do.  The event is initialised to "no
		event" in case the following call exits due to a time out rather than a
		message being received. */
		xReceivedEvent.eEventType = eNoEvent;
 8009876:	23ff      	movs	r3, #255	; 0xff
 8009878:	743b      	strb	r3, [r7, #16]
		xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep );
 800987a:	4b4c      	ldr	r3, [pc, #304]	; (80099ac <prvIPTask+0x15c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f107 0110 	add.w	r1, r7, #16
 8009882:	69fa      	ldr	r2, [r7, #28]
 8009884:	4618      	mov	r0, r3
 8009886:	f7fd f817 	bl	80068b8 <xQueueReceive>
		}
		#endif /* ipconfigCHECK_IP_QUEUE_SPACE */

		iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

		switch( xReceivedEvent.eEventType )
 800988a:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800988e:	2b0b      	cmp	r3, #11
 8009890:	d87d      	bhi.n	800998e <prvIPTask+0x13e>
 8009892:	a201      	add	r2, pc, #4	; (adr r2, 8009898 <prvIPTask+0x48>)
 8009894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009898:	080098c9 	.word	0x080098c9
 800989c:	080098d5 	.word	0x080098d5
 80098a0:	080098df 	.word	0x080098df
 80098a4:	08009939 	.word	0x08009939
 80098a8:	08009943 	.word	0x08009943
 80098ac:	0800995f 	.word	0x0800995f
 80098b0:	0800996b 	.word	0x0800996b
 80098b4:	0800998f 	.word	0x0800998f
 80098b8:	080098e5 	.word	0x080098e5
 80098bc:	0800992f 	.word	0x0800992f
 80098c0:	0800994b 	.word	0x0800994b
 80098c4:	08009955 	.word	0x08009955
		{
			case eNetworkDownEvent :
				/* Attempt to establish a connection. */
				xNetworkUp = pdFALSE;
 80098c8:	4b39      	ldr	r3, [pc, #228]	; (80099b0 <prvIPTask+0x160>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	601a      	str	r2, [r3, #0]
				prvProcessNetworkDownEvent();
 80098ce:	f000 fb93 	bl	8009ff8 <prvProcessNetworkDownEvent>
				break;
 80098d2:	e05f      	b.n	8009994 <prvIPTask+0x144>

			case eNetworkRxEvent:
				/* The network hardware driver has received a new packet.  A
				pointer to the received buffer is located in the pvData member
				of the received event structure. */
				prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f000 f884 	bl	80099e4 <prvHandleEthernetPacket>
				break;
 80098dc:	e05a      	b.n	8009994 <prvIPTask+0x144>

			case eARPTimerEvent :
				/* The ARP timer has expired, process the ARP cache. */
				vARPAgeCache();
 80098de:	f7fe fdff 	bl	80084e0 <vARPAgeCache>
				break;
 80098e2:	e057      	b.n	8009994 <prvIPTask+0x144>
				/* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
				to a port. The port number is communicated in the socket field
				usLocalPort. vSocketBind() will actually bind the socket and the
				API will unblock as soon as the eSOCKET_BOUND event is
				triggered. */
				pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	61bb      	str	r3, [r7, #24]
				xAddress.sin_addr = 0u;	/* For the moment. */
 80098e8:	2300      	movs	r3, #0
 80098ea:	60fb      	str	r3, [r7, #12]
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80098f0:	021b      	lsls	r3, r3, #8
 80098f2:	b21a      	sxth	r2, r3
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80098f8:	0a1b      	lsrs	r3, r3, #8
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	b21b      	sxth	r3, r3
 80098fe:	4313      	orrs	r3, r2
 8009900:	b21b      	sxth	r3, r3
 8009902:	b29b      	uxth	r3, r3
 8009904:	817b      	strh	r3, [r7, #10]
				pxSocket->usLocalPort = 0u;
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	2200      	movs	r2, #0
 800990a:	849a      	strh	r2, [r3, #36]	; 0x24
				vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 800990c:	f107 0108 	add.w	r1, r7, #8
 8009910:	2300      	movs	r3, #0
 8009912:	2208      	movs	r2, #8
 8009914:	69b8      	ldr	r0, [r7, #24]
 8009916:	f001 f9e9 	bl	800acec <vSocketBind>

				/* Before 'eSocketBindEvent' was sent it was tested that
				( xEventGroup != NULL ) so it can be used now to wake up the
				user. */
				pxSocket->xEventBits |= eSOCKET_BOUND;
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f043 0210 	orr.w	r2, r3, #16
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	601a      	str	r2, [r3, #0]
				vSocketWakeUpUser( pxSocket );
 8009926:	69b8      	ldr	r0, [r7, #24]
 8009928:	f001 fd6c 	bl	800b404 <vSocketWakeUpUser>
				break;
 800992c:	e032      	b.n	8009994 <prvIPTask+0x144>
			case eSocketCloseEvent :
				/* The user API FreeRTOS_closesocket() has sent a message to the
				IP-task to actually close a socket. This is handled in
				vSocketClose().  As the socket gets closed, there is no way to
				report back to the API, so the API won't wait for the result */
				vSocketClose( ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData ) );
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	4618      	mov	r0, r3
 8009932:	f001 fa91 	bl	800ae58 <vSocketClose>
				break;
 8009936:	e02d      	b.n	8009994 <prvIPTask+0x144>

			case eStackTxEvent :
				/* The network stack has generated a packet to send.  A
				pointer to the generated buffer is located in the pvData
				member of the received event structure. */
				vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	4618      	mov	r0, r3
 800993c:	f005 fc62 	bl	800f204 <vProcessGeneratedUDPPacket>
				break;
 8009940:	e028      	b.n	8009994 <prvIPTask+0x144>

			case eDHCPEvent:
				/* The DHCP state machine needs processing. */
				#if( ipconfigUSE_DHCP == 1 )
				{
					vDHCPProcess( pdFALSE );
 8009942:	2000      	movs	r0, #0
 8009944:	f7fe feda 	bl	80086fc <vDHCPProcess>
				}
				#endif /* ipconfigUSE_DHCP */
				break;
 8009948:	e024      	b.n	8009994 <prvIPTask+0x144>
				/* FreeRTOS_select() has got unblocked by a socket event,
				vSocketSelect() will check which sockets actually have an event
				and update the socket field xSocketBits. */
				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
				{
					vSocketSelect( ( SocketSelect_t * ) ( xReceivedEvent.pvData ) );
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	4618      	mov	r0, r3
 800994e:	f001 ff75 	bl	800b83c <vSocketSelect>
				}
				#endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
				break;
 8009952:	e01f      	b.n	8009994 <prvIPTask+0x144>
			case eSocketSignalEvent :
				#if( ipconfigSUPPORT_SIGNALS != 0 )
				{
					/* Some task wants to signal the user of this socket in
					order to interrupt a call to recv() or a call to select(). */
					FreeRTOS_SignalSocket( ( Socket_t ) xReceivedEvent.pvData );
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	4618      	mov	r0, r3
 8009958:	f002 f87c 	bl	800ba54 <FreeRTOS_SignalSocket>
				}
				#endif /* ipconfigSUPPORT_SIGNALS */
				break;
 800995c:	e01a      	b.n	8009994 <prvIPTask+0x144>
			case eTCPTimerEvent :
				#if( ipconfigUSE_TCP == 1 )
				{
					/* Simply mark the TCP timer as expired so it gets processed
					the next time prvCheckNetworkTimers() is called. */
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800995e:	4a11      	ldr	r2, [pc, #68]	; (80099a4 <prvIPTask+0x154>)
 8009960:	7813      	ldrb	r3, [r2, #0]
 8009962:	f043 0302 	orr.w	r3, r3, #2
 8009966:	7013      	strb	r3, [r2, #0]
				}
				#endif /* ipconfigUSE_TCP */
				break;
 8009968:	e014      	b.n	8009994 <prvIPTask+0x144>
				/* The API FreeRTOS_accept() was called, the IP-task will now
				check if the listening socket (communicated in pvData) actually
				received a new connection. */
				#if( ipconfigUSE_TCP == 1 )
				{
					pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	61bb      	str	r3, [r7, #24]

					if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 800996e:	69b8      	ldr	r0, [r7, #24]
 8009970:	f004 fc46 	bl	800e200 <xTCPCheckNewClient>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00b      	beq.n	8009992 <prvIPTask+0x142>
					{
						pxSocket->xEventBits |= eSOCKET_ACCEPT;
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f043 0204 	orr.w	r2, r3, #4
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	601a      	str	r2, [r3, #0]
						vSocketWakeUpUser( pxSocket );
 8009986:	69b8      	ldr	r0, [r7, #24]
 8009988:	f001 fd3c 	bl	800b404 <vSocketWakeUpUser>
					}
				}
				#endif /* ipconfigUSE_TCP */
				break;
 800998c:	e001      	b.n	8009992 <prvIPTask+0x142>
				#endif /* ipconfigUSE_TCP */
				break;

			default :
				/* Should not get here. */
				break;
 800998e:	bf00      	nop
 8009990:	e000      	b.n	8009994 <prvIPTask+0x144>
				break;
 8009992:	bf00      	nop
		}

		if( xNetworkDownEventPending != pdFALSE )
 8009994:	4b07      	ldr	r3, [pc, #28]	; (80099b4 <prvIPTask+0x164>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	f43f af67 	beq.w	800986c <prvIPTask+0x1c>
		{
			/* A network down event could not be posted to the network event
			queue because the queue was full.  Try posting again. */
			FreeRTOS_NetworkDown();
 800999e:	f000 f949 	bl	8009c34 <FreeRTOS_NetworkDown>
		prvCheckNetworkTimers();
 80099a2:	e763      	b.n	800986c <prvIPTask+0x1c>
 80099a4:	200047d4 	.word	0x200047d4
 80099a8:	200047fc 	.word	0x200047fc
 80099ac:	2000476c 	.word	0x2000476c
 80099b0:	200047a8 	.word	0x200047a8
 80099b4:	2000479c 	.word	0x2000479c

080099b8 <xIsCallingFromIPTask>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xIsCallingFromIPTask( void )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
BaseType_t xReturn;

	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 80099be:	f7fe f909 	bl	8007bd4 <xTaskGetCurrentTaskHandle>
 80099c2:	4602      	mov	r2, r0
 80099c4:	4b06      	ldr	r3, [pc, #24]	; (80099e0 <xIsCallingFromIPTask+0x28>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d102      	bne.n	80099d2 <xIsCallingFromIPTask+0x1a>
	{
		xReturn = pdTRUE;
 80099cc:	2301      	movs	r3, #1
 80099ce:	607b      	str	r3, [r7, #4]
 80099d0:	e001      	b.n	80099d6 <xIsCallingFromIPTask+0x1e>
	}
	else
	{
		xReturn = pdFALSE;
 80099d2:	2300      	movs	r3, #0
 80099d4:	607b      	str	r3, [r7, #4]
	}

	return xReturn;
 80099d6:	687b      	ldr	r3, [r7, #4]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	200047a0 	.word	0x200047a0

080099e4 <prvHandleEthernetPacket>:
/*-----------------------------------------------------------*/

static void prvHandleEthernetPacket( NetworkBufferDescriptor_t *pxBuffer )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
	#if( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
	{
		/* When ipconfigUSE_LINKED_RX_MESSAGES is not set to 0 then only one
		buffer will be sent at a time.  This is the default way for +TCP to pass
		messages from the MAC to the TCP/IP stack. */
		prvProcessEthernetPacket( pxBuffer );
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fb43 	bl	800a078 <prvProcessEthernetPacket>

		/* While there is another packet in the chain. */
		} while( pxBuffer != NULL );
	}
	#endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 80099f2:	bf00      	nop
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <prvCalculateSleepTime>:
/*-----------------------------------------------------------*/

static TickType_t prvCalculateSleepTime( void )
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
TickType_t xMaximumSleepTime;

	/* Start with the maximum sleep time, then check this against the remaining
	time in any other timers that are active. */
	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 8009a02:	f242 7310 	movw	r3, #10000	; 0x2710
 8009a06:	607b      	str	r3, [r7, #4]

	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 8009a08:	4b1d      	ldr	r3, [pc, #116]	; (8009a80 <prvCalculateSleepTime+0x84>)
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	f003 0301 	and.w	r3, r3, #1
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d007      	beq.n	8009a26 <prvCalculateSleepTime+0x2a>
	{
		if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 8009a16:	4b1a      	ldr	r3, [pc, #104]	; (8009a80 <prvCalculateSleepTime+0x84>)
 8009a18:	68da      	ldr	r2, [r3, #12]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d202      	bcs.n	8009a26 <prvCalculateSleepTime+0x2a>
		{
			xMaximumSleepTime = xARPTimer.ulReloadTime;
 8009a20:	4b17      	ldr	r3, [pc, #92]	; (8009a80 <prvCalculateSleepTime+0x84>)
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	607b      	str	r3, [r7, #4]
		}
	}

	#if( ipconfigUSE_DHCP == 1 )
	{
		if( xDHCPTimer.bActive != pdFALSE_UNSIGNED )
 8009a26:	4b17      	ldr	r3, [pc, #92]	; (8009a84 <prvCalculateSleepTime+0x88>)
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	f003 0301 	and.w	r3, r3, #1
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d007      	beq.n	8009a44 <prvCalculateSleepTime+0x48>
		{
			if( xDHCPTimer.ulRemainingTime < xMaximumSleepTime )
 8009a34:	4b13      	ldr	r3, [pc, #76]	; (8009a84 <prvCalculateSleepTime+0x88>)
 8009a36:	68da      	ldr	r2, [r3, #12]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d202      	bcs.n	8009a44 <prvCalculateSleepTime+0x48>
			{
				xMaximumSleepTime = xDHCPTimer.ulRemainingTime;
 8009a3e:	4b11      	ldr	r3, [pc, #68]	; (8009a84 <prvCalculateSleepTime+0x88>)
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	607b      	str	r3, [r7, #4]
	}
	#endif /* ipconfigUSE_DHCP */

	#if( ipconfigUSE_TCP == 1 )
	{
		if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 8009a44:	4b10      	ldr	r3, [pc, #64]	; (8009a88 <prvCalculateSleepTime+0x8c>)
 8009a46:	68da      	ldr	r2, [r3, #12]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d202      	bcs.n	8009a54 <prvCalculateSleepTime+0x58>
		{
			xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 8009a4e:	4b0e      	ldr	r3, [pc, #56]	; (8009a88 <prvCalculateSleepTime+0x8c>)
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	607b      	str	r3, [r7, #4]
	}
	#endif

	#if( ipconfigDNS_USE_CALLBACKS != 0 )
	{
		if( xDNSTimer.bActive != pdFALSE )
 8009a54:	4b0d      	ldr	r3, [pc, #52]	; (8009a8c <prvCalculateSleepTime+0x90>)
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	f003 0301 	and.w	r3, r3, #1
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d007      	beq.n	8009a72 <prvCalculateSleepTime+0x76>
		{
			if( xDNSTimer.ulRemainingTime < xMaximumSleepTime )
 8009a62:	4b0a      	ldr	r3, [pc, #40]	; (8009a8c <prvCalculateSleepTime+0x90>)
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d202      	bcs.n	8009a72 <prvCalculateSleepTime+0x76>
			{
				xMaximumSleepTime = xDNSTimer.ulRemainingTime;
 8009a6c:	4b07      	ldr	r3, [pc, #28]	; (8009a8c <prvCalculateSleepTime+0x90>)
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	607b      	str	r3, [r7, #4]
			}
		}
	}
	#endif

	return xMaximumSleepTime;
 8009a72:	687b      	ldr	r3, [r7, #4]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	200047ac 	.word	0x200047ac
 8009a84:	200047c0 	.word	0x200047c0
 8009a88:	200047d4 	.word	0x200047d4
 8009a8c:	200047e8 	.word	0x200047e8

08009a90 <prvCheckNetworkTimers>:
/*-----------------------------------------------------------*/

static void prvCheckNetworkTimers( void )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
	/* Is it time for ARP processing? */
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 8009a96:	482d      	ldr	r0, [pc, #180]	; (8009b4c <prvCheckNetworkTimers+0xbc>)
 8009a98:	f000 f89c 	bl	8009bd4 <prvIPTimerCheck>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <prvCheckNetworkTimers+0x18>
	{
		xSendEventToIPTask( eARPTimerEvent );
 8009aa2:	2002      	movs	r0, #2
 8009aa4:	f000 fa48 	bl	8009f38 <xSendEventToIPTask>
	}

	#if( ipconfigUSE_DHCP == 1 )
	{
		/* Is it time for DHCP processing? */
		if( prvIPTimerCheck( &xDHCPTimer ) != pdFALSE )
 8009aa8:	4829      	ldr	r0, [pc, #164]	; (8009b50 <prvCheckNetworkTimers+0xc0>)
 8009aaa:	f000 f893 	bl	8009bd4 <prvIPTimerCheck>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <prvCheckNetworkTimers+0x2a>
		{
			xSendEventToIPTask( eDHCPEvent );
 8009ab4:	2004      	movs	r0, #4
 8009ab6:	f000 fa3f 	bl	8009f38 <xSendEventToIPTask>
	#if( ipconfigDNS_USE_CALLBACKS != 0 )
	{
	extern void vDNSCheckCallBack( void *pvSearchID );

		/* Is it time for DNS processing? */
		if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 8009aba:	4826      	ldr	r0, [pc, #152]	; (8009b54 <prvCheckNetworkTimers+0xc4>)
 8009abc:	f000 f88a 	bl	8009bd4 <prvIPTimerCheck>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d002      	beq.n	8009acc <prvCheckNetworkTimers+0x3c>
		{
			vDNSCheckCallBack( NULL );
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	f7ff fa6c 	bl	8008fa4 <vDNSCheckCallBack>
	static TickType_t xStart = ( TickType_t ) 0;
	TickType_t xTimeNow, xNextTime;
	BaseType_t xCheckTCPSockets;
	extern uint32_t ulNextInitialSequenceNumber;

		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0u )
 8009acc:	4b22      	ldr	r3, [pc, #136]	; (8009b58 <prvCheckNetworkTimers+0xc8>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fd f8d5 	bl	8006c80 <uxQueueMessagesWaiting>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d102      	bne.n	8009ae2 <prvCheckNetworkTimers+0x52>
		{
			xWillSleep = pdTRUE;
 8009adc:	2301      	movs	r3, #1
 8009ade:	60fb      	str	r3, [r7, #12]
 8009ae0:	e001      	b.n	8009ae6 <prvCheckNetworkTimers+0x56>
		}
		else
		{
			xWillSleep = pdFALSE;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	60fb      	str	r3, [r7, #12]
		}

		xTimeNow = xTaskGetTickCount();
 8009ae6:	f7fd fccd 	bl	8007484 <xTaskGetTickCount>
 8009aea:	6078      	str	r0, [r7, #4]

		if( xStart != ( TickType_t ) 0 )
 8009aec:	4b1b      	ldr	r3, [pc, #108]	; (8009b5c <prvCheckNetworkTimers+0xcc>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d009      	beq.n	8009b08 <prvCheckNetworkTimers+0x78>
		{
			/* It is advised to increment the Initial Sequence Number every 4
			microseconds which makes 250 times per ms.  This will make it harder
			for a third party to 'guess' our sequence number and 'take over'
			a TCP connection */
			ulNextInitialSequenceNumber += ipINITIAL_SEQUENCE_NUMBER_FACTOR * ( ( xTimeNow - xStart ) * portTICK_PERIOD_MS );
 8009af4:	4b19      	ldr	r3, [pc, #100]	; (8009b5c <prvCheckNetworkTimers+0xcc>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	021a      	lsls	r2, r3, #8
 8009afe:	4b18      	ldr	r3, [pc, #96]	; (8009b60 <prvCheckNetworkTimers+0xd0>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4413      	add	r3, r2
 8009b04:	4a16      	ldr	r2, [pc, #88]	; (8009b60 <prvCheckNetworkTimers+0xd0>)
 8009b06:	6013      	str	r3, [r2, #0]
		}

		xStart = xTimeNow;
 8009b08:	4a14      	ldr	r2, [pc, #80]	; (8009b5c <prvCheckNetworkTimers+0xcc>)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6013      	str	r3, [r2, #0]

		/* Sockets need to be checked if the TCP timer has expired. */
		xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 8009b0e:	4815      	ldr	r0, [pc, #84]	; (8009b64 <prvCheckNetworkTimers+0xd4>)
 8009b10:	f000 f860 	bl	8009bd4 <prvIPTimerCheck>
 8009b14:	60b8      	str	r0, [r7, #8]

		/* Sockets will also be checked if there are TCP messages but the
		message queue is empty (indicated by xWillSleep being true). */
		if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 8009b16:	4b14      	ldr	r3, [pc, #80]	; (8009b68 <prvCheckNetworkTimers+0xd8>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d004      	beq.n	8009b28 <prvCheckNetworkTimers+0x98>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <prvCheckNetworkTimers+0x98>
		{
			xCheckTCPSockets = pdTRUE;
 8009b24:	2301      	movs	r3, #1
 8009b26:	60bb      	str	r3, [r7, #8]
		}

		if( xCheckTCPSockets != pdFALSE )
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <prvCheckNetworkTimers+0xb4>
		{
			/* Attend to the sockets, returning the period after which the
			check must be repeated. */
			xNextTime = xTCPTimerCheck( xWillSleep );
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f001 fca4 	bl	800b47c <xTCPTimerCheck>
 8009b34:	6038      	str	r0, [r7, #0]
			prvIPTimerStart( &xTCPTimer, xNextTime );
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	480a      	ldr	r0, [pc, #40]	; (8009b64 <prvCheckNetworkTimers+0xd4>)
 8009b3a:	f000 f817 	bl	8009b6c <prvIPTimerStart>
			xProcessedTCPMessage = 0;
 8009b3e:	4b0a      	ldr	r3, [pc, #40]	; (8009b68 <prvCheckNetworkTimers+0xd8>)
 8009b40:	2200      	movs	r2, #0
 8009b42:	601a      	str	r2, [r3, #0]
		}
	}
	#endif /* ipconfigUSE_TCP == 1 */
}
 8009b44:	bf00      	nop
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	200047ac 	.word	0x200047ac
 8009b50:	200047c0 	.word	0x200047c0
 8009b54:	200047e8 	.word	0x200047e8
 8009b58:	2000476c 	.word	0x2000476c
 8009b5c:	20004800 	.word	0x20004800
 8009b60:	20004810 	.word	0x20004810
 8009b64:	200047d4 	.word	0x200047d4
 8009b68:	200047a4 	.word	0x200047a4

08009b6c <prvIPTimerStart>:
/*-----------------------------------------------------------*/

static void prvIPTimerStart( IPTimer_t *pxTimer, TickType_t xTime )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	3304      	adds	r3, #4
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fd fec8 	bl	8007910 <vTaskSetTimeOutState>
	pxTimer->ulRemainingTime = xTime;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	60da      	str	r2, [r3, #12]

	if( xTime == ( TickType_t ) 0 )
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d105      	bne.n	8009b98 <prvIPTimerStart+0x2c>
	{
		pxTimer->bExpired = pdTRUE_UNSIGNED;
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	7813      	ldrb	r3, [r2, #0]
 8009b90:	f043 0302 	orr.w	r3, r3, #2
 8009b94:	7013      	strb	r3, [r2, #0]
 8009b96:	e004      	b.n	8009ba2 <prvIPTimerStart+0x36>
	}
	else
	{
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	7813      	ldrb	r3, [r2, #0]
 8009b9c:	f36f 0341 	bfc	r3, #1, #1
 8009ba0:	7013      	strb	r3, [r2, #0]
	}

	pxTimer->bActive = pdTRUE_UNSIGNED;
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	7813      	ldrb	r3, [r2, #0]
 8009ba6:	f043 0301 	orr.w	r3, r3, #1
 8009baa:	7013      	strb	r3, [r2, #0]
}
 8009bac:	bf00      	nop
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <prvIPTimerReload>:
/*-----------------------------------------------------------*/

static void prvIPTimerReload( IPTimer_t *pxTimer, TickType_t xTime )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
	pxTimer->ulReloadTime = xTime;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	683a      	ldr	r2, [r7, #0]
 8009bc2:	611a      	str	r2, [r3, #16]
	prvIPTimerStart( pxTimer, xTime );
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7ff ffd0 	bl	8009b6c <prvIPTimerStart>
}
 8009bcc:	bf00      	nop
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <prvIPTimerCheck>:
/*-----------------------------------------------------------*/

static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	if( pxTimer->bActive == pdFALSE_UNSIGNED )
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d102      	bne.n	8009bf0 <prvIPTimerCheck+0x1c>
	{
		/* The timer is not enabled. */
		xReturn = pdFALSE;
 8009bea:	2300      	movs	r3, #0
 8009bec:	60fb      	str	r3, [r7, #12]
 8009bee:	e01c      	b.n	8009c2a <prvIPTimerCheck+0x56>
	}
	else
	{
		/* The timer might have set the bExpired flag already, if not, check the
		value of xTimeOut against ulRemainingTime. */
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	f003 0302 	and.w	r3, r3, #2
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10a      	bne.n	8009c14 <prvIPTimerCheck+0x40>
			( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE ) )
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	1d1a      	adds	r2, r3, #4
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	330c      	adds	r3, #12
 8009c06:	4619      	mov	r1, r3
 8009c08:	4610      	mov	r0, r2
 8009c0a:	f7fd febd 	bl	8007988 <xTaskCheckForTimeOut>
 8009c0e:	4603      	mov	r3, r0
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d008      	beq.n	8009c26 <prvIPTimerCheck+0x52>
		{
			prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f7ff ffa6 	bl	8009b6c <prvIPTimerStart>
			xReturn = pdTRUE;
 8009c20:	2301      	movs	r3, #1
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	e001      	b.n	8009c2a <prvIPTimerCheck+0x56>
		}
		else
		{
			xReturn = pdFALSE;
 8009c26:	2300      	movs	r3, #0
 8009c28:	60fb      	str	r3, [r7, #12]
		}
	}

	return xReturn;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <FreeRTOS_NetworkDown>:
/*-----------------------------------------------------------*/

void FreeRTOS_NetworkDown( void )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
const TickType_t xDontBlock = ( TickType_t ) 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	607b      	str	r3, [r7, #4]

	/* Simply send the network task the appropriate event. */
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8009c3e:	6879      	ldr	r1, [r7, #4]
 8009c40:	4808      	ldr	r0, [pc, #32]	; (8009c64 <FreeRTOS_NetworkDown+0x30>)
 8009c42:	f000 f98f 	bl	8009f64 <xSendEventStructToIPTask>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d003      	beq.n	8009c54 <FreeRTOS_NetworkDown+0x20>
	{
		/* Could not send the message, so it is still pending. */
		xNetworkDownEventPending = pdTRUE;
 8009c4c:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <FreeRTOS_NetworkDown+0x34>)
 8009c4e:	2201      	movs	r2, #1
 8009c50:	601a      	str	r2, [r3, #0]
		/* Message was sent so it is not pending. */
		xNetworkDownEventPending = pdFALSE;
	}

	iptraceNETWORK_DOWN();
}
 8009c52:	e002      	b.n	8009c5a <FreeRTOS_NetworkDown+0x26>
		xNetworkDownEventPending = pdFALSE;
 8009c54:	4b04      	ldr	r3, [pc, #16]	; (8009c68 <FreeRTOS_NetworkDown+0x34>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	601a      	str	r2, [r3, #0]
}
 8009c5a:	bf00      	nop
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	080109ac 	.word	0x080109ac
 8009c68:	2000479c 	.word	0x2000479c

08009c6c <FreeRTOS_GetUDPPayloadBuffer>:
	return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void *FreeRTOS_GetUDPPayloadBuffer( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
void *pvReturn;

	/* Cap the block time.  The reason for this is explained where
	ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined (assuming an official
	FreeRTOSIPConfig.h header file is being used). */
	if( xBlockTimeTicks > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d902      	bls.n	8009c86 <FreeRTOS_GetUDPPayloadBuffer+0x1a>
	{
		xBlockTimeTicks = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 8009c80:	f241 3388 	movw	r3, #5000	; 0x1388
 8009c84:	603b      	str	r3, [r7, #0]
	}

	/* Obtain a network buffer with the required amount of storage. */
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( UDPPacket_t ) + xRequestedSizeBytes, xBlockTimeTicks );
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	332a      	adds	r3, #42	; 0x2a
 8009c8a:	6839      	ldr	r1, [r7, #0]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f005 fc91 	bl	800f5b4 <pxGetNetworkBufferWithDescriptor>
 8009c92:	60b8      	str	r0, [r7, #8]

	if( pxNetworkBuffer != NULL )
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d004      	beq.n	8009ca4 <FreeRTOS_GetUDPPayloadBuffer+0x38>
	{
		/* Leave space for the UPD header. */
		pvReturn = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	332a      	adds	r3, #42	; 0x2a
 8009ca0:	60fb      	str	r3, [r7, #12]
 8009ca2:	e001      	b.n	8009ca8 <FreeRTOS_GetUDPPayloadBuffer+0x3c>
	}
	else
	{
		pvReturn = NULL;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	60fb      	str	r3, [r7, #12]
	}

	return ( void * ) pvReturn;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <pxDuplicateNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxDuplicateNetworkBufferWithDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer,
	BaseType_t xNewLength )
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b084      	sub	sp, #16
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	6039      	str	r1, [r7, #0]
NetworkBufferDescriptor_t * pxNewBuffer;

	/* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
	The transmit routine wants to have ownership of the network buffer
	descriptor, because it will pass the buffer straight to DMA. */
	pxNewBuffer = pxGetNetworkBufferWithDescriptor( ( size_t ) xNewLength, ( TickType_t ) 0 );
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f005 fc77 	bl	800f5b4 <pxGetNetworkBufferWithDescriptor>
 8009cc6:	60f8      	str	r0, [r7, #12]

	if( pxNewBuffer != NULL )
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d014      	beq.n	8009cf8 <pxDuplicateNetworkBufferWithDescriptor+0x46>
	{
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	695a      	ldr	r2, [r3, #20]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	615a      	str	r2, [r3, #20]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	8c1a      	ldrh	r2, [r3, #32]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	841a      	strh	r2, [r3, #32]
		pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	845a      	strh	r2, [r3, #34]	; 0x22
		memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6998      	ldr	r0, [r3, #24]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6999      	ldr	r1, [r3, #24]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	f006 fc13 	bl	801051e <memcpy>
	}

	return pxNewBuffer;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <pxUDPPayloadBuffer_to_NetworkBuffer>:

#endif /* ipconfigZERO_COPY_TX_DRIVER != 0 */
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxUDPPayloadBuffer_to_NetworkBuffer( void *pvBuffer )
{
 8009d02:	b480      	push	{r7}
 8009d04:	b085      	sub	sp, #20
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
uint8_t *pucBuffer;
NetworkBufferDescriptor_t *pxResult;

	if( pvBuffer == NULL )
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d102      	bne.n	8009d16 <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
	{
		pxResult = NULL;
 8009d10:	2300      	movs	r3, #0
 8009d12:	60fb      	str	r3, [r7, #12]
 8009d14:	e00f      	b.n	8009d36 <pxUDPPayloadBuffer_to_NetworkBuffer+0x34>
	}
	else
	{
		/* Obtain the network buffer from the zero copy pointer. */
		pucBuffer = ( uint8_t * ) pvBuffer;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	60bb      	str	r3, [r7, #8]

		/* The input here is a pointer to a payload buffer.  Subtract
		the total size of a UDP/IP header plus the size of the header in
		the network buffer, usually 8 + 2 bytes. */
		pucBuffer -= ( sizeof( UDPPacket_t ) + ipBUFFER_PADDING );
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	3b34      	subs	r3, #52	; 0x34
 8009d1e:	60bb      	str	r3, [r7, #8]

		/* Here a pointer was placed to the network descriptor,
		As a pointer is dereferenced, make sure it is well aligned */
		if( ( ( ( uint32_t ) pucBuffer ) & ( sizeof( pucBuffer ) - 1 ) ) == 0 )
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	f003 0303 	and.w	r3, r3, #3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d103      	bne.n	8009d32 <pxUDPPayloadBuffer_to_NetworkBuffer+0x30>
		{
			/* The following statement may trigger a:
			warning: cast increases required alignment of target type [-Wcast-align].
			It has been confirmed though that the alignment is suitable. */
			pxResult = * ( ( NetworkBufferDescriptor_t ** ) pucBuffer );
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	60fb      	str	r3, [r7, #12]
 8009d30:	e001      	b.n	8009d36 <pxUDPPayloadBuffer_to_NetworkBuffer+0x34>
		}
		else
		{
			pxResult = NULL;
 8009d32:	2300      	movs	r3, #0
 8009d34:	60fb      	str	r3, [r7, #12]
		}
	}

	return pxResult;
 8009d36:	68fb      	ldr	r3, [r7, #12]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <FreeRTOS_ReleaseUDPPayloadBuffer>:
/*-----------------------------------------------------------*/

void FreeRTOS_ReleaseUDPPayloadBuffer( void *pvBuffer )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
	vReleaseNetworkBufferAndDescriptor( pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer ) );
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7ff ffd8 	bl	8009d02 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8009d52:	4603      	mov	r3, r0
 8009d54:	4618      	mov	r0, r3
 8009d56:	f005 fca5 	bl	800f6a4 <vReleaseNetworkBufferAndDescriptor>
}
 8009d5a:	bf00      	nop
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
	...

08009d64 <FreeRTOS_IPInit>:
/*_RB_ Should we add an error or assert if the task priorities are set such that the servers won't function as expected? */
/*_HT_ There was a bug in FreeRTOS_TCP_IP.c that only occurred when the applications' priority was too high.
 As that bug has been repaired, there is not an urgent reason to warn.
 It is better though to use the advised priority scheme. */
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 8009d64:	b5b0      	push	{r4, r5, r7, lr}
 8009d66:	b08c      	sub	sp, #48	; 0x30
 8009d68:	af02      	add	r7, sp, #8
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
 8009d70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFALSE;
 8009d72:	2300      	movs	r3, #0
 8009d74:	627b      	str	r3, [r7, #36]	; 0x24

	/* This function should only be called once. */
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 8009d76:	f000 fbdb 	bl	800a530 <xIPIsNetworkTaskReady>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d009      	beq.n	8009d94 <FreeRTOS_IPInit+0x30>
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	623b      	str	r3, [r7, #32]
 8009d92:	e7fe      	b.n	8009d92 <FreeRTOS_IPInit+0x2e>
	configASSERT( xNetworkEventQueue == NULL );
 8009d94:	4b60      	ldr	r3, [pc, #384]	; (8009f18 <FreeRTOS_IPInit+0x1b4>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d009      	beq.n	8009db0 <FreeRTOS_IPInit+0x4c>
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	61fb      	str	r3, [r7, #28]
 8009dae:	e7fe      	b.n	8009dae <FreeRTOS_IPInit+0x4a>
	configASSERT( xIPTaskHandle == NULL );
 8009db0:	4b5a      	ldr	r3, [pc, #360]	; (8009f1c <FreeRTOS_IPInit+0x1b8>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d009      	beq.n	8009dcc <FreeRTOS_IPInit+0x68>
 8009db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	61bb      	str	r3, [r7, #24]
 8009dca:	e7fe      	b.n	8009dca <FreeRTOS_IPInit+0x66>
	configASSERT( sizeof( IPHeader_t ) == ipEXPECTED_IPHeader_t_SIZE );
	configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
	configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );

	/* Attempt to create the queue used to communicate with the IP task. */
	xNetworkEventQueue = xQueueCreate( ( UBaseType_t ) ipconfigEVENT_QUEUE_LENGTH, ( UBaseType_t ) sizeof( IPStackEvent_t ) );
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2108      	movs	r1, #8
 8009dd0:	201e      	movs	r0, #30
 8009dd2:	f7fc fbed 	bl	80065b0 <xQueueGenericCreate>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	4b4f      	ldr	r3, [pc, #316]	; (8009f18 <FreeRTOS_IPInit+0x1b4>)
 8009dda:	601a      	str	r2, [r3, #0]
	configASSERT( xNetworkEventQueue );
 8009ddc:	4b4e      	ldr	r3, [pc, #312]	; (8009f18 <FreeRTOS_IPInit+0x1b4>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d109      	bne.n	8009df8 <FreeRTOS_IPInit+0x94>
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	617b      	str	r3, [r7, #20]
 8009df6:	e7fe      	b.n	8009df6 <FreeRTOS_IPInit+0x92>

	if( xNetworkEventQueue != NULL )
 8009df8:	4b47      	ldr	r3, [pc, #284]	; (8009f18 <FreeRTOS_IPInit+0x1b4>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f000 8086 	beq.w	8009f0e <FreeRTOS_IPInit+0x1aa>
		#if ( configQUEUE_REGISTRY_SIZE > 0 )
		{
			/* A queue registry is normally used to assist a kernel aware
			debugger.  If one is in use then it will be helpful for the debugger
			to show information about the network event queue. */
			vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 8009e02:	4b45      	ldr	r3, [pc, #276]	; (8009f18 <FreeRTOS_IPInit+0x1b4>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4946      	ldr	r1, [pc, #280]	; (8009f20 <FreeRTOS_IPInit+0x1bc>)
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fd f89b 	bl	8006f44 <vQueueAddToRegistry>
		}
		#endif /* configQUEUE_REGISTRY_SIZE */

		if( xNetworkBuffersInitialise() == pdPASS )
 8009e0e:	f005 fb43 	bl	800f498 <xNetworkBuffersInitialise>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d172      	bne.n	8009efe <FreeRTOS_IPInit+0x19a>
		{
			/* Store the local IP and MAC address. */
			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	3303      	adds	r3, #3
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	061a      	lsls	r2, r3, #24
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	3302      	adds	r3, #2
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	041b      	lsls	r3, r3, #16
 8009e28:	431a      	orrs	r2, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	021b      	lsls	r3, r3, #8
 8009e32:	4313      	orrs	r3, r2
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	7812      	ldrb	r2, [r2, #0]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	4a3a      	ldr	r2, [pc, #232]	; (8009f24 <FreeRTOS_IPInit+0x1c0>)
 8009e3c:	6013      	str	r3, [r2, #0]
			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	3303      	adds	r3, #3
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	061a      	lsls	r2, r3, #24
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	3302      	adds	r3, #2
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	041b      	lsls	r3, r3, #16
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	3301      	adds	r3, #1
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	021b      	lsls	r3, r3, #8
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	7812      	ldrb	r2, [r2, #0]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	4a30      	ldr	r2, [pc, #192]	; (8009f24 <FreeRTOS_IPInit+0x1c0>)
 8009e62:	6053      	str	r3, [r2, #4]
			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3303      	adds	r3, #3
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	061a      	lsls	r2, r3, #24
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	3302      	adds	r3, #2
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	041b      	lsls	r3, r3, #16
 8009e74:	431a      	orrs	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	021b      	lsls	r3, r3, #8
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	7812      	ldrb	r2, [r2, #0]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	4a27      	ldr	r2, [pc, #156]	; (8009f24 <FreeRTOS_IPInit+0x1c0>)
 8009e88:	6093      	str	r3, [r2, #8]
			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	3303      	adds	r3, #3
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	061a      	lsls	r2, r3, #24
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	3302      	adds	r3, #2
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	041b      	lsls	r3, r3, #16
 8009e9a:	431a      	orrs	r2, r3
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	021b      	lsls	r3, r3, #8
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	7812      	ldrb	r2, [r2, #0]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	4a1d      	ldr	r2, [pc, #116]	; (8009f24 <FreeRTOS_IPInit+0x1c0>)
 8009eae:	60d3      	str	r3, [r2, #12]
			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
 8009eb0:	4b1c      	ldr	r3, [pc, #112]	; (8009f24 <FreeRTOS_IPInit+0x1c0>)
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	4b1b      	ldr	r3, [pc, #108]	; (8009f24 <FreeRTOS_IPInit+0x1c0>)
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	43db      	mvns	r3, r3
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	4a19      	ldr	r2, [pc, #100]	; (8009f24 <FreeRTOS_IPInit+0x1c0>)
 8009ebe:	6113      	str	r3, [r2, #16]

			memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 8009ec0:	4a19      	ldr	r2, [pc, #100]	; (8009f28 <FreeRTOS_IPInit+0x1c4>)
 8009ec2:	4b18      	ldr	r3, [pc, #96]	; (8009f24 <FreeRTOS_IPInit+0x1c0>)
 8009ec4:	4614      	mov	r4, r2
 8009ec6:	461d      	mov	r5, r3
 8009ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ecc:	682b      	ldr	r3, [r5, #0]
 8009ece:	6023      	str	r3, [r4, #0]

			#if ipconfigUSE_DHCP == 1
			{
				/* The IP address is not set until DHCP completes. */
				*ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
 8009ed0:	4b16      	ldr	r3, [pc, #88]	; (8009f2c <FreeRTOS_IPInit+0x1c8>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	615a      	str	r2, [r3, #20]
			}
			#endif /* ipconfigUSE_DHCP == 1 */

			/* The MAC address is stored in the start of the default packet
			header fragment, which is used when sending UDP packets. */
			memcpy( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8009ed6:	2206      	movs	r2, #6
 8009ed8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009eda:	4814      	ldr	r0, [pc, #80]	; (8009f2c <FreeRTOS_IPInit+0x1c8>)
 8009edc:	f006 fb1f 	bl	801051e <memcpy>

			/* Prepare the sockets interface. */
			vNetworkSocketsInit();
 8009ee0:	f000 fbfc 	bl	800a6dc <vNetworkSocketsInit>

			/* Create the task that processes Ethernet and stack events. */
			xReturn = xTaskCreate( prvIPTask, "IP-task", ( uint16_t ) ipconfigIP_TASK_STACK_SIZE_WORDS, NULL, ( UBaseType_t ) ipconfigIP_TASK_PRIORITY, &xIPTaskHandle );
 8009ee4:	4b0d      	ldr	r3, [pc, #52]	; (8009f1c <FreeRTOS_IPInit+0x1b8>)
 8009ee6:	9301      	str	r3, [sp, #4]
 8009ee8:	2305      	movs	r3, #5
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	2300      	movs	r3, #0
 8009eee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009ef2:	490f      	ldr	r1, [pc, #60]	; (8009f30 <FreeRTOS_IPInit+0x1cc>)
 8009ef4:	480f      	ldr	r0, [pc, #60]	; (8009f34 <FreeRTOS_IPInit+0x1d0>)
 8009ef6:	f7fd f877 	bl	8006fe8 <xTaskCreate>
 8009efa:	6278      	str	r0, [r7, #36]	; 0x24
 8009efc:	e007      	b.n	8009f0e <FreeRTOS_IPInit+0x1aa>
		else
		{
			FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n") );

			/* Clean up. */
			vQueueDelete( xNetworkEventQueue );
 8009efe:	4b06      	ldr	r3, [pc, #24]	; (8009f18 <FreeRTOS_IPInit+0x1b4>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fc fed9 	bl	8006cba <vQueueDelete>
			xNetworkEventQueue = NULL;
 8009f08:	4b03      	ldr	r3, [pc, #12]	; (8009f18 <FreeRTOS_IPInit+0x1b4>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	601a      	str	r2, [r3, #0]
	else
	{
		FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n") );
	}

	return xReturn;
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3728      	adds	r7, #40	; 0x28
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bdb0      	pop	{r4, r5, r7, pc}
 8009f18:	2000476c 	.word	0x2000476c
 8009f1c:	200047a0 	.word	0x200047a0
 8009f20:	08010814 	.word	0x08010814
 8009f24:	20004774 	.word	0x20004774
 8009f28:	20004788 	.word	0x20004788
 8009f2c:	200000a0 	.word	0x200000a0
 8009f30:	0801081c 	.word	0x0801081c
 8009f34:	08009851 	.word	0x08009851

08009f38 <xSendEventToIPTask>:

#endif /* ipconfigSUPPORT_OUTGOING_PINGS == 1 */
/*-----------------------------------------------------------*/

BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	71fb      	strb	r3, [r7, #7]
IPStackEvent_t xEventMessage;
const TickType_t xDontBlock = ( TickType_t ) 0;
 8009f42:	2300      	movs	r3, #0
 8009f44:	617b      	str	r3, [r7, #20]

	xEventMessage.eEventType = eEvent;
 8009f46:	79fb      	ldrb	r3, [r7, #7]
 8009f48:	733b      	strb	r3, [r7, #12]
	xEventMessage.pvData = ( void* )NULL;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	613b      	str	r3, [r7, #16]

	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8009f4e:	f107 030c 	add.w	r3, r7, #12
 8009f52:	6979      	ldr	r1, [r7, #20]
 8009f54:	4618      	mov	r0, r3
 8009f56:	f000 f805 	bl	8009f64 <xSendEventStructToIPTask>
 8009f5a:	4603      	mov	r3, r0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <xSendEventStructToIPTask>:
/*-----------------------------------------------------------*/

BaseType_t xSendEventStructToIPTask( const IPStackEvent_t *pxEvent, TickType_t xTimeout )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn, xSendMessage;

	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8009f6e:	f000 fadf 	bl	800a530 <xIPIsNetworkTaskReady>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d107      	bne.n	8009f88 <xSendEventStructToIPTask+0x24>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f993 3000 	ldrsb.w	r3, [r3]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d002      	beq.n	8009f88 <xSendEventStructToIPTask+0x24>
	{
		/* Only allow eNetworkDownEvent events if the IP task is not ready
		yet.  Not going to attempt to send the message so the send failed. */
		xReturn = pdFAIL;
 8009f82:	2300      	movs	r3, #0
 8009f84:	60fb      	str	r3, [r7, #12]
 8009f86:	e02d      	b.n	8009fe4 <xSendEventStructToIPTask+0x80>
	}
	else
	{
		xSendMessage = pdTRUE;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	60bb      	str	r3, [r7, #8]

		#if( ipconfigUSE_TCP == 1 )
		{
			if( pxEvent->eEventType == eTCPTimerEvent )
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f993 3000 	ldrsb.w	r3, [r3]
 8009f92:	2b05      	cmp	r3, #5
 8009f94:	d10e      	bne.n	8009fb4 <xSendEventStructToIPTask+0x50>
			{
				/* TCP timer events are sent to wake the timer task when
				xTCPTimer has expired, but there is no point sending them if the
				IP task is already awake processing other message. */
				xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8009f96:	4a16      	ldr	r2, [pc, #88]	; (8009ff0 <xSendEventStructToIPTask+0x8c>)
 8009f98:	7813      	ldrb	r3, [r2, #0]
 8009f9a:	f043 0302 	orr.w	r3, r3, #2
 8009f9e:	7013      	strb	r3, [r2, #0]

				if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0u )
 8009fa0:	4b14      	ldr	r3, [pc, #80]	; (8009ff4 <xSendEventStructToIPTask+0x90>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7fc fe6b 	bl	8006c80 <uxQueueMessagesWaiting>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d001      	beq.n	8009fb4 <xSendEventStructToIPTask+0x50>
				{
					/* Not actually going to send the message but this is not a
					failure as the message didn't need to be sent. */
					xSendMessage = pdFALSE;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	60bb      	str	r3, [r7, #8]
				}
			}
		}
		#endif /* ipconfigUSE_TCP */

		if( xSendMessage != pdFALSE )
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d012      	beq.n	8009fe0 <xSendEventStructToIPTask+0x7c>
		{
			/* The IP task cannot block itself while waiting for itself to
			respond. */
			if( ( xIsCallingFromIPTask() == pdTRUE ) && ( xTimeout > ( TickType_t ) 0 ) )
 8009fba:	f7ff fcfd 	bl	80099b8 <xIsCallingFromIPTask>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d104      	bne.n	8009fce <xSendEventStructToIPTask+0x6a>
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <xSendEventStructToIPTask+0x6a>
			{
				xTimeout = ( TickType_t ) 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	603b      	str	r3, [r7, #0]
			}

			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, xTimeout );
 8009fce:	4b09      	ldr	r3, [pc, #36]	; (8009ff4 <xSendEventStructToIPTask+0x90>)
 8009fd0:	6818      	ldr	r0, [r3, #0]
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	6879      	ldr	r1, [r7, #4]
 8009fd8:	f7fc fb74 	bl	80066c4 <xQueueGenericSend>
 8009fdc:	60f8      	str	r0, [r7, #12]
 8009fde:	e001      	b.n	8009fe4 <xSendEventStructToIPTask+0x80>
		}
		else
		{
			/* It was not necessary to send the message to process the event so
			even though the message was not sent the call was successful. */
			xReturn = pdPASS;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	60fb      	str	r3, [r7, #12]
		}
	}

	return xReturn;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	200047d4 	.word	0x200047d4
 8009ff4:	2000476c 	.word	0x2000476c

08009ff8 <prvProcessNetworkDownEvent>:
	return eReturn;
}
/*-----------------------------------------------------------*/

static void prvProcessNetworkDownEvent( void )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	af00      	add	r7, sp, #0
	/* Stop the ARP timer while there is no network. */
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 8009ffc:	4a11      	ldr	r2, [pc, #68]	; (800a044 <prvProcessNetworkDownEvent+0x4c>)
 8009ffe:	7813      	ldrb	r3, [r2, #0]
 800a000:	f36f 0300 	bfc	r3, #0, #1
 800a004:	7013      	strb	r3, [r2, #0]
		static BaseType_t xCallEventHook = pdFALSE;

		/* The first network down event is generated by the IP stack itself to
		initialise the network hardware, so do not call the network down event
		the first time through. */
		if( xCallEventHook == pdTRUE )
 800a006:	4b10      	ldr	r3, [pc, #64]	; (800a048 <prvProcessNetworkDownEvent+0x50>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d102      	bne.n	800a014 <prvProcessNetworkDownEvent+0x1c>
		{
			vApplicationIPNetworkEventHook( eNetworkDown );
 800a00e:	2001      	movs	r0, #1
 800a010:	f005 fbbc 	bl	800f78c <vApplicationIPNetworkEventHook>
		}
		xCallEventHook = pdTRUE;
 800a014:	4b0c      	ldr	r3, [pc, #48]	; (800a048 <prvProcessNetworkDownEvent+0x50>)
 800a016:	2201      	movs	r2, #1
 800a018:	601a      	str	r2, [r3, #0]
	#endif

	/* The network has been disconnected (or is being initialised for the first
	time).  Perform whatever hardware processing is necessary to bring it up
	again, or wait for it to be available again.  This is hardware dependent. */
	if( xNetworkInterfaceInitialise() != pdPASS )
 800a01a:	f7fa fbd3 	bl	80047c4 <xNetworkInterfaceInitialise>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b01      	cmp	r3, #1
 800a022:	d006      	beq.n	800a032 <prvProcessNetworkDownEvent+0x3a>
	{
		/* Ideally the network interface initialisation function will only
		return when the network is available.  In case this is not the case,
		wait a while before retrying the initialisation. */
		vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 800a024:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a028:	f7fd f908 	bl	800723c <vTaskDelay>
		FreeRTOS_NetworkDown();
 800a02c:	f7ff fe02 	bl	8009c34 <FreeRTOS_NetworkDown>
			/* Perform any necessary 'network up' processing. */
			vIPNetworkUpCalls();
		}
		#endif
	}
}
 800a030:	e005      	b.n	800a03e <prvProcessNetworkDownEvent+0x46>
			vDHCPProcess( pdTRUE );
 800a032:	2001      	movs	r0, #1
 800a034:	f7fe fb62 	bl	80086fc <vDHCPProcess>
			xSendEventToIPTask( eDHCPEvent );
 800a038:	2004      	movs	r0, #4
 800a03a:	f7ff ff7d 	bl	8009f38 <xSendEventToIPTask>
}
 800a03e:	bf00      	nop
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	200047ac 	.word	0x200047ac
 800a048:	20004804 	.word	0x20004804

0800a04c <vIPNetworkUpCalls>:
/*-----------------------------------------------------------*/

void vIPNetworkUpCalls( void )
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	af00      	add	r7, sp, #0
	xNetworkUp = pdTRUE;
 800a050:	4b07      	ldr	r3, [pc, #28]	; (800a070 <vIPNetworkUpCalls+0x24>)
 800a052:	2201      	movs	r2, #1
 800a054:	601a      	str	r2, [r3, #0]

	#if( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
	{
		vApplicationIPNetworkEventHook( eNetworkUp );
 800a056:	2000      	movs	r0, #0
 800a058:	f005 fb98 	bl	800f78c <vApplicationIPNetworkEventHook>
	#if( ipconfigDNS_USE_CALLBACKS != 0 )
	{
		/* The following function is declared in FreeRTOS_DNS.c	and 'private' to
		this library */
		extern void vDNSInitialise( void );
		vDNSInitialise();
 800a05c:	f7fe ff98 	bl	8008f90 <vDNSInitialise>
	}
	#endif /* ipconfigDNS_USE_CALLBACKS != 0 */

	/* Set remaining time to 0 so it will become active immediately. */
	prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 800a060:	f242 7110 	movw	r1, #10000	; 0x2710
 800a064:	4803      	ldr	r0, [pc, #12]	; (800a074 <vIPNetworkUpCalls+0x28>)
 800a066:	f7ff fda5 	bl	8009bb4 <prvIPTimerReload>
}
 800a06a:	bf00      	nop
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	200047a8 	.word	0x200047a8
 800a074:	200047ac 	.word	0x200047ac

0800a078 <prvProcessEthernetPacket>:
/*-----------------------------------------------------------*/

static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
EthernetHeader_t *pxEthernetHeader;
volatile eFrameProcessingResult_t eReturned; /* Volatile to prevent complier warnings when ipCONSIDER_FRAME_FOR_PROCESSING just sets it to eProcessBuffer. */

	configASSERT( pxNetworkBuffer );
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d109      	bne.n	800a09a <prvProcessEthernetPacket+0x22>
 800a086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	613b      	str	r3, [r7, #16]
 800a098:	e7fe      	b.n	800a098 <prvProcessEthernetPacket+0x20>

	/* Interpret the Ethernet frame. */
	eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 800a09a:	2301      	movs	r3, #1
 800a09c:	73fb      	strb	r3, [r7, #15]
	pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	617b      	str	r3, [r7, #20]

	if( eReturned == eProcessBuffer )
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d11b      	bne.n	800a0e4 <prvProcessEthernetPacket+0x6c>
	{
		/* Interpret the received Ethernet packet. */
		switch( pxEthernetHeader->usFrameType )
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	899b      	ldrh	r3, [r3, #12]
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	2b08      	cmp	r3, #8
 800a0b4:	d00a      	beq.n	800a0cc <prvProcessEthernetPacket+0x54>
 800a0b6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800a0ba:	d110      	bne.n	800a0de <prvProcessEthernetPacket+0x66>
		{
			case ipARP_FRAME_TYPE :
				/* The Ethernet frame contains an ARP packet. */
				eReturned = eARPProcessPacket( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7fd ffef 	bl	80080a4 <eARPProcessPacket>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	73fb      	strb	r3, [r7, #15]
				break;
 800a0ca:	e00b      	b.n	800a0e4 <prvProcessEthernetPacket+0x6c>

			case ipIPv4_FRAME_TYPE :
				/* The Ethernet frame contains an IP packet. */
				eReturned = prvProcessIPPacket( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer );
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	6879      	ldr	r1, [r7, #4]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 f866 	bl	800a1a4 <prvProcessIPPacket>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	73fb      	strb	r3, [r7, #15]
				break;
 800a0dc:	e002      	b.n	800a0e4 <prvProcessEthernetPacket+0x6c>

			default :
				/* No other packet types are handled.  Nothing to do. */
				eReturned = eReleaseBuffer;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	73fb      	strb	r3, [r7, #15]
				break;
 800a0e2:	bf00      	nop
		}
	}

	/* Perform any actions that resulted from processing the Ethernet frame. */
	switch( eReturned )
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d002      	beq.n	800a0f2 <prvProcessEthernetPacket+0x7a>
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	d009      	beq.n	800a104 <prvProcessEthernetPacket+0x8c>
 800a0f0:	e004      	b.n	800a0fc <prvProcessEthernetPacket+0x84>
	{
		case eReturnEthernetFrame :
			/* The Ethernet frame will have been updated (maybe it was
			an ARP request or a PING request?) and should be sent back to
			its source. */
			vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 800a0f2:	2101      	movs	r1, #1
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f9b9 	bl	800a46c <vReturnEthernetFrame>
			/* parameter pdTRUE: the buffer must be released once
			the frame has been transmitted */
			break;
 800a0fa:	e004      	b.n	800a106 <prvProcessEthernetPacket+0x8e>

		default :
			/* The frame is not being used anywhere, and the
			NetworkBufferDescriptor_t structure containing the frame should
			just be	released back to the list of free buffers. */
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f005 fad1 	bl	800f6a4 <vReleaseNetworkBufferAndDescriptor>
			break;
 800a102:	e000      	b.n	800a106 <prvProcessEthernetPacket+0x8e>
			break;
 800a104:	bf00      	nop
	}
}
 800a106:	bf00      	nop
 800a108:	3718      	adds	r7, #24
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
	...

0800a110 <prvAllowIPPacket>:
/*-----------------------------------------------------------*/

static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
	NetworkBufferDescriptor_t * const pxNetworkBuffer, UBaseType_t uxHeaderLength )
{
 800a110:	b480      	push	{r7}
 800a112:	b089      	sub	sp, #36	; 0x24
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
eFrameProcessingResult_t eReturn = eProcessBuffer;
 800a11c:	2301      	movs	r3, #1
 800a11e:	77fb      	strb	r3, [r7, #31]

#if( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
	const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	330e      	adds	r3, #14
 800a124:	61bb      	str	r3, [r7, #24]
	#if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
	{
		/* In systems with a very small amount of RAM, it might be advantageous
		to have incoming messages checked earlier, by the network card driver.
		This method may decrease the usage of sparse network buffers. */
		uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	617b      	str	r3, [r7, #20]

			/* Ensure that the incoming packet is not fragmented (only outgoing
			packets can be fragmented) as these are the only handled IP frames
			currently. */
			if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	88db      	ldrh	r3, [r3, #6]
 800a130:	b29b      	uxth	r3, r3
 800a132:	461a      	mov	r2, r3
 800a134:	f64f 730f 	movw	r3, #65295	; 0xff0f
 800a138:	4013      	ands	r3, r2
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d002      	beq.n	800a144 <prvAllowIPPacket+0x34>
			{
				/* Can not handle, fragmented packet. */
				eReturn = eReleaseBuffer;
 800a13e:	2300      	movs	r3, #0
 800a140:	77fb      	strb	r3, [r7, #31]
 800a142:	e022      	b.n	800a18a <prvAllowIPPacket+0x7a>
			}
			/* 0x45 means: IPv4 with an IP header of 5 x 4 = 20 bytes
			 * 0x47 means: IPv4 with an IP header of 7 x 4 = 28 bytes */
			else if( ( pxIPHeader->ucVersionHeaderLength < 0x45u ) || ( pxIPHeader->ucVersionHeaderLength > 0x4Fu ) )
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	2b44      	cmp	r3, #68	; 0x44
 800a14a:	d903      	bls.n	800a154 <prvAllowIPPacket+0x44>
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	2b4f      	cmp	r3, #79	; 0x4f
 800a152:	d902      	bls.n	800a15a <prvAllowIPPacket+0x4a>
			{
				/* Can not handle, unknown or invalid header version. */
				eReturn = eReleaseBuffer;
 800a154:	2300      	movs	r3, #0
 800a156:	77fb      	strb	r3, [r7, #31]
 800a158:	e017      	b.n	800a18a <prvAllowIPPacket+0x7a>
			}
				/* Is the packet for this IP address? */
			else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 800a15a:	4b0f      	ldr	r3, [pc, #60]	; (800a198 <prvAllowIPPacket+0x88>)
 800a15c:	695a      	ldr	r2, [r3, #20]
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	429a      	cmp	r2, r3
 800a162:	d012      	beq.n	800a18a <prvAllowIPPacket+0x7a>
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a16a:	d00e      	beq.n	800a18a <prvAllowIPPacket+0x7a>
				/* Is it the global broadcast address 255.255.255.255 ? */
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
				/* Is it a specific broadcast address 192.168.1.255 ? */
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800a16c:	4b0b      	ldr	r3, [pc, #44]	; (800a19c <prvAllowIPPacket+0x8c>)
 800a16e:	691a      	ldr	r2, [r3, #16]
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	429a      	cmp	r2, r3
 800a174:	d009      	beq.n	800a18a <prvAllowIPPacket+0x7a>
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	4a09      	ldr	r2, [pc, #36]	; (800a1a0 <prvAllowIPPacket+0x90>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d005      	beq.n	800a18a <prvAllowIPPacket+0x7a>
			#if( ipconfigUSE_LLMNR == 1 )
				/* Is it the LLMNR multicast address? */
				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
			#endif
				/* Or (during DHCP negotiation) we have no IP-address yet? */
				( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
 800a17e:	4b06      	ldr	r3, [pc, #24]	; (800a198 <prvAllowIPPacket+0x88>)
 800a180:	695b      	ldr	r3, [r3, #20]
				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
 800a182:	2b00      	cmp	r3, #0
 800a184:	d001      	beq.n	800a18a <prvAllowIPPacket+0x7a>
			{
				/* Packet is not for this node, release it */
				eReturn = eReleaseBuffer;
 800a186:	2300      	movs	r3, #0
 800a188:	77fb      	strb	r3, [r7, #31]
		( void ) pxNetworkBuffer;
		( void ) uxHeaderLength;
	}
	#endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

	return eReturn;
 800a18a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3724      	adds	r7, #36	; 0x24
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	200000a0 	.word	0x200000a0
 800a19c:	20004774 	.word	0x20004774
 800a1a0:	fc0000e0 	.word	0xfc0000e0

0800a1a4 <prvProcessIPPacket>:
/*-----------------------------------------------------------*/

static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * const pxIPPacket, NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b08c      	sub	sp, #48	; 0x30
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
eFrameProcessingResult_t eReturn;
const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	330e      	adds	r3, #14
 800a1b2:	62bb      	str	r3, [r7, #40]	; 0x28
UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0x0Fu ) << 2 );
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800a1be:	627b      	str	r3, [r7, #36]	; 0x24
uint8_t ucProtocol;

	ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	7ddb      	ldrb	r3, [r3, #23]
 800a1c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	/* Check if the IP headers are acceptable and if it has our destination. */
	eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 800a1c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f7ff ff9f 	bl	800a110 <prvAllowIPPacket>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if( eReturn == eProcessBuffer )
 800a1d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	f040 8082 	bne.w	800a2e6 <prvProcessIPPacket+0x142>
	{
		if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	2b14      	cmp	r3, #20
 800a1e6:	d91a      	bls.n	800a21e <prvProcessIPPacket+0x7a>
		{
			/* All structs of headers expect a IP header size of 20 bytes
			 * IP header options were included, we'll ignore them and cut them out
			 * Note: IP options are mostly use in Multi-cast protocols */
			const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ea:	3b14      	subs	r3, #20
 800a1ec:	61fb      	str	r3, [r7, #28]
			/* From: the previous start of UDP/ICMP/TCP data */
			uint8_t *pucSource = ( ( uint8_t * ) pxIPHeader ) + uxHeaderLength;
 800a1ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f2:	4413      	add	r3, r2
 800a1f4:	61bb      	str	r3, [r7, #24]
			/* To: the usual start of UDP/ICMP/TCP data at offset 20 from IP header */
			uint8_t *pucTarget = ( ( uint8_t * ) pxIPHeader ) + ipSIZE_OF_IPv4_HEADER;
 800a1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f8:	3314      	adds	r3, #20
 800a1fa:	617b      	str	r3, [r7, #20]
			/* How many: total length minus the options and the lower headers */
			const size_t  xMoveLen = pxNetworkBuffer->xDataLength - optlen - ipSIZE_OF_IPv4_HEADER - ipSIZE_OF_ETH_HEADER;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	69da      	ldr	r2, [r3, #28]
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	3b22      	subs	r3, #34	; 0x22
 800a206:	613b      	str	r3, [r7, #16]

			memmove( pucTarget, pucSource, xMoveLen );
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	69b9      	ldr	r1, [r7, #24]
 800a20c:	6978      	ldr	r0, [r7, #20]
 800a20e:	f006 f991 	bl	8010534 <memmove>
			pxNetworkBuffer->xDataLength -= optlen;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	69da      	ldr	r2, [r3, #28]
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	1ad2      	subs	r2, r2, r3
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	61da      	str	r2, [r3, #28]
		}
		/* Add the IP and MAC addresses to the ARP table if they are not
		already there - otherwise refresh the age of the existing
		entry. */
		if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 800a21e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a222:	2b11      	cmp	r3, #17
 800a224:	d007      	beq.n	800a236 <prvProcessIPPacket+0x92>
			 * For UDP packets, this will be done later in xProcessReceivedUDPPacket()
			 * as soon as know that the message will be handled by someone
			 * This will prevent that the ARP cache will get overwritten
			 * with the IP-address of useless broadcast packets
			 */
			vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	1d9a      	adds	r2, r3, #6
 800a22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	4619      	mov	r1, r3
 800a230:	4610      	mov	r0, r2
 800a232:	f7fd ffb7 	bl	80081a4 <vARPRefreshCacheEntry>
		}
		switch( ucProtocol )
 800a236:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a23a:	2b06      	cmp	r3, #6
 800a23c:	d041      	beq.n	800a2c2 <prvProcessIPPacket+0x11e>
 800a23e:	2b11      	cmp	r3, #17
 800a240:	d012      	beq.n	800a268 <prvProcessIPPacket+0xc4>
 800a242:	2b01      	cmp	r3, #1
 800a244:	d000      	beq.n	800a248 <prvProcessIPPacket+0xa4>
				}
				break;
#endif
			default	:
				/* Not a supported frame type. */
				break;
 800a246:	e04e      	b.n	800a2e6 <prvProcessIPPacket+0x142>
					ICMPPacket_t *pxICMPPacket = ( ICMPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	60fb      	str	r3, [r7, #12]
					if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	691a      	ldr	r2, [r3, #16]
 800a252:	4b28      	ldr	r3, [pc, #160]	; (800a2f4 <prvProcessIPPacket+0x150>)
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	429a      	cmp	r2, r3
 800a258:	d142      	bne.n	800a2e0 <prvProcessIPPacket+0x13c>
						eReturn = prvProcessICMPPacket( pxICMPPacket );
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f000 f8e8 	bl	800a430 <prvProcessICMPPacket>
 800a260:	4603      	mov	r3, r0
 800a262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800a266:	e03b      	b.n	800a2e0 <prvProcessIPPacket+0x13c>
					UDPPacket_t *pxUDPPacket = ( UDPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	699b      	ldr	r3, [r3, #24]
 800a26c:	60bb      	str	r3, [r7, #8]
					pxNetworkBuffer->xDataLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - sizeof( UDPHeader_t );
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a272:	b29b      	uxth	r3, r3
 800a274:	021b      	lsls	r3, r3, #8
 800a276:	b21a      	sxth	r2, r3
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	0a1b      	lsrs	r3, r3, #8
 800a280:	b29b      	uxth	r3, r3
 800a282:	b21b      	sxth	r3, r3
 800a284:	4313      	orrs	r3, r2
 800a286:	b21b      	sxth	r3, r3
 800a288:	b29b      	uxth	r3, r3
 800a28a:	f1a3 0208 	sub.w	r2, r3, #8
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	61da      	str	r2, [r3, #28]
					pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a296:	b29a      	uxth	r2, r3
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	841a      	strh	r2, [r3, #32]
					pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	615a      	str	r2, [r3, #20]
					if( xProcessReceivedUDPPacket( pxNetworkBuffer, pxUDPPacket->xUDPHeader.usDestinationPort ) == pdPASS )
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	6838      	ldr	r0, [r7, #0]
 800a2b0:	f005 f85c 	bl	800f36c <xProcessReceivedUDPPacket>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d114      	bne.n	800a2e4 <prvProcessIPPacket+0x140>
						eReturn = eFrameConsumed;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800a2c0:	e010      	b.n	800a2e4 <prvProcessIPPacket+0x140>
					if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800a2c2:	6838      	ldr	r0, [r7, #0]
 800a2c4:	f003 fd5c 	bl	800dd80 <xProcessReceivedTCPPacket>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d102      	bne.n	800a2d4 <prvProcessIPPacket+0x130>
						eReturn = eFrameConsumed;
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					xProcessedTCPMessage++;
 800a2d4:	4b08      	ldr	r3, [pc, #32]	; (800a2f8 <prvProcessIPPacket+0x154>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	4a07      	ldr	r2, [pc, #28]	; (800a2f8 <prvProcessIPPacket+0x154>)
 800a2dc:	6013      	str	r3, [r2, #0]
				break;
 800a2de:	e002      	b.n	800a2e6 <prvProcessIPPacket+0x142>
				break;
 800a2e0:	bf00      	nop
 800a2e2:	e000      	b.n	800a2e6 <prvProcessIPPacket+0x142>
				break;
 800a2e4:	bf00      	nop
		}
	}

	return eReturn;
 800a2e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3730      	adds	r7, #48	; 0x30
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	200000a0 	.word	0x200000a0
 800a2f8:	200047a4 	.word	0x200047a4

0800a2fc <prvProcessICMPEchoReply>:
/*-----------------------------------------------------------*/

#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

	static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
	{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
	ePingReplyStatus_t eStatus = eSuccess;
 800a304:	2300      	movs	r3, #0
 800a306:	75fb      	strb	r3, [r7, #23]
	uint16_t usDataLength, usCount;
	uint8_t *pucByte;

		/* Find the total length of the IP packet. */
		usDataLength = pxICMPPacket->xIPHeader.usLength;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	7c1a      	ldrb	r2, [r3, #16]
 800a30c:	7c5b      	ldrb	r3, [r3, #17]
 800a30e:	021b      	lsls	r3, r3, #8
 800a310:	4313      	orrs	r3, r2
 800a312:	81fb      	strh	r3, [r7, #14]
		usDataLength = FreeRTOS_ntohs( usDataLength );
 800a314:	89fb      	ldrh	r3, [r7, #14]
 800a316:	021b      	lsls	r3, r3, #8
 800a318:	b21a      	sxth	r2, r3
 800a31a:	89fb      	ldrh	r3, [r7, #14]
 800a31c:	0a1b      	lsrs	r3, r3, #8
 800a31e:	b29b      	uxth	r3, r3
 800a320:	b21b      	sxth	r3, r3
 800a322:	4313      	orrs	r3, r2
 800a324:	b21b      	sxth	r3, r3
 800a326:	81fb      	strh	r3, [r7, #14]

		/* Remove the length of the IP headers to obtain the length of the ICMP
		message itself. */
		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 800a328:	89fb      	ldrh	r3, [r7, #14]
 800a32a:	3b14      	subs	r3, #20
 800a32c:	81fb      	strh	r3, [r7, #14]

		/* Remove the length of the ICMP header, to obtain the length of
		data contained in the ping. */
		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMP_HEADER );
 800a32e:	89fb      	ldrh	r3, [r7, #14]
 800a330:	3b08      	subs	r3, #8
 800a332:	81fb      	strh	r3, [r7, #14]

		/* Checksum has already been checked before in prvProcessIPPacket */

		/* Find the first byte of the data within the ICMP packet. */
		pucByte = ( uint8_t * ) pxICMPPacket;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	613b      	str	r3, [r7, #16]
		pucByte += sizeof( ICMPPacket_t );
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	332a      	adds	r3, #42	; 0x2a
 800a33c:	613b      	str	r3, [r7, #16]

		/* Check each byte. */
		for( usCount = 0; usCount < usDataLength; usCount++ )
 800a33e:	2300      	movs	r3, #0
 800a340:	82bb      	strh	r3, [r7, #20]
 800a342:	e00c      	b.n	800a35e <prvProcessICMPEchoReply+0x62>
		{
			if( *pucByte != ipECHO_DATA_FILL_BYTE )
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b78      	cmp	r3, #120	; 0x78
 800a34a:	d002      	beq.n	800a352 <prvProcessICMPEchoReply+0x56>
			{
				eStatus = eInvalidData;
 800a34c:	2302      	movs	r3, #2
 800a34e:	75fb      	strb	r3, [r7, #23]
				break;
 800a350:	e009      	b.n	800a366 <prvProcessICMPEchoReply+0x6a>
			}

			pucByte++;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	3301      	adds	r3, #1
 800a356:	613b      	str	r3, [r7, #16]
		for( usCount = 0; usCount < usDataLength; usCount++ )
 800a358:	8abb      	ldrh	r3, [r7, #20]
 800a35a:	3301      	adds	r3, #1
 800a35c:	82bb      	strh	r3, [r7, #20]
 800a35e:	8aba      	ldrh	r2, [r7, #20]
 800a360:	89fb      	ldrh	r3, [r7, #14]
 800a362:	429a      	cmp	r2, r3
 800a364:	d3ee      	bcc.n	800a344 <prvProcessICMPEchoReply+0x48>
		}

		/* Call back into the application to pass it the result. */
		vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
 800a36e:	4611      	mov	r1, r2
 800a370:	4618      	mov	r0, r3
 800a372:	f005 f9fd 	bl	800f770 <vApplicationPingReplyHook>
	}
 800a376:	bf00      	nop
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
	...

0800a380 <prvProcessICMPEchoRequest>:
/*-----------------------------------------------------------*/

#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )

	static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket )
	{
 800a380:	b480      	push	{r7}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
	ICMPHeader_t *pxICMPHeader;
	IPHeader_t *pxIPHeader;
	uint16_t usRequest;

		pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	3322      	adds	r3, #34	; 0x22
 800a38c:	617b      	str	r3, [r7, #20]
		pxIPHeader = &( pxICMPPacket->xIPHeader );
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	330e      	adds	r3, #14
 800a392:	613b      	str	r3, [r7, #16]

		/* The checksum can be checked here - but a ping reply should be
		returned even if the checksum is incorrect so the other end can
		tell that the ping was received - even if the ping reply contains
		invalid data. */
		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	2200      	movs	r2, #0
 800a398:	701a      	strb	r2, [r3, #0]
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	68da      	ldr	r2, [r3, #12]
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800a3a2:	4b22      	ldr	r3, [pc, #136]	; (800a42c <prvProcessICMPEchoRequest+0xac>)
 800a3a4:	695a      	ldr	r2, [r3, #20]
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	60da      	str	r2, [r3, #12]
		has been changed to ipICMP_ECHO_REPLY.  This is faster than calling
		usGenerateChecksum(). */

		/* due to compiler warning "integer operation result is out of range" */

		usRequest = ( uint16_t ) ( ( uint16_t )ipICMP_ECHO_REQUEST << 8 );
 800a3aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3ae:	81fb      	strh	r3, [r7, #14]

		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFu - usRequest ) )
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	885b      	ldrh	r3, [r3, #2]
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	89fb      	ldrh	r3, [r7, #14]
 800a3b8:	43db      	mvns	r3, r3
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	021b      	lsls	r3, r3, #8
 800a3be:	b299      	uxth	r1, r3
 800a3c0:	89fb      	ldrh	r3, [r7, #14]
 800a3c2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800a3c6:	33ff      	adds	r3, #255	; 0xff
 800a3c8:	0a1b      	lsrs	r3, r3, #8
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	430b      	orrs	r3, r1
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d312      	bcc.n	800a3fa <prvProcessICMPEchoRequest+0x7a>
		{
			pxICMPHeader->usChecksum = ( uint16_t )
				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	885b      	ldrh	r3, [r3, #2]
 800a3d8:	b29a      	uxth	r2, r3
					FreeRTOS_htons( usRequest + 1UL ) );
 800a3da:	89fb      	ldrh	r3, [r7, #14]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	021b      	lsls	r3, r3, #8
 800a3e2:	b299      	uxth	r1, r3
 800a3e4:	89fb      	ldrh	r3, [r7, #14]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	0a1b      	lsrs	r3, r3, #8
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	430b      	orrs	r3, r1
 800a3ee:	b29b      	uxth	r3, r3
			pxICMPHeader->usChecksum = ( uint16_t )
 800a3f0:	4413      	add	r3, r2
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	805a      	strh	r2, [r3, #2]
 800a3f8:	e010      	b.n	800a41c <prvProcessICMPEchoRequest+0x9c>
		}
		else
		{
			pxICMPHeader->usChecksum = ( uint16_t )
				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	885b      	ldrh	r3, [r3, #2]
 800a3fe:	b29a      	uxth	r2, r3
					FreeRTOS_htons( usRequest ) );
 800a400:	89fb      	ldrh	r3, [r7, #14]
 800a402:	021b      	lsls	r3, r3, #8
 800a404:	b219      	sxth	r1, r3
 800a406:	89fb      	ldrh	r3, [r7, #14]
 800a408:	0a1b      	lsrs	r3, r3, #8
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	b21b      	sxth	r3, r3
 800a40e:	430b      	orrs	r3, r1
 800a410:	b21b      	sxth	r3, r3
 800a412:	b29b      	uxth	r3, r3
			pxICMPHeader->usChecksum = ( uint16_t )
 800a414:	4413      	add	r3, r2
 800a416:	b29a      	uxth	r2, r3
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	805a      	strh	r2, [r3, #2]
		}
		return eReturnEthernetFrame;
 800a41c:	2302      	movs	r3, #2
	}
 800a41e:	4618      	mov	r0, r3
 800a420:	371c      	adds	r7, #28
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	200000a0 	.word	0x200000a0

0800a430 <prvProcessICMPPacket>:
/*-----------------------------------------------------------*/

#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

	static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket )
	{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
	eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800a438:	2300      	movs	r3, #0
 800a43a:	73fb      	strb	r3, [r7, #15]

		iptraceICMP_PACKET_RECEIVED();
		switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a442:	2b00      	cmp	r3, #0
 800a444:	d008      	beq.n	800a458 <prvProcessICMPPacket+0x28>
 800a446:	2b08      	cmp	r3, #8
 800a448:	d000      	beq.n	800a44c <prvProcessICMPPacket+0x1c>
				}
				#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
				break;

			default	:
				break;
 800a44a:	e009      	b.n	800a460 <prvProcessICMPPacket+0x30>
					eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f7ff ff97 	bl	800a380 <prvProcessICMPEchoRequest>
 800a452:	4603      	mov	r3, r0
 800a454:	73fb      	strb	r3, [r7, #15]
				break;
 800a456:	e003      	b.n	800a460 <prvProcessICMPPacket+0x30>
					prvProcessICMPEchoReply( pxICMPPacket );
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7ff ff4f 	bl	800a2fc <prvProcessICMPEchoReply>
				break;
 800a45e:	bf00      	nop
		}

		return eReturn;
 800a460:	7bfb      	ldrb	r3, [r7, #15]
	}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
	...

0800a46c <vReturnEthernetFrame>:
	return FreeRTOS_htons( ( (uint16_t) xSum.u32 ) );
}
/*-----------------------------------------------------------*/

void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer, BaseType_t xReleaseAfterSend )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
	}

	if( pxNetworkBuffer != NULL )
#endif
	{
		pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	60fb      	str	r3, [r7, #12]

		/* Swap source and destination MAC addresses. */
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ), sizeof( pxEthernetHeader->xDestinationAddress ) );
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3306      	adds	r3, #6
 800a482:	2206      	movs	r2, #6
 800a484:	4619      	mov	r1, r3
 800a486:	f006 f84a 	bl	801051e <memcpy>
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	3306      	adds	r3, #6
 800a48e:	2206      	movs	r2, #6
 800a490:	4905      	ldr	r1, [pc, #20]	; (800a4a8 <vReturnEthernetFrame+0x3c>)
 800a492:	4618      	mov	r0, r3
 800a494:	f006 f843 	bl	801051e <memcpy>

		/* Send! */
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800a498:	6839      	ldr	r1, [r7, #0]
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7fa f99a 	bl	80047d4 <xNetworkInterfaceOutput>
	}
}
 800a4a0:	bf00      	nop
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	200000a0 	.word	0x200000a0

0800a4ac <vIPSetDHCPTimerEnableState>:
}
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DHCP == 1 )
	void vIPSetDHCPTimerEnableState( BaseType_t xEnableState )
	{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
		if( xEnableState != pdFALSE )
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d005      	beq.n	800a4c6 <vIPSetDHCPTimerEnableState+0x1a>
		{
			xDHCPTimer.bActive = pdTRUE_UNSIGNED;
 800a4ba:	4a08      	ldr	r2, [pc, #32]	; (800a4dc <vIPSetDHCPTimerEnableState+0x30>)
 800a4bc:	7813      	ldrb	r3, [r2, #0]
 800a4be:	f043 0301 	orr.w	r3, r3, #1
 800a4c2:	7013      	strb	r3, [r2, #0]
		}
		else
		{
			xDHCPTimer.bActive = pdFALSE_UNSIGNED;
		}
	}
 800a4c4:	e004      	b.n	800a4d0 <vIPSetDHCPTimerEnableState+0x24>
			xDHCPTimer.bActive = pdFALSE_UNSIGNED;
 800a4c6:	4a05      	ldr	r2, [pc, #20]	; (800a4dc <vIPSetDHCPTimerEnableState+0x30>)
 800a4c8:	7813      	ldrb	r3, [r2, #0]
 800a4ca:	f36f 0300 	bfc	r3, #0, #1
 800a4ce:	7013      	strb	r3, [r2, #0]
	}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	200047c0 	.word	0x200047c0

0800a4e0 <vIPReloadDHCPTimer>:
#endif /* ipconfigUSE_DHCP */
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DHCP == 1 )
	void vIPReloadDHCPTimer( uint32_t ulLeaseTime )
	{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
		prvIPTimerReload( &xDHCPTimer, ulLeaseTime );
 800a4e8:	6879      	ldr	r1, [r7, #4]
 800a4ea:	4803      	ldr	r0, [pc, #12]	; (800a4f8 <vIPReloadDHCPTimer+0x18>)
 800a4ec:	f7ff fb62 	bl	8009bb4 <prvIPTimerReload>
	}
 800a4f0:	bf00      	nop
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	200047c0 	.word	0x200047c0

0800a4fc <vIPSetDnsTimerEnableState>:
#endif /* ipconfigUSE_DHCP */
/*-----------------------------------------------------------*/

#if( ipconfigDNS_USE_CALLBACKS == 1 )
	void vIPSetDnsTimerEnableState( BaseType_t xEnableState )
	{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
		if( xEnableState != 0 )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d005      	beq.n	800a516 <vIPSetDnsTimerEnableState+0x1a>
		{
			xDNSTimer.bActive = pdTRUE;
 800a50a:	4a08      	ldr	r2, [pc, #32]	; (800a52c <vIPSetDnsTimerEnableState+0x30>)
 800a50c:	7813      	ldrb	r3, [r2, #0]
 800a50e:	f043 0301 	orr.w	r3, r3, #1
 800a512:	7013      	strb	r3, [r2, #0]
		}
		else
		{
			xDNSTimer.bActive = pdFALSE;
		}
	}
 800a514:	e004      	b.n	800a520 <vIPSetDnsTimerEnableState+0x24>
			xDNSTimer.bActive = pdFALSE;
 800a516:	4a05      	ldr	r2, [pc, #20]	; (800a52c <vIPSetDnsTimerEnableState+0x30>)
 800a518:	7813      	ldrb	r3, [r2, #0]
 800a51a:	f36f 0300 	bfc	r3, #0, #1
 800a51e:	7013      	strb	r3, [r2, #0]
	}
 800a520:	bf00      	nop
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr
 800a52c:	200047e8 	.word	0x200047e8

0800a530 <xIPIsNetworkTaskReady>:
	}
#endif /* ipconfigDNS_USE_CALLBACKS != 0 */
/*-----------------------------------------------------------*/

BaseType_t xIPIsNetworkTaskReady( void )
{
 800a530:	b480      	push	{r7}
 800a532:	af00      	add	r7, sp, #0
	return xIPTaskInitialised;
 800a534:	4b03      	ldr	r3, [pc, #12]	; (800a544 <xIPIsNetworkTaskReady+0x14>)
 800a536:	681b      	ldr	r3, [r3, #0]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	200047fc 	.word	0x200047fc

0800a548 <FreeRTOS_max_uint32>:
	static portINLINE BaseType_t  	FreeRTOS_min_BaseType  (BaseType_t  a, BaseType_t  b);
	static portINLINE UBaseType_t  	FreeRTOS_min_UBaseType (UBaseType_t  a, UBaseType_t  b);


	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return a >= b ? a : b; }
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	4293      	cmp	r3, r2
 800a558:	bf38      	it	cc
 800a55a:	4613      	movcc	r3, r2
 800a55c:	4618      	mov	r0, r3
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <FreeRTOS_round_up>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d) { return d * ( ( a + d - 1u ) / d ); }
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	4413      	add	r3, r2
 800a578:	1e5a      	subs	r2, r3, #1
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	fb02 f303 	mul.w	r3, r2, r3
 800a586:	4618      	mov	r0, r3
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <uxStreamBufferSpace>:
}
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper );
static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper )
{
 800a592:	b480      	push	{r7}
 800a594:	b087      	sub	sp, #28
 800a596:	af00      	add	r7, sp, #0
 800a598:	60f8      	str	r0, [r7, #12]
 800a59a:	60b9      	str	r1, [r7, #8]
 800a59c:	607a      	str	r2, [r7, #4]
/* Returns the space between uxLower and uxUpper, which equals to the distance minus 1 */
size_t uxCount;

	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	691a      	ldr	r2, [r3, #16]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	441a      	add	r2, r3
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	691a      	ldr	r2, [r3, #16]
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d804      	bhi.n	800a5c2 <uxStreamBufferSpace+0x30>
	{
		uxCount -= pxBuffer->LENGTH;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	617b      	str	r3, [r7, #20]
	}

	return uxCount;
 800a5c2:	697b      	ldr	r3, [r7, #20]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	371c      	adds	r7, #28
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <uxStreamBufferDistance>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper );
static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper )
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b087      	sub	sp, #28
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
/* Returns the distance between uxLower and uxUpper */
size_t uxCount;

	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	691a      	ldr	r2, [r3, #16]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	441a      	add	r2, r3
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	691a      	ldr	r2, [r3, #16]
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d804      	bhi.n	800a5fe <uxStreamBufferDistance+0x2e>
	{
		uxCount -= pxBuffer->LENGTH;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	697a      	ldr	r2, [r7, #20]
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	617b      	str	r3, [r7, #20]
	}

	return uxCount;
 800a5fe:	697b      	ldr	r3, [r7, #20]
}
 800a600:	4618      	mov	r0, r3
 800a602:	371c      	adds	r7, #28
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <uxStreamBufferGetSpace>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer )
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can still be added to uxHead
before hitting on uxTail */
size_t uxHead = pxBuffer->uxHead;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	68f9      	ldr	r1, [r7, #12]
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f7ff ffb4 	bl	800a592 <uxStreamBufferSpace>
 800a62a:	4603      	mov	r3, r0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <uxStreamBufferFrontSpace>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer )
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
/* Distance between uxFront and uxTail
or the number of items which can still be added to uxFront,
before hitting on uxTail */

size_t uxFront = pxBuffer->uxFront;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	68f9      	ldr	r1, [r7, #12]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7ff ffa0 	bl	800a592 <uxStreamBufferSpace>
 800a652:	4603      	mov	r3, r0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <uxStreamBufferGetSize>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can be read from uxTail
before reaching uxHead */
size_t uxHead = pxBuffer->uxHead;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	68b9      	ldr	r1, [r7, #8]
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f7ff ffab 	bl	800a5d0 <uxStreamBufferDistance>
 800a67a:	4603      	mov	r3, r0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <prvValidSocket>:
static uint16_t usNextPortToUse[ socketPROTOCOL_COUNT ] = { 0 };

/*-----------------------------------------------------------*/

static BaseType_t prvValidSocket( FreeRTOS_Socket_t *pxSocket, BaseType_t xProtocol, BaseType_t xIsBound )
{
 800a684:	b480      	push	{r7}
 800a686:	b087      	sub	sp, #28
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdTRUE;
 800a690:	2301      	movs	r3, #1
 800a692:	617b      	str	r3, [r7, #20]

	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d003      	beq.n	800a6a2 <prvValidSocket+0x1e>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a0:	d102      	bne.n	800a6a8 <prvValidSocket+0x24>
	{
		xReturn = pdFALSE;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	617b      	str	r3, [r7, #20]
 800a6a6:	e012      	b.n	800a6ce <prvValidSocket+0x4a>
	}
	else if( ( xIsBound != pdFALSE ) && ( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE ) )
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d006      	beq.n	800a6bc <prvValidSocket+0x38>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d102      	bne.n	800a6bc <prvValidSocket+0x38>
	{
		/* The caller expects the socket to be bound, but it isn't. */
		xReturn = pdFALSE;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	617b      	str	r3, [r7, #20]
 800a6ba:	e008      	b.n	800a6ce <prvValidSocket+0x4a>
	}
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d001      	beq.n	800a6ce <prvValidSocket+0x4a>
	{
		/* Socket has a wrong type (UDP != TCP). */
		xReturn = pdFALSE;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a6ce:	697b      	ldr	r3, [r7, #20]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	371c      	adds	r7, #28
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <vNetworkSocketsInit>:
/*-----------------------------------------------------------*/

void vNetworkSocketsInit( void )
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
const uint32_t ulAutoPortRange = socketAUTO_PORT_ALLOCATION_MAX_NUMBER - socketAUTO_PORT_ALLOCATION_RESET_NUMBER;
 800a6e2:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 800a6e6:	607b      	str	r3, [r7, #4]
uint32_t ulRandomPort;

	vListInitialise( &xBoundUDPSocketsList );
 800a6e8:	481b      	ldr	r0, [pc, #108]	; (800a758 <vNetworkSocketsInit+0x7c>)
 800a6ea:	f7fb fa6c 	bl	8005bc6 <vListInitialise>

	/* Determine the first anonymous UDP port number to get assigned.  Give it
	a random value in order to avoid confusion about port numbers being used
	earlier, before rebooting the device.  Start with the first auto port
	number, then add a random offset up to a maximum of the range of numbers. */
	ulRandomPort = socketAUTO_PORT_ALLOCATION_START_NUMBER;
 800a6ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a6f2:	603b      	str	r3, [r7, #0]
	ulRandomPort += ( ipconfigRAND32() % ulAutoPortRange );
 800a6f4:	f005 f860 	bl	800f7b8 <uxRand>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	fbb3 f2f2 	udiv	r2, r3, r2
 800a700:	6879      	ldr	r1, [r7, #4]
 800a702:	fb01 f202 	mul.w	r2, r1, r2
 800a706:	1a9b      	subs	r3, r3, r2
 800a708:	683a      	ldr	r2, [r7, #0]
 800a70a:	4413      	add	r3, r2
 800a70c:	603b      	str	r3, [r7, #0]
	usNextPortToUse[ socketNEXT_UDP_PORT_NUMBER_INDEX ] = ( uint16_t ) ulRandomPort;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	b29a      	uxth	r2, r3
 800a712:	4b12      	ldr	r3, [pc, #72]	; (800a75c <vNetworkSocketsInit+0x80>)
 800a714:	801a      	strh	r2, [r3, #0]

	#if( ipconfigUSE_TCP == 1 )
	{
		extern uint32_t ulNextInitialSequenceNumber;

		ulNextInitialSequenceNumber = ipconfigRAND32();
 800a716:	f005 f84f 	bl	800f7b8 <uxRand>
 800a71a:	4602      	mov	r2, r0
 800a71c:	4b10      	ldr	r3, [pc, #64]	; (800a760 <vNetworkSocketsInit+0x84>)
 800a71e:	601a      	str	r2, [r3, #0]

		/* Determine the first anonymous TCP port number to get assigned. */
		ulRandomPort = socketAUTO_PORT_ALLOCATION_START_NUMBER;
 800a720:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a724:	603b      	str	r3, [r7, #0]
		ulRandomPort += ( ipconfigRAND32() % ulAutoPortRange );
 800a726:	f005 f847 	bl	800f7b8 <uxRand>
 800a72a:	4603      	mov	r3, r0
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a732:	6879      	ldr	r1, [r7, #4]
 800a734:	fb01 f202 	mul.w	r2, r1, r2
 800a738:	1a9b      	subs	r3, r3, r2
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	4413      	add	r3, r2
 800a73e:	603b      	str	r3, [r7, #0]
		usNextPortToUse[ socketNEXT_TCP_PORT_NUMBER_INDEX ] = ( uint16_t ) ulRandomPort;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	b29a      	uxth	r2, r3
 800a744:	4b05      	ldr	r3, [pc, #20]	; (800a75c <vNetworkSocketsInit+0x80>)
 800a746:	805a      	strh	r2, [r3, #2]

		vListInitialise( &xBoundTCPSocketsList );
 800a748:	4806      	ldr	r0, [pc, #24]	; (800a764 <vNetworkSocketsInit+0x88>)
 800a74a:	f7fb fa3c 	bl	8005bc6 <vListInitialise>
	}
	#endif  /* ipconfigUSE_TCP == 1 */
}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20005920 	.word	0x20005920
 800a75c:	20004808 	.word	0x20004808
 800a760:	20004810 	.word	0x20004810
 800a764:	2000590c 	.word	0x2000590c

0800a768 <prvDetermineSocketSize>:
/*-----------------------------------------------------------*/

static BaseType_t prvDetermineSocketSize( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol, size_t *pxSocketSize )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
 800a774:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdPASS;
 800a776:	2301      	movs	r3, #1
 800a778:	61fb      	str	r3, [r7, #28]
FreeRTOS_Socket_t *pxSocket;

	/* Asserts must not appear before it has been determined that the network
	task is ready - otherwise the asserts will fail. */
	if( xIPIsNetworkTaskReady() == pdFALSE )
 800a77a:	f7ff fed9 	bl	800a530 <xIPIsNetworkTaskReady>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d102      	bne.n	800a78a <prvDetermineSocketSize+0x22>
	{
		xReturn = pdFAIL;
 800a784:	2300      	movs	r3, #0
 800a786:	61fb      	str	r3, [r7, #28]
 800a788:	e045      	b.n	800a816 <prvDetermineSocketSize+0xae>
	}
	else
	{
		/* Only Ethernet is currently supported. */
		configASSERT( xDomain == FREERTOS_AF_INET );
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d009      	beq.n	800a7a4 <prvDetermineSocketSize+0x3c>
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	61bb      	str	r3, [r7, #24]
 800a7a2:	e7fe      	b.n	800a7a2 <prvDetermineSocketSize+0x3a>

		/* Check if the UDP socket-list has been initialised. */
		configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800a7a4:	4b1e      	ldr	r3, [pc, #120]	; (800a820 <prvDetermineSocketSize+0xb8>)
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ac:	d009      	beq.n	800a7c2 <prvDetermineSocketSize+0x5a>
 800a7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	617b      	str	r3, [r7, #20]
 800a7c0:	e7fe      	b.n	800a7c0 <prvDetermineSocketSize+0x58>
		#if( ipconfigUSE_TCP == 1 )
		{
			/* Check if the TCP socket-list has been initialised. */
			configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800a7c2:	4b18      	ldr	r3, [pc, #96]	; (800a824 <prvDetermineSocketSize+0xbc>)
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ca:	d009      	beq.n	800a7e0 <prvDetermineSocketSize+0x78>
 800a7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	613b      	str	r3, [r7, #16]
 800a7de:	e7fe      	b.n	800a7de <prvDetermineSocketSize+0x76>
		}
		#endif  /* ipconfigUSE_TCP == 1 */

		if( xProtocol == FREERTOS_IPPROTO_UDP )
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b11      	cmp	r3, #17
 800a7e4:	d108      	bne.n	800a7f8 <prvDetermineSocketSize+0x90>
		{
			if( xType != FREERTOS_SOCK_DGRAM )
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d001      	beq.n	800a7f0 <prvDetermineSocketSize+0x88>
			{
				xReturn = pdFAIL;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	61fb      	str	r3, [r7, #28]
			}
			/* In case a UDP socket is created, do not allocate space for TCP data. */
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	224c      	movs	r2, #76	; 0x4c
 800a7f4:	601a      	str	r2, [r3, #0]
 800a7f6:	e00e      	b.n	800a816 <prvDetermineSocketSize+0xae>
		}
#if( ipconfigUSE_TCP == 1 )
		else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2b06      	cmp	r3, #6
 800a7fc:	d109      	bne.n	800a812 <prvDetermineSocketSize+0xaa>
		{
			if( xType != FREERTOS_SOCK_STREAM )
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d001      	beq.n	800a808 <prvDetermineSocketSize+0xa0>
			{
				xReturn = pdFAIL;
 800a804:	2300      	movs	r3, #0
 800a806:	61fb      	str	r3, [r7, #28]
			}

			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800a80e:	601a      	str	r2, [r3, #0]
 800a810:	e001      	b.n	800a816 <prvDetermineSocketSize+0xae>
		}
#endif  /* ipconfigUSE_TCP == 1 */
		else
		{
			xReturn = pdFAIL;
 800a812:	2300      	movs	r3, #0
 800a814:	61fb      	str	r3, [r7, #28]
		}
	}
	/* In case configASSERT() is not used */
	( void )xDomain;
	return xReturn;
 800a816:	69fb      	ldr	r3, [r7, #28]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3720      	adds	r7, #32
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	20005920 	.word	0x20005920
 800a824:	2000590c 	.word	0x2000590c

0800a828 <FreeRTOS_socket>:
/*-----------------------------------------------------------*/

/* FreeRTOS_socket() allocates and initiates a socket */
Socket_t FreeRTOS_socket( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b088      	sub	sp, #32
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
FreeRTOS_Socket_t *pxSocket;
size_t uxSocketSize;
EventGroupHandle_t xEventGroup;
Socket_t xReturn;

	if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
 800a834:	f107 0310 	add.w	r3, r7, #16
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	68b9      	ldr	r1, [r7, #8]
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f7ff ff93 	bl	800a768 <prvDetermineSocketSize>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d103      	bne.n	800a850 <FreeRTOS_socket+0x28>
	{
		xReturn = FREERTOS_INVALID_SOCKET;
 800a848:	f04f 33ff 	mov.w	r3, #4294967295
 800a84c:	61bb      	str	r3, [r7, #24]
 800a84e:	e07d      	b.n	800a94c <FreeRTOS_socket+0x124>
	{
		/* Allocate the structure that will hold the socket information.  The
		size depends on the type of socket: UDP sockets need less space.  A
		define 'pvPortMallocSocket' will used to allocate the necessary space.
		By default it points to the FreeRTOS function 'pvPortMalloc()'. */
		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	4618      	mov	r0, r3
 800a854:	f7fb fc6e 	bl	8006134 <pvPortMalloc>
 800a858:	61f8      	str	r0, [r7, #28]

		if( pxSocket == NULL )
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d103      	bne.n	800a868 <FreeRTOS_socket+0x40>
		{
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800a860:	f04f 33ff 	mov.w	r3, #4294967295
 800a864:	61fb      	str	r3, [r7, #28]
 800a866:	e06f      	b.n	800a948 <FreeRTOS_socket+0x120>
			iptraceFAILED_TO_CREATE_SOCKET();
		}
		else if( ( xEventGroup = xEventGroupCreate() ) == NULL )
 800a868:	f7fa ffbb 	bl	80057e2 <xEventGroupCreate>
 800a86c:	6178      	str	r0, [r7, #20]
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d106      	bne.n	800a882 <FreeRTOS_socket+0x5a>
		{
			vPortFreeSocket( pxSocket );
 800a874:	69f8      	ldr	r0, [r7, #28]
 800a876:	f7fb fd1f 	bl	80062b8 <vPortFree>
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800a87a:	f04f 33ff 	mov.w	r3, #4294967295
 800a87e:	61fb      	str	r3, [r7, #28]
 800a880:	e062      	b.n	800a948 <FreeRTOS_socket+0x120>
			iptraceFAILED_TO_CREATE_EVENT_GROUP();
		}
		else
		{
			/* Clear the entire space to avoid nulling individual entries */
			memset( pxSocket, '\0', uxSocketSize );
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	461a      	mov	r2, r3
 800a886:	2100      	movs	r1, #0
 800a888:	69f8      	ldr	r0, [r7, #28]
 800a88a:	f005 fe6d 	bl	8010568 <memset>

			pxSocket->xEventGroup = xEventGroup;
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	697a      	ldr	r2, [r7, #20]
 800a892:	605a      	str	r2, [r3, #4]

			/* Initialise the socket's members.  The semaphore will be created
			if the socket is bound to an address, for now the pointer to the
			semaphore is just set to NULL to show it has not been created. */
			if( xProtocol == FREERTOS_IPPROTO_UDP )
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b11      	cmp	r3, #17
 800a898:	d104      	bne.n	800a8a4 <FreeRTOS_socket+0x7c>
			{
				vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	3338      	adds	r3, #56	; 0x38
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fb f991 	bl	8005bc6 <vListInitialise>
					pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
				}
				#endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
			}

			vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	3308      	adds	r3, #8
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7fb f9ac 	bl	8005c06 <vListInitialiseItem>
			listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	69fa      	ldr	r2, [r7, #28]
 800a8b2:	615a      	str	r2, [r3, #20]

			pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8ba:	61da      	str	r2, [r3, #28]
			pxSocket->xSendBlockTime    = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8c2:	621a      	str	r2, [r3, #32]
			pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			pxSocket->ucProtocol        = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	b2da      	uxtb	r2, r3
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

			#if( ipconfigUSE_TCP == 1 )
			{
				if( xProtocol == FREERTOS_IPPROTO_TCP )
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b06      	cmp	r3, #6
 800a8da:	d135      	bne.n	800a948 <FreeRTOS_socket+0x120>
				{
					/* StreamSize is expressed in number of bytes */
					/* Round up buffer sizes to nearest multiple of MSS */
					pxSocket->u.xTCP.usInitMSS    = pxSocket->u.xTCP.usCurMSS = ipconfigTCP_MSS;
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800a8e2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	f241 121c 	movw	r2, #4380	; 0x111c
 800a8f8:	66da      	str	r2, [r3, #108]	; 0x6c
					pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800a8fa:	f240 51b4 	movw	r1, #1460	; 0x5b4
 800a8fe:	f640 3068 	movw	r0, #2920	; 0xb68
 800a902:	f7ff fe31 	bl	800a568 <FreeRTOS_round_up>
 800a906:	4602      	mov	r2, r0
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	671a      	str	r2, [r3, #112]	; 0x70
					/* Use half of the buffer size of the TCP windows */
					#if ( ipconfigUSE_TCP_WIN == 1 )
					{
						pxSocket->u.xTCP.uxRxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2 ) / ipconfigTCP_MSS );
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a910:	08db      	lsrs	r3, r3, #3
 800a912:	4a11      	ldr	r2, [pc, #68]	; (800a958 <FreeRTOS_socket+0x130>)
 800a914:	fba2 2303 	umull	r2, r3, r2, r3
 800a918:	099b      	lsrs	r3, r3, #6
 800a91a:	4619      	mov	r1, r3
 800a91c:	2001      	movs	r0, #1
 800a91e:	f7ff fe13 	bl	800a548 <FreeRTOS_max_uint32>
 800a922:	4602      	mov	r2, r0
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2 ) / ipconfigTCP_MSS );
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a92e:	08db      	lsrs	r3, r3, #3
 800a930:	4a09      	ldr	r2, [pc, #36]	; (800a958 <FreeRTOS_socket+0x130>)
 800a932:	fba2 2303 	umull	r2, r3, r2, r3
 800a936:	099b      	lsrs	r3, r3, #6
 800a938:	4619      	mov	r1, r3
 800a93a:	2001      	movs	r0, #1
 800a93c:	f7ff fe04 	bl	800a548 <FreeRTOS_max_uint32>
 800a940:	4602      	mov	r2, r0
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				}
			}
			#endif  /* ipconfigUSE_TCP == 1 */
		}

		xReturn = ( Socket_t ) pxSocket;
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	61bb      	str	r3, [r7, #24]
	}

	/* Remove compiler warnings in the case the configASSERT() is not defined. */
	( void ) xDomain;

	return xReturn;
 800a94c:	69bb      	ldr	r3, [r7, #24]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3720      	adds	r7, #32
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	2ce33e6d 	.word	0x2ce33e6d

0800a95c <FreeRTOS_recvfrom>:
 * FreeRTOS_recvfrom: receive data from a bound socket
 * In this library, the function can only be used with connectionsless sockets
 * (UDP)
 */
int32_t FreeRTOS_recvfrom( Socket_t xSocket, void *pvBuffer, size_t xBufferLength, BaseType_t xFlags, struct freertos_sockaddr *pxSourceAddress, socklen_t *pxSourceAddressLength )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b090      	sub	sp, #64	; 0x40
 800a960:	af02      	add	r7, sp, #8
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
 800a968:	603b      	str	r3, [r7, #0]
BaseType_t lPacketCount = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	637b      	str	r3, [r7, #52]	; 0x34
NetworkBufferDescriptor_t *pxNetworkBuffer;
FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	627b      	str	r3, [r7, #36]	; 0x24
TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 800a972:	2300      	movs	r3, #0
 800a974:	61fb      	str	r3, [r7, #28]
BaseType_t xTimed = pdFALSE;
 800a976:	2300      	movs	r3, #0
 800a978:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;
int32_t lReturn;
EventBits_t xEventBits = ( EventBits_t ) 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	62bb      	str	r3, [r7, #40]	; 0x28

	if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdTRUE ) == pdFALSE )
 800a97e:	2201      	movs	r2, #1
 800a980:	2111      	movs	r1, #17
 800a982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a984:	f7ff fe7e 	bl	800a684 <prvValidSocket>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d102      	bne.n	800a994 <FreeRTOS_recvfrom+0x38>
	{
		return -pdFREERTOS_ERRNO_EINVAL;
 800a98e:	f06f 0315 	mvn.w	r3, #21
 800a992:	e0ac      	b.n	800aaee <FreeRTOS_recvfrom+0x192>
	}

	lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a998:	637b      	str	r3, [r7, #52]	; 0x34

	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the parameters. */
	( void ) pxSourceAddressLength;

	while( lPacketCount == 0 )
 800a99a:	e04b      	b.n	800aa34 <FreeRTOS_recvfrom+0xd8>
	{
		if( xTimed == pdFALSE )
 800a99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d11c      	bne.n	800a9dc <FreeRTOS_recvfrom+0x80>
		{
			/* Check to see if the socket is non blocking on the first
			iteration.  */
			xRemainingTime = pxSocket->xReceiveBlockTime;
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a4:	69db      	ldr	r3, [r3, #28]
 800a9a6:	61fb      	str	r3, [r7, #28]

			if( xRemainingTime == ( TickType_t ) 0 )
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d10a      	bne.n	800a9c4 <FreeRTOS_recvfrom+0x68>
			{
				#if( ipconfigSUPPORT_SIGNALS != 0 )
				{
					/* Just check for the interrupt flag. */
					xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_INTR,
 800a9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b0:	6858      	ldr	r0, [r3, #4]
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	2140      	movs	r1, #64	; 0x40
 800a9bc:	f7fa ff28 	bl	8005810 <xEventGroupWaitBits>
 800a9c0:	62b8      	str	r0, [r7, #40]	; 0x28
						pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, socketDONT_BLOCK );
				}
				#endif /* ipconfigSUPPORT_SIGNALS */
				break;
 800a9c2:	e042      	b.n	800aa4a <FreeRTOS_recvfrom+0xee>
			}

			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	f003 0310 	and.w	r3, r3, #16
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d136      	bne.n	800aa3c <FreeRTOS_recvfrom+0xe0>
			{
				break;
			}

			/* To ensure this part only executes once. */
			xTimed = pdTRUE;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	633b      	str	r3, [r7, #48]	; 0x30

			/* Fetch the current time. */
			vTaskSetTimeOutState( &xTimeOut );
 800a9d2:	f107 0314 	add.w	r3, r7, #20
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fc ff9a 	bl	8007910 <vTaskSetTimeOutState>
		}

		/* Wait for arrival of data.  While waiting, the IP-task may set the
		'eSOCKET_RECEIVE' bit in 'xEventGroup', if it receives data for this
		socket, thus unblocking this API call. */
		xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_RECEIVE | eSOCKET_INTR,
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9de:	6858      	ldr	r0, [r3, #4]
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	2141      	movs	r1, #65	; 0x41
 800a9ea:	f7fa ff11 	bl	8005810 <xEventGroupWaitBits>
 800a9ee:	62b8      	str	r0, [r7, #40]	; 0x28
			pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

		#if( ipconfigSUPPORT_SIGNALS != 0 )
		{
			if( ( xEventBits & eSOCKET_INTR ) != 0 )
 800a9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00b      	beq.n	800aa12 <FreeRTOS_recvfrom+0xb6>
			{
				if( ( xEventBits & eSOCKET_RECEIVE ) != 0 )
 800a9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d01d      	beq.n	800aa40 <FreeRTOS_recvfrom+0xe4>
				{
					/* Shouldn't have cleared the eSOCKET_RECEIVE flag. */
					xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	2101      	movs	r1, #1
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fb f800 	bl	8005a10 <xEventGroupSetBits>
				}
				break;
 800aa10:	e016      	b.n	800aa40 <FreeRTOS_recvfrom+0xe4>
		{
			( void ) xEventBits;
		}
		#endif /* ipconfigSUPPORT_SIGNALS */

		lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa16:	637b      	str	r3, [r7, #52]	; 0x34

		if( lPacketCount != 0 )
 800aa18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d112      	bne.n	800aa44 <FreeRTOS_recvfrom+0xe8>
		{
			break;
		}

		/* Has the timeout been reached ? */
		if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) )
 800aa1e:	f107 021c 	add.w	r2, r7, #28
 800aa22:	f107 0314 	add.w	r3, r7, #20
 800aa26:	4611      	mov	r1, r2
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7fc ffad 	bl	8007988 <xTaskCheckForTimeOut>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d109      	bne.n	800aa48 <FreeRTOS_recvfrom+0xec>
	while( lPacketCount == 0 )
 800aa34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d0b0      	beq.n	800a99c <FreeRTOS_recvfrom+0x40>
 800aa3a:	e006      	b.n	800aa4a <FreeRTOS_recvfrom+0xee>
				break;
 800aa3c:	bf00      	nop
 800aa3e:	e004      	b.n	800aa4a <FreeRTOS_recvfrom+0xee>
				break;
 800aa40:	bf00      	nop
 800aa42:	e002      	b.n	800aa4a <FreeRTOS_recvfrom+0xee>
			break;
 800aa44:	bf00      	nop
 800aa46:	e000      	b.n	800aa4a <FreeRTOS_recvfrom+0xee>
		{
			break;
 800aa48:	bf00      	nop
		}
	} /* while( lPacketCount == 0 ) */

	if( lPacketCount != 0 )
 800aa4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d041      	beq.n	800aad4 <FreeRTOS_recvfrom+0x178>
	{
		taskENTER_CRITICAL();
 800aa50:	f7fb fa94 	bl	8005f7c <vPortEnterCritical>
		{
			/* The owner of the list item is the network buffer. */
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	623b      	str	r3, [r7, #32]

			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	f003 0304 	and.w	r3, r3, #4
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d103      	bne.n	800aa6e <FreeRTOS_recvfrom+0x112>
			{
				/* Remove the network buffer from the list of buffers waiting to
				be processed by the socket. */
				uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800aa66:	6a3b      	ldr	r3, [r7, #32]
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7fb f936 	bl	8005cda <uxListRemove>
			}
		}
		taskEXIT_CRITICAL();
 800aa6e:	f7fb fab3 	bl	8005fd8 <vPortExitCritical>

		/* The returned value is the data length, which may have been capped to
		the receive buffer size. */
		lReturn = ( int32_t ) pxNetworkBuffer->xDataLength;
 800aa72:	6a3b      	ldr	r3, [r7, #32]
 800aa74:	69db      	ldr	r3, [r3, #28]
 800aa76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxSourceAddress != NULL )
 800aa78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d007      	beq.n	800aa8e <FreeRTOS_recvfrom+0x132>
		{
			pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	8c1a      	ldrh	r2, [r3, #32]
 800aa82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa84:	805a      	strh	r2, [r3, #2]
			pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
 800aa86:	6a3b      	ldr	r3, [r7, #32]
 800aa88:	695a      	ldr	r2, [r3, #20]
 800aa8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa8c:	605a      	str	r2, [r3, #4]
		}

		if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	f003 0301 	and.w	r3, r3, #1
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d116      	bne.n	800aac6 <FreeRTOS_recvfrom+0x16a>
		{
			/* The zero copy flag is not set.  Truncate the length if it won't
			fit in the provided buffer. */
			if( lReturn > ( int32_t ) xBufferLength )
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	dd01      	ble.n	800aaa4 <FreeRTOS_recvfrom+0x148>
			{
				iptraceRECVFROM_DISCARDING_BYTES( ( xBufferLength - lReturn ) );
				lReturn = ( int32_t )xBufferLength;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

			/* Copy the received data into the provided buffer, then release the
			network buffer. */
			memcpy( pvBuffer, ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ), ( size_t )lReturn );
 800aaa4:	6a3b      	ldr	r3, [r7, #32]
 800aaa6:	699b      	ldr	r3, [r3, #24]
 800aaa8:	332a      	adds	r3, #42	; 0x2a
 800aaaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaac:	4619      	mov	r1, r3
 800aaae:	68b8      	ldr	r0, [r7, #8]
 800aab0:	f005 fd35 	bl	801051e <memcpy>

			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	f003 0304 	and.w	r3, r3, #4
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d116      	bne.n	800aaec <FreeRTOS_recvfrom+0x190>
			{
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800aabe:	6a38      	ldr	r0, [r7, #32]
 800aac0:	f004 fdf0 	bl	800f6a4 <vReleaseNetworkBufferAndDescriptor>
 800aac4:	e012      	b.n	800aaec <FreeRTOS_recvfrom+0x190>
		{
			/* The zero copy flag was set.  pvBuffer is not a buffer into which
			the received data can be copied, but a pointer that must be set to
			point to the buffer in which the received data has already been
			placed. */
			*( ( void** ) pvBuffer ) = ( void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ) );
 800aac6:	6a3b      	ldr	r3, [r7, #32]
 800aac8:	699b      	ldr	r3, [r3, #24]
 800aaca:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	601a      	str	r2, [r3, #0]
 800aad2:	e00b      	b.n	800aaec <FreeRTOS_recvfrom+0x190>
		}

	}
#if( ipconfigSUPPORT_SIGNALS != 0 )
	else if( ( xEventBits & eSOCKET_INTR ) != 0 )
 800aad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d003      	beq.n	800aae6 <FreeRTOS_recvfrom+0x18a>
	{
		lReturn = -pdFREERTOS_ERRNO_EINTR;
 800aade:	f06f 0303 	mvn.w	r3, #3
 800aae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aae4:	e002      	b.n	800aaec <FreeRTOS_recvfrom+0x190>
		iptraceRECVFROM_INTERRUPTED();
	}
#endif /* ipconfigSUPPORT_SIGNALS */
	else
	{
		lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800aae6:	f06f 030a 	mvn.w	r3, #10
 800aaea:	62fb      	str	r3, [r7, #44]	; 0x2c
		iptraceRECVFROM_TIMEOUT();
	}

	return lReturn;
 800aaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3738      	adds	r7, #56	; 0x38
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <FreeRTOS_sendto>:
/*-----------------------------------------------------------*/

int32_t FreeRTOS_sendto( Socket_t xSocket, const void *pvBuffer, size_t xTotalDataLength, BaseType_t xFlags, const struct freertos_sockaddr *pxDestinationAddress, socklen_t xDestinationAddressLength )
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b08e      	sub	sp, #56	; 0x38
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	60f8      	str	r0, [r7, #12]
 800aafe:	60b9      	str	r1, [r7, #8]
 800ab00:	607a      	str	r2, [r7, #4]
 800ab02:	603b      	str	r3, [r7, #0]
NetworkBufferDescriptor_t *pxNetworkBuffer;
IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800ab04:	2303      	movs	r3, #3
 800ab06:	f887 3020 	strb.w	r3, [r7, #32]
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
TickType_t xTicksToWait;
int32_t lReturn = 0;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	633b      	str	r3, [r7, #48]	; 0x30
FreeRTOS_Socket_t *pxSocket;

	pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the
	parameters. */
	( void ) xDestinationAddressLength;
	configASSERT( pvBuffer );
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d109      	bne.n	800ab30 <FreeRTOS_sendto+0x3a>
 800ab1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab20:	f383 8811 	msr	BASEPRI, r3
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	f3bf 8f4f 	dsb	sy
 800ab2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab2e:	e7fe      	b.n	800ab2e <FreeRTOS_sendto+0x38>

	if( xTotalDataLength <= ( size_t ) ipMAX_UDP_PAYLOAD_LENGTH )
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 800ab36:	d875      	bhi.n	800ac24 <FreeRTOS_sendto+0x12e>
	{
		/* If the socket is not already bound to an address, bind it now.
		Passing NULL as the address parameter tells FreeRTOS_bind() to select
		the address to bind to. */
		if( ( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE ) ||
 800ab38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3a:	699b      	ldr	r3, [r3, #24]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d107      	bne.n	800ab50 <FreeRTOS_sendto+0x5a>
			( FreeRTOS_bind( xSocket, NULL, 0u ) == 0 ) )
 800ab40:	2200      	movs	r2, #0
 800ab42:	2100      	movs	r1, #0
 800ab44:	68f8      	ldr	r0, [r7, #12]
 800ab46:	f000 f872 	bl	800ac2e <FreeRTOS_bind>
 800ab4a:	4603      	mov	r3, r0
		if( ( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE ) ||
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d169      	bne.n	800ac24 <FreeRTOS_sendto+0x12e>
		{
			xTicksToWait = pxSocket->xSendBlockTime;
 800ab50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab52:	6a1b      	ldr	r3, [r3, #32]
 800ab54:	617b      	str	r3, [r7, #20]
					xTicksToWait = ( TickType_t )0;
				}
			}
			#endif /* ipconfigUSE_CALLBACKS */

			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	f003 0310 	and.w	r3, r3, #16
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <FreeRTOS_sendto+0x6e>
			{
				xTicksToWait = ( TickType_t ) 0;
 800ab60:	2300      	movs	r3, #0
 800ab62:	617b      	str	r3, [r7, #20]
			}

			if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	f003 0301 	and.w	r3, r3, #1
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d125      	bne.n	800abba <FreeRTOS_sendto+0xc4>
			{
				/* Zero copy is not set, so obtain a network buffer into
				which the payload will be copied. */
				vTaskSetTimeOutState( &xTimeOut );
 800ab6e:	f107 0318 	add.w	r3, r7, #24
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fc fecc 	bl	8007910 <vTaskSetTimeOutState>

				/* Block until a buffer becomes available, or until a
				timeout has been reached */
				pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( xTotalDataLength + sizeof( UDPPacket_t ), xTicksToWait );
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	332a      	adds	r3, #42	; 0x2a
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	4611      	mov	r1, r2
 800ab80:	4618      	mov	r0, r3
 800ab82:	f004 fd17 	bl	800f5b4 <pxGetNetworkBufferWithDescriptor>
 800ab86:	6378      	str	r0, [r7, #52]	; 0x34

				if( pxNetworkBuffer != NULL )
 800ab88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d019      	beq.n	800abc2 <FreeRTOS_sendto+0xcc>
				{
					memcpy( ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ), ( void * ) pvBuffer, xTotalDataLength );
 800ab8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab90:	699b      	ldr	r3, [r3, #24]
 800ab92:	332a      	adds	r3, #42	; 0x2a
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	68b9      	ldr	r1, [r7, #8]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f005 fcc0 	bl	801051e <memcpy>

					if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800ab9e:	f107 0214 	add.w	r2, r7, #20
 800aba2:	f107 0318 	add.w	r3, r7, #24
 800aba6:	4611      	mov	r1, r2
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fc feed 	bl	8007988 <xTaskCheckForTimeOut>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d106      	bne.n	800abc2 <FreeRTOS_sendto+0xcc>
					{
						/* The entire block time has been used up. */
						xTicksToWait = ( TickType_t ) 0;
 800abb4:	2300      	movs	r3, #0
 800abb6:	617b      	str	r3, [r7, #20]
 800abb8:	e003      	b.n	800abc2 <FreeRTOS_sendto+0xcc>
			else
			{
				/* When zero copy is used, pvBuffer is a pointer to the
				payload of a buffer that has already been obtained from the
				stack.  Obtain the network buffer pointer from the buffer. */
				pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( (void*)pvBuffer );
 800abba:	68b8      	ldr	r0, [r7, #8]
 800abbc:	f7ff f8a1 	bl	8009d02 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800abc0:	6378      	str	r0, [r7, #52]	; 0x34
			}

			if( pxNetworkBuffer != NULL )
 800abc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d02d      	beq.n	800ac24 <FreeRTOS_sendto+0x12e>
			{
				pxNetworkBuffer->xDataLength = xTotalDataLength;
 800abc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	61da      	str	r2, [r3, #28]
				pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800abce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abd0:	885a      	ldrh	r2, [r3, #2]
 800abd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd4:	841a      	strh	r2, [r3, #32]
				pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800abd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	b29a      	uxth	r2, r3
 800abdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abde:	845a      	strh	r2, [r3, #34]	; 0x22
				pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
 800abe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abe2:	685a      	ldr	r2, [r3, #4]
 800abe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe6:	615a      	str	r2, [r3, #20]

				/* The socket options are passed to the IP layer in the
				space that will eventually get used by the Ethernet header. */
				pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800abe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	3306      	adds	r3, #6
 800abee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abf0:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800abf4:	701a      	strb	r2, [r3, #0]

				/* Tell the networking task that the packet needs sending. */
				xStackTxEvent.pvData = pxNetworkBuffer;
 800abf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf8:	627b      	str	r3, [r7, #36]	; 0x24

				/* Ask the IP-task to send this packet */
				if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800abfa:	697a      	ldr	r2, [r7, #20]
 800abfc:	f107 0320 	add.w	r3, r7, #32
 800ac00:	4611      	mov	r1, r2
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7ff f9ae 	bl	8009f64 <xSendEventStructToIPTask>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d102      	bne.n	800ac14 <FreeRTOS_sendto+0x11e>
				{
					/* The packet was successfully sent to the IP task. */
					lReturn = ( int32_t ) xTotalDataLength;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	633b      	str	r3, [r7, #48]	; 0x30
 800ac12:	e007      	b.n	800ac24 <FreeRTOS_sendto+0x12e>
				}
				else
				{
					/* If the buffer was allocated in this function, release
					it. */
					if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	f003 0301 	and.w	r3, r3, #1
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d102      	bne.n	800ac24 <FreeRTOS_sendto+0x12e>
					{
						vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800ac1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ac20:	f004 fd40 	bl	800f6a4 <vReleaseNetworkBufferAndDescriptor>
	{
		/* The data is longer than the available buffer space. */
		iptraceSENDTO_DATA_TOO_LONG();
	}

	return lReturn;
 800ac24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
} /* Tested */
 800ac26:	4618      	mov	r0, r3
 800ac28:	3738      	adds	r7, #56	; 0x38
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <FreeRTOS_bind>:
 * be used for both UDP and TCP sockets.  The actual binding will be performed
 * by the IP-task to avoid mutual access to the bound-socket-lists
 * (xBoundUDPSocketsList or xBoundTCPSocketsList).
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket, struct freertos_sockaddr * pxAddress, socklen_t xAddressLength )
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b08a      	sub	sp, #40	; 0x28
 800ac32:	af02      	add	r7, sp, #8
 800ac34:	60f8      	str	r0, [r7, #12]
 800ac36:	60b9      	str	r1, [r7, #8]
 800ac38:	607a      	str	r2, [r7, #4]
IPStackEvent_t xBindEvent;
FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	61bb      	str	r3, [r7, #24]
BaseType_t xReturn = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	61fb      	str	r3, [r7, #28]

	( void ) xAddressLength;

	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d003      	beq.n	800ac50 <FreeRTOS_bind+0x22>
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4e:	d103      	bne.n	800ac58 <FreeRTOS_bind+0x2a>
	{
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ac50:	f06f 0315 	mvn.w	r3, #21
 800ac54:	61fb      	str	r3, [r7, #28]
 800ac56:	e044      	b.n	800ace2 <FreeRTOS_bind+0xb4>
	}
	/* Once a socket is bound to a port, it can not be bound to a different
	port number */
	else if( socketSOCKET_IS_BOUND( pxSocket) != pdFALSE )
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	699b      	ldr	r3, [r3, #24]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d001      	beq.n	800ac64 <FreeRTOS_bind+0x36>
 800ac60:	2301      	movs	r3, #1
 800ac62:	e000      	b.n	800ac66 <FreeRTOS_bind+0x38>
 800ac64:	2300      	movs	r3, #0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d003      	beq.n	800ac72 <FreeRTOS_bind+0x44>
	{
		/* The socket is already bound. */
		FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ac6a:	f06f 0315 	mvn.w	r3, #21
 800ac6e:	61fb      	str	r3, [r7, #28]
 800ac70:	e037      	b.n	800ace2 <FreeRTOS_bind+0xb4>
	}
	else
	{
		/* Prepare a messages to the IP-task in order to perform the binding.
		The desired port number will be passed in usLocalPort. */
		xBindEvent.eEventType = eSocketBindEvent;
 800ac72:	2308      	movs	r3, #8
 800ac74:	743b      	strb	r3, [r7, #16]
		xBindEvent.pvData = ( void * ) xSocket;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	617b      	str	r3, [r7, #20]
		if( pxAddress != NULL )
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00e      	beq.n	800ac9e <FreeRTOS_bind+0x70>
		{
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	885b      	ldrh	r3, [r3, #2]
 800ac84:	021b      	lsls	r3, r3, #8
 800ac86:	b21a      	sxth	r2, r3
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	885b      	ldrh	r3, [r3, #2]
 800ac8c:	0a1b      	lsrs	r3, r3, #8
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	b21b      	sxth	r3, r3
 800ac92:	4313      	orrs	r3, r2
 800ac94:	b21b      	sxth	r3, r3
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	849a      	strh	r2, [r3, #36]	; 0x24
 800ac9c:	e002      	b.n	800aca4 <FreeRTOS_bind+0x76>
		}
		else
		{
			/* Caller wants to bind to a random port number. */
			pxSocket->usLocalPort = 0u;
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	2200      	movs	r2, #0
 800aca2:	849a      	strh	r2, [r3, #36]	; 0x24
		}

		/* portMAX_DELAY is used as a the time-out parameter, as binding *must*
		succeed before the socket can be used.  _RB_ The use of an infinite
		block time needs be changed as it could result in the task hanging. */
		if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800aca4:	f107 0310 	add.w	r3, r7, #16
 800aca8:	f04f 31ff 	mov.w	r1, #4294967295
 800acac:	4618      	mov	r0, r3
 800acae:	f7ff f959 	bl	8009f64 <xSendEventStructToIPTask>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d103      	bne.n	800acc0 <FreeRTOS_bind+0x92>
		{
			/* Failed to wake-up the IP-task, no use to wait for it */
			FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
			xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800acb8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800acbc:	61fb      	str	r3, [r7, #28]
 800acbe:	e010      	b.n	800ace2 <FreeRTOS_bind+0xb4>
		}
		else
		{
			/* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
			job. */
			xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	6858      	ldr	r0, [r3, #4]
 800acc4:	f04f 33ff 	mov.w	r3, #4294967295
 800acc8:	9300      	str	r3, [sp, #0]
 800acca:	2300      	movs	r3, #0
 800accc:	2201      	movs	r2, #1
 800acce:	2110      	movs	r1, #16
 800acd0:	f7fa fd9e 	bl	8005810 <xEventGroupWaitBits>
			if( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE )
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d102      	bne.n	800ace2 <FreeRTOS_bind+0xb4>
			{
				xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800acdc:	f06f 0315 	mvn.w	r3, #21
 800ace0:	61fb      	str	r3, [r7, #28]
			}
		}
	}

	return xReturn;
 800ace2:	69fb      	ldr	r3, [r7, #28]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3720      	adds	r7, #32
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <vSocketBind>:
 * vSocketBind(): internal version of bind() that should not be called directly.
 * 'xInternal' is used for TCP sockets only: it allows to have several
 * (connected) child sockets bound to the same server port.
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t *pxSocket, struct freertos_sockaddr * pxAddress, size_t uxAddressLength, BaseType_t xInternal )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b08c      	sub	sp, #48	; 0x30
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800acfa:	2300      	movs	r3, #0
 800acfc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
	struct freertos_sockaddr xAddress;
#endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

#if( ipconfigUSE_TCP == 1 )
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ad04:	2b06      	cmp	r3, #6
 800ad06:	d102      	bne.n	800ad0e <vSocketBind+0x22>
	{
		pxSocketList = &xBoundTCPSocketsList;
 800ad08:	4b3e      	ldr	r3, [pc, #248]	; (800ae04 <vSocketBind+0x118>)
 800ad0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad0c:	e001      	b.n	800ad12 <vSocketBind+0x26>
	}
	else
#endif  /* ipconfigUSE_TCP == 1 */
	{
		pxSocketList = &xBoundUDPSocketsList;
 800ad0e:	4b3e      	ldr	r3, [pc, #248]	; (800ae08 <vSocketBind+0x11c>)
 800ad10:	62bb      	str	r3, [r7, #40]	; 0x28

	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the parameters. */
	( void ) uxAddressLength;

	configASSERT( pxSocket );
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d109      	bne.n	800ad2c <vSocketBind+0x40>
 800ad18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1c:	f383 8811 	msr	BASEPRI, r3
 800ad20:	f3bf 8f6f 	isb	sy
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	627b      	str	r3, [r7, #36]	; 0x24
 800ad2a:	e7fe      	b.n	800ad2a <vSocketBind+0x3e>
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad32:	d109      	bne.n	800ad48 <vSocketBind+0x5c>
 800ad34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad38:	f383 8811 	msr	BASEPRI, r3
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	f3bf 8f4f 	dsb	sy
 800ad44:	623b      	str	r3, [r7, #32]
 800ad46:	e7fe      	b.n	800ad46 <vSocketBind+0x5a>
		/* pxAddress will be NULL if sendto() was called on a socket without the
		socket being bound to an address.  In this case, automatically allocate
		an address to the socket.  There is a very tiny chance that the allocated
		port will already be in use - if that is the case, then the check below
		[pxListFindListItemWithValue()] will result in an error being returned. */
		if( pxAddress == NULL )
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d105      	bne.n	800ad5a <vSocketBind+0x6e>
		{
			pxAddress = &xAddress;
 800ad4e:	f107 0314 	add.w	r3, r7, #20
 800ad52:	60bb      	str	r3, [r7, #8]
			/* For now, put it to zero, will be assigned later */
			pxAddress->sin_port = 0u;
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	2200      	movs	r2, #0
 800ad58:	805a      	strh	r2, [r3, #2]
	}
	#endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

	/* Sockets must be bound before calling FreeRTOS_sendto() if
	ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
	configASSERT( pxAddress );
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d109      	bne.n	800ad74 <vSocketBind+0x88>
 800ad60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	61fb      	str	r3, [r7, #28]
 800ad72:	e7fe      	b.n	800ad72 <vSocketBind+0x86>

	if( pxAddress != NULL )
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d03c      	beq.n	800adf4 <vSocketBind+0x108>
	{
		if( pxAddress->sin_port == 0u )
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	885b      	ldrh	r3, [r3, #2]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d109      	bne.n	800ad96 <vSocketBind+0xaa>
		{
			pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 fa9f 	bl	800b2cc <prvGetPrivatePortNumber>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	461a      	mov	r2, r3
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	805a      	strh	r2, [r3, #2]
		confirmed that the socket was not yet bound to a port.  If it is called
		from the IP-task, no such check is necessary. */

		/* Check to ensure the port is not already in use.  If the bind is
		called internally, a port MAY be used by more than one socket. */
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d004      	beq.n	800ada6 <vSocketBind+0xba>
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ada2:	2b06      	cmp	r3, #6
 800ada4:	d00c      	beq.n	800adc0 <vSocketBind+0xd4>
			( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	885b      	ldrh	r3, [r3, #2]
 800adaa:	4619      	mov	r1, r3
 800adac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adae:	f000 fad9 	bl	800b364 <pxListFindListItemWithValue>
 800adb2:	4603      	mov	r3, r0
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d003      	beq.n	800adc0 <vSocketBind+0xd4>
		{
			FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
				pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ? "TC" : "UD",
				FreeRTOS_ntohs( pxAddress->sin_port ) ) );
			xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800adb8:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800adbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adbe:	e01c      	b.n	800adfa <vSocketBind+0x10e>
		}
		else
		{
			/* Allocate the port number to the socket.
			This macro will set 'xBoundSocketListItem->xItemValue' */
			socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	885b      	ldrh	r3, [r3, #2]
 800adc4:	461a      	mov	r2, r3
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	609a      	str	r2, [r3, #8]

			/* And also store it in a socket field 'usLocalPort' in host-byte-order,
			mostly used for logging and debugging purposes */
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	885b      	ldrh	r3, [r3, #2]
 800adce:	021b      	lsls	r3, r3, #8
 800add0:	b21a      	sxth	r2, r3
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	885b      	ldrh	r3, [r3, #2]
 800add6:	0a1b      	lsrs	r3, r3, #8
 800add8:	b29b      	uxth	r3, r3
 800adda:	b21b      	sxth	r3, r3
 800addc:	4313      	orrs	r3, r2
 800adde:	b21b      	sxth	r3, r3
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	849a      	strh	r2, [r3, #36]	; 0x24
					vTaskSuspendAll();
				}
				#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

				/* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
				vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	3308      	adds	r3, #8
 800adea:	4619      	mov	r1, r3
 800adec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adee:	f7fa ff17 	bl	8005c20 <vListInsertEnd>
 800adf2:	e002      	b.n	800adfa <vSocketBind+0x10e>
			}
		}
	}
	else
	{
		xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800adf4:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800adf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if( xReturn != 0 )
	{
		iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
	}

	return xReturn;
 800adfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
} /* Tested */
 800adfc:	4618      	mov	r0, r3
 800adfe:	3730      	adds	r7, #48	; 0x30
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	2000590c 	.word	0x2000590c
 800ae08:	20005920 	.word	0x20005920

0800ae0c <FreeRTOS_closesocket>:
 * In case of a TCP socket: the connection will not be closed automatically
 * Subsequent messages for the closed socket will be responded to with a RST
 * The IP-task will actually close the socket, after receiving a 'eSocketCloseEvent' message
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b086      	sub	sp, #24
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
BaseType_t xResult;
#if( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 )
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * )xSocket;
#endif
IPStackEvent_t xCloseEvent;
xCloseEvent.eEventType = eSocketCloseEvent;
 800ae14:	2309      	movs	r3, #9
 800ae16:	733b      	strb	r3, [r7, #12]
xCloseEvent.pvData = ( void * ) xSocket;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	613b      	str	r3, [r7, #16]

	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d003      	beq.n	800ae2a <FreeRTOS_closesocket+0x1e>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae28:	d102      	bne.n	800ae30 <FreeRTOS_closesocket+0x24>
	{
		xResult = 0;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	617b      	str	r3, [r7, #20]
 800ae2e:	e00e      	b.n	800ae4e <FreeRTOS_closesocket+0x42>
		packet handling. */

		/* Note when changing the time-out value below, it must be checked who is calling
		this function. If it is called by the IP-task, a deadlock could occur.
		The IP-task would only call it in case of a user call-back */
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 800ae30:	f107 030c 	add.w	r3, r7, #12
 800ae34:	2100      	movs	r1, #0
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7ff f894 	bl	8009f64 <xSendEventStructToIPTask>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d103      	bne.n	800ae4a <FreeRTOS_closesocket+0x3e>
		{
			FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
			xResult = -1;
 800ae42:	f04f 33ff 	mov.w	r3, #4294967295
 800ae46:	617b      	str	r3, [r7, #20]
 800ae48:	e001      	b.n	800ae4e <FreeRTOS_closesocket+0x42>
		}
		else
		{
			xResult = 1;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	617b      	str	r3, [r7, #20]
		}
	}

	return xResult;
 800ae4e:	697b      	ldr	r3, [r7, #20]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3718      	adds	r7, #24
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <vSocketClose>:

/* This is the internal version of FreeRTOS_closesocket()
 * It will be called by the IPtask only to avoid problems with synchronicity
 */
void *vSocketClose( FreeRTOS_Socket_t *pxSocket )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
NetworkBufferDescriptor_t *pxNetworkBuffer;

	#if( ipconfigUSE_TCP == 1 )
	{
		/* For TCP: clean up a little more. */
		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ae66:	2b06      	cmp	r3, #6
 800ae68:	d122      	bne.n	800aeb0 <vSocketClose+0x58>
		{
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d004      	beq.n	800ae7c <vSocketClose+0x24>
				{
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae76:	4618      	mov	r0, r3
 800ae78:	f004 fc14 	bl	800f6a4 <vReleaseNetworkBufferAndDescriptor>
				}
				/* Free the resources which were claimed by the tcpWin member */
				vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	33dc      	adds	r3, #220	; 0xdc
 800ae80:	4618      	mov	r0, r3
 800ae82:	f003 fc1b 	bl	800e6bc <vTCPWindowDestroy>
			}
			#endif /* ipconfigUSE_TCP_WIN */

			/* Free the input and output streams */
			if( pxSocket->u.xTCP.rxStream != NULL )
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d004      	beq.n	800ae98 <vSocketClose+0x40>
			{
				vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7fb fa10 	bl	80062b8 <vPortFree>
			}

			if( pxSocket->u.xTCP.txStream != NULL )
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d004      	beq.n	800aeaa <vSocketClose+0x52>
			{
				vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7fb fa07 	bl	80062b8 <vPortFree>
			}

			/* In case this is a child socket, make sure the child-count of the
			parent socket is decreased. */
			prvTCPSetSocketCount( pxSocket );
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f834 	bl	800af18 <prvTCPSetSocketCount>
	}
	#endif  /* ipconfigUSE_TCP == 1 */

	/* Socket must be unbound first, to ensure no more packets are queued on
	it. */
	if( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE )
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	699b      	ldr	r3, [r3, #24]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d001      	beq.n	800aebc <vSocketClose+0x64>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e000      	b.n	800aebe <vSocketClose+0x66>
 800aebc:	2300      	movs	r3, #0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d004      	beq.n	800aecc <vSocketClose+0x74>
		{
			vTaskSuspendAll();
		}
		#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

		uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	3308      	adds	r3, #8
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fa ff07 	bl	8005cda <uxListRemove>
		#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
	}

	/* Now the socket is not bound the list of waiting packets can be
	drained. */
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800aed2:	2b11      	cmp	r3, #17
 800aed4:	d10f      	bne.n	800aef6 <vSocketClose+0x9e>
	{
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800aed6:	e00a      	b.n	800aeee <vSocketClose+0x96>
		{
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	60fb      	str	r3, [r7, #12]
			uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fa fef9 	bl	8005cda <uxListRemove>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f004 fbdb 	bl	800f6a4 <vReleaseNetworkBufferAndDescriptor>
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1f0      	bne.n	800aed8 <vSocketClose+0x80>
		}
	}

	if( pxSocket->xEventGroup )
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d004      	beq.n	800af08 <vSocketClose+0xb0>
	{
		vEventGroupDelete( pxSocket->xEventGroup );
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	4618      	mov	r0, r3
 800af04:	f7fa fe0d 	bl	8005b22 <vEventGroupDelete>
		}
	}
	#endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

	/* Anf finally, after all resources have been freed, free the socket space */
	vPortFreeSocket( pxSocket );
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f7fb f9d5 	bl	80062b8 <vPortFree>

	return 0;
 800af0e:	2300      	movs	r3, #0
} /* Tested */
 800af10:	4618      	mov	r0, r3
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <prvTCPSetSocketCount>:
	 * When a child socket gets closed, make sure to update the child-count of the
	 * parent.  When a listening parent socket is closed, make sure no child-sockets
	 * keep a pointer to it.
	 */
	static void prvTCPSetSocketCount( FreeRTOS_Socket_t *pxSocketToDelete )
	{
 800af18:	b480      	push	{r7}
 800af1a:	b087      	sub	sp, #28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
	const ListItem_t *pxIterator;
	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800af20:	4b18      	ldr	r3, [pc, #96]	; (800af84 <prvTCPSetSocketCount+0x6c>)
 800af22:	613b      	str	r3, [r7, #16]
	FreeRTOS_Socket_t *pxOtherSocket;
	uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800af28:	81fb      	strh	r3, [r7, #14]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	617b      	str	r3, [r7, #20]
 800af30:	e01d      	b.n	800af6e <prvTCPSetSocketCount+0x56>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxOtherSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	60bb      	str	r3, [r7, #8]
			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d112      	bne.n	800af68 <prvTCPSetSocketCount+0x50>
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
 800af46:	89fa      	ldrh	r2, [r7, #14]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d10d      	bne.n	800af68 <prvTCPSetSocketCount+0x50>
				( pxOtherSocket->u.xTCP.usChildCount ) )
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800af52:	2b00      	cmp	r3, #0
 800af54:	d008      	beq.n	800af68 <prvTCPSetSocketCount+0x50>
			{
				pxOtherSocket->u.xTCP.usChildCount--;
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800af5c:	3b01      	subs	r3, #1
 800af5e:	b29a      	uxth	r2, r3
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
				FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
					pxOtherSocket->usLocalPort,
					pxOtherSocket->u.xTCP.usChildCount,
					pxOtherSocket->u.xTCP.usBacklog,
					pxOtherSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );
				break;
 800af66:	e006      	b.n	800af76 <prvTCPSetSocketCount+0x5e>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	617b      	str	r3, [r7, #20]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	429a      	cmp	r2, r3
 800af74:	d1dd      	bne.n	800af32 <prvTCPSetSocketCount+0x1a>
			}
		}
	}
 800af76:	bf00      	nop
 800af78:	371c      	adds	r7, #28
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	20005914 	.word	0x20005914

0800af88 <FreeRTOS_setsockopt>:
#endif /* ipconfigUSE_TCP == 1 */

/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_setsockopt( Socket_t xSocket, int32_t lLevel, int32_t lOptionName, const void *pvOptionValue, size_t xOptionLength )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08c      	sub	sp, #48	; 0x30
 800af8c:	af02      	add	r7, sp, #8
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
 800af94:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800af96:	f06f 0315 	mvn.w	r3, #21
 800af9a:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t lOptionValue;
FreeRTOS_Socket_t *pxSocket;

	pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	623b      	str	r3, [r7, #32]
	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the parameters. */
	( void ) lLevel;
	( void ) xOptionLength;

	configASSERT( xSocket );
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d109      	bne.n	800afba <FreeRTOS_setsockopt+0x32>
 800afa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afaa:	f383 8811 	msr	BASEPRI, r3
 800afae:	f3bf 8f6f 	isb	sy
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	613b      	str	r3, [r7, #16]
 800afb8:	e7fe      	b.n	800afb8 <FreeRTOS_setsockopt+0x30>

	switch( lOptionName )
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2b0f      	cmp	r3, #15
 800afbe:	f200 8171 	bhi.w	800b2a4 <FreeRTOS_setsockopt+0x31c>
 800afc2:	a201      	add	r2, pc, #4	; (adr r2, 800afc8 <FreeRTOS_setsockopt+0x40>)
 800afc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc8:	0800b009 	.word	0x0800b009
 800afcc:	0800b017 	.word	0x0800b017
 800afd0:	0800b043 	.word	0x0800b043
 800afd4:	0800b2a5 	.word	0x0800b2a5
 800afd8:	0800b079 	.word	0x0800b079
 800afdc:	0800b079 	.word	0x0800b079
 800afe0:	0800b2a5 	.word	0x0800b2a5
 800afe4:	0800b2a5 	.word	0x0800b2a5
 800afe8:	0800b2a5 	.word	0x0800b2a5
 800afec:	0800b2a5 	.word	0x0800b2a5
 800aff0:	0800b2a5 	.word	0x0800b2a5
 800aff4:	0800b17b 	.word	0x0800b17b
 800aff8:	0800b1b3 	.word	0x0800b1b3
 800affc:	0800b0d5 	.word	0x0800b0d5
 800b000:	0800b1e9 	.word	0x0800b1e9
 800b004:	0800b253 	.word	0x0800b253
	{
		case FREERTOS_SO_RCVTIMEO	:
			/* Receive time out. */
			pxSocket->xReceiveBlockTime = *( ( TickType_t * ) pvOptionValue );
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	61da      	str	r2, [r3, #28]
			xReturn = 0;
 800b010:	2300      	movs	r3, #0
 800b012:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800b014:	e155      	b.n	800b2c2 <FreeRTOS_setsockopt+0x33a>

		case FREERTOS_SO_SNDTIMEO	:
			pxSocket->xSendBlockTime = *( ( TickType_t * ) pvOptionValue );
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	6a3b      	ldr	r3, [r7, #32]
 800b01c:	621a      	str	r2, [r3, #32]
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800b01e:	6a3b      	ldr	r3, [r7, #32]
 800b020:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b024:	2b11      	cmp	r3, #17
 800b026:	d109      	bne.n	800b03c <FreeRTOS_setsockopt+0xb4>
			{
				/* The send time out is capped for the reason stated in the
				comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
				in FreeRTOSIPConfig.h (assuming an official configuration file
				is being used. */
				if( pxSocket->xSendBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800b028:	6a3b      	ldr	r3, [r7, #32]
 800b02a:	6a1b      	ldr	r3, [r3, #32]
 800b02c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b030:	4293      	cmp	r3, r2
 800b032:	d903      	bls.n	800b03c <FreeRTOS_setsockopt+0xb4>
				{
					pxSocket->xSendBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800b034:	6a3b      	ldr	r3, [r7, #32]
 800b036:	f241 3288 	movw	r2, #5000	; 0x1388
 800b03a:	621a      	str	r2, [r3, #32]
			{
				/* For TCP socket, it isn't necessary to limit the blocking time
				because	the FreeRTOS_send() function does not wait for a network
				buffer to become available. */
			}
			xReturn = 0;
 800b03c:	2300      	movs	r3, #0
 800b03e:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800b040:	e13f      	b.n	800b2c2 <FreeRTOS_setsockopt+0x33a>
				break;
		#endif /* ipconfigUDP_MAX_RX_PACKETS */

		case FREERTOS_SO_UDPCKSUM_OUT :
			/* Turn calculating of the UDP checksum on/off for this socket. */
			lOptionValue = ( BaseType_t ) pvOptionValue;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	61fb      	str	r3, [r7, #28]

			if( lOptionValue == 0 )
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d109      	bne.n	800b060 <FreeRTOS_setsockopt+0xd8>
			{
				pxSocket->ucSocketOptions &= ( uint8_t ) ~FREERTOS_SO_UDPCKSUM_OUT;
 800b04c:	6a3b      	ldr	r3, [r7, #32]
 800b04e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b052:	f023 0302 	bic.w	r3, r3, #2
 800b056:	b2da      	uxtb	r2, r3
 800b058:	6a3b      	ldr	r3, [r7, #32]
 800b05a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800b05e:	e008      	b.n	800b072 <FreeRTOS_setsockopt+0xea>
			}
			else
			{
				pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800b060:	6a3b      	ldr	r3, [r7, #32]
 800b062:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b066:	f043 0302 	orr.w	r3, r3, #2
 800b06a:	b2da      	uxtb	r2, r3
 800b06c:	6a3b      	ldr	r3, [r7, #32]
 800b06e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			}
			xReturn = 0;
 800b072:	2300      	movs	r3, #0
 800b074:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800b076:	e124      	b.n	800b2c2 <FreeRTOS_setsockopt+0x33a>
			case FREERTOS_SO_SNDBUF:	/* Set the size of the send buffer, in units of MSS (TCP only) */
			case FREERTOS_SO_RCVBUF:	/* Set the size of the receive buffer, in units of MSS (TCP only) */
				{
					uint32_t ulNewValue;

					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b078:	6a3b      	ldr	r3, [r7, #32]
 800b07a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b07e:	2b06      	cmp	r3, #6
 800b080:	f040 8114 	bne.w	800b2ac <FreeRTOS_setsockopt+0x324>
						FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
							( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b04      	cmp	r3, #4
 800b088:	d104      	bne.n	800b094 <FreeRTOS_setsockopt+0x10c>
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f040 8117 	bne.w	800b2c2 <FreeRTOS_setsockopt+0x33a>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b05      	cmp	r3, #5
 800b098:	d104      	bne.n	800b0a4 <FreeRTOS_setsockopt+0x11c>
						( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800b09a:	6a3b      	ldr	r3, [r7, #32]
 800b09c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f040 810f 	bne.w	800b2c2 <FreeRTOS_setsockopt+0x33a>
						FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
							( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					ulNewValue = *( ( uint32_t * ) pvOptionValue );
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	61bb      	str	r3, [r7, #24]

					if( lOptionName == FREERTOS_SO_SNDBUF )
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2b04      	cmp	r3, #4
 800b0ae:	d10b      	bne.n	800b0c8 <FreeRTOS_setsockopt+0x140>
					{
						/* Round up to nearest MSS size */
						ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800b0b0:	6a3b      	ldr	r3, [r7, #32]
 800b0b2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	69b8      	ldr	r0, [r7, #24]
 800b0ba:	f7ff fa55 	bl	800a568 <FreeRTOS_round_up>
 800b0be:	61b8      	str	r0, [r7, #24]
						pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800b0c0:	6a3b      	ldr	r3, [r7, #32]
 800b0c2:	69ba      	ldr	r2, [r7, #24]
 800b0c4:	671a      	str	r2, [r3, #112]	; 0x70
 800b0c6:	e002      	b.n	800b0ce <FreeRTOS_setsockopt+0x146>
					}
					else
					{
						pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800b0c8:	6a3b      	ldr	r3, [r7, #32]
 800b0ca:	69ba      	ldr	r2, [r7, #24]
 800b0cc:	66da      	str	r2, [r3, #108]	; 0x6c
					}
				}
				xReturn = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b0d2:	e0f6      	b.n	800b2c2 <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_WIN_PROPERTIES:	/* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
				{
					WinProperties_t* pxProps;

					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b0d4:	6a3b      	ldr	r3, [r7, #32]
 800b0d6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b0da:	2b06      	cmp	r3, #6
 800b0dc:	f040 80e8 	bne.w	800b2b0 <FreeRTOS_setsockopt+0x328>
					{
						FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( ( pxSocket->u.xTCP.txStream != NULL ) || ( pxSocket->u.xTCP.rxStream != NULL ) )
 800b0e0:	6a3b      	ldr	r3, [r7, #32]
 800b0e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f040 80ec 	bne.w	800b2c2 <FreeRTOS_setsockopt+0x33a>
 800b0ea:	6a3b      	ldr	r3, [r7, #32]
 800b0ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	f040 80e7 	bne.w	800b2c2 <FreeRTOS_setsockopt+0x33a>
					{
						FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: buffer already created\n" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					pxProps = ( ( WinProperties_t * ) pvOptionValue );
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	617b      	str	r3, [r7, #20]
					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ), sizeof( pxProps->lTxBufSize ) );
 800b0f8:	697a      	ldr	r2, [r7, #20]
 800b0fa:	2304      	movs	r3, #4
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	4613      	mov	r3, r2
 800b100:	2204      	movs	r2, #4
 800b102:	2100      	movs	r1, #0
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f7ff ff3f 	bl	800af88 <FreeRTOS_setsockopt>
					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ), sizeof( pxProps->lRxBufSize ) );
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	f103 0208 	add.w	r2, r3, #8
 800b110:	2304      	movs	r3, #4
 800b112:	9300      	str	r3, [sp, #0]
 800b114:	4613      	mov	r3, r2
 800b116:	2205      	movs	r2, #5
 800b118:	2100      	movs	r1, #0
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f7ff ff34 	bl	800af88 <FreeRTOS_setsockopt>
					#if( ipconfigUSE_TCP_WIN == 1 )
					{
						pxSocket->u.xTCP.uxRxWinSize = ( uint32_t )pxProps->lRxWinSize;	/* Fixed value: size of the TCP reception window */
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	461a      	mov	r2, r3
 800b126:	6a3b      	ldr	r3, [r7, #32]
 800b128:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize = ( uint32_t )pxProps->lTxWinSize;	/* Fixed value: size of the TCP transmit window */
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	461a      	mov	r2, r3
 800b132:	6a3b      	ldr	r3, [r7, #32]
 800b134:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
					}
					#endif

					/* In case the socket has already initialised its tcpWin,
					adapt the window size parameters */
					if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800b13e:	f003 0301 	and.w	r3, r3, #1
 800b142:	b2db      	uxtb	r3, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	d015      	beq.n	800b174 <FreeRTOS_setsockopt+0x1ec>
					{
						pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxRxWinSize * pxSocket->u.xTCP.usInitMSS;
 800b148:	6a3b      	ldr	r3, [r7, #32]
 800b14a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b14e:	6a3a      	ldr	r2, [r7, #32]
 800b150:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800b154:	fb02 f203 	mul.w	r2, r2, r3
 800b158:	6a3b      	ldr	r3, [r7, #32]
 800b15a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
						pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxTxWinSize * pxSocket->u.xTCP.usInitMSS;
 800b15e:	6a3b      	ldr	r3, [r7, #32]
 800b160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b164:	6a3a      	ldr	r2, [r7, #32]
 800b166:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800b16a:	fb02 f203 	mul.w	r2, r2, r3
 800b16e:	6a3b      	ldr	r3, [r7, #32]
 800b170:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
					}
				}

				xReturn = 0;
 800b174:	2300      	movs	r3, #0
 800b176:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b178:	e0a3      	b.n	800b2c2 <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_REUSE_LISTEN_SOCKET:	/* If true, the server-socket will turn into a connected socket */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b180:	2b06      	cmp	r3, #6
 800b182:	f040 8097 	bne.w	800b2b4 <FreeRTOS_setsockopt+0x32c>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}
					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d007      	beq.n	800b19e <FreeRTOS_setsockopt+0x216>
					{
						pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800b18e:	6a3a      	ldr	r2, [r7, #32]
 800b190:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b194:	f043 0308 	orr.w	r3, r3, #8
 800b198:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800b19c:	e006      	b.n	800b1ac <FreeRTOS_setsockopt+0x224>
					}
					else
					{
						pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800b19e:	6a3a      	ldr	r2, [r7, #32]
 800b1a0:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b1a4:	f36f 03c3 	bfc	r3, #3, #1
 800b1a8:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
					}
				}
				xReturn = 0;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b1b0:	e087      	b.n	800b2c2 <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_CLOSE_AFTER_SEND:		/* As soon as the last byte has been transmitted, finalise the connection */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b1b2:	6a3b      	ldr	r3, [r7, #32]
 800b1b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b1b8:	2b06      	cmp	r3, #6
 800b1ba:	d17d      	bne.n	800b2b8 <FreeRTOS_setsockopt+0x330>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d007      	beq.n	800b1d4 <FreeRTOS_setsockopt+0x24c>
					{
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800b1c4:	6a3a      	ldr	r2, [r7, #32]
 800b1c6:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b1ca:	f043 0310 	orr.w	r3, r3, #16
 800b1ce:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800b1d2:	e006      	b.n	800b1e2 <FreeRTOS_setsockopt+0x25a>
					}
					else
					{
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800b1d4:	6a3a      	ldr	r2, [r7, #32]
 800b1d6:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b1da:	f36f 1304 	bfc	r3, #4, #1
 800b1de:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
					}
				}
				xReturn = 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b1e6:	e06c      	b.n	800b2c2 <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_SET_FULL_SIZE:		/* Refuse to send packets smaller than MSS  */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
 800b1ea:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b1ee:	2b06      	cmp	r3, #6
 800b1f0:	d164      	bne.n	800b2bc <FreeRTOS_setsockopt+0x334>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d007      	beq.n	800b20a <FreeRTOS_setsockopt+0x282>
					{
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800b1fa:	6a3a      	ldr	r2, [r7, #32]
 800b1fc:	f892 30dc 	ldrb.w	r3, [r2, #220]	; 0xdc
 800b200:	f043 0302 	orr.w	r3, r3, #2
 800b204:	f882 30dc 	strb.w	r3, [r2, #220]	; 0xdc
 800b208:	e006      	b.n	800b218 <FreeRTOS_setsockopt+0x290>
					}
					else
					{
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800b20a:	6a3a      	ldr	r2, [r7, #32]
 800b20c:	f892 30dc 	ldrb.w	r3, [r2, #220]	; 0xdc
 800b210:	f36f 0341 	bfc	r3, #1, #1
 800b214:	f882 30dc 	strb.w	r3, [r2, #220]	; 0xdc
					}

					if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 800b218:	6a3b      	ldr	r3, [r7, #32]
 800b21a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800b21e:	f003 0302 	and.w	r3, r3, #2
 800b222:	b2db      	uxtb	r3, r3
 800b224:	2b00      	cmp	r3, #0
 800b226:	d111      	bne.n	800b24c <FreeRTOS_setsockopt+0x2c4>
						( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800b228:	6a3b      	ldr	r3, [r7, #32]
 800b22a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
					if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 800b22e:	2b04      	cmp	r3, #4
 800b230:	d90c      	bls.n	800b24c <FreeRTOS_setsockopt+0x2c4>
						( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800b232:	6a38      	ldr	r0, [r7, #32]
 800b234:	f000 fabd 	bl	800b7b2 <FreeRTOS_tx_size>
 800b238:	4603      	mov	r3, r0
						( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d006      	beq.n	800b24c <FreeRTOS_setsockopt+0x2c4>
					{
						pxSocket->u.xTCP.usTimeout = 1u; /* to set/clear bSendFullSize */
 800b23e:	6a3b      	ldr	r3, [r7, #32]
 800b240:	2201      	movs	r2, #1
 800b242:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
						xSendEventToIPTask( eTCPTimerEvent );
 800b246:	2005      	movs	r0, #5
 800b248:	f7fe fe76 	bl	8009f38 <xSendEventToIPTask>
					}
				}
				xReturn = 0;
 800b24c:	2300      	movs	r3, #0
 800b24e:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b250:	e037      	b.n	800b2c2 <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_STOP_RX:		/* Refuse to receive more packts */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b252:	6a3b      	ldr	r3, [r7, #32]
 800b254:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b258:	2b06      	cmp	r3, #6
 800b25a:	d131      	bne.n	800b2c0 <FreeRTOS_setsockopt+0x338>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d007      	beq.n	800b274 <FreeRTOS_setsockopt+0x2ec>
					{
						pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800b264:	6a3a      	ldr	r2, [r7, #32]
 800b266:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800b26a:	f043 0304 	orr.w	r3, r3, #4
 800b26e:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
 800b272:	e006      	b.n	800b282 <FreeRTOS_setsockopt+0x2fa>
					}
					else
					{
						pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800b274:	6a3a      	ldr	r2, [r7, #32]
 800b276:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800b27a:	f36f 0382 	bfc	r3, #2, #1
 800b27e:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
					}

					pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800b282:	6a3a      	ldr	r2, [r7, #32]
 800b284:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800b288:	f043 0301 	orr.w	r3, r3, #1
 800b28c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = 1u; /* to set/clear bRxStopped */
 800b290:	6a3b      	ldr	r3, [r7, #32]
 800b292:	2201      	movs	r2, #1
 800b294:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
					xSendEventToIPTask( eTCPTimerEvent );
 800b298:	2005      	movs	r0, #5
 800b29a:	f7fe fe4d 	bl	8009f38 <xSendEventToIPTask>
				}
				xReturn = 0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b2a2:	e00e      	b.n	800b2c2 <FreeRTOS_setsockopt+0x33a>

		#endif  /* ipconfigUSE_TCP == 1 */

		default :
			/* No other options are handled. */
			xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800b2a4:	f06f 036c 	mvn.w	r3, #108	; 0x6c
 800b2a8:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800b2aa:	e00a      	b.n	800b2c2 <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b2ac:	bf00      	nop
 800b2ae:	e008      	b.n	800b2c2 <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b2b0:	bf00      	nop
 800b2b2:	e006      	b.n	800b2c2 <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b2b4:	bf00      	nop
 800b2b6:	e004      	b.n	800b2c2 <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b2b8:	bf00      	nop
 800b2ba:	e002      	b.n	800b2c2 <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b2bc:	bf00      	nop
 800b2be:	e000      	b.n	800b2c2 <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b2c0:	bf00      	nop
	}

	return xReturn;
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
} /* Tested */
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3728      	adds	r7, #40	; 0x28
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <prvGetPrivatePortNumber>:

/*-----------------------------------------------------------*/

/* Get a free private ('anonymous') port number */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b086      	sub	sp, #24
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
uint16_t usResult;
BaseType_t xIndex;
const List_t *pxList;

#if ipconfigUSE_TCP == 1
	if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2b06      	cmp	r3, #6
 800b2d8:	d104      	bne.n	800b2e4 <prvGetPrivatePortNumber+0x18>
	{
		xIndex = socketNEXT_TCP_PORT_NUMBER_INDEX;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	617b      	str	r3, [r7, #20]
		pxList = &xBoundTCPSocketsList;
 800b2de:	4b1e      	ldr	r3, [pc, #120]	; (800b358 <prvGetPrivatePortNumber+0x8c>)
 800b2e0:	613b      	str	r3, [r7, #16]
 800b2e2:	e003      	b.n	800b2ec <prvGetPrivatePortNumber+0x20>
	}
	else
#endif
	{
		xIndex = socketNEXT_UDP_PORT_NUMBER_INDEX;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	617b      	str	r3, [r7, #20]
		pxList = &xBoundUDPSocketsList;
 800b2e8:	4b1c      	ldr	r3, [pc, #112]	; (800b35c <prvGetPrivatePortNumber+0x90>)
 800b2ea:	613b      	str	r3, [r7, #16]
	/*_RB_ This needs to be randomised rather than sequential. */
	/* _HT_ Agreed, although many OS's use sequential port numbers, see
	https://www.cymru.com/jtk/misc/ephemeralports.html  */
	for ( ;; )
	{
		++( usNextPortToUse[ xIndex ] );
 800b2ec:	4a1c      	ldr	r2, [pc, #112]	; (800b360 <prvGetPrivatePortNumber+0x94>)
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	b299      	uxth	r1, r3
 800b2f8:	4a19      	ldr	r2, [pc, #100]	; (800b360 <prvGetPrivatePortNumber+0x94>)
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if( usNextPortToUse[ xIndex ] >= socketAUTO_PORT_ALLOCATION_MAX_NUMBER )
 800b300:	4a17      	ldr	r2, [pc, #92]	; (800b360 <prvGetPrivatePortNumber+0x94>)
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b308:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800b30c:	d305      	bcc.n	800b31a <prvGetPrivatePortNumber+0x4e>
		{
			/* Don't go right back to the start of the dynamic/private port
			range numbers as any persistent sockets are likely to have been
			create first so the early port numbers may still be in use. */
			usNextPortToUse[ xIndex ] = socketAUTO_PORT_ALLOCATION_RESET_NUMBER;
 800b30e:	4a14      	ldr	r2, [pc, #80]	; (800b360 <prvGetPrivatePortNumber+0x94>)
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	f44f 4141 	mov.w	r1, #49408	; 0xc100
 800b316:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		usResult = FreeRTOS_htons( usNextPortToUse[ xIndex ] );
 800b31a:	4a11      	ldr	r2, [pc, #68]	; (800b360 <prvGetPrivatePortNumber+0x94>)
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b322:	021b      	lsls	r3, r3, #8
 800b324:	b21a      	sxth	r2, r3
 800b326:	490e      	ldr	r1, [pc, #56]	; (800b360 <prvGetPrivatePortNumber+0x94>)
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b32e:	0a1b      	lsrs	r3, r3, #8
 800b330:	b29b      	uxth	r3, r3
 800b332:	b21b      	sxth	r3, r3
 800b334:	4313      	orrs	r3, r2
 800b336:	b21b      	sxth	r3, r3
 800b338:	81fb      	strh	r3, [r7, #14]

		if( pxListFindListItemWithValue( pxList, ( TickType_t ) usResult ) == NULL )
 800b33a:	89fb      	ldrh	r3, [r7, #14]
 800b33c:	4619      	mov	r1, r3
 800b33e:	6938      	ldr	r0, [r7, #16]
 800b340:	f000 f810 	bl	800b364 <pxListFindListItemWithValue>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d000      	beq.n	800b34c <prvGetPrivatePortNumber+0x80>
		++( usNextPortToUse[ xIndex ] );
 800b34a:	e7cf      	b.n	800b2ec <prvGetPrivatePortNumber+0x20>
		{
			break;
 800b34c:	bf00      	nop
		}
	}
	return usResult;
 800b34e:	89fb      	ldrh	r3, [r7, #14]
} /* Tested */
 800b350:	4618      	mov	r0, r3
 800b352:	3718      	adds	r7, #24
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	2000590c 	.word	0x2000590c
 800b35c:	20005920 	.word	0x20005920
 800b360:	20004808 	.word	0x20004808

0800b364 <pxListFindListItemWithValue>:
/*-----------------------------------------------------------*/

/* pxListFindListItemWithValue: find a list item in a bound socket list
'xWantedItemValue' refers to a port number */
static const ListItem_t * pxListFindListItemWithValue( const List_t *pxList, TickType_t xWantedItemValue )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
const ListItem_t * pxResult = NULL;
 800b36e:	2300      	movs	r3, #0
 800b370:	617b      	str	r3, [r7, #20]

	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800b372:	f7ff f8dd 	bl	800a530 <xIPIsNetworkTaskReady>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d018      	beq.n	800b3ae <pxListFindListItemWithValue+0x4a>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d015      	beq.n	800b3ae <pxListFindListItemWithValue+0x4a>
	{
		const ListItem_t *pxIterator;
		const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( pxList );
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	3308      	adds	r3, #8
 800b386:	60fb      	str	r3, [r7, #12]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	613b      	str	r3, [r7, #16]
 800b38e:	e00a      	b.n	800b3a6 <pxListFindListItemWithValue+0x42>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	429a      	cmp	r2, r3
 800b398:	d102      	bne.n	800b3a0 <pxListFindListItemWithValue+0x3c>
			{
				pxResult = pxIterator;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	617b      	str	r3, [r7, #20]
				break;
 800b39e:	e006      	b.n	800b3ae <pxListFindListItemWithValue+0x4a>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	613b      	str	r3, [r7, #16]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800b3a6:	693a      	ldr	r2, [r7, #16]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d1f0      	bne.n	800b390 <pxListFindListItemWithValue+0x2c>
			}
		}
	}

	return pxResult;
 800b3ae:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3718      	adds	r7, #24
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <pxUDPSocketLookup>:

/*-----------------------------------------------------------*/

FreeRTOS_Socket_t *pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
const ListItem_t *pxListItem;
FreeRTOS_Socket_t *pxSocket = NULL;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	617b      	str	r3, [r7, #20]

	/* Looking up a socket is quite simple, find a match with the local port.

	See if there is a list item associated with the port number on the
	list of bound sockets. */
	pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800b3c4:	6879      	ldr	r1, [r7, #4]
 800b3c6:	480e      	ldr	r0, [pc, #56]	; (800b400 <pxUDPSocketLookup+0x48>)
 800b3c8:	f7ff ffcc 	bl	800b364 <pxListFindListItemWithValue>
 800b3cc:	6138      	str	r0, [r7, #16]

	if( pxListItem != NULL )
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00f      	beq.n	800b3f4 <pxUDPSocketLookup+0x3c>
	{
		/* The owner of the list item is the socket itself. */
		pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem );
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	617b      	str	r3, [r7, #20]
		configASSERT( pxSocket != NULL );
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d109      	bne.n	800b3f4 <pxUDPSocketLookup+0x3c>
 800b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	60fb      	str	r3, [r7, #12]
 800b3f2:	e7fe      	b.n	800b3f2 <pxUDPSocketLookup+0x3a>
	}
	return pxSocket;
 800b3f4:	697b      	ldr	r3, [r7, #20]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	20005920 	.word	0x20005920

0800b404 <vSocketWakeUpUser>:
}

/*-----------------------------------------------------------*/

void vSocketWakeUpUser( FreeRTOS_Socket_t *pxSocket )
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
	}
	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		if( pxSocket->pxSocketSet != NULL )
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b410:	2b00      	cmp	r3, #0
 800b412:	d015      	beq.n	800b440 <vSocketWakeUpUser+0x3c>
		{
			EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & eSELECT_ALL;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	0a1b      	lsrs	r3, r3, #8
 800b41a:	f003 030f 	and.w	r3, r3, #15
 800b41e:	60fb      	str	r3, [r7, #12]
			if( xSelectBits != 0ul )
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00c      	beq.n	800b440 <vSocketWakeUpUser+0x3c>
			{
				pxSocket->xSocketBits |= xSelectBits;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	431a      	orrs	r2, r3
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	631a      	str	r2, [r3, #48]	; 0x30
				xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68f9      	ldr	r1, [r7, #12]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fa fae8 	bl	8005a10 <xEventGroupSetBits>
			}
		}

		pxSocket->xEventBits &= eSOCKET_ALL;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	601a      	str	r2, [r3, #0]
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0u ) )
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00b      	beq.n	800b46c <vSocketWakeUpUser+0x68>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d007      	beq.n	800b46c <vSocketWakeUpUser+0x68>
	{
		xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4619      	mov	r1, r3
 800b466:	4610      	mov	r0, r2
 800b468:	f7fa fad2 	bl	8005a10 <xEventGroupSetBits>
	}

	pxSocket->xEventBits = 0ul;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	601a      	str	r2, [r3, #0]
}
 800b472:	bf00      	nop
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
	...

0800b47c <xTCPTimerCheck>:
	 * - Send new data
	 * - Send a keep-alive packet
	 * - Check for timeout (in non-connected states only)
	 */
	TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
	{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b088      	sub	sp, #32
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket;
	TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800b484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b488:	61fb      	str	r3, [r7, #28]
	TickType_t xNow = xTaskGetTickCount();
 800b48a:	f7fb fffb 	bl	8007484 <xTaskGetTickCount>
 800b48e:	6138      	str	r0, [r7, #16]
	static TickType_t xLastTime = 0u;
	TickType_t xDelta = xNow - xLastTime;
 800b490:	4b30      	ldr	r3, [pc, #192]	; (800b554 <xTCPTimerCheck+0xd8>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	1ad3      	subs	r3, r2, r3
 800b498:	61bb      	str	r3, [r7, #24]
	ListItem_t* pxEnd = ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
 800b49a:	4b2f      	ldr	r3, [pc, #188]	; (800b558 <xTCPTimerCheck+0xdc>)
 800b49c:	60fb      	str	r3, [r7, #12]
	ListItem_t *pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800b49e:	4b2f      	ldr	r3, [pc, #188]	; (800b55c <xTCPTimerCheck+0xe0>)
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	617b      	str	r3, [r7, #20]

		xLastTime = xNow;
 800b4a4:	4a2b      	ldr	r2, [pc, #172]	; (800b554 <xTCPTimerCheck+0xd8>)
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	6013      	str	r3, [r2, #0]

		if( xDelta == 0u )
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d148      	bne.n	800b542 <xTCPTimerCheck+0xc6>
		{
			xDelta = 1u;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	61bb      	str	r3, [r7, #24]
		}

		while( pxIterator != pxEnd )
 800b4b4:	e045      	b.n	800b542 <xTCPTimerCheck+0xc6>
		{
			pxSocket = ( FreeRTOS_Socket_t * )listGET_LIST_ITEM_OWNER( pxIterator );
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	60bb      	str	r3, [r7, #8]
			pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	617b      	str	r3, [r7, #20]

			/* Sockets with 'tmout == 0' do not need any regular attention. */
			if( pxSocket->u.xTCP.usTimeout == 0u )
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d100      	bne.n	800b4ce <xTCPTimerCheck+0x52>
			{
				continue;
 800b4cc:	e039      	b.n	800b542 <xTCPTimerCheck+0xc6>
			}

			if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d90a      	bls.n	800b4f2 <xTCPTimerCheck+0x76>
			{
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	1ad3      	subs	r3, r2, r3
 800b4e8:	b29a      	uxth	r2, r3
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b4f0:	e00a      	b.n	800b508 <xTCPTimerCheck+0x8c>
			}
			else
			{
				pxSocket->u.xTCP.usTimeout = 0u;
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

				/* Within this function, the socket might want to send a delayed
				ack or send out data or whatever it needs to do. */
				if( xTCPSocketCheck( pxSocket ) < 0 )
 800b4fa:	68b8      	ldr	r0, [r7, #8]
 800b4fc:	f000 fdfc 	bl	800c0f8 <xTCPSocketCheck>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	da00      	bge.n	800b508 <xTCPTimerCheck+0x8c>
				{
					/* Continue because the socket was deleted. */
					continue;
 800b506:	e01c      	b.n	800b542 <xTCPTimerCheck+0xc6>
			}

			/* In xEventBits the driver may indicate that the socket has
			important events for the user.  These are only done just before the
			IP-task goes to sleep. */
			if( pxSocket->xEventBits != 0u )
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d008      	beq.n	800b522 <xTCPTimerCheck+0xa6>
			{
				if( xWillSleep != pdFALSE )
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d003      	beq.n	800b51e <xTCPTimerCheck+0xa2>
				{
					/* The IP-task is about to go to sleep, so messages can be
					sent to the socket owners. */
					vSocketWakeUpUser( pxSocket );
 800b516:	68b8      	ldr	r0, [r7, #8]
 800b518:	f7ff ff74 	bl	800b404 <vSocketWakeUpUser>
 800b51c:	e001      	b.n	800b522 <xTCPTimerCheck+0xa6>
				}
				else
				{
					/* Or else make sure this will be called again to wake-up
					the sockets' owner. */
					xShortest = ( TickType_t ) 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	61fb      	str	r3, [r7, #28]
				}
			}

			if( ( pxSocket->u.xTCP.usTimeout != 0u ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00a      	beq.n	800b542 <xTCPTimerCheck+0xc6>
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b532:	461a      	mov	r2, r3
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	429a      	cmp	r2, r3
 800b538:	d203      	bcs.n	800b542 <xTCPTimerCheck+0xc6>
			{
				xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b540:	61fb      	str	r3, [r7, #28]
		while( pxIterator != pxEnd )
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	429a      	cmp	r2, r3
 800b548:	d1b5      	bne.n	800b4b6 <xTCPTimerCheck+0x3a>
			}
		}

		return xShortest;
 800b54a:	69fb      	ldr	r3, [r7, #28]
	}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3720      	adds	r7, #32
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	2000480c 	.word	0x2000480c
 800b558:	20005914 	.word	0x20005914
 800b55c:	2000590c 	.word	0x2000590c

0800b560 <pxTCPSocketLookup>:
	 * looking up a socket is a little more complex:
	 * Both a local port, and a remote port and IP address are being used
	 * For a socket in listening mode, the remote port and IP address are both 0
	 */
	FreeRTOS_Socket_t *pxTCPSocketLookup( uint32_t ulLocalIP, UBaseType_t uxLocalPort, uint32_t ulRemoteIP, UBaseType_t uxRemotePort )
	{
 800b560:	b480      	push	{r7}
 800b562:	b08b      	sub	sp, #44	; 0x2c
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
 800b56c:	603b      	str	r3, [r7, #0]
	ListItem_t *pxIterator;
	FreeRTOS_Socket_t *pxResult = NULL, *pxListenSocket = NULL;
 800b56e:	2300      	movs	r3, #0
 800b570:	623b      	str	r3, [r7, #32]
 800b572:	2300      	movs	r3, #0
 800b574:	61fb      	str	r3, [r7, #28]
	MiniListItem_t *pxEnd = ( MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800b576:	4b1c      	ldr	r3, [pc, #112]	; (800b5e8 <pxTCPSocketLookup+0x88>)
 800b578:	61bb      	str	r3, [r7, #24]

		/* Parameter not yet supported. */
		( void ) ulLocalIP;

		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	627b      	str	r3, [r7, #36]	; 0x24
 800b580:	e021      	b.n	800b5c6 <pxTCPSocketLookup+0x66>
			 pxIterator != ( ListItem_t * ) pxEnd;
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	617b      	str	r3, [r7, #20]

			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	b29b      	uxth	r3, r3
 800b590:	429a      	cmp	r2, r3
 800b592:	d115      	bne.n	800b5c0 <pxTCPSocketLookup+0x60>
			{
				if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d102      	bne.n	800b5a4 <pxTCPSocketLookup+0x44>
				{
					/* If this is a socket listening to uxLocalPort, remember it
					in case there is no perfect match. */
					pxListenSocket = pxSocket;
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	61fb      	str	r3, [r7, #28]
 800b5a2:	e00d      	b.n	800b5c0 <pxTCPSocketLookup+0x60>
				}
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d107      	bne.n	800b5c0 <pxTCPSocketLookup+0x60>
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d102      	bne.n	800b5c0 <pxTCPSocketLookup+0x60>
				{
					/* For sockets not in listening mode, find a match with
					xLocalPort, ulRemoteIP AND xRemotePort. */
					pxResult = pxSocket;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	623b      	str	r3, [r7, #32]
					break;
 800b5be:	e006      	b.n	800b5ce <pxTCPSocketLookup+0x6e>
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	627b      	str	r3, [r7, #36]	; 0x24
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800b5c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d1d9      	bne.n	800b582 <pxTCPSocketLookup+0x22>
				}
			}
		}
		if( pxResult == NULL )
 800b5ce:	6a3b      	ldr	r3, [r7, #32]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <pxTCPSocketLookup+0x78>
		{
			/* An exact match was not found, maybe a listening socket was
			found. */
			pxResult = pxListenSocket;
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	623b      	str	r3, [r7, #32]
		}

		return pxResult;
 800b5d8:	6a3b      	ldr	r3, [r7, #32]
	}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	372c      	adds	r7, #44	; 0x2c
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop
 800b5e8:	20005914 	.word	0x20005914

0800b5ec <prvTCPCreateStream>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP == 1 )

	static StreamBuffer_t *prvTCPCreateStream ( FreeRTOS_Socket_t *pxSocket, BaseType_t xIsInputStream )
	{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
	size_t uxLength;
	size_t uxSize;

		/* Now that a stream is created, the maximum size is fixed before
		creation, it could still be changed with setsockopt(). */
		if( xIsInputStream != pdFALSE )
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d01c      	beq.n	800b636 <prvTCPCreateStream+0x4a>
		{
			uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b600:	617b      	str	r3, [r7, #20]

			if( pxSocket->u.xTCP.uxLittleSpace == 0ul )
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b606:	2b00      	cmp	r3, #0
 800b608:	d107      	bne.n	800b61a <prvTCPCreateStream+0x2e>
			{
				pxSocket->u.xTCP.uxLittleSpace  = ( 1ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why divide by 5?  Can this be changed to a #define? */
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b60e:	4a25      	ldr	r2, [pc, #148]	; (800b6a4 <prvTCPCreateStream+0xb8>)
 800b610:	fba2 2303 	umull	r2, r3, r2, r3
 800b614:	089a      	lsrs	r2, r3, #2
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	665a      	str	r2, [r3, #100]	; 0x64
			}

			if( pxSocket->u.xTCP.uxEnoughSpace == 0ul )
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10c      	bne.n	800b63c <prvTCPCreateStream+0x50>
			{
				pxSocket->u.xTCP.uxEnoughSpace = ( 4ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why multiply by 4?  Maybe sock80_PERCENT?*/
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	4a1e      	ldr	r2, [pc, #120]	; (800b6a4 <prvTCPCreateStream+0xb8>)
 800b62a:	fba2 2303 	umull	r2, r3, r2, r3
 800b62e:	089a      	lsrs	r2, r3, #2
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	669a      	str	r2, [r3, #104]	; 0x68
 800b634:	e002      	b.n	800b63c <prvTCPCreateStream+0x50>
			}
		}
		else
		{
			uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b63a:	617b      	str	r3, [r7, #20]
		}

		/* Add an extra 4 (or 8) bytes. */
		uxLength += sizeof( size_t );
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	3304      	adds	r3, #4
 800b640:	617b      	str	r3, [r7, #20]

		/* And make the length a multiple of sizeof( size_t ). */
		uxLength &= ~( sizeof( size_t ) - 1u );
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	f023 0303 	bic.w	r3, r3, #3
 800b648:	617b      	str	r3, [r7, #20]

		uxSize = sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) + uxLength;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	3314      	adds	r3, #20
 800b64e:	613b      	str	r3, [r7, #16]

		pxBuffer = ( StreamBuffer_t * )pvPortMallocLarge( uxSize );
 800b650:	6938      	ldr	r0, [r7, #16]
 800b652:	f7fa fd6f 	bl	8006134 <pvPortMalloc>
 800b656:	60f8      	str	r0, [r7, #12]

		if( pxBuffer == NULL )
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10b      	bne.n	800b676 <prvTCPCreateStream+0x8a>
		{
			FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
			pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800b664:	f043 0308 	orr.w	r3, r3, #8
 800b668:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800b66c:	2108      	movs	r1, #8
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f001 fa5f 	bl	800cb32 <vTCPStateChange>
 800b674:	e011      	b.n	800b69a <prvTCPCreateStream+0xae>
		}
		else
		{
			/* Clear the markers of the stream */
			memset( pxBuffer, '\0', sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800b676:	2214      	movs	r2, #20
 800b678:	2100      	movs	r1, #0
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f004 ff74 	bl	8010568 <memset>
			pxBuffer->LENGTH = ( size_t ) uxLength ;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	611a      	str	r2, [r3, #16]
			if( xTCPWindowLoggingLevel != 0 )
			{
				FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %lu bytes (total %lu)\n", xIsInputStream ? 'R' : 'T', uxLength, uxSize ) );
			}

			if( xIsInputStream != 0 )
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d003      	beq.n	800b694 <prvTCPCreateStream+0xa8>
			{
				pxSocket->u.xTCP.rxStream = pxBuffer;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	675a      	str	r2, [r3, #116]	; 0x74
 800b692:	e002      	b.n	800b69a <prvTCPCreateStream+0xae>
			}
			else
			{
				pxSocket->u.xTCP.txStream = pxBuffer;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	679a      	str	r2, [r3, #120]	; 0x78
			}
		}

		return pxBuffer;
 800b69a:	68fb      	ldr	r3, [r7, #12]
	}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3718      	adds	r7, #24
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	cccccccd 	.word	0xcccccccd

0800b6a8 <lTCPAddRxdata>:
	/*
	 * Add data to the RxStream.  When uxOffset > 0, data has come in out-of-order
	 * and will be put in front of the head so it can not be popped by the user.
	 */
	int32_t lTCPAddRxdata( FreeRTOS_Socket_t *pxSocket, size_t uxOffset, const uint8_t *pcData, uint32_t ulByteCount )
	{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b088      	sub	sp, #32
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
 800b6b4:	603b      	str	r3, [r7, #0]
	StreamBuffer_t *pxStream = pxSocket->u.xTCP.rxStream;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ba:	61fb      	str	r3, [r7, #28]
		/* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
		if( pucData != NULL ) copy data the the buffer
		if( pucData == NULL ) no copying, just advance rxHead
		if( uxOffset != 0 ) Just store data which has come out-of-order
		if( uxOffset == 0 ) Also advance rxHead */
		if( pxStream == NULL )
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10a      	bne.n	800b6d8 <lTCPAddRxdata+0x30>
		{
			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800b6c2:	2101      	movs	r1, #1
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f7ff ff91 	bl	800b5ec <prvTCPCreateStream>
 800b6ca:	61f8      	str	r0, [r7, #28]
			if( pxStream == NULL )
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d102      	bne.n	800b6d8 <lTCPAddRxdata+0x30>
			{
				return -1;
 800b6d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b6d6:	e045      	b.n	800b764 <lTCPAddRxdata+0xbc>
				pcData = NULL;
			}
		}
		#endif /* ipconfigUSE_CALLBACKS */

		xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	68b9      	ldr	r1, [r7, #8]
 800b6de:	69f8      	ldr	r0, [r7, #28]
 800b6e0:	f000 fa97 	bl	800bc12 <uxStreamBufferAdd>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	61bb      	str	r3, [r7, #24]
					pxStream->uxFront ) );
			}
		}
		#endif /* ipconfigHAS_DEBUG_PRINTF */

		if( uxOffset == 0u )
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d139      	bne.n	800b762 <lTCPAddRxdata+0xba>
					}
				} else
			#endif /* ipconfigUSE_CALLBACKS */
			{
				/* See if running out of space. */
				if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b6f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d11f      	bne.n	800b73e <lTCPAddRxdata+0x96>
				{
					size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b702:	4618      	mov	r0, r3
 800b704:	f7fe ff96 	bl	800a634 <uxStreamBufferFrontSpace>
 800b708:	6178      	str	r0, [r7, #20]
					if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace  )
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	429a      	cmp	r2, r3
 800b712:	d314      	bcc.n	800b73e <lTCPAddRxdata+0x96>
					{
						pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b71a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b71e:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
						pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800b728:	f043 0301 	orr.w	r3, r3, #1
 800b72c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

						/* bLowWater was reached, send the changed window size. */
						pxSocket->u.xTCP.usTimeout = 1u;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2201      	movs	r2, #1
 800b734:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
						xSendEventToIPTask( eTCPTimerEvent );
 800b738:	2005      	movs	r0, #5
 800b73a:	f7fe fbfd 	bl	8009f38 <xSendEventToIPTask>
					}
				}

				/* New incoming data is available, wake up the user.   User's
				semaphores will be set just before the IP-task goes asleep. */
				pxSocket->xEventBits |= eSOCKET_RECEIVE;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f043 0201 	orr.w	r2, r3, #1
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	601a      	str	r2, [r3, #0]

				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
				{
					if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74e:	f003 0301 	and.w	r3, r3, #1
 800b752:	2b00      	cmp	r3, #0
 800b754:	d005      	beq.n	800b762 <lTCPAddRxdata+0xba>
					{
						pxSocket->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	601a      	str	r2, [r3, #0]
				}
				#endif
			}
		}

		return xResult;
 800b762:	69bb      	ldr	r3, [r7, #24]
	}
 800b764:	4618      	mov	r0, r3
 800b766:	3720      	adds	r7, #32
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <FreeRTOS_tx_space>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP ==1 )

	BaseType_t FreeRTOS_tx_space( Socket_t xSocket )
	{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b77e:	2b06      	cmp	r3, #6
 800b780:	d003      	beq.n	800b78a <FreeRTOS_tx_space+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b782:	f06f 0315 	mvn.w	r3, #21
 800b786:	60fb      	str	r3, [r7, #12]
 800b788:	e00e      	b.n	800b7a8 <FreeRTOS_tx_space+0x3c>
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d007      	beq.n	800b7a2 <FreeRTOS_tx_space+0x36>
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSpace ( pxSocket->u.xTCP.txStream );
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b796:	4618      	mov	r0, r3
 800b798:	f7fe ff38 	bl	800a60c <uxStreamBufferGetSpace>
 800b79c:	4603      	mov	r3, r0
 800b79e:	60fb      	str	r3, [r7, #12]
 800b7a0:	e002      	b.n	800b7a8 <FreeRTOS_tx_space+0x3c>
			}
			else
			{
				xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7a6:	60fb      	str	r3, [r7, #12]
			}
		}

		return xReturn;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
	}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <FreeRTOS_tx_size>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP == 1 )

	BaseType_t FreeRTOS_tx_size( Socket_t xSocket )
	{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b084      	sub	sp, #16
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b7c4:	2b06      	cmp	r3, #6
 800b7c6:	d003      	beq.n	800b7d0 <FreeRTOS_tx_size+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b7c8:	f06f 0315 	mvn.w	r3, #21
 800b7cc:	60fb      	str	r3, [r7, #12]
 800b7ce:	e00d      	b.n	800b7ec <FreeRTOS_tx_size+0x3a>
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d007      	beq.n	800b7e8 <FreeRTOS_tx_size+0x36>
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSize ( pxSocket->u.xTCP.txStream );
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fe ff3d 	bl	800a65c <uxStreamBufferGetSize>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	60fb      	str	r3, [r7, #12]
 800b7e6:	e001      	b.n	800b7ec <FreeRTOS_tx_size+0x3a>
			}
			else
			{
				xReturn = 0;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	60fb      	str	r3, [r7, #12]
			}
		}

		return xReturn;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
	}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <FreeRTOS_rx_size>:

	/*
	 * Returns the number of bytes which can be read.
	 */
	BaseType_t FreeRTOS_rx_size( Socket_t xSocket )
	{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b084      	sub	sp, #16
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b808:	2b06      	cmp	r3, #6
 800b80a:	d003      	beq.n	800b814 <FreeRTOS_rx_size+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b80c:	f06f 0315 	mvn.w	r3, #21
 800b810:	60fb      	str	r3, [r7, #12]
 800b812:	e00d      	b.n	800b830 <FreeRTOS_rx_size+0x3a>
		}
		else if( pxSocket->u.xTCP.rxStream != NULL )
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d007      	beq.n	800b82c <FreeRTOS_rx_size+0x36>
		{
			xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b820:	4618      	mov	r0, r3
 800b822:	f7fe ff1b 	bl	800a65c <uxStreamBufferGetSize>
 800b826:	4603      	mov	r3, r0
 800b828:	60fb      	str	r3, [r7, #12]
 800b82a:	e001      	b.n	800b830 <FreeRTOS_rx_size+0x3a>
		}
		else
		{
			xReturn = 0;
 800b82c:	2300      	movs	r3, #0
 800b82e:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800b830:	68fb      	ldr	r3, [r7, #12]
	}
 800b832:	4618      	mov	r0, r3
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
	...

0800b83c <vSocketSelect>:
/*-----------------------------------------------------------*/

#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )

	void vSocketSelect( SocketSelect_t *pxSocketSet )
	{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b08c      	sub	sp, #48	; 0x30
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
	BaseType_t xRound;
	EventBits_t xSocketBits, xBitsToClear;
	#if ipconfigUSE_TCP == 1
		BaseType_t xLastRound = 1;
 800b844:	2301      	movs	r3, #1
 800b846:	613b      	str	r3, [r7, #16]
	#else
		BaseType_t xLastRound = 0;
	#endif

		/* These flags will be switched on after checking the socket status. */
		EventBits_t xGroupBits = 0;
 800b848:	2300      	movs	r3, #0
 800b84a:	627b      	str	r3, [r7, #36]	; 0x24
		pxSocketSet->pxSocket = NULL;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	609a      	str	r2, [r3, #8]

		for( xRound = 0; xRound <= xLastRound; xRound++ )
 800b852:	2300      	movs	r3, #0
 800b854:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b856:	e0cc      	b.n	800b9f2 <vSocketSelect+0x1b6>
		{
			const ListItem_t *pxIterator;
			const MiniListItem_t *pxEnd;
			if( xRound == 0 )
 800b858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d102      	bne.n	800b864 <vSocketSelect+0x28>
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundUDPSocketsList );
 800b85e:	4b7b      	ldr	r3, [pc, #492]	; (800ba4c <vSocketSelect+0x210>)
 800b860:	61fb      	str	r3, [r7, #28]
 800b862:	e001      	b.n	800b868 <vSocketSelect+0x2c>
			}
		#if ipconfigUSE_TCP == 1
			else
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800b864:	4b7a      	ldr	r3, [pc, #488]	; (800ba50 <vSocketSelect+0x214>)
 800b866:	61fb      	str	r3, [r7, #28]
			}
		#endif /* ipconfigUSE_TCP == 1 */
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	623b      	str	r3, [r7, #32]
 800b86e:	e0b8      	b.n	800b9e2 <vSocketSelect+0x1a6>
				 pxIterator != ( const ListItem_t * ) pxEnd;
				 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
			{
				FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800b870:	6a3b      	ldr	r3, [r7, #32]
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	60fb      	str	r3, [r7, #12]
				if( pxSocket->pxSocketSet != pxSocketSet )
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	f040 80ac 	bne.w	800b9da <vSocketSelect+0x19e>
				{
					/* Socket does not belong to this select group. */
					continue;
				}
				xSocketBits = 0;
 800b882:	2300      	movs	r3, #0
 800b884:	62bb      	str	r3, [r7, #40]	; 0x28

				#if( ipconfigUSE_TCP == 1 )
					if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP )
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b88c:	2b06      	cmp	r3, #6
 800b88e:	f040 808e 	bne.w	800b9ae <vSocketSelect+0x172>
					{
						/* Check if the socket has already been accepted by the
						owner.  If not, it is useless to return it from a
						select(). */
						BaseType_t bAccepted = pdFALSE;
 800b892:	2300      	movs	r3, #0
 800b894:	61bb      	str	r3, [r7, #24]

						if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b89c:	f003 0304 	and.w	r3, r3, #4
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d109      	bne.n	800b8ba <vSocketSelect+0x7e>
						{
							if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b8ac:	f003 0302 	and.w	r3, r3, #2
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d101      	bne.n	800b8ba <vSocketSelect+0x7e>
							{
								bAccepted = pdTRUE;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	61bb      	str	r3, [r7, #24]
							}
						}

						/* Is the set owner interested in READ events? */
						if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8be:	f003 0301 	and.w	r3, r3, #1
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d023      	beq.n	800b90e <vSocketSelect+0xd2>
						{
							if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d111      	bne.n	800b8f4 <vSocketSelect+0xb8>
							{
								if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != 0 ) )
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d01a      	beq.n	800b90e <vSocketSelect+0xd2>
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b8e0:	f003 0302 	and.w	r3, r3, #2
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d011      	beq.n	800b90e <vSocketSelect+0xd2>
								{
									xSocketBits |= eSELECT_READ;
 800b8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ec:	f043 0301 	orr.w	r3, r3, #1
 800b8f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8f2:	e00c      	b.n	800b90e <vSocketSelect+0xd2>
								}
							}
							else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d009      	beq.n	800b90e <vSocketSelect+0xd2>
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f7ff ff7b 	bl	800b7f6 <FreeRTOS_rx_size>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	dd03      	ble.n	800b90e <vSocketSelect+0xd2>
							{
								xSocketBits |= eSELECT_READ;
 800b906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b908:	f043 0301 	orr.w	r3, r3, #1
 800b90c:	62bb      	str	r3, [r7, #40]	; 0x28
							}
						}
						/* Is the set owner interested in EXCEPTION events? */
						if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b912:	f003 0304 	and.w	r3, r3, #4
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00d      	beq.n	800b936 <vSocketSelect+0xfa>
						{
							if( ( pxSocket->u.xTCP.ucTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == eCLOSED ) )
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b920:	2b08      	cmp	r3, #8
 800b922:	d004      	beq.n	800b92e <vSocketSelect+0xf2>
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d103      	bne.n	800b936 <vSocketSelect+0xfa>
							{
								xSocketBits |= eSELECT_EXCEPT;
 800b92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b930:	f043 0304 	orr.w	r3, r3, #4
 800b934:	62bb      	str	r3, [r7, #40]	; 0x28
							}
						}

						/* Is the set owner interested in WRITE events? */
						if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b93a:	f003 0302 	and.w	r3, r3, #2
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d043      	beq.n	800b9ca <vSocketSelect+0x18e>
						{
							BaseType_t bMatch = pdFALSE;
 800b942:	2300      	movs	r3, #0
 800b944:	617b      	str	r3, [r7, #20]

							if( bAccepted != 0 )
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d007      	beq.n	800b95c <vSocketSelect+0x120>
							{
								if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f7ff ff0d 	bl	800b76c <FreeRTOS_tx_space>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	dd01      	ble.n	800b95c <vSocketSelect+0x120>
								{
									bMatch = pdTRUE;
 800b958:	2301      	movs	r3, #1
 800b95a:	617b      	str	r3, [r7, #20]
								}
							}

							if( bMatch == pdFALSE )
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d11d      	bne.n	800b99e <vSocketSelect+0x162>
							{
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b968:	f003 0308 	and.w	r3, r3, #8
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d015      	beq.n	800b99e <vSocketSelect+0x162>
									( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800b978:	2b04      	cmp	r3, #4
 800b97a:	d910      	bls.n	800b99e <vSocketSelect+0x162>
									( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b982:	f003 0310 	and.w	r3, r3, #16
 800b986:	b2db      	uxtb	r3, r3
									( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d108      	bne.n	800b99e <vSocketSelect+0x162>
								{
									pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800b992:	f043 0310 	orr.w	r3, r3, #16
 800b996:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
									bMatch = pdTRUE;
 800b99a:	2301      	movs	r3, #1
 800b99c:	617b      	str	r3, [r7, #20]
								}
							}

							if( bMatch != pdFALSE )
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d012      	beq.n	800b9ca <vSocketSelect+0x18e>
							{
								xSocketBits |= eSELECT_WRITE;
 800b9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a6:	f043 0302 	orr.w	r3, r3, #2
 800b9aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9ac:	e00d      	b.n	800b9ca <vSocketSelect+0x18e>
					}
					else
				#endif /* ipconfigUSE_TCP == 1 */
				{
					/* Select events for UDP are simpler. */
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d007      	beq.n	800b9ca <vSocketSelect+0x18e>
						( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d003      	beq.n	800b9ca <vSocketSelect+0x18e>
					{
						xSocketBits |= eSELECT_READ;
 800b9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c4:	f043 0301 	orr.w	r3, r3, #1
 800b9c8:	62bb      	str	r3, [r7, #40]	; 0x28
					/* The WRITE and EXCEPT bits are not used for UDP */
				}	/* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

				/* Each socket keeps its own event flags, which are looked-up
				by FreeRTOS_FD_ISSSET() */
				pxSocket->xSocketBits = xSocketBits;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9ce:	631a      	str	r2, [r3, #48]	; 0x30

				/* The ORed value will be used to set the bits in the event
				group. */
				xGroupBits |= xSocketBits;
 800b9d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	627b      	str	r3, [r7, #36]	; 0x24
 800b9d8:	e000      	b.n	800b9dc <vSocketSelect+0x1a0>
					continue;
 800b9da:	bf00      	nop
				 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800b9dc:	6a3b      	ldr	r3, [r7, #32]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	623b      	str	r3, [r7, #32]
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800b9e2:	6a3a      	ldr	r2, [r7, #32]
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	f47f af42 	bne.w	800b870 <vSocketSelect+0x34>
		for( xRound = 0; xRound <= xLastRound; xRound++ )
 800b9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	f77f af2e 	ble.w	800b858 <vSocketSelect+0x1c>

			}	/* for( pxIterator ... ) */
		}	/* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

		xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2100      	movs	r1, #0
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7f9 ffce 	bl	80059a4 <xEventGroupClearBits>
 800ba08:	60b8      	str	r0, [r7, #8]

		/* Now set the necessary bits. */
		xBitsToClear = ( xBitsToClear & ~xGroupBits ) & eSELECT_ALL;
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0c:	43da      	mvns	r2, r3
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	4013      	ands	r3, r2
 800ba12:	f003 030f 	and.w	r3, r3, #15
 800ba16:	60bb      	str	r3, [r7, #8]
		#if( ipconfigSUPPORT_SIGNALS != 0 )
		{
			/* Maybe the socketset was signalled, but don't
			clear the 'eSELECT_INTR' bit here, as it will be used
			and cleared in FreeRTOS_select(). */
			xBitsToClear &= ( EventBits_t ) ~eSELECT_INTR;
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	f023 0308 	bic.w	r3, r3, #8
 800ba1e:	60bb      	str	r3, [r7, #8]
		}
		#endif /* ipconfigSUPPORT_SIGNALS */

		if( xBitsToClear != 0 )
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d005      	beq.n	800ba32 <vSocketSelect+0x1f6>
		{
			xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68b9      	ldr	r1, [r7, #8]
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7f9 ffb9 	bl	80059a4 <xEventGroupClearBits>
		}

		/* Now include eSELECT_CALL_IP to wakeup the caller. */
		xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | eSELECT_CALL_IP );
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba38:	f043 0310 	orr.w	r3, r3, #16
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	4610      	mov	r0, r2
 800ba40:	f7f9 ffe6 	bl	8005a10 <xEventGroupSetBits>
	}
 800ba44:	bf00      	nop
 800ba46:	3730      	adds	r7, #48	; 0x30
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	20005928 	.word	0x20005928
 800ba50:	20005914 	.word	0x20005914

0800ba54 <FreeRTOS_SignalSocket>:

#if( ipconfigSUPPORT_SIGNALS != 0 )

	/* Send a signal to the task which reads from this socket. */
	BaseType_t FreeRTOS_SignalSocket( Socket_t xSocket )
	{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket == NULL )
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d103      	bne.n	800ba6e <FreeRTOS_SignalSocket+0x1a>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ba66:	f06f 0315 	mvn.w	r3, #21
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	e022      	b.n	800bab4 <FreeRTOS_SignalSocket+0x60>
		}
		else
	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
		if( ( pxSocket->pxSocketSet != NULL ) && ( pxSocket->pxSocketSet->xSelectGroup != NULL ) )
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00e      	beq.n	800ba94 <FreeRTOS_SignalSocket+0x40>
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d009      	beq.n	800ba94 <FreeRTOS_SignalSocket+0x40>
		{
			xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_INTR );
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2108      	movs	r1, #8
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7f9 ffc1 	bl	8005a10 <xEventGroupSetBits>
			xReturn = 0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	60fb      	str	r3, [r7, #12]
 800ba92:	e00f      	b.n	800bab4 <FreeRTOS_SignalSocket+0x60>
		}
		else
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */
		if( pxSocket->xEventGroup != NULL )
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d008      	beq.n	800baae <FreeRTOS_SignalSocket+0x5a>
		{
			xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_INTR );
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	2140      	movs	r1, #64	; 0x40
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7f9 ffb4 	bl	8005a10 <xEventGroupSetBits>
			xReturn = 0;
 800baa8:	2300      	movs	r3, #0
 800baaa:	60fb      	str	r3, [r7, #12]
 800baac:	e002      	b.n	800bab4 <FreeRTOS_SignalSocket+0x60>
		}
		else
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800baae:	f06f 0315 	mvn.w	r3, #21
 800bab2:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800bab4:	68fb      	ldr	r3, [r7, #12]
	}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	6039      	str	r1, [r7, #0]
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	4293      	cmp	r3, r2
 800bace:	bf28      	it	cs
 800bad0:	4613      	movcs	r3, r2
 800bad2:	4618      	mov	r0, r3
 800bad4:	370c      	adds	r7, #12
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <uxStreamBufferSpace>:
{
 800bade:	b480      	push	{r7}
 800bae0:	b087      	sub	sp, #28
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	60f8      	str	r0, [r7, #12]
 800bae6:	60b9      	str	r1, [r7, #8]
 800bae8:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	691a      	ldr	r2, [r3, #16]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	441a      	add	r2, r3
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	1ad3      	subs	r3, r2, r3
 800baf6:	3b01      	subs	r3, #1
 800baf8:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	691a      	ldr	r2, [r3, #16]
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d804      	bhi.n	800bb0e <uxStreamBufferSpace+0x30>
		uxCount -= pxBuffer->LENGTH;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	691b      	ldr	r3, [r3, #16]
 800bb08:	697a      	ldr	r2, [r7, #20]
 800bb0a:	1ad3      	subs	r3, r2, r3
 800bb0c:	617b      	str	r3, [r7, #20]
	return uxCount;
 800bb0e:	697b      	ldr	r3, [r7, #20]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	371c      	adds	r7, #28
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <uxStreamBufferDistance>:
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b087      	sub	sp, #28
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	691a      	ldr	r2, [r3, #16]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	441a      	add	r2, r3
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	1ad3      	subs	r3, r2, r3
 800bb34:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	691a      	ldr	r2, [r3, #16]
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d804      	bhi.n	800bb4a <uxStreamBufferDistance+0x2e>
		uxCount -= pxBuffer->LENGTH;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	691b      	ldr	r3, [r3, #16]
 800bb44:	697a      	ldr	r2, [r7, #20]
 800bb46:	1ad3      	subs	r3, r2, r3
 800bb48:	617b      	str	r3, [r7, #20]
	return uxCount;
 800bb4a:	697b      	ldr	r3, [r7, #20]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	371c      	adds	r7, #28
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <uxStreamBufferGetSpace>:
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800bb6c:	68ba      	ldr	r2, [r7, #8]
 800bb6e:	68f9      	ldr	r1, [r7, #12]
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f7ff ffb4 	bl	800bade <uxStreamBufferSpace>
 800bb76:	4603      	mov	r3, r0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <uxStreamBufferGetSize>:
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800bb94:	68fa      	ldr	r2, [r7, #12]
 800bb96:	68b9      	ldr	r1, [r7, #8]
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f7ff ffbf 	bl	800bb1c <uxStreamBufferDistance>
 800bb9e:	4603      	mov	r3, r0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <xStreamBufferLessThenEqual>:
}
/*-----------------------------------------------------------*/

static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t *pxBuffer, const size_t uxLeft, const size_t uxRight );
static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t *pxBuffer, const size_t uxLeft, const size_t uxRight )
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b087      	sub	sp, #28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
size_t uxTail = pxBuffer->uxTail;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	613b      	str	r3, [r7, #16]

	/* Returns true if ( uxLeft < uxRight ) */
	if( ( uxLeft < uxTail ) ^ ( uxRight < uxTail ) )
 800bbba:	68ba      	ldr	r2, [r7, #8]
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	bf34      	ite	cc
 800bbc2:	2301      	movcc	r3, #1
 800bbc4:	2300      	movcs	r3, #0
 800bbc6:	b2da      	uxtb	r2, r3
 800bbc8:	6879      	ldr	r1, [r7, #4]
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	4299      	cmp	r1, r3
 800bbce:	bf34      	ite	cc
 800bbd0:	2301      	movcc	r3, #1
 800bbd2:	2300      	movcs	r3, #0
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	4053      	eors	r3, r2
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d009      	beq.n	800bbf2 <xStreamBufferLessThenEqual+0x4a>
	{
		if( uxRight < uxTail )
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d202      	bcs.n	800bbec <xStreamBufferLessThenEqual+0x44>
		{
			xReturn = pdTRUE;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	617b      	str	r3, [r7, #20]
 800bbea:	e00b      	b.n	800bc04 <xStreamBufferLessThenEqual+0x5c>
		}
		else
		{
			xReturn = pdFALSE;
 800bbec:	2300      	movs	r3, #0
 800bbee:	617b      	str	r3, [r7, #20]
 800bbf0:	e008      	b.n	800bc04 <xStreamBufferLessThenEqual+0x5c>
		}
	}
	else
	{
		if( uxLeft <= uxRight )
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d802      	bhi.n	800bc00 <xStreamBufferLessThenEqual+0x58>
		{
			xReturn = pdTRUE;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	617b      	str	r3, [r7, #20]
 800bbfe:	e001      	b.n	800bc04 <xStreamBufferLessThenEqual+0x5c>
		}
		else
		{
			xReturn = pdFALSE;
 800bc00:	2300      	movs	r3, #0
 800bc02:	617b      	str	r3, [r7, #20]
		}
	}
	return xReturn;
 800bc04:	697b      	ldr	r3, [r7, #20]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	371c      	adds	r7, #28
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr

0800bc12 <uxStreamBufferAdd>:
 * an offset from uxHead while uxHead will not be moved yet.  This possibility
 * will be used when TCP data is received while earlier data is still missing.
 * If 'pucData' equals NULL, the function is called to advance 'uxHead' only.
 */
size_t uxStreamBufferAdd( StreamBuffer_t *pxBuffer, size_t uxOffset, const uint8_t *pucData, size_t uxCount )
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b088      	sub	sp, #32
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	60f8      	str	r0, [r7, #12]
 800bc1a:	60b9      	str	r1, [r7, #8]
 800bc1c:	607a      	str	r2, [r7, #4]
 800bc1e:	603b      	str	r3, [r7, #0]
size_t uxSpace, uxNextHead, uxFirst;

	uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	f7ff ff99 	bl	800bb58 <uxStreamBufferGetSpace>
 800bc26:	61f8      	str	r0, [r7, #28]

	/* If uxOffset > 0, items can be placed in front of uxHead */
	if( uxSpace > uxOffset )
 800bc28:	69fa      	ldr	r2, [r7, #28]
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d904      	bls.n	800bc3a <uxStreamBufferAdd+0x28>
	{
		uxSpace -= uxOffset;
 800bc30:	69fa      	ldr	r2, [r7, #28]
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	61fb      	str	r3, [r7, #28]
 800bc38:	e001      	b.n	800bc3e <uxStreamBufferAdd+0x2c>
	}
	else
	{
		uxSpace = 0u;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	61fb      	str	r3, [r7, #28]
	}

	/* The number of bytes that can be written is the minimum of the number of
	bytes requested and the number available. */
	uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );
 800bc3e:	6839      	ldr	r1, [r7, #0]
 800bc40:	69f8      	ldr	r0, [r7, #28]
 800bc42:	f7ff ff3c 	bl	800babe <FreeRTOS_min_uint32>
 800bc46:	6038      	str	r0, [r7, #0]

	if( uxCount != 0u )
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d05a      	beq.n	800bd04 <uxStreamBufferAdd+0xf2>
	{
		uxNextHead = pxBuffer->uxHead;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	61bb      	str	r3, [r7, #24]

		if( uxOffset != 0u )
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00d      	beq.n	800bc76 <uxStreamBufferAdd+0x64>
		{
			/* ( uxOffset > 0 ) means: write in front if the uxHead marker */
			uxNextHead += uxOffset;
 800bc5a:	69ba      	ldr	r2, [r7, #24]
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	4413      	add	r3, r2
 800bc60:	61bb      	str	r3, [r7, #24]
			if( uxNextHead >= pxBuffer->LENGTH )
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	691a      	ldr	r2, [r3, #16]
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d804      	bhi.n	800bc76 <uxStreamBufferAdd+0x64>
			{
				uxNextHead -= pxBuffer->LENGTH;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	69ba      	ldr	r2, [r7, #24]
 800bc72:	1ad3      	subs	r3, r2, r3
 800bc74:	61bb      	str	r3, [r7, #24]
			}
		}

		if( pucData != NULL )
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d022      	beq.n	800bcc2 <uxStreamBufferAdd+0xb0>
		{
			/* Calculate the number of bytes that can be added in the first
			write - which may be less than the total number of bytes that need
			to be added if the buffer will wrap back to the beginning. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	691a      	ldr	r2, [r3, #16]
 800bc80:	69bb      	ldr	r3, [r7, #24]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	6839      	ldr	r1, [r7, #0]
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7ff ff19 	bl	800babe <FreeRTOS_min_uint32>
 800bc8c:	6178      	str	r0, [r7, #20]

			/* Write as many bytes as can be written in the first write. */
			memcpy( ( void* ) ( pxBuffer->ucArray + uxNextHead ), pucData, uxFirst );
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f103 0214 	add.w	r2, r3, #20
 800bc94:	69bb      	ldr	r3, [r7, #24]
 800bc96:	4413      	add	r3, r2
 800bc98:	697a      	ldr	r2, [r7, #20]
 800bc9a:	6879      	ldr	r1, [r7, #4]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f004 fc3e 	bl	801051e <memcpy>

			/* If the number of bytes written was less than the number that
			could be written in the first write... */
			if( uxCount > uxFirst )
 800bca2:	683a      	ldr	r2, [r7, #0]
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d90b      	bls.n	800bcc2 <uxStreamBufferAdd+0xb0>
			{
				/* ...then write the remaining bytes to the start of the
				buffer. */
				memcpy( ( void * )pxBuffer->ucArray, pucData + uxFirst, uxCount - uxFirst );
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f103 0014 	add.w	r0, r3, #20
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	18d1      	adds	r1, r2, r3
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	1ad3      	subs	r3, r2, r3
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	f004 fc2e 	bl	801051e <memcpy>
			}
		}

		if( uxOffset == 0u )
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d110      	bne.n	800bcea <uxStreamBufferAdd+0xd8>
		{
			/* ( uxOffset == 0 ) means: write at uxHead position */
			uxNextHead += uxCount;
 800bcc8:	69ba      	ldr	r2, [r7, #24]
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	4413      	add	r3, r2
 800bcce:	61bb      	str	r3, [r7, #24]
			if( uxNextHead >= pxBuffer->LENGTH )
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	691a      	ldr	r2, [r3, #16]
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d804      	bhi.n	800bce4 <uxStreamBufferAdd+0xd2>
			{
				uxNextHead -= pxBuffer->LENGTH;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	69ba      	ldr	r2, [r7, #24]
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	61bb      	str	r3, [r7, #24]
			}
			pxBuffer->uxHead = uxNextHead;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	69ba      	ldr	r2, [r7, #24]
 800bce8:	609a      	str	r2, [r3, #8]
		}

		if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	69ba      	ldr	r2, [r7, #24]
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	f7ff ff58 	bl	800bba8 <xStreamBufferLessThenEqual>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d002      	beq.n	800bd04 <uxStreamBufferAdd+0xf2>
		{
			/* Advance the front pointer */
			pxBuffer->uxFront = uxNextHead;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	69ba      	ldr	r2, [r7, #24]
 800bd02:	60da      	str	r2, [r3, #12]
		}
	}

	return uxCount;
 800bd04:	683b      	ldr	r3, [r7, #0]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3720      	adds	r7, #32
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <uxStreamBufferGet>:
 * If 'pucData' equals NULL, the function is called to advance 'lTail' only.
 * if 'xPeek' is pdTRUE, or if 'uxOffset' is non-zero, the 'lTail' pointer will
 * not be advanced.
 */
size_t uxStreamBufferGet( StreamBuffer_t *pxBuffer, size_t uxOffset, uint8_t *pucData, size_t uxMaxCount, BaseType_t xPeek )
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b088      	sub	sp, #32
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	60f8      	str	r0, [r7, #12]
 800bd16:	60b9      	str	r1, [r7, #8]
 800bd18:	607a      	str	r2, [r7, #4]
 800bd1a:	603b      	str	r3, [r7, #0]
size_t uxSize, uxCount, uxFirst, uxNextTail;

	/* How much data is available? */
	uxSize = uxStreamBufferGetSize( pxBuffer );
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f7ff ff2f 	bl	800bb80 <uxStreamBufferGetSize>
 800bd22:	61f8      	str	r0, [r7, #28]

	if( uxSize > uxOffset )
 800bd24:	69fa      	ldr	r2, [r7, #28]
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d904      	bls.n	800bd36 <uxStreamBufferGet+0x28>
	{
		uxSize -= uxOffset;
 800bd2c:	69fa      	ldr	r2, [r7, #28]
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	61fb      	str	r3, [r7, #28]
 800bd34:	e001      	b.n	800bd3a <uxStreamBufferGet+0x2c>
	}
	else
	{
		uxSize = 0u;
 800bd36:	2300      	movs	r3, #0
 800bd38:	61fb      	str	r3, [r7, #28]
	}

	/* Use the minimum of the wanted bytes and the available bytes. */
	uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );
 800bd3a:	6839      	ldr	r1, [r7, #0]
 800bd3c:	69f8      	ldr	r0, [r7, #28]
 800bd3e:	f7ff febe 	bl	800babe <FreeRTOS_min_uint32>
 800bd42:	6178      	str	r0, [r7, #20]

	if( uxCount > 0u )
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d050      	beq.n	800bdec <uxStreamBufferGet+0xde>
	{
		uxNextTail = pxBuffer->uxTail;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	61bb      	str	r3, [r7, #24]

		if( uxOffset != 0u )
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00d      	beq.n	800bd72 <uxStreamBufferGet+0x64>
		{
			uxNextTail += uxOffset;
 800bd56:	69ba      	ldr	r2, [r7, #24]
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	61bb      	str	r3, [r7, #24]
			if( uxNextTail >= pxBuffer->LENGTH )
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	691a      	ldr	r2, [r3, #16]
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d804      	bhi.n	800bd72 <uxStreamBufferGet+0x64>
			{
				uxNextTail -= pxBuffer->LENGTH;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	691b      	ldr	r3, [r3, #16]
 800bd6c:	69ba      	ldr	r2, [r7, #24]
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	61bb      	str	r3, [r7, #24]
			}
		}

		if( pucData != NULL )
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d022      	beq.n	800bdbe <uxStreamBufferGet+0xb0>
		{
			/* Calculate the number of bytes that can be read - which may be
			less than the number wanted if the data wraps around to the start of
			the buffer. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	691a      	ldr	r2, [r3, #16]
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	6979      	ldr	r1, [r7, #20]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7ff fe9b 	bl	800babe <FreeRTOS_min_uint32>
 800bd88:	6138      	str	r0, [r7, #16]

			/* Obtain the number of bytes it is possible to obtain in the first
			read. */
			memcpy( pucData, pxBuffer->ucArray + uxNextTail, uxFirst );
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f103 0214 	add.w	r2, r3, #20
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	4413      	add	r3, r2
 800bd94:	693a      	ldr	r2, [r7, #16]
 800bd96:	4619      	mov	r1, r3
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f004 fbc0 	bl	801051e <memcpy>

			/* If the total number of wanted bytes is greater than the number
			that could be read in the first read... */
			if( uxCount > uxFirst )
 800bd9e:	697a      	ldr	r2, [r7, #20]
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d90b      	bls.n	800bdbe <uxStreamBufferGet+0xb0>
			{
				/*...then read the remaining bytes from the start of the buffer. */
				memcpy( pucData + uxFirst, pxBuffer->ucArray, uxCount - uxFirst );
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	18d0      	adds	r0, r2, r3
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f103 0114 	add.w	r1, r3, #20
 800bdb2:	697a      	ldr	r2, [r7, #20]
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	1ad3      	subs	r3, r2, r3
 800bdb8:	461a      	mov	r2, r3
 800bdba:	f004 fbb0 	bl	801051e <memcpy>
			}
		}

		if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 800bdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d113      	bne.n	800bdec <uxStreamBufferGet+0xde>
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d110      	bne.n	800bdec <uxStreamBufferGet+0xde>
		{
			/* Move the tail pointer to effecively remove the data read from
			the buffer. */
			uxNextTail += uxCount;
 800bdca:	69ba      	ldr	r2, [r7, #24]
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	4413      	add	r3, r2
 800bdd0:	61bb      	str	r3, [r7, #24]

			if( uxNextTail >= pxBuffer->LENGTH )
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	691a      	ldr	r2, [r3, #16]
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d804      	bhi.n	800bde6 <uxStreamBufferGet+0xd8>
			{
				uxNextTail -= pxBuffer->LENGTH;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	691b      	ldr	r3, [r3, #16]
 800bde0:	69ba      	ldr	r2, [r7, #24]
 800bde2:	1ad3      	subs	r3, r2, r3
 800bde4:	61bb      	str	r3, [r7, #24]
			}

			pxBuffer->uxTail = uxNextTail;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	69ba      	ldr	r2, [r7, #24]
 800bdea:	601a      	str	r2, [r3, #0]
		}
	}

	return uxCount;
 800bdec:	697b      	ldr	r3, [r7, #20]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3720      	adds	r7, #32
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <FreeRTOS_max_int32>:
	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
 800bdf6:	b480      	push	{r7}
 800bdf8:	b083      	sub	sp, #12
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	6039      	str	r1, [r7, #0]
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	4293      	cmp	r3, r2
 800be06:	bfb8      	it	lt
 800be08:	4613      	movlt	r3, r2
 800be0a:	4618      	mov	r0, r3
 800be0c:	370c      	adds	r7, #12
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr

0800be16 <FreeRTOS_min_int32>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 800be16:	b480      	push	{r7}
 800be18:	b083      	sub	sp, #12
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
 800be1e:	6039      	str	r1, [r7, #0]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	4293      	cmp	r3, r2
 800be26:	bfa8      	it	ge
 800be28:	4613      	movge	r3, r2
 800be2a:	4618      	mov	r0, r3
 800be2c:	370c      	adds	r7, #12
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800be36:	b480      	push	{r7}
 800be38:	b083      	sub	sp, #12
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
 800be3e:	6039      	str	r1, [r7, #0]
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	4293      	cmp	r3, r2
 800be46:	bf28      	it	cs
 800be48:	4613      	movcs	r3, r2
 800be4a:	4618      	mov	r0, r3
 800be4c:	370c      	adds	r7, #12
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <uxStreamBufferSpace>:
{
 800be56:	b480      	push	{r7}
 800be58:	b087      	sub	sp, #28
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	60f8      	str	r0, [r7, #12]
 800be5e:	60b9      	str	r1, [r7, #8]
 800be60:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	691a      	ldr	r2, [r3, #16]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	441a      	add	r2, r3
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	3b01      	subs	r3, #1
 800be70:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	691a      	ldr	r2, [r3, #16]
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d804      	bhi.n	800be86 <uxStreamBufferSpace+0x30>
		uxCount -= pxBuffer->LENGTH;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	697a      	ldr	r2, [r7, #20]
 800be82:	1ad3      	subs	r3, r2, r3
 800be84:	617b      	str	r3, [r7, #20]
	return uxCount;
 800be86:	697b      	ldr	r3, [r7, #20]
}
 800be88:	4618      	mov	r0, r3
 800be8a:	371c      	adds	r7, #28
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <uxStreamBufferDistance>:
{
 800be94:	b480      	push	{r7}
 800be96:	b087      	sub	sp, #28
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	691a      	ldr	r2, [r3, #16]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	441a      	add	r2, r3
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	1ad3      	subs	r3, r2, r3
 800beac:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	691a      	ldr	r2, [r3, #16]
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d804      	bhi.n	800bec2 <uxStreamBufferDistance+0x2e>
		uxCount -= pxBuffer->LENGTH;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	1ad3      	subs	r3, r2, r3
 800bec0:	617b      	str	r3, [r7, #20]
	return uxCount;
 800bec2:	697b      	ldr	r3, [r7, #20]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	371c      	adds	r7, #28
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <uxStreamBufferGetSpace>:
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	68f9      	ldr	r1, [r7, #12]
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7ff ffb4 	bl	800be56 <uxStreamBufferSpace>
 800beee:	4603      	mov	r3, r0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3710      	adds	r7, #16
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <uxStreamBufferFrontSpace>:
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
size_t uxFront = pxBuffer->uxFront;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800bf0c:	68ba      	ldr	r2, [r7, #8]
 800bf0e:	68f9      	ldr	r1, [r7, #12]
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f7ff ffa0 	bl	800be56 <uxStreamBufferSpace>
 800bf16:	4603      	mov	r3, r0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <uxStreamBufferMidSpace>:
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	689b      	ldr	r3, [r3, #8]
 800bf2c:	60fb      	str	r3, [r7, #12]
size_t uxMid = pxBuffer->uxMid;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	68b9      	ldr	r1, [r7, #8]
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7ff ffab 	bl	800be94 <uxStreamBufferDistance>
 800bf3e:	4603      	mov	r3, r0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3710      	adds	r7, #16
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <vStreamBufferMoveMid>:
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f7ff ffe4 	bl	800bf20 <uxStreamBufferMidSpace>
 800bf58:	60f8      	str	r0, [r7, #12]
	if( uxCount > uxSize )
 800bf5a:	683a      	ldr	r2, [r7, #0]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d901      	bls.n	800bf66 <vStreamBufferMoveMid+0x1e>
		uxCount = uxSize;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	603b      	str	r3, [r7, #0]
	pxBuffer->uxMid += uxCount;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	685a      	ldr	r2, [r3, #4]
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	441a      	add	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	605a      	str	r2, [r3, #4]
	if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	685a      	ldr	r2, [r3, #4]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d306      	bcc.n	800bf8c <vStreamBufferMoveMid+0x44>
		pxBuffer->uxMid -= pxBuffer->LENGTH;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	685a      	ldr	r2, [r3, #4]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	1ad2      	subs	r2, r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	605a      	str	r2, [r3, #4]
}
 800bf8c:	bf00      	nop
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <ulChar2u32>:
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	061a      	lsls	r2, r3, #24
			( ( ( uint32_t )apChr[1] ) << 16) |
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	041b      	lsls	r3, r3, #16
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 800bfaa:	431a      	orrs	r2, r3
			( ( ( uint32_t )apChr[2] ) << 8) |
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	3302      	adds	r3, #2
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	021b      	lsls	r3, r3, #8
			( ( ( uint32_t )apChr[1] ) << 16) |
 800bfb4:	4313      	orrs	r3, r2
			( ( ( uint32_t )apChr[3] ) );
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	3203      	adds	r2, #3
 800bfba:	7812      	ldrb	r2, [r2, #0]
			( ( ( uint32_t )apChr[2] ) << 8) |
 800bfbc:	4313      	orrs	r3, r2
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	370c      	adds	r7, #12
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr

0800bfca <usChar2u16>:
{
 800bfca:	b480      	push	{r7}
 800bfcc:	b083      	sub	sp, #12
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	021b      	lsls	r3, r3, #8
 800bfda:	b29a      	uxth	r2, r3
			  ( ( ( uint32_t )apChr[1] ) ) );
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	b29b      	uxth	r3, r3
	return ( uint16_t )
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	b29b      	uxth	r3, r3
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	370c      	adds	r7, #12
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <prvTCPSocketIsActive>:

/* prvTCPSocketIsActive() returns true if the socket must be checked.
 * Non-active sockets are waiting for user action, either connect()
 * or close(). */
static BaseType_t prvTCPSocketIsActive( UBaseType_t uxStatus )
{
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
	switch( uxStatus )
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b0b      	cmp	r3, #11
 800c000:	d81c      	bhi.n	800c03c <prvTCPSocketIsActive+0x48>
 800c002:	a201      	add	r2, pc, #4	; (adr r2, 800c008 <prvTCPSocketIsActive+0x14>)
 800c004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c008:	0800c039 	.word	0x0800c039
 800c00c:	0800c03d 	.word	0x0800c03d
 800c010:	0800c03d 	.word	0x0800c03d
 800c014:	0800c03d 	.word	0x0800c03d
 800c018:	0800c03d 	.word	0x0800c03d
 800c01c:	0800c03d 	.word	0x0800c03d
 800c020:	0800c03d 	.word	0x0800c03d
 800c024:	0800c039 	.word	0x0800c039
 800c028:	0800c039 	.word	0x0800c039
 800c02c:	0800c039 	.word	0x0800c039
 800c030:	0800c03d 	.word	0x0800c03d
 800c034:	0800c039 	.word	0x0800c039
	case eCLOSED:
	case eCLOSE_WAIT:
	case eFIN_WAIT_2:
	case eCLOSING:
	case eTIME_WAIT:
		return pdFALSE;
 800c038:	2300      	movs	r3, #0
 800c03a:	e000      	b.n	800c03e <prvTCPSocketIsActive+0x4a>
	default:
		return pdTRUE;
 800c03c:	2301      	movs	r3, #1
	}
}
 800c03e:	4618      	mov	r0, r3
 800c040:	370c      	adds	r7, #12
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr
 800c04a:	bf00      	nop

0800c04c <prvTCPStatusAgeCheck>:
/*-----------------------------------------------------------*/

#if( ipconfigTCP_HANG_PROTECTION == 1 )

	static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t *pxSocket )
	{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
	BaseType_t xResult;
		switch( pxSocket->u.xTCP.ucTCPState )
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c05a:	2b08      	cmp	r3, #8
 800c05c:	d81a      	bhi.n	800c094 <prvTCPStatusAgeCheck+0x48>
 800c05e:	a201      	add	r2, pc, #4	; (adr r2, 800c064 <prvTCPStatusAgeCheck+0x18>)
 800c060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c064:	0800c08f 	.word	0x0800c08f
 800c068:	0800c08f 	.word	0x0800c08f
 800c06c:	0800c095 	.word	0x0800c095
 800c070:	0800c095 	.word	0x0800c095
 800c074:	0800c095 	.word	0x0800c095
 800c078:	0800c089 	.word	0x0800c089
 800c07c:	0800c095 	.word	0x0800c095
 800c080:	0800c095 	.word	0x0800c095
 800c084:	0800c08f 	.word	0x0800c08f
		{
		case eESTABLISHED:
			/* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
			state ESTABLISHED can be protected using keep-alive messages. */
			xResult = pdFALSE;
 800c088:	2300      	movs	r3, #0
 800c08a:	60fb      	str	r3, [r7, #12]
			break;
 800c08c:	e005      	b.n	800c09a <prvTCPStatusAgeCheck+0x4e>
		case eCLOSED:
		case eTCP_LISTEN:
		case eCLOSE_WAIT:
			/* These 3 states may last for ever, up to the owner. */
			xResult = pdFALSE;
 800c08e:	2300      	movs	r3, #0
 800c090:	60fb      	str	r3, [r7, #12]
			break;
 800c092:	e002      	b.n	800c09a <prvTCPStatusAgeCheck+0x4e>
		default:
			/* All other (non-connected) states will get anti-hanging
			protection. */
			xResult = pdTRUE;
 800c094:	2301      	movs	r3, #1
 800c096:	60fb      	str	r3, [r7, #12]
			break;
 800c098:	bf00      	nop
		}
		if( xResult != pdFALSE )
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d025      	beq.n	800c0ec <prvTCPStatusAgeCheck+0xa0>
		{
			/* How much time has past since the last active moment which is
			defined as A) a state change or B) a packet has arrived. */
			TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastActTime;
 800c0a0:	f7fb f9f0 	bl	8007484 <xTaskGetTickCount>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	60bb      	str	r3, [r7, #8]

			/* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
			if( xAge > ( ipconfigTCP_HANG_PROTECTION_TIME * configTICK_RATE_HZ ) )
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	f247 5230 	movw	r2, #30000	; 0x7530
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d919      	bls.n	800c0ec <prvTCPStatusAgeCheck+0xa0>
						FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) ) );
				}
				#endif /* ipconfigHAS_DEBUG_PRINTF */

				/* Move to eCLOSE_WAIT, user may close the socket. */
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c0b8:	2108      	movs	r1, #8
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 fd39 	bl	800cb32 <vTCPStateChange>

				/* When 'bPassQueued' true, this socket is an orphan until it
				gets connected. */
				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0c6:	f003 0304 	and.w	r3, r3, #4
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00d      	beq.n	800c0ec <prvTCPStatusAgeCheck+0xa0>
				{
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0d6:	f003 0308 	and.w	r3, r3, #8
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d102      	bne.n	800c0e6 <prvTCPStatusAgeCheck+0x9a>
					{
						/* As it did not get connected, and the user can never
						accept() it anymore, it will be deleted now.  Called from
						the IP-task, so it's safe to call the internal Close
						function: vSocketClose(). */
						vSocketClose( pxSocket );
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f7fe feb9 	bl	800ae58 <vSocketClose>
					}
					/* Return a negative value to tell to inform the caller
					xTCPTimerCheck()
					that the socket got closed and may not be accessed anymore. */
					xResult = -1;
 800c0e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ea:	60fb      	str	r3, [r7, #12]
				}
			}
		}
		return xResult;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
	}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop

0800c0f8 <xTCPSocketCheck>:
 *		prvTCPSendRepeated()			// Send at most 8 messages on a row
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t *pxSocket )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
BaseType_t xResult = 0;
 800c100:	2300      	movs	r3, #0
 800c102:	60fb      	str	r3, [r7, #12]
BaseType_t xReady = pdFALSE;
 800c104:	2300      	movs	r3, #0
 800c106:	60bb      	str	r3, [r7, #8]

	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c10e:	2b04      	cmp	r3, #4
 800c110:	d906      	bls.n	800c120 <xTCPSocketCheck+0x28>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c116:	2b00      	cmp	r3, #0
 800c118:	d002      	beq.n	800c120 <xTCPSocketCheck+0x28>
	{
		/* The API FreeRTOS_send() might have added data to the TX stream.  Add
		this data to the windowing system to it can be transmitted. */
		prvTCPAddTxData( pxSocket );
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f001 f82a 	bl	800d174 <prvTCPAddTxData>
	}

	#if ipconfigUSE_TCP_WIN == 1
	{
		if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c124:	2b00      	cmp	r3, #0
 800c126:	d02a      	beq.n	800c17e <xTCPSocketCheck+0x86>
		{
			/* The first task of this regular socket check is to send-out delayed
			ACK's. */
			if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c12e:	f003 0320 	and.w	r3, r3, #32
 800c132:	b2db      	uxtb	r3, r3
 800c134:	2b00      	cmp	r3, #0
 800c136:	d116      	bne.n	800c166 <xTCPSocketCheck+0x6e>
			{
				/* Earlier data was received but not yet acknowledged.  This
				function is called when the TCP timer for the socket expires, the
				ACK may be sent now. */
				if( pxSocket->u.xTCP.ucTCPState != eCLOSED )
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d009      	beq.n	800c156 <xTCPSocketCheck+0x5e>
				{
					if( xTCPWindowLoggingLevel > 1 && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800c142:	4b1d      	ldr	r3, [pc, #116]	; (800c1b8 <xTCPSocketCheck+0xc0>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b01      	cmp	r3, #1
							pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
							pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber   - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber,
							ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) );
					}

					prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800c14c:	2300      	movs	r3, #0
 800c14e:	2228      	movs	r2, #40	; 0x28
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 f8bb 	bl	800c2cc <prvTCPReturnPacket>
						clear the pointer to it. */
						pxSocket->u.xTCP.pxAckMessage = NULL;
					}
					#endif /* ipconfigZERO_COPY_TX_DRIVER */
				}
				if( prvTCPNextTimeout( pxSocket ) > 1 )
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 ff8e 	bl	800d078 <prvTCPNextTimeout>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d901      	bls.n	800c166 <xTCPSocketCheck+0x6e>
				{
					/* Tell the code below that this function is ready. */
					xReady = pdTRUE;
 800c162:	2301      	movs	r3, #1
 800c164:	60bb      	str	r3, [r7, #8]
				/* The user wants to perform an active shutdown(), skip sending
				the	delayed	ACK.  The function prvTCPSendPacket() will send the
				FIN	along with the ACK's. */
			}

			if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d007      	beq.n	800c17e <xTCPSocketCheck+0x86>
			{
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c172:	4618      	mov	r0, r3
 800c174:	f003 fa96 	bl	800f6a4 <vReleaseNetworkBufferAndDescriptor>
				pxSocket->u.xTCP.pxAckMessage = NULL;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	67da      	str	r2, [r3, #124]	; 0x7c
			}
		}
	}
	#endif /* ipconfigUSE_TCP_WIN */

	if( xReady == pdFALSE )
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d113      	bne.n	800c1ac <xTCPSocketCheck+0xb4>
	{
		/* The second task of this regular socket check is sending out data. */
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c18a:	2b04      	cmp	r3, #4
 800c18c:	d804      	bhi.n	800c198 <xTCPSocketCheck+0xa0>
			( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) )
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 800c194:	2b02      	cmp	r3, #2
 800c196:	d102      	bne.n	800c19e <xTCPSocketCheck+0xa6>
		{
			prvTCPSendPacket( pxSocket );
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 f80f 	bl	800c1bc <prvTCPSendPacket>
		}

		/* Set the time-out for the next wakeup for this socket. */
		prvTCPNextTimeout( pxSocket );
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 ff6a 	bl	800d078 <prvTCPNextTimeout>

		#if( ipconfigTCP_HANG_PROTECTION == 1 )
		{
			/* In all (non-connected) states in which keep-alive messages can not be sent
			the anti-hang protocol will close sockets that are 'hanging'. */
			xResult = prvTCPStatusAgeCheck( pxSocket );
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f7ff ff51 	bl	800c04c <prvTCPStatusAgeCheck>
 800c1aa:	60f8      	str	r0, [r7, #12]
		}
		#endif
	}

	return xResult;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	2000482c 	.word	0x2000482c

0800c1bc <prvTCPSendPacket>:
/*
 * prvTCPSendPacket() will be called when the socket time-out has been reached.
 * It is only called by xTCPSocketCheck().
 */
static int32_t prvTCPSendPacket( FreeRTOS_Socket_t *pxSocket )
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b086      	sub	sp, #24
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
int32_t lResult = 0;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxOptionsLength;
TCPPacket_t *pxTCPPacket;
NetworkBufferDescriptor_t *pxNetworkBuffer;

	if( pxSocket->u.xTCP.ucTCPState != eCONNECT_SYN )
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	d010      	beq.n	800c1f4 <prvTCPSendPacket+0x38>
	{
		/* The connection is in s state other than SYN. */
		pxNetworkBuffer = NULL;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	60bb      	str	r3, [r7, #8]

		/* prvTCPSendRepeated() will only create a network buffer if necessary,
		i.e. when data must be sent to the peer. */
		lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800c1d6:	f107 0308 	add.w	r3, r7, #8
 800c1da:	4619      	mov	r1, r3
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 f848 	bl	800c272 <prvTCPSendRepeated>
 800c1e2:	6178      	str	r0, [r7, #20]

		if( pxNetworkBuffer != NULL )
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d03e      	beq.n	800c268 <prvTCPSendPacket+0xac>
		{
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f003 fa59 	bl	800f6a4 <vReleaseNetworkBufferAndDescriptor>
 800c1f2:	e039      	b.n	800c268 <prvTCPSendPacket+0xac>
		}
	}
	else
	{
		if( pxSocket->u.xTCP.ucRepCount >= 3u )
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	d904      	bls.n	800c208 <prvTCPSendPacket+0x4c>
			to most 3 times.  When there is no response, the socket get the
			status 'eCLOSE_WAIT'. */
			FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
				pxSocket->u.xTCP.ulRemoteIP,		/* IP address of remote machine. */
				pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c1fe:	2108      	movs	r1, #8
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 fc96 	bl	800cb32 <vTCPStateChange>
 800c206:	e02f      	b.n	800c268 <prvTCPSendPacket+0xac>
		}
		else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c20e:	f003 0308 	and.w	r3, r3, #8
 800c212:	b2db      	uxtb	r3, r3
 800c214:	2b00      	cmp	r3, #0
 800c216:	d105      	bne.n	800c224 <prvTCPSendPacket+0x68>
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 fa29 	bl	800c670 <prvTCPPrepareConnect>
 800c21e:	4603      	mov	r3, r0
 800c220:	2b01      	cmp	r3, #1
 800c222:	d121      	bne.n	800c268 <prvTCPSendPacket+0xac>
		{
			/* Or else, if the connection has been prepared, or can be prepared
			now, proceed to send the packet with the SYN flag.
			prvTCPPrepareConnect() prepares 'xPacket' and returns pdTRUE if
			the Ethernet address of the peer or the gateway is found. */
			pxTCPPacket = ( TCPPacket_t * )pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	3382      	adds	r3, #130	; 0x82
 800c228:	613b      	str	r3, [r7, #16]
			#endif

			/* About to send a SYN packet.  Call prvSetSynAckOptions() to set
			the proper options: The size of MSS and whether SACK's are
			allowed. */
			uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPPacket );
 800c22a:	6939      	ldr	r1, [r7, #16]
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 fc08 	bl	800ca42 <prvSetSynAckOptions>
 800c232:	60f8      	str	r0, [r7, #12]

			/* Return the number of bytes to be sent. */
			lResult = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	3328      	adds	r3, #40	; 0x28
 800c238:	617b      	str	r3, [r7, #20]

			/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
			uxOptionsLength is always a multiple of 4.  The complete expression
			would be:
			ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
			pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	3314      	adds	r3, #20
 800c240:	b2db      	uxtb	r3, r3
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	b2da      	uxtb	r2, r3
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

			/* Repeat Count is used for a connecting socket, to limit the number
			of tries. */
			pxSocket->u.xTCP.ucRepCount++;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c252:	3301      	adds	r3, #1
 800c254:	b2da      	uxtb	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

			/* Send the SYN message to make a connection.  The messages is
			stored in the socket field 'xPacket'.  It will be wrapped in a
			pseudo network buffer descriptor before it will be sent. */
			prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 800c25c:	697a      	ldr	r2, [r7, #20]
 800c25e:	2300      	movs	r3, #0
 800c260:	2100      	movs	r1, #0
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 f832 	bl	800c2cc <prvTCPReturnPacket>
		}
	}

	/* Return the total number of bytes sent. */
	return lResult;
 800c268:	697b      	ldr	r3, [r7, #20]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3718      	adds	r7, #24
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <prvTCPSendRepeated>:
/*
 * prvTCPSendRepeated will try to send a series of messages, as long as there is
 * data to be sent and as long as the transmit window isn't full.
 */
static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer )
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b086      	sub	sp, #24
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	6039      	str	r1, [r7, #0]
UBaseType_t uxIndex;
int32_t lResult = 0;
 800c27c:	2300      	movs	r3, #0
 800c27e:	613b      	str	r3, [r7, #16]
UBaseType_t uxOptionsLength = 0u;
 800c280:	2300      	movs	r3, #0
 800c282:	60fb      	str	r3, [r7, #12]
int32_t xSendLength;

	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800c284:	2300      	movs	r3, #0
 800c286:	617b      	str	r3, [r7, #20]
 800c288:	e016      	b.n	800c2b8 <prvTCPSendRepeated+0x46>
	{
		/* prvTCPPrepareSend() might allocate a network buffer if there is data
		to be sent. */
		xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	6839      	ldr	r1, [r7, #0]
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 fd8a 	bl	800cda8 <prvTCPPrepareSend>
 800c294:	60b8      	str	r0, [r7, #8]
		if( xSendLength <= 0 )
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	dd11      	ble.n	800c2c0 <prvTCPSendRepeated+0x4e>
		{
			break;
		}

		/* And return the packet to the peer. */
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	6819      	ldr	r1, [r3, #0]
 800c2a0:	68ba      	ldr	r2, [r7, #8]
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 f811 	bl	800c2cc <prvTCPReturnPacket>
		{
			*ppxNetworkBuffer = NULL;
		}
		#endif /* ipconfigZERO_COPY_TX_DRIVER */

		lResult += xSendLength;
 800c2aa:	693a      	ldr	r2, [r7, #16]
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	613b      	str	r3, [r7, #16]
	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	617b      	str	r3, [r7, #20]
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	2b07      	cmp	r3, #7
 800c2bc:	d9e5      	bls.n	800c28a <prvTCPSendRepeated+0x18>
 800c2be:	e000      	b.n	800c2c2 <prvTCPSendRepeated+0x50>
			break;
 800c2c0:	bf00      	nop
	}

	/* Return the total number of bytes sent. */
	return lResult;
 800c2c2:	693b      	ldr	r3, [r7, #16]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3718      	adds	r7, #24
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <prvTCPReturnPacket>:
 * which may either point to a real network buffer or to a TCP socket field
 * called 'xTCP.xPacket'.   A temporary xNetworkBuffer will be used to pass
 * the data to the NIC.
 */
static void prvTCPReturnPacket( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulLen, BaseType_t xReleaseAfterSend )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b098      	sub	sp, #96	; 0x60
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	607a      	str	r2, [r7, #4]
 800c2d8:	603b      	str	r3, [r7, #0]
uint32_t ulFrontSpace, ulSpace, ulSourceAddress, ulWinSize;
TCPWindow_t *pxTCPWindow;
NetworkBufferDescriptor_t xTempBuffer;
/* For sending, a pseudo network buffer will be used, as explained above. */

	if( pxNetworkBuffer == NULL )
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d109      	bne.n	800c2f4 <prvTCPReturnPacket+0x28>
	{
		pxNetworkBuffer = &xTempBuffer;
 800c2e0:	f107 0310 	add.w	r3, r7, #16
 800c2e4:	60bb      	str	r3, [r7, #8]
		#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
		{
			xTempBuffer.pxNextBuffer = NULL;
		}
		#endif
		xTempBuffer.pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	3382      	adds	r3, #130	; 0x82
 800c2ea:	62bb      	str	r3, [r7, #40]	; 0x28
		xTempBuffer.xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800c2ec:	2346      	movs	r3, #70	; 0x46
 800c2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		xReleaseAfterSend = pdFALSE;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	603b      	str	r3, [r7, #0]
			xReleaseAfterSend = pdTRUE;
		}
	}
	#endif /* ipconfigZERO_COPY_TX_DRIVER */

	if( pxNetworkBuffer != NULL )
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f000 818a 	beq.w	800c610 <prvTCPReturnPacket+0x344>
	{
		pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	699b      	ldr	r3, [r3, #24]
 800c300:	64fb      	str	r3, [r7, #76]	; 0x4c
		pxIPHeader = &pxTCPPacket->xIPHeader;
 800c302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c304:	330e      	adds	r3, #14
 800c306:	64bb      	str	r3, [r7, #72]	; 0x48
		pxEthernetHeader = &pxTCPPacket->xEthernetHeader;
 800c308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c30a:	647b      	str	r3, [r7, #68]	; 0x44

		/* Fill the packet, using hton translations. */
		if( pxSocket != NULL )
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	f000 80ed 	beq.w	800c4ee <prvTCPReturnPacket+0x222>
		{
			/* Calculate the space in the RX buffer in order to advertise the
			size of this socket's reception window. */
			pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	33dc      	adds	r3, #220	; 0xdc
 800c318:	643b      	str	r3, [r7, #64]	; 0x40

			if( pxSocket->u.xTCP.rxStream != NULL )
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d006      	beq.n	800c330 <prvTCPReturnPacket+0x64>
			{
				/* An RX stream was created already, see how much space is
				available. */
				ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c326:	4618      	mov	r0, r3
 800c328:	f7ff fde6 	bl	800bef8 <uxStreamBufferFrontSpace>
 800c32c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800c32e:	e002      	b.n	800c336 <prvTCPReturnPacket+0x6a>
			}
			else
			{
				/* No RX stream has been created, the full stream size is
				available. */
				ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c334:	65fb      	str	r3, [r7, #92]	; 0x5c
			}

			/* Take the minimum of the RX buffer space and the RX window size. */
			ulSpace = FreeRTOS_min_uint32( pxSocket->u.xTCP.ulRxCurWinSize, pxTCPWindow->xSize.ulRxWindowLength );
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800c33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	4619      	mov	r1, r3
 800c342:	4610      	mov	r0, r2
 800c344:	f7ff fd77 	bl	800be36 <FreeRTOS_min_uint32>
 800c348:	65b8      	str	r0, [r7, #88]	; 0x58

			if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c350:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c354:	b2db      	uxtb	r3, r3
 800c356:	2b00      	cmp	r3, #0
 800c358:	d107      	bne.n	800c36a <prvTCPReturnPacket+0x9e>
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c360:	f003 0304 	and.w	r3, r3, #4
 800c364:	b2db      	uxtb	r3, r3
 800c366:	2b00      	cmp	r3, #0
 800c368:	d001      	beq.n	800c36e <prvTCPReturnPacket+0xa2>
			{
				/* The low-water mark was reached, meaning there was little
				space left.  The socket will wait until the application has read
				or flushed the incoming data, and 'zero-window' will be
				advertised. */
				ulSpace = 0u;
 800c36a:	2300      	movs	r3, #0
 800c36c:	65bb      	str	r3, [r7, #88]	; 0x58
			}

			/* If possible, advertise an RX window size of at least 1 MSS, otherwise
			the peer might start 'zero window probing', i.e. sending small packets
			(1, 2, 4, 8... bytes). */
			if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c374:	461a      	mov	r2, r3
 800c376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c378:	429a      	cmp	r2, r3
 800c37a:	d90a      	bls.n	800c392 <prvTCPReturnPacket+0xc6>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c382:	461a      	mov	r2, r3
 800c384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c386:	429a      	cmp	r2, r3
 800c388:	d803      	bhi.n	800c392 <prvTCPReturnPacket+0xc6>
			{
				ulSpace = pxSocket->u.xTCP.usCurMSS;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c390:	65bb      	str	r3, [r7, #88]	; 0x58
			}

			/* Avoid overflow of the 16-bit win field. */
			ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c398:	461a      	mov	r2, r3
 800c39a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c39c:	40d3      	lsrs	r3, r2
 800c39e:	653b      	str	r3, [r7, #80]	; 0x50
			if( ulWinSize > 0xfffcUL )
 800c3a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3a2:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d902      	bls.n	800c3b0 <prvTCPReturnPacket+0xe4>
			{
				ulWinSize = 0xfffcUL;
 800c3aa:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800c3ae:	653b      	str	r3, [r7, #80]	; 0x50
			}

			pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800c3b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	021b      	lsls	r3, r3, #8
 800c3b6:	b21a      	sxth	r2, r3
 800c3b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	0a1b      	lsrs	r3, r3, #8
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	b21b      	sxth	r3, r3
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	b21b      	sxth	r3, r3
 800c3c6:	b29a      	uxth	r2, r3
 800c3c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3ca:	861a      	strh	r2, [r3, #48]	; 0x30
				}
			}
			#endif /* ipconfigHAS_DEBUG_PRINTF != 0 */

			/* The new window size has been advertised, switch off the flag. */
			pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c3d2:	f36f 0300 	bfc	r3, #0, #1
 800c3d6:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

			/* Later on, when deciding to delay an ACK, a precise estimate is needed
			of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
			highest sequence number minus 1 that the socket will accept. */
			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800c3da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3dc:	691a      	ldr	r2, [r3, #16]
 800c3de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c3e0:	441a      	add	r2, r3
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	645a      	str	r2, [r3, #68]	; 0x44

			#if( ipconfigTCP_KEEP_ALIVE == 1 )
				if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3ec:	f003 0302 	and.w	r3, r3, #2
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d02f      	beq.n	800c456 <prvTCPReturnPacket+0x18a>
				{
					/* Sending a keep-alive packet, send the current sequence number
					minus 1, which will	be recognised as a keep-alive packet an
					responded to by acknowledging the last byte. */
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c3fc:	f36f 0341 	bfc	r3, #1, #1
 800c400:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 800c404:	68fa      	ldr	r2, [r7, #12]
 800c406:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c40a:	f043 0304 	orr.w	r3, r3, #4
 800c40e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

					pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c418:	1e5a      	subs	r2, r3, #1
 800c41a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c41c:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800c420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c422:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c426:	061a      	lsls	r2, r3, #24
 800c428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c42a:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c42e:	021b      	lsls	r3, r3, #8
 800c430:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c434:	431a      	orrs	r2, r3
 800c436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c438:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c43c:	0a1b      	lsrs	r3, r3, #8
 800c43e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c442:	431a      	orrs	r2, r3
 800c444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c446:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c44a:	0e1b      	lsrs	r3, r3, #24
 800c44c:	431a      	orrs	r2, r3
 800c44e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c450:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800c454:	e034      	b.n	800c4c0 <prvTCPReturnPacket+0x1f4>
				}
				else
			#endif
			{
				pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c45c:	061a      	lsls	r2, r3, #24
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c464:	021b      	lsls	r3, r3, #8
 800c466:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c46a:	431a      	orrs	r2, r3
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c472:	0a1b      	lsrs	r3, r3, #8
 800c474:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c478:	431a      	orrs	r2, r3
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c480:	0e1b      	lsrs	r3, r3, #24
 800c482:	431a      	orrs	r2, r3
 800c484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c486:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

				if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u )
 800c48a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c48c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c490:	f003 0301 	and.w	r3, r3, #1
 800c494:	2b00      	cmp	r3, #0
 800c496:	d013      	beq.n	800c4c0 <prvTCPReturnPacket+0x1f4>
				{
					/* Suppress FIN in case this packet carries earlier data to be
					retransmitted. */
					uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	3b28      	subs	r3, #40	; 0x28
 800c49c:	63fb      	str	r3, [r7, #60]	; 0x3c
					if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 800c49e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4a4:	441a      	add	r2, r3
 800c4a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d008      	beq.n	800c4c0 <prvTCPReturnPacket+0x1f4>
					{
						pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_FIN );
 800c4ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c4b4:	f023 0301 	bic.w	r3, r3, #1
 800c4b8:	b2da      	uxtb	r2, r3
 800c4ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
					}
				}
			}

			/* Tell which sequence number is expected next time */
			pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 800c4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4c2:	691b      	ldr	r3, [r3, #16]
 800c4c4:	061a      	lsls	r2, r3, #24
 800c4c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	021b      	lsls	r3, r3, #8
 800c4cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c4d0:	431a      	orrs	r2, r3
 800c4d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	0a1b      	lsrs	r3, r3, #8
 800c4d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c4dc:	431a      	orrs	r2, r3
 800c4de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	0e1b      	lsrs	r3, r3, #24
 800c4e4:	431a      	orrs	r2, r3
 800c4e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4e8:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 800c4ec:	e00d      	b.n	800c50a <prvTCPReturnPacket+0x23e>
		}
		else
		{
			/* Sending data without a socket, probably replying with a RST flag
			Just swap the two sequence numbers. */
			vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 800c4ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4f0:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c4f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4f8:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 800c4fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4fe:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800c502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c506:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
		}

		pxIPHeader->ucTimeToLive           = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800c50a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c50c:	2280      	movs	r2, #128	; 0x80
 800c50e:	721a      	strb	r2, [r3, #8]
		pxIPHeader->usLength               = FreeRTOS_htons( ulLen );
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	b29b      	uxth	r3, r3
 800c514:	021b      	lsls	r3, r3, #8
 800c516:	b29a      	uxth	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	0a1b      	lsrs	r3, r3, #8
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	4313      	orrs	r3, r2
 800c520:	b29a      	uxth	r2, r3
 800c522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c524:	805a      	strh	r2, [r3, #2]
		if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d003      	beq.n	800c534 <prvTCPReturnPacket+0x268>
 800c52c:	4b3a      	ldr	r3, [pc, #232]	; (800c618 <prvTCPReturnPacket+0x34c>)
 800c52e:	695b      	ldr	r3, [r3, #20]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d103      	bne.n	800c53c <prvTCPReturnPacket+0x270>
		{
			/* When pxSocket is NULL, this function is called by prvTCPSendReset()
			and the IP-addresses must be swapped.
			Also swap the IP-addresses in case the IP-tack doesn't have an
			IP-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ). */
			ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 800c534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c536:	691b      	ldr	r3, [r3, #16]
 800c538:	657b      	str	r3, [r7, #84]	; 0x54
 800c53a:	e002      	b.n	800c542 <prvTCPReturnPacket+0x276>
		}
		else
		{
			ulSourceAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800c53c:	4b36      	ldr	r3, [pc, #216]	; (800c618 <prvTCPReturnPacket+0x34c>)
 800c53e:	695b      	ldr	r3, [r3, #20]
 800c540:	657b      	str	r3, [r7, #84]	; 0x54
		}
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800c542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c544:	68da      	ldr	r2, [r3, #12]
 800c546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c548:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 800c54a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c54c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c54e:	60da      	str	r2, [r3, #12]
		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800c550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c552:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800c556:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c55a:	021b      	lsls	r3, r3, #8
 800c55c:	4313      	orrs	r3, r2
 800c55e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800c560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c562:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c564:	b29a      	uxth	r2, r3
 800c566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c568:	845a      	strh	r2, [r3, #34]	; 0x22
 800c56a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c56c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c56e:	849a      	strh	r2, [r3, #36]	; 0x24

		/* Just an increasing number. */
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800c570:	4b2a      	ldr	r3, [pc, #168]	; (800c61c <prvTCPReturnPacket+0x350>)
 800c572:	881b      	ldrh	r3, [r3, #0]
 800c574:	021b      	lsls	r3, r3, #8
 800c576:	b21a      	sxth	r2, r3
 800c578:	4b28      	ldr	r3, [pc, #160]	; (800c61c <prvTCPReturnPacket+0x350>)
 800c57a:	881b      	ldrh	r3, [r3, #0]
 800c57c:	0a1b      	lsrs	r3, r3, #8
 800c57e:	b29b      	uxth	r3, r3
 800c580:	b21b      	sxth	r3, r3
 800c582:	4313      	orrs	r3, r2
 800c584:	b21b      	sxth	r3, r3
 800c586:	b29a      	uxth	r2, r3
 800c588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c58a:	809a      	strh	r2, [r3, #4]
		usPacketIdentifier++;
 800c58c:	4b23      	ldr	r3, [pc, #140]	; (800c61c <prvTCPReturnPacket+0x350>)
 800c58e:	881b      	ldrh	r3, [r3, #0]
 800c590:	3301      	adds	r3, #1
 800c592:	b29a      	uxth	r2, r3
 800c594:	4b21      	ldr	r3, [pc, #132]	; (800c61c <prvTCPReturnPacket+0x350>)
 800c596:	801a      	strh	r2, [r3, #0]
		pxIPHeader->usFragmentOffset = 0u;
 800c598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c59a:	2200      	movs	r2, #0
 800c59c:	719a      	strb	r2, [r3, #6]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	71da      	strb	r2, [r3, #7]
	#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
		pxNetworkBuffer->pxNextBuffer = NULL;
	#endif

		/* Important: tell NIC driver how many bytes must be sent. */
		pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f103 020e 	add.w	r2, r3, #14
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	61da      	str	r2, [r3, #28]

		/* Fill in the destination MAC addresses. */
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ),
 800c5ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c5ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5b0:	3306      	adds	r3, #6
 800c5b2:	2206      	movs	r2, #6
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	f003 ffb2 	bl	801051e <memcpy>
			sizeof( pxEthernetHeader->xDestinationAddress ) );

		/* The source MAC addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800c5ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5bc:	3306      	adds	r3, #6
 800c5be:	2206      	movs	r2, #6
 800c5c0:	4915      	ldr	r1, [pc, #84]	; (800c618 <prvTCPReturnPacket+0x34c>)
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f003 ffab 	bl	801051e <memcpy>
			}
		}
		#endif

		/* Send! */
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800c5c8:	6839      	ldr	r1, [r7, #0]
 800c5ca:	68b8      	ldr	r0, [r7, #8]
 800c5cc:	f7f8 f902 	bl	80047d4 <xNetworkInterfaceOutput>

		if( xReleaseAfterSend == pdFALSE )
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d11c      	bne.n	800c610 <prvTCPReturnPacket+0x344>
		{
			/* Swap-back some fields, as pxBuffer probably points to a socket field
			containing the packet header. */
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort);
 800c5d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5d8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800c5dc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c5e0:	021b      	lsls	r3, r3, #8
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	86bb      	strh	r3, [r7, #52]	; 0x34
 800c5e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c5ea:	b29a      	uxth	r2, r3
 800c5ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5ee:	845a      	strh	r2, [r3, #34]	; 0x22
 800c5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c5f4:	849a      	strh	r2, [r3, #36]	; 0x24
			pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 800c5f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5f8:	f8d3 201e 	ldr.w	r2, [r3, #30]
 800c5fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5fe:	f8c3 201a 	str.w	r2, [r3, #26]
			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800c602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c604:	3306      	adds	r3, #6
 800c606:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c608:	2206      	movs	r2, #6
 800c60a:	4618      	mov	r0, r3
 800c60c:	f003 ff87 	bl	801051e <memcpy>
		else
		{
			/* Nothing to do: the buffer has been passed to DMA and will be released after use */
		}
	} /* if( pxNetworkBuffer != NULL ) */
}
 800c610:	bf00      	nop
 800c612:	3760      	adds	r7, #96	; 0x60
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	200000a0 	.word	0x200000a0
 800c61c:	20004770 	.word	0x20004770

0800c620 <prvTCPCreateWindow>:
 * random starting value, are being synchronised.  The sliding window manager
 * (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 * Size (MSS) in use.
 */
static void prvTCPCreateWindow( FreeRTOS_Socket_t *pxSocket )
{
 800c620:	b5b0      	push	{r4, r5, r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af02      	add	r7, sp, #8
 800c626:	6078      	str	r0, [r7, #4]
		FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %lu Water %lu <= %lu <= %lu\n",
			pxSocket->u.xTCP.uxRxWinSize * ipconfigTCP_MSS,
			pxSocket->u.xTCP.uxLittleSpace ,
			pxSocket->u.xTCP.uxEnoughSpace,
			pxSocket->u.xTCP.uxRxStreamSize ) );
	vTCPWindowCreate(
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
		&pxSocket->u.xTCP.xTCPWindow,
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c634:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800c638:	fb02 f103 	mul.w	r1, r2, r3
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c642:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800c646:	fb02 f403 	mul.w	r4, r2, r3
	vTCPWindowCreate(
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 50ec 	ldr.w	r5, [r3, #236]	; 0xec
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
		( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
	vTCPWindowCreate(
 800c65c:	9201      	str	r2, [sp, #4]
 800c65e:	9300      	str	r3, [sp, #0]
 800c660:	462b      	mov	r3, r5
 800c662:	4622      	mov	r2, r4
 800c664:	f002 f85c 	bl	800e720 <vTCPWindowCreate>
}
 800c668:	bf00      	nop
 800c66a:	3708      	adds	r7, #8
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bdb0      	pop	{r4, r5, r7, pc}

0800c670 <prvTCPPrepareConnect>:
 * the Ethernet address of the target will be found using ARP.  In case the
 * target IP address is not within the netmask, the hardware address of the
 * gateway will be used.
 */
static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t *pxSocket )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b08a      	sub	sp, #40	; 0x28
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
TCPPacket_t *pxTCPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulRemoteIP;
MACAddress_t xEthAddress;
BaseType_t xReturn = pdTRUE;
 800c678:	2301      	movs	r3, #1
 800c67a:	627b      	str	r3, [r7, #36]	; 0x24
		/* Only necessary for nicer logging. */
		memset( xEthAddress.ucBytes, '\0', sizeof( xEthAddress.ucBytes ) );
	}
	#endif /* ipconfigHAS_PRINTF != 0 */

	ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c680:	061a      	lsls	r2, r3, #24
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c686:	021b      	lsls	r3, r3, #8
 800c688:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c68c:	431a      	orrs	r2, r3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c692:	0a1b      	lsrs	r3, r3, #8
 800c694:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c698:	431a      	orrs	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69e:	0e1b      	lsrs	r3, r3, #24
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	617b      	str	r3, [r7, #20]

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 800c6a4:	f107 020c 	add.w	r2, r7, #12
 800c6a8:	f107 0314 	add.w	r3, r7, #20
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7fb fe70 	bl	8008394 <eARPGetCacheEntry>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	switch( eReturned )
 800c6ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d00e      	beq.n	800c6e0 <prvTCPPrepareConnect+0x70>
		break;				/* We can now prepare the SYN packet. */
	case eARPCacheMiss:		/* An ARP table lookup did not find a valid entry. */
	case eCantSendPacket:	/* There is no IP address, or an ARP is still in progress. */
	default:
		/* Count the number of times it couldn't find the ARP address. */
		pxSocket->u.xTCP.ucRepCount++;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	b2da      	uxtb	r2, r3
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			xEthAddress.ucBytes[ 3 ],
			xEthAddress.ucBytes[ 4 ],
			xEthAddress.ucBytes[ 5 ] ) );

		/* And issue a (new) ARP request */
		FreeRTOS_OutputARPRequest( ulRemoteIP );
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7fb ff9d 	bl	8008614 <FreeRTOS_OutputARPRequest>

		xReturn = pdFALSE;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c6de:	e000      	b.n	800c6e2 <prvTCPPrepareConnect+0x72>
		break;				/* We can now prepare the SYN packet. */
 800c6e0:	bf00      	nop
	}

	if( xReturn != pdFALSE )
 800c6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f000 8091 	beq.w	800c80c <prvTCPPrepareConnect+0x19c>
	{
		/* The MAC-address of the peer (or gateway) has been found,
		now prepare the initial TCP packet and some fields in the socket. */
		pxTCPPacket = ( TCPPacket_t * )pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	3382      	adds	r3, #130	; 0x82
 800c6ee:	61fb      	str	r3, [r7, #28]
		pxIPHeader = &pxTCPPacket->xIPHeader;
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	330e      	adds	r3, #14
 800c6f4:	61bb      	str	r3, [r7, #24]

		/* reset the retry counter to zero. */
		pxSocket->u.xTCP.ucRepCount = 0u;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

		/* And remember that the connect/SYN data are prepared. */
		pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c704:	f043 0308 	orr.w	r3, r3, #8
 800c708:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

		/* Now that the Ethernet address is known, the initial packet can be
		prepared. */
		memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, '\0', sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	3382      	adds	r3, #130	; 0x82
 800c710:	2246      	movs	r2, #70	; 0x46
 800c712:	2100      	movs	r1, #0
 800c714:	4618      	mov	r0, r3
 800c716:	f003 ff27 	bl	8010568 <memset>

		/* Write the Ethernet address in Source, because it will be swapped by
		prvTCPReturnPacket(). */
		memcpy( &pxTCPPacket->xEthernetHeader.xSourceAddress, &xEthAddress, sizeof( xEthAddress ) );
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	3306      	adds	r3, #6
 800c71e:	461a      	mov	r2, r3
 800c720:	f107 030c 	add.w	r3, r7, #12
 800c724:	6818      	ldr	r0, [r3, #0]
 800c726:	6010      	str	r0, [r2, #0]
 800c728:	889b      	ldrh	r3, [r3, #4]
 800c72a:	8093      	strh	r3, [r2, #4]

		/* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
		pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	2200      	movs	r2, #0
 800c730:	f042 0208 	orr.w	r2, r2, #8
 800c734:	731a      	strb	r2, [r3, #12]
 800c736:	2200      	movs	r2, #0
 800c738:	735a      	strb	r2, [r3, #13]

		pxIPHeader->ucVersionHeaderLength = 0x45u;
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	2245      	movs	r2, #69	; 0x45
 800c73e:	701a      	strb	r2, [r3, #0]
		pxIPHeader->usLength = FreeRTOS_htons( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	2200      	movs	r2, #0
 800c744:	709a      	strb	r2, [r3, #2]
 800c746:	2200      	movs	r2, #0
 800c748:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800c74c:	70da      	strb	r2, [r3, #3]
		pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	2280      	movs	r2, #128	; 0x80
 800c752:	721a      	strb	r2, [r3, #8]

		pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	2206      	movs	r2, #6
 800c758:	725a      	strb	r2, [r3, #9]

		/* Addresses and ports will be stored swapped because prvTCPReturnPacket
		will swap them back while replying. */
		pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800c75a:	4b2f      	ldr	r3, [pc, #188]	; (800c818 <prvTCPPrepareConnect+0x1a8>)
 800c75c:	695a      	ldr	r2, [r3, #20]
 800c75e:	69bb      	ldr	r3, [r7, #24]
 800c760:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c766:	061a      	lsls	r2, r3, #24
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c76c:	021b      	lsls	r3, r3, #8
 800c76e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c772:	431a      	orrs	r2, r3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c778:	0a1b      	lsrs	r3, r3, #8
 800c77a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c77e:	431a      	orrs	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c784:	0e1b      	lsrs	r3, r3, #24
 800c786:	431a      	orrs	r2, r3
 800c788:	69bb      	ldr	r3, [r7, #24]
 800c78a:	60da      	str	r2, [r3, #12]

		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c790:	021b      	lsls	r3, r3, #8
 800c792:	b21a      	sxth	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c798:	0a1b      	lsrs	r3, r3, #8
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	b21b      	sxth	r3, r3
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	b21b      	sxth	r3, r3
 800c7a2:	b29a      	uxth	r2, r3
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	845a      	strh	r2, [r3, #34]	; 0x22
		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c7ac:	021b      	lsls	r3, r3, #8
 800c7ae:	b21a      	sxth	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c7b4:	0a1b      	lsrs	r3, r3, #8
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	b21b      	sxth	r3, r3
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	b21b      	sxth	r3, r3
 800c7be:	b29a      	uxth	r2, r3
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	849a      	strh	r2, [r3, #36]	; 0x24

		/* We are actively connecting, so the peer's Initial Sequence Number (ISN)
		isn't known yet. */
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0ul;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		/* Start with ISN (Initial Sequence Number). */
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulNextInitialSequenceNumber;
 800c7cc:	4b13      	ldr	r3, [pc, #76]	; (800c81c <prvTCPPrepareConnect+0x1ac>)
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

		/* And increment it with 268 for the next new connection, which is
		recommended value. */
		ulNextInitialSequenceNumber += 0x102UL;
 800c7d6:	4b11      	ldr	r3, [pc, #68]	; (800c81c <prvTCPPrepareConnect+0x1ac>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800c7de:	4a0f      	ldr	r2, [pc, #60]	; (800c81c <prvTCPPrepareConnect+0x1ac>)
 800c7e0:	6013      	str	r3, [r2, #0]

		/* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
		the high nibble of the TCP offset field. */
		pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50u;
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	2250      	movs	r2, #80	; 0x50
 800c7e6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		/* Only set the SYN flag. */
		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_SYN;
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	2202      	movs	r2, #2
 800c7ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		/* Set the values of usInitMSS / usCurMSS for this socket. */
		prvSocketSetMSS( pxSocket );
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f001 fa88 	bl	800dd08 <prvSocketSetMSS>

		/* For now this is also the advertised window size. */
		pxSocket->u.xTCP.ulRxCurWinSize = pxSocket->u.xTCP.usInitMSS;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800c7fe:	461a      	mov	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

		/* The initial sequence numbers at our side are known.  Later
		vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
		first wait for a SYN+ACK reply. */
		prvTCPCreateWindow( pxSocket );
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f7ff ff0a 	bl	800c620 <prvTCPCreateWindow>
	}

	return xReturn;
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3728      	adds	r7, #40	; 0x28
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	200000a0 	.word	0x200000a0
 800c81c:	20004810 	.word	0x20004810

0800c820 <prvCheckOptions>:
 * Parse the TCP option(s) received, if present.  It has already been verified
 * that: ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that the TP header
 * is longer than the usual 20 (5 x 4) bytes.
 */
static void prvCheckOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b08e      	sub	sp, #56	; 0x38
 800c824:	af02      	add	r7, sp, #8
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
const unsigned char *pucPtr;
const unsigned char *pucLast;
TCPWindow_t *pxTCPWindow;
UBaseType_t uxNewMSS;

	pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	699b      	ldr	r3, [r3, #24]
 800c82e:	627b      	str	r3, [r7, #36]	; 0x24
	pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800c830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c832:	3322      	adds	r3, #34	; 0x22
 800c834:	623b      	str	r3, [r7, #32]

	/* A character pointer to iterate through the option data */
	pucPtr = pxTCPHeader->ucOptdata;
 800c836:	6a3b      	ldr	r3, [r7, #32]
 800c838:	3314      	adds	r3, #20
 800c83a:	62fb      	str	r3, [r7, #44]	; 0x2c
	pucLast = pucPtr + (((pxTCPHeader->ucTCPOffset >> 4) - 5) << 2);
 800c83c:	6a3b      	ldr	r3, [r7, #32]
 800c83e:	7b1b      	ldrb	r3, [r3, #12]
 800c840:	091b      	lsrs	r3, r3, #4
 800c842:	b2db      	uxtb	r3, r3
 800c844:	3b05      	subs	r3, #5
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	461a      	mov	r2, r3
 800c84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84c:	4413      	add	r3, r2
 800c84e:	61fb      	str	r3, [r7, #28]
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	33dc      	adds	r3, #220	; 0xdc
 800c854:	61bb      	str	r3, [r7, #24]

	/* The comparison with pucLast is only necessary in case the option data are
	corrupted, we don't like to run into invalid memory and crash. */
	while( pucPtr < pucLast )
 800c856:	e0c7      	b.n	800c9e8 <prvCheckOptions+0x1c8>
	{
		if( pucPtr[ 0 ] == TCP_OPT_END )
 800c858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f000 80c9 	beq.w	800c9f4 <prvCheckOptions+0x1d4>
		{
			/* End of options. */
			return;
		}
		if( pucPtr[ 0 ] == TCP_OPT_NOOP)
 800c862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	2b01      	cmp	r3, #1
 800c868:	d103      	bne.n	800c872 <prvCheckOptions+0x52>
		{
			pucPtr++;
 800c86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86c:	3301      	adds	r3, #1
 800c86e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c870:	e0ba      	b.n	800c9e8 <prvCheckOptions+0x1c8>

			/* NOP option, inserted to make the length a multiple of 4. */
		}
#if( ipconfigUSE_TCP_WIN != 0 )
		else if( ( pucPtr[ 0 ] == TCP_OPT_WSOPT ) && ( pucPtr[ 1 ] == TCP_OPT_WSOPT_LEN ) )
 800c872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	2b03      	cmp	r3, #3
 800c878:	d114      	bne.n	800c8a4 <prvCheckOptions+0x84>
 800c87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87c:	3301      	adds	r3, #1
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	2b03      	cmp	r3, #3
 800c882:	d10f      	bne.n	800c8a4 <prvCheckOptions+0x84>
		{
			pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 800c884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c886:	789a      	ldrb	r2, [r3, #2]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
			pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800c894:	f043 0310 	orr.w	r3, r3, #16
 800c898:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			pucPtr += TCP_OPT_WSOPT_LEN;
 800c89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89e:	3303      	adds	r3, #3
 800c8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8a2:	e0a1      	b.n	800c9e8 <prvCheckOptions+0x1c8>
		}
#endif	/* ipconfigUSE_TCP_WIN */
		else if( ( pucPtr[ 0 ] == TCP_OPT_MSS ) && ( pucPtr[ 1 ] == TCP_OPT_MSS_LEN ) )
 800c8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	2b02      	cmp	r3, #2
 800c8aa:	d14a      	bne.n	800c942 <prvCheckOptions+0x122>
 800c8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	2b04      	cmp	r3, #4
 800c8b4:	d145      	bne.n	800c942 <prvCheckOptions+0x122>
		{
			/* An MSS option with the correct option length.  FreeRTOS_htons()
			is not needed here because usChar2u16() already returns a host
			endian number. */
			uxNewMSS = usChar2u16( pucPtr + 2 );
 800c8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b8:	3302      	adds	r3, #2
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7ff fb85 	bl	800bfca <usChar2u16>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	617b      	str	r3, [r7, #20]
			if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
			{
				FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
			}

			if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d933      	bls.n	800c93a <prvCheckOptions+0x11a>
			{
				/* our MSS was bigger than the MSS of the other party: adapt it. */
				pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800c8d8:	f043 0301 	orr.w	r3, r3, #1
 800c8dc:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
				if( ( pxTCPWindow != NULL ) && ( pxSocket->u.xTCP.usCurMSS > uxNewMSS ) )
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00b      	beq.n	800c8fe <prvCheckOptions+0xde>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d904      	bls.n	800c8fe <prvCheckOptions+0xde>
				{
					/* The peer advertises a smaller MSS than this socket was
					using.  Use that as well. */
					FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
					pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	b29a      	uxth	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				}
				pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	685a      	ldr	r2, [r3, #4]
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	fbb2 f3f3 	udiv	r3, r2, r3
 800c908:	697a      	ldr	r2, [r7, #20]
 800c90a:	fb02 f203 	mul.w	r2, r2, r3
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	605a      	str	r2, [r3, #4]
				pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	b29a      	uxth	r2, r3
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
				pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	b29a      	uxth	r2, r3
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
				pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	b29a      	uxth	r2, r3
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	b29a      	uxth	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			#if( ipconfigUSE_TCP_WIN != 1 )
				/* Without scaled windows, MSS is the only interesting option. */
				break;
			#else
				/* Or else we continue to check another option: selective ACK. */
				pucPtr += TCP_OPT_MSS_LEN;
 800c93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93c:	3304      	adds	r3, #4
 800c93e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c940:	e052      	b.n	800c9e8 <prvCheckOptions+0x1c8>
		}
		else
		{
			/* All other options have a length field, so that we easily
			can skip past them. */
			int len = ( int )pucPtr[ 1 ];
 800c942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c944:	3301      	adds	r3, #1
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	62bb      	str	r3, [r7, #40]	; 0x28
			if( len == 0 )
 800c94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d053      	beq.n	800c9f8 <prvCheckOptions+0x1d8>
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				/* Selective ACK: the peer has received a packet but it is missing earlier
				packets.  At least this packet does not need retransmission anymore
				ulTCPWindowTxSack( ) takes care of this administration. */
				if( pucPtr[0] == TCP_OPT_SACK_A )
 800c950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	2b05      	cmp	r3, #5
 800c956:	d143      	bne.n	800c9e0 <prvCheckOptions+0x1c0>
				{
					len -= 2;
 800c958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95a:	3b02      	subs	r3, #2
 800c95c:	62bb      	str	r3, [r7, #40]	; 0x28
					pucPtr += 2;
 800c95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c960:	3302      	adds	r3, #2
 800c962:	62fb      	str	r3, [r7, #44]	; 0x2c

					while( len >= 8 )
 800c964:	e039      	b.n	800c9da <prvCheckOptions+0x1ba>
					{
					uint32_t ulFirst = ulChar2u32( pucPtr );
 800c966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c968:	f7ff fb14 	bl	800bf94 <ulChar2u32>
 800c96c:	6138      	str	r0, [r7, #16]
					uint32_t ulLast  = ulChar2u32( pucPtr + 4 );
 800c96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c970:	3304      	adds	r3, #4
 800c972:	4618      	mov	r0, r3
 800c974:	f7ff fb0e 	bl	800bf94 <ulChar2u32>
 800c978:	60f8      	str	r0, [r7, #12]
					uint32_t ulCount = ulTCPWindowTxSack( &pxSocket->u.xTCP.xTCPWindow, ulFirst, ulLast );
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	33dc      	adds	r3, #220	; 0xdc
 800c97e:	68fa      	ldr	r2, [r7, #12]
 800c980:	6939      	ldr	r1, [r7, #16]
 800c982:	4618      	mov	r0, r3
 800c984:	f002 fc1a 	bl	800f1bc <ulTCPWindowTxSack>
 800c988:	60b8      	str	r0, [r7, #8]
						/* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
						starting from the head position.
						Advance the tail pointer in txStream. */
						if( ( pxSocket->u.xTCP.txStream  != NULL ) && ( ulCount > 0 ) )
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d01d      	beq.n	800c9ce <prvCheckOptions+0x1ae>
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d01a      	beq.n	800c9ce <prvCheckOptions+0x1ae>
						{
							/* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
							uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c99c:	2300      	movs	r3, #0
 800c99e:	9300      	str	r3, [sp, #0]
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	f7ff f9b2 	bl	800bd0e <uxStreamBufferGet>
							pxSocket->xEventBits |= eSOCKET_SEND;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f043 0202 	orr.w	r2, r3, #2
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	601a      	str	r2, [r3, #0]

							#if ipconfigSUPPORT_SELECT_FUNCTION == 1
							{
								if( pxSocket->xSelectBits & eSELECT_WRITE )
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ba:	f003 0302 	and.w	r3, r3, #2
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d005      	beq.n	800c9ce <prvCheckOptions+0x1ae>
								{
									/* The field 'xEventBits' is used to store regular socket events (at most 8),
									as well as 'select events', which will be left-shifted */
									pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	601a      	str	r2, [r3, #0]
									pxSocket->u.xTCP.pxHandleSent( (Socket_t *)pxSocket, ulCount );
								}
							}
							#endif /* ipconfigUSE_CALLBACKS == 1  */
						}
						pucPtr += 8;
 800c9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d0:	3308      	adds	r3, #8
 800c9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
						len -= 8;
 800c9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d6:	3b08      	subs	r3, #8
 800c9d8:	62bb      	str	r3, [r7, #40]	; 0x28
					while( len >= 8 )
 800c9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9dc:	2b07      	cmp	r3, #7
 800c9de:	dcc2      	bgt.n	800c966 <prvCheckOptions+0x146>
					}
				#endif	/* ipconfigUSE_TCP_TIMESTAMPS == 1 */
			}
			#endif	/* ipconfigUSE_TCP_WIN == 1 */

			pucPtr += len;
 800c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9e4:	4413      	add	r3, r2
 800c9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while( pucPtr < pucLast )
 800c9e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	f4ff af33 	bcc.w	800c858 <prvCheckOptions+0x38>
 800c9f2:	e002      	b.n	800c9fa <prvCheckOptions+0x1da>
			return;
 800c9f4:	bf00      	nop
 800c9f6:	e000      	b.n	800c9fa <prvCheckOptions+0x1da>
				break;
 800c9f8:	bf00      	nop
		}
	}
}
 800c9fa:	3730      	adds	r7, #48	; 0x30
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <prvWinScaleFactor>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN != 0 )

	static uint8_t prvWinScaleFactor( FreeRTOS_Socket_t *pxSocket )
	{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
	size_t uxWinSize;
	uint8_t ucFactor;

		/* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800ca14:	fb02 f303 	mul.w	r3, r2, r3
 800ca18:	60fb      	str	r3, [r7, #12]
		ucFactor = 0u;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	72fb      	strb	r3, [r7, #11]
		while( uxWinSize > 0xfffful )
 800ca1e:	e005      	b.n	800ca2c <prvWinScaleFactor+0x2c>
		{
			/* Divide by two and increase the binary factor by 1. */
			uxWinSize >>= 1;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	085b      	lsrs	r3, r3, #1
 800ca24:	60fb      	str	r3, [r7, #12]
			ucFactor++;
 800ca26:	7afb      	ldrb	r3, [r7, #11]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	72fb      	strb	r3, [r7, #11]
		while( uxWinSize > 0xfffful )
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca32:	d2f5      	bcs.n	800ca20 <prvWinScaleFactor+0x20>
		FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %lu MSS %lu Factor %u\n",
			pxSocket->u.xTCP.uxRxWinSize,
			pxSocket->u.xTCP.usInitMSS,
			ucFactor ) );

		return ucFactor;
 800ca34:	7afb      	ldrb	r3, [r7, #11]
	}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3714      	adds	r7, #20
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr

0800ca42 <prvSetSynAckOptions>:
 * When opening a TCP connection, while SYN's are being sent, the  parties may
 * communicate what MSS (Maximum Segment Size) they intend to use.   MSS is the
 * nett size of the payload, always smaller than MTU.
*/
static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t *pxSocket, TCPPacket_t * pxTCPPacket )
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b086      	sub	sp, #24
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	6039      	str	r1, [r7, #0]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	3322      	adds	r3, #34	; 0x22
 800ca50:	617b      	str	r3, [r7, #20]
uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800ca58:	827b      	strh	r3, [r7, #18]
	UBaseType_t uxOptionsLength;
#endif

	/* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) TCP_OPT_MSS;
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	2202      	movs	r2, #2
 800ca5e:	751a      	strb	r2, [r3, #20]
	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	2204      	movs	r2, #4
 800ca64:	755a      	strb	r2, [r3, #21]
	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800ca66:	8a7b      	ldrh	r3, [r7, #18]
 800ca68:	0a1b      	lsrs	r3, r3, #8
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	b2da      	uxtb	r2, r3
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	759a      	strb	r2, [r3, #22]
	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
 800ca72:	8a7b      	ldrh	r3, [r7, #18]
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	75da      	strb	r2, [r3, #23]

	#if( ipconfigUSE_TCP_WIN != 0 )
	{
		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7ff ffc0 	bl	800ca00 <prvWinScaleFactor>
 800ca80:	4603      	mov	r3, r0
 800ca82:	461a      	mov	r2, r3
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	761a      	strb	r2, [r3, #24]
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	2203      	movs	r2, #3
 800ca94:	765a      	strb	r2, [r3, #25]
		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	2203      	movs	r2, #3
 800ca9a:	769a      	strb	r2, [r3, #26]
		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	76da      	strb	r2, [r3, #27]
		uxOptionsLength = 8u;
 800caa6:	2308      	movs	r3, #8
 800caa8:	60fb      	str	r3, [r7, #12]
				uxOptionsLength += 2u;
			}
			else
		#endif
		{
			pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_NOOP;
 800caaa:	697a      	ldr	r2, [r7, #20]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	4413      	add	r3, r2
 800cab0:	3314      	adds	r3, #20
 800cab2:	2201      	movs	r2, #1
 800cab4:	701a      	strb	r2, [r3, #0]
			pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	3301      	adds	r3, #1
 800caba:	697a      	ldr	r2, [r7, #20]
 800cabc:	4413      	add	r3, r2
 800cabe:	2201      	movs	r2, #1
 800cac0:	751a      	strb	r2, [r3, #20]
			pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	3302      	adds	r3, #2
 800cac6:	697a      	ldr	r2, [r7, #20]
 800cac8:	4413      	add	r3, r2
 800caca:	2204      	movs	r2, #4
 800cacc:	751a      	strb	r2, [r3, #20]
			pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3303      	adds	r3, #3
 800cad2:	697a      	ldr	r2, [r7, #20]
 800cad4:	4413      	add	r3, r2
 800cad6:	2202      	movs	r2, #2
 800cad8:	751a      	strb	r2, [r3, #20]
			uxOptionsLength += 4u;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	3304      	adds	r3, #4
 800cade:	60fb      	str	r3, [r7, #12]
		}
		return uxOptionsLength; /* bytes, not words. */
 800cae0:	68fb      	ldr	r3, [r7, #12]
	}
	#endif	/* ipconfigUSE_TCP_WIN == 0 */
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3718      	adds	r7, #24
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <prvTCPTouchSocket>:
 * For anti-hanging protection and TCP keep-alive messages.  Called in two
 * places: after receiving a packet and after a state change.  The socket's
 * alive timer may be reset.
 */
static void prvTCPTouchSocket( FreeRTOS_Socket_t *pxSocket )
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b082      	sub	sp, #8
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
	#if( ipconfigTCP_HANG_PROTECTION == 1 )
	{
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 800caf2:	f7fa fcc7 	bl	8007484 <xTaskGetTickCount>
 800caf6:	4602      	mov	r2, r0
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif

	#if( ipconfigTCP_KEEP_ALIVE == 1 )
	{
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cb02:	f36f 0382 	bfc	r3, #2, #1
 800cb06:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cb10:	f36f 0341 	bfc	r3, #1, #1
 800cb14:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 800cb20:	f7fa fcb0 	bl	8007484 <xTaskGetTickCount>
 800cb24:	4602      	mov	r2, r0
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	( void ) pxSocket;
}
 800cb2a:	bf00      	nop
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <vTCPStateChange>:
 * resetting the alive timer, calling the user's OnConnect handler to notify
 * that a socket has got (dis)connected, and setting bit to unblock a call to
 * FreeRTOS_select()
 */
void vTCPStateChange( FreeRTOS_Socket_t *pxSocket, enum eTCP_STATE eTCPState )
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b086      	sub	sp, #24
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	70fb      	strb	r3, [r7, #3]
FreeRTOS_Socket_t *xParent = NULL;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	617b      	str	r3, [r7, #20]
BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connected ? */
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cb48:	2b04      	cmp	r3, #4
 800cb4a:	d906      	bls.n	800cb5a <vTCPStateChange+0x28>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cb52:	2b08      	cmp	r3, #8
 800cb54:	d001      	beq.n	800cb5a <vTCPStateChange+0x28>
 800cb56:	2301      	movs	r3, #1
 800cb58:	e000      	b.n	800cb5c <vTCPStateChange+0x2a>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	613b      	str	r3, [r7, #16]
BaseType_t bAfter  = ( BaseType_t ) NOW_CONNECTED( eTCPState );						/* Is it connected now ? */
 800cb5e:	78fb      	ldrb	r3, [r7, #3]
 800cb60:	2b04      	cmp	r3, #4
 800cb62:	d904      	bls.n	800cb6e <vTCPStateChange+0x3c>
 800cb64:	78fb      	ldrb	r3, [r7, #3]
 800cb66:	2b08      	cmp	r3, #8
 800cb68:	d001      	beq.n	800cb6e <vTCPStateChange+0x3c>
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e000      	b.n	800cb70 <vTCPStateChange+0x3e>
 800cb6e:	2300      	movs	r3, #0
 800cb70:	60fb      	str	r3, [r7, #12]
#if( ipconfigUSE_CALLBACKS == 1 )
	FreeRTOS_Socket_t *xConnected = NULL;
#endif

	/* Has the connected status changed? */
	if( bBefore != bAfter )
 800cb72:	693a      	ldr	r2, [r7, #16]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	f000 8087 	beq.w	800cc8a <vTCPStateChange+0x158>
	{
		/* Is the socket connected now ? */
		if( bAfter != pdFALSE )
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d063      	beq.n	800cc4a <vTCPStateChange+0x118>
		{
			/* if bPassQueued is true, this socket is an orphan until it gets connected. */
			if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb88:	f003 0304 	and.w	r3, r3, #4
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d048      	beq.n	800cc24 <vTCPStateChange+0xf2>
			{
				/* Now that it is connected, find it's parent. */
				if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb98:	f003 0308 	and.w	r3, r3, #8
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d002      	beq.n	800cba8 <vTCPStateChange+0x76>
				{
					xParent = pxSocket;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	617b      	str	r3, [r7, #20]
 800cba6:	e00f      	b.n	800cbc8 <vTCPStateChange+0x96>
				}
				else
				{
					xParent = pxSocket->u.xTCP.pxPeerSocket;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbac:	617b      	str	r3, [r7, #20]
					configASSERT( xParent != NULL );
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d109      	bne.n	800cbc8 <vTCPStateChange+0x96>
 800cbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	60bb      	str	r3, [r7, #8]
 800cbc6:	e7fe      	b.n	800cbc6 <vTCPStateChange+0x94>
				}
				if( xParent != NULL )
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d018      	beq.n	800cc00 <vTCPStateChange+0xce>
				{
					if( xParent->u.xTCP.pxPeerSocket == NULL )
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d102      	bne.n	800cbdc <vTCPStateChange+0xaa>
					{
						xParent->u.xTCP.pxPeerSocket = pxSocket;
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	655a      	str	r2, [r3, #84]	; 0x54
					}

					xParent->xEventBits |= eSOCKET_ACCEPT;
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f043 0204 	orr.w	r2, r3, #4
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	601a      	str	r2, [r3, #0]

					#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
					{
						/* Library support FreeRTOS_select().  Receiving a new
						connection is being translated as a READ event. */
						if( ( xParent->xSelectBits & eSELECT_READ ) != 0 )
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbec:	f003 0301 	and.w	r3, r3, #1
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d005      	beq.n	800cc00 <vTCPStateChange+0xce>
						{
							xParent->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	601a      	str	r2, [r3, #0]
					#endif
				}

				/* Don't need to access the parent socket anymore, so the
				reference 'pxPeerSocket' may be cleared. */
				pxSocket->u.xTCP.pxPeerSocket = NULL;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	655a      	str	r2, [r3, #84]	; 0x54
				pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cc0c:	f36f 0382 	bfc	r3, #2, #1
 800cc10:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

				/* When true, this socket may be returned in a call to accept(). */
				pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cc1a:	f043 0302 	orr.w	r3, r3, #2
 800cc1e:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800cc22:	e024      	b.n	800cc6e <vTCPStateChange+0x13c>
			}
			else
			{
				pxSocket->xEventBits |= eSOCKET_CONNECT;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f043 0208 	orr.w	r2, r3, #8
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	601a      	str	r2, [r3, #0]

				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
				{
					if( pxSocket->xSelectBits & eSELECT_WRITE )
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc34:	f003 0302 	and.w	r3, r3, #2
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d018      	beq.n	800cc6e <vTCPStateChange+0x13c>
					{
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	601a      	str	r2, [r3, #0]
 800cc48:	e011      	b.n	800cc6e <vTCPStateChange+0x13c>
			}
		}
		else  /* bAfter == pdFALSE, connection is closed. */
		{
			/* Notify/wake-up the socket-owner by setting a semaphore. */
			pxSocket->xEventBits |= eSOCKET_CLOSED;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f043 0220 	orr.w	r2, r3, #32
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	601a      	str	r2, [r3, #0]

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc5a:	f003 0304 	and.w	r3, r3, #4
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d005      	beq.n	800cc6e <vTCPStateChange+0x13c>
				{
					pxSocket->xEventBits |= ( eSELECT_EXCEPT << SOCKET_EVENT_BIT_COUNT );
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	601a      	str	r2, [r3, #0]
				xConnected = pxSocket;
			}
		}
		#endif /* ipconfigUSE_CALLBACKS */

		if( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE )
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7ff f9bd 	bl	800bff4 <prvTCPSocketIsActive>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d122      	bne.n	800ccc6 <vTCPStateChange+0x194>
		{
			/* Now the socket isn't in an active state anymore so it
			won't need further attention of the IP-task.
			Setting time-out to zero means that the socket won't get checked during
			timer events. */
			pxSocket->u.xTCP.usTimeout = 0u;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cc88:	e01d      	b.n	800ccc6 <vTCPStateChange+0x194>
		}
	}
	else
	{
		if( eTCPState == eCLOSED )
 800cc8a:	78fb      	ldrb	r3, [r7, #3]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d11a      	bne.n	800ccc6 <vTCPStateChange+0x194>
		{
			/* Socket goes to status eCLOSED because of a RST.
			When nobody owns the socket yet, delete it. */
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc96:	f003 0304 	and.w	r3, r3, #4
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d107      	bne.n	800ccb0 <vTCPStateChange+0x17e>
				( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cca6:	f003 0302 	and.w	r3, r3, #2
 800ccaa:	b2db      	uxtb	r3, r3
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00a      	beq.n	800ccc6 <vTCPStateChange+0x194>
			{
				FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );
				if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ccb6:	f003 0308 	and.w	r3, r3, #8
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d102      	bne.n	800ccc6 <vTCPStateChange+0x194>
				{
					FreeRTOS_closesocket( pxSocket );
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f7fe f8a3 	bl	800ae0c <FreeRTOS_closesocket>
			}
		}
	}

	/* Fill in the new state. */
	pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	78fa      	ldrb	r2, [r7, #3]
 800ccca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* touch the alive timers because moving to another state. */
	prvTCPTouchSocket( pxSocket );
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7ff ff0b 	bl	800caea <prvTCPTouchSocket>
			/* The 'connected' state has changed, call the OnConnect handler of the parent. */
			xConnected->u.xTCP.pxHandleConnected( ( Socket_t * ) xConnected, bAfter );
		}
	}
	#endif
	if( xParent != NULL )
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d002      	beq.n	800cce0 <vTCPStateChange+0x1ae>
	{
		vSocketWakeUpUser( xParent );
 800ccda:	6978      	ldr	r0, [r7, #20]
 800ccdc:	f7fe fb92 	bl	800b404 <vSocketWakeUpUser>
	}
}
 800cce0:	bf00      	nop
 800cce2:	3718      	adds	r7, #24
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <prvTCPBufferResize>:
/*-----------------------------------------------------------*/

static NetworkBufferDescriptor_t *prvTCPBufferResize( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer,
	int32_t lDataLen, UBaseType_t uxOptionsLength )
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b088      	sub	sp, #32
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
 800ccf4:	603b      	str	r3, [r7, #0]
NetworkBufferDescriptor_t *pxReturn;
int32_t lNeeded;
BaseType_t xResize;

	if( xBufferAllocFixedSize != pdFALSE )
 800ccf6:	4b2b      	ldr	r3, [pc, #172]	; (800cda4 <prvTCPBufferResize+0xbc>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00a      	beq.n	800cd14 <prvTCPBufferResize+0x2c>
	{
		/* Network buffers are created with a fixed size and can hold the largest
		MTU. */
		lNeeded = ( int32_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 800ccfe:	f240 53f2 	movw	r3, #1522	; 0x5f2
 800cd02:	61bb      	str	r3, [r7, #24]
		/* and therefore, the buffer won't be too small.
		Only ask for a new network buffer in case none was supplied. */
		xResize = ( pxNetworkBuffer == NULL );
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	bf0c      	ite	eq
 800cd0a:	2301      	moveq	r3, #1
 800cd0c:	2300      	movne	r3, #0
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	617b      	str	r3, [r7, #20]
 800cd12:	e014      	b.n	800cd3e <prvTCPBufferResize+0x56>
	else
	{
		/* Network buffers are created with a variable size. See if it must
		grow. */
		lNeeded = FreeRTOS_max_int32( ( int32_t ) sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ),
			( int32_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen );
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	4413      	add	r3, r2
 800cd1a:	3336      	adds	r3, #54	; 0x36
		lNeeded = FreeRTOS_max_int32( ( int32_t ) sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ),
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	2046      	movs	r0, #70	; 0x46
 800cd20:	f7ff f869 	bl	800bdf6 <FreeRTOS_max_int32>
 800cd24:	61b8      	str	r0, [r7, #24]
		/* In case we were called from a TCP timer event, a buffer must be
		created.  Otherwise, test 'xDataLength' of the provided buffer. */
		xResize = ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < (size_t)lNeeded );
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d004      	beq.n	800cd36 <prvTCPBufferResize+0x4e>
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	69da      	ldr	r2, [r3, #28]
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d201      	bcs.n	800cd3a <prvTCPBufferResize+0x52>
 800cd36:	2301      	movs	r3, #1
 800cd38:	e000      	b.n	800cd3c <prvTCPBufferResize+0x54>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	617b      	str	r3, [r7, #20]
	}

	if( xResize != pdFALSE )
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d021      	beq.n	800cd88 <prvTCPBufferResize+0xa0>
	{
		/* The caller didn't provide a network buffer or the provided buffer is
		too small.  As we must send-out a data packet, a buffer will be created
		here. */
		pxReturn = pxGetNetworkBufferWithDescriptor( ( uint32_t ) lNeeded, 0u );
 800cd44:	69bb      	ldr	r3, [r7, #24]
 800cd46:	2100      	movs	r1, #0
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f002 fc33 	bl	800f5b4 <pxGetNetworkBufferWithDescriptor>
 800cd4e:	61f8      	str	r0, [r7, #28]

		if( pxReturn != NULL )
 800cd50:	69fb      	ldr	r3, [r7, #28]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d021      	beq.n	800cd9a <prvTCPBufferResize+0xb2>
		{
			/* Copy the existing data to the new created buffer. */
			if( pxNetworkBuffer )
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d00c      	beq.n	800cd76 <prvTCPBufferResize+0x8e>
			{
				/* Either from the previous buffer... */
				memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	6998      	ldr	r0, [r3, #24]
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	6999      	ldr	r1, [r3, #24]
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	69db      	ldr	r3, [r3, #28]
 800cd68:	461a      	mov	r2, r3
 800cd6a:	f003 fbd8 	bl	801051e <memcpy>

				/* ...and release it. */
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800cd6e:	68b8      	ldr	r0, [r7, #8]
 800cd70:	f002 fc98 	bl	800f6a4 <vReleaseNetworkBufferAndDescriptor>
 800cd74:	e011      	b.n	800cd9a <prvTCPBufferResize+0xb2>
			}
			else
			{
				/* Or from the socket field 'xTCP.xPacket'. */
				memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800cd76:	69fb      	ldr	r3, [r7, #28]
 800cd78:	6998      	ldr	r0, [r3, #24]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	3382      	adds	r3, #130	; 0x82
 800cd7e:	2246      	movs	r2, #70	; 0x46
 800cd80:	4619      	mov	r1, r3
 800cd82:	f003 fbcc 	bl	801051e <memcpy>
 800cd86:	e008      	b.n	800cd9a <prvTCPBufferResize+0xb2>
		}
	}
	else
	{
		/* xResize is false, the network buffer provided was big enough. */
		pxReturn = pxNetworkBuffer;
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	61fb      	str	r3, [r7, #28]

		/* Thanks to Andrey Ivanov from swissEmbedded for reporting that the
		xDataLength member must get the correct length too! */
		pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	4413      	add	r3, r2
 800cd92:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	61da      	str	r2, [r3, #28]
	}

	return pxReturn;
 800cd9a:	69fb      	ldr	r3, [r7, #28]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3720      	adds	r7, #32
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	080109b4 	.word	0x080109b4

0800cda8 <prvTCPPrepareSend>:

/*
 * Prepare an outgoing message, in case anything has to be sent.
 */
static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer, UBaseType_t uxOptionsLength )
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b092      	sub	sp, #72	; 0x48
 800cdac:	af02      	add	r7, sp, #8
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	60b9      	str	r1, [r7, #8]
 800cdb2:	607a      	str	r2, [r7, #4]
uint32_t ulDataGot, ulDistance;
TCPWindow_t *pxTCPWindow;
NetworkBufferDescriptor_t *pxNewBuffer;
int32_t lStreamPos;

	if( ( *ppxNetworkBuffer ) != NULL )
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d004      	beq.n	800cdc6 <prvTCPPrepareSend+0x1e>
	{
		/* A network buffer descriptor was already supplied */
		pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	699b      	ldr	r3, [r3, #24]
 800cdc2:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdc4:	e002      	b.n	800cdcc <prvTCPPrepareSend+0x24>
	}
	else
	{
		/* For now let it point to the last packet header */
		pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	3382      	adds	r3, #130	; 0x82
 800cdca:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
 800cdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdce:	637b      	str	r3, [r7, #52]	; 0x34
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	33dc      	adds	r3, #220	; 0xdc
 800cdd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	lDataLen = 0;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
	lStreamPos = 0;
 800cdda:	2300      	movs	r3, #0
 800cddc:	613b      	str	r3, [r7, #16]
	pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_ACK;
 800cdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cde0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cde4:	f043 0310 	orr.w	r3, r3, #16
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	if( pxSocket->u.xTCP.txStream != NULL )
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d078      	beq.n	800ceea <prvTCPPrepareSend+0x142>
	{
		/* ulTCPWindowTxGet will return the amount of data which may be sent
		along with the position in the txStream.
		Why check for MSS > 1 ?
		Because some TCP-stacks (like uIP) use it for flow-control. */
		if( pxSocket->u.xTCP.usCurMSS > 1u )
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d90a      	bls.n	800ce18 <prvTCPPrepareSend+0x70>
		{
			lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ce08:	f107 0210 	add.w	r2, r7, #16
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce10:	f001 ffc8 	bl	800eda4 <ulTCPWindowTxGet>
 800ce14:	4603      	mov	r3, r0
 800ce16:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		if( lDataLen > 0 )
 800ce18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	dd65      	ble.n	800ceea <prvTCPPrepareSend+0x142>
		{
			/* Check if the current network buffer is big enough, if not,
			resize it. */
			pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	6819      	ldr	r1, [r3, #0]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f7ff ff5e 	bl	800cce8 <prvTCPBufferResize>
 800ce2c:	62b8      	str	r0, [r7, #40]	; 0x28

			if( pxNewBuffer != NULL )
 800ce2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d057      	beq.n	800cee4 <prvTCPPrepareSend+0x13c>
			{
				*ppxNetworkBuffer = pxNewBuffer;
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce38:	601a      	str	r2, [r3, #0]
				pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 800ce3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3c:	699b      	ldr	r3, [r3, #24]
 800ce3e:	63bb      	str	r3, [r7, #56]	; 0x38
				pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
 800ce40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce42:	637b      	str	r3, [r7, #52]	; 0x34

				pucSendData = pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	3336      	adds	r3, #54	; 0x36
 800ce48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce4a:	4413      	add	r3, r2
 800ce4c:	627b      	str	r3, [r7, #36]	; 0x24

				/* Translate the position in txStream to an offset from the tail
				marker. */
				uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	693a      	ldr	r2, [r7, #16]
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	f7ff f81a 	bl	800be94 <uxStreamBufferDistance>
 800ce60:	6238      	str	r0, [r7, #32]

				/* Here data is copied from the txStream in 'peek' mode.  Only
				when the packets are acked, the tail marker will be updated. */
				ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ce66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce68:	2301      	movs	r3, #1
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce70:	6a39      	ldr	r1, [r7, #32]
 800ce72:	f7fe ff4c 	bl	800bd0e <uxStreamBufferGet>
 800ce76:	61f8      	str	r0, [r7, #28]
				}
				#endif

				/* If the owner of the socket requests a closure, add the FIN
				flag to the last packet. */
				if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ce7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d030      	beq.n	800ceea <prvTCPPrepareSend+0x142>
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce92:	b2db      	uxtb	r3, r3
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d128      	bne.n	800ceea <prvTCPPrepareSend+0x142>
				{
					ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	4619      	mov	r1, r3
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	461a      	mov	r2, r3
 800cea8:	f7fe fff4 	bl	800be94 <uxStreamBufferDistance>
 800ceac:	61b8      	str	r0, [r7, #24]

					if( ulDistance == ulDataGot )
 800ceae:	69ba      	ldr	r2, [r7, #24]
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d119      	bne.n	800ceea <prvTCPPrepareSend+0x142>
						}
						#endif
						/* Although the socket sends a FIN, it will stay in
						ESTABLISHED until all current data has been received or
						delivered. */
						pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 800ceb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceb8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cebc:	f043 0301 	orr.w	r3, r3, #1
 800cec0:	b2da      	uxtb	r2, r3
 800cec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800cec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cece:	441a      	add	r2, r3
 800ced0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced2:	625a      	str	r2, [r3, #36]	; 0x24
						pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800ced4:	68fa      	ldr	r2, [r7, #12]
 800ced6:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ceda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cede:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800cee2:	e002      	b.n	800ceea <prvTCPPrepareSend+0x142>
					}
				}
			}
			else
			{
				lDataLen = -1;
 800cee4:	f04f 33ff 	mov.w	r3, #4294967295
 800cee8:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
	}

	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) )
 800ceea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	db7e      	blt.n	800cfee <prvTCPPrepareSend+0x246>
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cef6:	2b05      	cmp	r3, #5
 800cef8:	d179      	bne.n	800cfee <prvTCPPrepareSend+0x246>
	{
		/* See if the socket owner wants to shutdown this connection. */
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf00:	f003 0320 	and.w	r3, r3, #32
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d02b      	beq.n	800cf62 <prvTCPPrepareSend+0x1ba>
			( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 800cf0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf0c:	f001 fe92 	bl	800ec34 <xTCPWindowTxDone>
 800cf10:	4603      	mov	r3, r0
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d025      	beq.n	800cf62 <prvTCPPrepareSend+0x1ba>
		{
			pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cf1c:	f36f 1345 	bfc	r3, #5, #1
 800cf20:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 800cf24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf26:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf2a:	f043 0301 	orr.w	r3, r3, #1
 800cf2e:	b2da      	uxtb	r2, r3
 800cf30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800cf36:	68fa      	ldr	r2, [r7, #12]
 800cf38:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cf3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf40:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cf4a:	f043 0301 	orr.w	r3, r3, #1
 800cf4e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800cf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf54:	6a1a      	ldr	r2, [r3, #32]
 800cf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf58:	625a      	str	r2, [r3, #36]	; 0x24
			vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800cf5a:	2106      	movs	r1, #6
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f7ff fde8 	bl	800cb32 <vTCPStateChange>
		}

		#if( ipconfigTCP_KEEP_ALIVE != 0 )
		{
			if( pxSocket->u.xTCP.ucKeepRepCount > 3u )
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cf68:	2b03      	cmp	r3, #3
 800cf6a:	d906      	bls.n	800cf7a <prvTCPPrepareSend+0x1d2>
			{
				FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
					pxSocket->u.xTCP.ulRemoteIP,			/* IP address of remote machine. */
					pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800cf6c:	2108      	movs	r1, #8
 800cf6e:	68f8      	ldr	r0, [r7, #12]
 800cf70:	f7ff fddf 	bl	800cb32 <vTCPStateChange>
				lDataLen = -1;
 800cf74:	f04f 33ff 	mov.w	r3, #4294967295
 800cf78:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 800cf7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d136      	bne.n	800cfee <prvTCPPrepareSend+0x246>
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf86:	f003 0301 	and.w	r3, r3, #1
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d12e      	bne.n	800cfee <prvTCPPrepareSend+0x246>
			{
				/* If there is no data to be sent, and no window-update message,
				we might want to send a keep-alive message. */
				TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastAliveTime;
 800cf90:	f7fa fa78 	bl	8007484 <xTaskGetTickCount>
 800cf94:	4602      	mov	r2, r0
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf9a:	1ad3      	subs	r3, r2, r3
 800cf9c:	617b      	str	r3, [r7, #20]
				TickType_t xMax;
				xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * configTICK_RATE_HZ );
 800cf9e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800cfa2:	633b      	str	r3, [r7, #48]	; 0x30
				if( pxSocket->u.xTCP.ucKeepRepCount )
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d002      	beq.n	800cfb4 <prvTCPPrepareSend+0x20c>
				{
					xMax = ( 3u * configTICK_RATE_HZ );
 800cfae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800cfb2:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if( xAge > xMax )
 800cfb4:	697a      	ldr	r2, [r7, #20]
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d918      	bls.n	800cfee <prvTCPPrepareSend+0x246>
				{
					pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 800cfbc:	f7fa fa62 	bl	8007484 <xTaskGetTickCount>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	65da      	str	r2, [r3, #92]	; 0x5c
					if( xTCPWindowLoggingLevel )
						FreeRTOS_debug_printf( ( "keep-alive: %lxip:%u count %u\n",
							pxSocket->u.xTCP.ulRemoteIP,
							pxSocket->u.xTCP.usRemotePort,
							pxSocket->u.xTCP.ucKeepRepCount ) );
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 800cfc6:	68fa      	ldr	r2, [r7, #12]
 800cfc8:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cfcc:	f043 0302 	orr.w	r3, r3, #2
 800cfd0:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500 ) );
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800cfda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
					pxSocket->u.xTCP.ucKeepRepCount++;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	b2da      	uxtb	r2, r3
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		#endif /* ipconfigTCP_KEEP_ALIVE */
	}

	/* Anything to send, a change of the advertised window size, or maybe send a
	keep-alive message? */
	if( ( lDataLen > 0 ) ||
 800cfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	dc0f      	bgt.n	800d014 <prvTCPPrepareSend+0x26c>
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cffa:	f003 0301 	and.w	r3, r3, #1
 800cffe:	b2db      	uxtb	r3, r3
	if( ( lDataLen > 0 ) ||
 800d000:	2b00      	cmp	r3, #0
 800d002:	d107      	bne.n	800d014 <prvTCPPrepareSend+0x26c>
		( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d00a:	f003 0302 	and.w	r3, r3, #2
 800d00e:	b2db      	uxtb	r3, r3
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800d010:	2b00      	cmp	r3, #0
 800d012:	d02b      	beq.n	800d06c <prvTCPPrepareSend+0x2c4>
	{
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
 800d014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d016:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d01a:	f023 0308 	bic.w	r3, r3, #8
 800d01e:	b2da      	uxtb	r2, r3
 800d020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d022:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	3314      	adds	r3, #20
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	b2da      	uxtb	r2, r3
 800d032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d034:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
 800d038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d03a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d03e:	f043 0310 	orr.w	r3, r3, #16
 800d042:	b2da      	uxtb	r2, r3
 800d044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d046:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		if( lDataLen != 0l )
 800d04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d008      	beq.n	800d062 <prvTCPPrepareSend+0x2ba>
		{
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_PSH;
 800d050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d052:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d056:	f043 0308 	orr.w	r3, r3, #8
 800d05a:	b2da      	uxtb	r2, r3
 800d05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d05e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				}
			}
		}
		#endif

		lDataLen += ( int32_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800d062:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	4413      	add	r3, r2
 800d068:	3328      	adds	r3, #40	; 0x28
 800d06a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	return lDataLen;
 800d06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3740      	adds	r7, #64	; 0x40
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
	...

0800d078 <prvTCPNextTimeout>:

/*
 * Calculate after how much time this socket needs to be checked again.
 */
static TickType_t prvTCPNextTimeout ( FreeRTOS_Socket_t *pxSocket )
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
TickType_t ulDelayMs = ( TickType_t ) 20000;
 800d080:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d084:	60bb      	str	r3, [r7, #8]

	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d08c:	2b02      	cmp	r3, #2
 800d08e:	d135      	bne.n	800d0fc <prvTCPNextTimeout+0x84>
	{
		/* The socket is actively connecting to a peer. */
		if( pxSocket->u.xTCP.bits.bConnPrepared )
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d096:	f003 0308 	and.w	r3, r3, #8
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d012      	beq.n	800d0c6 <prvTCPNextTimeout+0x4e>
		{
			/* Ethernet address has been found, use progressive timeout for
			active connect(). */
			if( pxSocket->u.xTCP.ucRepCount < 3u )
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d0a6:	2b02      	cmp	r3, #2
 800d0a8:	d809      	bhi.n	800d0be <prvTCPNextTimeout+0x46>
			{
				ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1u ) );
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800d0b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ba:	60bb      	str	r3, [r7, #8]
 800d0bc:	e006      	b.n	800d0cc <prvTCPNextTimeout+0x54>
			}
			else
			{
				ulDelayMs = 11000UL;
 800d0be:	f642 23f8 	movw	r3, #11000	; 0x2af8
 800d0c2:	60bb      	str	r3, [r7, #8]
 800d0c4:	e002      	b.n	800d0cc <prvTCPNextTimeout+0x54>
			}
		}
		else
		{
			/* Still in the ARP phase: check every half second. */
			ulDelayMs = 500UL;
 800d0c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d0ca:	60bb      	str	r3, [r7, #8]
		}

		FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
			pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort,
			pxSocket->u.xTCP.ucRepCount, ulDelayMs ) );
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d0d2:	fb02 f303 	mul.w	r3, r2, r3
 800d0d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d0da:	d30a      	bcc.n	800d0f2 <prvTCPNextTimeout+0x7a>
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d0e2:	fb02 f303 	mul.w	r3, r2, r3
 800d0e6:	4a22      	ldr	r2, [pc, #136]	; (800d170 <prvTCPNextTimeout+0xf8>)
 800d0e8:	fba2 2303 	umull	r2, r3, r2, r3
 800d0ec:	099b      	lsrs	r3, r3, #6
 800d0ee:	b29a      	uxth	r2, r3
 800d0f0:	e000      	b.n	800d0f4 <prvTCPNextTimeout+0x7c>
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d0fa:	e032      	b.n	800d162 <prvTCPNextTimeout+0xea>
	}
	else if( pxSocket->u.xTCP.usTimeout == 0u )
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d102:	2b00      	cmp	r3, #0
 800d104:	d12d      	bne.n	800d162 <prvTCPNextTimeout+0xea>
	{
		/* Let the sliding window mechanism decide what time-out is appropriate. */
		BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d112:	f107 0208 	add.w	r2, r7, #8
 800d116:	4619      	mov	r1, r3
 800d118:	f001 fde4 	bl	800ece4 <xTCPWindowTxHasData>
 800d11c:	60f8      	str	r0, [r7, #12]
		if( ulDelayMs == 0u )
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d107      	bne.n	800d134 <prvTCPNextTimeout+0xbc>
		{
			ulDelayMs = xResult ? 1UL : 20000UL;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <prvTCPNextTimeout+0xb6>
 800d12a:	2301      	movs	r3, #1
 800d12c:	e001      	b.n	800d132 <prvTCPNextTimeout+0xba>
 800d12e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d132:	60bb      	str	r3, [r7, #8]
		}
		else
		{
			/* ulDelayMs contains the time to wait before a re-transmission. */
		}
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d13a:	fb02 f303 	mul.w	r3, r2, r3
 800d13e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d142:	d30a      	bcc.n	800d15a <prvTCPNextTimeout+0xe2>
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d14a:	fb02 f303 	mul.w	r3, r2, r3
 800d14e:	4a08      	ldr	r2, [pc, #32]	; (800d170 <prvTCPNextTimeout+0xf8>)
 800d150:	fba2 2303 	umull	r2, r3, r2, r3
 800d154:	099b      	lsrs	r3, r3, #6
 800d156:	b29a      	uxth	r2, r3
 800d158:	e000      	b.n	800d15c <prvTCPNextTimeout+0xe4>
 800d15a:	2201      	movs	r2, #1
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		/* field '.usTimeout' has already been set (by the
		keep-alive/delayed-ACK mechanism). */
	}

	/* Return the number of clock ticks before the timer expires. */
	return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	10624dd3 	.word	0x10624dd3

0800d174 <prvTCPAddTxData>:
/*-----------------------------------------------------------*/

static void prvTCPAddTxData( FreeRTOS_Socket_t *pxSocket )
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
	the sliding window.

	uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It contains new
	Tx data which has not been passed to the sliding window yet.  The oldest
	data not-yet-confirmed can be found at rxTail. */
	lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d180:	4618      	mov	r0, r3
 800d182:	f7fe fecd 	bl	800bf20 <uxStreamBufferMidSpace>
 800d186:	4603      	mov	r3, r0
 800d188:	60fb      	str	r3, [r7, #12]

	if( lLength > 0 )
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	dd17      	ble.n	800d1c0 <prvTCPAddTxData+0x4c>
		window manager, so it can start transmitting them.

		Hand over the new data to the sliding window handler.  It will be
		split-up in chunks of 1460 bytes each (or less, depending on
		ipconfigTCP_MSS). */
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800d196:	68f9      	ldr	r1, [r7, #12]
								( uint32_t ) lLength,
								( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d19c:	685b      	ldr	r3, [r3, #4]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800d19e:	461a      	mov	r2, r3
								( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1a4:	691b      	ldr	r3, [r3, #16]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800d1a6:	f001 fc91 	bl	800eacc <lTCPWindowTxAdd>
 800d1aa:	60b8      	str	r0, [r7, #8]

		/* Move the rxMid pointer forward up to rxHead. */
		if( lCount > 0 )
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	dd06      	ble.n	800d1c0 <prvTCPAddTxData+0x4c>
		{
			vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7fe fec4 	bl	800bf48 <vStreamBufferMoveMid>
		}
	}
}
 800d1c0:	bf00      	nop
 800d1c2:	3710      	adds	r7, #16
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <prvTCPHandleFin>:
 * Or when the socket has sent a FIN flag to the peer
 * Before being called, it has been checked that both reception and transmission
 * are complete.
 */
static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b088      	sub	sp, #32
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	699b      	ldr	r3, [r3, #24]
 800d1d6:	61bb      	str	r3, [r7, #24]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800d1d8:	69bb      	ldr	r3, [r7, #24]
 800d1da:	3322      	adds	r3, #34	; 0x22
 800d1dc:	617b      	str	r3, [r7, #20]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	7b5b      	ldrb	r3, [r3, #13]
 800d1e2:	74fb      	strb	r3, [r7, #19]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	33dc      	adds	r3, #220	; 0xdc
 800d1e8:	60fb      	str	r3, [r7, #12]
BaseType_t xSendLength = 0;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	61fb      	str	r3, [r7, #28]
uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	061a      	lsls	r2, r3, #24
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	689b      	ldr	r3, [r3, #8]
 800d1f8:	021b      	lsls	r3, r3, #8
 800d1fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d1fe:	431a      	orrs	r2, r3
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	689b      	ldr	r3, [r3, #8]
 800d204:	0a1b      	lsrs	r3, r3, #8
 800d206:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d20a:	431a      	orrs	r2, r3
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	0e1b      	lsrs	r3, r3, #24
 800d212:	4313      	orrs	r3, r2
 800d214:	60bb      	str	r3, [r7, #8]

	if( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u )
 800d216:	7cfb      	ldrb	r3, [r7, #19]
 800d218:	f003 0301 	and.w	r3, r3, #1
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d004      	beq.n	800d22a <prvTCPHandleFin+0x62>
	{
		pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1u;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	695b      	ldr	r3, [r3, #20]
 800d224:	1c5a      	adds	r2, r3, #1
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	611a      	str	r2, [r3, #16]
	}
	if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d234:	b2db      	uxtb	r3, r3
 800d236:	2b00      	cmp	r3, #0
 800d238:	d10b      	bne.n	800d252 <prvTCPHandleFin+0x8a>
	{
		/* We haven't yet replied with a FIN, do so now. */
		pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6a1a      	ldr	r2, [r3, #32]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	625a      	str	r2, [r3, #36]	; 0x24
		pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d24c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800d250:	e00c      	b.n	800d26c <prvTCPHandleFin+0xa4>
	}
	else
	{
		/* We did send a FIN already, see if it's ACK'd. */
		if( ulAckNr == pxTCPWindow->tx.ulFINSequenceNumber + 1u )
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d256:	1c5a      	adds	r2, r3, #1
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d106      	bne.n	800d26c <prvTCPHandleFin+0xa4>
		{
			pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 800d25e:	687a      	ldr	r2, [r7, #4]
 800d260:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d264:	f043 0301 	orr.w	r3, r3, #1
 800d268:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
		}
	}

	if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d272:	f003 0301 	and.w	r3, r3, #1
 800d276:	b2db      	uxtb	r3, r3
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10b      	bne.n	800d294 <prvTCPHandleFin+0xcc>
	{
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	621a      	str	r2, [r3, #32]
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_FIN;
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	2211      	movs	r2, #17
 800d288:	735a      	strb	r2, [r3, #13]

		/* And wait for the final ACK. */
		vTCPStateChange( pxSocket, eLAST_ACK );
 800d28a:	210a      	movs	r1, #10
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f7ff fc50 	bl	800cb32 <vTCPStateChange>
 800d292:	e023      	b.n	800d2dc <prvTCPHandleFin+0x114>
	}
	else
	{
		/* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1u;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d298:	1c5a      	adds	r2, r3, #1
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	621a      	str	r2, [r3, #32]
		if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d103      	bne.n	800d2b6 <prvTCPHandleFin+0xee>
		{
			/* We have sent out a FIN but the peer hasn't replied with a FIN
			yet. Do nothing for the moment. */
			pxTCPHeader->ucTCPFlags = 0u;
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	735a      	strb	r2, [r3, #13]
 800d2b4:	e012      	b.n	800d2dc <prvTCPHandleFin+0x114>
		}
		else
		{
			if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d2bc:	f003 0302 	and.w	r3, r3, #2
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d103      	bne.n	800d2ce <prvTCPHandleFin+0x106>
			{
				/* This is the third of the three-way hand shake: the last
				ACK. */
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	2210      	movs	r2, #16
 800d2ca:	735a      	strb	r2, [r3, #13]
 800d2cc:	e002      	b.n	800d2d4 <prvTCPHandleFin+0x10c>
			}
			else
			{
				/* The other party started the closure, so we just wait for the
				last ACK. */
				pxTCPHeader->ucTCPFlags = 0u;
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	735a      	strb	r2, [r3, #13]
			}

			/* And wait for the user to close this socket. */
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d2d4:	2108      	movs	r1, #8
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f7ff fc2b 	bl	800cb32 <vTCPStateChange>
		}
	}

	pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6a1a      	ldr	r2, [r3, #32]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	62da      	str	r2, [r3, #44]	; 0x2c

	if( pxTCPHeader->ucTCPFlags != 0u )
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	7b5b      	ldrb	r3, [r3, #13]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d004      	beq.n	800d2f6 <prvTCPHandleFin+0x12e>
	{
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2f2:	3328      	adds	r3, #40	; 0x28
 800d2f4:	61fb      	str	r3, [r7, #28]
	}

	pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2fc:	3314      	adds	r3, #20
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	b2da      	uxtb	r2, r3
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	731a      	strb	r2, [r3, #12]
			pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
			pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
			pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
	}

	return xSendLength;
 800d308:	69fb      	ldr	r3, [r7, #28]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3720      	adds	r7, #32
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}

0800d312 <prvCheckRxData>:
 *
 * The first thing that will be done is find the TCP payload data
 * and check the length of this data.
 */
static BaseType_t prvCheckRxData( NetworkBufferDescriptor_t *pxNetworkBuffer, uint8_t **ppucRecvData )
{
 800d312:	b580      	push	{r7, lr}
 800d314:	b088      	sub	sp, #32
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
 800d31a:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	699b      	ldr	r3, [r3, #24]
 800d320:	61bb      	str	r3, [r7, #24]
TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	3322      	adds	r3, #34	; 0x22
 800d326:	617b      	str	r3, [r7, #20]
	node.

	The size of the TCP header is given in a multiple of 4-byte words (single
	byte, needs no ntoh() translation).  A shift-right 2: is the same as
	(offset >> 4) * 4. */
    lTCPHeaderLength = ( BaseType_t ) ( ( pxTCPHeader->ucTCPOffset & VALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2 );
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	7b1b      	ldrb	r3, [r3, #12]
 800d32c:	089b      	lsrs	r3, r3, #2
 800d32e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800d332:	613b      	str	r3, [r7, #16]

	/* Let pucRecvData point to the first byte received. */
	*ppucRecvData = pxNetworkBuffer->pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + lTCPHeaderLength;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	699a      	ldr	r2, [r3, #24]
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	3322      	adds	r3, #34	; 0x22
 800d33c:	441a      	add	r2, r3
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	601a      	str	r2, [r3, #0]

	/* Calculate lReceiveLength - the length of the TCP data received.  This is
	equal to the total packet length minus:
	( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
	lReceiveLength = ( ( int32_t ) pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	69db      	ldr	r3, [r3, #28]
 800d346:	3b0e      	subs	r3, #14
 800d348:	61fb      	str	r3, [r7, #28]
	lLength =  ( int32_t )FreeRTOS_htons( pxTCPPacket->xIPHeader.usLength );
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	8a1b      	ldrh	r3, [r3, #16]
 800d34e:	b29b      	uxth	r3, r3
 800d350:	021b      	lsls	r3, r3, #8
 800d352:	b21a      	sxth	r2, r3
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	8a1b      	ldrh	r3, [r3, #16]
 800d358:	b29b      	uxth	r3, r3
 800d35a:	0a1b      	lsrs	r3, r3, #8
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	b21b      	sxth	r3, r3
 800d360:	4313      	orrs	r3, r2
 800d362:	b21b      	sxth	r3, r3
 800d364:	b29b      	uxth	r3, r3
 800d366:	60fb      	str	r3, [r7, #12]

	if( lReceiveLength > lLength )
 800d368:	69fa      	ldr	r2, [r7, #28]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	dd01      	ble.n	800d374 <prvCheckRxData+0x62>
	{
		/* More bytes were received than the reported length, often because of
		padding bytes at the end. */
		lReceiveLength = lLength;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	61fb      	str	r3, [r7, #28]
	}

	/* Subtract the size of the TCP and IP headers and the actual data size is
	known. */
	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER ) )
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	f103 0214 	add.w	r2, r3, #20
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	da05      	bge.n	800d38c <prvCheckRxData+0x7a>
	{
		lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER );
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	3314      	adds	r3, #20
 800d384:	69fa      	ldr	r2, [r7, #28]
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	61fb      	str	r3, [r7, #28]
 800d38a:	e001      	b.n	800d390 <prvCheckRxData+0x7e>
	}
	else
	{
		lReceiveLength = 0;
 800d38c:	2300      	movs	r3, #0
 800d38e:	61fb      	str	r3, [r7, #28]
	This field communicates the current value of the urgent pointer as a
	positive offset from the sequence number in this segment.  The urgent
	pointer points to the sequence number of the octet following the urgent
	data.  This field is only be interpreted in segments with the URG control
	bit set. */
	if( ( pxTCPHeader->ucTCPFlags & ipTCP_FLAG_URG ) != 0u )
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	7b5b      	ldrb	r3, [r3, #13]
 800d394:	f003 0320 	and.w	r3, r3, #32
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d01c      	beq.n	800d3d6 <prvCheckRxData+0xc4>
	{
		/* Although we ignore the urgent data, we have to skip it. */
		lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	8a5b      	ldrh	r3, [r3, #18]
 800d3a0:	b29b      	uxth	r3, r3
 800d3a2:	021b      	lsls	r3, r3, #8
 800d3a4:	b21a      	sxth	r2, r3
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	8a5b      	ldrh	r3, [r3, #18]
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	0a1b      	lsrs	r3, r3, #8
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	b21b      	sxth	r3, r3
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	b21b      	sxth	r3, r3
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	60bb      	str	r3, [r7, #8]
		*ppucRecvData += lUrgentLength;
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	441a      	add	r2, r3
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	601a      	str	r2, [r3, #0]
		lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 800d3c6:	68b9      	ldr	r1, [r7, #8]
 800d3c8:	69f8      	ldr	r0, [r7, #28]
 800d3ca:	f7fe fd24 	bl	800be16 <FreeRTOS_min_int32>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	1a9b      	subs	r3, r3, r2
 800d3d4:	61fb      	str	r3, [r7, #28]
	}

	return ( BaseType_t ) lReceiveLength;
 800d3d6:	69fb      	ldr	r3, [r7, #28]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3720      	adds	r7, #32
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <prvStoreRxData>:
 * The second thing is to do is check if the payload data may be accepted
 * If so, they will be added to the reception queue.
 */
static BaseType_t prvStoreRxData( FreeRTOS_Socket_t *pxSocket, uint8_t *pucRecvData,
	NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulReceiveLength )
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b08c      	sub	sp, #48	; 0x30
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
 800d3ec:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	699b      	ldr	r3, [r3, #24]
 800d3f2:	627b      	str	r3, [r7, #36]	; 0x24
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f6:	3322      	adds	r3, #34	; 0x22
 800d3f8:	623b      	str	r3, [r7, #32]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	33dc      	adds	r3, #220	; 0xdc
 800d3fe:	61fb      	str	r3, [r7, #28]
uint32_t ulSequenceNumber, ulSpace;
int32_t lOffset, lStored;
BaseType_t xResult = 0;
 800d400:	2300      	movs	r3, #0
 800d402:	62bb      	str	r3, [r7, #40]	; 0x28

	ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800d404:	6a3b      	ldr	r3, [r7, #32]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	061a      	lsls	r2, r3, #24
 800d40a:	6a3b      	ldr	r3, [r7, #32]
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	021b      	lsls	r3, r3, #8
 800d410:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d414:	431a      	orrs	r2, r3
 800d416:	6a3b      	ldr	r3, [r7, #32]
 800d418:	685b      	ldr	r3, [r3, #4]
 800d41a:	0a1b      	lsrs	r3, r3, #8
 800d41c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d420:	431a      	orrs	r2, r3
 800d422:	6a3b      	ldr	r3, [r7, #32]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	0e1b      	lsrs	r3, r3, #24
 800d428:	4313      	orrs	r3, r2
 800d42a:	61bb      	str	r3, [r7, #24]

	if( ( ulReceiveLength > 0u ) && ( pxSocket->u.xTCP.ucTCPState >= eSYN_RECEIVED ) )
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d03f      	beq.n	800d4b2 <prvStoreRxData+0xd2>
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d438:	2b03      	cmp	r3, #3
 800d43a:	d93a      	bls.n	800d4b2 <prvStoreRxData+0xd2>

		If it can't be "accept"ed it may have to be stored and send a selective
		ack (SACK) option to confirm it.  In that case, xTCPWindowRxStore() will be
		called later to store an out-of-order packet (in case lOffset is
		negative). */
		if ( pxSocket->u.xTCP.rxStream )
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d440:	2b00      	cmp	r3, #0
 800d442:	d006      	beq.n	800d452 <prvStoreRxData+0x72>
		{
			ulSpace = ( uint32_t )uxStreamBufferGetSpace ( pxSocket->u.xTCP.rxStream );
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d448:	4618      	mov	r0, r3
 800d44a:	f7fe fd41 	bl	800bed0 <uxStreamBufferGetSpace>
 800d44e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d450:	e002      	b.n	800d458 <prvStoreRxData+0x78>
		}
		else
		{
			ulSpace = ( uint32_t )pxSocket->u.xTCP.uxRxStreamSize;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d456:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 800d458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45a:	683a      	ldr	r2, [r7, #0]
 800d45c:	69b9      	ldr	r1, [r7, #24]
 800d45e:	69f8      	ldr	r0, [r7, #28]
 800d460:	f001 fa3c 	bl	800e8dc <lTCPWindowRxCheck>
 800d464:	6178      	str	r0, [r7, #20]

		if( lOffset >= 0 )
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	db10      	blt.n	800d48e <prvStoreRxData+0xae>
		{
			/* New data has arrived and may be made available to the user.  See
			if the head marker in rxStream may be advanced,	only if lOffset == 0.
			In case the low-water mark is reached, bLowWater will be set
			"low-water" here stands for "little space". */
			lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 800d46c:	6979      	ldr	r1, [r7, #20]
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	68f8      	ldr	r0, [r7, #12]
 800d474:	f7fe f918 	bl	800b6a8 <lTCPAddRxdata>
 800d478:	6138      	str	r0, [r7, #16]

			if( lStored != ( int32_t ) ulReceiveLength )
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	693a      	ldr	r2, [r7, #16]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d005      	beq.n	800d48e <prvStoreRxData+0xae>
				FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes??\n", lStored, ulReceiveLength ) );

				/* Received data could not be stored.  The socket's flag
				bMallocError has been set.  The socket now has the status
				eCLOSE_WAIT and a RST packet will be sent back. */
				prvTCPSendReset( pxNetworkBuffer );
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 fc24 	bl	800dcd0 <prvTCPSendReset>
				xResult = -1;
 800d488:	f04f 33ff 	mov.w	r3, #4294967295
 800d48c:	62bb      	str	r3, [r7, #40]	; 0x28
		#if( ipconfigUSE_TCP_WIN == 1 )
		{
			/* Now lTCPAddRxdata() will move the rxHead pointer forward
			so data becomes available to the user immediately
			In case the low-water mark is reached, bLowWater will be set. */
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800d48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d490:	2b00      	cmp	r3, #0
 800d492:	d113      	bne.n	800d4bc <prvStoreRxData+0xdc>
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d00f      	beq.n	800d4bc <prvStoreRxData+0xdc>
			{
				lTCPAddRxdata( pxSocket, 0ul, NULL, pxTCPWindow->ulUserDataLength );
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	68f8      	ldr	r0, [r7, #12]
 800d4a6:	f7fe f8ff 	bl	800b6a8 <lTCPAddRxdata>
				pxTCPWindow->ulUserDataLength = 0;
 800d4aa:	69fb      	ldr	r3, [r7, #28]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	631a      	str	r2, [r3, #48]	; 0x30
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800d4b0:	e004      	b.n	800d4bc <prvStoreRxData+0xdc>
		}
		#endif /* ipconfigUSE_TCP_WIN */
	}
	else
	{
		pxTCPWindow->ucOptionLength = 0u;
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d4ba:	e000      	b.n	800d4be <prvStoreRxData+0xde>
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800d4bc:	bf00      	nop
	}

	return xResult;
 800d4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3730      	adds	r7, #48	; 0x30
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <prvSetOptions>:
/*-----------------------------------------------------------*/

/* Set the TCP options (if any) for the outgoing packet. */
static UBaseType_t prvSetOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b086      	sub	sp, #24
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	699b      	ldr	r3, [r3, #24]
 800d4d6:	613b      	str	r3, [r7, #16]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	3322      	adds	r3, #34	; 0x22
 800d4dc:	60fb      	str	r3, [r7, #12]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	33dc      	adds	r3, #220	; 0xdc
 800d4e2:	60bb      	str	r3, [r7, #8]
UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4ea:	617b      	str	r3, [r7, #20]

	#if(	ipconfigUSE_TCP_WIN == 1 )
		if( uxOptionsLength != 0u )
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d011      	beq.n	800d516 <prvSetOptions+0x4e>
					pxSocket->usLocalPort,
					pxSocket->u.xTCP.usRemotePort,
					uxOptionsLength,
					FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 1 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
					FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 2 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ) );
			memcpy( pxTCPHeader->ucOptdata, pxTCPWindow->ulOptionsData, ( size_t ) uxOptionsLength );
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f103 0014 	add.w	r0, r3, #20
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	3380      	adds	r3, #128	; 0x80
 800d4fc:	697a      	ldr	r2, [r7, #20]
 800d4fe:	4619      	mov	r1, r3
 800d500:	f003 f80d 	bl	801051e <memcpy>

			/* The header length divided by 4, goes into the higher nibble,
			effectively a shift-left 2. */
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	b2db      	uxtb	r3, r3
 800d508:	3314      	adds	r3, #20
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	b2da      	uxtb	r2, r3
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	731a      	strb	r2, [r3, #12]
 800d514:	e031      	b.n	800d57a <prvSetOptions+0xb2>
		}
		else
	#endif	/* ipconfigUSE_TCP_WIN */
	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d51c:	2b04      	cmp	r3, #4
 800d51e:	d92c      	bls.n	800d57a <prvSetOptions+0xb2>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d024      	beq.n	800d57a <prvSetOptions+0xb2>
	{
		/* TCP options must be sent because the MSS has changed. */
		pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d536:	f36f 0300 	bfc	r3, #0, #1
 800d53a:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		if( xTCPWindowLoggingLevel >= 0 )
		{
			FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
		}

		pxTCPHeader->ucOptdata[ 0 ] = TCP_OPT_MSS;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2202      	movs	r2, #2
 800d542:	751a      	strb	r2, [r3, #20]
		pxTCPHeader->ucOptdata[ 1 ] = TCP_OPT_MSS_LEN;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2204      	movs	r2, #4
 800d548:	755a      	strb	r2, [r3, #21]
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d550:	0a1b      	lsrs	r3, r3, #8
 800d552:	b29b      	uxth	r3, r3
 800d554:	b2da      	uxtb	r2, r3
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	759a      	strb	r2, [r3, #22]
		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffu );
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d560:	b2da      	uxtb	r2, r3
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	75da      	strb	r2, [r3, #23]
		uxOptionsLength = 4u;
 800d566:	2304      	movs	r3, #4
 800d568:	617b      	str	r3, [r7, #20]
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	3314      	adds	r3, #20
 800d570:	b2db      	uxtb	r3, r3
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	b2da      	uxtb	r2, r3
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	731a      	strb	r2, [r3, #12]
			uxOptionsLength += prvTCPSetTimeStamp( xOptionsLength, pxSocket, pxTCPHeader );
		}
	}
	#endif	/* ipconfigUSE_TCP_TIMESTAMPS == 1 */

	return uxOptionsLength;
 800d57a:	697b      	ldr	r3, [r7, #20]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3718      	adds	r7, #24
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <prvHandleSynReceived>:
 * Called from the states: eSYN_RECEIVED and eCONNECT_SYN
 * If the flags received are correct, the socket will move to eESTABLISHED.
 */
static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b08c      	sub	sp, #48	; 0x30
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	607a      	str	r2, [r7, #4]
 800d590:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	699b      	ldr	r3, [r3, #24]
 800d598:	627b      	str	r3, [r7, #36]	; 0x24
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800d59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59c:	3322      	adds	r3, #34	; 0x22
 800d59e:	623b      	str	r3, [r7, #32]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	33dc      	adds	r3, #220	; 0xdc
 800d5a4:	61fb      	str	r3, [r7, #28]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800d5a6:	6a3b      	ldr	r3, [r7, #32]
 800d5a8:	7b5b      	ldrb	r3, [r3, #13]
 800d5aa:	76fb      	strb	r3, [r7, #27]
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800d5ac:	6a3b      	ldr	r3, [r7, #32]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	061a      	lsls	r2, r3, #24
 800d5b2:	6a3b      	ldr	r3, [r7, #32]
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	021b      	lsls	r3, r3, #8
 800d5b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d5bc:	431a      	orrs	r2, r3
 800d5be:	6a3b      	ldr	r3, [r7, #32]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	0a1b      	lsrs	r3, r3, #8
 800d5c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d5c8:	431a      	orrs	r2, r3
 800d5ca:	6a3b      	ldr	r3, [r7, #32]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	0e1b      	lsrs	r3, r3, #24
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	617b      	str	r3, [r7, #20]
BaseType_t xSendLength = 0;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Either expect a ACK or a SYN+ACK. */
	uint16_t usExpect = ( uint16_t ) ipTCP_FLAG_ACK;
 800d5d8:	2310      	movs	r3, #16
 800d5da:	857b      	strh	r3, [r7, #42]	; 0x2a
	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d5e2:	2b02      	cmp	r3, #2
 800d5e4:	d103      	bne.n	800d5ee <prvHandleSynReceived+0x6a>
	{
		usExpect |= ( uint16_t ) ipTCP_FLAG_SYN;
 800d5e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d5e8:	f043 0302 	orr.w	r3, r3, #2
 800d5ec:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	if( ( ucTCPFlags & 0x17u ) != usExpect )
 800d5ee:	7efb      	ldrb	r3, [r7, #27]
 800d5f0:	f003 0217 	and.w	r2, r3, #23
 800d5f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d016      	beq.n	800d628 <prvHandleSynReceived+0xa4>
		/* eSYN_RECEIVED: flags 0010 expected, not 0002. */
		/* eSYN_RECEIVED: flags ACK  expected, not SYN. */
		FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
			pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ? "eSYN_RECEIVED" : "eCONNECT_SYN",
			usExpect, ucTCPFlags ) );
		vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d5fa:	2108      	movs	r1, #8
 800d5fc:	68f8      	ldr	r0, [r7, #12]
 800d5fe:	f7ff fa98 	bl	800cb32 <vTCPStateChange>
		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
 800d602:	6a3b      	ldr	r3, [r7, #32]
 800d604:	7b5b      	ldrb	r3, [r3, #13]
 800d606:	f043 0304 	orr.w	r3, r3, #4
 800d60a:	b2da      	uxtb	r2, r3
 800d60c:	6a3b      	ldr	r3, [r7, #32]
 800d60e:	735a      	strb	r2, [r3, #13]
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	3328      	adds	r3, #40	; 0x28
 800d614:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	3314      	adds	r3, #20
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	b2da      	uxtb	r2, r3
 800d622:	6a3b      	ldr	r3, [r7, #32]
 800d624:	731a      	strb	r2, [r3, #12]
 800d626:	e069      	b.n	800d6fc <prvHandleSynReceived+0x178>
	}
	else
	{
		pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800d62c:	69fb      	ldr	r3, [r7, #28]
 800d62e:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

		if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d642:	2b02      	cmp	r3, #2
 800d644:	d125      	bne.n	800d692 <prvHandleSynReceived+0x10e>
		{
			TCPPacket_t *pxLastTCPPacket = ( TCPPacket_t * ) ( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	3382      	adds	r3, #130	; 0x82
 800d64a:	613b      	str	r3, [r7, #16]

			/* Clear the SYN flag in lastPacket. */
			pxLastTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK;
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	2210      	movs	r2, #16
 800d650:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

			/* This socket was the one connecting actively so now perofmr the
			synchronisation. */
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
				ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usCurMSS );
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800d666:	6979      	ldr	r1, [r7, #20]
 800d668:	f001 f892 	bl	800e790 <vTCPWindowInit>
			pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	1c5a      	adds	r2, r3, #1
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	619a      	str	r2, [r3, #24]
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	699a      	ldr	r2, [r3, #24]
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	611a      	str	r2, [r3, #16]
			pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	6a1b      	ldr	r3, [r3, #32]
 800d680:	1c5a      	adds	r2, r3, #1
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	621a      	str	r2, [r3, #32]
			pxTCPWindow->ulNextTxSequenceNumber++;
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d68a:	1c5a      	adds	r2, r3, #1
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	635a      	str	r2, [r3, #52]	; 0x34
 800d690:	e005      	b.n	800d69e <prvHandleSynReceived+0x11a>
		}
		else if( ulReceiveLength == 0u )
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d102      	bne.n	800d69e <prvHandleSynReceived+0x11a>
		{
			pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	697a      	ldr	r2, [r7, #20]
 800d69c:	611a      	str	r2, [r3, #16]
		}

		/* The SYN+ACK has been confirmed, increase the next sequence number by
		1. */
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u;
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	69db      	ldr	r3, [r3, #28]
 800d6a2:	1c5a      	adds	r2, r3, #1
 800d6a4:	69fb      	ldr	r3, [r7, #28]
 800d6a6:	62da      	str	r2, [r3, #44]	; 0x2c
				pxSocket->u.xTCP.usRemotePort,
				( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
		}
		#endif /* ipconfigUSE_TCP_WIN */

		if( ( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0u ) )
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d6ae:	2b02      	cmp	r3, #2
 800d6b0:	d002      	beq.n	800d6b8 <prvHandleSynReceived+0x134>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00d      	beq.n	800d6d4 <prvHandleSynReceived+0x150>
		{
			pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800d6b8:	6a3b      	ldr	r3, [r7, #32]
 800d6ba:	2210      	movs	r2, #16
 800d6bc:	735a      	strb	r2, [r3, #13]
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	3328      	adds	r3, #40	; 0x28
 800d6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	3314      	adds	r3, #20
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	6a3b      	ldr	r3, [r7, #32]
 800d6d2:	731a      	strb	r2, [r3, #12]
		}

		if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d6da:	f003 0310 	and.w	r3, r3, #16
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d107      	bne.n	800d6f4 <prvHandleSynReceived+0x170>
		{
			/* The other party did not send a scaling factor.
			A shifting factor in this side must be canceled. */
			pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		}
		/* This was the third step of connecting: SYN, SYN+ACK, ACK	so now the
		connection is established. */
		vTCPStateChange( pxSocket, eESTABLISHED );
 800d6f4:	2105      	movs	r1, #5
 800d6f6:	68f8      	ldr	r0, [r7, #12]
 800d6f8:	f7ff fa1b 	bl	800cb32 <vTCPStateChange>
	}

	return xSendLength;
 800d6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3730      	adds	r7, #48	; 0x30
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <prvHandleEstablished>:
 * the code will check if it may be accepted, i.e. if all expected data has been
 * completely received.
 */
static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b092      	sub	sp, #72	; 0x48
 800d70a:	af02      	add	r7, sp, #8
 800d70c:	60f8      	str	r0, [r7, #12]
 800d70e:	60b9      	str	r1, [r7, #8]
 800d710:	607a      	str	r2, [r7, #4]
 800d712:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	699b      	ldr	r3, [r3, #24]
 800d71a:	637b      	str	r3, [r7, #52]	; 0x34
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800d71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d71e:	3322      	adds	r3, #34	; 0x22
 800d720:	633b      	str	r3, [r7, #48]	; 0x30
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	33dc      	adds	r3, #220	; 0xdc
 800d726:	62fb      	str	r3, [r7, #44]	; 0x2c
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800d728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72a:	7b5b      	ldrb	r3, [r3, #13]
 800d72c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
 800d730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d732:	685b      	ldr	r3, [r3, #4]
 800d734:	061a      	lsls	r2, r3, #24
 800d736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	021b      	lsls	r3, r3, #8
 800d73c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d740:	431a      	orrs	r2, r3
 800d742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	0a1b      	lsrs	r3, r3, #8
 800d748:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d74c:	431a      	orrs	r2, r3
 800d74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	0e1b      	lsrs	r3, r3, #24
 800d754:	4313      	orrs	r3, r2
 800d756:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 800d758:	2300      	movs	r3, #0
 800d75a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d75c:	2300      	movs	r3, #0
 800d75e:	63bb      	str	r3, [r7, #56]	; 0x38
int32_t lDistance, lSendResult;

	/* Remember the window size the peer is advertising. */
	pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800d760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d762:	89db      	ldrh	r3, [r3, #14]
 800d764:	b29b      	uxth	r3, r3
 800d766:	021b      	lsls	r3, r3, #8
 800d768:	b21a      	sxth	r2, r3
 800d76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76c:	89db      	ldrh	r3, [r3, #14]
 800d76e:	b29b      	uxth	r3, r3
 800d770:	0a1b      	lsrs	r3, r3, #8
 800d772:	b29b      	uxth	r3, r3
 800d774:	b21b      	sxth	r3, r3
 800d776:	4313      	orrs	r3, r2
 800d778:	b21b      	sxth	r3, r3
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	461a      	mov	r2, r3
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	pxSocket->u.xTCP.ulWindowSize =
		( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d78a:	68fa      	ldr	r2, [r7, #12]
 800d78c:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800d790:	fa03 f202 	lsl.w	r2, r3, r2
	pxSocket->u.xTCP.ulWindowSize =
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	if( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_ACK ) != 0u )
 800d79a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d79e:	f003 0310 	and.w	r3, r3, #16
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d040      	beq.n	800d828 <prvHandleEstablished+0x122>
	{
		ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulAckNr ) );
 800d7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7a8:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800d7ac:	061a      	lsls	r2, r3, #24
 800d7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7b0:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800d7b4:	021b      	lsls	r3, r3, #8
 800d7b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d7ba:	431a      	orrs	r2, r3
 800d7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7be:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800d7c2:	0a1b      	lsrs	r3, r3, #8
 800d7c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d7c8:	431a      	orrs	r2, r3
 800d7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7cc:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800d7d0:	0e1b      	lsrs	r3, r3, #24
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7d8:	f001 fcd2 	bl	800f180 <ulTCPWindowTxAck>
 800d7dc:	6238      	str	r0, [r7, #32]

		/* ulTCPWindowTxAck() returns the number of bytes which have been acked,
		starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
		txStream. */
		if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0u ) )
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d020      	beq.n	800d828 <prvHandleEstablished+0x122>
 800d7e6:	6a3b      	ldr	r3, [r7, #32]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d01d      	beq.n	800d828 <prvHandleEstablished+0x122>
		{
			/* Just advancing the tail index, 'ulCount' bytes have been
			confirmed, and because there is new space in the txStream, the
			user/owner should be woken up. */
			/* _HT_ : only in case the socket's waiting? */
			if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0u, NULL, ( size_t ) ulCount, pdFALSE ) != 0u )
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	9300      	str	r3, [sp, #0]
 800d7f4:	6a3b      	ldr	r3, [r7, #32]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	f7fe fa88 	bl	800bd0e <uxStreamBufferGet>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b00      	cmp	r3, #0
 800d802:	d011      	beq.n	800d828 <prvHandleEstablished+0x122>
			{
				pxSocket->xEventBits |= eSOCKET_SEND;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f043 0202 	orr.w	r2, r3, #2
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	601a      	str	r2, [r3, #0]

				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
				{
					if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d814:	f003 0302 	and.w	r3, r3, #2
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d005      	beq.n	800d828 <prvHandleEstablished+0x122>
					{
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	601a      	str	r2, [r3, #0]
		}
	}

	/* If this socket has a stream for transmission, add the data to the
	outgoing segment(s). */
	if( pxSocket->u.xTCP.txStream != NULL )
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d002      	beq.n	800d836 <prvHandleEstablished+0x130>
	{
		prvTCPAddTxData( pxSocket );
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	f7ff fc9f 	bl	800d174 <prvTCPAddTxData>
	}

	pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d838:	6a1a      	ldr	r2, [r3, #32]
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u ) )
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d846:	f003 0320 	and.w	r3, r3, #32
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d105      	bne.n	800d85c <prvHandleEstablished+0x156>
 800d850:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d854:	f003 0301 	and.w	r3, r3, #1
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d037      	beq.n	800d8cc <prvHandleEstablished+0x1c6>
	{
		/* Peer is requesting to stop, see if we're really finished. */
		xMayClose = pdTRUE;
 800d85c:	2301      	movs	r3, #1
 800d85e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Checks are only necessary if we haven't sent a FIN yet. */
		if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d11c      	bne.n	800d8aa <prvHandleEstablished+0x1a4>
		{
			/* xTCPWindowTxDone returns true when all Tx queues are empty. */
			bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 800d870:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d872:	f000 fe9b 	bl	800e5ac <xTCPWindowRxEmpty>
 800d876:	61f8      	str	r0, [r7, #28]
			bTxDone     = xTCPWindowTxDone( pxTCPWindow );
 800d878:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d87a:	f001 f9db 	bl	800ec34 <xTCPWindowTxDone>
 800d87e:	61b8      	str	r0, [r7, #24]

			if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d002      	beq.n	800d88c <prvHandleEstablished+0x186>
 800d886:	69bb      	ldr	r3, [r7, #24]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d102      	bne.n	800d892 <prvHandleEstablished+0x18c>
				/* Refusing FIN: Rx incomp 1 optlen 4 tx done 1. */
				FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
					pxSocket->usLocalPort,
					pxSocket->u.xTCP.usRemotePort,
					bRxComplete, bTxDone ) );
				xMayClose = pdFALSE;
 800d88c:	2300      	movs	r3, #0
 800d88e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d890:	e00b      	b.n	800d8aa <prvHandleEstablished+0x1a4>
			}
			else
			{
				lDistance = ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800d892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	441a      	add	r2, r3
 800d898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89a:	691b      	ldr	r3, [r3, #16]
 800d89c:	1ad3      	subs	r3, r2, r3
 800d89e:	617b      	str	r3, [r7, #20]

				if( lDistance > 1 )
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	dd01      	ble.n	800d8aa <prvHandleEstablished+0x1a4>
				{
					FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
						lDistance, pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
						pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );

					xMayClose = pdFALSE;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	63bb      	str	r3, [r7, #56]	; 0x38
			FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
				xMayClose, ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber, ulReceiveLength,
				pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) );
		}

		if( xMayClose != pdFALSE )
 800d8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00d      	beq.n	800d8cc <prvHandleEstablished+0x1c6>
		{
			pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d8b6:	f043 0320 	orr.w	r3, r3, #32
 800d8ba:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f7ff fc7f 	bl	800d1c8 <prvTCPHandleFin>
 800d8ca:	63f8      	str	r0, [r7, #60]	; 0x3c
		}
	}

	if( xMayClose == pdFALSE )
 800d8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d12a      	bne.n	800d928 <prvHandleEstablished+0x222>
	{
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800d8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d4:	2210      	movs	r2, #16
 800d8d6:	735a      	strb	r2, [r3, #13]

		if( ulReceiveLength != 0u )
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d016      	beq.n	800d90c <prvHandleEstablished+0x206>
		{
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	3328      	adds	r3, #40	; 0x28
 800d8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
			/* TCP-offsett equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	3314      	adds	r3, #20
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	b2da      	uxtb	r2, r3
 800d8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f2:	731a      	strb	r2, [r3, #12]

			if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	2b00      	cmp	r3, #0
 800d902:	d003      	beq.n	800d90c <prvHandleEstablished+0x206>
			{
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90a:	621a      	str	r2, [r3, #32]
		/* Now get data to be transmitted. */
		/* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
		can not	send-out both TCP options and also a full packet. Sending
		options (SACK) is always more urgent than sending data, which can be
		sent later. */
		if( uxOptionsLength == 0u )
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d10a      	bne.n	800d928 <prvHandleEstablished+0x222>
		{
			/* prvTCPPrepareSend might allocate a bigger network buffer, if
			necessary. */
			lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800d912:	683a      	ldr	r2, [r7, #0]
 800d914:	68b9      	ldr	r1, [r7, #8]
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f7ff fa46 	bl	800cda8 <prvTCPPrepareSend>
 800d91c:	6138      	str	r0, [r7, #16]
			if( lSendResult > 0 )
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	2b00      	cmp	r3, #0
 800d922:	dd01      	ble.n	800d928 <prvHandleEstablished+0x222>
			{
				xSendLength = ( BaseType_t ) lSendResult;
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
	}

	return xSendLength;
 800d928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3740      	adds	r7, #64	; 0x40
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
	...

0800d934 <prvSendData>:
 * ipconfigUSE_TCP_WIN is defined, and if only an ACK must be sent, it will be
 * checked if it would better be postponed for efficiency.
 */
static BaseType_t prvSendData( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, BaseType_t xSendLength )
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b08a      	sub	sp, #40	; 0x28
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
 800d940:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	699b      	ldr	r3, [r3, #24]
 800d948:	623b      	str	r3, [r7, #32]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800d94a:	6a3b      	ldr	r3, [r7, #32]
 800d94c:	3322      	adds	r3, #34	; 0x22
 800d94e:	61fb      	str	r3, [r7, #28]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	33dc      	adds	r3, #220	; 0xdc
 800d954:	61bb      	str	r3, [r7, #24]
		const int32_t lMinLength = 0;
	#else
		int32_t lMinLength;
	#endif
#endif
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 800d956:	69bb      	ldr	r3, [r7, #24]
 800d958:	685a      	ldr	r2, [r3, #4]
									 ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	6919      	ldr	r1, [r3, #16]
 800d95e:	69bb      	ldr	r3, [r7, #24]
 800d960:	699b      	ldr	r3, [r3, #24]
 800d962:	1acb      	subs	r3, r1, r3
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 800d964:	441a      	add	r2, r3
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	/* Free space in rxStream. */
	if( pxSocket->u.xTCP.rxStream != NULL )
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d970:	2b00      	cmp	r3, #0
 800d972:	d006      	beq.n	800d982 <prvSendData+0x4e>
	{
		ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d978:	4618      	mov	r0, r3
 800d97a:	f7fe fabd 	bl	800bef8 <uxStreamBufferFrontSpace>
 800d97e:	6278      	str	r0, [r7, #36]	; 0x24
 800d980:	e002      	b.n	800d988 <prvSendData+0x54>
	}
	else
	{
		ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d986:	627b      	str	r3, [r7, #36]	; 0x24
	}

	pxSocket->u.xTCP.ulRxCurWinSize = FreeRTOS_min_uint32( ulFrontSpace, pxSocket->u.xTCP.ulRxCurWinSize );
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800d98e:	4619      	mov	r1, r3
 800d990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d992:	f7fe fa50 	bl	800be36 <FreeRTOS_min_uint32>
 800d996:	4602      	mov	r2, r0
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	/* Set the time-out field, so that we'll be called by the IP-task in case no
	next message will be received. */
	lRxSpace = (int32_t)( pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9a2:	69bb      	ldr	r3, [r7, #24]
 800d9a4:	691b      	ldr	r3, [r3, #16]
 800d9a6:	1ad3      	subs	r3, r2, r3
 800d9a8:	617b      	str	r3, [r7, #20]
	#if ipconfigUSE_TCP_WIN == 1
	{

		#if( ipconfigTCP_ACK_EARLIER_PACKET != 0 )
		{
			lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d9b0:	005b      	lsls	r3, r3, #1
 800d9b2:	613b      	str	r3, [r7, #16]
		}
		#endif /* ipconfigTCP_ACK_EARLIER_PACKET */

		/* In case we're receiving data continuously, we might postpone sending
		an ACK to gain performance. */
		if( ( ulReceiveLength > 0 ) &&							/* Data was sent to this socket. */
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d04f      	beq.n	800da5a <prvSendData+0x126>
 800d9ba:	697a      	ldr	r2, [r7, #20]
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	db4b      	blt.n	800da5a <prvSendData+0x126>
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d9c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9cc:	b2db      	uxtb	r3, r3
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d143      	bne.n	800da5a <prvSendData+0x126>
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	2b28      	cmp	r3, #40	; 0x28
 800d9d6:	d140      	bne.n	800da5a <prvSendData+0x126>
			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
 800d9de:	2b05      	cmp	r3, #5
 800d9e0:	d13b      	bne.n	800da5a <prvSendData+0x126>
			( pxTCPHeader->ucTCPFlags == ipTCP_FLAG_ACK ) )		/* There are no other flags than an ACK. */
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	7b5b      	ldrb	r3, [r3, #13]
			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 800d9e6:	2b10      	cmp	r3, #16
 800d9e8:	d137      	bne.n	800da5a <prvSendData+0x126>
		{
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d00c      	beq.n	800da10 <prvSendData+0xdc>
			{
				/* There was still a delayed in queue, delete it. */
				if( pxSocket->u.xTCP.pxAckMessage != 0 )
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d004      	beq.n	800da08 <prvSendData+0xd4>
				{
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da02:	4618      	mov	r0, r3
 800da04:	f001 fe4e 	bl	800f6a4 <vReleaseNetworkBufferAndDescriptor>
				}

				pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	681a      	ldr	r2, [r3, #0]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	67da      	str	r2, [r3, #124]	; 0x7c
			}
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800da16:	461a      	mov	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d807      	bhi.n	800da2e <prvSendData+0xfa>
				( lRxSpace < ( int32_t ) ( 2U * pxSocket->u.xTCP.usCurMSS ) ) )	/* There are less than 2 x MSS space in the Rx buffer. */
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800da24:	005b      	lsls	r3, r3, #1
 800da26:	461a      	mov	r2, r3
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	dd04      	ble.n	800da38 <prvSendData+0x104>
			{
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_SHORT_DELAY_MS );
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2202      	movs	r2, #2
 800da32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800da36:	e003      	b.n	800da40 <prvSendData+0x10c>
			else
			{
				/* Normally a delayed ACK should wait 200 ms for a next incoming
				packet.  Only wait 20 ms here to gain performance.  A slow ACK
				for full-size message. */
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_LONGER_DELAY_MS );
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2214      	movs	r2, #20
 800da3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			}

			if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE ) )
 800da40:	4b1a      	ldr	r3, [pc, #104]	; (800daac <prvSendData+0x178>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b01      	cmp	r3, #1
 800da46:	dd02      	ble.n	800da4e <prvSendData+0x11a>
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800da4c:	2b17      	cmp	r3, #23
					pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
					xSendLength,
					pxSocket->u.xTCP.usTimeout, lRxSpace ) );
			}

			*ppxNetworkBuffer = NULL;
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	2200      	movs	r2, #0
 800da52:	601a      	str	r2, [r3, #0]
			xSendLength = 0;
 800da54:	2300      	movs	r3, #0
 800da56:	603b      	str	r3, [r7, #0]
 800da58:	e011      	b.n	800da7e <prvSendData+0x14a>
		}
		else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00d      	beq.n	800da7e <prvSendData+0x14a>
		{
			/* As an ACK is not being delayed, remove any earlier delayed ACK
			message. */
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d004      	beq.n	800da78 <prvSendData+0x144>
			{
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da72:	4618      	mov	r0, r3
 800da74:	f001 fe16 	bl	800f6a4 <vReleaseNetworkBufferAndDescriptor>
			}

			pxSocket->u.xTCP.pxAckMessage = NULL;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2200      	movs	r2, #0
 800da7c:	67da      	str	r2, [r3, #124]	; 0x7c
		( void ) pxTCPHeader;
		( void ) lRxSpace;
	}
	#endif /* ipconfigUSE_TCP_WIN */

	if( xSendLength != 0 )
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00d      	beq.n	800daa0 <prvSendData+0x16c>
	{
		if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE ) )
 800da84:	4b09      	ldr	r3, [pc, #36]	; (800daac <prvSendData+0x178>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b01      	cmp	r3, #1
 800da8a:	dd02      	ble.n	800da92 <prvSendData+0x15e>
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800da90:	2b17      	cmp	r3, #23
				xSendLength ) );
		}

		/* Set the parameter 'xReleaseAfterSend' to the value of
		ipconfigZERO_COPY_TX_DRIVER. */
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	6819      	ldr	r1, [r3, #0]
 800da96:	683a      	ldr	r2, [r7, #0]
 800da98:	2300      	movs	r3, #0
 800da9a:	68f8      	ldr	r0, [r7, #12]
 800da9c:	f7fe fc16 	bl	800c2cc <prvTCPReturnPacket>
			*ppxNetworkBuffer = NULL;
		}
		#endif
	}

	return xSendLength;
 800daa0:	683b      	ldr	r3, [r7, #0]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3728      	adds	r7, #40	; 0x28
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	2000482c 	.word	0x2000482c

0800dab0 <prvTCPHandleState>:
 *
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer )
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b08c      	sub	sp, #48	; 0x30
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	699b      	ldr	r3, [r3, #24]
 800dac0:	62bb      	str	r3, [r7, #40]	; 0x28
TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
 800dac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac4:	3322      	adds	r3, #34	; 0x22
 800dac6:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t xSendLength = 0;
 800dac8:	2300      	movs	r3, #0
 800daca:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t ulReceiveLength;	/* Number of bytes contained in the TCP message. */
uint8_t *pucRecvData;
uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
 800dacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	061a      	lsls	r2, r3, #24
 800dad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	021b      	lsls	r3, r3, #8
 800dad8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dadc:	431a      	orrs	r2, r3
 800dade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	0a1b      	lsrs	r3, r3, #8
 800dae4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dae8:	431a      	orrs	r2, r3
 800daea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	0e1b      	lsrs	r3, r3, #24
 800daf0:	4313      	orrs	r3, r2
 800daf2:	623b      	str	r3, [r7, #32]
	/* xOptionsLength: the size of the options to be sent (always a multiple of
	4 bytes)
	1. in the SYN phase, we shall communicate the MSS
	2. in case of a SACK, Selective ACK, ack a segment which comes in
	out-of-order. */
UBaseType_t uxOptionsLength = 0u;
 800daf4:	2300      	movs	r3, #0
 800daf6:	61fb      	str	r3, [r7, #28]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800daf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafa:	7b5b      	ldrb	r3, [r3, #13]
 800dafc:	76fb      	strb	r3, [r7, #27]
TCPWindow_t *pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	33dc      	adds	r3, #220	; 0xdc
 800db02:	617b      	str	r3, [r7, #20]

	/* First get the length and the position of the received data, if any.
	pucRecvData will point to the first byte of the TCP payload. */
	ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f107 020c 	add.w	r2, r7, #12
 800db0c:	4611      	mov	r1, r2
 800db0e:	4618      	mov	r0, r3
 800db10:	f7ff fbff 	bl	800d312 <prvCheckRxData>
 800db14:	4603      	mov	r3, r0
 800db16:	613b      	str	r3, [r7, #16]

	if( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED )
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800db1e:	2b04      	cmp	r3, #4
 800db20:	d90c      	bls.n	800db3c <prvTCPHandleState+0x8c>
	{
		if ( pxTCPWindow->rx.ulCurrentSequenceNumber == ulSequenceNumber + 1u )
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	691a      	ldr	r2, [r3, #16]
 800db26:	6a3b      	ldr	r3, [r7, #32]
 800db28:	3301      	adds	r3, #1
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d106      	bne.n	800db3c <prvTCPHandleState+0x8c>
		{
			/* This is most probably a keep-alive message from peer.  Setting
			'bWinChange' doesn't cause a window-size-change, the flag is used
			here to force sending an immediate ACK. */
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800db34:	f043 0301 	orr.w	r3, r3, #1
 800db38:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		}
	}

	/* Keep track of the highest sequence number that might be expected within
	this connection. */
	if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0 )
 800db3c:	6a3a      	ldr	r2, [r7, #32]
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	441a      	add	r2, r3
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	699b      	ldr	r3, [r3, #24]
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	2b00      	cmp	r3, #0
 800db4a:	dd04      	ble.n	800db56 <prvTCPHandleState+0xa6>
	{
		pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800db4c:	6a3a      	ldr	r2, [r7, #32]
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	441a      	add	r2, r3
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	619a      	str	r2, [r3, #24]
	}

	/* Storing data may result in a fatal error if malloc() fails. */
	if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 800db56:	68f9      	ldr	r1, [r7, #12]
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7ff fc3e 	bl	800d3e0 <prvStoreRxData>
 800db64:	4603      	mov	r3, r0
 800db66:	2b00      	cmp	r3, #0
 800db68:	da03      	bge.n	800db72 <prvTCPHandleState+0xc2>
	{
		xSendLength = -1;
 800db6a:	f04f 33ff 	mov.w	r3, #4294967295
 800db6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db70:	e09e      	b.n	800dcb0 <prvTCPHandleState+0x200>
	}
	else
	{
		uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	4619      	mov	r1, r3
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f7ff fca5 	bl	800d4c8 <prvSetOptions>
 800db7e:	61f8      	str	r0, [r7, #28]

		if( ( pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) )
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800db86:	2b04      	cmp	r3, #4
 800db88:	d108      	bne.n	800db9c <prvTCPHandleState+0xec>
 800db8a:	7efb      	ldrb	r3, [r7, #27]
 800db8c:	f003 031f 	and.w	r3, r3, #31
 800db90:	2b02      	cmp	r3, #2
 800db92:	d103      	bne.n	800db9c <prvTCPHandleState+0xec>

			/* In eSYN_RECEIVED a simple ACK is expected, but apparently the
			'SYN+ACK' didn't arrive.  Step back to the previous state in which
			a first incoming SYN is handled.  The SYN was counted already so
			decrease it first. */
			vTCPStateChange( pxSocket, eSYN_FIRST );
 800db94:	2103      	movs	r1, #3
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f7fe ffcb 	bl	800cb32 <vTCPStateChange>
		}

		if( ( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800db9c:	7efb      	ldrb	r3, [r7, #27]
 800db9e:	f003 0301 	and.w	r3, r3, #1
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d022      	beq.n	800dbec <prvTCPHandleState+0x13c>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dbac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d11a      	bne.n	800dbec <prvTCPHandleState+0x13c>
		{
			/* It's the first time a FIN has been received, remember its
			sequence number. */
			pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800dbb6:	6a3a      	ldr	r2, [r7, #32]
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	441a      	add	r2, r3
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	615a      	str	r2, [r3, #20]
			pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800dbc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbca:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

			/* Was peer the first one to send a FIN? */
			if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dbd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d106      	bne.n	800dbec <prvTCPHandleState+0x13c>
			{
				/* If so, don't send the-last-ACK. */
				pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800dbe4:	f043 0302 	orr.w	r3, r3, #2
 800dbe8:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			}
		}

		switch (pxSocket->u.xTCP.ucTCPState)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dbf2:	2b0b      	cmp	r3, #11
 800dbf4:	d85b      	bhi.n	800dcae <prvTCPHandleState+0x1fe>
 800dbf6:	a201      	add	r2, pc, #4	; (adr r2, 800dbfc <prvTCPHandleState+0x14c>)
 800dbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbfc:	0800dcaf 	.word	0x0800dcaf
 800dc00:	0800dcaf 	.word	0x0800dcaf
 800dc04:	0800dc7f 	.word	0x0800dc7f
 800dc08:	0800dc2d 	.word	0x0800dc2d
 800dc0c:	0800dc7f 	.word	0x0800dc7f
 800dc10:	0800dc8f 	.word	0x0800dc8f
 800dc14:	0800dc9f 	.word	0x0800dc9f
 800dc18:	0800dc9f 	.word	0x0800dc9f
 800dc1c:	0800dcaf 	.word	0x0800dcaf
 800dc20:	0800dcaf 	.word	0x0800dcaf
 800dc24:	0800dc9f 	.word	0x0800dc9f
 800dc28:	0800dcaf 	.word	0x0800dcaf
							socket. */
			{
				/* A new socket has been created, reply with a SYN+ACK.
				Acknowledge with seq+1 because the SYN is seen as pseudo data
				with len = 1. */
				uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPPacket );
 800dc2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f7fe ff07 	bl	800ca42 <prvSetSynAckOptions>
 800dc34:	61f8      	str	r0, [r7, #28]
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_SYN | ipTCP_FLAG_ACK;
 800dc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc38:	2212      	movs	r2, #18
 800dc3a:	735a      	strb	r2, [r3, #13]

				xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	3328      	adds	r3, #40	; 0x28
 800dc40:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
				xOptionsLength is a multiple of 4.  The complete expression is:
				ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + xOptionsLength ) / 4 ) << 4 */
				pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	3314      	adds	r3, #20
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	b2da      	uxtb	r2, r3
 800dc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc50:	731a      	strb	r2, [r3, #12]
				vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800dc52:	2104      	movs	r1, #4
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f7fe ff6c 	bl	800cb32 <vTCPStateChange>

				pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 800dc5a:	6a3b      	ldr	r3, [r7, #32]
 800dc5c:	1c5a      	adds	r2, r3, #1
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	619a      	str	r2, [r3, #24]
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	699a      	ldr	r2, [r3, #24]
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	611a      	str	r2, [r3, #16]
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u; /* because we send a TCP_SYN. */
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	69db      	ldr	r3, [r3, #28]
 800dc6e:	1c5a      	adds	r2, r3, #1
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	635a      	str	r2, [r3, #52]	; 0x34
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	621a      	str	r2, [r3, #32]
			}
			break;
 800dc7c:	e018      	b.n	800dcb0 <prvTCPHandleState+0x200>
		case eCONNECT_SYN:	/* (client) also called SYN_SENT: we've just send a
							SYN, expect	a SYN+ACK and send a ACK now. */
			/* Fall through */
		case eSYN_RECEIVED:	/* (server) we've had a SYN, replied with SYN+SCK
							expect a ACK and do nothing. */
			xSendLength = prvHandleSynReceived( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800dc7e:	69fb      	ldr	r3, [r7, #28]
 800dc80:	693a      	ldr	r2, [r7, #16]
 800dc82:	6839      	ldr	r1, [r7, #0]
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f7ff fc7d 	bl	800d584 <prvHandleSynReceived>
 800dc8a:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800dc8c:	e010      	b.n	800dcb0 <prvTCPHandleState+0x200>
		case eESTABLISHED:	/* (server + client) an open connection, data
							received can be	delivered to the user. The normal
							state for the data transfer phase of the connection
							The closing states are also handled here with the
							use of some flags. */
			xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	693a      	ldr	r2, [r7, #16]
 800dc92:	6839      	ldr	r1, [r7, #0]
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f7ff fd36 	bl	800d706 <prvHandleEstablished>
 800dc9a:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800dc9c:	e008      	b.n	800dcb0 <prvTCPHandleState+0x200>
			/* Fall through */
		case eFIN_WAIT_1:	/* (server + client) waiting for a connection termination request from the remote TCP,
							 * or an acknowledgement of the connection termination request previously sent. */
			/* Fall through */
		case eFIN_WAIT_2:	/* (server + client) waiting for a connection termination request from the remote TCP. */
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4619      	mov	r1, r3
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7ff fa8f 	bl	800d1c8 <prvTCPHandleFin>
 800dcaa:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800dcac:	e000      	b.n	800dcb0 <prvTCPHandleState+0x200>
							a MSL (maximum segment lifetime).]  These states are
							implemented implicitly by settings flags like
							'bFinSent', 'bFinRecv', and 'bFinAcked'. */
			break;
		default:
			break;
 800dcae:	bf00      	nop
		}
	}

	if( xSendLength > 0 )
 800dcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	dd06      	ble.n	800dcc4 <prvTCPHandleState+0x214>
	{
		xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 800dcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb8:	693a      	ldr	r2, [r7, #16]
 800dcba:	6839      	ldr	r1, [r7, #0]
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f7ff fe39 	bl	800d934 <prvSendData>
 800dcc2:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	return xSendLength;
 800dcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3730      	adds	r7, #48	; 0x30
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop

0800dcd0 <prvTCPSendReset>:
/*-----------------------------------------------------------*/

static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
	#if( ipconfigIGNORE_UNKNOWN_PACKETS == 0 )
	{
	TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	699b      	ldr	r3, [r3, #24]
 800dcdc:	60fb      	str	r3, [r7, #12]
	const BaseType_t xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + 0u );	/* Plus 0 options. */
 800dcde:	2328      	movs	r3, #40	; 0x28
 800dce0:	60bb      	str	r3, [r7, #8]

		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_RST;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2214      	movs	r2, #20
 800dce6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER + 0u ) << 2;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2250      	movs	r2, #80	; 0x50
 800dcee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		prvTCPReturnPacket( NULL, pxNetworkBuffer, ( uint32_t ) xSendLength, pdFALSE );
 800dcf2:	68ba      	ldr	r2, [r7, #8]
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	6879      	ldr	r1, [r7, #4]
 800dcf8:	2000      	movs	r0, #0
 800dcfa:	f7fe fae7 	bl	800c2cc <prvTCPReturnPacket>

	/* Remove compiler warnings if ipconfigIGNORE_UNKNOWN_PACKETS == 1. */
	( void ) pxNetworkBuffer;

	/* The packet was not consumed. */
	return pdFAIL;
 800dcfe:	2300      	movs	r3, #0
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3710      	adds	r7, #16
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}

0800dd08 <prvSocketSetMSS>:
/*-----------------------------------------------------------*/

static void prvSocketSetMSS( FreeRTOS_Socket_t *pxSocket )
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
uint32_t ulMSS = ipconfigTCP_MSS;
 800dd10:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800dd14:	60fb      	str	r3, [r7, #12]

	if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0ul )
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd1a:	061a      	lsls	r2, r3, #24
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd20:	021b      	lsls	r3, r3, #8
 800dd22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd26:	431a      	orrs	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd2c:	0a1b      	lsrs	r3, r3, #8
 800dd2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dd32:	431a      	orrs	r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd38:	0e1b      	lsrs	r3, r3, #24
 800dd3a:	431a      	orrs	r2, r3
 800dd3c:	4b0e      	ldr	r3, [pc, #56]	; (800dd78 <prvSocketSetMSS+0x70>)
 800dd3e:	695b      	ldr	r3, [r3, #20]
 800dd40:	405a      	eors	r2, r3
 800dd42:	4b0e      	ldr	r3, [pc, #56]	; (800dd7c <prvSocketSetMSS+0x74>)
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	4013      	ands	r3, r2
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d005      	beq.n	800dd58 <prvSocketSetMSS+0x50>
	{
		/* Data for this peer will pass through a router, and maybe through
		the internet.  Limit the MSS to 1400 bytes or less. */
		ulMSS = FreeRTOS_min_uint32( ( uint32_t ) REDUCED_MSS_THROUGH_INTERNET, ulMSS );
 800dd4c:	68f9      	ldr	r1, [r7, #12]
 800dd4e:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800dd52:	f7fe f870 	bl	800be36 <FreeRTOS_min_uint32>
 800dd56:	60f8      	str	r0, [r7, #12]
	}

	FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );

	pxSocket->u.xTCP.usInitMSS = pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	b29a      	uxth	r2, r3
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800dd6e:	bf00      	nop
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	200000a0 	.word	0x200000a0
 800dd7c:	20004774 	.word	0x20004774

0800dd80 <xProcessReceivedTCPPacket>:
 *		prvTCPSendRepeated()
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC
*/
BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b08c      	sub	sp, #48	; 0x30
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
FreeRTOS_Socket_t *pxSocket;
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	699b      	ldr	r3, [r3, #24]
 800dd8c:	627b      	str	r3, [r7, #36]	; 0x24
uint16_t ucTCPFlags = pxTCPPacket->xTCPHeader.ucTCPFlags;
 800dd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dd94:	847b      	strh	r3, [r7, #34]	; 0x22
uint32_t ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 800dd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd98:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800dd9c:	061a      	lsls	r2, r3, #24
 800dd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda0:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800dda4:	021b      	lsls	r3, r3, #8
 800dda6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ddaa:	431a      	orrs	r2, r3
 800ddac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddae:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800ddb2:	0a1b      	lsrs	r3, r3, #8
 800ddb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ddb8:	431a      	orrs	r2, r3
 800ddba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddbc:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800ddc0:	0e1b      	lsrs	r3, r3, #24
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	61fb      	str	r3, [r7, #28]
uint16_t xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	021b      	lsls	r3, r3, #8
 800ddce:	b21a      	sxth	r2, r3
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	0a1b      	lsrs	r3, r3, #8
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	b21b      	sxth	r3, r3
 800dddc:	4313      	orrs	r3, r2
 800ddde:	b21b      	sxth	r3, r3
 800dde0:	837b      	strh	r3, [r7, #26]
uint32_t ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800dde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800dde8:	061a      	lsls	r2, r3, #24
 800ddea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddec:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ddf0:	021b      	lsls	r3, r3, #8
 800ddf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ddf6:	431a      	orrs	r2, r3
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfa:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ddfe:	0a1b      	lsrs	r3, r3, #8
 800de00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800de04:	431a      	orrs	r2, r3
 800de06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de08:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800de0c:	0e1b      	lsrs	r3, r3, #24
 800de0e:	4313      	orrs	r3, r2
 800de10:	617b      	str	r3, [r7, #20]
uint16_t xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800de12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de14:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800de16:	b29b      	uxth	r3, r3
 800de18:	021b      	lsls	r3, r3, #8
 800de1a:	b21a      	sxth	r2, r3
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800de20:	b29b      	uxth	r3, r3
 800de22:	0a1b      	lsrs	r3, r3, #8
 800de24:	b29b      	uxth	r3, r3
 800de26:	b21b      	sxth	r3, r3
 800de28:	4313      	orrs	r3, r2
 800de2a:	b21b      	sxth	r3, r3
 800de2c:	827b      	strh	r3, [r7, #18]
BaseType_t xResult = pdPASS;
 800de2e:	2301      	movs	r3, #1
 800de30:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Find the destination socket, and if not found: return a socket listing to
	the destination PORT. */
	pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 800de32:	8b79      	ldrh	r1, [r7, #26]
 800de34:	8a7b      	ldrh	r3, [r7, #18]
 800de36:	697a      	ldr	r2, [r7, #20]
 800de38:	69f8      	ldr	r0, [r7, #28]
 800de3a:	f7fd fb91 	bl	800b560 <pxTCPSocketLookup>
 800de3e:	62f8      	str	r0, [r7, #44]	; 0x2c

	if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE ) )
 800de40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de42:	2b00      	cmp	r3, #0
 800de44:	d008      	beq.n	800de58 <xProcessReceivedTCPPacket+0xd8>
 800de46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de48:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fe f8d1 	bl	800bff4 <prvTCPSocketIsActive>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d110      	bne.n	800de7a <xProcessReceivedTCPPacket+0xfa>
		the other party will get a ECONN error.  There are two exceptions:
		1) A packet that already has the RST flag set.
		2) A packet that only has the ACK flag set.
		A packet with only the ACK flag set might be the last ACK in
	 	a three-way hand-shake that closes a connection. */
		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
 800de58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de5a:	f003 031f 	and.w	r3, r3, #31
 800de5e:	2b10      	cmp	r3, #16
 800de60:	d008      	beq.n	800de74 <xProcessReceivedTCPPacket+0xf4>
			( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u ) )
 800de62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de64:	f003 0304 	and.w	r3, r3, #4
		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d103      	bne.n	800de74 <xProcessReceivedTCPPacket+0xf4>
		{
			prvTCPSendReset( pxNetworkBuffer );
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	4618      	mov	r0, r3
 800de70:	f7ff ff2e 	bl	800dcd0 <prvTCPSendReset>
		}

		/* The packet can't be handled. */
		xResult = pdFAIL;
 800de74:	2300      	movs	r3, #0
 800de76:	62bb      	str	r3, [r7, #40]	; 0x28
 800de78:	e04d      	b.n	800df16 <xProcessReceivedTCPPacket+0x196>
	}
	else
	{
		pxSocket->u.xTCP.ucRepCount = 0u;
 800de7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7c:	2200      	movs	r2, #0
 800de7e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

		if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800de82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de84:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d11c      	bne.n	800dec6 <xProcessReceivedTCPPacket+0x146>
		{
			/* The matching socket is in a listening state.  Test if the peer
			has set the SYN flag. */
			if( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_SYN )
 800de8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de8e:	f003 031f 	and.w	r3, r3, #31
 800de92:	2b02      	cmp	r3, #2
 800de94:	d00b      	beq.n	800deae <xProcessReceivedTCPPacket+0x12e>
				FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
					prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
				}
				#endif /* ipconfigHAS_DEBUG_PRINTF */

				if( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u )
 800de96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de98:	f003 0304 	and.w	r3, r3, #4
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d103      	bne.n	800dea8 <xProcessReceivedTCPPacket+0x128>
				{
					prvTCPSendReset( pxNetworkBuffer );
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7ff ff14 	bl	800dcd0 <prvTCPSendReset>
				}
				xResult = pdFAIL;
 800dea8:	2300      	movs	r3, #0
 800deaa:	62bb      	str	r3, [r7, #40]	; 0x28
 800deac:	e033      	b.n	800df16 <xProcessReceivedTCPPacket+0x196>
			else
			{
				/* prvHandleListen() will either return a newly created socket
				(if bReuseSocket is false), otherwise it returns the current
				socket which will later get connected. */
				pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	4619      	mov	r1, r3
 800deb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800deb4:	f000 f87e 	bl	800dfb4 <prvHandleListen>
 800deb8:	62f8      	str	r0, [r7, #44]	; 0x2c

				if( pxSocket == NULL )
 800deba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800debc:	2b00      	cmp	r3, #0
 800debe:	d12a      	bne.n	800df16 <xProcessReceivedTCPPacket+0x196>
				{
					xResult = pdFAIL;
 800dec0:	2300      	movs	r3, #0
 800dec2:	62bb      	str	r3, [r7, #40]	; 0x28
 800dec4:	e027      	b.n	800df16 <xProcessReceivedTCPPacket+0x196>
		}	/* if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN ). */
		else
		{
			/* This is not a socket in listening mode. Check for the RST
			flag. */
			if( ( ucTCPFlags & ipTCP_FLAG_RST ) != 0u )
 800dec6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dec8:	f003 0304 	and.w	r3, r3, #4
 800decc:	2b00      	cmp	r3, #0
 800dece:	d006      	beq.n	800dede <xProcessReceivedTCPPacket+0x15e>
			{
				/* The target socket is not in a listening state, any RST packet
				will cause the socket to be closed. */
				FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );
				vTCPStateChange( pxSocket, eCLOSED );
 800ded0:	2100      	movs	r1, #0
 800ded2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ded4:	f7fe fe2d 	bl	800cb32 <vTCPStateChange>

				/* The packet cannot be handled. */
				xResult = pdFAIL;
 800ded8:	2300      	movs	r3, #0
 800deda:	62bb      	str	r3, [r7, #40]	; 0x28
 800dedc:	e01b      	b.n	800df16 <xProcessReceivedTCPPacket+0x196>
			}
			else if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) )
 800dede:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dee0:	f003 031f 	and.w	r3, r3, #31
 800dee4:	2b02      	cmp	r3, #2
 800dee6:	d107      	bne.n	800def8 <xProcessReceivedTCPPacket+0x178>
 800dee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deea:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800deee:	2b04      	cmp	r3, #4
 800def0:	d902      	bls.n	800def8 <xProcessReceivedTCPPacket+0x178>
			{
				/* SYN flag while this socket is already connected. */
				FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );

				/* The packet cannot be handled. */
				xResult = pdFAIL;
 800def2:	2300      	movs	r3, #0
 800def4:	62bb      	str	r3, [r7, #40]	; 0x28
 800def6:	e00e      	b.n	800df16 <xProcessReceivedTCPPacket+0x196>
			else
			{
				/* Update the copy of the TCP header only (skipping eth and IP
				headers).  It might be used later on, whenever data must be sent
				to the peer. */
				const BaseType_t lOffset = ( BaseType_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER );
 800def8:	2322      	movs	r3, #34	; 0x22
 800defa:	60fb      	str	r3, [r7, #12]
				memcpy( pxSocket->u.xTCP.xPacket.u.ucLastPacket + lOffset, pxNetworkBuffer->pucEthernetBuffer + lOffset, ipSIZE_OF_TCP_HEADER );
 800defc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defe:	f103 0282 	add.w	r2, r3, #130	; 0x82
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	18d0      	adds	r0, r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	699a      	ldr	r2, [r3, #24]
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	4413      	add	r3, r2
 800df0e:	2214      	movs	r2, #20
 800df10:	4619      	mov	r1, r3
 800df12:	f002 fb04 	bl	801051e <memcpy>
			}
		}
	}

	if( xResult != pdFAIL )
 800df16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d046      	beq.n	800dfaa <xProcessReceivedTCPPacket+0x22a>
	{
		/* Touch the alive timers because we received a message	for this
		socket. */
		prvTCPTouchSocket( pxSocket );
 800df1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df1e:	f7fe fde4 	bl	800caea <prvTCPTouchSocket>
		/* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
		then we MUST assume an MSS size of 536 bytes for backward compatibility. */

		/* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
		the number 5 (words) in the higher niblle of the TCP-offset byte. */
		if( ( pxTCPPacket->xTCPHeader.ucTCPOffset & TCP_OFFSET_LENGTH_BITS ) > TCP_OFFSET_STANDARD_LENGTH )
 800df22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df24:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800df28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df2c:	2b50      	cmp	r3, #80	; 0x50
 800df2e:	d904      	bls.n	800df3a <xProcessReceivedTCPPacket+0x1ba>
		{
			prvCheckOptions( pxSocket, pxNetworkBuffer );
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	4619      	mov	r1, r3
 800df34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df36:	f7fe fc73 	bl	800c820 <prvCheckOptions>
		}


		#if( ipconfigUSE_TCP_WIN == 1 )
		{
			pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usWindow );
 800df3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800df3e:	b29b      	uxth	r3, r3
 800df40:	021b      	lsls	r3, r3, #8
 800df42:	b21a      	sxth	r2, r3
 800df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df46:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800df48:	b29b      	uxth	r3, r3
 800df4a:	0a1b      	lsrs	r3, r3, #8
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	b21b      	sxth	r3, r3
 800df50:	4313      	orrs	r3, r2
 800df52:	b21b      	sxth	r3, r3
 800df54:	b29b      	uxth	r3, r3
 800df56:	461a      	mov	r2, r3
 800df58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			pxSocket->u.xTCP.ulWindowSize =
				( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800df5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df60:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800df64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df66:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800df6a:	fa03 f202 	lsl.w	r2, r3, r2
			pxSocket->u.xTCP.ulWindowSize =
 800df6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df70:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		}
		#endif

		/* In prvTCPHandleState() the incoming messages will be handled
		depending on the current state of the connection. */
		if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 800df74:	1d3b      	adds	r3, r7, #4
 800df76:	4619      	mov	r1, r3
 800df78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df7a:	f7ff fd99 	bl	800dab0 <prvTCPHandleState>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	dd04      	ble.n	800df8e <xProcessReceivedTCPPacket+0x20e>
		{
			/* prvTCPHandleState() has sent a message, see if there are more to
			be transmitted. */
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800df84:	1d3b      	adds	r3, r7, #4
 800df86:	4619      	mov	r1, r3
 800df88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df8a:	f7fe f972 	bl	800c272 <prvTCPSendRepeated>
			}
			#endif /* ipconfigUSE_TCP_WIN */
		}

		if( pxNetworkBuffer != NULL )
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d005      	beq.n	800dfa0 <xProcessReceivedTCPPacket+0x220>
		{
			/* We must check if the buffer is unequal to NULL, because the
			socket might keep a reference to it in case a delayed ACK must be
			sent. */
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	4618      	mov	r0, r3
 800df98:	f001 fb84 	bl	800f6a4 <vReleaseNetworkBufferAndDescriptor>
			pxNetworkBuffer = NULL;
 800df9c:	2300      	movs	r3, #0
 800df9e:	607b      	str	r3, [r7, #4]
		}

		/* And finally, calculate when this socket wants to be woken up. */
		prvTCPNextTimeout ( pxSocket );
 800dfa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfa2:	f7ff f869 	bl	800d078 <prvTCPNextTimeout>
		/* Return pdPASS to tell that the network buffer is 'consumed'. */
		xResult = pdPASS;
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* pdPASS being returned means the buffer has been consumed. */
	return xResult;
 800dfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3730      	adds	r7, #48	; 0x30
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <prvHandleListen>:
/*-----------------------------------------------------------*/

static FreeRTOS_Socket_t *prvHandleListen( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b086      	sub	sp, #24
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	6039      	str	r1, [r7, #0]
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	699b      	ldr	r3, [r3, #24]
 800dfc2:	613b      	str	r3, [r7, #16]
FreeRTOS_Socket_t *pxReturn;

	/* A pure SYN (without ACK) has come in, create a new socket to answer
	it. */
	if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dfca:	f003 0308 	and.w	r3, r3, #8
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00c      	beq.n	800dfee <prvHandleListen+0x3a>
	{
		/* The flag bReuseSocket indicates that the same instance of the
		listening socket should be used for the connection. */
		pxReturn = pxSocket;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	617b      	str	r3, [r7, #20]
		pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800dfde:	f043 0304 	orr.w	r3, r3, #4
 800dfe2:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	655a      	str	r2, [r3, #84]	; 0x54
 800dfec:	e027      	b.n	800e03e <prvHandleListen+0x8a>
	}
	else
	{
		/* The socket does not have the bReuseSocket flag set meaning create a
		new socket when a connection comes in. */
		pxReturn = NULL;
 800dfee:	2300      	movs	r3, #0
 800dff0:	617b      	str	r3, [r7, #20]

		if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dffe:	429a      	cmp	r2, r3
 800e000:	d303      	bcc.n	800e00a <prvHandleListen+0x56>
			FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
				pxSocket->usLocalPort,
				pxSocket->u.xTCP.usChildCount,
				pxSocket->u.xTCP.usBacklog,
				pxSocket->u.xTCP.usChildCount == 1 ? "" : "ren" ) );
			prvTCPSendReset( pxNetworkBuffer );
 800e002:	6838      	ldr	r0, [r7, #0]
 800e004:	f7ff fe64 	bl	800dcd0 <prvTCPSendReset>
 800e008:	e019      	b.n	800e03e <prvHandleListen+0x8a>
		}
		else
		{
			FreeRTOS_Socket_t *pxNewSocket = (FreeRTOS_Socket_t *)
 800e00a:	2206      	movs	r2, #6
 800e00c:	2101      	movs	r1, #1
 800e00e:	2002      	movs	r0, #2
 800e010:	f7fc fc0a 	bl	800a828 <FreeRTOS_socket>
 800e014:	60f8      	str	r0, [r7, #12]
				FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );

			if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d003      	beq.n	800e024 <prvHandleListen+0x70>
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e022:	d103      	bne.n	800e02c <prvHandleListen+0x78>
			{
				FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
				prvTCPSendReset( pxNetworkBuffer );
 800e024:	6838      	ldr	r0, [r7, #0]
 800e026:	f7ff fe53 	bl	800dcd0 <prvTCPSendReset>
 800e02a:	e008      	b.n	800e03e <prvHandleListen+0x8a>
			}
			else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 800e02c:	6879      	ldr	r1, [r7, #4]
 800e02e:	68f8      	ldr	r0, [r7, #12]
 800e030:	f000 f870 	bl	800e114 <prvTCPSocketCopy>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d001      	beq.n	800e03e <prvHandleListen+0x8a>
			{
				/* The socket will be connected immediately, no time for the
				owner to setsockopt's, therefore copy properties of the server
				socket to the new socket.  Only the binding might fail (due to
				lack of resources). */
				pxReturn = pxNewSocket;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	617b      	str	r3, [r7, #20]
			}
		}
	}

	if( pxReturn != NULL )
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d060      	beq.n	800e106 <prvHandleListen+0x152>
	{
		pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e048:	b29b      	uxth	r3, r3
 800e04a:	021b      	lsls	r3, r3, #8
 800e04c:	b21a      	sxth	r2, r3
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e052:	b29b      	uxth	r3, r3
 800e054:	0a1b      	lsrs	r3, r3, #8
 800e056:	b29b      	uxth	r3, r3
 800e058:	b21b      	sxth	r3, r3
 800e05a:	4313      	orrs	r3, r2
 800e05c:	b21b      	sxth	r3, r3
 800e05e:	b29a      	uxth	r2, r3
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	879a      	strh	r2, [r3, #60]	; 0x3c
		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e06a:	061a      	lsls	r2, r3, #24
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e072:	021b      	lsls	r3, r3, #8
 800e074:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e078:	431a      	orrs	r2, r3
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e080:	0a1b      	lsrs	r3, r3, #8
 800e082:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e086:	431a      	orrs	r2, r3
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e08e:	0e1b      	lsrs	r3, r3, #24
 800e090:	431a      	orrs	r2, r3
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	639a      	str	r2, [r3, #56]	; 0x38
		pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulNextInitialSequenceNumber;
 800e096:	4b1e      	ldr	r3, [pc, #120]	; (800e110 <prvHandleListen+0x15c>)
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

		/* Here is the SYN action. */
		pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800e0a6:	061a      	lsls	r2, r3, #24
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800e0ae:	021b      	lsls	r3, r3, #8
 800e0b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e0b4:	431a      	orrs	r2, r3
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800e0bc:	0a1b      	lsrs	r3, r3, #8
 800e0be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e0c2:	431a      	orrs	r2, r3
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800e0ca:	0e1b      	lsrs	r3, r3, #24
 800e0cc:	431a      	orrs	r2, r3
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
		prvSocketSetMSS( pxReturn );
 800e0d4:	6978      	ldr	r0, [r7, #20]
 800e0d6:	f7ff fe17 	bl	800dd08 <prvSocketSetMSS>

		prvTCPCreateWindow( pxReturn );
 800e0da:	6978      	ldr	r0, [r7, #20]
 800e0dc:	f7fe faa0 	bl	800c620 <prvTCPCreateWindow>

		/* It is recommended to increase the ISS for each new connection with a value of 0x102. */
		ulNextInitialSequenceNumber += INITIAL_SEQUENCE_NUMBER_INCREMENT;
 800e0e0:	4b0b      	ldr	r3, [pc, #44]	; (800e110 <prvHandleListen+0x15c>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800e0e8:	4a09      	ldr	r2, [pc, #36]	; (800e110 <prvHandleListen+0x15c>)
 800e0ea:	6013      	str	r3, [r2, #0]

		vTCPStateChange( pxReturn, eSYN_FIRST );
 800e0ec:	2103      	movs	r1, #3
 800e0ee:	6978      	ldr	r0, [r7, #20]
 800e0f0:	f7fe fd1f 	bl	800cb32 <vTCPStateChange>

		/* Make a copy of the header up to the TCP header.  It is needed later
		on, whenever data must be sent to the peer. */
		memcpy( pxReturn->u.xTCP.xPacket.u.ucLastPacket, pxNetworkBuffer->pucEthernetBuffer, sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	f103 0082 	add.w	r0, r3, #130	; 0x82
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	699b      	ldr	r3, [r3, #24]
 800e0fe:	2246      	movs	r2, #70	; 0x46
 800e100:	4619      	mov	r1, r3
 800e102:	f002 fa0c 	bl	801051e <memcpy>
	}
	return pxReturn;
 800e106:	697b      	ldr	r3, [r7, #20]
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3718      	adds	r7, #24
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}
 800e110:	20004810 	.word	0x20004810

0800e114 <prvTCPSocketCopy>:

/*
 * Duplicates a socket after a listening socket receives a connection.
 */
static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t *pxNewSocket, FreeRTOS_Socket_t *pxSocket )
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b084      	sub	sp, #16
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
struct freertos_sockaddr xAddress;

	pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	69da      	ldr	r2, [r3, #28]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	61da      	str	r2, [r3, #28]
	pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	6a1a      	ldr	r2, [r3, #32]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	621a      	str	r2, [r3, #32]
	pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	66da      	str	r2, [r3, #108]	; 0x6c
	pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	671a      	str	r2, [r3, #112]	; 0x70
	pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	665a      	str	r2, [r3, #100]	; 0x64
	pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	669a      	str	r2, [r3, #104]	; 0x68
	pxNewSocket->u.xTCP.uxRxWinSize  = pxSocket->u.xTCP.uxRxWinSize;
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	pxNewSocket->u.xTCP.uxTxWinSize  = pxSocket->u.xTCP.uxTxWinSize;
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		/* Child socket of listening sockets will inherit the Socket Set
		Otherwise the owner has no chance of including it into the set. */
		if( pxSocket->pxSocketSet )
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e176:	2b00      	cmp	r3, #0
 800e178:	d009      	beq.n	800e18e <prvTCPSocketCopy+0x7a>
		{
			pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	629a      	str	r2, [r3, #40]	; 0x28
			pxNewSocket->xSelectBits = pxSocket->xSelectBits | eSELECT_READ | eSELECT_EXCEPT;
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e186:	f043 0205 	orr.w	r2, r3, #5
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	/* And bind it to the same local port as its parent. */
	xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 800e18e:	4b1b      	ldr	r3, [pc, #108]	; (800e1fc <prvTCPSocketCopy+0xe8>)
 800e190:	695b      	ldr	r3, [r3, #20]
 800e192:	60fb      	str	r3, [r7, #12]
	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e198:	021b      	lsls	r3, r3, #8
 800e19a:	b21a      	sxth	r2, r3
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e1a0:	0a1b      	lsrs	r3, r3, #8
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	b21b      	sxth	r3, r3
 800e1a6:	4313      	orrs	r3, r2
 800e1a8:	b21b      	sxth	r3, r3
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	817b      	strh	r3, [r7, #10]
		orphan temporarily.  Once this socket is really connected, the owner of
		the server socket will be notified. */

		/* When bPassQueued is true, the socket is an orphan until it gets
		connected. */
		pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800e1b4:	f043 0304 	orr.w	r3, r3, #4
 800e1b8:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	683a      	ldr	r2, [r7, #0]
 800e1c0:	655a      	str	r2, [r3, #84]	; 0x54
			pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
		}
	}
	#endif

	pxSocket->u.xTCP.usChildCount++;
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	b29a      	uxth	r2, r3
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		pxSocket->u.xTCP.usChildCount,
		pxSocket->u.xTCP.usBacklog,
		pxSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );

	/* Now bind the child socket to the same port as the listening socket. */
	if( vSocketBind ( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800e1d2:	f107 0108 	add.w	r1, r7, #8
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	2208      	movs	r2, #8
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f7fc fd86 	bl	800acec <vSocketBind>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d004      	beq.n	800e1f0 <prvTCPSocketCopy+0xdc>
	{
		FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
		vSocketClose( pxNewSocket );
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f7fc fe36 	bl	800ae58 <vSocketClose>
		return pdFALSE;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	e000      	b.n	800e1f2 <prvTCPSocketCopy+0xde>
	}

	return pdTRUE;
 800e1f0:	2301      	movs	r3, #1
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3710      	adds	r7, #16
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
 800e1fa:	bf00      	nop
 800e1fc:	200000a0 	.word	0x200000a0

0800e200 <xTCPCheckNewClient>:
/*
 * In the API accept(), the user asks is there is a new client?  As API's can
 * not walk through the xBoundTCPSocketsList the IP-task will do this.
 */
BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t *pxSocket )
{
 800e200:	b480      	push	{r7}
 800e202:	b087      	sub	sp, #28
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e20c:	021b      	lsls	r3, r3, #8
 800e20e:	b21a      	sxth	r2, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e214:	0a1b      	lsrs	r3, r3, #8
 800e216:	b29b      	uxth	r3, r3
 800e218:	b21b      	sxth	r3, r3
 800e21a:	4313      	orrs	r3, r2
 800e21c:	b21b      	sxth	r3, r3
 800e21e:	b29b      	uxth	r3, r3
 800e220:	60fb      	str	r3, [r7, #12]
ListItem_t *pxIterator;
FreeRTOS_Socket_t *pxFound;
BaseType_t xResult = pdFALSE;
 800e222:	2300      	movs	r3, #0
 800e224:	613b      	str	r3, [r7, #16]

	/* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
	who has access. */
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800e226:	4b16      	ldr	r3, [pc, #88]	; (800e280 <xTCPCheckNewClient+0x80>)
 800e228:	68db      	ldr	r3, [r3, #12]
 800e22a:	617b      	str	r3, [r7, #20]
 800e22c:	e01d      	b.n	800e26a <xTCPCheckNewClient+0x6a>
		pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
	{
		if( listGET_LIST_ITEM_VALUE( pxIterator ) == xLocalPort )
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	429a      	cmp	r2, r3
 800e236:	d115      	bne.n	800e264 <xTCPCheckNewClient+0x64>
		{
			pxFound = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	60bb      	str	r3, [r7, #8]
			if( ( pxFound->ucProtocol == FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e244:	2b06      	cmp	r3, #6
 800e246:	d10d      	bne.n	800e264 <xTCPCheckNewClient+0x64>
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e24e:	f003 0302 	and.w	r3, r3, #2
 800e252:	b2db      	uxtb	r3, r3
 800e254:	2b00      	cmp	r3, #0
 800e256:	d005      	beq.n	800e264 <xTCPCheckNewClient+0x64>
			{
				pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	68ba      	ldr	r2, [r7, #8]
 800e25c:	655a      	str	r2, [r3, #84]	; 0x54
				FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
				xResult = pdTRUE;
 800e25e:	2301      	movs	r3, #1
 800e260:	613b      	str	r3, [r7, #16]
				break;
 800e262:	e006      	b.n	800e272 <xTCPCheckNewClient+0x72>
		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	617b      	str	r3, [r7, #20]
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	4a05      	ldr	r2, [pc, #20]	; (800e284 <xTCPCheckNewClient+0x84>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d1dd      	bne.n	800e22e <xTCPCheckNewClient+0x2e>
			}
		}
	}
	return xResult;
 800e272:	693b      	ldr	r3, [r7, #16]
}
 800e274:	4618      	mov	r0, r3
 800e276:	371c      	adds	r7, #28
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr
 800e280:	2000590c 	.word	0x2000590c
 800e284:	20005914 	.word	0x20005914

0800e288 <FreeRTOS_min_int32>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6039      	str	r1, [r7, #0]
 800e292:	687a      	ldr	r2, [r7, #4]
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	4293      	cmp	r3, r2
 800e298:	bfa8      	it	ge
 800e29a:	4613      	movge	r3, r2
 800e29c:	4618      	mov	r0, r3
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	bf28      	it	cs
 800e2ba:	4613      	movcs	r3, r2
 800e2bc:	4618      	mov	r0, r3
 800e2be:	370c      	adds	r7, #12
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <xSequenceLessThanOrEqual>:

#if( ipconfigUSE_TCP_WIN == 1 )
	/* Some 32-bit arithmetic: comparing sequence numbers */
	static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a, uint32_t b )
	{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
		/* Test if a <= b
		Return true if the unsigned subtraction of (b-a) doesn't generate an
		arithmetic overflow. */
		return ( ( b - a ) & 0x80000000UL ) == 0UL;
 800e2d2:	683a      	ldr	r2, [r7, #0]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	1ad3      	subs	r3, r2, r3
 800e2d8:	43db      	mvns	r3, r3
 800e2da:	0fdb      	lsrs	r3, r3, #31
 800e2dc:	b2db      	uxtb	r3, r3
	}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	370c      	adds	r7, #12
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e8:	4770      	bx	lr

0800e2ea <xSequenceLessThan>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE BaseType_t xSequenceLessThan( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceLessThan( uint32_t a, uint32_t b )
	{
 800e2ea:	b480      	push	{r7}
 800e2ec:	b083      	sub	sp, #12
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
 800e2f2:	6039      	str	r1, [r7, #0]
		/* Test if a < b */
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 800e2f4:	683a      	ldr	r2, [r7, #0]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	1ad3      	subs	r3, r2, r3
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	43db      	mvns	r3, r3
 800e2fe:	0fdb      	lsrs	r3, r3, #31
 800e300:	b2db      	uxtb	r3, r3
	}
 800e302:	4618      	mov	r0, r3
 800e304:	370c      	adds	r7, #12
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr

0800e30e <xSequenceGreaterThan>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a, uint32_t b )
	{
 800e30e:	b480      	push	{r7}
 800e310:	b083      	sub	sp, #12
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
 800e316:	6039      	str	r1, [r7, #0]
		/* Test if a > b */
		return ( ( a - b - 1UL ) & 0x80000000UL ) == 0UL;
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	1ad3      	subs	r3, r2, r3
 800e31e:	3b01      	subs	r3, #1
 800e320:	43db      	mvns	r3, r3
 800e322:	0fdb      	lsrs	r3, r3, #31
 800e324:	b2db      	uxtb	r3, r3
	}
 800e326:	4618      	mov	r0, r3
 800e328:	370c      	adds	r7, #12
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr

0800e332 <xSequenceGreaterThanOrEqual>:
#endif /* ipconfigUSE_TCP_WIN */

/*-----------------------------------------------------------*/
static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a, uint32_t b );
static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a, uint32_t b )
{
 800e332:	b480      	push	{r7}
 800e334:	b083      	sub	sp, #12
 800e336:	af00      	add	r7, sp, #0
 800e338:	6078      	str	r0, [r7, #4]
 800e33a:	6039      	str	r1, [r7, #0]
	/* Test if a >= b */
	return ( ( a - b ) & 0x80000000UL ) == 0UL;
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	1ad3      	subs	r3, r2, r3
 800e342:	43db      	mvns	r3, r3
 800e344:	0fdb      	lsrs	r3, r3, #31
 800e346:	b2db      	uxtb	r3, r3
}
 800e348:	4618      	mov	r0, r3
 800e34a:	370c      	adds	r7, #12
 800e34c:	46bd      	mov	sp, r7
 800e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e352:	4770      	bx	lr

0800e354 <vListInsertFifo>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE void vListInsertFifo( List_t * const pxList, ListItem_t * const pxNewListItem );
	static portINLINE void vListInsertFifo( List_t * const pxList, ListItem_t * const pxNewListItem )
	{
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	3308      	adds	r3, #8
 800e362:	461a      	mov	r2, r3
 800e364:	6839      	ldr	r1, [r7, #0]
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f000 f81f 	bl	800e3aa <vListInsertGeneric>
	}
 800e36c:	bf00      	nop
 800e36e:	3708      	adds	r7, #8
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <vTCPTimerSet>:
#endif
/*-----------------------------------------------------------*/

static portINLINE void vTCPTimerSet( TCPTimer_t *pxTimer );
static portINLINE void vTCPTimerSet( TCPTimer_t *pxTimer )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
	pxTimer->ulBorn = xTaskGetTickCount ( );
 800e37c:	f7f9 f882 	bl	8007484 <xTaskGetTickCount>
 800e380:	4602      	mov	r2, r0
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	601a      	str	r2, [r3, #0]
}
 800e386:	bf00      	nop
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}

0800e38e <ulTimerGetAge>:
/*-----------------------------------------------------------*/

static portINLINE uint32_t ulTimerGetAge( TCPTimer_t *pxTimer );
static portINLINE uint32_t ulTimerGetAge( TCPTimer_t *pxTimer )
{
 800e38e:	b580      	push	{r7, lr}
 800e390:	b082      	sub	sp, #8
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 800e396:	f7f9 f875 	bl	8007484 <xTaskGetTickCount>
 800e39a:	4602      	mov	r2, r0
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	1ad3      	subs	r3, r2, r3
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}

0800e3aa <vListInsertGeneric>:
preceded by a prototype. Later this prototype will be located in list.h? */

extern void vListInsertGeneric( List_t * const pxList, ListItem_t * const pxNewListItem, MiniListItem_t * const pxWhere );

void vListInsertGeneric( List_t * const pxList, ListItem_t * const pxNewListItem, MiniListItem_t * const pxWhere )
{
 800e3aa:	b480      	push	{r7}
 800e3ac:	b085      	sub	sp, #20
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	60f8      	str	r0, [r7, #12]
 800e3b2:	60b9      	str	r1, [r7, #8]
 800e3b4:	607a      	str	r2, [r7, #4]
	/* Insert a new list item into pxList, it does not sort the list,
	but it puts the item just before xListEnd, so it will be the last item
	returned by listGET_HEAD_ENTRY() */
	pxNewListItem->pxNext = (struct xLIST_ITEM * configLIST_VOLATILE)pxWhere;
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	689a      	ldr	r2, [r3, #8]
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	609a      	str	r2, [r3, #8]
	pxWhere->pxPrevious->pxNext = pxNewListItem;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	68ba      	ldr	r2, [r7, #8]
 800e3ca:	605a      	str	r2, [r3, #4]
	pxWhere->pxPrevious = pxNewListItem;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	68ba      	ldr	r2, [r7, #8]
 800e3d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	68fa      	ldr	r2, [r7, #12]
 800e3d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	1c5a      	adds	r2, r3, #1
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	601a      	str	r2, [r3, #0]
}
 800e3e2:	bf00      	nop
 800e3e4:	3714      	adds	r7, #20
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ec:	4770      	bx	lr
	...

0800e3f0 <prvCreateSectors>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvCreateSectors( void )
	{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
	BaseType_t xIndex, xReturn;

		/* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

		vListInitialise( &xSegmentList );
 800e3f6:	4824      	ldr	r0, [pc, #144]	; (800e488 <prvCreateSectors+0x98>)
 800e3f8:	f7f7 fbe5 	bl	8005bc6 <vListInitialise>
		xTCPSegments = ( TCPSegment_t * ) pvPortMallocLarge( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800e3fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e400:	f7f7 fe98 	bl	8006134 <pvPortMalloc>
 800e404:	4602      	mov	r2, r0
 800e406:	4b21      	ldr	r3, [pc, #132]	; (800e48c <prvCreateSectors+0x9c>)
 800e408:	601a      	str	r2, [r3, #0]

		if( xTCPSegments == NULL )
 800e40a:	4b20      	ldr	r3, [pc, #128]	; (800e48c <prvCreateSectors+0x9c>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d102      	bne.n	800e418 <prvCreateSectors+0x28>
		{
			FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %lu failed\n",
				ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );

			xReturn = pdFAIL;
 800e412:	2300      	movs	r3, #0
 800e414:	603b      	str	r3, [r7, #0]
 800e416:	e032      	b.n	800e47e <prvCreateSectors+0x8e>
		}
		else
		{
			/* Clear the allocated space. */
			memset( xTCPSegments, '\0', ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800e418:	4b1c      	ldr	r3, [pc, #112]	; (800e48c <prvCreateSectors+0x9c>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e420:	2100      	movs	r1, #0
 800e422:	4618      	mov	r0, r3
 800e424:	f002 f8a0 	bl	8010568 <memset>

			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800e428:	2300      	movs	r3, #0
 800e42a:	607b      	str	r3, [r7, #4]
 800e42c:	e022      	b.n	800e474 <prvCreateSectors+0x84>
			{
				/* Could call vListInitialiseItem here but all data has been
				nulled already.  Set the owner to a segment descriptor. */
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xListItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 800e42e:	4b17      	ldr	r3, [pc, #92]	; (800e48c <prvCreateSectors+0x9c>)
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	019b      	lsls	r3, r3, #6
 800e436:	4413      	add	r3, r2
 800e438:	4a14      	ldr	r2, [pc, #80]	; (800e48c <prvCreateSectors+0x9c>)
 800e43a:	6811      	ldr	r1, [r2, #0]
 800e43c:	687a      	ldr	r2, [r7, #4]
 800e43e:	0192      	lsls	r2, r2, #6
 800e440:	440a      	add	r2, r1
 800e442:	639a      	str	r2, [r3, #56]	; 0x38
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 800e444:	4b11      	ldr	r3, [pc, #68]	; (800e48c <prvCreateSectors+0x9c>)
 800e446:	681a      	ldr	r2, [r3, #0]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	019b      	lsls	r3, r3, #6
 800e44c:	4413      	add	r3, r2
 800e44e:	4a0f      	ldr	r2, [pc, #60]	; (800e48c <prvCreateSectors+0x9c>)
 800e450:	6811      	ldr	r1, [r2, #0]
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	0192      	lsls	r2, r2, #6
 800e456:	440a      	add	r2, r1
 800e458:	625a      	str	r2, [r3, #36]	; 0x24

				/* And add it to the pool of available segments */
				vListInsertFifo( &xSegmentList, &( xTCPSegments[xIndex].xListItem ) );
 800e45a:	4b0c      	ldr	r3, [pc, #48]	; (800e48c <prvCreateSectors+0x9c>)
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	019b      	lsls	r3, r3, #6
 800e462:	4413      	add	r3, r2
 800e464:	332c      	adds	r3, #44	; 0x2c
 800e466:	4619      	mov	r1, r3
 800e468:	4807      	ldr	r0, [pc, #28]	; (800e488 <prvCreateSectors+0x98>)
 800e46a:	f7ff ff73 	bl	800e354 <vListInsertFifo>
			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	3301      	adds	r3, #1
 800e472:	607b      	str	r3, [r7, #4]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2b3f      	cmp	r3, #63	; 0x3f
 800e478:	ddd9      	ble.n	800e42e <prvCreateSectors+0x3e>
			}

			xReturn = pdPASS;
 800e47a:	2301      	movs	r3, #1
 800e47c:	603b      	str	r3, [r7, #0]
		}

		return xReturn;
 800e47e:	683b      	ldr	r3, [r7, #0]
	}
 800e480:	4618      	mov	r0, r3
 800e482:	3708      	adds	r7, #8
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	20004818 	.word	0x20004818
 800e48c:	20004814 	.word	0x20004814

0800e490 <xTCPWindowRxFind>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxFind( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 800e490:	b480      	push	{r7}
 800e492:	b087      	sub	sp, #28
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
	const ListItem_t *pxIterator;
	const MiniListItem_t* pxEnd;
	TCPSegment_t *pxSegment, *pxReturn = NULL;
 800e49a:	2300      	movs	r3, #0
 800e49c:	613b      	str	r3, [r7, #16]

		/* Find a segment with a given sequence number in the list of received
		segments. */

		pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xRxSegments );
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	33ac      	adds	r3, #172	; 0xac
 800e4a2:	60fb      	str	r3, [r7, #12]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	617b      	str	r3, [r7, #20]
 800e4aa:	e00d      	b.n	800e4c8 <xTCPWindowRxFind+0x38>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	68db      	ldr	r3, [r3, #12]
 800e4b0:	60bb      	str	r3, [r7, #8]

			if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d102      	bne.n	800e4c2 <xTCPWindowRxFind+0x32>
			{
				pxReturn = pxSegment;
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	613b      	str	r3, [r7, #16]
				break;
 800e4c0:	e006      	b.n	800e4d0 <xTCPWindowRxFind+0x40>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	617b      	str	r3, [r7, #20]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800e4c8:	697a      	ldr	r2, [r7, #20]
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d1ed      	bne.n	800e4ac <xTCPWindowRxFind+0x1c>
			}
		}

		return pxReturn;
 800e4d0:	693b      	ldr	r3, [r7, #16]
	}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	371c      	adds	r7, #28
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr
	...

0800e4e0 <xTCPWindowNew>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowNew( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, int32_t lCount, BaseType_t xIsForRx )
	{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b088      	sub	sp, #32
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	60f8      	str	r0, [r7, #12]
 800e4e8:	60b9      	str	r1, [r7, #8]
 800e4ea:	607a      	str	r2, [r7, #4]
 800e4ec:	603b      	str	r3, [r7, #0]
	TCPSegment_t *pxSegment;
	ListItem_t * pxItem;

		/* Allocate a new segment.  The socket will borrow all segments from a
		common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
		if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 800e4ee:	4b2e      	ldr	r3, [pc, #184]	; (800e5a8 <xTCPWindowNew+0xc8>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d101      	bne.n	800e4fa <xTCPWindowNew+0x1a>
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	e000      	b.n	800e4fc <xTCPWindowNew+0x1c>
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d002      	beq.n	800e506 <xTCPWindowNew+0x26>
		{
			/* If the TCP-stack runs out of segments, you might consider
			increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
			FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", xIsForRx ? 'R' : 'T' ) );
			pxSegment = NULL;
 800e500:	2300      	movs	r3, #0
 800e502:	61fb      	str	r3, [r7, #28]
 800e504:	e04a      	b.n	800e59c <xTCPWindowNew+0xbc>
		}
		else
		{
			/* Pop the item at the head of the list.  Semaphore protection is
			not required as only the IP task will call these functions.  */
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 800e506:	4b28      	ldr	r3, [pc, #160]	; (800e5a8 <xTCPWindowNew+0xc8>)
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	61bb      	str	r3, [r7, #24]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800e50c:	69bb      	ldr	r3, [r7, #24]
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	61fb      	str	r3, [r7, #28]

			configASSERT( pxItem != NULL );
 800e512:	69bb      	ldr	r3, [r7, #24]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d109      	bne.n	800e52c <xTCPWindowNew+0x4c>
 800e518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e51c:	f383 8811 	msr	BASEPRI, r3
 800e520:	f3bf 8f6f 	isb	sy
 800e524:	f3bf 8f4f 	dsb	sy
 800e528:	617b      	str	r3, [r7, #20]
 800e52a:	e7fe      	b.n	800e52a <xTCPWindowNew+0x4a>
			configASSERT( pxSegment != NULL );
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d109      	bne.n	800e546 <xTCPWindowNew+0x66>
 800e532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e536:	f383 8811 	msr	BASEPRI, r3
 800e53a:	f3bf 8f6f 	isb	sy
 800e53e:	f3bf 8f4f 	dsb	sy
 800e542:	613b      	str	r3, [r7, #16]
 800e544:	e7fe      	b.n	800e544 <xTCPWindowNew+0x64>

			/* Remove the item from xSegmentList. */
			uxListRemove( pxItem );
 800e546:	69b8      	ldr	r0, [r7, #24]
 800e548:	f7f7 fbc7 	bl	8005cda <uxListRemove>

			/* Add it to either the connections' Rx or Tx queue. */
			vListInsertFifo( xIsForRx ? &pxWindow->xRxSegments : &pxWindow->xTxSegments, pxItem );
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d002      	beq.n	800e558 <xTCPWindowNew+0x78>
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	33a4      	adds	r3, #164	; 0xa4
 800e556:	e001      	b.n	800e55c <xTCPWindowNew+0x7c>
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	3390      	adds	r3, #144	; 0x90
 800e55c:	69b9      	ldr	r1, [r7, #24]
 800e55e:	4618      	mov	r0, r3
 800e560:	f7ff fef8 	bl	800e354 <vListInsertFifo>

			/* And set the segment's timer to zero */
			vTCPTimerSet( &pxSegment->xTransmitTimer );
 800e564:	69fb      	ldr	r3, [r7, #28]
 800e566:	3310      	adds	r3, #16
 800e568:	4618      	mov	r0, r3
 800e56a:	f7ff ff03 	bl	800e374 <vTCPTimerSet>

			pxSegment->u.ulFlags = 0;
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	2200      	movs	r2, #0
 800e572:	615a      	str	r2, [r3, #20]
			pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 );
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	2b00      	cmp	r3, #0
 800e578:	bf14      	ite	ne
 800e57a:	2301      	movne	r3, #1
 800e57c:	2300      	moveq	r3, #0
 800e57e:	b2d9      	uxtb	r1, r3
 800e580:	69fa      	ldr	r2, [r7, #28]
 800e582:	7d93      	ldrb	r3, [r2, #22]
 800e584:	f361 0382 	bfi	r3, r1, #2, #1
 800e588:	7593      	strb	r3, [r2, #22]
			pxSegment->lMaxLength = lCount;
 800e58a:	69fb      	ldr	r3, [r7, #28]
 800e58c:	687a      	ldr	r2, [r7, #4]
 800e58e:	605a      	str	r2, [r3, #4]
			pxSegment->lDataLength = lCount;
 800e590:	69fb      	ldr	r3, [r7, #28]
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	609a      	str	r2, [r3, #8]
			pxSegment->ulSequenceNumber = ulSequenceNumber;
 800e596:	69fb      	ldr	r3, [r7, #28]
 800e598:	68ba      	ldr	r2, [r7, #8]
 800e59a:	601a      	str	r2, [r3, #0]
				}
			}
			#endif /* ipconfigHAS_DEBUG_PRINTF */
		}

		return pxSegment;
 800e59c:	69fb      	ldr	r3, [r7, #28]
	}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3720      	adds	r7, #32
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	20004818 	.word	0x20004818

0800e5ac <xTCPWindowRxEmpty>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowRxEmpty( TCPWindow_t *pxWindow )
	{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
		/* When the peer has a close request (FIN flag), the driver will check
		if there are missing packets in the Rx-queue.  It will accept the
		closure of the connection if both conditions are true:
		  - the Rx-queue is empty
		  - the highest Rx sequence number has been ACK'ed */
		if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d002      	beq.n	800e5c4 <xTCPWindowRxEmpty+0x18>
		{
			/* Rx data has been stored while earlier packets were missing. */
			xReturn = pdFALSE;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	60fb      	str	r3, [r7, #12]
 800e5c2:	e00f      	b.n	800e5e4 <xTCPWindowRxEmpty+0x38>
		}
		else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	691a      	ldr	r2, [r3, #16]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	699b      	ldr	r3, [r3, #24]
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	4610      	mov	r0, r2
 800e5d0:	f7ff feaf 	bl	800e332 <xSequenceGreaterThanOrEqual>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d002      	beq.n	800e5e0 <xTCPWindowRxEmpty+0x34>
		{
			/* No Rx packets are being stored and the highest sequence number
			that has been received has been ACKed. */
			xReturn = pdTRUE;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	60fb      	str	r3, [r7, #12]
 800e5de:	e001      	b.n	800e5e4 <xTCPWindowRxEmpty+0x38>
		else
		{
			FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
				( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
				( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
			xReturn = pdFALSE;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
	}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3710      	adds	r7, #16
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}

0800e5ee <xTCPWindowGetHead>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowGetHead( List_t *pxList )
	{
 800e5ee:	b580      	push	{r7, lr}
 800e5f0:	b084      	sub	sp, #16
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
	TCPSegment_t *pxSegment;
	ListItem_t * pxItem;

		/* Detaches and returns the head of a queue. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d101      	bne.n	800e602 <xTCPWindowGetHead+0x14>
 800e5fe:	2301      	movs	r3, #1
 800e600:	e000      	b.n	800e604 <xTCPWindowGetHead+0x16>
 800e602:	2300      	movs	r3, #0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d002      	beq.n	800e60e <xTCPWindowGetHead+0x20>
		{
			pxSegment = NULL;
 800e608:	2300      	movs	r3, #0
 800e60a:	60fb      	str	r3, [r7, #12]
 800e60c:	e008      	b.n	800e620 <xTCPWindowGetHead+0x32>
		}
		else
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	68db      	ldr	r3, [r3, #12]
 800e612:	60bb      	str	r3, [r7, #8]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	68db      	ldr	r3, [r3, #12]
 800e618:	60fb      	str	r3, [r7, #12]

			uxListRemove( pxItem );
 800e61a:	68b8      	ldr	r0, [r7, #8]
 800e61c:	f7f7 fb5d 	bl	8005cda <uxListRemove>
		}

		return pxSegment;
 800e620:	68fb      	ldr	r3, [r7, #12]
	}
 800e622:	4618      	mov	r0, r3
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}

0800e62a <xTCPWindowPeekHead>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowPeekHead( List_t *pxList )
	{
 800e62a:	b480      	push	{r7}
 800e62c:	b085      	sub	sp, #20
 800e62e:	af00      	add	r7, sp, #0
 800e630:	6078      	str	r0, [r7, #4]
	ListItem_t *pxItem;
	TCPSegment_t *pxReturn;

		/* Returns the head of a queue but it won't be detached. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d101      	bne.n	800e63e <xTCPWindowPeekHead+0x14>
 800e63a:	2301      	movs	r3, #1
 800e63c:	e000      	b.n	800e640 <xTCPWindowPeekHead+0x16>
 800e63e:	2300      	movs	r3, #0
 800e640:	2b00      	cmp	r3, #0
 800e642:	d002      	beq.n	800e64a <xTCPWindowPeekHead+0x20>
		{
			pxReturn = NULL;
 800e644:	2300      	movs	r3, #0
 800e646:	60fb      	str	r3, [r7, #12]
 800e648:	e005      	b.n	800e656 <xTCPWindowPeekHead+0x2c>
		}
		else
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	68db      	ldr	r3, [r3, #12]
 800e64e:	60bb      	str	r3, [r7, #8]
			pxReturn = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	60fb      	str	r3, [r7, #12]
		}

		return pxReturn;
 800e656:	68fb      	ldr	r3, [r7, #12]
	}
 800e658:	4618      	mov	r0, r3
 800e65a:	3714      	adds	r7, #20
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr

0800e664 <vTCPWindowFree>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static void vTCPWindowFree( TCPSegment_t *pxSegment )
	{
 800e664:	b580      	push	{r7, lr}
 800e666:	b082      	sub	sp, #8
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
		/*  Free entry pxSegment because it's not used any more.  The ownership
		will be passed back to the segment pool.

		Unlink it from one of the queues, if any. */
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e670:	2b00      	cmp	r3, #0
 800e672:	d004      	beq.n	800e67e <vTCPWindowFree+0x1a>
		{
			uxListRemove( &( pxSegment->xQueueItem ) );
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	3318      	adds	r3, #24
 800e678:	4618      	mov	r0, r3
 800e67a:	f7f7 fb2e 	bl	8005cda <uxListRemove>
		}

		pxSegment->ulSequenceNumber = 0u;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2200      	movs	r2, #0
 800e682:	601a      	str	r2, [r3, #0]
		pxSegment->lDataLength = 0l;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	609a      	str	r2, [r3, #8]
		pxSegment->u.ulFlags = 0u;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2200      	movs	r2, #0
 800e68e:	615a      	str	r2, [r3, #20]

		/* Take it out of xRxSegments/xTxSegments */
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xListItem ) ) != NULL )
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e694:	2b00      	cmp	r3, #0
 800e696:	d004      	beq.n	800e6a2 <vTCPWindowFree+0x3e>
		{
			uxListRemove( &( pxSegment->xListItem ) );
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	332c      	adds	r3, #44	; 0x2c
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7f7 fb1c 	bl	8005cda <uxListRemove>
		}

		/* Return it to xSegmentList */
		vListInsertFifo( &xSegmentList, &( pxSegment->xListItem ) );
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	332c      	adds	r3, #44	; 0x2c
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	4803      	ldr	r0, [pc, #12]	; (800e6b8 <vTCPWindowFree+0x54>)
 800e6aa:	f7ff fe53 	bl	800e354 <vListInsertFifo>
	}
 800e6ae:	bf00      	nop
 800e6b0:	3708      	adds	r7, #8
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20004818 	.word	0x20004818

0800e6bc <vTCPWindowDestroy>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	void vTCPWindowDestroy( TCPWindow_t *pxWindow )
	{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b086      	sub	sp, #24
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]

		/*  Destroy a window.  A TCP window doesn't serve any more.  Return all
		owned segments to the pool.  In order to save code, it will make 2 rounds,
		one to remove the segments from xRxSegments, and a second round to clear
		xTxSegments*/
		for( xRound = 0; xRound < 2; xRound++ )
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	613b      	str	r3, [r7, #16]
 800e6c8:	e022      	b.n	800e710 <vTCPWindowDestroy+0x54>
		{
			if( xRound != 0 )
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d003      	beq.n	800e6d8 <vTCPWindowDestroy+0x1c>
			{
				pxSegments = &( pxWindow->xRxSegments );
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	33a4      	adds	r3, #164	; 0xa4
 800e6d4:	617b      	str	r3, [r7, #20]
 800e6d6:	e002      	b.n	800e6de <vTCPWindowDestroy+0x22>
			}
			else
			{
				pxSegments = &( pxWindow->xTxSegments );
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	3390      	adds	r3, #144	; 0x90
 800e6dc:	617b      	str	r3, [r7, #20]
			}

			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	689b      	ldr	r3, [r3, #8]
 800e6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6e6:	d101      	bne.n	800e6ec <vTCPWindowDestroy+0x30>
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	e000      	b.n	800e6ee <vTCPWindowDestroy+0x32>
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00b      	beq.n	800e70a <vTCPWindowDestroy+0x4e>
			{
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800e6f2:	e006      	b.n	800e702 <vTCPWindowDestroy+0x46>
				{
					pxSegment = ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments );
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	68db      	ldr	r3, [r3, #12]
 800e6f8:	68db      	ldr	r3, [r3, #12]
 800e6fa:	60fb      	str	r3, [r7, #12]
					vTCPWindowFree( pxSegment );
 800e6fc:	68f8      	ldr	r0, [r7, #12]
 800e6fe:	f7ff ffb1 	bl	800e664 <vTCPWindowFree>
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d1f4      	bne.n	800e6f4 <vTCPWindowDestroy+0x38>
		for( xRound = 0; xRound < 2; xRound++ )
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	3301      	adds	r3, #1
 800e70e:	613b      	str	r3, [r7, #16]
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	2b01      	cmp	r3, #1
 800e714:	ddd9      	ble.n	800e6ca <vTCPWindowDestroy+0xe>
				}
			}
		}
	}
 800e716:	bf00      	nop
 800e718:	3718      	adds	r7, #24
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
	...

0800e720 <vTCPWindowCreate>:
#endif /* ipconfigUSE_TCP_WIN == 1 */
/*-----------------------------------------------------------*/

void vTCPWindowCreate( TCPWindow_t *pxWindow, uint32_t ulRxWindowLength,
	uint32_t ulTxWindowLength, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	607a      	str	r2, [r7, #4]
 800e72c:	603b      	str	r3, [r7, #0]
	/* Create and initialize a window. */

	#if( ipconfigUSE_TCP_WIN == 1 )
	{
		if( xTCPSegments == NULL )
 800e72e:	4b17      	ldr	r3, [pc, #92]	; (800e78c <vTCPWindowCreate+0x6c>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d101      	bne.n	800e73a <vTCPWindowCreate+0x1a>
		{
			prvCreateSectors();
 800e736:	f7ff fe5b 	bl	800e3f0 <prvCreateSectors>
		}

		vListInitialise( &pxWindow->xTxSegments );
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	3390      	adds	r3, #144	; 0x90
 800e73e:	4618      	mov	r0, r3
 800e740:	f7f7 fa41 	bl	8005bc6 <vListInitialise>
		vListInitialise( &pxWindow->xRxSegments );
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	33a4      	adds	r3, #164	; 0xa4
 800e748:	4618      	mov	r0, r3
 800e74a:	f7f7 fa3c 	bl	8005bc6 <vListInitialise>

		vListInitialise( &pxWindow->xPriorityQueue );			/* Priority queue: segments which must be sent immediately */
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	3340      	adds	r3, #64	; 0x40
 800e752:	4618      	mov	r0, r3
 800e754:	f7f7 fa37 	bl	8005bc6 <vListInitialise>
		vListInitialise( &pxWindow->xTxQueue   );			/* Transmit queue: segments queued for transmission */
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	3354      	adds	r3, #84	; 0x54
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7f7 fa32 	bl	8005bc6 <vListInitialise>
		vListInitialise( &pxWindow->xWaitQueue );			/* Waiting queue:  outstanding segments */
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	3368      	adds	r3, #104	; 0x68
 800e766:	4618      	mov	r0, r3
 800e768:	f7f7 fa2d 	bl	8005bc6 <vListInitialise>
	{
		FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
			ulRxWindowLength, ulTxWindowLength ) );
	}

	pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	68ba      	ldr	r2, [r7, #8]
 800e770:	605a      	str	r2, [r3, #4]
	pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	609a      	str	r2, [r3, #8]

	vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	69ba      	ldr	r2, [r7, #24]
 800e77c:	6839      	ldr	r1, [r7, #0]
 800e77e:	68f8      	ldr	r0, [r7, #12]
 800e780:	f000 f806 	bl	800e790 <vTCPWindowInit>
}
 800e784:	bf00      	nop
 800e786:	3710      	adds	r7, #16
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	20004814 	.word	0x20004814

0800e790 <vTCPWindowInit>:
/*-----------------------------------------------------------*/

void vTCPWindowInit( TCPWindow_t *pxWindow, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS )
{
 800e790:	b480      	push	{r7}
 800e792:	b087      	sub	sp, #28
 800e794:	af00      	add	r7, sp, #0
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
 800e79c:	603b      	str	r3, [r7, #0]
const int32_t l500ms = 500;
 800e79e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e7a2:	617b      	str	r3, [r7, #20]

	pxWindow->u.ulFlags = 0ul;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	601a      	str	r2, [r3, #0]
	pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 800e7aa:	68fa      	ldr	r2, [r7, #12]
 800e7ac:	7813      	ldrb	r3, [r2, #0]
 800e7ae:	f043 0301 	orr.w	r3, r3, #1
 800e7b2:	7013      	strb	r3, [r2, #0]

	if( ulMSS != 0ul )
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d024      	beq.n	800e804 <vTCPWindowInit+0x74>
	{
		if( pxWindow->usMSSInit != 0u )
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d004      	beq.n	800e7ce <vTCPWindowInit+0x3e>
		{
			pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		}

		if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0u ) )
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d804      	bhi.n	800e7e6 <vTCPWindowInit+0x56>
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d10e      	bne.n	800e804 <vTCPWindowInit+0x74>
		{
			pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	685a      	ldr	r2, [r3, #4]
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7f0:	683a      	ldr	r2, [r7, #0]
 800e7f2:	fb02 f203 	mul.w	r2, r2, r3
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	605a      	str	r2, [r3, #4]
			pxWindow->usMSS = ( uint16_t ) ulMSS;
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	b29a      	uxth	r2, r3
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
	}
	#endif /* ipconfigUSE_TCP_WIN == 1 */

	/*Start with a timeout of 2 * 500 ms (1 sec). */
	pxWindow->lSRTT = l500ms;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	697a      	ldr	r2, [r7, #20]
 800e808:	639a      	str	r2, [r3, #56]	; 0x38

	/* Just for logging, to print relative sequence numbers. */
	pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	68ba      	ldr	r2, [r7, #8]
 800e80e:	60da      	str	r2, [r3, #12]

	/* The segment asked for in the next transmission. */
	pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	68ba      	ldr	r2, [r7, #8]
 800e814:	611a      	str	r2, [r3, #16]

	/* The right-hand side of the receive window. */
	pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	68ba      	ldr	r2, [r7, #8]
 800e81a:	619a      	str	r2, [r3, #24]

	pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	687a      	ldr	r2, [r7, #4]
 800e820:	61da      	str	r2, [r3, #28]

	/* The segment asked for in next transmission. */
	pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	621a      	str	r2, [r3, #32]

	/* The sequence number given to the next outgoing byte to be added is
	maintained by lTCPWindowTxAdd(). */
	pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	635a      	str	r2, [r3, #52]	; 0x34

	/* The right-hand side of the transmit window. */
	pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	687a      	ldr	r2, [r7, #4]
 800e832:	629a      	str	r2, [r3, #40]	; 0x28
	pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e83a:	bf00      	nop
 800e83c:	371c      	adds	r7, #28
 800e83e:	46bd      	mov	sp, r7
 800e840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e844:	4770      	bx	lr

0800e846 <xTCPWindowRxConfirm>:
 *=============================================================================*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxConfirm( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength )
	{
 800e846:	b580      	push	{r7, lr}
 800e848:	b08a      	sub	sp, #40	; 0x28
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	60f8      	str	r0, [r7, #12]
 800e84e:	60b9      	str	r1, [r7, #8]
 800e850:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxBest = NULL;
 800e852:	2300      	movs	r3, #0
 800e854:	627b      	str	r3, [r7, #36]	; 0x24
	const ListItem_t *pxIterator;
	uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 800e856:	68ba      	ldr	r2, [r7, #8]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	4413      	add	r3, r2
 800e85c:	61fb      	str	r3, [r7, #28]
	const MiniListItem_t* pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &pxWindow->xRxSegments );
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	33ac      	adds	r3, #172	; 0xac
 800e862:	61bb      	str	r3, [r7, #24]
		and (ulSequenceNumber+ulLength).  Normally none will be found, because
		the next RX segment should have a sequence number equal to
		'(ulSequenceNumber+ulLength)'. */

		/* Iterate through all RX segments that are stored: */
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800e864:	69bb      	ldr	r3, [r7, #24]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	623b      	str	r3, [r7, #32]
 800e86a:	e027      	b.n	800e8bc <xTCPWindowRxConfirm+0x76>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800e86c:	6a3b      	ldr	r3, [r7, #32]
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	617b      	str	r3, [r7, #20]
			/* And see if there is a segment for which:
			'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
			If there are more matching segments, the one with the lowest sequence number
			shall be taken */
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	68b9      	ldr	r1, [r7, #8]
 800e878:	4618      	mov	r0, r3
 800e87a:	f7ff fd5a 	bl	800e332 <xSequenceGreaterThanOrEqual>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d018      	beq.n	800e8b6 <xTCPWindowRxConfirm+0x70>
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	69f9      	ldr	r1, [r7, #28]
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7ff fd2d 	bl	800e2ea <xSequenceLessThan>
 800e890:	4603      	mov	r3, r0
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800e892:	2b00      	cmp	r3, #0
 800e894:	d00f      	beq.n	800e8b6 <xTCPWindowRxConfirm+0x70>
			{
				if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 800e896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d00a      	beq.n	800e8b2 <xTCPWindowRxConfirm+0x6c>
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	681a      	ldr	r2, [r3, #0]
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	4610      	mov	r0, r2
 800e8a8:	f7ff fd1f 	bl	800e2ea <xSequenceLessThan>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d001      	beq.n	800e8b6 <xTCPWindowRxConfirm+0x70>
				{
					pxBest = pxSegment;
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	627b      	str	r3, [r7, #36]	; 0x24
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800e8b6:	6a3b      	ldr	r3, [r7, #32]
 800e8b8:	685b      	ldr	r3, [r3, #4]
 800e8ba:	623b      	str	r3, [r7, #32]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800e8bc:	6a3a      	ldr	r2, [r7, #32]
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d1d3      	bne.n	800e86c <xTCPWindowRxConfirm+0x26>
				}
			}
		}

		if( ( pxBest != NULL ) &&
 800e8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d003      	beq.n	800e8d2 <xTCPWindowRxConfirm+0x8c>
			( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8cc:	681a      	ldr	r2, [r3, #0]
		if( ( pxBest != NULL ) &&
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	429a      	cmp	r2, r3
				pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
				pxBest->lDataLength,
				pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) );
		}

		return pxBest;
 800e8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3728      	adds	r7, #40	; 0x28
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <lTCPWindowRxCheck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	int32_t lTCPWindowRxCheck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength, uint32_t ulSpace )
	{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b08a      	sub	sp, #40	; 0x28
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	607a      	str	r2, [r7, #4]
 800e8e8:	603b      	str	r3, [r7, #0]
		or there is not enough space.

		As a side-effect, pxWindow->ulUserDataLength will get set to non-zero,
		if more Rx data may be passed to the user after this packet. */

		ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	691b      	ldr	r3, [r3, #16]
 800e8ee:	627b      	str	r3, [r7, #36]	; 0x24

		/* For Selective Ack (SACK), used when out-of-sequence data come in. */
		pxWindow->ucOptionLength = 0u;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Non-zero if TCP-windows contains data which must be popped. */
		pxWindow->ulUserDataLength = 0ul;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	631a      	str	r2, [r3, #48]	; 0x30

		if( ulCurrentSequenceNumber == ulSequenceNumber )
 800e8fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	429a      	cmp	r2, r3
 800e904:	d145      	bne.n	800e992 <lTCPWindowRxCheck+0xb6>
		{
			/* This is the packet with the lowest sequence number we're waiting
			for.  It can be passed directly to the rx stream. */
			if( ulLength > ulSpace )
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d903      	bls.n	800e916 <lTCPWindowRxCheck+0x3a>
			{
				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
				lReturn = -1;
 800e90e:	f04f 33ff 	mov.w	r3, #4294967295
 800e912:	61fb      	str	r3, [r7, #28]
 800e914:	e0b9      	b.n	800ea8a <lTCPWindowRxCheck+0x1ae>
			}
			else
			{
				ulCurrentSequenceNumber += ulLength;
 800e916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	4413      	add	r3, r2
 800e91c:	627b      	str	r3, [r7, #36]	; 0x24

				if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0 )
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e924:	2b00      	cmp	r3, #0
 800e926:	d02e      	beq.n	800e986 <lTCPWindowRxCheck+0xaa>
				{
					ulSavedSequenceNumber = ulCurrentSequenceNumber;
 800e928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92a:	61bb      	str	r3, [r7, #24]

					/* See if (part of) this segment has been stored already,
					but this rarely happens. */
					pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 800e92c:	687a      	ldr	r2, [r7, #4]
 800e92e:	68b9      	ldr	r1, [r7, #8]
 800e930:	68f8      	ldr	r0, [r7, #12]
 800e932:	f7ff ff88 	bl	800e846 <xTCPWindowRxConfirm>
 800e936:	6178      	str	r0, [r7, #20]
					if( pxFound != NULL )
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d012      	beq.n	800e964 <lTCPWindowRxCheck+0x88>
					{
						ulCurrentSequenceNumber = pxFound->ulSequenceNumber + ( ( uint32_t ) pxFound->lDataLength );
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	697a      	ldr	r2, [r7, #20]
 800e944:	6892      	ldr	r2, [r2, #8]
 800e946:	4413      	add	r3, r2
 800e948:	627b      	str	r3, [r7, #36]	; 0x24

						/* Remove it because it will be passed to user directly. */
						vTCPWindowFree( pxFound );
 800e94a:	6978      	ldr	r0, [r7, #20]
 800e94c:	f7ff fe8a 	bl	800e664 <vTCPWindowFree>
					}

					/*  Check for following segments that are already in the
					queue and increment ulCurrentSequenceNumber. */
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
 800e950:	e008      	b.n	800e964 <lTCPWindowRxCheck+0x88>
					{
						ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	689b      	ldr	r3, [r3, #8]
 800e956:	461a      	mov	r2, r3
 800e958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95a:	4413      	add	r3, r2
 800e95c:	627b      	str	r3, [r7, #36]	; 0x24

						/* As all packet below this one have been passed to the
						user it can be discarded. */
						vTCPWindowFree( pxFound );
 800e95e:	6978      	ldr	r0, [r7, #20]
 800e960:	f7ff fe80 	bl	800e664 <vTCPWindowFree>
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
 800e964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e966:	68f8      	ldr	r0, [r7, #12]
 800e968:	f7ff fd92 	bl	800e490 <xTCPWindowRxFind>
 800e96c:	6178      	str	r0, [r7, #20]
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d1ee      	bne.n	800e952 <lTCPWindowRxCheck+0x76>
					}

					if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 800e974:	69ba      	ldr	r2, [r7, #24]
 800e976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e978:	429a      	cmp	r2, r3
 800e97a:	d004      	beq.n	800e986 <lTCPWindowRxCheck+0xaa>
					{
						/*  After the current data-package, there is more data
						to be popped. */
						pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 800e97c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e97e:	69bb      	ldr	r3, [r7, #24]
 800e980:	1ad2      	subs	r2, r2, r3
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	631a      	str	r2, [r3, #48]	; 0x30
								listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
						}
					}
				}

				pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e98a:	611a      	str	r2, [r3, #16]

				/* Packet was expected, may be passed directly to the socket
				buffer or application.  Store the packet at offset 0. */
				lReturn = 0;
 800e98c:	2300      	movs	r3, #0
 800e98e:	61fb      	str	r3, [r7, #28]
 800e990:	e07b      	b.n	800ea8a <lTCPWindowRxCheck+0x1ae>
			}
		}
		else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	1c5a      	adds	r2, r3, #1
 800e996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e998:	429a      	cmp	r2, r3
 800e99a:	d103      	bne.n	800e9a4 <lTCPWindowRxCheck+0xc8>
		{
			/* Looks like a TCP keep-alive message.  Do not accept/store Rx data
			ulUserDataLength = 0. Not packet out-of-sync.  Just reply to it. */
			lReturn = -1;
 800e99c:	f04f 33ff 	mov.w	r3, #4294967295
 800e9a0:	61fb      	str	r3, [r7, #28]
 800e9a2:	e072      	b.n	800ea8a <lTCPWindowRxCheck+0x1ae>
			/* The packet is not the one expected.  See if it falls within the Rx
			window so it can be stored. */

			/*  An "out-of-sequence" segment was received, must have missed one.
			Prepare a SACK (Selective ACK). */
			ulLast = ulSequenceNumber + ulLength;
 800e9a4:	68ba      	ldr	r2, [r7, #8]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	623b      	str	r3, [r7, #32]
			lDistance = ( int32_t ) ( ulLast - ulCurrentSequenceNumber );
 800e9ac:	6a3a      	ldr	r2, [r7, #32]
 800e9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b0:	1ad3      	subs	r3, r2, r3
 800e9b2:	613b      	str	r3, [r7, #16]

			if( lDistance <= 0 )
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	dc03      	bgt.n	800e9c2 <lTCPWindowRxCheck+0xe6>
			{
				/* An earlier has been received, must be a retransmission of a
				packet that has been accepted already.  No need to send out a
				Selective ACK (SACK). */
				lReturn = -1;
 800e9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e9be:	61fb      	str	r3, [r7, #28]
 800e9c0:	e063      	b.n	800ea8a <lTCPWindowRxCheck+0x1ae>
			}
			else if( lDistance > ( int32_t ) ulSpace )
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	693a      	ldr	r2, [r7, #16]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	dd09      	ble.n	800e9de <lTCPWindowRxCheck+0x102>
			{
				/* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
				sequence number of this packet is too far ahead, ignore it. */
				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
				lReturn = -1;
 800e9ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e9ce:	61fb      	str	r3, [r7, #28]
 800e9d0:	e05b      	b.n	800ea8a <lTCPWindowRxCheck+0x1ae>
				 * This is useful because subsequent packets will be SACK'd with
				 * single one message
				 */
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
				{
					ulLast += ( uint32_t ) pxFound->lDataLength;
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	689b      	ldr	r3, [r3, #8]
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	6a3b      	ldr	r3, [r7, #32]
 800e9da:	4413      	add	r3, r2
 800e9dc:	623b      	str	r3, [r7, #32]
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
 800e9de:	6a39      	ldr	r1, [r7, #32]
 800e9e0:	68f8      	ldr	r0, [r7, #12]
 800e9e2:	f7ff fd55 	bl	800e490 <xTCPWindowRxFind>
 800e9e6:	6178      	str	r0, [r7, #20]
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d1f1      	bne.n	800e9d2 <lTCPWindowRxCheck+0xf6>
						ulLast - pxWindow->rx.ulFirstSequenceNumber ) );
				}

				/* Now prepare the SACK message.
				Code OPTION_CODE_SINGLE_SACK already in network byte order. */
				pxWindow->ulOptionsData[0] = OPTION_CODE_SINGLE_SACK;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	4a28      	ldr	r2, [pc, #160]	; (800ea94 <lTCPWindowRxCheck+0x1b8>)
 800e9f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				/* First sequence number that we received. */
				pxWindow->ulOptionsData[1] = FreeRTOS_htonl( ulSequenceNumber );
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	061a      	lsls	r2, r3, #24
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	021b      	lsls	r3, r3, #8
 800e9fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ea02:	431a      	orrs	r2, r3
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	0a1b      	lsrs	r3, r3, #8
 800ea08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ea0c:	431a      	orrs	r2, r3
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	0e1b      	lsrs	r3, r3, #24
 800ea12:	431a      	orrs	r2, r3
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

				/* Last + 1 */
				pxWindow->ulOptionsData[2] = FreeRTOS_htonl( ulLast );
 800ea1a:	6a3b      	ldr	r3, [r7, #32]
 800ea1c:	061a      	lsls	r2, r3, #24
 800ea1e:	6a3b      	ldr	r3, [r7, #32]
 800ea20:	021b      	lsls	r3, r3, #8
 800ea22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ea26:	431a      	orrs	r2, r3
 800ea28:	6a3b      	ldr	r3, [r7, #32]
 800ea2a:	0a1b      	lsrs	r3, r3, #8
 800ea2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ea30:	431a      	orrs	r2, r3
 800ea32:	6a3b      	ldr	r3, [r7, #32]
 800ea34:	0e1b      	lsrs	r3, r3, #24
 800ea36:	431a      	orrs	r2, r3
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				/* Which make 12 (3*4) option bytes. */
				pxWindow->ucOptionLength = 3 * sizeof( pxWindow->ulOptionsData[ 0 ] );
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	220c      	movs	r2, #12
 800ea42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 800ea46:	68b9      	ldr	r1, [r7, #8]
 800ea48:	68f8      	ldr	r0, [r7, #12]
 800ea4a:	f7ff fd21 	bl	800e490 <xTCPWindowRxFind>
 800ea4e:	6178      	str	r0, [r7, #20]

				if( pxFound != NULL )
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d003      	beq.n	800ea5e <lTCPWindowRxCheck+0x182>
				{
					/* This out-of-sequence packet has been received for a
					second time.  It is already stored but do send a SACK
					again. */
					lReturn = -1;
 800ea56:	f04f 33ff 	mov.w	r3, #4294967295
 800ea5a:	61fb      	str	r3, [r7, #28]
 800ea5c:	e015      	b.n	800ea8a <lTCPWindowRxCheck+0x1ae>
				}
				else
				{
					pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	2301      	movs	r3, #1
 800ea62:	68b9      	ldr	r1, [r7, #8]
 800ea64:	68f8      	ldr	r0, [r7, #12]
 800ea66:	f7ff fd3b 	bl	800e4e0 <xTCPWindowNew>
 800ea6a:	6178      	str	r0, [r7, #20]

					if( pxFound == NULL )
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d107      	bne.n	800ea82 <lTCPWindowRxCheck+0x1a6>
					{
						/* Can not send a SACK, because the segment cannot be
						stored. */
						pxWindow->ucOptionLength = 0u;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2200      	movs	r2, #0
 800ea76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

						/* Needs to be stored but there is no segment
						available. */
						lReturn = -1;
 800ea7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ea7e:	61fb      	str	r3, [r7, #28]
 800ea80:	e003      	b.n	800ea8a <lTCPWindowRxCheck+0x1ae>
							FreeRTOS_flush_logging( );
						}

						/* Return a positive value.  The packet may be accepted
						and stored but an earlier packet is still missing. */
						lReturn = ( int32_t ) ( ulSequenceNumber - ulCurrentSequenceNumber );
 800ea82:	68ba      	ldr	r2, [r7, #8]
 800ea84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea86:	1ad3      	subs	r3, r2, r3
 800ea88:	61fb      	str	r3, [r7, #28]
					}
				}
			}
		}

		return lReturn;
 800ea8a:	69fb      	ldr	r3, [r7, #28]
	}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3728      	adds	r7, #40	; 0x28
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}
 800ea94:	0a050101 	.word	0x0a050101

0800ea98 <lTCPIncrementTxPosition>:
 *=============================================================================*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static int32_t lTCPIncrementTxPosition( int32_t lPosition, int32_t lMax, int32_t lCount )
	{
 800ea98:	b480      	push	{r7}
 800ea9a:	b085      	sub	sp, #20
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	607a      	str	r2, [r7, #4]
		/* +TCP stores data in circular buffers.  Calculate the next position to
		store. */
		lPosition += lCount;
 800eaa4:	68fa      	ldr	r2, [r7, #12]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	4413      	add	r3, r2
 800eaaa:	60fb      	str	r3, [r7, #12]
		if( lPosition >= lMax )
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	429a      	cmp	r2, r3
 800eab2:	db03      	blt.n	800eabc <lTCPIncrementTxPosition+0x24>
		{
			lPosition -= lMax;
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	1ad3      	subs	r3, r2, r3
 800eaba:	60fb      	str	r3, [r7, #12]
		}

		return lPosition;
 800eabc:	68fb      	ldr	r3, [r7, #12]
	}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3714      	adds	r7, #20
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr
	...

0800eacc <lTCPWindowTxAdd>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	int32_t lTCPWindowTxAdd( TCPWindow_t *pxWindow, uint32_t ulLength, int32_t lPosition, int32_t lMax )
	{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b088      	sub	sp, #32
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	60f8      	str	r0, [r7, #12]
 800ead4:	60b9      	str	r1, [r7, #8]
 800ead6:	607a      	str	r2, [r7, #4]
 800ead8:	603b      	str	r3, [r7, #0]
	int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	61fb      	str	r3, [r7, #28]
	int32_t lDone = 0;
 800eade:	2300      	movs	r3, #0
 800eae0:	61bb      	str	r3, [r7, #24]
	TCPSegment_t *pxSegment = pxWindow->pxHeadSegment;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eae6:	617b      	str	r3, [r7, #20]

		/* Puts a message in the Tx-window (after buffer size has been
		verified). */
		if( pxSegment != NULL )
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	f000 8096 	beq.w	800ec1c <lTCPWindowTxAdd+0x150>
		{
			if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	689a      	ldr	r2, [r3, #8]
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	f280 808f 	bge.w	800ec1c <lTCPWindowTxAdd+0x150>
			{
				if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	7d9b      	ldrb	r3, [r3, #22]
 800eb02:	f003 0301 	and.w	r3, r3, #1
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	f040 8087 	bne.w	800ec1c <lTCPWindowTxAdd+0x150>
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	689b      	ldr	r3, [r3, #8]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	f000 8082 	beq.w	800ec1c <lTCPWindowTxAdd+0x150>
				{
					/* Adding data to a segment that was already in the TX queue.  It
					will be filled-up to a maximum of MSS (maximum segment size). */
					lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	685a      	ldr	r2, [r3, #4]
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	689b      	ldr	r3, [r3, #8]
 800eb20:	1ad3      	subs	r3, r2, r3
 800eb22:	4619      	mov	r1, r3
 800eb24:	69f8      	ldr	r0, [r7, #28]
 800eb26:	f7ff fbaf 	bl	800e288 <FreeRTOS_min_int32>
 800eb2a:	6138      	str	r0, [r7, #16]

					pxSegment->lDataLength += lToWrite;
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	689a      	ldr	r2, [r3, #8]
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	441a      	add	r2, r3
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	609a      	str	r2, [r3, #8]

					if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	689a      	ldr	r2, [r3, #8]
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	429a      	cmp	r2, r3
 800eb42:	db02      	blt.n	800eb4a <lTCPWindowTxAdd+0x7e>
					{
						/* This segment is full, don't add more bytes. */
						pxWindow->pxHeadSegment = NULL;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2200      	movs	r2, #0
 800eb48:	67da      	str	r2, [r3, #124]	; 0x7c
					}

					lBytesLeft -= lToWrite;
 800eb4a:	69fa      	ldr	r2, [r7, #28]
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	1ad3      	subs	r3, r2, r3
 800eb50:	61fb      	str	r3, [r7, #28]

					/* ulNextTxSequenceNumber is the sequence number of the next byte to
					be stored for transmission. */
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	441a      	add	r2, r3
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	635a      	str	r2, [r3, #52]	; 0x34

					/* Increased the return value. */
					lDone += lToWrite;
 800eb5e:	69ba      	ldr	r2, [r7, #24]
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	4413      	add	r3, r2
 800eb64:	61bb      	str	r3, [r7, #24]

					/* Some detailed logging, for those who're interested. */
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 ) )
 800eb66:	4b32      	ldr	r3, [pc, #200]	; (800ec30 <lTCPWindowTxAdd+0x164>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	2b01      	cmp	r3, #1
						FreeRTOS_flush_logging( );
					}

					/* Calculate the next position in the circular data buffer, knowing
					its maximum length 'lMax'. */
					lPosition = lTCPIncrementTxPosition( lPosition, lMax, lToWrite );
 800eb6c:	693a      	ldr	r2, [r7, #16]
 800eb6e:	6839      	ldr	r1, [r7, #0]
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f7ff ff91 	bl	800ea98 <lTCPIncrementTxPosition>
 800eb76:	6078      	str	r0, [r7, #4]
				}
			}
		}

		while( lBytesLeft > 0 )
 800eb78:	e050      	b.n	800ec1c <lTCPWindowTxAdd+0x150>
		{
			/* The current transmission segment is full, create new segments as
			needed. */
			pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, pxWindow->usMSS );
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800eb84:	461a      	mov	r2, r3
 800eb86:	2300      	movs	r3, #0
 800eb88:	68f8      	ldr	r0, [r7, #12]
 800eb8a:	f7ff fca9 	bl	800e4e0 <xTCPWindowNew>
 800eb8e:	6178      	str	r0, [r7, #20]

			if( pxSegment != NULL )
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d046      	beq.n	800ec24 <lTCPWindowTxAdd+0x158>
			{
				/* Store as many as needed, but no more than the maximum
				(MSS). */
				lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	685b      	ldr	r3, [r3, #4]
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	69f8      	ldr	r0, [r7, #28]
 800eb9e:	f7ff fb73 	bl	800e288 <FreeRTOS_min_int32>
 800eba2:	6138      	str	r0, [r7, #16]

				pxSegment->lDataLength = lToWrite;
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	693a      	ldr	r2, [r7, #16]
 800eba8:	609a      	str	r2, [r3, #8]
				pxSegment->lStreamPos = lPosition;
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	60da      	str	r2, [r3, #12]
				lBytesLeft -= lToWrite;
 800ebb0:	69fa      	ldr	r2, [r7, #28]
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	1ad3      	subs	r3, r2, r3
 800ebb6:	61fb      	str	r3, [r7, #28]
				lPosition = lTCPIncrementTxPosition( lPosition, lMax, lToWrite );
 800ebb8:	693a      	ldr	r2, [r7, #16]
 800ebba:	6839      	ldr	r1, [r7, #0]
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f7ff ff6b 	bl	800ea98 <lTCPIncrementTxPosition>
 800ebc2:	6078      	str	r0, [r7, #4]
				pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	441a      	add	r2, r3
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	635a      	str	r2, [r3, #52]	; 0x34
				lDone += lToWrite;
 800ebd0:	69ba      	ldr	r2, [r7, #24]
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	61bb      	str	r3, [r7, #24]

				/* Link this segment in the Tx-Queue. */
				vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	3318      	adds	r3, #24
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	4610      	mov	r0, r2
 800ebe6:	f7ff fbb5 	bl	800e354 <vListInsertFifo>

				/* Let 'pxHeadSegment' point to this segment if there is still
				space. */
				if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	689a      	ldr	r2, [r3, #8]
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	da03      	bge.n	800ebfe <lTCPWindowTxAdd+0x132>
				{
					pxWindow->pxHeadSegment = pxSegment;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	697a      	ldr	r2, [r7, #20]
 800ebfa:	67da      	str	r2, [r3, #124]	; 0x7c
 800ebfc:	e002      	b.n	800ec04 <lTCPWindowTxAdd+0x138>
				}
				else
				{
					pxWindow->pxHeadSegment = NULL;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2200      	movs	r2, #0
 800ec02:	67da      	str	r2, [r3, #124]	; 0x7c
				}

				if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 )
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800ec0a:	2b17      	cmp	r3, #23
 800ec0c:	d006      	beq.n	800ec1c <lTCPWindowTxAdd+0x150>
				{
					if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800ec0e:	4b08      	ldr	r3, [pc, #32]	; (800ec30 <lTCPWindowTxAdd+0x164>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2b02      	cmp	r3, #2
 800ec14:	dc02      	bgt.n	800ec1c <lTCPWindowTxAdd+0x150>
						( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 800ec16:	4b06      	ldr	r3, [pc, #24]	; (800ec30 <lTCPWindowTxAdd+0x164>)
 800ec18:	681b      	ldr	r3, [r3, #0]
					if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800ec1a:	2b01      	cmp	r3, #1
		while( lBytesLeft > 0 )
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	dcab      	bgt.n	800eb7a <lTCPWindowTxAdd+0xae>
 800ec22:	e000      	b.n	800ec26 <lTCPWindowTxAdd+0x15a>
				No more data can be sent at the moment. */
				if( lDone != 0 )
				{
					FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
				}
				break;
 800ec24:	bf00      	nop
			}
		}

		return lDone;
 800ec26:	69bb      	ldr	r3, [r7, #24]
	}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3720      	adds	r7, #32
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	2000482c 	.word	0x2000482c

0800ec34 <xTCPWindowTxDone>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowTxDone( TCPWindow_t *pxWindow )
	{
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
		return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments) );
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	bf0c      	ite	eq
 800ec46:	2301      	moveq	r3, #1
 800ec48:	2300      	movne	r3, #0
 800ec4a:	b2db      	uxtb	r3, r3
	}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	370c      	adds	r7, #12
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr

0800ec58 <prvTCPWindowTxHasSpace>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t *pxWindow, uint32_t ulWindowSize )
	{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b086      	sub	sp, #24
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
	TCPSegment_t *pxSegment;

		/* This function will look if there is new transmission data.  It will
		return true if there is data to be sent. */

		pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	3354      	adds	r3, #84	; 0x54
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7ff fcdf 	bl	800e62a <xTCPWindowPeekHead>
 800ec6c:	60f8      	str	r0, [r7, #12]

		if( pxSegment == NULL )
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d102      	bne.n	800ec7a <prvTCPWindowTxHasSpace+0x22>
		{
			xHasSpace = pdFALSE;
 800ec74:	2300      	movs	r3, #0
 800ec76:	613b      	str	r3, [r7, #16]
 800ec78:	e02f      	b.n	800ecda <prvTCPWindowTxHasSpace+0x82>
		}
		else
		{
			/* How much data is outstanding, i.e. how much data has been sent
			but not yet acknowledged ? */
			if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6a1b      	ldr	r3, [r3, #32]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d306      	bcc.n	800ec94 <prvTCPWindowTxHasSpace+0x3c>
			{
				ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6a1b      	ldr	r3, [r3, #32]
 800ec8e:	1ad3      	subs	r3, r2, r3
 800ec90:	617b      	str	r3, [r7, #20]
 800ec92:	e001      	b.n	800ec98 <prvTCPWindowTxHasSpace+0x40>
			}
			else
			{
				ulTxOutstanding = 0UL;
 800ec94:	2300      	movs	r3, #0
 800ec96:	617b      	str	r3, [r7, #20]
			}

			/* Subtract this from the peer's space. */
			ulWindowSize -= FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 800ec98:	6979      	ldr	r1, [r7, #20]
 800ec9a:	6838      	ldr	r0, [r7, #0]
 800ec9c:	f7ff fb04 	bl	800e2a8 <FreeRTOS_min_uint32>
 800eca0:	4602      	mov	r2, r0
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	1a9b      	subs	r3, r3, r2
 800eca6:	603b      	str	r3, [r7, #0]

			/* See if the next segment may be sent. */
			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	689b      	ldr	r3, [r3, #8]
 800ecac:	461a      	mov	r2, r3
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d802      	bhi.n	800ecba <prvTCPWindowTxHasSpace+0x62>
			{
				xHasSpace = pdTRUE;
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	613b      	str	r3, [r7, #16]
 800ecb8:	e001      	b.n	800ecbe <prvTCPWindowTxHasSpace+0x66>
			}
			else
			{
				xHasSpace = pdFALSE;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	613b      	str	r3, [r7, #16]

			/* If 'xHasSpace', it looks like the peer has at least space for 1
			more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
			limitation of the transmission window (in case of many resends it
			may be decreased). */
			if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) )
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d00a      	beq.n	800ecda <prvTCPWindowTxHasSpace+0x82>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	689a      	ldr	r2, [r3, #8]
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	689b      	ldr	r3, [r3, #8]
 800eccc:	4619      	mov	r1, r3
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	440b      	add	r3, r1
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d201      	bcs.n	800ecda <prvTCPWindowTxHasSpace+0x82>
			{
				xHasSpace = pdFALSE;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	613b      	str	r3, [r7, #16]
			}
		}

		return xHasSpace;
 800ecda:	693b      	ldr	r3, [r7, #16]
	}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3718      	adds	r7, #24
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <xTCPWindowTxHasData>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowTxHasData( TCPWindow_t *pxWindow, uint32_t ulWindowSize, TickType_t *pulDelay )
	{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b088      	sub	sp, #32
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxSegment;
	BaseType_t xReturn;
	TickType_t ulAge, ulMaxAge;

		*pulDelay = 0u;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	601a      	str	r2, [r3, #0]

		if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d002      	beq.n	800ed04 <xTCPWindowTxHasData+0x20>
		{
			/* No need to look at retransmissions or new transmission as long as
			there are priority segments.  *pulDelay equals zero, meaning it must
			be sent out immediately. */
			xReturn = pdTRUE;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	61fb      	str	r3, [r7, #28]
 800ed02:	e04a      	b.n	800ed9a <xTCPWindowTxHasData+0xb6>
		}
		else
		{
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	3368      	adds	r3, #104	; 0x68
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7ff fc8e 	bl	800e62a <xTCPWindowPeekHead>
 800ed0e:	61b8      	str	r0, [r7, #24]

			if( pxSegment != NULL )
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d019      	beq.n	800ed4a <xTCPWindowTxHasData+0x66>
			{
				/* There is an outstanding segment, see if it is time to resend
				it. */
				ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	3310      	adds	r3, #16
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7ff fb37 	bl	800e38e <ulTimerGetAge>
 800ed20:	6178      	str	r0, [r7, #20]

				/* After a packet has been sent for the first time, it will wait
				'1 * lSRTT' ms for an ACK. A second time it will wait '2 * lSRTT' ms,
				each time doubling the time-out */
				ulMaxAge = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed26:	461a      	mov	r2, r3
 800ed28:	69bb      	ldr	r3, [r7, #24]
 800ed2a:	7d1b      	ldrb	r3, [r3, #20]
 800ed2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ed30:	613b      	str	r3, [r7, #16]

				if( ulMaxAge > ulAge )
 800ed32:	693a      	ldr	r2, [r7, #16]
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d904      	bls.n	800ed44 <xTCPWindowTxHasData+0x60>
				{
					/* A segment must be sent after this amount of msecs */
					*pulDelay = ulMaxAge - ulAge;
 800ed3a:	693a      	ldr	r2, [r7, #16]
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	1ad2      	subs	r2, r2, r3
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	601a      	str	r2, [r3, #0]
				}

				xReturn = pdTRUE;
 800ed44:	2301      	movs	r3, #1
 800ed46:	61fb      	str	r3, [r7, #28]
 800ed48:	e027      	b.n	800ed9a <xTCPWindowTxHasData+0xb6>
			}
			else
			{
				/* No priority segment, no outstanding data, see if there is new
				transmission data. */
				pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	3354      	adds	r3, #84	; 0x54
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7ff fc6b 	bl	800e62a <xTCPWindowPeekHead>
 800ed54:	61b8      	str	r0, [r7, #24]

				/* See if it fits in the peer's reception window. */
				if( pxSegment == NULL )
 800ed56:	69bb      	ldr	r3, [r7, #24]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d102      	bne.n	800ed62 <xTCPWindowTxHasData+0x7e>
				{
					xReturn = pdFALSE;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	61fb      	str	r3, [r7, #28]
 800ed60:	e01b      	b.n	800ed9a <xTCPWindowTxHasData+0xb6>
				}
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800ed62:	68b9      	ldr	r1, [r7, #8]
 800ed64:	68f8      	ldr	r0, [r7, #12]
 800ed66:	f7ff ff77 	bl	800ec58 <prvTCPWindowTxHasSpace>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d102      	bne.n	800ed76 <xTCPWindowTxHasData+0x92>
				{
					/* Too many outstanding messages. */
					xReturn = pdFALSE;
 800ed70:	2300      	movs	r3, #0
 800ed72:	61fb      	str	r3, [r7, #28]
 800ed74:	e011      	b.n	800ed9a <xTCPWindowTxHasData+0xb6>
				}
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	f003 0302 	and.w	r3, r3, #2
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d008      	beq.n	800ed96 <xTCPWindowTxHasData+0xb2>
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	689a      	ldr	r2, [r3, #8]
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	da02      	bge.n	800ed96 <xTCPWindowTxHasData+0xb2>
				{
					/* 'bSendFullSize' is a special optimisation.  If true, the
					driver will only sent completely filled packets (of MSS
					bytes). */
					xReturn = pdFALSE;
 800ed90:	2300      	movs	r3, #0
 800ed92:	61fb      	str	r3, [r7, #28]
 800ed94:	e001      	b.n	800ed9a <xTCPWindowTxHasData+0xb6>
				}
				else
				{
					xReturn = pdTRUE;
 800ed96:	2301      	movs	r3, #1
 800ed98:	61fb      	str	r3, [r7, #28]
				}
			}
		}

		return xReturn;
 800ed9a:	69fb      	ldr	r3, [r7, #28]
	}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3720      	adds	r7, #32
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <ulTCPWindowTxGet>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxGet( TCPWindow_t *pxWindow, uint32_t ulWindowSize, int32_t *plPosition )
	{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b088      	sub	sp, #32
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxSegment;
	uint32_t ulMaxTime;
	uint32_t ulReturn  = ~0UL;
 800edb0:	f04f 33ff 	mov.w	r3, #4294967295
 800edb4:	61bb      	str	r3, [r7, #24]

		/* Fetches data to be sent-out now.

		Priority messages: segments with a resend need no check current sliding
		window size. */
		pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	3340      	adds	r3, #64	; 0x40
 800edba:	4618      	mov	r0, r3
 800edbc:	f7ff fc17 	bl	800e5ee <xTCPWindowGetHead>
 800edc0:	61f8      	str	r0, [r7, #28]
		pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	62da      	str	r2, [r3, #44]	; 0x2c

		if( pxSegment == NULL )
 800edca:	69fb      	ldr	r3, [r7, #28]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d16e      	bne.n	800eeae <ulTCPWindowTxGet+0x10a>
		{
			/* Waiting messages: outstanding messages with a running timer
			neither check peer's reception window size because these packets
			have been sent earlier. */
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	3368      	adds	r3, #104	; 0x68
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7ff fc28 	bl	800e62a <xTCPWindowPeekHead>
 800edda:	61f8      	str	r0, [r7, #28]

			if( pxSegment != NULL )
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d01f      	beq.n	800ee22 <ulTCPWindowTxGet+0x7e>
			{
				/* Do check the timing. */
				ulMaxTime = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ede6:	461a      	mov	r2, r3
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	7d1b      	ldrb	r3, [r3, #20]
 800edec:	fa02 f303 	lsl.w	r3, r2, r3
 800edf0:	617b      	str	r3, [r7, #20]

				if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 800edf2:	69fb      	ldr	r3, [r7, #28]
 800edf4:	3310      	adds	r3, #16
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7ff fac9 	bl	800e38e <ulTimerGetAge>
 800edfc:	4602      	mov	r2, r0
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d90c      	bls.n	800ee1e <ulTCPWindowTxGet+0x7a>
				{
					/* A normal (non-fast) retransmission.  Move it from the
					head of the waiting queue. */
					pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	3368      	adds	r3, #104	; 0x68
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7ff fbf0 	bl	800e5ee <xTCPWindowGetHead>
 800ee0e:	61f8      	str	r0, [r7, #28]
					pxSegment->u.bits.ucDupAckCount = pdFALSE_UNSIGNED;
 800ee10:	69fb      	ldr	r3, [r7, #28]
 800ee12:	2200      	movs	r2, #0
 800ee14:	755a      	strb	r2, [r3, #21]

					/* Some detailed logging. */
					if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 ) )
 800ee16:	4b4c      	ldr	r3, [pc, #304]	; (800ef48 <ulTCPWindowTxGet+0x1a4>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	e001      	b.n	800ee22 <ulTCPWindowTxGet+0x7e>
						FreeRTOS_flush_logging( );
					}
				}
				else
				{
					pxSegment = NULL;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	61fb      	str	r3, [r7, #28]
				}
			}

			if( pxSegment == NULL )
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d142      	bne.n	800eeae <ulTCPWindowTxGet+0x10a>
			{
				/* New messages: sent-out for the first time.  Check current
				sliding window size of peer. */
				pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	3354      	adds	r3, #84	; 0x54
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7ff fbfc 	bl	800e62a <xTCPWindowPeekHead>
 800ee32:	61f8      	str	r0, [r7, #28]

				if( pxSegment == NULL )
 800ee34:	69fb      	ldr	r3, [r7, #28]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d102      	bne.n	800ee40 <ulTCPWindowTxGet+0x9c>
				{
					/* No segments queued. */
					ulReturn = 0UL;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	61bb      	str	r3, [r7, #24]
 800ee3e:	e036      	b.n	800eeae <ulTCPWindowTxGet+0x10a>
				}
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	f003 0302 	and.w	r3, r3, #2
 800ee48:	b2db      	uxtb	r3, r3
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d008      	beq.n	800ee60 <ulTCPWindowTxGet+0xbc>
 800ee4e:	69fb      	ldr	r3, [r7, #28]
 800ee50:	689a      	ldr	r2, [r3, #8]
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	685b      	ldr	r3, [r3, #4]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	da02      	bge.n	800ee60 <ulTCPWindowTxGet+0xbc>
				{
					/* A segment has been queued but the driver waits until it
					has a full size of MSS. */
					ulReturn = 0;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	61bb      	str	r3, [r7, #24]
 800ee5e:	e026      	b.n	800eeae <ulTCPWindowTxGet+0x10a>
				}
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800ee60:	68b9      	ldr	r1, [r7, #8]
 800ee62:	68f8      	ldr	r0, [r7, #12]
 800ee64:	f7ff fef8 	bl	800ec58 <prvTCPWindowTxHasSpace>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d102      	bne.n	800ee74 <ulTCPWindowTxGet+0xd0>
				{
					/* Peer has no more space at this moment. */
					ulReturn = 0;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	61bb      	str	r3, [r7, #24]
 800ee72:	e01c      	b.n	800eeae <ulTCPWindowTxGet+0x10a>
				}
				else
				{
					/* Move it out of the Tx queue. */
					pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	3354      	adds	r3, #84	; 0x54
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7ff fbb8 	bl	800e5ee <xTCPWindowGetHead>
 800ee7e:	61f8      	str	r0, [r7, #28]

					/* Don't let pxHeadSegment point to this segment any more,
					so no more data will be added. */
					if( pxWindow->pxHeadSegment == pxSegment )
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d102      	bne.n	800ee90 <ulTCPWindowTxGet+0xec>
					{
						pxWindow->pxHeadSegment = NULL;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	67da      	str	r2, [r3, #124]	; 0x7c
					}

					/* pxWindow->tx.highest registers the highest sequence
					number in our transmission window. */
					pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 800ee90:	69fb      	ldr	r3, [r7, #28]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	69fa      	ldr	r2, [r7, #28]
 800ee96:	6892      	ldr	r2, [r2, #8]
 800ee98:	441a      	add	r2, r3
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	629a      	str	r2, [r3, #40]	; 0x28

					/* ...and more detailed logging */
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 800ee9e:	4b2a      	ldr	r3, [pc, #168]	; (800ef48 <ulTCPWindowTxGet+0x1a4>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	dd03      	ble.n	800eeae <ulTCPWindowTxGet+0x10a>
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800eeac:	2b17      	cmp	r3, #23
				FreeRTOS_flush_logging( );
			}
		}

		/* See if it has already been determined to return 0. */
		if( ulReturn != 0UL )
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d043      	beq.n	800ef3c <ulTCPWindowTxGet+0x198>
		{
			configASSERT( listLIST_ITEM_CONTAINER( &(pxSegment->xQueueItem ) ) == NULL );
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d009      	beq.n	800eed0 <ulTCPWindowTxGet+0x12c>
 800eebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec0:	f383 8811 	msr	BASEPRI, r3
 800eec4:	f3bf 8f6f 	isb	sy
 800eec8:	f3bf 8f4f 	dsb	sy
 800eecc:	613b      	str	r3, [r7, #16]
 800eece:	e7fe      	b.n	800eece <ulTCPWindowTxGet+0x12a>

			/* Now that the segment will be transmitted, add it to the tail of
			the waiting queue. */
			vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800eed6:	69fb      	ldr	r3, [r7, #28]
 800eed8:	3318      	adds	r3, #24
 800eeda:	4619      	mov	r1, r3
 800eedc:	4610      	mov	r0, r2
 800eede:	f7ff fa39 	bl	800e354 <vListInsertFifo>

			/* And mark it as outstanding. */
			pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 800eee2:	69fa      	ldr	r2, [r7, #28]
 800eee4:	7d93      	ldrb	r3, [r2, #22]
 800eee6:	f043 0301 	orr.w	r3, r3, #1
 800eeea:	7593      	strb	r3, [r2, #22]

			/* Administer the transmit count, needed for fast
			retransmissions. */
			( pxSegment->u.bits.ucTransmitCount )++;
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	7d1b      	ldrb	r3, [r3, #20]
 800eef0:	3301      	adds	r3, #1
 800eef2:	b2da      	uxtb	r2, r3
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	751a      	strb	r2, [r3, #20]

			/* If there have been several retransmissions (4), decrease the
			size of the transmission window to at most 2 times MSS. */
			if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 800eef8:	69fb      	ldr	r3, [r7, #28]
 800eefa:	7d1b      	ldrb	r3, [r3, #20]
 800eefc:	2b04      	cmp	r3, #4
 800eefe:	d10d      	bne.n	800ef1c <ulTCPWindowTxGet+0x178>
			{
				if( pxWindow->xSize.ulTxWindowLength > ( 2U * pxWindow->usMSS ) )
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	689a      	ldr	r2, [r3, #8]
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800ef0a:	005b      	lsls	r3, r3, #1
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d905      	bls.n	800ef1c <ulTCPWindowTxGet+0x178>
				{
					FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
						pxWindow->usPeerPortNumber, pxWindow->usOurPortNumber,
						pxWindow->xSize.ulTxWindowLength, 2 * pxWindow->usMSS ) );
					pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800ef16:	005a      	lsls	r2, r3, #1
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	609a      	str	r2, [r3, #8]
				}
			}

			/* Clear the transmit timer. */
			vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	3310      	adds	r3, #16
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7ff fa27 	bl	800e374 <vTCPTimerSet>

			pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 800ef26:	69fb      	ldr	r3, [r7, #28]
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	62da      	str	r2, [r3, #44]	; 0x2c

			/* Inform the caller where to find the data within the queue. */
			*plPosition = pxSegment->lStreamPos;
 800ef2e:	69fb      	ldr	r3, [r7, #28]
 800ef30:	68da      	ldr	r2, [r3, #12]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	601a      	str	r2, [r3, #0]

			/* And return the length of the data segment */
			ulReturn = ( uint32_t ) pxSegment->lDataLength;
 800ef36:	69fb      	ldr	r3, [r7, #28]
 800ef38:	689b      	ldr	r3, [r3, #8]
 800ef3a:	61bb      	str	r3, [r7, #24]
		}

		return ulReturn;
 800ef3c:	69bb      	ldr	r3, [r7, #24]
	}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3720      	adds	r7, #32
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	2000482c 	.word	0x2000482c

0800ef4c <prvTCPWindowTxCheckAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b08c      	sub	sp, #48	; 0x30
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	607a      	str	r2, [r7, #4]
	uint32_t ulBytesConfirmed = 0u;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	62bb      	str	r3, [r7, #40]	; 0x28
	const ListItem_t *pxIterator;
	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xTxSegments );
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	3398      	adds	r3, #152	; 0x98
 800ef64:	61fb      	str	r3, [r7, #28]

		 A Smoothed RTT will increase quickly, but it is conservative when
		 becoming smaller. */

		for(
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800ef66:	69fb      	ldr	r3, [r7, #28]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	627b      	str	r3, [r7, #36]	; 0x24
		for(
 800ef6c:	e09b      	b.n	800f0a6 <prvTCPWindowTxCheckAck+0x15a>
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
			)
		{
			xDoUnlink = pdFALSE;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	623b      	str	r3, [r7, #32]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800ef72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	61bb      	str	r3, [r7, #24]

			/* Move to the next item because the current item might get
			removed. */
			pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800ef78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Continue if this segment does not fall within the ACK'd range. */
			if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	4619      	mov	r1, r3
 800ef84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef86:	f7ff f9c2 	bl	800e30e <xSequenceGreaterThan>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d000      	beq.n	800ef92 <prvTCPWindowTxCheckAck+0x46>
			{
				continue;
 800ef90:	e089      	b.n	800f0a6 <prvTCPWindowTxCheckAck+0x15a>
			}

			/* Is it ready? */
			if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	f040 8091 	bne.w	800f0c0 <prvTCPWindowTxCheckAck+0x174>
			{
				break;
			}

			ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 800ef9e:	69bb      	ldr	r3, [r7, #24]
 800efa0:	689b      	ldr	r3, [r3, #8]
 800efa2:	617b      	str	r3, [r7, #20]

			if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	7d9b      	ldrb	r3, [r3, #22]
 800efa8:	f003 0302 	and.w	r3, r3, #2
 800efac:	b2db      	uxtb	r3, r3
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d14d      	bne.n	800f04e <prvTCPWindowTxCheckAck+0x102>
			{
				if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t )ulDataLength, ulLast ) != pdFALSE )
 800efb2:	69bb      	ldr	r3, [r7, #24]
 800efb4:	681a      	ldr	r2, [r3, #0]
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	4413      	add	r3, r2
 800efba:	6879      	ldr	r1, [r7, #4]
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7ff f9a6 	bl	800e30e <xSequenceGreaterThan>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d17d      	bne.n	800f0c4 <prvTCPWindowTxCheckAck+0x178>
					#endif /* ipconfigHAS_DEBUG_PRINTF */
					break;
				}

				/* This segment is fully ACK'd, set the flag. */
				pxSegment->u.bits.bAcked = pdTRUE_UNSIGNED;
 800efc8:	69ba      	ldr	r2, [r7, #24]
 800efca:	7d93      	ldrb	r3, [r2, #22]
 800efcc:	f043 0302 	orr.w	r3, r3, #2
 800efd0:	7593      	strb	r3, [r2, #22]

				/* Calculate the RTT only if the segment was sent-out for the
				first time and if this is the last ACK'd segment in a range. */
				if( ( pxSegment->u.bits.ucTransmitCount == 1 ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	7d1b      	ldrb	r3, [r3, #20]
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	d137      	bne.n	800f04a <prvTCPWindowTxCheckAck+0xfe>
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	441a      	add	r2, r3
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d130      	bne.n	800f04a <prvTCPWindowTxCheckAck+0xfe>
				{
					int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 800efe8:	69bb      	ldr	r3, [r7, #24]
 800efea:	3310      	adds	r3, #16
 800efec:	4618      	mov	r0, r3
 800efee:	f7ff f9ce 	bl	800e38e <ulTimerGetAge>
 800eff2:	4603      	mov	r3, r0
 800eff4:	613b      	str	r3, [r7, #16]

					if( pxWindow->lSRTT >= mS )
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	429a      	cmp	r2, r3
 800effe:	db0e      	blt.n	800f01e <prvTCPWindowTxCheckAck+0xd2>
					{
						/* RTT becomes smaller: adapt slowly. */
						pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f004:	4613      	mov	r3, r2
 800f006:	00db      	lsls	r3, r3, #3
 800f008:	1a9a      	subs	r2, r3, r2
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	4413      	add	r3, r2
 800f00e:	2b00      	cmp	r3, #0
 800f010:	da00      	bge.n	800f014 <prvTCPWindowTxCheckAck+0xc8>
 800f012:	3307      	adds	r3, #7
 800f014:	10db      	asrs	r3, r3, #3
 800f016:	461a      	mov	r2, r3
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	639a      	str	r2, [r3, #56]	; 0x38
 800f01c:	e00e      	b.n	800f03c <prvTCPWindowTxCheckAck+0xf0>
					}
					else
					{
						/* RTT becomes larger: adapt quicker */
						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f022:	4613      	mov	r3, r2
 800f024:	005b      	lsls	r3, r3, #1
 800f026:	441a      	add	r2, r3
 800f028:	693b      	ldr	r3, [r7, #16]
 800f02a:	4413      	add	r3, r2
 800f02c:	005b      	lsls	r3, r3, #1
 800f02e:	2b00      	cmp	r3, #0
 800f030:	da00      	bge.n	800f034 <prvTCPWindowTxCheckAck+0xe8>
 800f032:	3307      	adds	r3, #7
 800f034:	10db      	asrs	r3, r3, #3
 800f036:	461a      	mov	r2, r3
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	639a      	str	r2, [r3, #56]	; 0x38
					}

					/* Cap to the minimum of 50ms. */
					if( pxWindow->lSRTT < winSRTT_CAP_mS )
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f040:	2b31      	cmp	r3, #49	; 0x31
 800f042:	dc02      	bgt.n	800f04a <prvTCPWindowTxCheckAck+0xfe>
					{
						pxWindow->lSRTT = winSRTT_CAP_mS;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2232      	movs	r2, #50	; 0x32
 800f048:	639a      	str	r2, [r3, #56]	; 0x38
					}
				}

				/* Unlink it from the 3 queues, but do not destroy it (yet). */
				xDoUnlink = pdTRUE;
 800f04a:	2301      	movs	r3, #1
 800f04c:	623b      	str	r3, [r7, #32]
			}

			/* pxSegment->u.bits.bAcked is now true.  Is it located at the left
			side of the transmission queue?  If so, it may be freed. */
			if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	6a1a      	ldr	r2, [r3, #32]
 800f052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f054:	429a      	cmp	r2, r3
 800f056:	d116      	bne.n	800f086 <prvTCPWindowTxCheckAck+0x13a>
			{
				if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 800f058:	4b1d      	ldr	r3, [pc, #116]	; (800f0d0 <prvTCPWindowTxCheckAck+0x184>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	dd03      	ble.n	800f068 <prvTCPWindowTxCheckAck+0x11c>
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f066:	2b17      	cmp	r3, #23
						ulLast - pxWindow->tx.ulFirstSequenceNumber,
						pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
				}

				/* Increase the left-hand value of the transmission window. */
				pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	6a1a      	ldr	r2, [r3, #32]
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	441a      	add	r2, r3
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	621a      	str	r2, [r3, #32]

				/* This function will return the number of bytes that the tail
				of txStream may be advanced. */
				ulBytesConfirmed += ulDataLength;
 800f074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	4413      	add	r3, r2
 800f07a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* All segments below tx.ulCurrentSequenceNumber may be freed. */
				vTCPWindowFree( pxSegment );
 800f07c:	69b8      	ldr	r0, [r7, #24]
 800f07e:	f7ff faf1 	bl	800e664 <vTCPWindowFree>

				/* No need to unlink it any more. */
				xDoUnlink = pdFALSE;
 800f082:	2300      	movs	r3, #0
 800f084:	623b      	str	r3, [r7, #32]
			}

			if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 800f086:	6a3b      	ldr	r3, [r7, #32]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d008      	beq.n	800f09e <prvTCPWindowTxCheckAck+0x152>
 800f08c:	69bb      	ldr	r3, [r7, #24]
 800f08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f090:	2b00      	cmp	r3, #0
 800f092:	d004      	beq.n	800f09e <prvTCPWindowTxCheckAck+0x152>
			{
				/* Remove item from its queues. */
				uxListRemove( &pxSegment->xQueueItem );
 800f094:	69bb      	ldr	r3, [r7, #24]
 800f096:	3318      	adds	r3, #24
 800f098:	4618      	mov	r0, r3
 800f09a:	f7f6 fe1e 	bl	8005cda <uxListRemove>
			}

			ulSequenceNumber += ulDataLength;
 800f09e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	4413      	add	r3, r2
 800f0a4:	62bb      	str	r3, [r7, #40]	; 0x28
		for(
 800f0a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0a8:	69fb      	ldr	r3, [r7, #28]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d00b      	beq.n	800f0c6 <prvTCPWindowTxCheckAck+0x17a>
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
 800f0ae:	6879      	ldr	r1, [r7, #4]
 800f0b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0b2:	f7ff f91a 	bl	800e2ea <xSequenceLessThan>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	f47f af58 	bne.w	800ef6e <prvTCPWindowTxCheckAck+0x22>
 800f0be:	e002      	b.n	800f0c6 <prvTCPWindowTxCheckAck+0x17a>
				break;
 800f0c0:	bf00      	nop
 800f0c2:	e000      	b.n	800f0c6 <prvTCPWindowTxCheckAck+0x17a>
					break;
 800f0c4:	bf00      	nop
		}

		return ulBytesConfirmed;
 800f0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3730      	adds	r7, #48	; 0x30
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	2000482c 	.word	0x2000482c

0800f0d4 <prvTCPWindowFastRetransmit>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t *pxWindow, uint32_t ulFirst )
	{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b086      	sub	sp, #24
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	6039      	str	r1, [r7, #0]
	const ListItem_t *pxIterator;
	const MiniListItem_t* pxEnd;
	TCPSegment_t *pxSegment;
	uint32_t ulCount = 0UL;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	613b      	str	r3, [r7, #16]

		/* A higher Tx block has been acknowledged.  Now iterate through the
		 xWaitQueue to find a possible condition for a FAST retransmission. */

		pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	3370      	adds	r3, #112	; 0x70
 800f0e6:	60fb      	str	r3, [r7, #12]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	617b      	str	r3, [r7, #20]
 800f0ee:	e03b      	b.n	800f168 <prvTCPWindowFastRetransmit+0x94>
			 pxIterator != ( const ListItem_t * ) pxEnd; )
		{
			/* Get the owner, which is a TCP segment. */
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	60bb      	str	r3, [r7, #8]

			/* Hop to the next item before the current gets unlinked. */
			pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	617b      	str	r3, [r7, #20]

			/* Fast retransmission:
			When 3 packets with a higher sequence number have been acknowledged
			by the peer, it is very unlikely a current packet will ever arrive.
			It will be retransmitted far before the RTO. */
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	7d9b      	ldrb	r3, [r3, #22]
 800f100:	f003 0302 	and.w	r3, r3, #2
 800f104:	b2db      	uxtb	r3, r3
 800f106:	2b00      	cmp	r3, #0
 800f108:	d12e      	bne.n	800f168 <prvTCPWindowFastRetransmit+0x94>
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	6839      	ldr	r1, [r7, #0]
 800f110:	4618      	mov	r0, r3
 800f112:	f7ff f8ea 	bl	800e2ea <xSequenceLessThan>
 800f116:	4603      	mov	r3, r0
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d025      	beq.n	800f168 <prvTCPWindowFastRetransmit+0x94>
				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	7d5b      	ldrb	r3, [r3, #21]
 800f120:	3301      	adds	r3, #1
 800f122:	b2da      	uxtb	r2, r3
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	755a      	strb	r2, [r3, #21]
				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	7d5b      	ldrb	r3, [r3, #21]
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 800f12c:	2b03      	cmp	r3, #3
 800f12e:	d11b      	bne.n	800f168 <prvTCPWindowFastRetransmit+0x94>
			{
				pxSegment->u.bits.ucTransmitCount = pdFALSE_UNSIGNED;
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	2200      	movs	r2, #0
 800f134:	751a      	strb	r2, [r3, #20]

				/* Not clearing 'ucDupAckCount' yet as more SACK's might come in
				which might lead to a second fast rexmit. */
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 800f136:	4b11      	ldr	r3, [pc, #68]	; (800f17c <prvTCPWindowFastRetransmit+0xa8>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	db03      	blt.n	800f146 <prvTCPWindowFastRetransmit+0x72>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f144:	2b17      	cmp	r3, #23
						ulFirst - pxWindow->tx.ulFirstSequenceNumber ) );
					FreeRTOS_flush_logging( );
				}

				/* Remove it from xWaitQueue. */
				uxListRemove( &pxSegment->xQueueItem );
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	3318      	adds	r3, #24
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7f6 fdc5 	bl	8005cda <uxListRemove>

				/* Add this segment to the priority queue so it gets
				retransmitted immediately. */
				vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	3318      	adds	r3, #24
 800f15a:	4619      	mov	r1, r3
 800f15c:	4610      	mov	r0, r2
 800f15e:	f7ff f8f9 	bl	800e354 <vListInsertFifo>
				ulCount++;
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	3301      	adds	r3, #1
 800f166:	613b      	str	r3, [r7, #16]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f168:	697a      	ldr	r2, [r7, #20]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d1bf      	bne.n	800f0f0 <prvTCPWindowFastRetransmit+0x1c>
			}
		}

		return ulCount;
 800f170:	693b      	ldr	r3, [r7, #16]
	}
 800f172:	4618      	mov	r0, r3
 800f174:	3718      	adds	r7, #24
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	2000482c 	.word	0x2000482c

0800f180 <ulTCPWindowTxAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxAck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
	uint32_t ulFirstSequence, ulReturn;

		/* Receive a normal ACK. */

		ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6a1b      	ldr	r3, [r3, #32]
 800f18e:	60bb      	str	r3, [r7, #8]

		if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 800f190:	68b9      	ldr	r1, [r7, #8]
 800f192:	6838      	ldr	r0, [r7, #0]
 800f194:	f7ff f898 	bl	800e2c8 <xSequenceLessThanOrEqual>
 800f198:	4603      	mov	r3, r0
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d002      	beq.n	800f1a4 <ulTCPWindowTxAck+0x24>
		{
			ulReturn = 0UL;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	60fb      	str	r3, [r7, #12]
 800f1a2:	e005      	b.n	800f1b0 <ulTCPWindowTxAck+0x30>
		}
		else
		{
			ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 800f1a4:	683a      	ldr	r2, [r7, #0]
 800f1a6:	68b9      	ldr	r1, [r7, #8]
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f7ff fecf 	bl	800ef4c <prvTCPWindowTxCheckAck>
 800f1ae:	60f8      	str	r0, [r7, #12]
		}

		return ulReturn;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
	}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3710      	adds	r7, #16
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
	...

0800f1bc <ulTCPWindowTxSack>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxSack( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b086      	sub	sp, #24
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	607a      	str	r2, [r7, #4]
	uint32_t ulAckCount = 0UL;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	617b      	str	r3, [r7, #20]
	uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	6a1b      	ldr	r3, [r3, #32]
 800f1d0:	613b      	str	r3, [r7, #16]

		/* Receive a SACK option. */
		ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	68b9      	ldr	r1, [r7, #8]
 800f1d6:	68f8      	ldr	r0, [r7, #12]
 800f1d8:	f7ff feb8 	bl	800ef4c <prvTCPWindowTxCheckAck>
 800f1dc:	6178      	str	r0, [r7, #20]
		prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 800f1de:	68b9      	ldr	r1, [r7, #8]
 800f1e0:	68f8      	ldr	r0, [r7, #12]
 800f1e2:	f7ff ff77 	bl	800f0d4 <prvTCPWindowFastRetransmit>

		if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 800f1e6:	4b06      	ldr	r3, [pc, #24]	; (800f200 <ulTCPWindowTxSack+0x44>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	dd03      	ble.n	800f1f6 <ulTCPWindowTxSack+0x3a>
 800f1ee:	6939      	ldr	r1, [r7, #16]
 800f1f0:	68b8      	ldr	r0, [r7, #8]
 800f1f2:	f7ff f88c 	bl	800e30e <xSequenceGreaterThan>
				ulLast - pxWindow->tx.ulFirstSequenceNumber,
				pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
			FreeRTOS_flush_logging( );
		}

		return ulAckCount;
 800f1f6:	697b      	ldr	r3, [r7, #20]
	}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3718      	adds	r7, #24
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}
 800f200:	2000482c 	.word	0x2000482c

0800f204 <vProcessGeneratedUDPPacket>:
	}
};
/*-----------------------------------------------------------*/

void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800f204:	b5b0      	push	{r4, r5, r7, lr}
 800f206:	b088      	sub	sp, #32
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
UDPPacket_t *pxUDPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	695b      	ldr	r3, [r3, #20]
 800f210:	60fb      	str	r3, [r7, #12]

	/* Map the UDP packet onto the start of the frame. */
	pxUDPPacket = ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	699b      	ldr	r3, [r3, #24]
 800f216:	61bb      	str	r3, [r7, #24]

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 800f218:	69ba      	ldr	r2, [r7, #24]
 800f21a:	f107 030c 	add.w	r3, r7, #12
 800f21e:	4611      	mov	r1, r2
 800f220:	4618      	mov	r0, r3
 800f222:	f7f9 f8b7 	bl	8008394 <eARPGetCacheEntry>
 800f226:	4603      	mov	r3, r0
 800f228:	77fb      	strb	r3, [r7, #31]

	if( eReturned != eCantSendPacket )
 800f22a:	7ffb      	ldrb	r3, [r7, #31]
 800f22c:	2b02      	cmp	r3, #2
 800f22e:	f000 8089 	beq.w	800f344 <vProcessGeneratedUDPPacket+0x140>
	{
		if( eReturned == eARPCacheHit )
 800f232:	7ffb      	ldrb	r3, [r7, #31]
 800f234:	2b01      	cmp	r3, #1
 800f236:	d174      	bne.n	800f322 <vProcessGeneratedUDPPacket+0x11e>
				uint8_t ucSocketOptions;
			#endif
			iptraceSENDING_UDP_PACKET( pxNetworkBuffer->ulIPAddress );

			/* Create short cuts to the data within the packet. */
			pxIPHeader = &( pxUDPPacket->xIPHeader );
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	330e      	adds	r3, #14
 800f23c:	617b      	str	r3, [r7, #20]

		#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
			/* Is it possible that the packet is not actually a UDP packet
			after all, but an ICMP packet. */
			if( pxNetworkBuffer->usPort != ipPACKET_CONTAINS_ICMP_DATA )
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	8c1b      	ldrh	r3, [r3, #32]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d026      	beq.n	800f294 <vProcessGeneratedUDPPacket+0x90>
		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
			{
			UDPHeader_t *pxUDPHeader;

				pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 800f246:	69bb      	ldr	r3, [r7, #24]
 800f248:	3322      	adds	r3, #34	; 0x22
 800f24a:	613b      	str	r3, [r7, #16]

				pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	8c1a      	ldrh	r2, [r3, #32]
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	805a      	strh	r2, [r3, #2]
				pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	801a      	strh	r2, [r3, #0]
				pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) );
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	69db      	ldr	r3, [r3, #28]
 800f260:	b29b      	uxth	r3, r3
 800f262:	3308      	adds	r3, #8
 800f264:	b29a      	uxth	r2, r3
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	809a      	strh	r2, [r3, #4]
				pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	889b      	ldrh	r3, [r3, #4]
 800f26e:	b29b      	uxth	r3, r3
 800f270:	021b      	lsls	r3, r3, #8
 800f272:	b21a      	sxth	r2, r3
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	889b      	ldrh	r3, [r3, #4]
 800f278:	b29b      	uxth	r3, r3
 800f27a:	0a1b      	lsrs	r3, r3, #8
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	b21b      	sxth	r3, r3
 800f280:	4313      	orrs	r3, r2
 800f282:	b21b      	sxth	r3, r3
 800f284:	b29a      	uxth	r2, r3
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	809a      	strh	r2, [r3, #4]
				pxUDPHeader->usChecksum = 0u;
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	2200      	movs	r2, #0
 800f28e:	719a      	strb	r2, [r3, #6]
 800f290:	2200      	movs	r2, #0
 800f292:	71da      	strb	r2, [r3, #7]
			*/
			/* Save options now, as they will be overwritten by memcpy */
			#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
				ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
			#endif
			memcpy( ( void *) &( pxUDPPacket->xEthernetHeader.xSourceAddress ), ( void * ) xDefaultPartUDPPacketHeader.ucBytes, sizeof( xDefaultPartUDPPacketHeader ) );
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	3306      	adds	r3, #6
 800f298:	4a32      	ldr	r2, [pc, #200]	; (800f364 <vProcessGeneratedUDPPacket+0x160>)
 800f29a:	461d      	mov	r5, r3
 800f29c:	4614      	mov	r4, r2
 800f29e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2a0:	6028      	str	r0, [r5, #0]
 800f2a2:	6069      	str	r1, [r5, #4]
 800f2a4:	60aa      	str	r2, [r5, #8]
 800f2a6:	60eb      	str	r3, [r5, #12]
 800f2a8:	cc03      	ldmia	r4!, {r0, r1}
 800f2aa:	6128      	str	r0, [r5, #16]
 800f2ac:	6169      	str	r1, [r5, #20]

		#if ipconfigSUPPORT_OUTGOING_PINGS == 1
			if( pxNetworkBuffer->usPort == ipPACKET_CONTAINS_ICMP_DATA )
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	8c1b      	ldrh	r3, [r3, #32]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d10a      	bne.n	800f2cc <vProcessGeneratedUDPPacket+0xc8>
			{
				pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	2201      	movs	r2, #1
 800f2ba:	725a      	strb	r2, [r3, #9]
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) );
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	69db      	ldr	r3, [r3, #28]
 800f2c0:	b29b      	uxth	r3, r3
 800f2c2:	3314      	adds	r3, #20
 800f2c4:	b29a      	uxth	r2, r3
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	805a      	strh	r2, [r3, #2]
 800f2ca:	e006      	b.n	800f2da <vProcessGeneratedUDPPacket+0xd6>
			}
			else
		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
			{
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	69db      	ldr	r3, [r3, #28]
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	331c      	adds	r3, #28
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	805a      	strh	r2, [r3, #2]
			}

			/* The total transmit size adds on the Ethernet header. */
			pxNetworkBuffer->xDataLength = pxIPHeader->usLength + sizeof( EthernetHeader_t );
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	885b      	ldrh	r3, [r3, #2]
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	f103 020e 	add.w	r2, r3, #14
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	61da      	str	r2, [r3, #28]
			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	885b      	ldrh	r3, [r3, #2]
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	021b      	lsls	r3, r3, #8
 800f2f0:	b21a      	sxth	r2, r3
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	885b      	ldrh	r3, [r3, #2]
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	0a1b      	lsrs	r3, r3, #8
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	b21b      	sxth	r3, r3
 800f2fe:	4313      	orrs	r3, r2
 800f300:	b21b      	sxth	r3, r3
 800f302:	b29a      	uxth	r2, r3
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	805a      	strh	r2, [r3, #2]
			/* HT:endian: changed back to network endian */
			pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	695a      	ldr	r2, [r3, #20]
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	611a      	str	r2, [r3, #16]

			#if( ipconfigUSE_LLMNR == 1 )
			{
				/* LLMNR messages are typically used on a LAN and they're
				 * not supposed to cross routers */
				if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	695b      	ldr	r3, [r3, #20]
 800f314:	4a14      	ldr	r2, [pc, #80]	; (800f368 <vProcessGeneratedUDPPacket+0x164>)
 800f316:	4293      	cmp	r3, r2
 800f318:	d114      	bne.n	800f344 <vProcessGeneratedUDPPacket+0x140>
				{
					pxIPHeader->ucTimeToLive = 0x01;
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	2201      	movs	r2, #1
 800f31e:	721a      	strb	r2, [r3, #8]
 800f320:	e010      	b.n	800f344 <vProcessGeneratedUDPPacket+0x140>
					pxUDPPacket->xUDPHeader.usChecksum = 0u;
				}
			}
			#endif
		}
		else if( eReturned == eARPCacheMiss )
 800f322:	7ffb      	ldrb	r3, [r7, #31]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d10b      	bne.n	800f340 <vProcessGeneratedUDPPacket+0x13c>
		{
			/* Add an entry to the ARP table with a null hardware address.
			This allows the ARP timer to know that an ARP reply is
			outstanding, and perform retransmissions if necessary. */
			vARPRefreshCacheEntry( NULL, ulIPAddress );
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	4619      	mov	r1, r3
 800f32c:	2000      	movs	r0, #0
 800f32e:	f7f8 ff39 	bl	80081a4 <vARPRefreshCacheEntry>

			/* Generate an ARP for the required IP address. */
			iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->ulIPAddress );
			pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800f332:	68fa      	ldr	r2, [r7, #12]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	615a      	str	r2, [r3, #20]
			vARPGenerateRequestPacket( pxNetworkBuffer );
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f7f9 f985 	bl	8008648 <vARPGenerateRequestPacket>
 800f33e:	e001      	b.n	800f344 <vProcessGeneratedUDPPacket+0x140>
		}
		else
		{
			/* The lookup indicated that an ARP request has already been
			sent out for the queried IP address. */
			eReturned = eCantSendPacket;
 800f340:	2302      	movs	r3, #2
 800f342:	77fb      	strb	r3, [r7, #31]
		}
	}

	if( eReturned != eCantSendPacket )
 800f344:	7ffb      	ldrb	r3, [r7, #31]
 800f346:	2b02      	cmp	r3, #2
 800f348:	d004      	beq.n	800f354 <vProcessGeneratedUDPPacket+0x150>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
			}
		}
		#endif

		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800f34a:	2101      	movs	r1, #1
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f7f5 fa41 	bl	80047d4 <xNetworkInterfaceOutput>
	{
		/* The packet can't be sent (DHCP not completed?).  Just drop the
		packet. */
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
	}
}
 800f352:	e002      	b.n	800f35a <vProcessGeneratedUDPPacket+0x156>
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 f9a5 	bl	800f6a4 <vReleaseNetworkBufferAndDescriptor>
}
 800f35a:	bf00      	nop
 800f35c:	3720      	adds	r7, #32
 800f35e:	46bd      	mov	sp, r7
 800f360:	bdb0      	pop	{r4, r5, r7, pc}
 800f362:	bf00      	nop
 800f364:	200000a0 	.word	0x200000a0
 800f368:	fc0000e0 	.word	0xfc0000e0

0800f36c <xProcessReceivedUDPPacket>:
/*-----------------------------------------------------------*/

BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer, uint16_t usPort )
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b086      	sub	sp, #24
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	460b      	mov	r3, r1
 800f376:	807b      	strh	r3, [r7, #2]
BaseType_t xReturn = pdPASS;
 800f378:	2301      	movs	r3, #1
 800f37a:	617b      	str	r3, [r7, #20]
FreeRTOS_Socket_t *pxSocket;

UDPPacket_t *pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	699b      	ldr	r3, [r3, #24]
 800f380:	613b      	str	r3, [r7, #16]

	pxSocket = pxUDPSocketLookup( usPort );
 800f382:	887b      	ldrh	r3, [r7, #2]
 800f384:	4618      	mov	r0, r3
 800f386:	f7fc f817 	bl	800b3b8 <pxUDPSocketLookup>
 800f38a:	60f8      	str	r0, [r7, #12]

	if( pxSocket )
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d042      	beq.n	800f418 <xProcessReceivedUDPPacket+0xac>
	{

		/* When refreshing the ARP cache with received UDP packets we must be
		careful;  hundreds of broadcast messages may pass and if we're not
		handling them, no use to fill the ARP cache with those IP addresses. */
		vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	1d9a      	adds	r2, r3, #6
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f39c:	4619      	mov	r1, r3
 800f39e:	4610      	mov	r0, r2
 800f3a0:	f7f8 ff00 	bl	80081a4 <vARPRefreshCacheEntry>
				}
			}
		}
		#endif

		if( xReturn == pdPASS )
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	2b01      	cmp	r3, #1
 800f3a8:	d171      	bne.n	800f48e <xProcessReceivedUDPPacket+0x122>
		{
			vTaskSuspendAll();
 800f3aa:	f7f7 ffc1 	bl	8007330 <vTaskSuspendAll>
			{
				if( xReturn == pdPASS )
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d10a      	bne.n	800f3ca <xProcessReceivedUDPPacket+0x5e>
				{
					taskENTER_CRITICAL();
 800f3b4:	f7f6 fde2 	bl	8005f7c <vPortEnterCritical>
					{
						/* Add the network packet to the list of packets to be
						processed by the socket. */
						vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	3338      	adds	r3, #56	; 0x38
 800f3bc:	687a      	ldr	r2, [r7, #4]
 800f3be:	4611      	mov	r1, r2
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7f6 fc2d 	bl	8005c20 <vListInsertEnd>
					}
					taskEXIT_CRITICAL();
 800f3c6:	f7f6 fe07 	bl	8005fd8 <vPortExitCritical>
				}
			}
			xTaskResumeAll();
 800f3ca:	f7f7 ffbf 	bl	800734c <xTaskResumeAll>

			/* Set the socket's receive event */
			if( pxSocket->xEventGroup != NULL )
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d005      	beq.n	800f3e2 <xProcessReceivedUDPPacket+0x76>
			{
				xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	2101      	movs	r1, #1
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7f6 fb17 	bl	8005a10 <xEventGroupSetBits>
			}

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) )
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d00c      	beq.n	800f404 <xProcessReceivedUDPPacket+0x98>
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ee:	f003 0301 	and.w	r3, r3, #1
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d006      	beq.n	800f404 <xProcessReceivedUDPPacket+0x98>
				{
					xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_READ );
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	2101      	movs	r1, #1
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7f6 fb06 	bl	8005a10 <xEventGroupSetBits>
			}
			#endif

			#if( ipconfigUSE_DHCP == 1 )
			{
				if( xIsDHCPSocket( pxSocket ) )
 800f404:	68f8      	ldr	r0, [r7, #12]
 800f406:	f7f9 f961 	bl	80086cc <xIsDHCPSocket>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d03e      	beq.n	800f48e <xProcessReceivedUDPPacket+0x122>
				{
					xSendEventToIPTask( eDHCPEvent );
 800f410:	2004      	movs	r0, #4
 800f412:	f7fa fd91 	bl	8009f38 <xSendEventToIPTask>
 800f416:	e03a      	b.n	800f48e <xProcessReceivedUDPPacket+0x122>
		#if( ipconfigUSE_DNS == 1 )
			/* a DNS reply, check for the source port.  Although the DNS client
			does open a UDP socket to send a messages, this socket will be
			closed after a short timeout.  Messages that come late (after the
			socket is closed) will be treated here. */
			if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ipDNS_PORT )
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f41c:	b29b      	uxth	r3, r3
 800f41e:	021b      	lsls	r3, r3, #8
 800f420:	b21a      	sxth	r2, r3
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f426:	b29b      	uxth	r3, r3
 800f428:	0a1b      	lsrs	r3, r3, #8
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	b21b      	sxth	r3, r3
 800f42e:	4313      	orrs	r3, r2
 800f430:	b21b      	sxth	r3, r3
 800f432:	2b35      	cmp	r3, #53	; 0x35
 800f434:	d10e      	bne.n	800f454 <xProcessReceivedUDPPacket+0xe8>
			{
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800f436:	693b      	ldr	r3, [r7, #16]
 800f438:	1d9a      	adds	r2, r3, #6
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f440:	4619      	mov	r1, r3
 800f442:	4610      	mov	r0, r2
 800f444:	f7f8 feae 	bl	80081a4 <vARPRefreshCacheEntry>
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f7f9 fead 	bl	80091a8 <ulDNSHandlePacket>
 800f44e:	4603      	mov	r3, r0
 800f450:	617b      	str	r3, [r7, #20]
 800f452:	e01c      	b.n	800f48e <xProcessReceivedUDPPacket+0x122>
			else
		#endif

		#if( ipconfigUSE_LLMNR == 1 )
			/* a LLMNR request, check for the destination port. */
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 800f454:	887b      	ldrh	r3, [r7, #2]
 800f456:	f64e 3214 	movw	r2, #60180	; 0xeb14
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d006      	beq.n	800f46c <xProcessReceivedUDPPacket+0x100>
				( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f462:	b29b      	uxth	r3, r3
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 800f464:	f64e 3214 	movw	r2, #60180	; 0xeb14
 800f468:	4293      	cmp	r3, r2
 800f46a:	d10e      	bne.n	800f48a <xProcessReceivedUDPPacket+0x11e>
			{
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	1d9a      	adds	r2, r3, #6
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f476:	4619      	mov	r1, r3
 800f478:	4610      	mov	r0, r2
 800f47a:	f7f8 fe93 	bl	80081a4 <vARPRefreshCacheEntry>
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f7f9 fe92 	bl	80091a8 <ulDNSHandlePacket>
 800f484:	4603      	mov	r3, r0
 800f486:	617b      	str	r3, [r7, #20]
 800f488:	e001      	b.n	800f48e <xProcessReceivedUDPPacket+0x122>
				xReturn = ( BaseType_t )ulNBNSHandlePacket( pxNetworkBuffer );
			}
			else
		#endif /* ipconfigUSE_NBNS */
		{
			xReturn = pdFAIL;
 800f48a:	2300      	movs	r3, #0
 800f48c:	617b      	str	r3, [r7, #20]
		}
	}

	return xReturn;
 800f48e:	697b      	ldr	r3, [r7, #20]
}
 800f490:	4618      	mov	r0, r3
 800f492:	3718      	adds	r7, #24
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}

0800f498 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
BaseType_t xReturn, x;

	/* Only initialise the buffers and their associated kernel objects if they
	have not been initialised before. */
	if( xNetworkBufferSemaphore == NULL )
 800f49e:	4b37      	ldr	r3, [pc, #220]	; (800f57c <xNetworkBuffersInitialise+0xe4>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d15c      	bne.n	800f560 <xNetworkBuffersInitialise+0xc8>
	{
		xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 800f4a6:	2119      	movs	r1, #25
 800f4a8:	2019      	movs	r0, #25
 800f4aa:	f7f7 f8d9 	bl	8006660 <xQueueCreateCountingSemaphore>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	4b32      	ldr	r3, [pc, #200]	; (800f57c <xNetworkBuffersInitialise+0xe4>)
 800f4b2:	601a      	str	r2, [r3, #0]
		configASSERT( xNetworkBufferSemaphore );
 800f4b4:	4b31      	ldr	r3, [pc, #196]	; (800f57c <xNetworkBuffersInitialise+0xe4>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d109      	bne.n	800f4d0 <xNetworkBuffersInitialise+0x38>
 800f4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c0:	f383 8811 	msr	BASEPRI, r3
 800f4c4:	f3bf 8f6f 	isb	sy
 800f4c8:	f3bf 8f4f 	dsb	sy
 800f4cc:	607b      	str	r3, [r7, #4]
 800f4ce:	e7fe      	b.n	800f4ce <xNetworkBuffersInitialise+0x36>
		#if ( configQUEUE_REGISTRY_SIZE > 0 )
		{
			vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 800f4d0:	4b2a      	ldr	r3, [pc, #168]	; (800f57c <xNetworkBuffersInitialise+0xe4>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	492a      	ldr	r1, [pc, #168]	; (800f580 <xNetworkBuffersInitialise+0xe8>)
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7f7 fd34 	bl	8006f44 <vQueueAddToRegistry>
			vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
			vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
		}
		#endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

		if( xNetworkBufferSemaphore != NULL )
 800f4dc:	4b27      	ldr	r3, [pc, #156]	; (800f57c <xNetworkBuffersInitialise+0xe4>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d03d      	beq.n	800f560 <xNetworkBuffersInitialise+0xc8>
		{
			vListInitialise( &xFreeBuffersList );
 800f4e4:	4827      	ldr	r0, [pc, #156]	; (800f584 <xNetworkBuffersInitialise+0xec>)
 800f4e6:	f7f6 fb6e 	bl	8005bc6 <vListInitialise>

			/* Initialise all the network buffers.  No storage is allocated to
			the buffers yet. */
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	60bb      	str	r3, [r7, #8]
 800f4ee:	e031      	b.n	800f554 <xNetworkBuffersInitialise+0xbc>
			{
				/* Initialise and set the owner of the buffer list items. */
				xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 800f4f0:	4925      	ldr	r1, [pc, #148]	; (800f588 <xNetworkBuffersInitialise+0xf0>)
 800f4f2:	68ba      	ldr	r2, [r7, #8]
 800f4f4:	4613      	mov	r3, r2
 800f4f6:	00db      	lsls	r3, r3, #3
 800f4f8:	4413      	add	r3, r2
 800f4fa:	009b      	lsls	r3, r3, #2
 800f4fc:	440b      	add	r3, r1
 800f4fe:	3318      	adds	r3, #24
 800f500:	2200      	movs	r2, #0
 800f502:	601a      	str	r2, [r3, #0]
				vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 800f504:	68ba      	ldr	r2, [r7, #8]
 800f506:	4613      	mov	r3, r2
 800f508:	00db      	lsls	r3, r3, #3
 800f50a:	4413      	add	r3, r2
 800f50c:	009b      	lsls	r3, r3, #2
 800f50e:	4a1e      	ldr	r2, [pc, #120]	; (800f588 <xNetworkBuffersInitialise+0xf0>)
 800f510:	4413      	add	r3, r2
 800f512:	4618      	mov	r0, r3
 800f514:	f7f6 fb77 	bl	8005c06 <vListInitialiseItem>
				listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 800f518:	68ba      	ldr	r2, [r7, #8]
 800f51a:	4613      	mov	r3, r2
 800f51c:	00db      	lsls	r3, r3, #3
 800f51e:	4413      	add	r3, r2
 800f520:	009b      	lsls	r3, r3, #2
 800f522:	4a19      	ldr	r2, [pc, #100]	; (800f588 <xNetworkBuffersInitialise+0xf0>)
 800f524:	1899      	adds	r1, r3, r2
 800f526:	4818      	ldr	r0, [pc, #96]	; (800f588 <xNetworkBuffersInitialise+0xf0>)
 800f528:	68ba      	ldr	r2, [r7, #8]
 800f52a:	4613      	mov	r3, r2
 800f52c:	00db      	lsls	r3, r3, #3
 800f52e:	4413      	add	r3, r2
 800f530:	009b      	lsls	r3, r3, #2
 800f532:	4403      	add	r3, r0
 800f534:	330c      	adds	r3, #12
 800f536:	6019      	str	r1, [r3, #0]

				/* Currently, all buffers are available for use. */
				vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 800f538:	68ba      	ldr	r2, [r7, #8]
 800f53a:	4613      	mov	r3, r2
 800f53c:	00db      	lsls	r3, r3, #3
 800f53e:	4413      	add	r3, r2
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	4a11      	ldr	r2, [pc, #68]	; (800f588 <xNetworkBuffersInitialise+0xf0>)
 800f544:	4413      	add	r3, r2
 800f546:	4619      	mov	r1, r3
 800f548:	480e      	ldr	r0, [pc, #56]	; (800f584 <xNetworkBuffersInitialise+0xec>)
 800f54a:	f7f6 fb8d 	bl	8005c68 <vListInsert>
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	3301      	adds	r3, #1
 800f552:	60bb      	str	r3, [r7, #8]
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	2b18      	cmp	r3, #24
 800f558:	ddca      	ble.n	800f4f0 <xNetworkBuffersInitialise+0x58>
			}

			uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 800f55a:	4b0c      	ldr	r3, [pc, #48]	; (800f58c <xNetworkBuffersInitialise+0xf4>)
 800f55c:	2219      	movs	r2, #25
 800f55e:	601a      	str	r2, [r3, #0]
		}
	}

	if( xNetworkBufferSemaphore == NULL )
 800f560:	4b06      	ldr	r3, [pc, #24]	; (800f57c <xNetworkBuffersInitialise+0xe4>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d102      	bne.n	800f56e <xNetworkBuffersInitialise+0xd6>
	{
		xReturn = pdFAIL;
 800f568:	2300      	movs	r3, #0
 800f56a:	60fb      	str	r3, [r7, #12]
 800f56c:	e001      	b.n	800f572 <xNetworkBuffersInitialise+0xda>
	}
	else
	{
		xReturn = pdPASS;
 800f56e:	2301      	movs	r3, #1
 800f570:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800f572:	68fb      	ldr	r3, [r7, #12]
}
 800f574:	4618      	mov	r0, r3
 800f576:	3710      	adds	r7, #16
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}
 800f57c:	20004bcc 	.word	0x20004bcc
 800f580:	08010824 	.word	0x08010824
 800f584:	20004830 	.word	0x20004830
 800f588:	20004848 	.word	0x20004848
 800f58c:	20004844 	.word	0x20004844

0800f590 <vReleaseNetworkBuffer>:
	return pucEthernetBuffer;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBuffer( uint8_t *pucEthernetBuffer )
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b082      	sub	sp, #8
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
	/* There is space before the Ethernet buffer in which a pointer to the
	network buffer that references this Ethernet buffer is stored.  Remove the
	space before freeing the buffer. */
	if( pucEthernetBuffer != NULL )
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d005      	beq.n	800f5aa <vReleaseNetworkBuffer+0x1a>
	{
		pucEthernetBuffer -= ipBUFFER_PADDING;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	3b0a      	subs	r3, #10
 800f5a2:	607b      	str	r3, [r7, #4]
		vPortFree( ( void * ) pucEthernetBuffer );
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f7f6 fe87 	bl	80062b8 <vPortFree>
	}
}
 800f5aa:	bf00      	nop
 800f5ac:	3708      	adds	r7, #8
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}
	...

0800f5b4 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b086      	sub	sp, #24
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	6039      	str	r1, [r7, #0]
NetworkBufferDescriptor_t *pxReturn = NULL;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	617b      	str	r3, [r7, #20]
size_t uxCount;

	if( ( xRequestedSizeBytes != 0u ) && ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d004      	beq.n	800f5d2 <pxGetNetworkBufferWithDescriptor+0x1e>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2b45      	cmp	r3, #69	; 0x45
 800f5cc:	d801      	bhi.n	800f5d2 <pxGetNetworkBufferWithDescriptor+0x1e>
	{
		/* ARP packets can replace application packets, so the storage must be
		at least large enough to hold an ARP. */
		xRequestedSizeBytes = baMINIMAL_BUFFER_SIZE;
 800f5ce:	2346      	movs	r3, #70	; 0x46
 800f5d0:	607b      	str	r3, [r7, #4]
	}
	xRequestedSizeBytes += 2u;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	3302      	adds	r3, #2
 800f5d6:	607b      	str	r3, [r7, #4]
	if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1u ) ) != 0u )
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f003 0303 	and.w	r3, r3, #3
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d004      	beq.n	800f5ec <pxGetNetworkBufferWithDescriptor+0x38>
	{
		xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1u ) ) + 1u;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f043 0303 	orr.w	r3, r3, #3
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	607b      	str	r3, [r7, #4]
	}

	/* If there is a semaphore available, there is a network buffer available. */
	if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 800f5ec:	4b2a      	ldr	r3, [pc, #168]	; (800f698 <pxGetNetworkBufferWithDescriptor+0xe4>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	6839      	ldr	r1, [r7, #0]
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7f7 fa3c 	bl	8006a70 <xQueueSemaphoreTake>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	2b01      	cmp	r3, #1
 800f5fc:	d146      	bne.n	800f68c <pxGetNetworkBufferWithDescriptor+0xd8>
	{
		/* Protect the structure as it is accessed from tasks and interrupts. */
		taskENTER_CRITICAL();
 800f5fe:	f7f6 fcbd 	bl	8005f7c <vPortEnterCritical>
		{
			pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 800f602:	4b26      	ldr	r3, [pc, #152]	; (800f69c <pxGetNetworkBufferWithDescriptor+0xe8>)
 800f604:	68db      	ldr	r3, [r3, #12]
 800f606:	68db      	ldr	r3, [r3, #12]
 800f608:	617b      	str	r3, [r7, #20]
			uxListRemove( &( pxReturn->xBufferListItem ) );
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7f6 fb64 	bl	8005cda <uxListRemove>
		}
		taskEXIT_CRITICAL();
 800f612:	f7f6 fce1 	bl	8005fd8 <vPortExitCritical>

		/* Reading UBaseType_t, no critical section needed. */
		uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 800f616:	4b21      	ldr	r3, [pc, #132]	; (800f69c <pxGetNetworkBufferWithDescriptor+0xe8>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	613b      	str	r3, [r7, #16]

		if( uxMinimumFreeNetworkBuffers > uxCount )
 800f61c:	4b20      	ldr	r3, [pc, #128]	; (800f6a0 <pxGetNetworkBufferWithDescriptor+0xec>)
 800f61e:	681a      	ldr	r2, [r3, #0]
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	429a      	cmp	r2, r3
 800f624:	d902      	bls.n	800f62c <pxGetNetworkBufferWithDescriptor+0x78>
		{
			uxMinimumFreeNetworkBuffers = uxCount;
 800f626:	4a1e      	ldr	r2, [pc, #120]	; (800f6a0 <pxGetNetworkBufferWithDescriptor+0xec>)
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	6013      	str	r3, [r2, #0]
		}

		/* Allocate storage of exactly the requested size to the buffer. */
		configASSERT( pxReturn->pucEthernetBuffer == NULL );
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	699b      	ldr	r3, [r3, #24]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d009      	beq.n	800f648 <pxGetNetworkBufferWithDescriptor+0x94>
 800f634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f638:	f383 8811 	msr	BASEPRI, r3
 800f63c:	f3bf 8f6f 	isb	sy
 800f640:	f3bf 8f4f 	dsb	sy
 800f644:	60fb      	str	r3, [r7, #12]
 800f646:	e7fe      	b.n	800f646 <pxGetNetworkBufferWithDescriptor+0x92>
		if( xRequestedSizeBytes > 0 )
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d01e      	beq.n	800f68c <pxGetNetworkBufferWithDescriptor+0xd8>
		{
			/* Extra space is obtained so a pointer to the network buffer can
			be stored at the beginning of the buffer. */
			pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	330a      	adds	r3, #10
 800f652:	4618      	mov	r0, r3
 800f654:	f7f6 fd6e 	bl	8006134 <pvPortMalloc>
 800f658:	4602      	mov	r2, r0
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	619a      	str	r2, [r3, #24]

			if( pxReturn->pucEthernetBuffer == NULL )
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	699b      	ldr	r3, [r3, #24]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d105      	bne.n	800f672 <pxGetNetworkBufferWithDescriptor+0xbe>
			{
				/* The attempt to allocate storage for the buffer payload failed,
				so the network buffer structure cannot be used and must be
				released. */
				vReleaseNetworkBufferAndDescriptor( pxReturn );
 800f666:	6978      	ldr	r0, [r7, #20]
 800f668:	f000 f81c 	bl	800f6a4 <vReleaseNetworkBufferAndDescriptor>
				pxReturn = NULL;
 800f66c:	2300      	movs	r3, #0
 800f66e:	617b      	str	r3, [r7, #20]
 800f670:	e00c      	b.n	800f68c <pxGetNetworkBufferWithDescriptor+0xd8>
			{
				/* Store a pointer to the network buffer structure in the
				buffer storage area, then move the buffer pointer on past the
				stored pointer so the pointer value is not overwritten by the
				application when the buffer is used. */
				*( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	699b      	ldr	r3, [r3, #24]
 800f676:	697a      	ldr	r2, [r7, #20]
 800f678:	601a      	str	r2, [r3, #0]
				pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	699b      	ldr	r3, [r3, #24]
 800f67e:	f103 020a 	add.w	r2, r3, #10
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	619a      	str	r2, [r3, #24]

				/* Store the actual size of the allocated buffer, which may be
				greater than the original requested size. */
				pxReturn->xDataLength = xRequestedSizeBytes;
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	687a      	ldr	r2, [r7, #4]
 800f68a:	61da      	str	r2, [r3, #28]
	else
	{
		iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
	}

	return pxReturn;
 800f68c:	697b      	ldr	r3, [r7, #20]
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3718      	adds	r7, #24
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	20004bcc 	.word	0x20004bcc
 800f69c:	20004830 	.word	0x20004830
 800f6a0:	20004844 	.word	0x20004844

0800f6a4 <vReleaseNetworkBufferAndDescriptor>:
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
	/* Ensure the buffer is returned to the list of free buffers before the
	counting semaphore is 'given' to say a buffer is available.  Release the
	storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
	IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
	MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
	vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	699b      	ldr	r3, [r3, #24]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7ff ff6d 	bl	800f590 <vReleaseNetworkBuffer>
	pxNetworkBuffer->pucEthernetBuffer = NULL;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	619a      	str	r2, [r3, #24]

	taskENTER_CRITICAL();
 800f6bc:	f7f6 fc5e 	bl	8005f7c <vPortEnterCritical>
	{
		xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	691b      	ldr	r3, [r3, #16]
 800f6c4:	4a0f      	ldr	r2, [pc, #60]	; (800f704 <vReleaseNetworkBufferAndDescriptor+0x60>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	bf0c      	ite	eq
 800f6ca:	2301      	moveq	r3, #1
 800f6cc:	2300      	movne	r3, #0
 800f6ce:	b2db      	uxtb	r3, r3
 800f6d0:	60fb      	str	r3, [r7, #12]

		if( xListItemAlreadyInFreeList == pdFALSE )
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d104      	bne.n	800f6e2 <vReleaseNetworkBufferAndDescriptor+0x3e>
		{
			vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	4619      	mov	r1, r3
 800f6dc:	4809      	ldr	r0, [pc, #36]	; (800f704 <vReleaseNetworkBufferAndDescriptor+0x60>)
 800f6de:	f7f6 fa9f 	bl	8005c20 <vListInsertEnd>
		}
	}
	taskEXIT_CRITICAL();
 800f6e2:	f7f6 fc79 	bl	8005fd8 <vPortExitCritical>

	if( xListItemAlreadyInFreeList == pdFALSE )
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d106      	bne.n	800f6fa <vReleaseNetworkBufferAndDescriptor+0x56>
	{
		xSemaphoreGive( xNetworkBufferSemaphore );
 800f6ec:	4b06      	ldr	r3, [pc, #24]	; (800f708 <vReleaseNetworkBufferAndDescriptor+0x64>)
 800f6ee:	6818      	ldr	r0, [r3, #0]
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	2100      	movs	r1, #0
 800f6f6:	f7f6 ffe5 	bl	80066c4 <xQueueGenericSend>
	}

	iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
}
 800f6fa:	bf00      	nop
 800f6fc:	3710      	adds	r7, #16
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}
 800f702:	bf00      	nop
 800f704:	20004830 	.word	0x20004830
 800f708:	20004bcc 	.word	0x20004bcc

0800f70c <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
void StartDefaultTask(void const * argument);

int main(void)
{
 800f70c:	b5b0      	push	{r4, r5, r7, lr}
 800f70e:	b088      	sub	sp, #32
 800f710:	af02      	add	r7, sp, #8
  HAL_Init();
 800f712:	f7f0 fef5 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 800f716:	f000 f87d 	bl	800f814 <SystemClock_Config>
  MX_GPIO_Init();
 800f71a:	f000 f8ef 	bl	800f8fc <MX_GPIO_Init>

  /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
  are created in the vApplicationIPNetworkEventHook() hook function
  below.  The hook function is called when the network connects. */
  FreeRTOS_IPInit( ucIPAddress,
 800f71e:	4b0d      	ldr	r3, [pc, #52]	; (800f754 <main+0x48>)
 800f720:	9300      	str	r3, [sp, #0]
 800f722:	4b0d      	ldr	r3, [pc, #52]	; (800f758 <main+0x4c>)
 800f724:	4a0d      	ldr	r2, [pc, #52]	; (800f75c <main+0x50>)
 800f726:	490e      	ldr	r1, [pc, #56]	; (800f760 <main+0x54>)
 800f728:	480e      	ldr	r0, [pc, #56]	; (800f764 <main+0x58>)
 800f72a:	f7fa fb1b 	bl	8009d64 <FreeRTOS_IPInit>
                   ucGatewayAddress,
                   ucDNSServerAddress,
                   ucMACAddress );


  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800f72e:	4b0e      	ldr	r3, [pc, #56]	; (800f768 <main+0x5c>)
 800f730:	1d3c      	adds	r4, r7, #4
 800f732:	461d      	mov	r5, r3
 800f734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f738:	682b      	ldr	r3, [r5, #0]
 800f73a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800f73c:	1d3b      	adds	r3, r7, #4
 800f73e:	2100      	movs	r1, #0
 800f740:	4618      	mov	r0, r3
 800f742:	f7f6 f808 	bl	8005756 <osThreadCreate>
 800f746:	4602      	mov	r2, r0
 800f748:	4b08      	ldr	r3, [pc, #32]	; (800f76c <main+0x60>)
 800f74a:	601a      	str	r2, [r3, #0]
  osKernelStart();
 800f74c:	f7f5 fffc 	bl	8005748 <osKernelStart>
  
  while (1)
 800f750:	e7fe      	b.n	800f750 <main+0x44>
 800f752:	bf00      	nop
 800f754:	200000b8 	.word	0x200000b8
 800f758:	080109c4 	.word	0x080109c4
 800f75c:	080109c0 	.word	0x080109c0
 800f760:	080109bc 	.word	0x080109bc
 800f764:	080109b8 	.word	0x080109b8
 800f768:	0801083c 	.word	0x0801083c
 800f76c:	20005934 	.word	0x20005934

0800f770 <vApplicationPingReplyHook>:
}

/*-----------------------------------------------------------*/

void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
{
 800f770:	b480      	push	{r7}
 800f772:	b083      	sub	sp, #12
 800f774:	af00      	add	r7, sp, #0
 800f776:	4603      	mov	r3, r0
 800f778:	460a      	mov	r2, r1
 800f77a:	71fb      	strb	r3, [r7, #7]
 800f77c:	4613      	mov	r3, r2
 800f77e:	80bb      	strh	r3, [r7, #4]
}
 800f780:	bf00      	nop
 800f782:	370c      	adds	r7, #12
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr

0800f78c <vApplicationIPNetworkEventHook>:


/* Called by FreeRTOS+TCP when the network connects or disconnects.  Disconnect
events are only received if implemented in the MAC driver. */
void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 800f78c:	b480      	push	{r7}
 800f78e:	b083      	sub	sp, #12
 800f790:	af00      	add	r7, sp, #0
 800f792:	4603      	mov	r3, r0
 800f794:	71fb      	strb	r3, [r7, #7]

}
 800f796:	bf00      	nop
 800f798:	370c      	adds	r7, #12
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr
	...

0800f7a4 <pcApplicationHostnameHook>:

const char *pcApplicationHostnameHook( void )
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	af00      	add	r7, sp, #0
	/* Assign the name "rtosdemo" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return mainHOST_NAME;
 800f7a8:	4b02      	ldr	r3, [pc, #8]	; (800f7b4 <pcApplicationHostnameHook+0x10>)
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr
 800f7b4:	08010850 	.word	0x08010850

0800f7b8 <uxRand>:

UBaseType_t uxRand( void )
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	af00      	add	r7, sp, #0
	return( ( int ) ( rand() >> 16UL ) & 0x7fffUL );
 800f7bc:	f000 fedc 	bl	8010578 <rand>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	141b      	asrs	r3, r3, #16
 800f7c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	bd80      	pop	{r7, pc}

0800f7cc <xApplicationDNSQueryHook>:



BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 800f7d4:	f7ff ffe6 	bl	800f7a4 <pcApplicationHostnameHook>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	4619      	mov	r1, r3
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 ff05 	bl	80105ec <strcasecmp>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d102      	bne.n	800f7ee <xApplicationDNSQueryHook+0x22>
	{
		xReturn = pdPASS;
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	60fb      	str	r3, [r7, #12]
 800f7ec:	e00b      	b.n	800f806 <xApplicationDNSQueryHook+0x3a>
	}
	else if( strcasecmp( pcName, mainDEVICE_NICK_NAME ) == 0 )
 800f7ee:	4908      	ldr	r1, [pc, #32]	; (800f810 <xApplicationDNSQueryHook+0x44>)
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f000 fefb 	bl	80105ec <strcasecmp>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d102      	bne.n	800f802 <xApplicationDNSQueryHook+0x36>
	{
		xReturn = pdPASS;
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	60fb      	str	r3, [r7, #12]
 800f800:	e001      	b.n	800f806 <xApplicationDNSQueryHook+0x3a>
	}
	else
	{
		xReturn = pdFAIL;
 800f802:	2300      	movs	r3, #0
 800f804:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800f806:	68fb      	ldr	r3, [r7, #12]
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3710      	adds	r7, #16
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	0801085c 	.word	0x0801085c

0800f814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b094      	sub	sp, #80	; 0x50
 800f818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800f81a:	2300      	movs	r3, #0
 800f81c:	60bb      	str	r3, [r7, #8]
 800f81e:	4a33      	ldr	r2, [pc, #204]	; (800f8ec <SystemClock_Config+0xd8>)
 800f820:	4b32      	ldr	r3, [pc, #200]	; (800f8ec <SystemClock_Config+0xd8>)
 800f822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f828:	6413      	str	r3, [r2, #64]	; 0x40
 800f82a:	4b30      	ldr	r3, [pc, #192]	; (800f8ec <SystemClock_Config+0xd8>)
 800f82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f82e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f832:	60bb      	str	r3, [r7, #8]
 800f834:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f836:	2300      	movs	r3, #0
 800f838:	607b      	str	r3, [r7, #4]
 800f83a:	4a2d      	ldr	r2, [pc, #180]	; (800f8f0 <SystemClock_Config+0xdc>)
 800f83c:	4b2c      	ldr	r3, [pc, #176]	; (800f8f0 <SystemClock_Config+0xdc>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f844:	6013      	str	r3, [r2, #0]
 800f846:	4b2a      	ldr	r3, [pc, #168]	; (800f8f0 <SystemClock_Config+0xdc>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f84e:	607b      	str	r3, [r7, #4]
 800f850:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f852:	2301      	movs	r3, #1
 800f854:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f856:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f85a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f85c:	2302      	movs	r3, #2
 800f85e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f860:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f864:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800f866:	2304      	movs	r3, #4
 800f868:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800f86a:	2360      	movs	r3, #96	; 0x60
 800f86c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800f86e:	2306      	movs	r3, #6
 800f870:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800f872:	2304      	movs	r3, #4
 800f874:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f876:	f107 0320 	add.w	r3, r7, #32
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7f2 fa06 	bl	8001c8c <HAL_RCC_OscConfig>
 800f880:	4603      	mov	r3, r0
 800f882:	2b00      	cmp	r3, #0
 800f884:	d003      	beq.n	800f88e <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800f886:	21c7      	movs	r1, #199	; 0xc7
 800f888:	481a      	ldr	r0, [pc, #104]	; (800f8f4 <SystemClock_Config+0xe0>)
 800f88a:	f000 f87b 	bl	800f984 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f88e:	230f      	movs	r3, #15
 800f890:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f892:	2302      	movs	r3, #2
 800f894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f896:	2300      	movs	r3, #0
 800f898:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800f89a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f89e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800f8a4:	f107 030c 	add.w	r3, r7, #12
 800f8a8:	2101      	movs	r1, #1
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7f2 fc30 	bl	8002110 <HAL_RCC_ClockConfig>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d003      	beq.n	800f8be <SystemClock_Config+0xaa>
  {
    _Error_Handler(__FILE__, __LINE__);
 800f8b6:	21d5      	movs	r1, #213	; 0xd5
 800f8b8:	480e      	ldr	r0, [pc, #56]	; (800f8f4 <SystemClock_Config+0xe0>)
 800f8ba:	f000 f863 	bl	800f984 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f8be:	f7f2 fde1 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	4b0c      	ldr	r3, [pc, #48]	; (800f8f8 <SystemClock_Config+0xe4>)
 800f8c6:	fba3 2302 	umull	r2, r3, r3, r2
 800f8ca:	099b      	lsrs	r3, r3, #6
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7f0 ff7a 	bl	80007c6 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800f8d2:	2004      	movs	r0, #4
 800f8d4:	f7f0 ff84 	bl	80007e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800f8d8:	2200      	movs	r2, #0
 800f8da:	210f      	movs	r1, #15
 800f8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f8e0:	f7f0 ff47 	bl	8000772 <HAL_NVIC_SetPriority>
}
 800f8e4:	bf00      	nop
 800f8e6:	3750      	adds	r7, #80	; 0x50
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}
 800f8ec:	40023800 	.word	0x40023800
 800f8f0:	40007000 	.word	0x40007000
 800f8f4:	08010864 	.word	0x08010864
 800f8f8:	10624dd3 	.word	0x10624dd3

0800f8fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f902:	2300      	movs	r3, #0
 800f904:	607b      	str	r3, [r7, #4]
 800f906:	4a10      	ldr	r2, [pc, #64]	; (800f948 <MX_GPIO_Init+0x4c>)
 800f908:	4b0f      	ldr	r3, [pc, #60]	; (800f948 <MX_GPIO_Init+0x4c>)
 800f90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f90c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f910:	6313      	str	r3, [r2, #48]	; 0x30
 800f912:	4b0d      	ldr	r3, [pc, #52]	; (800f948 <MX_GPIO_Init+0x4c>)
 800f914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f91a:	607b      	str	r3, [r7, #4]
 800f91c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f91e:	2300      	movs	r3, #0
 800f920:	603b      	str	r3, [r7, #0]
 800f922:	4a09      	ldr	r2, [pc, #36]	; (800f948 <MX_GPIO_Init+0x4c>)
 800f924:	4b08      	ldr	r3, [pc, #32]	; (800f948 <MX_GPIO_Init+0x4c>)
 800f926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f928:	f043 0301 	orr.w	r3, r3, #1
 800f92c:	6313      	str	r3, [r2, #48]	; 0x30
 800f92e:	4b06      	ldr	r3, [pc, #24]	; (800f948 <MX_GPIO_Init+0x4c>)
 800f930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f932:	f003 0301 	and.w	r3, r3, #1
 800f936:	603b      	str	r3, [r7, #0]
 800f938:	683b      	ldr	r3, [r7, #0]

}
 800f93a:	bf00      	nop
 800f93c:	370c      	adds	r7, #12
 800f93e:	46bd      	mov	sp, r7
 800f940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f944:	4770      	bx	lr
 800f946:	bf00      	nop
 800f948:	40023800 	.word	0x40023800

0800f94c <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800f954:	f000 f930 	bl	800fbb8 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800f958:	2001      	movs	r0, #1
 800f95a:	f7f5 ff23 	bl	80057a4 <osDelay>
 800f95e:	e7fb      	b.n	800f958 <StartDefaultTask+0xc>

0800f960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	4a04      	ldr	r2, [pc, #16]	; (800f980 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800f96e:	4293      	cmp	r3, r2
 800f970:	d101      	bne.n	800f976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800f972:	f7f0 fde7 	bl	8000544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800f976:	bf00      	nop
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	40010000 	.word	0x40010000

0800f984 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800f984:	b480      	push	{r7}
 800f986:	b083      	sub	sp, #12
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800f98e:	e7fe      	b.n	800f98e <_Error_Handler+0xa>

0800f990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b082      	sub	sp, #8
 800f994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f996:	2300      	movs	r3, #0
 800f998:	607b      	str	r3, [r7, #4]
 800f99a:	4a25      	ldr	r2, [pc, #148]	; (800fa30 <HAL_MspInit+0xa0>)
 800f99c:	4b24      	ldr	r3, [pc, #144]	; (800fa30 <HAL_MspInit+0xa0>)
 800f99e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f9a4:	6453      	str	r3, [r2, #68]	; 0x44
 800f9a6:	4b22      	ldr	r3, [pc, #136]	; (800fa30 <HAL_MspInit+0xa0>)
 800f9a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f9ae:	607b      	str	r3, [r7, #4]
 800f9b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	603b      	str	r3, [r7, #0]
 800f9b6:	4a1e      	ldr	r2, [pc, #120]	; (800fa30 <HAL_MspInit+0xa0>)
 800f9b8:	4b1d      	ldr	r3, [pc, #116]	; (800fa30 <HAL_MspInit+0xa0>)
 800f9ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9c0:	6413      	str	r3, [r2, #64]	; 0x40
 800f9c2:	4b1b      	ldr	r3, [pc, #108]	; (800fa30 <HAL_MspInit+0xa0>)
 800f9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f9ca:	603b      	str	r3, [r7, #0]
 800f9cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f9ce:	2003      	movs	r0, #3
 800f9d0:	f7f0 fec4 	bl	800075c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	2100      	movs	r1, #0
 800f9d8:	f06f 000b 	mvn.w	r0, #11
 800f9dc:	f7f0 fec9 	bl	8000772 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	2100      	movs	r1, #0
 800f9e4:	f06f 000a 	mvn.w	r0, #10
 800f9e8:	f7f0 fec3 	bl	8000772 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	2100      	movs	r1, #0
 800f9f0:	f06f 0009 	mvn.w	r0, #9
 800f9f4:	f7f0 febd 	bl	8000772 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	f06f 0004 	mvn.w	r0, #4
 800fa00:	f7f0 feb7 	bl	8000772 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800fa04:	2200      	movs	r2, #0
 800fa06:	2100      	movs	r1, #0
 800fa08:	f06f 0003 	mvn.w	r0, #3
 800fa0c:	f7f0 feb1 	bl	8000772 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800fa10:	2200      	movs	r2, #0
 800fa12:	210f      	movs	r1, #15
 800fa14:	f06f 0001 	mvn.w	r0, #1
 800fa18:	f7f0 feab 	bl	8000772 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	210f      	movs	r1, #15
 800fa20:	f04f 30ff 	mov.w	r0, #4294967295
 800fa24:	f7f0 fea5 	bl	8000772 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800fa28:	bf00      	nop
 800fa2a:	3708      	adds	r7, #8
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}
 800fa30:	40023800 	.word	0x40023800

0800fa34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b08c      	sub	sp, #48	; 0x30
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800fa40:	2300      	movs	r3, #0
 800fa42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800fa44:	2200      	movs	r2, #0
 800fa46:	6879      	ldr	r1, [r7, #4]
 800fa48:	2019      	movs	r0, #25
 800fa4a:	f7f0 fe92 	bl	8000772 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800fa4e:	2019      	movs	r0, #25
 800fa50:	f7f0 feab 	bl	80007aa <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800fa54:	2300      	movs	r3, #0
 800fa56:	60fb      	str	r3, [r7, #12]
 800fa58:	4a1e      	ldr	r2, [pc, #120]	; (800fad4 <HAL_InitTick+0xa0>)
 800fa5a:	4b1e      	ldr	r3, [pc, #120]	; (800fad4 <HAL_InitTick+0xa0>)
 800fa5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa5e:	f043 0301 	orr.w	r3, r3, #1
 800fa62:	6453      	str	r3, [r2, #68]	; 0x44
 800fa64:	4b1b      	ldr	r3, [pc, #108]	; (800fad4 <HAL_InitTick+0xa0>)
 800fa66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa68:	f003 0301 	and.w	r3, r3, #1
 800fa6c:	60fb      	str	r3, [r7, #12]
 800fa6e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800fa70:	f107 0210 	add.w	r2, r7, #16
 800fa74:	f107 0314 	add.w	r3, r7, #20
 800fa78:	4611      	mov	r1, r2
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7f2 fd22 	bl	80024c4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800fa80:	f7f2 fd0c 	bl	800249c <HAL_RCC_GetPCLK2Freq>
 800fa84:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800fa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa88:	4a13      	ldr	r2, [pc, #76]	; (800fad8 <HAL_InitTick+0xa4>)
 800fa8a:	fba2 2303 	umull	r2, r3, r2, r3
 800fa8e:	0c9b      	lsrs	r3, r3, #18
 800fa90:	3b01      	subs	r3, #1
 800fa92:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800fa94:	4b11      	ldr	r3, [pc, #68]	; (800fadc <HAL_InitTick+0xa8>)
 800fa96:	4a12      	ldr	r2, [pc, #72]	; (800fae0 <HAL_InitTick+0xac>)
 800fa98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800fa9a:	4b10      	ldr	r3, [pc, #64]	; (800fadc <HAL_InitTick+0xa8>)
 800fa9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800faa0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800faa2:	4a0e      	ldr	r2, [pc, #56]	; (800fadc <HAL_InitTick+0xa8>)
 800faa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800faa8:	4b0c      	ldr	r3, [pc, #48]	; (800fadc <HAL_InitTick+0xa8>)
 800faaa:	2200      	movs	r2, #0
 800faac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800faae:	4b0b      	ldr	r3, [pc, #44]	; (800fadc <HAL_InitTick+0xa8>)
 800fab0:	2200      	movs	r2, #0
 800fab2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800fab4:	4809      	ldr	r0, [pc, #36]	; (800fadc <HAL_InitTick+0xa8>)
 800fab6:	f7f2 fd37 	bl	8002528 <HAL_TIM_Base_Init>
 800faba:	4603      	mov	r3, r0
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d104      	bne.n	800faca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800fac0:	4806      	ldr	r0, [pc, #24]	; (800fadc <HAL_InitTick+0xa8>)
 800fac2:	f7f2 fd66 	bl	8002592 <HAL_TIM_Base_Start_IT>
 800fac6:	4603      	mov	r3, r0
 800fac8:	e000      	b.n	800facc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800faca:	2301      	movs	r3, #1
}
 800facc:	4618      	mov	r0, r3
 800face:	3730      	adds	r7, #48	; 0x30
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}
 800fad4:	40023800 	.word	0x40023800
 800fad8:	431bde83 	.word	0x431bde83
 800fadc:	20005938 	.word	0x20005938
 800fae0:	40010000 	.word	0x40010000

0800fae4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800fae4:	b480      	push	{r7}
 800fae6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800fae8:	bf00      	nop
 800faea:	46bd      	mov	sp, r7
 800faec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf0:	4770      	bx	lr

0800faf2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800faf2:	b480      	push	{r7}
 800faf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800faf6:	e7fe      	b.n	800faf6 <HardFault_Handler+0x4>

0800faf8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800faf8:	b480      	push	{r7}
 800fafa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800fafc:	e7fe      	b.n	800fafc <MemManage_Handler+0x4>

0800fafe <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800fafe:	b480      	push	{r7}
 800fb00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800fb02:	e7fe      	b.n	800fb02 <BusFault_Handler+0x4>

0800fb04 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800fb04:	b480      	push	{r7}
 800fb06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800fb08:	e7fe      	b.n	800fb08 <UsageFault_Handler+0x4>

0800fb0a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800fb0a:	b480      	push	{r7}
 800fb0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800fb0e:	bf00      	nop
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr

0800fb18 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800fb1c:	f7f5 fe56 	bl	80057cc <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800fb20:	bf00      	nop
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800fb28:	4802      	ldr	r0, [pc, #8]	; (800fb34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800fb2a:	f7f2 fd4d 	bl	80025c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800fb2e:	bf00      	nop
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	20005938 	.word	0x20005938

0800fb38 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800fb3c:	4802      	ldr	r0, [pc, #8]	; (800fb48 <OTG_FS_IRQHandler+0x10>)
 800fb3e:	f7f1 f917 	bl	8000d70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800fb42:	bf00      	nop
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	20005b98 	.word	0x20005b98

0800fb4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800fb50:	4a16      	ldr	r2, [pc, #88]	; (800fbac <SystemInit+0x60>)
 800fb52:	4b16      	ldr	r3, [pc, #88]	; (800fbac <SystemInit+0x60>)
 800fb54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fb5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800fb60:	4a13      	ldr	r2, [pc, #76]	; (800fbb0 <SystemInit+0x64>)
 800fb62:	4b13      	ldr	r3, [pc, #76]	; (800fbb0 <SystemInit+0x64>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	f043 0301 	orr.w	r3, r3, #1
 800fb6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800fb6c:	4b10      	ldr	r3, [pc, #64]	; (800fbb0 <SystemInit+0x64>)
 800fb6e:	2200      	movs	r2, #0
 800fb70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800fb72:	4a0f      	ldr	r2, [pc, #60]	; (800fbb0 <SystemInit+0x64>)
 800fb74:	4b0e      	ldr	r3, [pc, #56]	; (800fbb0 <SystemInit+0x64>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800fb7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fb80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800fb82:	4b0b      	ldr	r3, [pc, #44]	; (800fbb0 <SystemInit+0x64>)
 800fb84:	4a0b      	ldr	r2, [pc, #44]	; (800fbb4 <SystemInit+0x68>)
 800fb86:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800fb88:	4a09      	ldr	r2, [pc, #36]	; (800fbb0 <SystemInit+0x64>)
 800fb8a:	4b09      	ldr	r3, [pc, #36]	; (800fbb0 <SystemInit+0x64>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fb92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800fb94:	4b06      	ldr	r3, [pc, #24]	; (800fbb0 <SystemInit+0x64>)
 800fb96:	2200      	movs	r2, #0
 800fb98:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800fb9a:	4b04      	ldr	r3, [pc, #16]	; (800fbac <SystemInit+0x60>)
 800fb9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fba0:	609a      	str	r2, [r3, #8]
#endif
}
 800fba2:	bf00      	nop
 800fba4:	46bd      	mov	sp, r7
 800fba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbaa:	4770      	bx	lr
 800fbac:	e000ed00 	.word	0xe000ed00
 800fbb0:	40023800 	.word	0x40023800
 800fbb4:	24003010 	.word	0x24003010

0800fbb8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	4906      	ldr	r1, [pc, #24]	; (800fbd8 <MX_USB_DEVICE_Init+0x20>)
 800fbc0:	4806      	ldr	r0, [pc, #24]	; (800fbdc <MX_USB_DEVICE_Init+0x24>)
 800fbc2:	f7f4 fe49 	bl	8004858 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800fbc6:	4906      	ldr	r1, [pc, #24]	; (800fbe0 <MX_USB_DEVICE_Init+0x28>)
 800fbc8:	4804      	ldr	r0, [pc, #16]	; (800fbdc <MX_USB_DEVICE_Init+0x24>)
 800fbca:	f7f4 fe70 	bl	80048ae <USBD_RegisterClass>

  //USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);

  USBD_Start(&hUsbDeviceFS);
 800fbce:	4803      	ldr	r0, [pc, #12]	; (800fbdc <MX_USB_DEVICE_Init+0x24>)
 800fbd0:	f7f4 fe87 	bl	80048e2 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fbd4:	bf00      	nop
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	200000c4 	.word	0x200000c4
 800fbdc:	20005974 	.word	0x20005974
 800fbe0:	20000008 	.word	0x20000008

0800fbe4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b088      	sub	sp, #32
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fbf4:	d139      	bne.n	800fc6a <HAL_PCD_MspInit+0x86>
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800fbf6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800fbfa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fbfc:	2302      	movs	r3, #2
 800fbfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc00:	2300      	movs	r3, #0
 800fc02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fc04:	2303      	movs	r3, #3
 800fc06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fc08:	230a      	movs	r3, #10
 800fc0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fc0c:	f107 030c 	add.w	r3, r7, #12
 800fc10:	4619      	mov	r1, r3
 800fc12:	4818      	ldr	r0, [pc, #96]	; (800fc74 <HAL_PCD_MspInit+0x90>)
 800fc14:	f7f0 fe00 	bl	8000818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800fc18:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc22:	2300      	movs	r3, #0
 800fc24:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fc26:	f107 030c 	add.w	r3, r7, #12
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	4811      	ldr	r0, [pc, #68]	; (800fc74 <HAL_PCD_MspInit+0x90>)
 800fc2e:	f7f0 fdf3 	bl	8000818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fc32:	4a11      	ldr	r2, [pc, #68]	; (800fc78 <HAL_PCD_MspInit+0x94>)
 800fc34:	4b10      	ldr	r3, [pc, #64]	; (800fc78 <HAL_PCD_MspInit+0x94>)
 800fc36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc3c:	6353      	str	r3, [r2, #52]	; 0x34
 800fc3e:	2300      	movs	r3, #0
 800fc40:	60bb      	str	r3, [r7, #8]
 800fc42:	4a0d      	ldr	r2, [pc, #52]	; (800fc78 <HAL_PCD_MspInit+0x94>)
 800fc44:	4b0c      	ldr	r3, [pc, #48]	; (800fc78 <HAL_PCD_MspInit+0x94>)
 800fc46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fc4c:	6453      	str	r3, [r2, #68]	; 0x44
 800fc4e:	4b0a      	ldr	r3, [pc, #40]	; (800fc78 <HAL_PCD_MspInit+0x94>)
 800fc50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fc56:	60bb      	str	r3, [r7, #8]
 800fc58:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	2105      	movs	r1, #5
 800fc5e:	2043      	movs	r0, #67	; 0x43
 800fc60:	f7f0 fd87 	bl	8000772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fc64:	2043      	movs	r0, #67	; 0x43
 800fc66:	f7f0 fda0 	bl	80007aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fc6a:	bf00      	nop
 800fc6c:	3720      	adds	r7, #32
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	bf00      	nop
 800fc74:	40020000 	.word	0x40020000
 800fc78:	40023800 	.word	0x40023800

0800fc7c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800fc90:	4619      	mov	r1, r3
 800fc92:	4610      	mov	r0, r2
 800fc94:	f7f4 fe6e 	bl	8004974 <USBD_LL_SetupStage>
}
 800fc98:	bf00      	nop
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	460b      	mov	r3, r1
 800fcaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 800fcb2:	78fa      	ldrb	r2, [r7, #3]
 800fcb4:	6879      	ldr	r1, [r7, #4]
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	00db      	lsls	r3, r3, #3
 800fcba:	1a9b      	subs	r3, r3, r2
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	440b      	add	r3, r1
 800fcc0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800fcc4:	681a      	ldr	r2, [r3, #0]
 800fcc6:	78fb      	ldrb	r3, [r7, #3]
 800fcc8:	4619      	mov	r1, r3
 800fcca:	f7f4 fe9d 	bl	8004a08 <USBD_LL_DataOutStage>
}
 800fcce:	bf00      	nop
 800fcd0:	3708      	adds	r7, #8
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}

0800fcd6 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800fcd6:	b580      	push	{r7, lr}
 800fcd8:	b082      	sub	sp, #8
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	6078      	str	r0, [r7, #4]
 800fcde:	460b      	mov	r3, r1
 800fce0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 800fce8:	78fa      	ldrb	r2, [r7, #3]
 800fcea:	6879      	ldr	r1, [r7, #4]
 800fcec:	4613      	mov	r3, r2
 800fcee:	00db      	lsls	r3, r3, #3
 800fcf0:	1a9b      	subs	r3, r3, r2
 800fcf2:	009b      	lsls	r3, r3, #2
 800fcf4:	440b      	add	r3, r1
 800fcf6:	3344      	adds	r3, #68	; 0x44
 800fcf8:	681a      	ldr	r2, [r3, #0]
 800fcfa:	78fb      	ldrb	r3, [r7, #3]
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	f7f4 fede 	bl	8004abe <USBD_LL_DataInStage>
}
 800fd02:	bf00      	nop
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800fd0a:	b580      	push	{r7, lr}
 800fd0c:	b082      	sub	sp, #8
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f7f4 ffc4 	bl	8004ca6 <USBD_LL_SOF>
}
 800fd1e:	bf00      	nop
 800fd20:	3708      	adds	r7, #8
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}

0800fd26 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800fd26:	b580      	push	{r7, lr}
 800fd28:	b084      	sub	sp, #16
 800fd2a:	af00      	add	r7, sp, #0
 800fd2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fd2e:	2301      	movs	r3, #1
 800fd30:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d002      	beq.n	800fd40 <HAL_PCD_ResetCallback+0x1a>
 800fd3a:	2b02      	cmp	r3, #2
 800fd3c:	d003      	beq.n	800fd46 <HAL_PCD_ResetCallback+0x20>
 800fd3e:	e005      	b.n	800fd4c <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 800fd40:	2300      	movs	r3, #0
 800fd42:	73fb      	strb	r3, [r7, #15]
    break;
 800fd44:	e005      	b.n	800fd52 <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800fd46:	2301      	movs	r3, #1
 800fd48:	73fb      	strb	r3, [r7, #15]
    break;
 800fd4a:	e002      	b.n	800fd52 <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	73fb      	strb	r3, [r7, #15]
    break;    
 800fd50:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800fd58:	7bfa      	ldrb	r2, [r7, #15]
 800fd5a:	4611      	mov	r1, r2
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7f4 ff6c 	bl	8004c3a <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7f4 ff37 	bl	8004bdc <USBD_LL_Reset>
}
 800fd6e:	bf00      	nop
 800fd70:	3710      	adds	r7, #16
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
	...

0800fd78 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7f4 ff67 	bl	8004c5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd94:	461a      	mov	r2, r3
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f043 0301 	orr.w	r3, r3, #1
 800fda4:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6a1b      	ldr	r3, [r3, #32]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d005      	beq.n	800fdba <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fdae:	4a05      	ldr	r2, [pc, #20]	; (800fdc4 <HAL_PCD_SuspendCallback+0x4c>)
 800fdb0:	4b04      	ldr	r3, [pc, #16]	; (800fdc4 <HAL_PCD_SuspendCallback+0x4c>)
 800fdb2:	691b      	ldr	r3, [r3, #16]
 800fdb4:	f043 0306 	orr.w	r3, r3, #6
 800fdb8:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fdba:	bf00      	nop
 800fdbc:	3708      	adds	r7, #8
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
 800fdc2:	bf00      	nop
 800fdc4:	e000ed00 	.word	0xe000ed00

0800fdc8 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7f4 ff54 	bl	8004c84 <USBD_LL_Resume>
}
 800fddc:	bf00      	nop
 800fdde:	3708      	adds	r7, #8
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	460b      	mov	r3, r1
 800fdee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800fdf6:	78fa      	ldrb	r2, [r7, #3]
 800fdf8:	4611      	mov	r1, r2
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7f4 ff7a 	bl	8004cf4 <USBD_LL_IsoOUTIncomplete>
}
 800fe00:	bf00      	nop
 800fe02:	3708      	adds	r7, #8
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	460b      	mov	r3, r1
 800fe12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800fe1a:	78fa      	ldrb	r2, [r7, #3]
 800fe1c:	4611      	mov	r1, r2
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7f4 ff5b 	bl	8004cda <USBD_LL_IsoINIncomplete>
}
 800fe24:	bf00      	nop
 800fe26:	3708      	adds	r7, #8
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7f4 ff67 	bl	8004d0e <USBD_LL_DevConnected>
}
 800fe40:	bf00      	nop
 800fe42:	3708      	adds	r7, #8
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7f4 ff64 	bl	8004d24 <USBD_LL_DevDisconnected>
}
 800fe5c:	bf00      	nop
 800fe5e:	3708      	adds	r7, #8
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}

0800fe64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	781b      	ldrb	r3, [r3, #0]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d142      	bne.n	800fefa <USBD_LL_Init+0x96>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fe74:	4a23      	ldr	r2, [pc, #140]	; (800ff04 <USBD_LL_Init+0xa0>)
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	4a21      	ldr	r2, [pc, #132]	; (800ff04 <USBD_LL_Init+0xa0>)
 800fe80:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fe84:	4b1f      	ldr	r3, [pc, #124]	; (800ff04 <USBD_LL_Init+0xa0>)
 800fe86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fe8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 3;
 800fe8c:	4b1d      	ldr	r3, [pc, #116]	; (800ff04 <USBD_LL_Init+0xa0>)
 800fe8e:	2203      	movs	r2, #3
 800fe90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fe92:	4b1c      	ldr	r3, [pc, #112]	; (800ff04 <USBD_LL_Init+0xa0>)
 800fe94:	2202      	movs	r2, #2
 800fe96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fe98:	4b1a      	ldr	r3, [pc, #104]	; (800ff04 <USBD_LL_Init+0xa0>)
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800fe9e:	4b19      	ldr	r3, [pc, #100]	; (800ff04 <USBD_LL_Init+0xa0>)
 800fea0:	2200      	movs	r2, #0
 800fea2:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fea4:	4b17      	ldr	r3, [pc, #92]	; (800ff04 <USBD_LL_Init+0xa0>)
 800fea6:	2202      	movs	r2, #2
 800fea8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800feaa:	4b16      	ldr	r3, [pc, #88]	; (800ff04 <USBD_LL_Init+0xa0>)
 800feac:	2201      	movs	r2, #1
 800feae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800feb0:	4b14      	ldr	r3, [pc, #80]	; (800ff04 <USBD_LL_Init+0xa0>)
 800feb2:	2200      	movs	r2, #0
 800feb4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800feb6:	4b13      	ldr	r3, [pc, #76]	; (800ff04 <USBD_LL_Init+0xa0>)
 800feb8:	2200      	movs	r2, #0
 800feba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800febc:	4b11      	ldr	r3, [pc, #68]	; (800ff04 <USBD_LL_Init+0xa0>)
 800febe:	2201      	movs	r2, #1
 800fec0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fec2:	4b10      	ldr	r3, [pc, #64]	; (800ff04 <USBD_LL_Init+0xa0>)
 800fec4:	2200      	movs	r2, #0
 800fec6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fec8:	480e      	ldr	r0, [pc, #56]	; (800ff04 <USBD_LL_Init+0xa0>)
 800feca:	f7f0 fe27 	bl	8000b1c <HAL_PCD_Init>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d004      	beq.n	800fede <USBD_LL_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800fed4:	f240 1153 	movw	r1, #339	; 0x153
 800fed8:	480b      	ldr	r0, [pc, #44]	; (800ff08 <USBD_LL_Init+0xa4>)
 800feda:	f7ff fd53 	bl	800f984 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fede:	2180      	movs	r1, #128	; 0x80
 800fee0:	4808      	ldr	r0, [pc, #32]	; (800ff04 <USBD_LL_Init+0xa0>)
 800fee2:	f7f1 fec1 	bl	8001c68 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fee6:	2240      	movs	r2, #64	; 0x40
 800fee8:	2100      	movs	r1, #0
 800feea:	4806      	ldr	r0, [pc, #24]	; (800ff04 <USBD_LL_Init+0xa0>)
 800feec:	f7f1 fe71 	bl	8001bd2 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fef0:	2280      	movs	r2, #128	; 0x80
 800fef2:	2101      	movs	r1, #1
 800fef4:	4803      	ldr	r0, [pc, #12]	; (800ff04 <USBD_LL_Init+0xa0>)
 800fef6:	f7f1 fe6c 	bl	8001bd2 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fefa:	2300      	movs	r3, #0
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3708      	adds	r7, #8
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}
 800ff04:	20005b98 	.word	0x20005b98
 800ff08:	08010874 	.word	0x08010874

0800ff0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b084      	sub	sp, #16
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff14:	2300      	movs	r3, #0
 800ff16:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7f0 ff01 	bl	8000d2a <HAL_PCD_Start>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800ff2c:	7bbb      	ldrb	r3, [r7, #14]
 800ff2e:	2b03      	cmp	r3, #3
 800ff30:	d816      	bhi.n	800ff60 <USBD_LL_Start+0x54>
 800ff32:	a201      	add	r2, pc, #4	; (adr r2, 800ff38 <USBD_LL_Start+0x2c>)
 800ff34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff38:	0800ff49 	.word	0x0800ff49
 800ff3c:	0800ff4f 	.word	0x0800ff4f
 800ff40:	0800ff55 	.word	0x0800ff55
 800ff44:	0800ff5b 	.word	0x0800ff5b
    case HAL_OK :
      usb_status = USBD_OK;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ff4c:	e00b      	b.n	800ff66 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ff4e:	2302      	movs	r3, #2
 800ff50:	73fb      	strb	r3, [r7, #15]
    break;
 800ff52:	e008      	b.n	800ff66 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ff54:	2301      	movs	r3, #1
 800ff56:	73fb      	strb	r3, [r7, #15]
    break;
 800ff58:	e005      	b.n	800ff66 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ff5a:	2302      	movs	r3, #2
 800ff5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ff5e:	e002      	b.n	800ff66 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ff60:	2302      	movs	r3, #2
 800ff62:	73fb      	strb	r3, [r7, #15]
    break;
 800ff64:	bf00      	nop
  }
  return usb_status;
 800ff66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3710      	adds	r7, #16
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b084      	sub	sp, #16
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	4608      	mov	r0, r1
 800ff7a:	4611      	mov	r1, r2
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	4603      	mov	r3, r0
 800ff80:	70fb      	strb	r3, [r7, #3]
 800ff82:	460b      	mov	r3, r1
 800ff84:	70bb      	strb	r3, [r7, #2]
 800ff86:	4613      	mov	r3, r2
 800ff88:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800ff98:	78bb      	ldrb	r3, [r7, #2]
 800ff9a:	883a      	ldrh	r2, [r7, #0]
 800ff9c:	78f9      	ldrb	r1, [r7, #3]
 800ff9e:	f7f1 fb92 	bl	80016c6 <HAL_PCD_EP_Open>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ffa6:	7bbb      	ldrb	r3, [r7, #14]
 800ffa8:	2b03      	cmp	r3, #3
 800ffaa:	d817      	bhi.n	800ffdc <USBD_LL_OpenEP+0x6c>
 800ffac:	a201      	add	r2, pc, #4	; (adr r2, 800ffb4 <USBD_LL_OpenEP+0x44>)
 800ffae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffb2:	bf00      	nop
 800ffb4:	0800ffc5 	.word	0x0800ffc5
 800ffb8:	0800ffcb 	.word	0x0800ffcb
 800ffbc:	0800ffd1 	.word	0x0800ffd1
 800ffc0:	0800ffd7 	.word	0x0800ffd7
    case HAL_OK :
      usb_status = USBD_OK;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	73fb      	strb	r3, [r7, #15]
    break;
 800ffc8:	e00b      	b.n	800ffe2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ffca:	2302      	movs	r3, #2
 800ffcc:	73fb      	strb	r3, [r7, #15]
    break;
 800ffce:	e008      	b.n	800ffe2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	73fb      	strb	r3, [r7, #15]
    break;
 800ffd4:	e005      	b.n	800ffe2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ffd6:	2302      	movs	r3, #2
 800ffd8:	73fb      	strb	r3, [r7, #15]
    break;
 800ffda:	e002      	b.n	800ffe2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ffdc:	2302      	movs	r3, #2
 800ffde:	73fb      	strb	r3, [r7, #15]
    break;
 800ffe0:	bf00      	nop
  }
  return usb_status;
 800ffe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3710      	adds	r7, #16
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}

0800ffec <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	460b      	mov	r3, r1
 800fff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fff8:	2300      	movs	r3, #0
 800fffa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fffc:	2300      	movs	r3, #0
 800fffe:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010006:	78fa      	ldrb	r2, [r7, #3]
 8010008:	4611      	mov	r1, r2
 801000a:	4618      	mov	r0, r3
 801000c:	f7f1 fbc3 	bl	8001796 <HAL_PCD_EP_Close>
 8010010:	4603      	mov	r3, r0
 8010012:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8010014:	7bbb      	ldrb	r3, [r7, #14]
 8010016:	2b03      	cmp	r3, #3
 8010018:	d816      	bhi.n	8010048 <USBD_LL_CloseEP+0x5c>
 801001a:	a201      	add	r2, pc, #4	; (adr r2, 8010020 <USBD_LL_CloseEP+0x34>)
 801001c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010020:	08010031 	.word	0x08010031
 8010024:	08010037 	.word	0x08010037
 8010028:	0801003d 	.word	0x0801003d
 801002c:	08010043 	.word	0x08010043
    case HAL_OK :
      usb_status = USBD_OK;
 8010030:	2300      	movs	r3, #0
 8010032:	73fb      	strb	r3, [r7, #15]
    break;
 8010034:	e00b      	b.n	801004e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010036:	2302      	movs	r3, #2
 8010038:	73fb      	strb	r3, [r7, #15]
    break;
 801003a:	e008      	b.n	801004e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801003c:	2301      	movs	r3, #1
 801003e:	73fb      	strb	r3, [r7, #15]
    break;
 8010040:	e005      	b.n	801004e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010042:	2302      	movs	r3, #2
 8010044:	73fb      	strb	r3, [r7, #15]
    break;
 8010046:	e002      	b.n	801004e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010048:	2302      	movs	r3, #2
 801004a:	73fb      	strb	r3, [r7, #15]
    break;
 801004c:	bf00      	nop
  }
  return usb_status;  
 801004e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010050:	4618      	mov	r0, r3
 8010052:	3710      	adds	r7, #16
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}

08010058 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b084      	sub	sp, #16
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	460b      	mov	r3, r1
 8010062:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010064:	2300      	movs	r3, #0
 8010066:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010068:	2300      	movs	r3, #0
 801006a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010072:	78fa      	ldrb	r2, [r7, #3]
 8010074:	4611      	mov	r1, r2
 8010076:	4618      	mov	r0, r3
 8010078:	f7f1 fc83 	bl	8001982 <HAL_PCD_EP_SetStall>
 801007c:	4603      	mov	r3, r0
 801007e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010080:	7bbb      	ldrb	r3, [r7, #14]
 8010082:	2b03      	cmp	r3, #3
 8010084:	d816      	bhi.n	80100b4 <USBD_LL_StallEP+0x5c>
 8010086:	a201      	add	r2, pc, #4	; (adr r2, 801008c <USBD_LL_StallEP+0x34>)
 8010088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801008c:	0801009d 	.word	0x0801009d
 8010090:	080100a3 	.word	0x080100a3
 8010094:	080100a9 	.word	0x080100a9
 8010098:	080100af 	.word	0x080100af
    case HAL_OK :
      usb_status = USBD_OK;
 801009c:	2300      	movs	r3, #0
 801009e:	73fb      	strb	r3, [r7, #15]
    break;
 80100a0:	e00b      	b.n	80100ba <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80100a2:	2302      	movs	r3, #2
 80100a4:	73fb      	strb	r3, [r7, #15]
    break;
 80100a6:	e008      	b.n	80100ba <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80100a8:	2301      	movs	r3, #1
 80100aa:	73fb      	strb	r3, [r7, #15]
    break;
 80100ac:	e005      	b.n	80100ba <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80100ae:	2302      	movs	r3, #2
 80100b0:	73fb      	strb	r3, [r7, #15]
    break;
 80100b2:	e002      	b.n	80100ba <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80100b4:	2302      	movs	r3, #2
 80100b6:	73fb      	strb	r3, [r7, #15]
    break;
 80100b8:	bf00      	nop
  }
  return usb_status;  
 80100ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3710      	adds	r7, #16
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b084      	sub	sp, #16
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	460b      	mov	r3, r1
 80100ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100d0:	2300      	movs	r3, #0
 80100d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100d4:	2300      	movs	r3, #0
 80100d6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80100de:	78fa      	ldrb	r2, [r7, #3]
 80100e0:	4611      	mov	r1, r2
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7f1 fca8 	bl	8001a38 <HAL_PCD_EP_ClrStall>
 80100e8:	4603      	mov	r3, r0
 80100ea:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80100ec:	7bbb      	ldrb	r3, [r7, #14]
 80100ee:	2b03      	cmp	r3, #3
 80100f0:	d816      	bhi.n	8010120 <USBD_LL_ClearStallEP+0x5c>
 80100f2:	a201      	add	r2, pc, #4	; (adr r2, 80100f8 <USBD_LL_ClearStallEP+0x34>)
 80100f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f8:	08010109 	.word	0x08010109
 80100fc:	0801010f 	.word	0x0801010f
 8010100:	08010115 	.word	0x08010115
 8010104:	0801011b 	.word	0x0801011b
    case HAL_OK :
      usb_status = USBD_OK;
 8010108:	2300      	movs	r3, #0
 801010a:	73fb      	strb	r3, [r7, #15]
    break;
 801010c:	e00b      	b.n	8010126 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801010e:	2302      	movs	r3, #2
 8010110:	73fb      	strb	r3, [r7, #15]
    break;
 8010112:	e008      	b.n	8010126 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010114:	2301      	movs	r3, #1
 8010116:	73fb      	strb	r3, [r7, #15]
    break;
 8010118:	e005      	b.n	8010126 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801011a:	2302      	movs	r3, #2
 801011c:	73fb      	strb	r3, [r7, #15]
    break;
 801011e:	e002      	b.n	8010126 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010120:	2302      	movs	r3, #2
 8010122:	73fb      	strb	r3, [r7, #15]
    break;
 8010124:	bf00      	nop
  }
  return usb_status; 
 8010126:	7bfb      	ldrb	r3, [r7, #15]
}
 8010128:	4618      	mov	r0, r3
 801012a:	3710      	adds	r7, #16
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}

08010130 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010130:	b480      	push	{r7}
 8010132:	b085      	sub	sp, #20
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	460b      	mov	r3, r1
 801013a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010142:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8010144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010148:	2b00      	cmp	r3, #0
 801014a:	da0b      	bge.n	8010164 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801014c:	78fb      	ldrb	r3, [r7, #3]
 801014e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010152:	68f9      	ldr	r1, [r7, #12]
 8010154:	4613      	mov	r3, r2
 8010156:	00db      	lsls	r3, r3, #3
 8010158:	1a9b      	subs	r3, r3, r2
 801015a:	009b      	lsls	r3, r3, #2
 801015c:	440b      	add	r3, r1
 801015e:	333a      	adds	r3, #58	; 0x3a
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	e00b      	b.n	801017c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8010164:	78fb      	ldrb	r3, [r7, #3]
 8010166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801016a:	68f9      	ldr	r1, [r7, #12]
 801016c:	4613      	mov	r3, r2
 801016e:	00db      	lsls	r3, r3, #3
 8010170:	1a9b      	subs	r3, r3, r2
 8010172:	009b      	lsls	r3, r3, #2
 8010174:	440b      	add	r3, r1
 8010176:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 801017a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801017c:	4618      	mov	r0, r3
 801017e:	3714      	adds	r7, #20
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	460b      	mov	r3, r1
 8010192:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010194:	2300      	movs	r3, #0
 8010196:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010198:	2300      	movs	r3, #0
 801019a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80101a2:	78fa      	ldrb	r2, [r7, #3]
 80101a4:	4611      	mov	r1, r2
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7f1 fa6c 	bl	8001684 <HAL_PCD_SetAddress>
 80101ac:	4603      	mov	r3, r0
 80101ae:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80101b0:	7bbb      	ldrb	r3, [r7, #14]
 80101b2:	2b03      	cmp	r3, #3
 80101b4:	d816      	bhi.n	80101e4 <USBD_LL_SetUSBAddress+0x5c>
 80101b6:	a201      	add	r2, pc, #4	; (adr r2, 80101bc <USBD_LL_SetUSBAddress+0x34>)
 80101b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101bc:	080101cd 	.word	0x080101cd
 80101c0:	080101d3 	.word	0x080101d3
 80101c4:	080101d9 	.word	0x080101d9
 80101c8:	080101df 	.word	0x080101df
    case HAL_OK :
      usb_status = USBD_OK;
 80101cc:	2300      	movs	r3, #0
 80101ce:	73fb      	strb	r3, [r7, #15]
    break;
 80101d0:	e00b      	b.n	80101ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80101d2:	2302      	movs	r3, #2
 80101d4:	73fb      	strb	r3, [r7, #15]
    break;
 80101d6:	e008      	b.n	80101ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80101d8:	2301      	movs	r3, #1
 80101da:	73fb      	strb	r3, [r7, #15]
    break;
 80101dc:	e005      	b.n	80101ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80101de:	2302      	movs	r3, #2
 80101e0:	73fb      	strb	r3, [r7, #15]
    break;
 80101e2:	e002      	b.n	80101ea <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80101e4:	2302      	movs	r3, #2
 80101e6:	73fb      	strb	r3, [r7, #15]
    break;
 80101e8:	bf00      	nop
  }
  return usb_status;  
 80101ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3710      	adds	r7, #16
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b086      	sub	sp, #24
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	60f8      	str	r0, [r7, #12]
 80101fc:	607a      	str	r2, [r7, #4]
 80101fe:	461a      	mov	r2, r3
 8010200:	460b      	mov	r3, r1
 8010202:	72fb      	strb	r3, [r7, #11]
 8010204:	4613      	mov	r3, r2
 8010206:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010208:	2300      	movs	r3, #0
 801020a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801020c:	2300      	movs	r3, #0
 801020e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8010216:	893b      	ldrh	r3, [r7, #8]
 8010218:	7af9      	ldrb	r1, [r7, #11]
 801021a:	687a      	ldr	r2, [r7, #4]
 801021c:	f7f1 fb68 	bl	80018f0 <HAL_PCD_EP_Transmit>
 8010220:	4603      	mov	r3, r0
 8010222:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8010224:	7dbb      	ldrb	r3, [r7, #22]
 8010226:	2b03      	cmp	r3, #3
 8010228:	d816      	bhi.n	8010258 <USBD_LL_Transmit+0x64>
 801022a:	a201      	add	r2, pc, #4	; (adr r2, 8010230 <USBD_LL_Transmit+0x3c>)
 801022c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010230:	08010241 	.word	0x08010241
 8010234:	08010247 	.word	0x08010247
 8010238:	0801024d 	.word	0x0801024d
 801023c:	08010253 	.word	0x08010253
    case HAL_OK :
      usb_status = USBD_OK;
 8010240:	2300      	movs	r3, #0
 8010242:	75fb      	strb	r3, [r7, #23]
    break;
 8010244:	e00b      	b.n	801025e <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010246:	2302      	movs	r3, #2
 8010248:	75fb      	strb	r3, [r7, #23]
    break;
 801024a:	e008      	b.n	801025e <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801024c:	2301      	movs	r3, #1
 801024e:	75fb      	strb	r3, [r7, #23]
    break;
 8010250:	e005      	b.n	801025e <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010252:	2302      	movs	r3, #2
 8010254:	75fb      	strb	r3, [r7, #23]
    break;
 8010256:	e002      	b.n	801025e <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8010258:	2302      	movs	r3, #2
 801025a:	75fb      	strb	r3, [r7, #23]
    break;
 801025c:	bf00      	nop
  }
  return usb_status;    
 801025e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010260:	4618      	mov	r0, r3
 8010262:	3718      	adds	r7, #24
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b086      	sub	sp, #24
 801026c:	af00      	add	r7, sp, #0
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	607a      	str	r2, [r7, #4]
 8010272:	461a      	mov	r2, r3
 8010274:	460b      	mov	r3, r1
 8010276:	72fb      	strb	r3, [r7, #11]
 8010278:	4613      	mov	r3, r2
 801027a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801027c:	2300      	movs	r3, #0
 801027e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010280:	2300      	movs	r3, #0
 8010282:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801028a:	893b      	ldrh	r3, [r7, #8]
 801028c:	7af9      	ldrb	r1, [r7, #11]
 801028e:	687a      	ldr	r2, [r7, #4]
 8010290:	f7f1 facb 	bl	800182a <HAL_PCD_EP_Receive>
 8010294:	4603      	mov	r3, r0
 8010296:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8010298:	7dbb      	ldrb	r3, [r7, #22]
 801029a:	2b03      	cmp	r3, #3
 801029c:	d816      	bhi.n	80102cc <USBD_LL_PrepareReceive+0x64>
 801029e:	a201      	add	r2, pc, #4	; (adr r2, 80102a4 <USBD_LL_PrepareReceive+0x3c>)
 80102a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102a4:	080102b5 	.word	0x080102b5
 80102a8:	080102bb 	.word	0x080102bb
 80102ac:	080102c1 	.word	0x080102c1
 80102b0:	080102c7 	.word	0x080102c7
    case HAL_OK :
      usb_status = USBD_OK;
 80102b4:	2300      	movs	r3, #0
 80102b6:	75fb      	strb	r3, [r7, #23]
    break;
 80102b8:	e00b      	b.n	80102d2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80102ba:	2302      	movs	r3, #2
 80102bc:	75fb      	strb	r3, [r7, #23]
    break;
 80102be:	e008      	b.n	80102d2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80102c0:	2301      	movs	r3, #1
 80102c2:	75fb      	strb	r3, [r7, #23]
    break;
 80102c4:	e005      	b.n	80102d2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80102c6:	2302      	movs	r3, #2
 80102c8:	75fb      	strb	r3, [r7, #23]
    break;
 80102ca:	e002      	b.n	80102d2 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 80102cc:	2302      	movs	r3, #2
 80102ce:	75fb      	strb	r3, [r7, #23]
    break;
 80102d0:	bf00      	nop
  }
  return usb_status; 
 80102d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3718      	adds	r7, #24
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}

080102dc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b082      	sub	sp, #8
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	460b      	mov	r3, r1
 80102e6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80102ee:	78fa      	ldrb	r2, [r7, #3]
 80102f0:	4611      	mov	r1, r2
 80102f2:	4618      	mov	r0, r3
 80102f4:	f7f1 fae3 	bl	80018be <HAL_PCD_EP_GetRxCount>
 80102f8:	4603      	mov	r3, r0
}
 80102fa:	4618      	mov	r0, r3
 80102fc:	3708      	adds	r7, #8
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}
	...

08010304 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010304:	b480      	push	{r7}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
 801030a:	4603      	mov	r3, r0
 801030c:	6039      	str	r1, [r7, #0]
 801030e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	2212      	movs	r2, #18
 8010314:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010316:	4b03      	ldr	r3, [pc, #12]	; (8010324 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010318:	4618      	mov	r0, r3
 801031a:	370c      	adds	r7, #12
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr
 8010324:	200000e0 	.word	0x200000e0

08010328 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010328:	b480      	push	{r7}
 801032a:	b083      	sub	sp, #12
 801032c:	af00      	add	r7, sp, #0
 801032e:	4603      	mov	r3, r0
 8010330:	6039      	str	r1, [r7, #0]
 8010332:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	2204      	movs	r2, #4
 8010338:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801033a:	4b03      	ldr	r3, [pc, #12]	; (8010348 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801033c:	4618      	mov	r0, r3
 801033e:	370c      	adds	r7, #12
 8010340:	46bd      	mov	sp, r7
 8010342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010346:	4770      	bx	lr
 8010348:	200000f4 	.word	0x200000f4

0801034c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af00      	add	r7, sp, #0
 8010352:	4603      	mov	r3, r0
 8010354:	6039      	str	r1, [r7, #0]
 8010356:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010358:	79fb      	ldrb	r3, [r7, #7]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d105      	bne.n	801036a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801035e:	683a      	ldr	r2, [r7, #0]
 8010360:	4907      	ldr	r1, [pc, #28]	; (8010380 <USBD_FS_ProductStrDescriptor+0x34>)
 8010362:	4808      	ldr	r0, [pc, #32]	; (8010384 <USBD_FS_ProductStrDescriptor+0x38>)
 8010364:	f7f5 f8f9 	bl	800555a <USBD_GetString>
 8010368:	e004      	b.n	8010374 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801036a:	683a      	ldr	r2, [r7, #0]
 801036c:	4904      	ldr	r1, [pc, #16]	; (8010380 <USBD_FS_ProductStrDescriptor+0x34>)
 801036e:	4805      	ldr	r0, [pc, #20]	; (8010384 <USBD_FS_ProductStrDescriptor+0x38>)
 8010370:	f7f5 f8f3 	bl	800555a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010374:	4b02      	ldr	r3, [pc, #8]	; (8010380 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010376:	4618      	mov	r0, r3
 8010378:	3708      	adds	r7, #8
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop
 8010380:	20005f88 	.word	0x20005f88
 8010384:	08010888 	.word	0x08010888

08010388 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	4603      	mov	r3, r0
 8010390:	6039      	str	r1, [r7, #0]
 8010392:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010394:	683a      	ldr	r2, [r7, #0]
 8010396:	4904      	ldr	r1, [pc, #16]	; (80103a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010398:	4804      	ldr	r0, [pc, #16]	; (80103ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801039a:	f7f5 f8de 	bl	800555a <USBD_GetString>
  return USBD_StrDesc;
 801039e:	4b02      	ldr	r3, [pc, #8]	; (80103a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80103a0:	4618      	mov	r0, r3
 80103a2:	3708      	adds	r7, #8
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}
 80103a8:	20005f88 	.word	0x20005f88
 80103ac:	080108a0 	.word	0x080108a0

080103b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b082      	sub	sp, #8
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	4603      	mov	r3, r0
 80103b8:	6039      	str	r1, [r7, #0]
 80103ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80103bc:	79fb      	ldrb	r3, [r7, #7]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d105      	bne.n	80103ce <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80103c2:	683a      	ldr	r2, [r7, #0]
 80103c4:	4907      	ldr	r1, [pc, #28]	; (80103e4 <USBD_FS_SerialStrDescriptor+0x34>)
 80103c6:	4808      	ldr	r0, [pc, #32]	; (80103e8 <USBD_FS_SerialStrDescriptor+0x38>)
 80103c8:	f7f5 f8c7 	bl	800555a <USBD_GetString>
 80103cc:	e004      	b.n	80103d8 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80103ce:	683a      	ldr	r2, [r7, #0]
 80103d0:	4904      	ldr	r1, [pc, #16]	; (80103e4 <USBD_FS_SerialStrDescriptor+0x34>)
 80103d2:	4805      	ldr	r0, [pc, #20]	; (80103e8 <USBD_FS_SerialStrDescriptor+0x38>)
 80103d4:	f7f5 f8c1 	bl	800555a <USBD_GetString>
  }
  return USBD_StrDesc;
 80103d8:	4b02      	ldr	r3, [pc, #8]	; (80103e4 <USBD_FS_SerialStrDescriptor+0x34>)
}
 80103da:	4618      	mov	r0, r3
 80103dc:	3708      	adds	r7, #8
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
 80103e2:	bf00      	nop
 80103e4:	20005f88 	.word	0x20005f88
 80103e8:	080108b4 	.word	0x080108b4

080103ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b082      	sub	sp, #8
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	4603      	mov	r3, r0
 80103f4:	6039      	str	r1, [r7, #0]
 80103f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80103f8:	79fb      	ldrb	r3, [r7, #7]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d105      	bne.n	801040a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80103fe:	683a      	ldr	r2, [r7, #0]
 8010400:	4907      	ldr	r1, [pc, #28]	; (8010420 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010402:	4808      	ldr	r0, [pc, #32]	; (8010424 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010404:	f7f5 f8a9 	bl	800555a <USBD_GetString>
 8010408:	e004      	b.n	8010414 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801040a:	683a      	ldr	r2, [r7, #0]
 801040c:	4904      	ldr	r1, [pc, #16]	; (8010420 <USBD_FS_ConfigStrDescriptor+0x34>)
 801040e:	4805      	ldr	r0, [pc, #20]	; (8010424 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010410:	f7f5 f8a3 	bl	800555a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010414:	4b02      	ldr	r3, [pc, #8]	; (8010420 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010416:	4618      	mov	r0, r3
 8010418:	3708      	adds	r7, #8
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
 801041e:	bf00      	nop
 8010420:	20005f88 	.word	0x20005f88
 8010424:	080108c4 	.word	0x080108c4

08010428 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
 801042e:	4603      	mov	r3, r0
 8010430:	6039      	str	r1, [r7, #0]
 8010432:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010434:	79fb      	ldrb	r3, [r7, #7]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d105      	bne.n	8010446 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801043a:	683a      	ldr	r2, [r7, #0]
 801043c:	4907      	ldr	r1, [pc, #28]	; (801045c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801043e:	4808      	ldr	r0, [pc, #32]	; (8010460 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010440:	f7f5 f88b 	bl	800555a <USBD_GetString>
 8010444:	e004      	b.n	8010450 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010446:	683a      	ldr	r2, [r7, #0]
 8010448:	4904      	ldr	r1, [pc, #16]	; (801045c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801044a:	4805      	ldr	r0, [pc, #20]	; (8010460 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801044c:	f7f5 f885 	bl	800555a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010450:	4b02      	ldr	r3, [pc, #8]	; (801045c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010452:	4618      	mov	r0, r3
 8010454:	3708      	adds	r7, #8
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}
 801045a:	bf00      	nop
 801045c:	20005f88 	.word	0x20005f88
 8010460:	080108d0 	.word	0x080108d0

08010464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8010464:	f8df d034 	ldr.w	sp, [pc, #52]	; 801049c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010468:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801046a:	e003      	b.n	8010474 <LoopCopyDataInit>

0801046c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801046c:	4b0c      	ldr	r3, [pc, #48]	; (80104a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801046e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010470:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010472:	3104      	adds	r1, #4

08010474 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010474:	480b      	ldr	r0, [pc, #44]	; (80104a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010476:	4b0c      	ldr	r3, [pc, #48]	; (80104a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010478:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801047a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801047c:	d3f6      	bcc.n	801046c <CopyDataInit>
  ldr  r2, =_sbss
 801047e:	4a0b      	ldr	r2, [pc, #44]	; (80104ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010480:	e002      	b.n	8010488 <LoopFillZerobss>

08010482 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010482:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010484:	f842 3b04 	str.w	r3, [r2], #4

08010488 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010488:	4b09      	ldr	r3, [pc, #36]	; (80104b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801048a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801048c:	d3f9      	bcc.n	8010482 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801048e:	f7ff fb5d 	bl	800fb4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010492:	f000 f811 	bl	80104b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010496:	f7ff f939 	bl	800f70c <main>
  bx  lr    
 801049a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 801049c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80104a0:	08010afc 	.word	0x08010afc
  ldr  r0, =_sdata
 80104a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80104a8:	200002c8 	.word	0x200002c8
  ldr  r2, =_sbss
 80104ac:	200002c8 	.word	0x200002c8
  ldr  r3, = _ebss
 80104b0:	2000618c 	.word	0x2000618c

080104b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80104b4:	e7fe      	b.n	80104b4 <ADC_IRQHandler>
	...

080104b8 <__libc_init_array>:
 80104b8:	b570      	push	{r4, r5, r6, lr}
 80104ba:	4e0d      	ldr	r6, [pc, #52]	; (80104f0 <__libc_init_array+0x38>)
 80104bc:	4c0d      	ldr	r4, [pc, #52]	; (80104f4 <__libc_init_array+0x3c>)
 80104be:	1ba4      	subs	r4, r4, r6
 80104c0:	10a4      	asrs	r4, r4, #2
 80104c2:	2500      	movs	r5, #0
 80104c4:	42a5      	cmp	r5, r4
 80104c6:	d109      	bne.n	80104dc <__libc_init_array+0x24>
 80104c8:	4e0b      	ldr	r6, [pc, #44]	; (80104f8 <__libc_init_array+0x40>)
 80104ca:	4c0c      	ldr	r4, [pc, #48]	; (80104fc <__libc_init_array+0x44>)
 80104cc:	f000 f988 	bl	80107e0 <_init>
 80104d0:	1ba4      	subs	r4, r4, r6
 80104d2:	10a4      	asrs	r4, r4, #2
 80104d4:	2500      	movs	r5, #0
 80104d6:	42a5      	cmp	r5, r4
 80104d8:	d105      	bne.n	80104e6 <__libc_init_array+0x2e>
 80104da:	bd70      	pop	{r4, r5, r6, pc}
 80104dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80104e0:	4798      	blx	r3
 80104e2:	3501      	adds	r5, #1
 80104e4:	e7ee      	b.n	80104c4 <__libc_init_array+0xc>
 80104e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80104ea:	4798      	blx	r3
 80104ec:	3501      	adds	r5, #1
 80104ee:	e7f2      	b.n	80104d6 <__libc_init_array+0x1e>
 80104f0:	08010af4 	.word	0x08010af4
 80104f4:	08010af4 	.word	0x08010af4
 80104f8:	08010af4 	.word	0x08010af4
 80104fc:	08010af8 	.word	0x08010af8

08010500 <memcmp>:
 8010500:	b510      	push	{r4, lr}
 8010502:	3901      	subs	r1, #1
 8010504:	4402      	add	r2, r0
 8010506:	4290      	cmp	r0, r2
 8010508:	d101      	bne.n	801050e <memcmp+0xe>
 801050a:	2000      	movs	r0, #0
 801050c:	bd10      	pop	{r4, pc}
 801050e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010512:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010516:	42a3      	cmp	r3, r4
 8010518:	d0f5      	beq.n	8010506 <memcmp+0x6>
 801051a:	1b18      	subs	r0, r3, r4
 801051c:	bd10      	pop	{r4, pc}

0801051e <memcpy>:
 801051e:	b510      	push	{r4, lr}
 8010520:	1e43      	subs	r3, r0, #1
 8010522:	440a      	add	r2, r1
 8010524:	4291      	cmp	r1, r2
 8010526:	d100      	bne.n	801052a <memcpy+0xc>
 8010528:	bd10      	pop	{r4, pc}
 801052a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801052e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010532:	e7f7      	b.n	8010524 <memcpy+0x6>

08010534 <memmove>:
 8010534:	4288      	cmp	r0, r1
 8010536:	b510      	push	{r4, lr}
 8010538:	eb01 0302 	add.w	r3, r1, r2
 801053c:	d803      	bhi.n	8010546 <memmove+0x12>
 801053e:	1e42      	subs	r2, r0, #1
 8010540:	4299      	cmp	r1, r3
 8010542:	d10c      	bne.n	801055e <memmove+0x2a>
 8010544:	bd10      	pop	{r4, pc}
 8010546:	4298      	cmp	r0, r3
 8010548:	d2f9      	bcs.n	801053e <memmove+0xa>
 801054a:	1881      	adds	r1, r0, r2
 801054c:	1ad2      	subs	r2, r2, r3
 801054e:	42d3      	cmn	r3, r2
 8010550:	d100      	bne.n	8010554 <memmove+0x20>
 8010552:	bd10      	pop	{r4, pc}
 8010554:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010558:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801055c:	e7f7      	b.n	801054e <memmove+0x1a>
 801055e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010562:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010566:	e7eb      	b.n	8010540 <memmove+0xc>

08010568 <memset>:
 8010568:	4402      	add	r2, r0
 801056a:	4603      	mov	r3, r0
 801056c:	4293      	cmp	r3, r2
 801056e:	d100      	bne.n	8010572 <memset+0xa>
 8010570:	4770      	bx	lr
 8010572:	f803 1b01 	strb.w	r1, [r3], #1
 8010576:	e7f9      	b.n	801056c <memset+0x4>

08010578 <rand>:
 8010578:	4b19      	ldr	r3, [pc, #100]	; (80105e0 <rand+0x68>)
 801057a:	b510      	push	{r4, lr}
 801057c:	681c      	ldr	r4, [r3, #0]
 801057e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010580:	b9d3      	cbnz	r3, 80105b8 <rand+0x40>
 8010582:	2018      	movs	r0, #24
 8010584:	f000 f886 	bl	8010694 <malloc>
 8010588:	f243 330e 	movw	r3, #13070	; 0x330e
 801058c:	63a0      	str	r0, [r4, #56]	; 0x38
 801058e:	8003      	strh	r3, [r0, #0]
 8010590:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8010594:	8043      	strh	r3, [r0, #2]
 8010596:	f241 2334 	movw	r3, #4660	; 0x1234
 801059a:	8083      	strh	r3, [r0, #4]
 801059c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80105a0:	80c3      	strh	r3, [r0, #6]
 80105a2:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80105a6:	8103      	strh	r3, [r0, #8]
 80105a8:	2305      	movs	r3, #5
 80105aa:	8143      	strh	r3, [r0, #10]
 80105ac:	230b      	movs	r3, #11
 80105ae:	8183      	strh	r3, [r0, #12]
 80105b0:	2201      	movs	r2, #1
 80105b2:	2300      	movs	r3, #0
 80105b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80105b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80105ba:	480a      	ldr	r0, [pc, #40]	; (80105e4 <rand+0x6c>)
 80105bc:	690a      	ldr	r2, [r1, #16]
 80105be:	694b      	ldr	r3, [r1, #20]
 80105c0:	4c09      	ldr	r4, [pc, #36]	; (80105e8 <rand+0x70>)
 80105c2:	4350      	muls	r0, r2
 80105c4:	fb04 0003 	mla	r0, r4, r3, r0
 80105c8:	fba2 2304 	umull	r2, r3, r2, r4
 80105cc:	3201      	adds	r2, #1
 80105ce:	4403      	add	r3, r0
 80105d0:	f143 0300 	adc.w	r3, r3, #0
 80105d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80105d8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80105dc:	bd10      	pop	{r4, pc}
 80105de:	bf00      	nop
 80105e0:	200000f8 	.word	0x200000f8
 80105e4:	5851f42d 	.word	0x5851f42d
 80105e8:	4c957f2d 	.word	0x4c957f2d

080105ec <strcasecmp>:
 80105ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ee:	4606      	mov	r6, r0
 80105f0:	460f      	mov	r7, r1
 80105f2:	f816 4b01 	ldrb.w	r4, [r6], #1
 80105f6:	f000 f83f 	bl	8010678 <__locale_ctype_ptr>
 80105fa:	4420      	add	r0, r4
 80105fc:	f817 5b01 	ldrb.w	r5, [r7], #1
 8010600:	7843      	ldrb	r3, [r0, #1]
 8010602:	f003 0303 	and.w	r3, r3, #3
 8010606:	2b01      	cmp	r3, #1
 8010608:	bf08      	it	eq
 801060a:	3420      	addeq	r4, #32
 801060c:	f000 f834 	bl	8010678 <__locale_ctype_ptr>
 8010610:	4428      	add	r0, r5
 8010612:	7843      	ldrb	r3, [r0, #1]
 8010614:	f003 0303 	and.w	r3, r3, #3
 8010618:	2b01      	cmp	r3, #1
 801061a:	bf08      	it	eq
 801061c:	3520      	addeq	r5, #32
 801061e:	1b60      	subs	r0, r4, r5
 8010620:	d101      	bne.n	8010626 <strcasecmp+0x3a>
 8010622:	2d00      	cmp	r5, #0
 8010624:	d1e5      	bne.n	80105f2 <strcasecmp+0x6>
 8010626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010628 <strncmp>:
 8010628:	b510      	push	{r4, lr}
 801062a:	b16a      	cbz	r2, 8010648 <strncmp+0x20>
 801062c:	3901      	subs	r1, #1
 801062e:	1884      	adds	r4, r0, r2
 8010630:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010634:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010638:	4293      	cmp	r3, r2
 801063a:	d103      	bne.n	8010644 <strncmp+0x1c>
 801063c:	42a0      	cmp	r0, r4
 801063e:	d001      	beq.n	8010644 <strncmp+0x1c>
 8010640:	2b00      	cmp	r3, #0
 8010642:	d1f5      	bne.n	8010630 <strncmp+0x8>
 8010644:	1a98      	subs	r0, r3, r2
 8010646:	bd10      	pop	{r4, pc}
 8010648:	4610      	mov	r0, r2
 801064a:	bd10      	pop	{r4, pc}

0801064c <strncpy>:
 801064c:	b570      	push	{r4, r5, r6, lr}
 801064e:	4604      	mov	r4, r0
 8010650:	b902      	cbnz	r2, 8010654 <strncpy+0x8>
 8010652:	bd70      	pop	{r4, r5, r6, pc}
 8010654:	4623      	mov	r3, r4
 8010656:	f811 5b01 	ldrb.w	r5, [r1], #1
 801065a:	f803 5b01 	strb.w	r5, [r3], #1
 801065e:	1e56      	subs	r6, r2, #1
 8010660:	b91d      	cbnz	r5, 801066a <strncpy+0x1e>
 8010662:	4414      	add	r4, r2
 8010664:	42a3      	cmp	r3, r4
 8010666:	d103      	bne.n	8010670 <strncpy+0x24>
 8010668:	bd70      	pop	{r4, r5, r6, pc}
 801066a:	461c      	mov	r4, r3
 801066c:	4632      	mov	r2, r6
 801066e:	e7ef      	b.n	8010650 <strncpy+0x4>
 8010670:	f803 5b01 	strb.w	r5, [r3], #1
 8010674:	e7f6      	b.n	8010664 <strncpy+0x18>
	...

08010678 <__locale_ctype_ptr>:
 8010678:	4b04      	ldr	r3, [pc, #16]	; (801068c <__locale_ctype_ptr+0x14>)
 801067a:	4a05      	ldr	r2, [pc, #20]	; (8010690 <__locale_ctype_ptr+0x18>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	6a1b      	ldr	r3, [r3, #32]
 8010680:	2b00      	cmp	r3, #0
 8010682:	bf08      	it	eq
 8010684:	4613      	moveq	r3, r2
 8010686:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801068a:	4770      	bx	lr
 801068c:	200000f8 	.word	0x200000f8
 8010690:	2000015c 	.word	0x2000015c

08010694 <malloc>:
 8010694:	4b02      	ldr	r3, [pc, #8]	; (80106a0 <malloc+0xc>)
 8010696:	4601      	mov	r1, r0
 8010698:	6818      	ldr	r0, [r3, #0]
 801069a:	f000 b815 	b.w	80106c8 <_malloc_r>
 801069e:	bf00      	nop
 80106a0:	200000f8 	.word	0x200000f8

080106a4 <__ascii_mbtowc>:
 80106a4:	b082      	sub	sp, #8
 80106a6:	b901      	cbnz	r1, 80106aa <__ascii_mbtowc+0x6>
 80106a8:	a901      	add	r1, sp, #4
 80106aa:	b142      	cbz	r2, 80106be <__ascii_mbtowc+0x1a>
 80106ac:	b14b      	cbz	r3, 80106c2 <__ascii_mbtowc+0x1e>
 80106ae:	7813      	ldrb	r3, [r2, #0]
 80106b0:	600b      	str	r3, [r1, #0]
 80106b2:	7812      	ldrb	r2, [r2, #0]
 80106b4:	1c10      	adds	r0, r2, #0
 80106b6:	bf18      	it	ne
 80106b8:	2001      	movne	r0, #1
 80106ba:	b002      	add	sp, #8
 80106bc:	4770      	bx	lr
 80106be:	4610      	mov	r0, r2
 80106c0:	e7fb      	b.n	80106ba <__ascii_mbtowc+0x16>
 80106c2:	f06f 0001 	mvn.w	r0, #1
 80106c6:	e7f8      	b.n	80106ba <__ascii_mbtowc+0x16>

080106c8 <_malloc_r>:
 80106c8:	b570      	push	{r4, r5, r6, lr}
 80106ca:	1ccd      	adds	r5, r1, #3
 80106cc:	f025 0503 	bic.w	r5, r5, #3
 80106d0:	3508      	adds	r5, #8
 80106d2:	2d0c      	cmp	r5, #12
 80106d4:	bf38      	it	cc
 80106d6:	250c      	movcc	r5, #12
 80106d8:	2d00      	cmp	r5, #0
 80106da:	4606      	mov	r6, r0
 80106dc:	db01      	blt.n	80106e2 <_malloc_r+0x1a>
 80106de:	42a9      	cmp	r1, r5
 80106e0:	d903      	bls.n	80106ea <_malloc_r+0x22>
 80106e2:	230c      	movs	r3, #12
 80106e4:	6033      	str	r3, [r6, #0]
 80106e6:	2000      	movs	r0, #0
 80106e8:	bd70      	pop	{r4, r5, r6, pc}
 80106ea:	f000 f868 	bl	80107be <__malloc_lock>
 80106ee:	4a23      	ldr	r2, [pc, #140]	; (801077c <_malloc_r+0xb4>)
 80106f0:	6814      	ldr	r4, [r2, #0]
 80106f2:	4621      	mov	r1, r4
 80106f4:	b991      	cbnz	r1, 801071c <_malloc_r+0x54>
 80106f6:	4c22      	ldr	r4, [pc, #136]	; (8010780 <_malloc_r+0xb8>)
 80106f8:	6823      	ldr	r3, [r4, #0]
 80106fa:	b91b      	cbnz	r3, 8010704 <_malloc_r+0x3c>
 80106fc:	4630      	mov	r0, r6
 80106fe:	f000 f841 	bl	8010784 <_sbrk_r>
 8010702:	6020      	str	r0, [r4, #0]
 8010704:	4629      	mov	r1, r5
 8010706:	4630      	mov	r0, r6
 8010708:	f000 f83c 	bl	8010784 <_sbrk_r>
 801070c:	1c43      	adds	r3, r0, #1
 801070e:	d126      	bne.n	801075e <_malloc_r+0x96>
 8010710:	230c      	movs	r3, #12
 8010712:	6033      	str	r3, [r6, #0]
 8010714:	4630      	mov	r0, r6
 8010716:	f000 f853 	bl	80107c0 <__malloc_unlock>
 801071a:	e7e4      	b.n	80106e6 <_malloc_r+0x1e>
 801071c:	680b      	ldr	r3, [r1, #0]
 801071e:	1b5b      	subs	r3, r3, r5
 8010720:	d41a      	bmi.n	8010758 <_malloc_r+0x90>
 8010722:	2b0b      	cmp	r3, #11
 8010724:	d90f      	bls.n	8010746 <_malloc_r+0x7e>
 8010726:	600b      	str	r3, [r1, #0]
 8010728:	50cd      	str	r5, [r1, r3]
 801072a:	18cc      	adds	r4, r1, r3
 801072c:	4630      	mov	r0, r6
 801072e:	f000 f847 	bl	80107c0 <__malloc_unlock>
 8010732:	f104 000b 	add.w	r0, r4, #11
 8010736:	1d23      	adds	r3, r4, #4
 8010738:	f020 0007 	bic.w	r0, r0, #7
 801073c:	1ac3      	subs	r3, r0, r3
 801073e:	d01b      	beq.n	8010778 <_malloc_r+0xb0>
 8010740:	425a      	negs	r2, r3
 8010742:	50e2      	str	r2, [r4, r3]
 8010744:	bd70      	pop	{r4, r5, r6, pc}
 8010746:	428c      	cmp	r4, r1
 8010748:	bf0d      	iteet	eq
 801074a:	6863      	ldreq	r3, [r4, #4]
 801074c:	684b      	ldrne	r3, [r1, #4]
 801074e:	6063      	strne	r3, [r4, #4]
 8010750:	6013      	streq	r3, [r2, #0]
 8010752:	bf18      	it	ne
 8010754:	460c      	movne	r4, r1
 8010756:	e7e9      	b.n	801072c <_malloc_r+0x64>
 8010758:	460c      	mov	r4, r1
 801075a:	6849      	ldr	r1, [r1, #4]
 801075c:	e7ca      	b.n	80106f4 <_malloc_r+0x2c>
 801075e:	1cc4      	adds	r4, r0, #3
 8010760:	f024 0403 	bic.w	r4, r4, #3
 8010764:	42a0      	cmp	r0, r4
 8010766:	d005      	beq.n	8010774 <_malloc_r+0xac>
 8010768:	1a21      	subs	r1, r4, r0
 801076a:	4630      	mov	r0, r6
 801076c:	f000 f80a 	bl	8010784 <_sbrk_r>
 8010770:	3001      	adds	r0, #1
 8010772:	d0cd      	beq.n	8010710 <_malloc_r+0x48>
 8010774:	6025      	str	r5, [r4, #0]
 8010776:	e7d9      	b.n	801072c <_malloc_r+0x64>
 8010778:	bd70      	pop	{r4, r5, r6, pc}
 801077a:	bf00      	nop
 801077c:	20004bd0 	.word	0x20004bd0
 8010780:	20004bd4 	.word	0x20004bd4

08010784 <_sbrk_r>:
 8010784:	b538      	push	{r3, r4, r5, lr}
 8010786:	4c06      	ldr	r4, [pc, #24]	; (80107a0 <_sbrk_r+0x1c>)
 8010788:	2300      	movs	r3, #0
 801078a:	4605      	mov	r5, r0
 801078c:	4608      	mov	r0, r1
 801078e:	6023      	str	r3, [r4, #0]
 8010790:	f000 f818 	bl	80107c4 <_sbrk>
 8010794:	1c43      	adds	r3, r0, #1
 8010796:	d102      	bne.n	801079e <_sbrk_r+0x1a>
 8010798:	6823      	ldr	r3, [r4, #0]
 801079a:	b103      	cbz	r3, 801079e <_sbrk_r+0x1a>
 801079c:	602b      	str	r3, [r5, #0]
 801079e:	bd38      	pop	{r3, r4, r5, pc}
 80107a0:	20006188 	.word	0x20006188

080107a4 <__ascii_wctomb>:
 80107a4:	b149      	cbz	r1, 80107ba <__ascii_wctomb+0x16>
 80107a6:	2aff      	cmp	r2, #255	; 0xff
 80107a8:	bf85      	ittet	hi
 80107aa:	238a      	movhi	r3, #138	; 0x8a
 80107ac:	6003      	strhi	r3, [r0, #0]
 80107ae:	700a      	strbls	r2, [r1, #0]
 80107b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80107b4:	bf98      	it	ls
 80107b6:	2001      	movls	r0, #1
 80107b8:	4770      	bx	lr
 80107ba:	4608      	mov	r0, r1
 80107bc:	4770      	bx	lr

080107be <__malloc_lock>:
 80107be:	4770      	bx	lr

080107c0 <__malloc_unlock>:
 80107c0:	4770      	bx	lr
	...

080107c4 <_sbrk>:
 80107c4:	4b04      	ldr	r3, [pc, #16]	; (80107d8 <_sbrk+0x14>)
 80107c6:	6819      	ldr	r1, [r3, #0]
 80107c8:	4602      	mov	r2, r0
 80107ca:	b909      	cbnz	r1, 80107d0 <_sbrk+0xc>
 80107cc:	4903      	ldr	r1, [pc, #12]	; (80107dc <_sbrk+0x18>)
 80107ce:	6019      	str	r1, [r3, #0]
 80107d0:	6818      	ldr	r0, [r3, #0]
 80107d2:	4402      	add	r2, r0
 80107d4:	601a      	str	r2, [r3, #0]
 80107d6:	4770      	bx	lr
 80107d8:	20004bd8 	.word	0x20004bd8
 80107dc:	2000618c 	.word	0x2000618c

080107e0 <_init>:
 80107e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107e2:	bf00      	nop
 80107e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107e6:	bc08      	pop	{r3}
 80107e8:	469e      	mov	lr, r3
 80107ea:	4770      	bx	lr

080107ec <_fini>:
 80107ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ee:	bf00      	nop
 80107f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107f2:	bc08      	pop	{r3}
 80107f4:	469e      	mov	lr, r3
 80107f6:	4770      	bx	lr
