
ADHOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010bf4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08010d94  08010d94  00020d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011090  08011090  00021090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011098  08011098  00021098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801109c  0801109c  0002109c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c4  20000000  080110a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005e44  200002c4  08011364  000302c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20006108  08011364  00036108  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000302c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034813  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000063f1  00000000  00000000  00064b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001dc8  00000000  00000000  0006aef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001bc0  00000000  00000000  0006ccc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f65a  00000000  00000000  0006e880  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000a64c  00000000  00000000  0007deda  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00088526  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007e74  00000000  00000000  000885a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010d7c 	.word	0x08010d7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	08010d7c 	.word	0x08010d7c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000504:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000528:	2003      	movs	r0, #3
 800052a:	f000 f917 	bl	800075c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052e:	2000      	movs	r0, #0
 8000530:	f00f fd48 	bl	800ffc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000534:	f00f fcf4 	bl	800ff20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_IncTick+0x20>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_IncTick+0x24>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4413      	add	r3, r2
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_IncTick+0x24>)
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000000 	.word	0x20000000
 8000568:	20004b90 	.word	0x20004b90

0800056c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return uwTick;
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <HAL_GetTick+0x14>)
 8000572:	681b      	ldr	r3, [r3, #0]
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20004b90 	.word	0x20004b90

08000584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800058c:	f7ff ffee 	bl	800056c <HAL_GetTick>
 8000590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800059c:	d005      	beq.n	80005aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_Delay+0x40>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4413      	add	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005aa:	bf00      	nop
 80005ac:	f7ff ffde 	bl	800056c <HAL_GetTick>
 80005b0:	4602      	mov	r2, r0
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	1ad2      	subs	r2, r2, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d3f7      	bcc.n	80005ac <HAL_Delay+0x28>
  {
  }
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000000 	.word	0x20000000

080005c8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <NVIC_SetPriorityGrouping+0x44>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fa:	4a04      	ldr	r2, [pc, #16]	; (800060c <NVIC_SetPriorityGrouping+0x44>)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <NVIC_GetPriorityGrouping+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	f003 0307 	and.w	r3, r3, #7
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000636:	4909      	ldr	r1, [pc, #36]	; (800065c <NVIC_EnableIRQ+0x30>)
 8000638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063c:	095b      	lsrs	r3, r3, #5
 800063e:	79fa      	ldrb	r2, [r7, #7]
 8000640:	f002 021f 	and.w	r2, r2, #31
 8000644:	2001      	movs	r0, #1
 8000646:	fa00 f202 	lsl.w	r2, r0, r2
 800064a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000e100 	.word	0xe000e100

08000660 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800066c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	da0b      	bge.n	800068c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	490d      	ldr	r1, [pc, #52]	; (80006ac <NVIC_SetPriority+0x4c>)
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 030f 	and.w	r3, r3, #15
 800067c:	3b04      	subs	r3, #4
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	0112      	lsls	r2, r2, #4
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440b      	add	r3, r1
 8000688:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800068a:	e009      	b.n	80006a0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	4908      	ldr	r1, [pc, #32]	; (80006b0 <NVIC_SetPriority+0x50>)
 800068e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	b2d2      	uxtb	r2, r2
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b089      	sub	sp, #36	; 0x24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	f1c3 0307 	rsb	r3, r3, #7
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	bf28      	it	cs
 80006d2:	2304      	movcs	r3, #4
 80006d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3304      	adds	r3, #4
 80006da:	2b06      	cmp	r3, #6
 80006dc:	d902      	bls.n	80006e4 <NVIC_EncodePriority+0x30>
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3b03      	subs	r3, #3
 80006e2:	e000      	b.n	80006e6 <NVIC_EncodePriority+0x32>
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	2201      	movs	r2, #1
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	1e5a      	subs	r2, r3, #1
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	401a      	ands	r2, r3
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fa:	2101      	movs	r1, #1
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000702:	1e59      	subs	r1, r3, #1
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	4313      	orrs	r3, r2
         );
}
 800070a:	4618      	mov	r0, r3
 800070c:	3724      	adds	r7, #36	; 0x24
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000728:	d301      	bcc.n	800072e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800072a:	2301      	movs	r3, #1
 800072c:	e00f      	b.n	800074e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <SysTick_Config+0x40>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000736:	210f      	movs	r1, #15
 8000738:	f04f 30ff 	mov.w	r0, #4294967295
 800073c:	f7ff ff90 	bl	8000660 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <SysTick_Config+0x40>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <SysTick_Config+0x40>)
 8000748:	2207      	movs	r2, #7
 800074a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	e000e010 	.word	0xe000e010

0800075c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff ff2f 	bl	80005c8 <NVIC_SetPriorityGrouping>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000772:	b580      	push	{r7, lr}
 8000774:	b086      	sub	sp, #24
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	60b9      	str	r1, [r7, #8]
 800077c:	607a      	str	r2, [r7, #4]
 800077e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000784:	f7ff ff44 	bl	8000610 <NVIC_GetPriorityGrouping>
 8000788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	68b9      	ldr	r1, [r7, #8]
 800078e:	6978      	ldr	r0, [r7, #20]
 8000790:	f7ff ff90 	bl	80006b4 <NVIC_EncodePriority>
 8000794:	4602      	mov	r2, r0
 8000796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff5f 	bl	8000660 <NVIC_SetPriority>
}
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff37 	bl	800062c <NVIC_EnableIRQ>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ffa2 	bl	8000718 <SysTick_Config>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d106      	bne.n	80007fc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007ee:	4a09      	ldr	r2, [pc, #36]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80007fa:	e005      	b.n	8000808 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007fc:	4a05      	ldr	r2, [pc, #20]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f023 0304 	bic.w	r3, r3, #4
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	b480      	push	{r7}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
 8000832:	e159      	b.n	8000ae8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000834:	2201      	movs	r2, #1
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	429a      	cmp	r2, r3
 800084e:	f040 8148 	bne.w	8000ae2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d003      	beq.n	8000862 <HAL_GPIO_Init+0x4a>
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2b12      	cmp	r3, #18
 8000860:	d123      	bne.n	80008aa <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	08da      	lsrs	r2, r3, #3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3208      	adds	r2, #8
 800086a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800086e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	220f      	movs	r2, #15
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43db      	mvns	r3, r3
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	4013      	ands	r3, r2
 8000884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	691a      	ldr	r2, [r3, #16]
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	f003 0307 	and.w	r3, r3, #7
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	4313      	orrs	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	08da      	lsrs	r2, r3, #3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3208      	adds	r2, #8
 80008a4:	69b9      	ldr	r1, [r7, #24]
 80008a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2203      	movs	r2, #3
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4013      	ands	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 0203 	and.w	r2, r3, #3
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d00b      	beq.n	80008fe <HAL_GPIO_Init+0xe6>
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d007      	beq.n	80008fe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f2:	2b11      	cmp	r3, #17
 80008f4:	d003      	beq.n	80008fe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b12      	cmp	r3, #18
 80008fc:	d130      	bne.n	8000960 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	2203      	movs	r2, #3
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4013      	ands	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	68da      	ldr	r2, [r3, #12]
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	4313      	orrs	r3, r2
 8000926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	69ba      	ldr	r2, [r7, #24]
 800092c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000934:	2201      	movs	r2, #1
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	4013      	ands	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	091b      	lsrs	r3, r3, #4
 800094a:	f003 0201 	and.w	r2, r3, #1
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4313      	orrs	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	2203      	movs	r2, #3
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	4013      	ands	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	689a      	ldr	r2, [r3, #8]
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	4313      	orrs	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 80a2 	beq.w	8000ae2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4a56      	ldr	r2, [pc, #344]	; (8000afc <HAL_GPIO_Init+0x2e4>)
 80009a4:	4b55      	ldr	r3, [pc, #340]	; (8000afc <HAL_GPIO_Init+0x2e4>)
 80009a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b53      	ldr	r3, [pc, #332]	; (8000afc <HAL_GPIO_Init+0x2e4>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ba:	4a51      	ldr	r2, [pc, #324]	; (8000b00 <HAL_GPIO_Init+0x2e8>)
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	089b      	lsrs	r3, r3, #2
 80009c0:	3302      	adds	r3, #2
 80009c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f003 0303 	and.w	r3, r3, #3
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	220f      	movs	r2, #15
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4013      	ands	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a48      	ldr	r2, [pc, #288]	; (8000b04 <HAL_GPIO_Init+0x2ec>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d019      	beq.n	8000a1a <HAL_GPIO_Init+0x202>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a47      	ldr	r2, [pc, #284]	; (8000b08 <HAL_GPIO_Init+0x2f0>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d013      	beq.n	8000a16 <HAL_GPIO_Init+0x1fe>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a46      	ldr	r2, [pc, #280]	; (8000b0c <HAL_GPIO_Init+0x2f4>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00d      	beq.n	8000a12 <HAL_GPIO_Init+0x1fa>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a45      	ldr	r2, [pc, #276]	; (8000b10 <HAL_GPIO_Init+0x2f8>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d007      	beq.n	8000a0e <HAL_GPIO_Init+0x1f6>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a44      	ldr	r2, [pc, #272]	; (8000b14 <HAL_GPIO_Init+0x2fc>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d101      	bne.n	8000a0a <HAL_GPIO_Init+0x1f2>
 8000a06:	2304      	movs	r3, #4
 8000a08:	e008      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	e006      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a0e:	2303      	movs	r3, #3
 8000a10:	e004      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e002      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a16:	2301      	movs	r3, #1
 8000a18:	e000      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	69fa      	ldr	r2, [r7, #28]
 8000a1e:	f002 0203 	and.w	r2, r2, #3
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	4093      	lsls	r3, r2
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a2c:	4934      	ldr	r1, [pc, #208]	; (8000b00 <HAL_GPIO_Init+0x2e8>)
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a3a:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a5e:	4a2e      	ldr	r2, [pc, #184]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a64:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4013      	ands	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a88:	4a23      	ldr	r2, [pc, #140]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a8e:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ab2:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000adc:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	61fb      	str	r3, [r7, #28]
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	2b0f      	cmp	r3, #15
 8000aec:	f67f aea2 	bls.w	8000834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000af0:	bf00      	nop
 8000af2:	3724      	adds	r7, #36	; 0x24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40013800 	.word	0x40013800
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020400 	.word	0x40020400
 8000b0c:	40020800 	.word	0x40020800
 8000b10:	40020c00 	.word	0x40020c00
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40013c00 	.word	0x40013c00

08000b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	807b      	strh	r3, [r7, #2]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b2c:	787b      	ldrb	r3, [r7, #1]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b32:	887a      	ldrh	r2, [r7, #2]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b38:	e003      	b.n	8000b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	041a      	lsls	r2, r3, #16
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	619a      	str	r2, [r3, #24]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	460b      	mov	r3, r1
 8000b58:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	695a      	ldr	r2, [r3, #20]
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	405a      	eors	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	615a      	str	r2, [r3, #20]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000b72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b74:	b08f      	sub	sp, #60	; 0x3c
 8000b76:	af0a      	add	r7, sp, #40	; 0x28
 8000b78:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d101      	bne.n	8000b88 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	e0f7      	b.n	8000d78 <HAL_PCD_Init+0x206>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f00f faef 	bl	8010174 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 ff68 	bl	8002a70 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	687e      	ldr	r6, [r7, #4]
 8000ba8:	466d      	mov	r5, sp
 8000baa:	f106 0410 	add.w	r4, r6, #16
 8000bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bba:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bbe:	1d33      	adds	r3, r6, #4
 8000bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bc2:	6838      	ldr	r0, [r7, #0]
 8000bc4:	f001 fef2 	bl	80029ac <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 ff5f 	bl	8002a92 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	e04c      	b.n	8000c74 <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	4613      	mov	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	3339      	adds	r3, #57	; 0x39
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	b2d8      	uxtb	r0, r3
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	1a9b      	subs	r3, r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	440b      	add	r3, r1
 8000c00:	3338      	adds	r3, #56	; 0x38
 8000c02:	4602      	mov	r2, r0
 8000c04:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	b298      	uxth	r0, r3
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	1a9b      	subs	r3, r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	440b      	add	r3, r1
 8000c18:	333e      	adds	r3, #62	; 0x3e
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	4613      	mov	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	333b      	adds	r3, #59	; 0x3b
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket = 0U;
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	4613      	mov	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	1a9b      	subs	r3, r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	440b      	add	r3, r1
 8000c40:	3340      	adds	r3, #64	; 0x40
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	3344      	adds	r3, #68	; 0x44
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	440b      	add	r3, r1
 8000c68:	334c      	adds	r3, #76	; 0x4c
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < 15U; i++)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	3301      	adds	r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2b0e      	cmp	r3, #14
 8000c78:	d9af      	bls.n	8000bda <HAL_PCD_Init+0x68>
 }
 
 for (i = 0U; i < 15U; i++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	e05a      	b.n	8000d36 <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	4613      	mov	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	1a9b      	subs	r3, r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	b2d8      	uxtb	r0, r3
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	1a9b      	subs	r3, r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000cac:	4602      	mov	r2, r0
 8000cae:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	b298      	uxth	r0, r3
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	1a9b      	subs	r3, r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	333e      	adds	r3, #62	; 0x3e
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cc8:	6879      	ldr	r1, [r7, #4]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	1a9b      	subs	r3, r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	440b      	add	r3, r1
 8000cec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	1a9b      	subs	r3, r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	440b      	add	r3, r1
 8000d02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	1a9b      	subs	r3, r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	440b      	add	r3, r1
 8000d18:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3340      	adds	r3, #64	; 0x40
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
 for (i = 0U; i < 15U; i++)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3301      	adds	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2b0e      	cmp	r3, #14
 8000d3a:	d9a1      	bls.n	8000c80 <HAL_PCD_Init+0x10e>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	687e      	ldr	r6, [r7, #4]
 8000d44:	466d      	mov	r5, sp
 8000d46:	f106 0410 	add.w	r4, r6, #16
 8000d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d56:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d5a:	1d33      	adds	r3, r6, #4
 8000d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d5e:	6838      	ldr	r0, [r7, #0]
 8000d60:	f001 febe 	bl	8002ae0 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 fedf 	bl	8003b34 <USB_DevDisconnect>
 return HAL_OK;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d80 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d101      	bne.n	8000d96 <HAL_PCD_Start+0x16>
 8000d92:	2302      	movs	r3, #2
 8000d94:	e012      	b.n	8000dbc <HAL_PCD_Start+0x3c>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 feaf 	bl	8003b06 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f001 fe4e 	bl	8002a4e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	623b      	str	r3, [r7, #32]
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
 8000dea:	4b7c      	ldr	r3, [pc, #496]	; (8000fdc <HAL_PCD_IRQHandler+0x218>)
 8000dec:	613b      	str	r3, [r7, #16]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 ff40 	bl	8003c78 <USB_GetMode>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f040 8468 	bne.w	80016d0 <HAL_PCD_IRQHandler+0x90c>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 feac 	bl	8003b62 <USB_ReadInterrupts>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f000 845e 	beq.w	80016ce <HAL_PCD_IRQHandler+0x90a>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fea3 	bl	8003b62 <USB_ReadInterrupts>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d107      	bne.n	8000e36 <HAL_PCD_IRQHandler+0x72>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	6952      	ldr	r2, [r2, #20]
 8000e30:	f002 0202 	and.w	r2, r2, #2
 8000e34:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 fe91 	bl	8003b62 <USB_ReadInterrupts>
 8000e40:	4603      	mov	r3, r0
 8000e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e4a:	f040 80b2 	bne.w	8000fb2 <HAL_PCD_IRQHandler+0x1ee>
    {
      epnum = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 fe98 	bl	8003b8c <USB_ReadDevAllOutEpInterrupt>
 8000e5c:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 8000e5e:	e0a4      	b.n	8000faa <HAL_PCD_IRQHandler+0x1e6>
      {
        if (ep_intr & 0x1U)
 8000e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 8099 	beq.w	8000f9e <HAL_PCD_IRQHandler+0x1da>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f002 feb8 	bl	8003bec <USB_ReadDevOutEPInterrupt>
 8000e7c:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d06b      	beq.n	8000f60 <HAL_PCD_IRQHandler+0x19c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	015a      	lsls	r2, r3, #5
 8000e8c:	6a3b      	ldr	r3, [r7, #32]
 8000e8e:	4413      	add	r3, r2
 8000e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000e94:	461a      	mov	r2, r3
 8000e96:	2301      	movs	r3, #1
 8000e98:	6093      	str	r3, [r2, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d13c      	bne.n	8000f1c <HAL_PCD_IRQHandler+0x158>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	1a9b      	subs	r3, r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	0159      	lsls	r1, r3, #5
 8000eba:	6a3b      	ldr	r3, [r7, #32]
 8000ebc:	440b      	add	r3, r1
 8000ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ec8:	1ad1      	subs	r1, r2, r3
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ece:	4613      	mov	r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4403      	add	r3, r0
 8000ed8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000edc:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	1a9b      	subs	r3, r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000ef0:	6819      	ldr	r1, [r3, #0]
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4403      	add	r3, r0
 8000f00:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4419      	add	r1, r3
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	1a9b      	subs	r3, r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4403      	add	r3, r0
 8000f16:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f1a:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4619      	mov	r1, r3
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f00f f984 	bl	8010230 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d117      	bne.n	8000f60 <HAL_PCD_IRQHandler+0x19c>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d114      	bne.n	8000f60 <HAL_PCD_IRQHandler+0x19c>
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	1a9b      	subs	r3, r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d108      	bne.n	8000f60 <HAL_PCD_IRQHandler+0x19c>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8000f58:	461a      	mov	r2, r3
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	f002 fed0 	bl	8003d00 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00b      	beq.n	8000f82 <HAL_PCD_IRQHandler+0x1be>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f00f f94e 	bl	801020c <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	015a      	lsls	r2, r3, #5
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	4413      	add	r3, r2
 8000f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2308      	movs	r3, #8
 8000f80:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d008      	beq.n	8000f9e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	015a      	lsls	r2, r3, #5
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	4413      	add	r3, r2
 8000f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f98:	461a      	mov	r2, r3
 8000f9a:	2310      	movs	r3, #16
 8000f9c:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa6:	085b      	lsrs	r3, r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8000faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f47f af57 	bne.w	8000e60 <HAL_PCD_IRQHandler+0x9c>
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 fdd3 	bl	8003b62 <USB_ReadInterrupts>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000fc6:	f040 80c5 	bne.w	8001154 <HAL_PCD_IRQHandler+0x390>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 fdf4 	bl	8003bbc <USB_ReadDevAllInEpInterrupt>
 8000fd4:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 8000fda:	e0b7      	b.n	800114c <HAL_PCD_IRQHandler+0x388>
 8000fdc:	0aba9500 	.word	0x0aba9500
      {
        if (ep_intr & 0x1U) /* In ITR */
 8000fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 80aa 	beq.w	8001140 <HAL_PCD_IRQHandler+0x37c>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 fe14 	bl	8003c24 <USB_ReadDevInEPInterrupt>
 8000ffc:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d05a      	beq.n	80010be <HAL_PCD_IRQHandler+0x2fa>
          {
            fifoemptymsk = 0x1U << epnum;
 8001008:	2201      	movs	r2, #1
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001018:	4619      	mov	r1, r3
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	43db      	mvns	r3, r3
 8001026:	4013      	ands	r3, r2
 8001028:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	015a      	lsls	r2, r3, #5
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	4413      	add	r3, r2
 8001032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001036:	461a      	mov	r2, r3
 8001038:	2301      	movs	r3, #1
 800103a:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d11b      	bne.n	800107c <HAL_PCD_IRQHandler+0x2b8>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	3344      	adds	r3, #68	; 0x44
 8001054:	6819      	ldr	r1, [r3, #0]
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800105a:	4613      	mov	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	1a9b      	subs	r3, r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4403      	add	r3, r0
 8001064:	3340      	adds	r3, #64	; 0x40
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4419      	add	r1, r3
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	1a9b      	subs	r3, r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4403      	add	r3, r0
 8001078:	3344      	adds	r3, #68	; 0x44
 800107a:	6019      	str	r1, [r3, #0]
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4619      	mov	r1, r3
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f00f f8ef 	bl	8010266 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d116      	bne.n	80010be <HAL_PCD_IRQHandler+0x2fa>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	2b00      	cmp	r3, #0
 8001094:	d113      	bne.n	80010be <HAL_PCD_IRQHandler+0x2fa>
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800109a:	4613      	mov	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	1a9b      	subs	r3, r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	440b      	add	r3, r1
 80010a4:	334c      	adds	r3, #76	; 0x4c
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d108      	bne.n	80010be <HAL_PCD_IRQHandler+0x2fa>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80010b6:	461a      	mov	r2, r3
 80010b8:	2101      	movs	r1, #1
 80010ba:	f002 fe21 	bl	8003d00 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d008      	beq.n	80010da <HAL_PCD_IRQHandler+0x316>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	015a      	lsls	r2, r3, #5
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	4413      	add	r3, r2
 80010d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010d4:	461a      	mov	r2, r3
 80010d6:	2308      	movs	r3, #8
 80010d8:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0310 	and.w	r3, r3, #16
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <HAL_PCD_IRQHandler+0x332>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	015a      	lsls	r2, r3, #5
 80010e8:	6a3b      	ldr	r3, [r7, #32]
 80010ea:	4413      	add	r3, r2
 80010ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010f0:	461a      	mov	r2, r3
 80010f2:	2310      	movs	r3, #16
 80010f4:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d008      	beq.n	8001112 <HAL_PCD_IRQHandler+0x34e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	015a      	lsls	r2, r3, #5
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	4413      	add	r3, r2
 8001108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800110c:	461a      	mov	r2, r3
 800110e:	2340      	movs	r3, #64	; 0x40
 8001110:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d008      	beq.n	800112e <HAL_PCD_IRQHandler+0x36a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	015a      	lsls	r2, r3, #5
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	4413      	add	r3, r2
 8001124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001128:	461a      	mov	r2, r3
 800112a:	2302      	movs	r3, #2
 800112c:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_PCD_IRQHandler+0x37c>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 8001138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 fcf1 	bl	8001b22 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	3301      	adds	r3, #1
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001148:	085b      	lsrs	r3, r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	2b00      	cmp	r3, #0
 8001150:	f47f af46 	bne.w	8000fe0 <HAL_PCD_IRQHandler+0x21c>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f002 fd02 	bl	8003b62 <USB_ReadInterrupts>
 800115e:	4603      	mov	r3, r0
 8001160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001168:	d115      	bne.n	8001196 <HAL_PCD_IRQHandler+0x3d2>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001170:	461a      	mov	r2, r3
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f023 0301 	bic.w	r3, r3, #1
 800117e:	6053      	str	r3, [r2, #4]
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f00f f8e9 	bl	8010358 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	6812      	ldr	r2, [r2, #0]
 800118e:	6952      	ldr	r2, [r2, #20]
 8001190:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001194:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f002 fce1 	bl	8003b62 <USB_ReadInterrupts>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011aa:	d112      	bne.n	80011d2 <HAL_PCD_IRQHandler+0x40e>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d102      	bne.n	80011c2 <HAL_PCD_IRQHandler+0x3fe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f00f f8a3 	bl	8010308 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	6952      	ldr	r2, [r2, #20]
 80011cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80011d0:	615a      	str	r2, [r3, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fcc3 	bl	8003b62 <USB_ReadInterrupts>
 80011dc:	4603      	mov	r3, r0
 80011de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011e6:	f040 8091 	bne.w	800130c <HAL_PCD_IRQHandler+0x548>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011f0:	461a      	mov	r2, r3
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f023 0301 	bic.w	r3, r3, #1
 80011fe:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2110      	movs	r1, #16
 8001206:	4618      	mov	r0, r3
 8001208:	f001 fd9c 	bl	8002d44 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001210:	e014      	b.n	800123c <HAL_PCD_IRQHandler+0x478>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8001212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001214:	015a      	lsls	r2, r3, #5
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	4413      	add	r3, r2
 800121a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800121e:	461a      	mov	r2, r3
 8001220:	23ff      	movs	r3, #255	; 0xff
 8001222:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	015a      	lsls	r2, r3, #5
 8001228:	6a3b      	ldr	r3, [r7, #32]
 800122a:	4413      	add	r3, r2
 800122c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001230:	461a      	mov	r2, r3
 8001232:	23ff      	movs	r3, #255	; 0xff
 8001234:	6093      	str	r3, [r2, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	3301      	adds	r3, #1
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001242:	429a      	cmp	r2, r3
 8001244:	d8e5      	bhi.n	8001212 <HAL_PCD_IRQHandler+0x44e>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800124c:	461a      	mov	r2, r3
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800125a:	461a      	mov	r2, r3
 800125c:	6a3b      	ldr	r3, [r7, #32]
 800125e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001268:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	2b00      	cmp	r3, #0
 8001270:	d018      	beq.n	80012a4 <HAL_PCD_IRQHandler+0x4e0>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8001272:	6a3b      	ldr	r3, [r7, #32]
 8001274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001278:	461a      	mov	r2, r3
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001284:	f043 030b 	orr.w	r3, r3, #11
 8001288:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001292:	461a      	mov	r2, r3
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	f043 030b 	orr.w	r3, r3, #11
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	e015      	b.n	80012d0 <HAL_PCD_IRQHandler+0x50c>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012aa:	461a      	mov	r2, r3
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	f043 030b 	orr.w	r3, r3, #11
 80012b8:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012c0:	461a      	mov	r2, r3
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	f043 030b 	orr.w	r3, r3, #11
 80012ce:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012d6:	461a      	mov	r2, r3
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80012e4:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	b2d9      	uxtb	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80012f6:	461a      	mov	r2, r3
 80012f8:	f002 fd02 	bl	8003d00 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	6952      	ldr	r2, [r2, #20]
 8001306:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800130a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f002 fc26 	bl	8003b62 <USB_ReadInterrupts>
 8001316:	4603      	mov	r3, r0
 8001318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800131c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001320:	f040 80da 	bne.w	80014d8 <HAL_PCD_IRQHandler+0x714>
    {
      USB_ActivateSetup(hpcd->Instance);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f002 fcb3 	bl	8003c94 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	68d2      	ldr	r2, [r2, #12]
 8001338:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800133c:	60da      	str	r2, [r3, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f001 fd5e 	bl	8002e04 <USB_GetDevSpeed>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10f      	bne.n	800136e <HAL_PCD_IRQHandler+0x5aa>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135a:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	68d2      	ldr	r2, [r2, #12]
 8001366:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	e0a9      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2203      	movs	r2, #3
 8001372:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2240      	movs	r2, #64	; 0x40
 8001378:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 800137a:	f001 f8ad 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 800137e:	6138      	str	r0, [r7, #16]
        
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4a7b      	ldr	r2, [pc, #492]	; (8001570 <HAL_PCD_IRQHandler+0x7ac>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d90c      	bls.n	80013a2 <HAL_PCD_IRQHandler+0x5de>
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4a7a      	ldr	r2, [pc, #488]	; (8001574 <HAL_PCD_IRQHandler+0x7b0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d808      	bhi.n	80013a2 <HAL_PCD_IRQHandler+0x5de>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	68d2      	ldr	r2, [r2, #12]
 800139a:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	e08f      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4a73      	ldr	r2, [pc, #460]	; (8001574 <HAL_PCD_IRQHandler+0x7b0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d90c      	bls.n	80013c4 <HAL_PCD_IRQHandler+0x600>
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4a72      	ldr	r2, [pc, #456]	; (8001578 <HAL_PCD_IRQHandler+0x7b4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d808      	bhi.n	80013c4 <HAL_PCD_IRQHandler+0x600>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	68d2      	ldr	r2, [r2, #12]
 80013bc:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	e07e      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4a6c      	ldr	r2, [pc, #432]	; (8001578 <HAL_PCD_IRQHandler+0x7b4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d90c      	bls.n	80013e6 <HAL_PCD_IRQHandler+0x622>
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4a6b      	ldr	r2, [pc, #428]	; (800157c <HAL_PCD_IRQHandler+0x7b8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d808      	bhi.n	80013e6 <HAL_PCD_IRQHandler+0x622>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	68d2      	ldr	r2, [r2, #12]
 80013de:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	e06d      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4a64      	ldr	r2, [pc, #400]	; (800157c <HAL_PCD_IRQHandler+0x7b8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d90c      	bls.n	8001408 <HAL_PCD_IRQHandler+0x644>
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4a63      	ldr	r2, [pc, #396]	; (8001580 <HAL_PCD_IRQHandler+0x7bc>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d808      	bhi.n	8001408 <HAL_PCD_IRQHandler+0x644>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	68d2      	ldr	r2, [r2, #12]
 8001400:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	e05c      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4a5d      	ldr	r2, [pc, #372]	; (8001580 <HAL_PCD_IRQHandler+0x7bc>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d90c      	bls.n	800142a <HAL_PCD_IRQHandler+0x666>
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4a5c      	ldr	r2, [pc, #368]	; (8001584 <HAL_PCD_IRQHandler+0x7c0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d808      	bhi.n	800142a <HAL_PCD_IRQHandler+0x666>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	68d2      	ldr	r2, [r2, #12]
 8001422:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	e04b      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4a55      	ldr	r2, [pc, #340]	; (8001584 <HAL_PCD_IRQHandler+0x7c0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d90c      	bls.n	800144c <HAL_PCD_IRQHandler+0x688>
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4a54      	ldr	r2, [pc, #336]	; (8001588 <HAL_PCD_IRQHandler+0x7c4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d808      	bhi.n	800144c <HAL_PCD_IRQHandler+0x688>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	68d2      	ldr	r2, [r2, #12]
 8001444:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	e03a      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4a4e      	ldr	r2, [pc, #312]	; (8001588 <HAL_PCD_IRQHandler+0x7c4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d90c      	bls.n	800146e <HAL_PCD_IRQHandler+0x6aa>
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4a4d      	ldr	r2, [pc, #308]	; (800158c <HAL_PCD_IRQHandler+0x7c8>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d808      	bhi.n	800146e <HAL_PCD_IRQHandler+0x6aa>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	68d2      	ldr	r2, [r2, #12]
 8001466:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	e029      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4a46      	ldr	r2, [pc, #280]	; (800158c <HAL_PCD_IRQHandler+0x7c8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d90c      	bls.n	8001490 <HAL_PCD_IRQHandler+0x6cc>
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4a45      	ldr	r2, [pc, #276]	; (8001590 <HAL_PCD_IRQHandler+0x7cc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d808      	bhi.n	8001490 <HAL_PCD_IRQHandler+0x6cc>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	68d2      	ldr	r2, [r2, #12]
 8001488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	e018      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4a3f      	ldr	r2, [pc, #252]	; (8001590 <HAL_PCD_IRQHandler+0x7cc>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d90c      	bls.n	80014b2 <HAL_PCD_IRQHandler+0x6ee>
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4a3e      	ldr	r2, [pc, #248]	; (8001594 <HAL_PCD_IRQHandler+0x7d0>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d808      	bhi.n	80014b2 <HAL_PCD_IRQHandler+0x6ee>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6812      	ldr	r2, [r2, #0]
 80014a8:	68d2      	ldr	r2, [r2, #12]
 80014aa:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	e007      	b.n	80014c2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	68d2      	ldr	r2, [r2, #12]
 80014bc:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 80014c0:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f00e fef7 	bl	80102b6 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	6952      	ldr	r2, [r2, #20]
 80014d2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80014d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 fb40 	bl	8003b62 <USB_ReadInterrupts>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	2b10      	cmp	r3, #16
 80014ea:	d174      	bne.n	80015d6 <HAL_PCD_IRQHandler+0x812>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	6992      	ldr	r2, [r2, #24]
 80014f6:	f022 0210 	bic.w	r2, r2, #16
 80014fa:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 020f 	and.w	r2, r3, #15
 8001508:	4613      	mov	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	1a9b      	subs	r3, r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	0c5b      	lsrs	r3, r3, #17
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	2b02      	cmp	r3, #2
 8001524:	d138      	bne.n	8001598 <HAL_PCD_IRQHandler+0x7d4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d049      	beq.n	80015c6 <HAL_PCD_IRQHandler+0x802>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	68d9      	ldr	r1, [r3, #12]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	b29b      	uxth	r3, r3
 800153c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001540:	b29b      	uxth	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	6a38      	ldr	r0, [r7, #32]
 8001546:	f002 f9b3 	bl	80038b0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001556:	441a      	add	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	699a      	ldr	r2, [r3, #24]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001568:	441a      	add	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	619a      	str	r2, [r3, #24]
 800156e:	e02a      	b.n	80015c6 <HAL_PCD_IRQHandler+0x802>
 8001570:	00d8acbf 	.word	0x00d8acbf
 8001574:	00e4e1bf 	.word	0x00e4e1bf
 8001578:	00f423ff 	.word	0x00f423ff
 800157c:	0106737f 	.word	0x0106737f
 8001580:	011a499f 	.word	0x011a499f
 8001584:	01312cff 	.word	0x01312cff
 8001588:	014ca43f 	.word	0x014ca43f
 800158c:	016e35ff 	.word	0x016e35ff
 8001590:	01a6ab1f 	.word	0x01a6ab1f
 8001594:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	0c5b      	lsrs	r3, r3, #17
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	2b06      	cmp	r3, #6
 80015a2:	d110      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x802>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80015aa:	2208      	movs	r2, #8
 80015ac:	4619      	mov	r1, r3
 80015ae:	6a38      	ldr	r0, [r7, #32]
 80015b0:	f002 f97e 	bl	80038b0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	699a      	ldr	r2, [r3, #24]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c0:	441a      	add	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	6992      	ldr	r2, [r2, #24]
 80015d0:	f042 0210 	orr.w	r2, r2, #16
 80015d4:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fac1 	bl	8003b62 <USB_ReadInterrupts>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d10a      	bne.n	8001600 <HAL_PCD_IRQHandler+0x83c>
    {
      HAL_PCD_SOFCallback(hpcd);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f00e fe55 	bl	801029a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	6952      	ldr	r2, [r2, #20]
 80015fa:	f002 0208 	and.w	r2, r2, #8
 80015fe:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f002 faac 	bl	8003b62 <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001610:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001614:	d10d      	bne.n	8001632 <HAL_PCD_IRQHandler+0x86e>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4619      	mov	r1, r3
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f00e febb 	bl	8010398 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	6952      	ldr	r2, [r2, #20]
 800162c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001630:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f002 fa93 	bl	8003b62 <USB_ReadInterrupts>
 800163c:	4603      	mov	r3, r0
 800163e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001646:	d10d      	bne.n	8001664 <HAL_PCD_IRQHandler+0x8a0>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	b2db      	uxtb	r3, r3
 800164c:	4619      	mov	r1, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f00e fe90 	bl	8010374 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	6952      	ldr	r2, [r2, #20]
 800165e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001662:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f002 fa7a 	bl	8003b62 <USB_ReadInterrupts>
 800166e:	4603      	mov	r3, r0
 8001670:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001678:	d10a      	bne.n	8001690 <HAL_PCD_IRQHandler+0x8cc>
    {
      HAL_PCD_ConnectCallback(hpcd);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f00e fe9e 	bl	80103bc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	6952      	ldr	r2, [r2, #20]
 800168a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800168e:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f002 fa64 	bl	8003b62 <USB_ReadInterrupts>
 800169a:	4603      	mov	r3, r0
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d115      	bne.n	80016d0 <HAL_PCD_IRQHandler+0x90c>
    {
      temp = hpcd->Instance->GOTGINT;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <HAL_PCD_IRQHandler+0x8f8>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f00e fe8e 	bl	80103d8 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	6851      	ldr	r1, [r2, #4]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	e000      	b.n	80016d0 <HAL_PCD_IRQHandler+0x90c>
      return;
 80016ce:	bf00      	nop
    }
  }
}
 80016d0:	3730      	adds	r7, #48	; 0x30
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop

080016d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_PCD_SetAddress+0x1a>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e00f      	b.n	8001712 <HAL_PCD_SetAddress+0x3a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f002 f9d9 	bl	8003aba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	4608      	mov	r0, r1
 8001724:	4611      	mov	r1, r2
 8001726:	461a      	mov	r2, r3
 8001728:	4603      	mov	r3, r0
 800172a:	70fb      	strb	r3, [r7, #3]
 800172c:	460b      	mov	r3, r1
 800172e:	803b      	strh	r3, [r7, #0]
 8001730:	4613      	mov	r3, r2
 8001732:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8001738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800173c:	2b00      	cmp	r3, #0
 800173e:	da0b      	bge.n	8001758 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	1a9b      	subs	r3, r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	3338      	adds	r3, #56	; 0x38
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	e00b      	b.n	8001770 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800175e:	4613      	mov	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	1a9b      	subs	r3, r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001776:	b2da      	uxtb	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800177c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	09db      	lsrs	r3, r3, #7
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 800178c:	883a      	ldrh	r2, [r7, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	78ba      	ldrb	r2, [r7, #2]
 8001796:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	785b      	ldrb	r3, [r3, #1]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 80017aa:	78bb      	ldrb	r3, [r7, #2]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d102      	bne.n	80017b6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	711a      	strb	r2, [r3, #4]
  }
  
  __HAL_LOCK(hpcd); 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_PCD_EP_Open+0xaa>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e00e      	b.n	80017e2 <HAL_PCD_EP_Open+0xc8>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68f9      	ldr	r1, [r7, #12]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f001 fb4b 	bl	8002e6e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 80017e0:	7afb      	ldrb	r3, [r7, #11]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80017f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	da0b      	bge.n	8001816 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	1a9b      	subs	r3, r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	3338      	adds	r3, #56	; 0x38
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e00b      	b.n	800182e <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800181c:	4613      	mov	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001834:	b2da      	uxtb	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800183a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	09db      	lsrs	r3, r3, #7
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_PCD_EP_Close+0x6e>
 8001854:	2302      	movs	r3, #2
 8001856:	e00e      	b.n	8001876 <HAL_PCD_EP_Close+0x8c>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68f9      	ldr	r1, [r7, #12]
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fb8a 	bl	8002f80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	460b      	mov	r3, r1
 800188c:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800188e:	7afb      	ldrb	r3, [r7, #11]
 8001890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2200      	movs	r2, #0
 80018bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 80018be:	7afb      	ldrb	r3, [r7, #11]
 80018c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d102      	bne.n	80018d8 <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 80018d8:	7afb      	ldrb	r3, [r7, #11]
 80018da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	6979      	ldr	r1, [r7, #20]
 80018f0:	f001 fe4a 	bl	8003588 <USB_EP0StartXfer>
 80018f4:	e008      	b.n	8001908 <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	6979      	ldr	r1, [r7, #20]
 8001904:	f001 fbfe 	bl	8003104 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	f003 020f 	and.w	r2, r3, #15
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b29b      	uxth	r3, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	460b      	mov	r3, r1
 8001952:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001954:	7afb      	ldrb	r3, [r7, #11]
 8001956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800195a:	4613      	mov	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	3338      	adds	r3, #56	; 0x38
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2201      	movs	r2, #1
 8001980:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8001982:	7afb      	ldrb	r3, [r7, #11]
 8001984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001988:	b2da      	uxtb	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d102      	bne.n	800199c <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 800199c:	7afb      	ldrb	r3, [r7, #11]
 800199e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	6979      	ldr	r1, [r7, #20]
 80019b4:	f001 fde8 	bl	8003588 <USB_EP0StartXfer>
 80019b8:	e008      	b.n	80019cc <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	6979      	ldr	r1, [r7, #20]
 80019c8:	f001 fb9c 	bl	8003104 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 80019e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	da0b      	bge.n	8001a02 <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019f0:	4613      	mov	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	3338      	adds	r3, #56	; 0x38
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e009      	b.n	8001a16 <HAL_PCD_EP_SetStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001a28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	09db      	lsrs	r3, r3, #7
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <HAL_PCD_EP_SetStall+0x70>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e01e      	b.n	8001a84 <HAL_PCD_EP_SetStall+0xae>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68f9      	ldr	r1, [r7, #12]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f001 ff52 	bl	80038fe <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10a      	bne.n	8001a7a <HAL_PCD_EP_SetStall+0xa4>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	b2d9      	uxtb	r1, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001a74:	461a      	mov	r2, r3
 8001a76:	f002 f943 	bl	8003d00 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8001a98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	da0b      	bge.n	8001ab8 <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	3338      	adds	r3, #56	; 0x38
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	e009      	b.n	8001acc <HAL_PCD_EP_ClrStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	4613      	mov	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	09db      	lsrs	r3, r3, #7
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_PCD_EP_ClrStall+0x70>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e00e      	b.n	8001b1a <HAL_PCD_EP_ClrStall+0x8e>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68f9      	ldr	r1, [r7, #12]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f001 ff68 	bl	80039e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b08a      	sub	sp, #40	; 0x28
 8001b26:	af02      	add	r7, sp, #8
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	3338      	adds	r3, #56	; 0x38
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d202      	bcs.n	8001b68 <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3U) / 4U;
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	3303      	adds	r3, #3
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	61bb      	str	r3, [r7, #24]
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b70:	e02b      	b.n	8001bca <PCD_WriteEmptyTxFifo+0xa8>
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d202      	bcs.n	8001b8e <PCD_WriteEmptyTxFifo+0x6c>
    {
      len = ep->maxpacket;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3303      	adds	r3, #3
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	68d9      	ldr	r1, [r3, #12]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	b298      	uxth	r0, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	4603      	mov	r3, r0
 8001bac:	6978      	ldr	r0, [r7, #20]
 8001bae:	f001 fe4a 	bl	8003846 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	441a      	add	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	699a      	ldr	r2, [r3, #24]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	441a      	add	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	619a      	str	r2, [r3, #24]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d909      	bls.n	8001bf4 <PCD_WriteEmptyTxFifo+0xd2>
          (ep->xfer_count < ep->xfer_len) &&
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	699a      	ldr	r2, [r3, #24]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	695b      	ldr	r3, [r3, #20]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d203      	bcs.n	8001bf4 <PCD_WriteEmptyTxFifo+0xd2>
            (ep->xfer_len != 0U))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	695b      	ldr	r3, [r3, #20]
          (ep->xfer_count < ep->xfer_len) &&
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1be      	bne.n	8001b72 <PCD_WriteEmptyTxFifo+0x50>
  }
  
  if(len <= 0U)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d110      	bne.n	8001c1c <PCD_WriteEmptyTxFifo+0xfa>
  {
    fifoemptymsk = 0x1U << epnum;
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b085      	sub	sp, #20
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	70fb      	strb	r3, [r7, #3]
 8001c32:	4613      	mov	r3, r2
 8001c34:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d107      	bne.n	8001c5c <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	883a      	ldrh	r2, [r7, #0]
 8001c52:	0411      	lsls	r1, r2, #16
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28
 8001c5a:	e028      	b.n	8001cae <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	4413      	add	r3, r2
 8001c68:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	e00d      	b.n	8001c8c <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	3340      	adds	r3, #64	; 0x40
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	0c1b      	lsrs	r3, r3, #16
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	4413      	add	r3, r2
 8001c84:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dbec      	blt.n	8001c70 <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6819      	ldr	r1, [r3, #0]
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	883a      	ldrh	r2, [r7, #0]
 8001ca0:	0410      	lsls	r0, r2, #16
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	4302      	orrs	r2, r0
 8001ca6:	3340      	adds	r3, #64	; 0x40
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	887a      	ldrh	r2, [r7, #2]
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e22d      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d075      	beq.n	8001dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cfe:	4ba3      	ldr	r3, [pc, #652]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d00c      	beq.n	8001d24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0a:	4ba0      	ldr	r3, [pc, #640]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d112      	bne.n	8001d3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d16:	4b9d      	ldr	r3, [pc, #628]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d22:	d10b      	bne.n	8001d3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	4b99      	ldr	r3, [pc, #612]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d05b      	beq.n	8001de8 <HAL_RCC_OscConfig+0x108>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d157      	bne.n	8001de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e208      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	d106      	bne.n	8001d54 <HAL_RCC_OscConfig+0x74>
 8001d46:	4a91      	ldr	r2, [pc, #580]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	4b90      	ldr	r3, [pc, #576]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e01d      	b.n	8001d90 <HAL_RCC_OscConfig+0xb0>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x98>
 8001d5e:	4a8b      	ldr	r2, [pc, #556]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	4b8a      	ldr	r3, [pc, #552]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4a88      	ldr	r2, [pc, #544]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	4b87      	ldr	r3, [pc, #540]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e00b      	b.n	8001d90 <HAL_RCC_OscConfig+0xb0>
 8001d78:	4a84      	ldr	r2, [pc, #528]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d7a:	4b84      	ldr	r3, [pc, #528]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4a81      	ldr	r2, [pc, #516]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	4b81      	ldr	r3, [pc, #516]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d013      	beq.n	8001dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7fe fbe8 	bl	800056c <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da0:	f7fe fbe4 	bl	800056c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e1cd      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0xc0>
 8001dbe:	e014      	b.n	8001dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fbd4 	bl	800056c <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7fe fbd0 	bl	800056c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e1b9      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dda:	4b6c      	ldr	r3, [pc, #432]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0xe8>
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d063      	beq.n	8001ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001df6:	4b65      	ldr	r3, [pc, #404]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00b      	beq.n	8001e1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e02:	4b62      	ldr	r3, [pc, #392]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d11c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e0e:	4b5f      	ldr	r3, [pc, #380]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d116      	bne.n	8001e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1a:	4b5c      	ldr	r3, [pc, #368]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_RCC_OscConfig+0x152>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d001      	beq.n	8001e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e18d      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e32:	4956      	ldr	r1, [pc, #344]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	4b55      	ldr	r3, [pc, #340]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e46:	e03a      	b.n	8001ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d020      	beq.n	8001e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e50:	4b4f      	ldr	r3, [pc, #316]	; (8001f90 <HAL_RCC_OscConfig+0x2b0>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e56:	f7fe fb89 	bl	800056c <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e5e:	f7fe fb85 	bl	800056c <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e16e      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7c:	4943      	ldr	r1, [pc, #268]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	4b43      	ldr	r3, [pc, #268]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]
 8001e90:	e015      	b.n	8001ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e92:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <HAL_RCC_OscConfig+0x2b0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7fe fb68 	bl	800056c <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea0:	f7fe fb64 	bl	800056c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e14d      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb2:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d030      	beq.n	8001f2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d016      	beq.n	8001f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed2:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <HAL_RCC_OscConfig+0x2b4>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed8:	f7fe fb48 	bl	800056c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7fe fb44 	bl	800056c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e12d      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x200>
 8001efe:	e015      	b.n	8001f2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f00:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <HAL_RCC_OscConfig+0x2b4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f06:	f7fe fb31 	bl	800056c <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f0e:	f7fe fb2d 	bl	800056c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e116      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80a0 	beq.w	800207a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10f      	bne.n	8001f6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f58:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f66:	2301      	movs	r3, #1
 8001f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_OscConfig+0x2b8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d121      	bne.n	8001fba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f76:	4a08      	ldr	r2, [pc, #32]	; (8001f98 <HAL_RCC_OscConfig+0x2b8>)
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <HAL_RCC_OscConfig+0x2b8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f82:	f7fe faf3 	bl	800056c <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	e011      	b.n	8001fae <HAL_RCC_OscConfig+0x2ce>
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	42470000 	.word	0x42470000
 8001f94:	42470e80 	.word	0x42470e80
 8001f98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9c:	f7fe fae6 	bl	800056c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e0cf      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fae:	4b6a      	ldr	r3, [pc, #424]	; (8002158 <HAL_RCC_OscConfig+0x478>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d106      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
 8001fc2:	4a66      	ldr	r2, [pc, #408]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fc4:	4b65      	ldr	r3, [pc, #404]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001fce:	e01c      	b.n	800200a <HAL_RCC_OscConfig+0x32a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d10c      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x312>
 8001fd8:	4a60      	ldr	r2, [pc, #384]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fda:	4b60      	ldr	r3, [pc, #384]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fde:	f043 0304 	orr.w	r3, r3, #4
 8001fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe4:	4a5d      	ldr	r2, [pc, #372]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff0:	e00b      	b.n	800200a <HAL_RCC_OscConfig+0x32a>
 8001ff2:	4a5a      	ldr	r2, [pc, #360]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001ff4:	4b59      	ldr	r3, [pc, #356]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	4a57      	ldr	r2, [pc, #348]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8002000:	4b56      	ldr	r3, [pc, #344]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	f023 0304 	bic.w	r3, r3, #4
 8002008:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d015      	beq.n	800203e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002012:	f7fe faab 	bl	800056c <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	e00a      	b.n	8002030 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7fe faa7 	bl	800056c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	f241 3288 	movw	r2, #5000	; 0x1388
 8002028:	4293      	cmp	r3, r2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e08e      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002030:	4b4a      	ldr	r3, [pc, #296]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8002032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0ee      	beq.n	800201a <HAL_RCC_OscConfig+0x33a>
 800203c:	e014      	b.n	8002068 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203e:	f7fe fa95 	bl	800056c <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7fe fa91 	bl	800056c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f241 3288 	movw	r2, #5000	; 0x1388
 8002054:	4293      	cmp	r3, r2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e078      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205c:	4b3f      	ldr	r3, [pc, #252]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ee      	bne.n	8002046 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002068:	7dfb      	ldrb	r3, [r7, #23]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d105      	bne.n	800207a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206e:	4a3b      	ldr	r2, [pc, #236]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8002070:	4b3a      	ldr	r3, [pc, #232]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002078:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d064      	beq.n	800214c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b08      	cmp	r3, #8
 800208c:	d05c      	beq.n	8002148 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d141      	bne.n	800211a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002096:	4b32      	ldr	r3, [pc, #200]	; (8002160 <HAL_RCC_OscConfig+0x480>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7fe fa66 	bl	800056c <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a4:	f7fe fa62 	bl	800056c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e04b      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	4b29      	ldr	r3, [pc, #164]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020c2:	4926      	ldr	r1, [pc, #152]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69da      	ldr	r2, [r3, #28]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	019b      	lsls	r3, r3, #6
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	085b      	lsrs	r3, r3, #1
 80020dc:	3b01      	subs	r3, #1
 80020de:	041b      	lsls	r3, r3, #16
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	061b      	lsls	r3, r3, #24
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ec:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <HAL_RCC_OscConfig+0x480>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7fe fa3b 	bl	800056c <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fa:	f7fe fa37 	bl	800056c <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e020      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x41a>
 8002118:	e018      	b.n	800214c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_RCC_OscConfig+0x480>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7fe fa24 	bl	800056c <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002128:	f7fe fa20 	bl	800056c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e009      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x448>
 8002146:	e001      	b.n	800214c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40007000 	.word	0x40007000
 800215c:	40023800 	.word	0x40023800
 8002160:	42470060 	.word	0x42470060

08002164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0ca      	b.n	800230e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002178:	4b67      	ldr	r3, [pc, #412]	; (8002318 <HAL_RCC_ClockConfig+0x1b4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 020f 	and.w	r2, r3, #15
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d20c      	bcs.n	80021a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b64      	ldr	r3, [pc, #400]	; (8002318 <HAL_RCC_ClockConfig+0x1b4>)
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b62      	ldr	r3, [pc, #392]	; (8002318 <HAL_RCC_ClockConfig+0x1b4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 020f 	and.w	r2, r3, #15
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0b6      	b.n	800230e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d020      	beq.n	80021ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b8:	4a58      	ldr	r2, [pc, #352]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80021ba:	4b58      	ldr	r3, [pc, #352]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021d0:	4a52      	ldr	r2, [pc, #328]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80021d2:	4b52      	ldr	r3, [pc, #328]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021dc:	494f      	ldr	r1, [pc, #316]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80021de:	4b4f      	ldr	r3, [pc, #316]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d044      	beq.n	8002284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	4b46      	ldr	r3, [pc, #280]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d119      	bne.n	8002242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e07d      	b.n	800230e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d003      	beq.n	8002222 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800221e:	2b03      	cmp	r3, #3
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002222:	4b3e      	ldr	r3, [pc, #248]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e06d      	b.n	800230e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002232:	4b3a      	ldr	r3, [pc, #232]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e065      	b.n	800230e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002242:	4936      	ldr	r1, [pc, #216]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	4b35      	ldr	r3, [pc, #212]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f023 0203 	bic.w	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4313      	orrs	r3, r2
 8002252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002254:	f7fe f98a 	bl	800056c <HAL_GetTick>
 8002258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225a:	e00a      	b.n	8002272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225c:	f7fe f986 	bl	800056c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	f241 3288 	movw	r2, #5000	; 0x1388
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e04d      	b.n	800230e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 020c 	and.w	r2, r3, #12
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	429a      	cmp	r2, r3
 8002282:	d1eb      	bne.n	800225c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002284:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCC_ClockConfig+0x1b4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 020f 	and.w	r2, r3, #15
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d90c      	bls.n	80022ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_RCC_ClockConfig+0x1b4>)
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_RCC_ClockConfig+0x1b4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 020f 	and.w	r2, r3, #15
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e030      	b.n	800230e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b8:	4918      	ldr	r1, [pc, #96]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d6:	4911      	ldr	r1, [pc, #68]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	4b10      	ldr	r3, [pc, #64]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ea:	f000 f81d 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80022ee:	4601      	mov	r1, r0
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_RCC_ClockConfig+0x1b8>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	4a09      	ldr	r2, [pc, #36]	; (8002320 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	5cd3      	ldrb	r3, [r2, r3]
 80022fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002302:	4a08      	ldr	r2, [pc, #32]	; (8002324 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002306:	2000      	movs	r0, #0
 8002308:	f00d fe5c 	bl	800ffc4 <HAL_InitTick>

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40023c00 	.word	0x40023c00
 800231c:	40023800 	.word	0x40023800
 8002320:	08010f6c 	.word	0x08010f6c
 8002324:	200000bc 	.word	0x200000bc

08002328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800232c:	b08f      	sub	sp, #60	; 0x3c
 800232e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002334:	2300      	movs	r3, #0
 8002336:	637b      	str	r3, [r7, #52]	; 0x34
 8002338:	2300      	movs	r3, #0
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002340:	4b62      	ldr	r3, [pc, #392]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b04      	cmp	r3, #4
 800234a:	d007      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x34>
 800234c:	2b08      	cmp	r3, #8
 800234e:	d008      	beq.n	8002362 <HAL_RCC_GetSysClockFreq+0x3a>
 8002350:	2b00      	cmp	r3, #0
 8002352:	f040 80b2 	bne.w	80024ba <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002356:	4b5e      	ldr	r3, [pc, #376]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002358:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800235a:	e0b1      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800235c:	4b5d      	ldr	r3, [pc, #372]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002360:	e0ae      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002362:	4b5a      	ldr	r3, [pc, #360]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800236c:	4b57      	ldr	r3, [pc, #348]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d04e      	beq.n	8002416 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002378:	4b54      	ldr	r3, [pc, #336]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	099b      	lsrs	r3, r3, #6
 800237e:	f04f 0400 	mov.w	r4, #0
 8002382:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	ea01 0103 	and.w	r1, r1, r3
 800238e:	ea02 0204 	and.w	r2, r2, r4
 8002392:	460b      	mov	r3, r1
 8002394:	4614      	mov	r4, r2
 8002396:	0160      	lsls	r0, r4, #5
 8002398:	6278      	str	r0, [r7, #36]	; 0x24
 800239a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800239c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80023a0:	6278      	str	r0, [r7, #36]	; 0x24
 80023a2:	015b      	lsls	r3, r3, #5
 80023a4:	623b      	str	r3, [r7, #32]
 80023a6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80023aa:	1a5b      	subs	r3, r3, r1
 80023ac:	eb64 0402 	sbc.w	r4, r4, r2
 80023b0:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80023b4:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80023b8:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80023bc:	ebb8 0803 	subs.w	r8, r8, r3
 80023c0:	eb69 0904 	sbc.w	r9, r9, r4
 80023c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80023dc:	eb18 0801 	adds.w	r8, r8, r1
 80023e0:	eb49 0902 	adc.w	r9, r9, r2
 80023e4:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80023fc:	4640      	mov	r0, r8
 80023fe:	4649      	mov	r1, r9
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002402:	f04f 0400 	mov.w	r4, #0
 8002406:	461a      	mov	r2, r3
 8002408:	4623      	mov	r3, r4
 800240a:	f7fd fef1 	bl	80001f0 <__aeabi_uldivmod>
 800240e:	4603      	mov	r3, r0
 8002410:	460c      	mov	r4, r1
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
 8002414:	e043      	b.n	800249e <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002416:	4b2d      	ldr	r3, [pc, #180]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	099b      	lsrs	r3, r3, #6
 800241c:	f04f 0400 	mov.w	r4, #0
 8002420:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	ea01 0103 	and.w	r1, r1, r3
 800242c:	ea02 0204 	and.w	r2, r2, r4
 8002430:	460b      	mov	r3, r1
 8002432:	4614      	mov	r4, r2
 8002434:	0160      	lsls	r0, r4, #5
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	015b      	lsls	r3, r3, #5
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002448:	1a5b      	subs	r3, r3, r1
 800244a:	eb64 0402 	sbc.w	r4, r4, r2
 800244e:	01a6      	lsls	r6, r4, #6
 8002450:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002454:	019d      	lsls	r5, r3, #6
 8002456:	1aed      	subs	r5, r5, r3
 8002458:	eb66 0604 	sbc.w	r6, r6, r4
 800245c:	00f3      	lsls	r3, r6, #3
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002466:	607b      	str	r3, [r7, #4]
 8002468:	00eb      	lsls	r3, r5, #3
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002470:	186d      	adds	r5, r5, r1
 8002472:	eb46 0602 	adc.w	r6, r6, r2
 8002476:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800247a:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800247e:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002482:	4655      	mov	r5, sl
 8002484:	465e      	mov	r6, fp
 8002486:	4628      	mov	r0, r5
 8002488:	4631      	mov	r1, r6
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	f04f 0400 	mov.w	r4, #0
 8002490:	461a      	mov	r2, r3
 8002492:	4623      	mov	r3, r4
 8002494:	f7fd feac 	bl	80001f0 <__aeabi_uldivmod>
 8002498:	4603      	mov	r3, r0
 800249a:	460c      	mov	r4, r1
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	0c1b      	lsrs	r3, r3, #16
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	3301      	adds	r3, #1
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80024ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024b8:	e002      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	373c      	adds	r7, #60	; 0x3c
 80024c6:	46bd      	mov	sp, r7
 80024c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024cc:	40023800 	.word	0x40023800
 80024d0:	00f42400 	.word	0x00f42400
 80024d4:	007a1200 	.word	0x007a1200

080024d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_RCC_GetHCLKFreq+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	200000bc 	.word	0x200000bc

080024f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024f4:	f7ff fff0 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 80024f8:	4601      	mov	r1, r0
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	0b5b      	lsrs	r3, r3, #13
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4a03      	ldr	r2, [pc, #12]	; (8002514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002506:	5cd3      	ldrb	r3, [r2, r3]
 8002508:	fa21 f303 	lsr.w	r3, r1, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40023800 	.word	0x40023800
 8002514:	08010f7c 	.word	0x08010f7c

08002518 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	220f      	movs	r2, #15
 8002526:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_RCC_GetClockConfig+0x5c>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0203 	and.w	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_RCC_GetClockConfig+0x5c>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_RCC_GetClockConfig+0x5c>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_RCC_GetClockConfig+0x5c>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	08db      	lsrs	r3, r3, #3
 8002552:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <HAL_RCC_GetClockConfig+0x60>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 020f 	and.w	r2, r3, #15
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	601a      	str	r2, [r3, #0]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	40023c00 	.word	0x40023c00

0800257c <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e01d      	b.n	80025ca <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f815 	bl	80025d2 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f000 f95e 	bl	800287c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	68d2      	ldr	r2, [r2, #12]
 80025f8:	f042 0201 	orr.w	r2, r2, #1
 80025fc:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	f042 0201 	orr.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d122      	bne.n	8002678 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b02      	cmp	r3, #2
 800263e:	d11b      	bne.n	8002678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0202 	mvn.w	r2, #2
 8002648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8ee 	bl	8002840 <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f8e0 	bl	800282c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f8f1 	bl	8002854 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b04      	cmp	r3, #4
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b04      	cmp	r3, #4
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0204 	mvn.w	r2, #4
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f8c4 	bl	8002840 <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f8b6 	bl	800282c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f8c7 	bl	8002854 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0208 	mvn.w	r2, #8
 80026f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2204      	movs	r2, #4
 80026f6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f89a 	bl	8002840 <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f88c 	bl	800282c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f89d 	bl	8002854 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b10      	cmp	r3, #16
 800272c:	d122      	bne.n	8002774 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b10      	cmp	r3, #16
 800273a:	d11b      	bne.n	8002774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0210 	mvn.w	r2, #16
 8002744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2208      	movs	r2, #8
 800274a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f870 	bl	8002840 <HAL_TIM_IC_CaptureCallback>
 8002760:	e005      	b.n	800276e <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f862 	bl	800282c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f873 	bl	8002854 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10e      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d107      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0201 	mvn.w	r2, #1
 8002798:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f00d fba8 	bl	800fef0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b80      	cmp	r3, #128	; 0x80
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b8:	2b80      	cmp	r3, #128	; 0x80
 80027ba:	d107      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8e6 	bl	8002998 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b40      	cmp	r3, #64	; 0x40
 80027d8:	d10e      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e4:	2b40      	cmp	r3, #64	; 0x40
 80027e6:	d107      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f838 	bl	8002868 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b20      	cmp	r3, #32
 8002804:	d10e      	bne.n	8002824 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b20      	cmp	r3, #32
 8002812:	d107      	bne.n	8002824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0220 	mvn.w	r2, #32
 800281c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8b0 	bl	8002984 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a35      	ldr	r2, [pc, #212]	; (8002968 <TIM_Base_SetConfig+0xec>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00f      	beq.n	80028b8 <TIM_Base_SetConfig+0x3c>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289e:	d00b      	beq.n	80028b8 <TIM_Base_SetConfig+0x3c>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a32      	ldr	r2, [pc, #200]	; (800296c <TIM_Base_SetConfig+0xf0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d007      	beq.n	80028b8 <TIM_Base_SetConfig+0x3c>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a31      	ldr	r2, [pc, #196]	; (8002970 <TIM_Base_SetConfig+0xf4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d003      	beq.n	80028b8 <TIM_Base_SetConfig+0x3c>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a30      	ldr	r2, [pc, #192]	; (8002974 <TIM_Base_SetConfig+0xf8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d101      	bne.n	80028bc <TIM_Base_SetConfig+0x40>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <TIM_Base_SetConfig+0x42>
 80028bc:	2300      	movs	r3, #0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a24      	ldr	r2, [pc, #144]	; (8002968 <TIM_Base_SetConfig+0xec>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d01b      	beq.n	8002914 <TIM_Base_SetConfig+0x98>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e2:	d017      	beq.n	8002914 <TIM_Base_SetConfig+0x98>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a21      	ldr	r2, [pc, #132]	; (800296c <TIM_Base_SetConfig+0xf0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d013      	beq.n	8002914 <TIM_Base_SetConfig+0x98>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a20      	ldr	r2, [pc, #128]	; (8002970 <TIM_Base_SetConfig+0xf4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00f      	beq.n	8002914 <TIM_Base_SetConfig+0x98>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a1f      	ldr	r2, [pc, #124]	; (8002974 <TIM_Base_SetConfig+0xf8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00b      	beq.n	8002914 <TIM_Base_SetConfig+0x98>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a1e      	ldr	r2, [pc, #120]	; (8002978 <TIM_Base_SetConfig+0xfc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d007      	beq.n	8002914 <TIM_Base_SetConfig+0x98>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a1d      	ldr	r2, [pc, #116]	; (800297c <TIM_Base_SetConfig+0x100>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d003      	beq.n	8002914 <TIM_Base_SetConfig+0x98>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <TIM_Base_SetConfig+0x104>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d101      	bne.n	8002918 <TIM_Base_SetConfig+0x9c>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <TIM_Base_SetConfig+0x9e>
 8002918:	2300      	movs	r3, #0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <TIM_Base_SetConfig+0xec>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d103      	bne.n	8002956 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	615a      	str	r2, [r3, #20]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	40010000 	.word	0x40010000
 800296c:	40000400 	.word	0x40000400
 8002970:	40000800 	.word	0x40000800
 8002974:	40000c00 	.word	0x40000c00
 8002978:	40014000 	.word	0x40014000
 800297c:	40014400 	.word	0x40014400
 8002980:	40014800 	.word	0x40014800

08002984 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029ac:	b084      	sub	sp, #16
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	f107 0014 	add.w	r0, r7, #20
 80029ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d120      	bne.n	8002a06 <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80029d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 80029ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d105      	bne.n	80029fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f001 f9c4 	bl	8003d8c <USB_CoreReset>
 8002a04:	e00c      	b.n	8002a20 <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f001 f9ba 	bl	8003d8c <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a1e:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d10b      	bne.n	8002a3e <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f043 0206 	orr.w	r2, r3, #6
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f043 0220 	orr.w	r2, r3, #32
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a4a:	b004      	add	sp, #16
 8002a4c:	4770      	bx	lr

08002a4e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f023 0201 	bic.w	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d106      	bne.n	8002abe <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	60da      	str	r2, [r3, #12]
 8002abc:	e008      	b.n	8002ad0 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 8002ad0:	2032      	movs	r0, #50	; 0x32
 8002ad2:	f7fd fd57 	bl	8000584 <HAL_Delay>
  
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	f107 001c 	add.w	r0, r7, #28
 8002aee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
 8002af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d106      	bne.n	8002b0a <USB_DevInit+0x2a>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	639a      	str	r2, [r3, #56]	; 0x38
 8002b08:	e005      	b.n	8002b16 <USB_DevInit+0x36>
  }
  else
  {
    /* Enable VBUS */
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2300      	movs	r3, #0
 8002b20:	6013      	str	r3, [r2, #0]
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b28:	461a      	mov	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6013      	str	r3, [r2, #0]
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10c      	bne.n	8002b54 <USB_DevInit+0x74>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d104      	bne.n	8002b4a <USB_DevInit+0x6a>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8002b40:	2100      	movs	r1, #0
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f946 	bl	8002dd4 <USB_SetDevSpeed>
 8002b48:	e008      	b.n	8002b5c <USB_DevInit+0x7c>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f941 	bl	8002dd4 <USB_SetDevSpeed>
 8002b52:	e003      	b.n	8002b5c <USB_DevInit+0x7c>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002b54:	2103      	movs	r1, #3
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f93c 	bl	8002dd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8002b5c:	2110      	movs	r1, #16
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f8f0 	bl	8002d44 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f913 	bl	8002d90 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b70:	461a      	mov	r2, r3
 8002b72:	2300      	movs	r3, #0
 8002b74:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2300      	movs	r3, #0
 8002b80:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8e:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b96:	461a      	mov	r2, r3
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61d3      	str	r3, [r2, #28]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	e034      	b.n	8002c0c <USB_DevInit+0x12c>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bb8:	d10a      	bne.n	8002bd0 <USB_DevInit+0xf0>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e008      	b.n	8002be2 <USB_DevInit+0x102>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2300      	movs	r3, #0
 8002be0:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c00:	461a      	mov	r2, r3
 8002c02:	23ff      	movs	r3, #255	; 0xff
 8002c04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d8c6      	bhi.n	8002ba2 <USB_DevInit+0xc2>
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e034      	b.n	8002c84 <USB_DevInit+0x1a4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c30:	d10a      	bne.n	8002c48 <USB_DevInit+0x168>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e008      	b.n	8002c5a <USB_DevInit+0x17a>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c54:	461a      	mov	r2, r3
 8002c56:	2300      	movs	r3, #0
 8002c58:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c66:	461a      	mov	r2, r3
 8002c68:	2300      	movs	r3, #0
 8002c6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c78:	461a      	mov	r2, r3
 8002c7a:	23ff      	movs	r3, #255	; 0xff
 8002c7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3301      	adds	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d8c6      	bhi.n	8002c1a <USB_DevInit+0x13a>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c92:	461a      	mov	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ca0:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1U)
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d117      	bne.n	8002cd8 <USB_DevInit+0x1f8>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <USB_DevInit+0x25c>)
 8002cb2:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cba:	461a      	mov	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	f043 0303 	orr.w	r3, r3, #3
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002ce4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8002ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f043 0210 	orr.w	r2, r3, #16
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699a      	ldr	r2, [r3, #24]
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <USB_DevInit+0x260>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8002d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <USB_DevInit+0x236>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f043 0208 	orr.w	r2, r3, #8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8002d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d107      	bne.n	8002d2c <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d38:	b004      	add	sp, #16
 8002d3a:	4770      	bx	lr
 8002d3c:	00800100 	.word	0x00800100
 8002d40:	803c3800 	.word	0x803c3800

08002d44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	019b      	lsls	r3, r3, #6
 8002d56:	f043 0220 	orr.w	r2, r3, #32
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3301      	adds	r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <USB_FlushTxFifo+0x48>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e006      	b.n	8002d7e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d0f0      	beq.n	8002d5e <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	00030d40 	.word	0x00030d40

08002d90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2210      	movs	r2, #16
 8002da0:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	3301      	adds	r3, #1
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <USB_FlushRxFifo+0x40>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d901      	bls.n	8002db4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e006      	b.n	8002dc2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d0f0      	beq.n	8002da2 <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	00030d40 	.word	0x00030d40

08002dd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de6:	4619      	mov	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0306 	and.w	r3, r3, #6
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e01c      	b.n	8002e60 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0306 	and.w	r3, r3, #6
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d007      	beq.n	8002e46 <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8002e42:	2b06      	cmp	r3, #6
 8002e44:	d102      	bne.n	8002e4c <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 8002e46:	2303      	movs	r3, #3
 8002e48:	73fb      	strb	r3, [r7, #15]
 8002e4a:	e009      	b.n	8002e60 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0306 	and.w	r3, r3, #6
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d101      	bne.n	8002e60 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	785b      	ldrb	r3, [r3, #1]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d13e      	bne.n	8002efe <USB_ActivateEndpoint+0x90>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e86:	4619      	mov	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8e:	69da      	ldr	r2, [r3, #28]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	2301      	movs	r3, #1
 8002e98:	4083      	lsls	r3, r0
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d15c      	bne.n	8002f72 <USB_ActivateEndpoint+0x104>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ee0:	6839      	ldr	r1, [r7, #0]
 8002ee2:	78c9      	ldrb	r1, [r1, #3]
 8002ee4:	0489      	lsls	r1, r1, #18
 8002ee6:	430b      	orrs	r3, r1
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 8002ee8:	6839      	ldr	r1, [r7, #0]
 8002eea:	7809      	ldrb	r1, [r1, #0]
 8002eec:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efa:	6003      	str	r3, [r0, #0]
 8002efc:	e039      	b.n	8002f72 <USB_ActivateEndpoint+0x104>
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f04:	4619      	mov	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f0c:	69da      	ldr	r2, [r3, #28]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	2301      	movs	r3, #1
 8002f16:	4083      	lsls	r3, r0
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d11d      	bne.n	8002f72 <USB_ActivateEndpoint+0x104>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f44:	4618      	mov	r0, r3
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f5e:	6839      	ldr	r1, [r7, #0]
 8002f60:	78c9      	ldrb	r1, [r1, #3]
 8002f62:	0489      	lsls	r1, r1, #18
 8002f64:	430b      	orrs	r3, r1
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f70:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	785b      	ldrb	r3, [r3, #1]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d154      	bne.n	8003040 <USB_DeactivateEndpoint+0xc0>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002fba:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fd0:	6013      	str	r3, [r2, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fe6:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	3301      	adds	r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4a43      	ldr	r2, [pc, #268]	; (8003100 <USB_DeactivateEndpoint+0x180>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <USB_DeactivateEndpoint+0x7a>
      {
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e07d      	b.n	80030f6 <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800300e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003012:	d0e9      	beq.n	8002fe8 <USB_DeactivateEndpoint+0x68>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8003014:	2110      	movs	r1, #16
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff fe94 	bl	8002d44 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003022:	4619      	mov	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	2301      	movs	r3, #1
 8003034:	4083      	lsls	r3, r0
 8003036:	b29b      	uxth	r3, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	4013      	ands	r3, r2
 800303c:	61cb      	str	r3, [r1, #28]
 800303e:	e059      	b.n	80030f4 <USB_DeactivateEndpoint+0x174>
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304e:	4619      	mov	r1, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003064:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4413      	add	r3, r2
 8003070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003074:	461a      	mov	r2, r3
 8003076:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800307a:	6013      	str	r3, [r2, #0]
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308a:	461a      	mov	r2, r3
 800308c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003090:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	3301      	adds	r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4a19      	ldr	r2, [pc, #100]	; (8003100 <USB_DeactivateEndpoint+0x180>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <USB_DeactivateEndpoint+0x124>
      {
        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e028      	b.n	80030f6 <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d0ea      	beq.n	8003092 <USB_DeactivateEndpoint+0x112>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c2:	461a      	mov	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d0:	6053      	str	r3, [r2, #4]
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d8:	4619      	mov	r1, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	2301      	movs	r3, #1
 80030ea:	4083      	lsls	r3, r0
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	43db      	mvns	r3, r3
 80030f0:	4013      	ands	r3, r2
 80030f2:	61cb      	str	r3, [r1, #28]
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	00030d40 	.word	0x00030d40

08003104 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	4613      	mov	r3, r2
 8003110:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	785b      	ldrb	r3, [r3, #1]
 800311a:	2b01      	cmp	r3, #1
 800311c:	f040 8146 	bne.w	80033ac <USB_EPStartXfer+0x2a8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d13b      	bne.n	80031a0 <USB_EPStartXfer+0x9c>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003136:	4619      	mov	r1, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800314c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003150:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003160:	4619      	mov	r1, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4413      	add	r3, r2
 800316c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003176:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003186:	4619      	mov	r1, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4413      	add	r3, r2
 8003192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	0cdb      	lsrs	r3, r3, #19
 800319a:	04db      	lsls	r3, r3, #19
 800319c:	610b      	str	r3, [r1, #16]
 800319e:	e086      	b.n	80032ae <USB_EPStartXfer+0x1aa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ae:	4619      	mov	r1, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	0cdb      	lsrs	r3, r3, #19
 80031c2:	04db      	lsls	r3, r3, #19
 80031c4:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d4:	4619      	mov	r1, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80031ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80031ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fe:	4618      	mov	r0, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4413      	add	r3, r2
 800320a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	6959      	ldr	r1, [r3, #20]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	440b      	add	r3, r1
 800321a:	1e59      	subs	r1, r3, #1
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	fbb1 f3f3 	udiv	r3, r1, r3
 8003224:	04d9      	lsls	r1, r3, #19
 8003226:	4b8c      	ldr	r3, [pc, #560]	; (8003458 <USB_EPStartXfer+0x354>)
 8003228:	400b      	ands	r3, r1
 800322a:	4313      	orrs	r3, r2
 800322c:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323c:	4619      	mov	r1, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003256:	4313      	orrs	r3, r2
 8003258:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	78db      	ldrb	r3, [r3, #3]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d125      	bne.n	80032ae <USB_EPStartXfer+0x1aa>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003270:	4619      	mov	r1, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003286:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4413      	add	r3, r2
 8003292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003296:	4619      	mov	r1, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032ac:	610b      	str	r3, [r1, #16]
      }       
    }

    if (dma == 1U)
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d10b      	bne.n	80032cc <USB_EPStartXfer+0x1c8>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c2:	461a      	mov	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	6153      	str	r3, [r2, #20]
 80032ca:	e016      	b.n	80032fa <USB_EPStartXfer+0x1f6>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	78db      	ldrb	r3, [r3, #3]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d012      	beq.n	80032fa <USB_EPStartXfer+0x1f6>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00e      	beq.n	80032fa <USB_EPStartXfer+0x1f6>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e2:	4619      	mov	r1, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	2301      	movs	r3, #1
 80032f4:	4083      	lsls	r3, r0
 80032f6:	4313      	orrs	r3, r2
 80032f8:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	78db      	ldrb	r3, [r3, #3]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d12e      	bne.n	8003360 <USB_EPStartXfer+0x25c>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d113      	bne.n	800333a <USB_EPStartXfer+0x236>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003320:	4619      	mov	r1, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003336:	600b      	str	r3, [r1, #0]
 8003338:	e012      	b.n	8003360 <USB_EPStartXfer+0x25c>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003348:	4619      	mov	r1, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335e:	600b      	str	r3, [r1, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336e:	4619      	mov	r1, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4413      	add	r3, r2
 800337a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003384:	600b      	str	r3, [r1, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	78db      	ldrb	r3, [r3, #3]
 800338a:	2b01      	cmp	r3, #1
 800338c:	f040 80f5 	bne.w	800357a <USB_EPStartXfer+0x476>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	68d9      	ldr	r1, [r3, #12]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	b298      	uxth	r0, r3
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	4603      	mov	r3, r0
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fa4e 	bl	8003846 <USB_WritePacket>
 80033aa:	e0e6      	b.n	800357a <USB_EPStartXfer+0x476>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ba:	4619      	mov	r1, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	0cdb      	lsrs	r3, r3, #19
 80033ce:	04db      	lsls	r3, r3, #19
 80033d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e0:	4619      	mov	r1, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033fa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d12b      	bne.n	800345c <USB_EPStartXfer+0x358>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003412:	4619      	mov	r1, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342c:	4313      	orrs	r3, r2
 800342e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343e:	4619      	mov	r1, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003454:	610b      	str	r3, [r1, #16]
 8003456:	e03c      	b.n	80034d2 <USB_EPStartXfer+0x3ce>
 8003458:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4413      	add	r3, r2
 8003466:	1e5a      	subs	r2, r3, #1
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4413      	add	r3, r2
 800347c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003480:	4619      	mov	r1, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4413      	add	r3, r2
 800348c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	8afb      	ldrh	r3, [r7, #22]
 8003494:	04db      	lsls	r3, r3, #19
 8003496:	4618      	mov	r0, r3
 8003498:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <USB_EPStartXfer+0x480>)
 800349a:	4003      	ands	r3, r0
 800349c:	4313      	orrs	r3, r2
 800349e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ae:	4618      	mov	r0, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	8af9      	ldrh	r1, [r7, #22]
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ce:	4313      	orrs	r3, r2
 80034d0:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1U)
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10a      	bne.n	80034ee <USB_EPStartXfer+0x3ea>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e6:	461a      	mov	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	6153      	str	r3, [r2, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	78db      	ldrb	r3, [r3, #3]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d12e      	bne.n	8003554 <USB_EPStartXfer+0x450>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d113      	bne.n	800352e <USB_EPStartXfer+0x42a>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003514:	4619      	mov	r1, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800352a:	600b      	str	r3, [r1, #0]
 800352c:	e012      	b.n	8003554 <USB_EPStartXfer+0x450>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353c:	4619      	mov	r1, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003552:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003562:	4619      	mov	r1, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003578:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	1ff80000 	.word	0x1ff80000

08003588 <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	4613      	mov	r3, r2
 8003594:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	785b      	ldrb	r3, [r3, #1]
 800359a:	2b01      	cmp	r3, #1
 800359c:	f040 80d2 	bne.w	8003744 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d13b      	bne.n	8003620 <USB_EP0StartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b6:	4619      	mov	r1, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035d0:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e0:	4619      	mov	r1, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003606:	4619      	mov	r1, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4413      	add	r3, r2
 8003612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	0cdb      	lsrs	r3, r3, #19
 800361a:	04db      	lsls	r3, r3, #19
 800361c:	610b      	str	r3, [r1, #16]
 800361e:	e05a      	b.n	80036d6 <USB_EP0StartXfer+0x14e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362e:	4619      	mov	r1, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	0cdb      	lsrs	r3, r3, #19
 8003642:	04db      	lsls	r3, r3, #19
 8003644:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003654:	4619      	mov	r1, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800366a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800366e:	610b      	str	r3, [r1, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	429a      	cmp	r2, r3
 800367a:	d903      	bls.n	8003684 <USB_EP0StartXfer+0xfc>
      {
        ep->xfer_len = ep->maxpacket;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003692:	4619      	mov	r1, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036a8:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b8:	4619      	mov	r1, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d2:	4313      	orrs	r3, r2
 80036d4:	610b      	str	r3, [r1, #16]
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e4:	4619      	mov	r1, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036fa:	600b      	str	r3, [r1, #0]
    
    if (dma == 1)
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d10b      	bne.n	800371a <USB_EP0StartXfer+0x192>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003710:	461a      	mov	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	6153      	str	r3, [r2, #20]
 8003718:	e08e      	b.n	8003838 <USB_EP0StartXfer+0x2b0>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 808a 	beq.w	8003838 <USB_EP0StartXfer+0x2b0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372a:	4619      	mov	r1, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	2301      	movs	r3, #1
 800373c:	4083      	lsls	r3, r0
 800373e:	4313      	orrs	r3, r2
 8003740:	634b      	str	r3, [r1, #52]	; 0x34
 8003742:	e079      	b.n	8003838 <USB_EP0StartXfer+0x2b0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003752:	4619      	mov	r1, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	0cdb      	lsrs	r3, r3, #19
 8003766:	04db      	lsls	r3, r3, #19
 8003768:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003778:	4619      	mov	r1, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800378e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003792:	610b      	str	r3, [r1, #16]
      
    if (ep->xfer_len > 0U)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <USB_EP0StartXfer+0x21c>
    {
      ep->xfer_len = ep->maxpacket;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b2:	4619      	mov	r1, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037c8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d8:	4619      	mov	r1, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f2:	4313      	orrs	r3, r2
 80037f4:	610b      	str	r3, [r1, #16]
    

    if (dma == 1U)
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d10a      	bne.n	8003812 <USB_EP0StartXfer+0x28a>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380a:	461a      	mov	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	6153      	str	r3, [r2, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003820:	4619      	mov	r1, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003836:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003846:	b480      	push	{r7}
 8003848:	b087      	sub	sp, #28
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	4611      	mov	r1, r2
 8003852:	461a      	mov	r2, r3
 8003854:	460b      	mov	r3, r1
 8003856:	71fb      	strb	r3, [r7, #7]
 8003858:	4613      	mov	r3, r2
 800385a:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 8003864:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d11a      	bne.n	80038a2 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 800386c:	88bb      	ldrh	r3, [r7, #4]
 800386e:	3303      	adds	r3, #3
 8003870:	089b      	lsrs	r3, r3, #2
 8003872:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	e00f      	b.n	800389a <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	031a      	lsls	r2, r3, #12
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003886:	461a      	mov	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	3301      	adds	r3, #1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	3304      	adds	r3, #4
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d3eb      	bcc.n	800387a <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	4613      	mov	r3, r2
 80038bc:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	3303      	adds	r3, #3
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e00b      	b.n	80038e8 <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	3301      	adds	r3, #1
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3304      	adds	r3, #4
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d3ef      	bcc.n	80038d0 <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 80038f0:	68bb      	ldr	r3, [r7, #8]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	785b      	ldrb	r3, [r3, #1]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d130      	bne.n	8003972 <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	db12      	blt.n	800394a <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003932:	4619      	mov	r1, r3
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003948:	600b      	str	r3, [r1, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003958:	4619      	mov	r1, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800396e:	600b      	str	r3, [r1, #0]
 8003970:	e02f      	b.n	80039d2 <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	db12      	blt.n	80039ac <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	4619      	mov	r1, r3
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039aa:	600b      	str	r3, [r1, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ba:	4619      	mov	r1, r3
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039d0:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	785b      	ldrb	r3, [r3, #1]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d12e      	bne.n	8003a50 <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a00:	4619      	mov	r1, r3
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a16:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	78db      	ldrb	r3, [r3, #3]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d003      	beq.n	8003a28 <USB_EPClearStall+0x48>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	78db      	ldrb	r3, [r3, #3]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d141      	bne.n	8003aac <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a36:	4619      	mov	r1, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	600b      	str	r3, [r1, #0]
 8003a4e:	e02d      	b.n	8003aac <USB_EPClearStall+0xcc>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5e:	4619      	mov	r1, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a74:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	78db      	ldrb	r3, [r3, #3]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d003      	beq.n	8003a86 <USB_EPClearStall+0xa6>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	78db      	ldrb	r3, [r3, #3]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d112      	bne.n	8003aac <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a94:	4619      	mov	r1, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	600b      	str	r3, [r1, #0]
    }    
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003acc:	461a      	mov	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ada:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003af4:	4313      	orrs	r3, r2
 8003af6:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b14:	461a      	mov	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f023 0302 	bic.w	r3, r3, #2
 8003b22:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003b24:	2003      	movs	r0, #3
 8003b26:	f7fc fd2d 	bl	8000584 <HAL_Delay>
  
  return HAL_OK;  
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b42:	461a      	mov	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f043 0302 	orr.w	r3, r3, #2
 8003b50:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003b52:	2003      	movs	r0, #3
 8003b54:	f7fc fd16 	bl	8000584 <HAL_Delay>
  
  return HAL_OK;  
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
  return v;  
 8003b7e:	68fb      	ldr	r3, [r7, #12]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000U) >> 16U);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	0c1b      	lsrs	r3, r3, #16
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFFU));
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	b29b      	uxth	r3, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4013      	ands	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
  return v;
 8003c16:	68fb      	ldr	r3, [r7, #12]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4c:	01db      	lsls	r3, r3, #7
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003c56:	78fb      	ldrb	r3, [r7, #3]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	4013      	ands	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
  return v;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	f003 0301 	and.w	r3, r3, #1
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003cb0:	f023 0307 	bic.w	r3, r3, #7
 8003cb4:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0306 	and.w	r3, r3, #6
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d10a      	bne.n	8003cdc <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ccc:	461a      	mov	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f043 0303 	orr.w	r3, r3, #3
 8003cda:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d14:	461a      	mov	r2, r3
 8003d16:	2300      	movs	r3, #0
 8003d18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d20:	461a      	mov	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d2e:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d36:	461a      	mov	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f043 0318 	orr.w	r3, r3, #24
 8003d44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003d5a:	6113      	str	r3, [r2, #16]
  
  if (dma == 1U)
 8003d5c:	7afb      	ldrb	r3, [r7, #11]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d10c      	bne.n	8003d7c <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d68:	461a      	mov	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d74:	461a      	mov	r2, r3
 8003d76:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8003d7a:	6013      	str	r3, [r2, #0]
  }
  
  return HAL_OK;  
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a13      	ldr	r2, [pc, #76]	; (8003df0 <USB_CoreReset+0x64>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e01b      	b.n	8003de2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	daf2      	bge.n	8003d98 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f043 0201 	orr.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <USB_CoreReset+0x64>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d901      	bls.n	8003dd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e006      	b.n	8003de2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d0f0      	beq.n	8003dc2 <USB_CoreReset+0x36>
  
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	00030d40 	.word	0x00030d40

08003df4 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
    /* Open EP IN */
	USBD_LL_OpenEP(pdev, RNDIS_NOTIFICATION_IN_EP, USBD_EP_TYPE_INTR, RNDIS_NOTIFICATION_IN_SZ);
 8003e00:	2308      	movs	r3, #8
 8003e02:	2203      	movs	r2, #3
 8003e04:	2181      	movs	r1, #129	; 0x81
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f00c fb80 	bl	801050c <USBD_LL_OpenEP>
    
    /* Open EP OUT */
	USBD_LL_OpenEP(pdev, RNDIS_DATA_IN_EP, USBD_EP_TYPE_BULK, RNDIS_DATA_IN_SZ);
 8003e0c:	2340      	movs	r3, #64	; 0x40
 8003e0e:	2202      	movs	r2, #2
 8003e10:	2182      	movs	r1, #130	; 0x82
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f00c fb7a 	bl	801050c <USBD_LL_OpenEP>

    /* Open EP IN */
	USBD_LL_OpenEP(pdev, RNDIS_DATA_OUT_EP, USBD_EP_TYPE_BULK, RNDIS_DATA_OUT_SZ);
 8003e18:	2340      	movs	r3, #64	; 0x40
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f00c fb74 	bl	801050c <USBD_LL_OpenEP>
    
    /* Init Xfer states */
    //txState =0;
    //rxState =0;
	pDev = pdev;
 8003e24:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <USBD_CDC_Init+0x80>)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6013      	str	r3, [r2, #0]
    USBD_LL_PrepareReceive(pdev, RNDIS_DATA_OUT_EP, (uint8_t*)rndis_rx_buffer, RNDIS_RX_BUFFER_SIZE);
 8003e2a:	f240 6316 	movw	r3, #1558	; 0x616
 8003e2e:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <USBD_CDC_Init+0x84>)
 8003e30:	2101      	movs	r1, #1
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f00c fce6 	bl	8010804 <USBD_LL_PrepareReceive>
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]
    if( xipInitTaskHandle != NULL )
 8003e3c:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <USBD_CDC_Init+0x88>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d012      	beq.n	8003e6a <USBD_CDC_Init+0x76>
	{
		vTaskNotifyGiveFromISR( xipInitTaskHandle, &xHigherPriorityTaskWoken );
 8003e44:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <USBD_CDC_Init+0x88>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f107 020c 	add.w	r2, r7, #12
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f004 fa3e 	bl	80082d0 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <USBD_CDC_Init+0x76>
 8003e5a:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <USBD_CDC_Init+0x8c>)
 8003e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	f3bf 8f6f 	isb	sy
	}
    return 0;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20005844 	.word	0x20005844
 8003e78:	20004b94 	.word	0x20004b94
 8003e7c:	2000583c 	.word	0x2000583c
 8003e80:	e000ed04 	.word	0xe000ed04

08003e84 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev, RNDIS_NOTIFICATION_IN_EP);
 8003e90:	2181      	movs	r1, #129	; 0x81
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f00c fb78 	bl	8010588 <USBD_LL_CloseEP>
  
  USBD_LL_CloseEP(pdev, RNDIS_DATA_IN_EP);
 8003e98:	2182      	movs	r1, #130	; 0x82
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f00c fb74 	bl	8010588 <USBD_LL_CloseEP>
  
  USBD_LL_CloseEP(pdev, RNDIS_DATA_OUT_EP);
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f00c fb70 	bl	8010588 <USBD_LL_CloseEP>
  
  return 0;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <USBD_CDC_Setup>:
  *         Handle the CDC specific requests
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req){
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
	switch (req->bmRequest & USB_REQ_TYPE_MASK){
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d000      	beq.n	8003ecc <USBD_CDC_Setup+0x18>
				{
					USBD_CtlPrepareRx (pdev, encapsulated_buffer, req->wLength);
				}
			}
		default:
			break;
 8003eca:	e018      	b.n	8003efe <USBD_CDC_Setup+0x4a>
			if (req->wLength){
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	88db      	ldrh	r3, [r3, #6]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d014      	beq.n	8003efe <USBD_CDC_Setup+0x4a>
				if (req->bmRequest & 0x80)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	b25b      	sxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	da08      	bge.n	8003ef0 <USBD_CDC_Setup+0x3c>
					USBD_CtlSendData(pdev, encapsulated_buffer, ((rndis_generic_msg_t *)encapsulated_buffer)->MessageLength);
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <USBD_CDC_Setup+0x58>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4909      	ldr	r1, [pc, #36]	; (8003f0c <USBD_CDC_Setup+0x58>)
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f001 fbfb 	bl	80056e4 <USBD_CtlSendData>
			break;
 8003eee:	e006      	b.n	8003efe <USBD_CDC_Setup+0x4a>
					USBD_CtlPrepareRx (pdev, encapsulated_buffer, req->wLength);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	88db      	ldrh	r3, [r3, #6]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4905      	ldr	r1, [pc, #20]	; (8003f0c <USBD_CDC_Setup+0x58>)
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f001 fc21 	bl	8005740 <USBD_CtlPrepareRx>
			break;
 8003efe:	bf00      	nop
	}
	return USBD_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	200051ac 	.word	0x200051ac

08003f10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	70fb      	strb	r3, [r7, #3]
	epnum &= 0x0F;
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	70fb      	strb	r3, [r7, #3]
	if (epnum == (RNDIS_DATA_IN_EP & 0x0F)){
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d10c      	bne.n	8003f44 <USBD_CDC_DataIn+0x34>

		if (rndis_tx_ZLP){
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <USBD_CDC_DataIn+0x40>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <USBD_CDC_DataIn+0x34>
			USBD_LL_Transmit (pdev, RNDIS_DATA_IN_EP, NULL, 0);
 8003f32:	2300      	movs	r3, #0
 8003f34:	2200      	movs	r2, #0
 8003f36:	2182      	movs	r1, #130	; 0x82
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f00c fc29 	bl	8010790 <USBD_LL_Transmit>
			rndis_tx_ZLP = false;
 8003f3e:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <USBD_CDC_DataIn+0x40>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	701a      	strb	r2, [r3, #0]
		}
	}
	return USBD_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	200002f5 	.word	0x200002f5

08003f54 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	70fb      	strb	r3, [r7, #3]
	if (epnum == RNDIS_DATA_OUT_EP)
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d116      	bne.n	8003f94 <USBD_CDC_DataOut+0x40>
	{
		PCD_EPTypeDef *ep = &((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum];
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f7a:	440b      	add	r3, r1
 8003f7c:	60fb      	str	r3, [r7, #12]
		uint32_t xfer_count = USBD_LL_GetRxDataSize (pdev, epnum);
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	4619      	mov	r1, r3
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f00c fc78 	bl	8010878 <USBD_LL_GetRxDataSize>
 8003f88:	60b8      	str	r0, [r7, #8]
		handle_packet(rndis_rx_buffer, xfer_count);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4804      	ldr	r0, [pc, #16]	; (8003fa0 <USBD_CDC_DataOut+0x4c>)
 8003f90:	f000 f946 	bl	8004220 <handle_packet>

	}
    return USBD_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20004b94 	.word	0x20004b94

08003fa4 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	switch (((rndis_generic_msg_t *)encapsulated_buffer)->MessageType){
 8003fac:	4b3f      	ldr	r3, [pc, #252]	; (80040ac <USBD_CDC_EP0_RxReady+0x108>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3b02      	subs	r3, #2
 8003fb2:	2b06      	cmp	r3, #6
 8003fb4:	d873      	bhi.n	800409e <USBD_CDC_EP0_RxReady+0xfa>
 8003fb6:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <USBD_CDC_EP0_RxReady+0x18>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08003fd9 	.word	0x08003fd9
 8003fc0:	0800409f 	.word	0x0800409f
 8003fc4:	0800403b 	.word	0x0800403b
 8003fc8:	08004043 	.word	0x08004043
 8003fcc:	0800404b 	.word	0x0800404b
 8003fd0:	0800409f 	.word	0x0800409f
 8003fd4:	0800407b 	.word	0x0800407b
		case REMOTE_NDIS_INITIALIZE_MSG:
			{
				rndis_initialize_cmplt_t *m;
				m = ((rndis_initialize_cmplt_t *)encapsulated_buffer);
 8003fd8:	4b34      	ldr	r3, [pc, #208]	; (80040ac <USBD_CDC_EP0_RxReady+0x108>)
 8003fda:	617b      	str	r3, [r7, #20]
				/* m->MessageID is same as before */
				m->MessageType = REMOTE_NDIS_INITIALIZE_CMPLT;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	4a34      	ldr	r2, [pc, #208]	; (80040b0 <USBD_CDC_EP0_RxReady+0x10c>)
 8003fe0:	601a      	str	r2, [r3, #0]
				m->MessageLength = sizeof(rndis_initialize_cmplt_t);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2234      	movs	r2, #52	; 0x34
 8003fe6:	605a      	str	r2, [r3, #4]
				m->MajorVersion = RNDIS_MAJOR_VERSION;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2201      	movs	r2, #1
 8003fec:	611a      	str	r2, [r3, #16]
				m->MinorVersion = RNDIS_MINOR_VERSION;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	615a      	str	r2, [r3, #20]
				m->Status = RNDIS_STATUS_SUCCESS;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	60da      	str	r2, [r3, #12]
				m->DeviceFlags = RNDIS_DF_CONNECTIONLESS;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	619a      	str	r2, [r3, #24]
				m->Medium = RNDIS_MEDIUM_802_3;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2200      	movs	r2, #0
 8004004:	61da      	str	r2, [r3, #28]
				m->MaxPacketsPerTransfer = 1;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2201      	movs	r2, #1
 800400a:	621a      	str	r2, [r3, #32]
				m->MaxTransferSize = RNDIS_RX_BUFFER_SIZE;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f240 6216 	movw	r2, #1558	; 0x616
 8004012:	625a      	str	r2, [r3, #36]	; 0x24
				m->PacketAlignmentFactor = 0;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2200      	movs	r2, #0
 8004018:	629a      	str	r2, [r3, #40]	; 0x28
				m->AfListOffset = 0;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2200      	movs	r2, #0
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c
				m->AfListSize = 0;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
				rndis_state = rndis_initialized;
 8004026:	4b23      	ldr	r3, [pc, #140]	; (80040b4 <USBD_CDC_EP0_RxReady+0x110>)
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]
				USBD_LL_Transmit(pdev, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 800402c:	2308      	movs	r3, #8
 800402e:	4a22      	ldr	r2, [pc, #136]	; (80040b8 <USBD_CDC_EP0_RxReady+0x114>)
 8004030:	2181      	movs	r1, #129	; 0x81
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f00c fbac 	bl	8010790 <USBD_LL_Transmit>
			}
			break;
 8004038:	e032      	b.n	80040a0 <USBD_CDC_EP0_RxReady+0xfc>

		case REMOTE_NDIS_QUERY_MSG:
			rndis_query(pdev);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f934 	bl	80042a8 <rndis_query>
			break;
 8004040:	e02e      	b.n	80040a0 <USBD_CDC_EP0_RxReady+0xfc>

		case REMOTE_NDIS_SET_MSG:
			rndis_handle_set_msg(pdev);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fb3c 	bl	80046c0 <rndis_handle_set_msg>
			break;
 8004048:	e02a      	b.n	80040a0 <USBD_CDC_EP0_RxReady+0xfc>

		case REMOTE_NDIS_RESET_MSG:
			{
				rndis_reset_cmplt_t * m;
				m = ((rndis_reset_cmplt_t *)encapsulated_buffer);
 800404a:	4b18      	ldr	r3, [pc, #96]	; (80040ac <USBD_CDC_EP0_RxReady+0x108>)
 800404c:	613b      	str	r3, [r7, #16]
				rndis_state = rndis_uninitialized;
 800404e:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <USBD_CDC_EP0_RxReady+0x110>)
 8004050:	2200      	movs	r2, #0
 8004052:	701a      	strb	r2, [r3, #0]
				m->MessageType = REMOTE_NDIS_RESET_CMPLT;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4a19      	ldr	r2, [pc, #100]	; (80040bc <USBD_CDC_EP0_RxReady+0x118>)
 8004058:	601a      	str	r2, [r3, #0]
				m->MessageLength = sizeof(rndis_reset_cmplt_t);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2210      	movs	r2, #16
 800405e:	605a      	str	r2, [r3, #4]
				m->Status = RNDIS_STATUS_SUCCESS;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2200      	movs	r2, #0
 8004064:	609a      	str	r2, [r3, #8]
				m->AddressingReset = 1; /* Make it look like we did something */
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2201      	movs	r2, #1
 800406a:	60da      	str	r2, [r3, #12]
				/* m->AddressingReset = 0; - Windows halts if set to 1 for some reason */
				USBD_LL_Transmit(pdev,RNDIS_NOTIFICATION_IN_EP,(uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00",8);
 800406c:	2308      	movs	r3, #8
 800406e:	4a12      	ldr	r2, [pc, #72]	; (80040b8 <USBD_CDC_EP0_RxReady+0x114>)
 8004070:	2181      	movs	r1, #129	; 0x81
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f00c fb8c 	bl	8010790 <USBD_LL_Transmit>
			}
			break;
 8004078:	e012      	b.n	80040a0 <USBD_CDC_EP0_RxReady+0xfc>

		case REMOTE_NDIS_KEEPALIVE_MSG:
			{
				rndis_keepalive_cmplt_t * m;
				m = (rndis_keepalive_cmplt_t *)encapsulated_buffer;
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <USBD_CDC_EP0_RxReady+0x108>)
 800407c:	60fb      	str	r3, [r7, #12]
				m->MessageType = REMOTE_NDIS_KEEPALIVE_CMPLT;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4a0f      	ldr	r2, [pc, #60]	; (80040c0 <USBD_CDC_EP0_RxReady+0x11c>)
 8004082:	601a      	str	r2, [r3, #0]
				m->MessageLength = sizeof(rndis_keepalive_cmplt_t);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2210      	movs	r2, #16
 8004088:	605a      	str	r2, [r3, #4]
				m->Status = RNDIS_STATUS_SUCCESS;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	60da      	str	r2, [r3, #12]
			}
			/* We have data to send back */
			USBD_LL_Transmit(pdev,RNDIS_NOTIFICATION_IN_EP,(uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00",8);
 8004090:	2308      	movs	r3, #8
 8004092:	4a09      	ldr	r2, [pc, #36]	; (80040b8 <USBD_CDC_EP0_RxReady+0x114>)
 8004094:	2181      	movs	r1, #129	; 0x81
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f00c fb7a 	bl	8010790 <USBD_LL_Transmit>
			break;
 800409c:	e000      	b.n	80040a0 <USBD_CDC_EP0_RxReady+0xfc>

		default:
			break;
 800409e:	bf00      	nop
	}
	return USBD_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	200051ac 	.word	0x200051ac
 80040b0:	80000002 	.word	0x80000002
 80040b4:	20005840 	.word	0x20005840
 80040b8:	08010d94 	.word	0x08010d94
 80040bc:	80000006 	.word	0x80000006
 80040c0:	80000008 	.word	0x80000008

080040c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length){
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
    *length = sizeof(usbd_cdc_CfgDesc);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	224b      	movs	r2, #75	; 0x4b
 80040d0:	801a      	strh	r2, [r3, #0]
    usbd_cdc_CfgDesc[2] = sizeof(usbd_cdc_CfgDesc) & 0xFF;
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <USBD_CDC_GetFSCfgDesc+0x28>)
 80040d4:	224b      	movs	r2, #75	; 0x4b
 80040d6:	709a      	strb	r2, [r3, #2]
    usbd_cdc_CfgDesc[3] = (sizeof(usbd_cdc_CfgDesc) >> 8) & 0xFF;
 80040d8:	4b04      	ldr	r3, [pc, #16]	; (80040ec <USBD_CDC_GetFSCfgDesc+0x28>)
 80040da:	2200      	movs	r2, #0
 80040dc:	70da      	strb	r2, [r3, #3]
    return usbd_cdc_CfgDesc;
 80040de:	4b03      	ldr	r3, [pc, #12]	; (80040ec <USBD_CDC_GetFSCfgDesc+0x28>)
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	2000003c 	.word	0x2000003c

080040f0 <usbd_rndis_sof>:

// Start Of Frame event management
static uint8_t usbd_rndis_sof(USBD_HandleTypeDef *pdev){
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
	return USBD_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <rndis_iso_in_incomplete>:

static uint8_t rndis_iso_in_incomplete(USBD_HandleTypeDef *pdev, uint8_t epnum){
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	460b      	mov	r3, r1
 8004110:	70fb      	strb	r3, [r7, #3]
	return USBD_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <rndis_iso_out_incomplete>:

static uint8_t rndis_iso_out_incomplete(USBD_HandleTypeDef *pdev, uint8_t epnum){
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	70fb      	strb	r3, [r7, #3]
	return USBD_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <usbd_rndis_GetDeviceQualifierDesc>:

static uint8_t  *usbd_rndis_GetDeviceQualifierDesc (uint16_t *length){
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_DeviceQualifierDesc);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	220a      	movs	r2, #10
 8004148:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceQualifierDesc;
 800414a:	4b03      	ldr	r3, [pc, #12]	; (8004158 <usbd_rndis_GetDeviceQualifierDesc+0x1c>)
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	20000088 	.word	0x20000088

0800415c <usbd_cdc_transfer>:

static uint8_t usbd_cdc_transfer(uint8_t *data, uint16_t size){
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	807b      	strh	r3, [r7, #2]
	//http://habrahabr.ru/post/248729/
	rndis_tx_transmitting = true;
 8004168:	4b27      	ldr	r3, [pc, #156]	; (8004208 <usbd_cdc_transfer+0xac>)
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]
	if ((rndis_tx_transmitting) || (size > ETH_MAX_PACKET_SIZE) || (size == 0))
 800416e:	4b26      	ldr	r3, [pc, #152]	; (8004208 <usbd_cdc_transfer+0xac>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d107      	bne.n	8004186 <usbd_cdc_transfer+0x2a>
 8004176:	887b      	ldrh	r3, [r7, #2]
 8004178:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800417c:	4293      	cmp	r3, r2
 800417e:	d802      	bhi.n	8004186 <usbd_cdc_transfer+0x2a>
 8004180:	887b      	ldrh	r3, [r7, #2]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <usbd_cdc_transfer+0x38>
	{
		usb_eth_stat.txbad++;
 8004186:	4b21      	ldr	r3, [pc, #132]	; (800420c <usbd_cdc_transfer+0xb0>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	3301      	adds	r3, #1
 800418c:	4a1f      	ldr	r2, [pc, #124]	; (800420c <usbd_cdc_transfer+0xb0>)
 800418e:	6093      	str	r3, [r2, #8]
		return false;
 8004190:	2300      	movs	r3, #0
 8004192:	e034      	b.n	80041fe <usbd_cdc_transfer+0xa2>
	}
	static uint8_t data_to_send[ETH_MAX_PACKET_SIZE];
	rndis_data_packet_t *hdr;

	hdr = (rndis_data_packet_t *)data_to_send;
 8004194:	4b1e      	ldr	r3, [pc, #120]	; (8004210 <usbd_cdc_transfer+0xb4>)
 8004196:	60fb      	str	r3, [r7, #12]
	memset(hdr, 0, sizeof(rndis_data_packet_t));
 8004198:	222c      	movs	r2, #44	; 0x2c
 800419a:	2100      	movs	r1, #0
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f00c fcb1 	bl	8010b04 <memset>
	hdr->MessageType = REMOTE_NDIS_PACKET_MSG;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
	hdr->MessageLength = sizeof(rndis_data_packet_t) + size;
 80041a8:	887b      	ldrh	r3, [r7, #2]
 80041aa:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	605a      	str	r2, [r3, #4]
	hdr->DataOffset = sizeof(rndis_data_packet_t) - offsetof(rndis_data_packet_t, DataOffset);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2224      	movs	r2, #36	; 0x24
 80041b6:	609a      	str	r2, [r3, #8]
	hdr->DataLength = size;
 80041b8:	887a      	ldrh	r2, [r7, #2]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	60da      	str	r2, [r3, #12]
	memcpy(data_to_send + sizeof(rndis_data_packet_t), (void *) data, size);
 80041be:	4815      	ldr	r0, [pc, #84]	; (8004214 <usbd_cdc_transfer+0xb8>)
 80041c0:	887b      	ldrh	r3, [r7, #2]
 80041c2:	461a      	mov	r2, r3
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	f00c fc78 	bl	8010aba <memcpy>

	if (hdr->MessageLength % RNDIS_DATA_IN_SZ == 0){
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d102      	bne.n	80041dc <usbd_cdc_transfer+0x80>
		rndis_tx_ZLP = true;
 80041d6:	4b10      	ldr	r3, [pc, #64]	; (8004218 <usbd_cdc_transfer+0xbc>)
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041dc:	b672      	cpsid	i
	}
	__disable_irq();
	USBD_LL_Transmit (pDev, RNDIS_DATA_IN_EP, (uint8_t *)data_to_send, hdr->MessageLength);
 80041de:	4b0f      	ldr	r3, [pc, #60]	; (800421c <usbd_cdc_transfer+0xc0>)
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	4a09      	ldr	r2, [pc, #36]	; (8004210 <usbd_cdc_transfer+0xb4>)
 80041ea:	2182      	movs	r1, #130	; 0x82
 80041ec:	f00c fad0 	bl	8010790 <USBD_LL_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 80041f0:	b662      	cpsie	i
	__enable_irq();

	//Increment error counter and then decrement in data_in if OK
	usb_eth_stat.txbad++;
 80041f2:	4b06      	ldr	r3, [pc, #24]	; (800420c <usbd_cdc_transfer+0xb0>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	3301      	adds	r3, #1
 80041f8:	4a04      	ldr	r2, [pc, #16]	; (800420c <usbd_cdc_transfer+0xb0>)
 80041fa:	6093      	str	r3, [r2, #8]

	return USBD_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	200002f4 	.word	0x200002f4
 800420c:	200002e0 	.word	0x200002e0
 8004210:	20000304 	.word	0x20000304
 8004214:	20000330 	.word	0x20000330
 8004218:	200002f5 	.word	0x200002f5
 800421c:	20005844 	.word	0x20005844

08004220 <handle_packet>:

static void handle_packet(const char *data, int size){
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
	rndis_data_packet_t *p;
	p = (rndis_data_packet_t *)data;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60fb      	str	r3, [r7, #12]
	if (size < sizeof(rndis_data_packet_t)) return;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b2b      	cmp	r3, #43	; 0x2b
 8004232:	d92f      	bls.n	8004294 <handle_packet+0x74>
	if (p->MessageType != REMOTE_NDIS_PACKET_MSG || ((p->MessageLength != size) && (p->MessageLength != size - 1))) return;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d12d      	bne.n	8004298 <handle_packet+0x78>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d005      	beq.n	8004252 <handle_packet+0x32>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	3a01      	subs	r2, #1
 800424e:	4293      	cmp	r3, r2
 8004250:	d122      	bne.n	8004298 <handle_packet+0x78>
	if (p->DataOffset + offsetof(rndis_data_packet_t, DataOffset) + p->DataLength != size)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	4413      	add	r3, r2
 800425c:	f103 0208 	add.w	r2, r3, #8
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d005      	beq.n	8004272 <handle_packet+0x52>
	{
		usb_eth_stat.rxbad++;
 8004266:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <handle_packet+0x80>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	3301      	adds	r3, #1
 800426c:	4a0c      	ldr	r2, [pc, #48]	; (80042a0 <handle_packet+0x80>)
 800426e:	60d3      	str	r3, [r2, #12]
		return;
 8004270:	e013      	b.n	800429a <handle_packet+0x7a>
	}
	usb_eth_stat.rxok++;
 8004272:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <handle_packet+0x80>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	3301      	adds	r3, #1
 8004278:	4a09      	ldr	r2, [pc, #36]	; (80042a0 <handle_packet+0x80>)
 800427a:	6053      	str	r3, [r2, #4]
	rndis_rxproc(&rndis_rx_buffer[p->DataOffset + offsetof(rndis_data_packet_t, DataOffset)], p->DataLength);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	3308      	adds	r3, #8
 8004282:	4a08      	ldr	r2, [pc, #32]	; (80042a4 <handle_packet+0x84>)
 8004284:	441a      	add	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	4619      	mov	r1, r3
 800428c:	4610      	mov	r0, r2
 800428e:	f000 facf 	bl	8004830 <rndis_rxproc>
 8004292:	e002      	b.n	800429a <handle_packet+0x7a>
	if (size < sizeof(rndis_data_packet_t)) return;
 8004294:	bf00      	nop
 8004296:	e000      	b.n	800429a <handle_packet+0x7a>
	if (p->MessageType != REMOTE_NDIS_PACKET_MSG || ((p->MessageLength != size) && (p->MessageLength != size - 1))) return;
 8004298:	bf00      	nop
}
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	200002e0 	.word	0x200002e0
 80042a4:	20004b94 	.word	0x20004b94

080042a8 <rndis_query>:

static const char *rndis_vendor = RNDIS_VENDOR;

void rndis_query(void  *pdev){
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	switch (((rndis_query_msg_t *)encapsulated_buffer)->Oid){
 80042b0:	4bb2      	ldr	r3, [pc, #712]	; (800457c <rndis_query+0x2d4>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4ab2      	ldr	r2, [pc, #712]	; (8004580 <rndis_query+0x2d8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	f000 808d 	beq.w	80043d6 <rndis_query+0x12e>
 80042bc:	4ab0      	ldr	r2, [pc, #704]	; (8004580 <rndis_query+0x2d8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d83f      	bhi.n	8004342 <rndis_query+0x9a>
 80042c2:	4ab0      	ldr	r2, [pc, #704]	; (8004584 <rndis_query+0x2dc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	f000 80e5 	beq.w	8004494 <rndis_query+0x1ec>
 80042ca:	4aae      	ldr	r2, [pc, #696]	; (8004584 <rndis_query+0x2dc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d81b      	bhi.n	8004308 <rndis_query+0x60>
 80042d0:	4aad      	ldr	r2, [pc, #692]	; (8004588 <rndis_query+0x2e0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	f000 8094 	beq.w	8004400 <rndis_query+0x158>
 80042d8:	4aab      	ldr	r2, [pc, #684]	; (8004588 <rndis_query+0x2e0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d807      	bhi.n	80042ee <rndis_query+0x46>
 80042de:	4aab      	ldr	r2, [pc, #684]	; (800458c <rndis_query+0x2e4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d071      	beq.n	80043c8 <rndis_query+0x120>
 80042e4:	4aaa      	ldr	r2, [pc, #680]	; (8004590 <rndis_query+0x2e8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	f000 809c 	beq.w	8004424 <rndis_query+0x17c>
 80042ec:	e13c      	b.n	8004568 <rndis_query+0x2c0>
 80042ee:	4aa9      	ldr	r2, [pc, #676]	; (8004594 <rndis_query+0x2ec>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	f000 80c1 	beq.w	8004478 <rndis_query+0x1d0>
 80042f6:	4aa8      	ldr	r2, [pc, #672]	; (8004598 <rndis_query+0x2f0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	f000 8099 	beq.w	8004430 <rndis_query+0x188>
 80042fe:	4aa7      	ldr	r2, [pc, #668]	; (800459c <rndis_query+0x2f4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	f000 8083 	beq.w	800440c <rndis_query+0x164>
 8004306:	e12f      	b.n	8004568 <rndis_query+0x2c0>
 8004308:	4aa5      	ldr	r2, [pc, #660]	; (80045a0 <rndis_query+0x2f8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	f000 80ac 	beq.w	8004468 <rndis_query+0x1c0>
 8004310:	4aa3      	ldr	r2, [pc, #652]	; (80045a0 <rndis_query+0x2f8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d808      	bhi.n	8004328 <rndis_query+0x80>
 8004316:	4aa3      	ldr	r2, [pc, #652]	; (80045a4 <rndis_query+0x2fc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	f000 808f 	beq.w	800443c <rndis_query+0x194>
 800431e:	4aa1      	ldr	r2, [pc, #644]	; (80045a4 <rndis_query+0x2fc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	f200 8092 	bhi.w	800444a <rndis_query+0x1a2>
 8004326:	e0bc      	b.n	80044a2 <rndis_query+0x1fa>
 8004328:	4a9f      	ldr	r2, [pc, #636]	; (80045a8 <rndis_query+0x300>)
 800432a:	4293      	cmp	r3, r2
 800432c:	f000 80de 	beq.w	80044ec <rndis_query+0x244>
 8004330:	4a9e      	ldr	r2, [pc, #632]	; (80045ac <rndis_query+0x304>)
 8004332:	4293      	cmp	r3, r2
 8004334:	f000 80bc 	beq.w	80044b0 <rndis_query+0x208>
 8004338:	4a9d      	ldr	r2, [pc, #628]	; (80045b0 <rndis_query+0x308>)
 800433a:	4293      	cmp	r3, r2
 800433c:	f000 80a3 	beq.w	8004486 <rndis_query+0x1de>
 8004340:	e112      	b.n	8004568 <rndis_query+0x2c0>
 8004342:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 8004346:	d054      	beq.n	80043f2 <rndis_query+0x14a>
 8004348:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
 800434c:	d81f      	bhi.n	800438e <rndis_query+0xe6>
 800434e:	4a99      	ldr	r2, [pc, #612]	; (80045b4 <rndis_query+0x30c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	f000 80eb 	beq.w	800452c <rndis_query+0x284>
 8004356:	4a97      	ldr	r2, [pc, #604]	; (80045b4 <rndis_query+0x30c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d80b      	bhi.n	8004374 <rndis_query+0xcc>
 800435c:	4a96      	ldr	r2, [pc, #600]	; (80045b8 <rndis_query+0x310>)
 800435e:	4293      	cmp	r3, r2
 8004360:	f000 80ac 	beq.w	80044bc <rndis_query+0x214>
 8004364:	4a95      	ldr	r2, [pc, #596]	; (80045bc <rndis_query+0x314>)
 8004366:	4293      	cmp	r3, r2
 8004368:	f000 80d8 	beq.w	800451c <rndis_query+0x274>
 800436c:	4a94      	ldr	r2, [pc, #592]	; (80045c0 <rndis_query+0x318>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d052      	beq.n	8004418 <rndis_query+0x170>
 8004372:	e0f9      	b.n	8004568 <rndis_query+0x2c0>
 8004374:	4a93      	ldr	r2, [pc, #588]	; (80045c4 <rndis_query+0x31c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	f000 80e0 	beq.w	800453c <rndis_query+0x294>
 800437c:	4a91      	ldr	r2, [pc, #580]	; (80045c4 <rndis_query+0x31c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	f0c0 80e4 	bcc.w	800454c <rndis_query+0x2a4>
 8004384:	4a90      	ldr	r2, [pc, #576]	; (80045c8 <rndis_query+0x320>)
 8004386:	4293      	cmp	r3, r2
 8004388:	f000 80e8 	beq.w	800455c <rndis_query+0x2b4>
 800438c:	e0ec      	b.n	8004568 <rndis_query+0x2c0>
 800438e:	4a8f      	ldr	r2, [pc, #572]	; (80045cc <rndis_query+0x324>)
 8004390:	4293      	cmp	r3, r2
 8004392:	f000 80a5 	beq.w	80044e0 <rndis_query+0x238>
 8004396:	4a8d      	ldr	r2, [pc, #564]	; (80045cc <rndis_query+0x324>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d808      	bhi.n	80043ae <rndis_query+0x106>
 800439c:	4a8c      	ldr	r2, [pc, #560]	; (80045d0 <rndis_query+0x328>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	f000 8098 	beq.w	80044d4 <rndis_query+0x22c>
 80043a4:	4a8a      	ldr	r2, [pc, #552]	; (80045d0 <rndis_query+0x328>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	f200 808e 	bhi.w	80044c8 <rndis_query+0x220>
 80043ac:	e01a      	b.n	80043e4 <rndis_query+0x13c>
 80043ae:	4a89      	ldr	r2, [pc, #548]	; (80045d4 <rndis_query+0x32c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	f000 80a7 	beq.w	8004504 <rndis_query+0x25c>
 80043b6:	4a88      	ldr	r2, [pc, #544]	; (80045d8 <rndis_query+0x330>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	f000 80a9 	beq.w	8004510 <rndis_query+0x268>
 80043be:	4a87      	ldr	r2, [pc, #540]	; (80045dc <rndis_query+0x334>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	f000 8099 	beq.w	80044f8 <rndis_query+0x250>
 80043c6:	e0cf      	b.n	8004568 <rndis_query+0x2c0>
		case OID_GEN_SUPPORTED_LIST:         rndis_query_cmplt(pdev, RNDIS_STATUS_SUCCESS, OIDSupportedList, 4 * OID_LIST_LENGTH); return;
 80043c8:	2358      	movs	r3, #88	; 0x58
 80043ca:	4a85      	ldr	r2, [pc, #532]	; (80045e0 <rndis_query+0x338>)
 80043cc:	2100      	movs	r1, #0
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f918 	bl	8004604 <rndis_query_cmplt>
 80043d4:	e0cf      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_VENDOR_DRIVER_VERSION:  rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0x00001000);  return;
 80043d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043da:	2100      	movs	r1, #0
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f943 	bl	8004668 <rndis_query_cmplt32>
 80043e2:	e0c8      	b.n	8004576 <rndis_query+0x2ce>
		case OID_802_3_CURRENT_ADDRESS:      rndis_query_cmplt(pdev, RNDIS_STATUS_SUCCESS, &station_hwaddr, 6); return;
 80043e4:	2306      	movs	r3, #6
 80043e6:	4a7f      	ldr	r2, [pc, #508]	; (80045e4 <rndis_query+0x33c>)
 80043e8:	2100      	movs	r1, #0
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f90a 	bl	8004604 <rndis_query_cmplt>
 80043f0:	e0c1      	b.n	8004576 <rndis_query+0x2ce>
		case OID_802_3_PERMANENT_ADDRESS:    rndis_query_cmplt(pdev, RNDIS_STATUS_SUCCESS, &permanent_hwaddr, 6); return;
 80043f2:	2306      	movs	r3, #6
 80043f4:	4a7c      	ldr	r2, [pc, #496]	; (80045e8 <rndis_query+0x340>)
 80043f6:	2100      	movs	r1, #0
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f903 	bl	8004604 <rndis_query_cmplt>
 80043fe:	e0ba      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_MEDIA_SUPPORTED:        rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 8004400:	2200      	movs	r2, #0
 8004402:	2100      	movs	r1, #0
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f92f 	bl	8004668 <rndis_query_cmplt32>
 800440a:	e0b4      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_MEDIA_IN_USE:           rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 800440c:	2200      	movs	r2, #0
 800440e:	2100      	movs	r1, #0
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f929 	bl	8004668 <rndis_query_cmplt32>
 8004416:	e0ae      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_PHYSICAL_MEDIUM:        rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 8004418:	2200      	movs	r2, #0
 800441a:	2100      	movs	r1, #0
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f923 	bl	8004668 <rndis_query_cmplt32>
 8004422:	e0a8      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_HARDWARE_STATUS:        rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 8004424:	2200      	movs	r2, #0
 8004426:	2100      	movs	r1, #0
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f91d 	bl	8004668 <rndis_query_cmplt32>
 800442e:	e0a2      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_LINK_SPEED:             rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, RNDIS_LINK_SPEED / 100); return;
 8004430:	4a6e      	ldr	r2, [pc, #440]	; (80045ec <rndis_query+0x344>)
 8004432:	2100      	movs	r1, #0
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f917 	bl	8004668 <rndis_query_cmplt32>
 800443a:	e09c      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_VENDOR_ID:              rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0x00FFFFFF); return;
 800443c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8004440:	2100      	movs	r1, #0
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f910 	bl	8004668 <rndis_query_cmplt32>
 8004448:	e095      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_VENDOR_DESCRIPTION:     rndis_query_cmplt(pdev, RNDIS_STATUS_SUCCESS, rndis_vendor, strlen(rndis_vendor) + 1); return;
 800444a:	4b69      	ldr	r3, [pc, #420]	; (80045f0 <rndis_query+0x348>)
 800444c:	681c      	ldr	r4, [r3, #0]
 800444e:	4b68      	ldr	r3, [pc, #416]	; (80045f0 <rndis_query+0x348>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f7fb fec4 	bl	80001e0 <strlen>
 8004458:	4603      	mov	r3, r0
 800445a:	3301      	adds	r3, #1
 800445c:	4622      	mov	r2, r4
 800445e:	2100      	movs	r1, #0
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f8cf 	bl	8004604 <rndis_query_cmplt>
 8004466:	e086      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_CURRENT_PACKET_FILTER:  rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, oid_packet_filter); return;
 8004468:	4b62      	ldr	r3, [pc, #392]	; (80045f4 <rndis_query+0x34c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	2100      	movs	r1, #0
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f8f9 	bl	8004668 <rndis_query_cmplt32>
 8004476:	e07e      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_MAXIMUM_FRAME_SIZE:     rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE - ETH_HEADER_SIZE); return;
 8004478:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800447c:	2100      	movs	r1, #0
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f8f2 	bl	8004668 <rndis_query_cmplt32>
 8004484:	e077      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_MAXIMUM_TOTAL_SIZE:     rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE); return;
 8004486:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800448a:	2100      	movs	r1, #0
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f8eb 	bl	8004668 <rndis_query_cmplt32>
 8004492:	e070      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_TRANSMIT_BLOCK_SIZE:    rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE); return;
 8004494:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8004498:	2100      	movs	r1, #0
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f8e4 	bl	8004668 <rndis_query_cmplt32>
 80044a0:	e069      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_RECEIVE_BLOCK_SIZE:     rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE); return;
 80044a2:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80044a6:	2100      	movs	r1, #0
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f8dd 	bl	8004668 <rndis_query_cmplt32>
 80044ae:	e062      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_MEDIA_CONNECT_STATUS:   rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, NDIS_MEDIA_STATE_CONNECTED); return;
 80044b0:	2200      	movs	r2, #0
 80044b2:	2100      	movs	r1, #0
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f8d7 	bl	8004668 <rndis_query_cmplt32>
 80044ba:	e05c      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_RNDIS_CONFIG_PARAMETER: rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 80044bc:	2200      	movs	r2, #0
 80044be:	2100      	movs	r1, #0
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f8d1 	bl	8004668 <rndis_query_cmplt32>
 80044c6:	e056      	b.n	8004576 <rndis_query+0x2ce>
		case OID_802_3_MAXIMUM_LIST_SIZE:    rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 1); return;
 80044c8:	2201      	movs	r2, #1
 80044ca:	2100      	movs	r1, #0
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f8cb 	bl	8004668 <rndis_query_cmplt32>
 80044d2:	e050      	b.n	8004576 <rndis_query+0x2ce>
		case OID_802_3_MULTICAST_LIST:       rndis_query_cmplt32(pdev, RNDIS_STATUS_NOT_SUPPORTED, 0); return;
 80044d4:	2200      	movs	r2, #0
 80044d6:	4948      	ldr	r1, [pc, #288]	; (80045f8 <rndis_query+0x350>)
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f8c5 	bl	8004668 <rndis_query_cmplt32>
 80044de:	e04a      	b.n	8004576 <rndis_query+0x2ce>
		case OID_802_3_MAC_OPTIONS:          rndis_query_cmplt32(pdev, RNDIS_STATUS_NOT_SUPPORTED, 0); return;
 80044e0:	2200      	movs	r2, #0
 80044e2:	4945      	ldr	r1, [pc, #276]	; (80045f8 <rndis_query+0x350>)
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f8bf 	bl	8004668 <rndis_query_cmplt32>
 80044ea:	e044      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_MAC_OPTIONS:            rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, /*MAC_OPT*/ 0); return;
 80044ec:	2200      	movs	r2, #0
 80044ee:	2100      	movs	r1, #0
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f8b9 	bl	8004668 <rndis_query_cmplt32>
 80044f6:	e03e      	b.n	8004576 <rndis_query+0x2ce>
		case OID_802_3_RCV_ERROR_ALIGNMENT:  rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 80044f8:	2200      	movs	r2, #0
 80044fa:	2100      	movs	r1, #0
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f8b3 	bl	8004668 <rndis_query_cmplt32>
 8004502:	e038      	b.n	8004576 <rndis_query+0x2ce>
		case OID_802_3_XMIT_ONE_COLLISION:   rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 8004504:	2200      	movs	r2, #0
 8004506:	2100      	movs	r1, #0
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f8ad 	bl	8004668 <rndis_query_cmplt32>
 800450e:	e032      	b.n	8004576 <rndis_query+0x2ce>
		case OID_802_3_XMIT_MORE_COLLISIONS: rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 8004510:	2200      	movs	r2, #0
 8004512:	2100      	movs	r1, #0
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f8a7 	bl	8004668 <rndis_query_cmplt32>
 800451a:	e02c      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_XMIT_OK:                rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, usb_eth_stat.txok); return;
 800451c:	4b37      	ldr	r3, [pc, #220]	; (80045fc <rndis_query+0x354>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	2100      	movs	r1, #0
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f89f 	bl	8004668 <rndis_query_cmplt32>
 800452a:	e024      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_RCV_OK:                 rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, usb_eth_stat.rxok); return;
 800452c:	4b33      	ldr	r3, [pc, #204]	; (80045fc <rndis_query+0x354>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	461a      	mov	r2, r3
 8004532:	2100      	movs	r1, #0
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f897 	bl	8004668 <rndis_query_cmplt32>
 800453a:	e01c      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_RCV_ERROR:              rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, usb_eth_stat.rxbad); return;
 800453c:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <rndis_query+0x354>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	461a      	mov	r2, r3
 8004542:	2100      	movs	r1, #0
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f88f 	bl	8004668 <rndis_query_cmplt32>
 800454a:	e014      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_XMIT_ERROR:             rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, usb_eth_stat.txbad); return;
 800454c:	4b2b      	ldr	r3, [pc, #172]	; (80045fc <rndis_query+0x354>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	461a      	mov	r2, r3
 8004552:	2100      	movs	r1, #0
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f887 	bl	8004668 <rndis_query_cmplt32>
 800455a:	e00c      	b.n	8004576 <rndis_query+0x2ce>
		case OID_GEN_RCV_NO_BUFFER:          rndis_query_cmplt32(pdev, RNDIS_STATUS_SUCCESS, 0); return;
 800455c:	2200      	movs	r2, #0
 800455e:	2100      	movs	r1, #0
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f881 	bl	8004668 <rndis_query_cmplt32>
 8004566:	e006      	b.n	8004576 <rndis_query+0x2ce>
		default:                             rndis_query_cmplt(pdev, RNDIS_STATUS_FAILURE, NULL, 0); return;
 8004568:	2300      	movs	r3, #0
 800456a:	2200      	movs	r2, #0
 800456c:	4924      	ldr	r1, [pc, #144]	; (8004600 <rndis_query+0x358>)
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f848 	bl	8004604 <rndis_query_cmplt>
 8004574:	bf00      	nop
	}
}
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	bd90      	pop	{r4, r7, pc}
 800457c:	200051ac 	.word	0x200051ac
 8004580:	00010116 	.word	0x00010116
 8004584:	0001010a 	.word	0x0001010a
 8004588:	00010103 	.word	0x00010103
 800458c:	00010101 	.word	0x00010101
 8004590:	00010102 	.word	0x00010102
 8004594:	00010106 	.word	0x00010106
 8004598:	00010107 	.word	0x00010107
 800459c:	00010104 	.word	0x00010104
 80045a0:	0001010e 	.word	0x0001010e
 80045a4:	0001010c 	.word	0x0001010c
 80045a8:	00010113 	.word	0x00010113
 80045ac:	00010114 	.word	0x00010114
 80045b0:	00010111 	.word	0x00010111
 80045b4:	00020102 	.word	0x00020102
 80045b8:	0001021b 	.word	0x0001021b
 80045bc:	00020101 	.word	0x00020101
 80045c0:	00010202 	.word	0x00010202
 80045c4:	00020104 	.word	0x00020104
 80045c8:	00020105 	.word	0x00020105
 80045cc:	01010105 	.word	0x01010105
 80045d0:	01010103 	.word	0x01010103
 80045d4:	01020102 	.word	0x01020102
 80045d8:	01020103 	.word	0x01020103
 80045dc:	01020101 	.word	0x01020101
 80045e0:	08010e84 	.word	0x08010e84
 80045e4:	08010edc 	.word	0x08010edc
 80045e8:	08010ee4 	.word	0x08010ee4
 80045ec:	0001d4c0 	.word	0x0001d4c0
 80045f0:	20000094 	.word	0x20000094
 80045f4:	200002f0 	.word	0x200002f0
 80045f8:	c00000bb 	.word	0xc00000bb
 80045fc:	200002e0 	.word	0x200002e0
 8004600:	c0000001 	.word	0xc0000001

08004604 <rndis_query_cmplt>:

void rndis_query_cmplt(void *pdev, int status, const void *data, int size){
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	603b      	str	r3, [r7, #0]
	rndis_query_cmplt_t *c;
	c = (rndis_query_cmplt_t *)encapsulated_buffer;
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <rndis_query_cmplt+0x58>)
 8004614:	617b      	str	r3, [r7, #20]
	c->MessageType = REMOTE_NDIS_QUERY_CMPLT;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	4a11      	ldr	r2, [pc, #68]	; (8004660 <rndis_query_cmplt+0x5c>)
 800461a:	601a      	str	r2, [r3, #0]
	c->MessageLength = sizeof(rndis_query_cmplt_t) + size;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	f103 0218 	add.w	r2, r3, #24
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	605a      	str	r2, [r3, #4]
	c->InformationBufferLength = size;
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	611a      	str	r2, [r3, #16]
	c->InformationBufferOffset = 16;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2210      	movs	r2, #16
 8004630:	615a      	str	r2, [r3, #20]
	c->Status = status;
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	60da      	str	r2, [r3, #12]
	memcpy(c + 1, data, size);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	3318      	adds	r3, #24
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4618      	mov	r0, r3
 8004642:	f00c fa3a 	bl	8010aba <memcpy>
	USBD_LL_Transmit(pdev, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 8004646:	2308      	movs	r3, #8
 8004648:	4a06      	ldr	r2, [pc, #24]	; (8004664 <rndis_query_cmplt+0x60>)
 800464a:	2181      	movs	r1, #129	; 0x81
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f00c f89f 	bl	8010790 <USBD_LL_Transmit>
}
 8004652:	bf00      	nop
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	200051ac 	.word	0x200051ac
 8004660:	80000004 	.word	0x80000004
 8004664:	08010d94 	.word	0x08010d94

08004668 <rndis_query_cmplt32>:

void rndis_query_cmplt32(void *pdev, int status, uint32_t data){
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
	rndis_query_cmplt_t *c;
	c = (rndis_query_cmplt_t *)encapsulated_buffer;
 8004674:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <rndis_query_cmplt32+0x4c>)
 8004676:	617b      	str	r3, [r7, #20]
	c->MessageType = REMOTE_NDIS_QUERY_CMPLT;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	4a0f      	ldr	r2, [pc, #60]	; (80046b8 <rndis_query_cmplt32+0x50>)
 800467c:	601a      	str	r2, [r3, #0]
	c->MessageLength = sizeof(rndis_query_cmplt_t) + 4;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	221c      	movs	r2, #28
 8004682:	605a      	str	r2, [r3, #4]
	c->InformationBufferLength = 4;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2204      	movs	r2, #4
 8004688:	611a      	str	r2, [r3, #16]
	c->InformationBufferOffset = 16;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2210      	movs	r2, #16
 800468e:	615a      	str	r2, [r3, #20]
	c->Status = status;
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	60da      	str	r2, [r3, #12]
	*(uint32_t *)(c + 1) = data;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	3318      	adds	r3, #24
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	601a      	str	r2, [r3, #0]
	USBD_LL_Transmit(pdev, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 800469e:	2308      	movs	r3, #8
 80046a0:	4a06      	ldr	r2, [pc, #24]	; (80046bc <rndis_query_cmplt32+0x54>)
 80046a2:	2181      	movs	r1, #129	; 0x81
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f00c f873 	bl	8010790 <USBD_LL_Transmit>
}
 80046aa:	bf00      	nop
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	200051ac 	.word	0x200051ac
 80046b8:	80000004 	.word	0x80000004
 80046bc:	08010d94 	.word	0x08010d94

080046c0 <rndis_handle_set_msg>:
#define PARMNAME  ((uint8_t *)CFGBUF + CFGBUF->ParameterNameOffset)
#define PARMVALUE ((uint8_t *)CFGBUF + CFGBUF->ParameterValueOffset)
#define PARMVALUELENGTH	CFGBUF->ParameterValueLength
#define PARM_NAME_LENGTH 25 /* Maximum parameter name length */

void rndis_handle_set_msg(void  *pdev){
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	rndis_set_cmplt_t *c;
	rndis_set_msg_t *m;
	rndis_Oid_t oid;

	c = (rndis_set_cmplt_t *)encapsulated_buffer;
 80046c8:	4b2c      	ldr	r3, [pc, #176]	; (800477c <rndis_handle_set_msg+0xbc>)
 80046ca:	61fb      	str	r3, [r7, #28]
	m = (rndis_set_msg_t *)encapsulated_buffer;
 80046cc:	4b2b      	ldr	r3, [pc, #172]	; (800477c <rndis_handle_set_msg+0xbc>)
 80046ce:	61bb      	str	r3, [r7, #24]
		parmlength -= 2;
		i++;
	}
	*/

	oid = m->Oid;
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	617b      	str	r3, [r7, #20]
	c->MessageType = REMOTE_NDIS_SET_CMPLT;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	4a29      	ldr	r2, [pc, #164]	; (8004780 <rndis_handle_set_msg+0xc0>)
 80046da:	601a      	str	r2, [r3, #0]
	c->MessageLength = sizeof(rndis_set_cmplt_t);
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	2210      	movs	r2, #16
 80046e0:	605a      	str	r2, [r3, #4]
	c->Status = RNDIS_STATUS_SUCCESS;
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	2200      	movs	r2, #0
 80046e6:	60da      	str	r2, [r3, #12]

	switch (oid)
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	4a26      	ldr	r2, [pc, #152]	; (8004784 <rndis_handle_set_msg+0xc4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d036      	beq.n	800475e <rndis_handle_set_msg+0x9e>
 80046f0:	4a24      	ldr	r2, [pc, #144]	; (8004784 <rndis_handle_set_msg+0xc4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d806      	bhi.n	8004704 <rndis_handle_set_msg+0x44>
 80046f6:	4a24      	ldr	r2, [pc, #144]	; (8004788 <rndis_handle_set_msg+0xc8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d017      	beq.n	800472c <rndis_handle_set_msg+0x6c>
 80046fc:	4a23      	ldr	r2, [pc, #140]	; (800478c <rndis_handle_set_msg+0xcc>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d02f      	beq.n	8004762 <rndis_handle_set_msg+0xa2>
 8004702:	e028      	b.n	8004756 <rndis_handle_set_msg+0x96>
 8004704:	4a22      	ldr	r2, [pc, #136]	; (8004790 <rndis_handle_set_msg+0xd0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d003      	beq.n	8004712 <rndis_handle_set_msg+0x52>
 800470a:	4a22      	ldr	r2, [pc, #136]	; (8004794 <rndis_handle_set_msg+0xd4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d02a      	beq.n	8004766 <rndis_handle_set_msg+0xa6>
 8004710:	e021      	b.n	8004756 <rndis_handle_set_msg+0x96>
	{
		/* Parameters set up in 'Advanced' tab */
		case OID_GEN_RNDIS_CONFIG_PARAMETER:
			{
                rndis_config_parameter_t *p;
				char *ptr = (char *)m;
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	613b      	str	r3, [r7, #16]
				ptr += sizeof(rndis_generic_msg_t);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	3308      	adds	r3, #8
 800471a:	613b      	str	r3, [r7, #16]
				ptr += m->InformationBufferOffset;
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4413      	add	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
				p = (rndis_config_parameter_t *)ptr;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	60fb      	str	r3, [r7, #12]
				//rndis_handle_config_parm(ptr, p->ParameterNameOffset, p->ParameterValueOffset, p->ParameterNameLength, p->ParameterValueLength);
			}
			break;
 800472a:	e01d      	b.n	8004768 <rndis_handle_set_msg+0xa8>

		/* Mandatory general OIDs */
		case OID_GEN_CURRENT_PACKET_FILTER:
			oid_packet_filter = *INFBUF;
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f103 0208 	add.w	r2, r3, #8
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	4413      	add	r3, r2
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a17      	ldr	r2, [pc, #92]	; (8004798 <rndis_handle_set_msg+0xd8>)
 800473c:	6013      	str	r3, [r2, #0]
			if (oid_packet_filter)
 800473e:	4b16      	ldr	r3, [pc, #88]	; (8004798 <rndis_handle_set_msg+0xd8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <rndis_handle_set_msg+0x8e>
			{
				//rndis_packetFilter(oid_packet_filter);
				rndis_state = rndis_data_initialized;
 8004746:	4b15      	ldr	r3, [pc, #84]	; (800479c <rndis_handle_set_msg+0xdc>)
 8004748:	2202      	movs	r2, #2
 800474a:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				rndis_state = rndis_initialized;
			}
			break;
 800474c:	e00c      	b.n	8004768 <rndis_handle_set_msg+0xa8>
				rndis_state = rndis_initialized;
 800474e:	4b13      	ldr	r3, [pc, #76]	; (800479c <rndis_handle_set_msg+0xdc>)
 8004750:	2201      	movs	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]
			break;
 8004754:	e008      	b.n	8004768 <rndis_handle_set_msg+0xa8>
		/* Power Managment: fails for now */
		case OID_PNP_ADD_WAKE_UP_PATTERN:
		case OID_PNP_REMOVE_WAKE_UP_PATTERN:
		case OID_PNP_ENABLE_WAKE_UP:
		default:
			c->Status = RNDIS_STATUS_FAILURE;
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	4a11      	ldr	r2, [pc, #68]	; (80047a0 <rndis_handle_set_msg+0xe0>)
 800475a:	60da      	str	r2, [r3, #12]
			break;
 800475c:	e004      	b.n	8004768 <rndis_handle_set_msg+0xa8>
			break;
 800475e:	bf00      	nop
 8004760:	e002      	b.n	8004768 <rndis_handle_set_msg+0xa8>
			break;
 8004762:	bf00      	nop
 8004764:	e000      	b.n	8004768 <rndis_handle_set_msg+0xa8>
			break;
 8004766:	bf00      	nop
	}

	/* c->MessageID is same as before */
	USBD_LL_Transmit(pdev, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 8004768:	2308      	movs	r3, #8
 800476a:	4a0e      	ldr	r2, [pc, #56]	; (80047a4 <rndis_handle_set_msg+0xe4>)
 800476c:	2181      	movs	r1, #129	; 0x81
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f00c f80e 	bl	8010790 <USBD_LL_Transmit>
	return;
 8004774:	bf00      	nop
}
 8004776:	3720      	adds	r7, #32
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	200051ac 	.word	0x200051ac
 8004780:	80000005 	.word	0x80000005
 8004784:	00010112 	.word	0x00010112
 8004788:	0001010e 	.word	0x0001010e
 800478c:	0001010f 	.word	0x0001010f
 8004790:	0001021b 	.word	0x0001021b
 8004794:	01010103 	.word	0x01010103
 8004798:	200002f0 	.word	0x200002f0
 800479c:	20005840 	.word	0x20005840
 80047a0:	c0000001 	.word	0xc0000001
 80047a4:	08010d94 	.word	0x08010d94

080047a8 <xNetworkInterfaceInitialise>:

BaseType_t xNetworkInterfaceInitialise( void )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af02      	add	r7, sp, #8
	xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, configMAX_PRIORITIES - 1, &xEMACTaskHandle );
 80047ae:	4b07      	ldr	r3, [pc, #28]	; (80047cc <xNetworkInterfaceInitialise+0x24>)
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	2306      	movs	r3, #6
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	2300      	movs	r3, #0
 80047b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047bc:	4904      	ldr	r1, [pc, #16]	; (80047d0 <xNetworkInterfaceInitialise+0x28>)
 80047be:	4805      	ldr	r0, [pc, #20]	; (80047d4 <xNetworkInterfaceInitialise+0x2c>)
 80047c0:	f002 fcb8 	bl	8007134 <xTaskCreate>

    return pdTRUE;
 80047c4:	2301      	movs	r3, #1
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	200002f8 	.word	0x200002f8
 80047d0:	08010da8 	.word	0x08010da8
 80047d4:	080048a9 	.word	0x080048a9

080047d8 <xNetworkInterfaceOutput>:

BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor, BaseType_t xReleaseAfterSend ){
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
    This example assumes SendData() is a peripheral driver library function that
    takes a pointer to the start of the data to be sent and the length of the
    data to be sent as two separate parameters.  The start of the data is located
    by pxDescriptor->pucEthernetBuffer.  The length of the data is located
    by pxDescriptor->xDataLength. */
	if (pxDescriptor->xDataLength <= 0 || pxDescriptor->xDataLength > ETH_MAX_PACKET_SIZE || rndis_tx_transmitting){
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d009      	beq.n	80047fe <xNetworkInterfaceOutput+0x26>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d803      	bhi.n	80047fe <xNetworkInterfaceOutput+0x26>
 80047f6:	4b0d      	ldr	r3, [pc, #52]	; (800482c <xNetworkInterfaceOutput+0x54>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <xNetworkInterfaceOutput+0x2a>
		return pdFALSE;
 80047fe:	2300      	movs	r3, #0
 8004800:	e00f      	b.n	8004822 <xNetworkInterfaceOutput+0x4a>
	}
	usbd_cdc_transfer( (uint8_t *) pxDescriptor->pucEthernetBuffer, pxDescriptor->xDataLength);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	b29b      	uxth	r3, r3
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f7ff fca4 	bl	800415c <usbd_cdc_transfer>

    /* Call the standard trace macro to log the send event. */
    iptraceNETWORK_INTERFACE_TRANSMIT();
	if( xReleaseAfterSend != pdFALSE ){
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <xNetworkInterfaceOutput+0x48>
        /* It is assumed SendData() copies the data out of the FreeRTOS+TCP Ethernet
        buffer.  The Ethernet buffer is therefore no longer needed, and must be
        freed for re-use. */
        vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f00b f99e 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
    }
    return pdTRUE;
 8004820:	2301      	movs	r3, #1
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	200002f4 	.word	0x200002f4

08004830 <rndis_rxproc>:

static void rndis_rxproc(const char *data, int size){
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
	memcpy((void *) rndis_rx_tcp_buffer, (void *) data, size);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	4814      	ldr	r0, [pc, #80]	; (8004894 <rndis_rxproc+0x64>)
 8004842:	f00c f93a 	bl	8010aba <memcpy>
	rndis_tx_tcp_size = size;
 8004846:	4a14      	ldr	r2, [pc, #80]	; (8004898 <rndis_rxproc+0x68>)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	6013      	str	r3, [r2, #0]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]

	/* Ethernet RX-Complete callback function, elsewhere declared as weak. */
	ulISREvents |= EMAC_IF_RX_EVENT;
 8004850:	4b12      	ldr	r3, [pc, #72]	; (800489c <rndis_rxproc+0x6c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	4a10      	ldr	r2, [pc, #64]	; (800489c <rndis_rxproc+0x6c>)
 800485a:	6013      	str	r3, [r2, #0]
	if( xEMACTaskHandle != NULL )
 800485c:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <rndis_rxproc+0x70>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d012      	beq.n	800488a <rndis_rxproc+0x5a>
	{
		vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 8004864:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <rndis_rxproc+0x70>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f107 020c 	add.w	r2, r7, #12
 800486c:	4611      	mov	r1, r2
 800486e:	4618      	mov	r0, r3
 8004870:	f003 fd2e 	bl	80082d0 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d007      	beq.n	800488a <rndis_rxproc+0x5a>
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <rndis_rxproc+0x74>)
 800487c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	f3bf 8f6f 	isb	sy
	}
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20005224 	.word	0x20005224
 8004898:	20000300 	.word	0x20000300
 800489c:	200002fc 	.word	0x200002fc
 80048a0:	200002f8 	.word	0x200002f8
 80048a4:	e000ed04 	.word	0xe000ed04

080048a8 <prvEMACHandlerTask>:
static void prvEMACHandlerTask( void *pvParameters )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	/* Used to indicate that xSendEventStructToIPTask() is being called because
	of an Ethernet receive event. */
	IPStackEvent_t xRxEvent;
    for( ;; )
    {
        ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 80048b0:	f04f 31ff 	mov.w	r1, #4294967295
 80048b4:	2000      	movs	r0, #0
 80048b6:	f003 fcc3 	bl	8008240 <ulTaskNotifyTake>
		xBytesReceived = rndis_tx_tcp_size;
 80048ba:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <prvEMACHandlerTask+0x7c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	617b      	str	r3, [r7, #20]
		if( xBytesReceived > 0 ){
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f4      	beq.n	80048b0 <prvEMACHandlerTask+0x8>
			/* Allocate a network buffer descriptor that points to a buffer
			large enough to hold the received frame.  As this is the simple
			rather than efficient example the received data will just be copied
			into this buffer. */
			pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( xBytesReceived, 0 );
 80048c6:	2100      	movs	r1, #0
 80048c8:	6978      	ldr	r0, [r7, #20]
 80048ca:	f00b f8cf 	bl	800fa6c <pxGetNetworkBufferWithDescriptor>
 80048ce:	6138      	str	r0, [r7, #16]

			if( pxBufferDescriptor != NULL )
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0ec      	beq.n	80048b0 <prvEMACHandlerTask+0x8>
				is assumed ReceiveData() is a peripheral driver function that
				copies the received data into a buffer passed in as the function's
				parameter.  Remember! While is is a simple robust technique -
				it is not efficient.  An example that uses a zero copy technique
				is provided further down this page. */
				memcpy((void *) pxBufferDescriptor->pucEthernetBuffer, (void *) rndis_rx_tcp_buffer, xBytesReceived);
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4912      	ldr	r1, [pc, #72]	; (8004928 <prvEMACHandlerTask+0x80>)
 80048de:	4618      	mov	r0, r3
 80048e0:	f00c f8eb 	bl	8010aba <memcpy>
				pxBufferDescriptor->xDataLength = xBytesReceived;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	61da      	str	r2, [r3, #28]

				/* See if the data contained in the received Ethernet frame needs
				to be processed.  NOTE! It is preferable to do this in
				the interrupt service routine itself, which would remove the need
				to unblock this task for packets that don't need processing. */
				if( eConsiderFrameForProcessing( pxBufferDescriptor->pucEthernetBuffer )
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f005 fd8e 	bl	800a410 <eConsiderFrameForProcessing>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d110      	bne.n	800491c <prvEMACHandlerTask+0x74>
																	  == eProcessBuffer ){
					/* The event about to be sent to the TCP/IP is an Rx event. */
					xRxEvent.eEventType = eNetworkRxEvent;
 80048fa:	2301      	movs	r3, #1
 80048fc:	723b      	strb	r3, [r7, #8]

					/* pvData is used to point to the network buffer descriptor that
					now references the received data. */
					xRxEvent.pvData = ( void * ) pxBufferDescriptor;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	60fb      	str	r3, [r7, #12]

					/* Send the data to the TCP/IP stack. */
					if( xSendEventStructToIPTask( &xRxEvent, 0 ) == pdFALSE )
 8004902:	f107 0308 	add.w	r3, r7, #8
 8004906:	2100      	movs	r1, #0
 8004908:	4618      	mov	r0, r3
 800490a:	f005 fd37 	bl	800a37c <xSendEventStructToIPTask>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1cd      	bne.n	80048b0 <prvEMACHandlerTask+0x8>
					{
						/* The buffer could not be sent to the IP task so the buffer
						must be released. */
						vReleaseNetworkBufferAndDescriptor( pxBufferDescriptor );
 8004914:	6938      	ldr	r0, [r7, #16]
 8004916:	f00b f921 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
 800491a:	e7c9      	b.n	80048b0 <prvEMACHandlerTask+0x8>
				}
				else
				{
					/* The Ethernet frame can be dropped, but the Ethernet buffer
					must be released. */
					vReleaseNetworkBufferAndDescriptor( pxBufferDescriptor );
 800491c:	6938      	ldr	r0, [r7, #16]
 800491e:	f00b f91d 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
        ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 8004922:	e7c5      	b.n	80048b0 <prvEMACHandlerTask+0x8>
 8004924:	20000300 	.word	0x20000300
 8004928:	20005224 	.word	0x20005224

0800492c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	4613      	mov	r3, r2
 8004938:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8004940:	2302      	movs	r3, #2
 8004942:	e01a      	b.n	800497a <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	79fa      	ldrb	r2, [r7, #7]
 8004970:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f00b fd3e 	bl	80103f4 <USBD_LL_Init>
  
  return USBD_OK; 
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004982:	b480      	push	{r7}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d006      	beq.n	80049a4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	73fb      	strb	r3, [r7, #15]
 80049a2:	e001      	b.n	80049a8 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80049a4:	2302      	movs	r3, #2
 80049a6:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f00b fd72 	bl	80104a8 <USBD_LL_Start>
  
  return USBD_OK;  
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80049f0:	2302      	movs	r3, #2
 80049f2:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00c      	beq.n	8004a18 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	4611      	mov	r1, r2
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	4798      	blx	r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	78fa      	ldrb	r2, [r7, #3]
 8004a38:	4611      	mov	r1, r2
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	4798      	blx	r3
  return USBD_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a58:	6839      	ldr	r1, [r7, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fd99 	bl	8005592 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8004a6e:	461a      	mov	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d00b      	beq.n	8004a9c <USBD_LL_SetupStage+0x54>
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d011      	beq.n	8004aac <USBD_LL_SetupStage+0x64>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d117      	bne.n	8004abc <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a92:	4619      	mov	r1, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f9c7 	bl	8004e28 <USBD_StdDevReq>
    break;
 8004a9a:	e01a      	b.n	8004ad2 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fa0f 	bl	8004ec8 <USBD_StdItfReq>
    break;
 8004aaa:	e012      	b.n	8004ad2 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fa3a 	bl	8004f2e <USBD_StdEPReq>
    break;
 8004aba:	e00a      	b.n	8004ad2 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004ac2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f00b fd92 	bl	80105f4 <USBD_LL_StallEP>
    break;
 8004ad0:	bf00      	nop
  }  
  return USBD_OK;  
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004aea:	7afb      	ldrb	r3, [r7, #11]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d138      	bne.n	8004b62 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004af6:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d142      	bne.n	8004b88 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d914      	bls.n	8004b38 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	1ad2      	subs	r2, r2, r3
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	4293      	cmp	r3, r2
 8004b26:	bf28      	it	cs
 8004b28:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 fe23 	bl	800577c <USBD_CtlContinueRx>
 8004b36:	e027      	b.n	8004b88 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d105      	bne.n	8004b5a <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 fe20 	bl	80057a0 <USBD_CtlSendStatus>
 8004b60:	e012      	b.n	8004b88 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00c      	beq.n	8004b88 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d107      	bne.n	8004b88 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	7afa      	ldrb	r2, [r7, #11]
 8004b82:	4611      	mov	r1, r2
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	4798      	blx	r3
  }  
  return USBD_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b086      	sub	sp, #24
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8004ba0:	7afb      	ldrb	r3, [r7, #11]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d16c      	bne.n	8004c80 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3314      	adds	r3, #20
 8004baa:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d157      	bne.n	8004c66 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d915      	bls.n	8004bee <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	1ad2      	subs	r2, r2, r3
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fd9e 	bl	800571c <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004be0:	2300      	movs	r3, #0
 8004be2:	2200      	movs	r2, #0
 8004be4:	2100      	movs	r1, #0
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f00b fe0c 	bl	8010804 <USBD_LL_PrepareReceive>
 8004bec:	e03b      	b.n	8004c66 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	68d2      	ldr	r2, [r2, #12]
 8004bf6:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bfa:	fb02 f201 	mul.w	r2, r2, r1
 8004bfe:	1a9b      	subs	r3, r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d11c      	bne.n	8004c3e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d316      	bcc.n	8004c3e <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d20f      	bcs.n	8004c3e <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004c1e:	2200      	movs	r2, #0
 8004c20:	2100      	movs	r1, #0
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 fd7a 	bl	800571c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004c30:	2300      	movs	r3, #0
 8004c32:	2200      	movs	r2, #0
 8004c34:	2100      	movs	r1, #0
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f00b fde4 	bl	8010804 <USBD_LL_PrepareReceive>
 8004c3c:	e013      	b.n	8004c66 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d105      	bne.n	8004c60 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 fdb0 	bl	80057c6 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d11a      	bne.n	8004ca6 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f7ff feac 	bl	80049ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8004c7e:	e012      	b.n	8004ca6 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00c      	beq.n	8004ca6 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d107      	bne.n	8004ca6 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	7afa      	ldrb	r2, [r7, #11]
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	4798      	blx	r3
  }  
  return USBD_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004cb8:	2340      	movs	r3, #64	; 0x40
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f00b fc24 	bl	801050c <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2240      	movs	r2, #64	; 0x40
 8004cc8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004ccc:	2340      	movs	r3, #64	; 0x40
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2180      	movs	r1, #128	; 0x80
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f00b fc1a 	bl	801050c <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2240      	movs	r2, #64	; 0x40
 8004cdc:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6852      	ldr	r2, [r2, #4]
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	4611      	mov	r1, r2
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
 
  
  return USBD_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	460b      	mov	r3, r1
 8004d18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	78fa      	ldrb	r2, [r7, #3]
 8004d1e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2204      	movs	r2, #4
 8004d46:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d10b      	bne.n	8004da4 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	460b      	mov	r3, r1
 8004db8:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6852      	ldr	r2, [r2, #4]
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	4611      	mov	r1, r2
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	4798      	blx	r3
   
  return USBD_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8004e32:	2300      	movs	r3, #0
 8004e34:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	785b      	ldrb	r3, [r3, #1]
 8004e3a:	2b09      	cmp	r3, #9
 8004e3c:	d839      	bhi.n	8004eb2 <USBD_StdDevReq+0x8a>
 8004e3e:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <USBD_StdDevReq+0x1c>)
 8004e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e44:	08004e95 	.word	0x08004e95
 8004e48:	08004ea9 	.word	0x08004ea9
 8004e4c:	08004eb3 	.word	0x08004eb3
 8004e50:	08004e9f 	.word	0x08004e9f
 8004e54:	08004eb3 	.word	0x08004eb3
 8004e58:	08004e77 	.word	0x08004e77
 8004e5c:	08004e6d 	.word	0x08004e6d
 8004e60:	08004eb3 	.word	0x08004eb3
 8004e64:	08004e8b 	.word	0x08004e8b
 8004e68:	08004e81 	.word	0x08004e81
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8004e6c:	6839      	ldr	r1, [r7, #0]
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f936 	bl	80050e0 <USBD_GetDescriptor>
    break;
 8004e74:	e022      	b.n	8004ebc <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8004e76:	6839      	ldr	r1, [r7, #0]
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fa25 	bl	80052c8 <USBD_SetAddress>
    break;
 8004e7e:	e01d      	b.n	8004ebc <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8004e80:	6839      	ldr	r1, [r7, #0]
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fa5e 	bl	8005344 <USBD_SetConfig>
    break;
 8004e88:	e018      	b.n	8004ebc <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8004e8a:	6839      	ldr	r1, [r7, #0]
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fae1 	bl	8005454 <USBD_GetConfig>
    break;
 8004e92:	e013      	b.n	8004ebc <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fb0e 	bl	80054b8 <USBD_GetStatus>
    break;
 8004e9c:	e00e      	b.n	8004ebc <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fb33 	bl	800550c <USBD_SetFeature>
    break;
 8004ea6:	e009      	b.n	8004ebc <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8004ea8:	6839      	ldr	r1, [r7, #0]
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fb49 	bl	8005542 <USBD_ClrFeature>
    break;
 8004eb0:	e004      	b.n	8004ebc <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8004eb2:	6839      	ldr	r1, [r7, #0]
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fba9 	bl	800560c <USBD_CtlError>
    break;
 8004eba:	bf00      	nop
  }
  
  return ret;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop

08004ec8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d11b      	bne.n	8004f18 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	889b      	ldrh	r3, [r3, #4]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d811      	bhi.n	8004f0e <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	6839      	ldr	r1, [r7, #0]
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	88db      	ldrh	r3, [r3, #6]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d110      	bne.n	8004f22 <USBD_StdItfReq+0x5a>
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10d      	bne.n	8004f22 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fc4a 	bl	80057a0 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8004f0c:	e009      	b.n	8004f22 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8004f0e:	6839      	ldr	r1, [r7, #0]
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fb7b 	bl	800560c <USBD_CtlError>
    break;
 8004f16:	e004      	b.n	8004f22 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8004f18:	6839      	ldr	r1, [r7, #0]
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fb76 	bl	800560c <USBD_CtlError>
    break;
 8004f20:	e000      	b.n	8004f24 <USBD_StdItfReq+0x5c>
    break;
 8004f22:	bf00      	nop
  }
  return USBD_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8004f38:	2300      	movs	r3, #0
 8004f3a:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	889b      	ldrh	r3, [r3, #4]
 8004f40:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d108      	bne.n	8004f60 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	4798      	blx	r3
    
    return USBD_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	e0ba      	b.n	80050d6 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	785b      	ldrb	r3, [r3, #1]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d039      	beq.n	8004fdc <USBD_StdEPReq+0xae>
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d002      	beq.n	8004f72 <USBD_StdEPReq+0x44>
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d06b      	beq.n	8005048 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8004f70:	e0b0      	b.n	80050d4 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d002      	beq.n	8004f82 <USBD_StdEPReq+0x54>
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d00c      	beq.n	8004f9a <USBD_StdEPReq+0x6c>
 8004f80:	e025      	b.n	8004fce <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004f82:	7bbb      	ldrb	r3, [r7, #14]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d027      	beq.n	8004fd8 <USBD_StdEPReq+0xaa>
 8004f88:	7bbb      	ldrb	r3, [r7, #14]
 8004f8a:	2b80      	cmp	r3, #128	; 0x80
 8004f8c:	d024      	beq.n	8004fd8 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8004f8e:	7bbb      	ldrb	r3, [r7, #14]
 8004f90:	4619      	mov	r1, r3
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f00b fb2e 	bl	80105f4 <USBD_LL_StallEP>
      break;	
 8004f98:	e01e      	b.n	8004fd8 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	885b      	ldrh	r3, [r3, #2]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004fa2:	7bbb      	ldrb	r3, [r7, #14]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <USBD_StdEPReq+0x8a>
 8004fa8:	7bbb      	ldrb	r3, [r7, #14]
 8004faa:	2b80      	cmp	r3, #128	; 0x80
 8004fac:	d004      	beq.n	8004fb8 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8004fae:	7bbb      	ldrb	r3, [r7, #14]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f00b fb1e 	bl	80105f4 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fbea 	bl	80057a0 <USBD_CtlSendStatus>
      break;
 8004fcc:	e005      	b.n	8004fda <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fb1b 	bl	800560c <USBD_CtlError>
      break;    
 8004fd6:	e000      	b.n	8004fda <USBD_StdEPReq+0xac>
      break;	
 8004fd8:	bf00      	nop
    break;
 8004fda:	e07b      	b.n	80050d4 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d002      	beq.n	8004fec <USBD_StdEPReq+0xbe>
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d00c      	beq.n	8005004 <USBD_StdEPReq+0xd6>
 8004fea:	e024      	b.n	8005036 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004fec:	7bbb      	ldrb	r3, [r7, #14]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d026      	beq.n	8005040 <USBD_StdEPReq+0x112>
 8004ff2:	7bbb      	ldrb	r3, [r7, #14]
 8004ff4:	2b80      	cmp	r3, #128	; 0x80
 8004ff6:	d023      	beq.n	8005040 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8004ff8:	7bbb      	ldrb	r3, [r7, #14]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f00b faf9 	bl	80105f4 <USBD_LL_StallEP>
      break;	
 8005002:	e01d      	b.n	8005040 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	885b      	ldrh	r3, [r3, #2]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d11b      	bne.n	8005044 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 800500c:	7bbb      	ldrb	r3, [r7, #14]
 800500e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00b      	beq.n	800502e <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8005016:	7bbb      	ldrb	r3, [r7, #14]
 8005018:	4619      	mov	r1, r3
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f00b fb20 	bl	8010660 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	6839      	ldr	r1, [r7, #0]
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fbb6 	bl	80057a0 <USBD_CtlSendStatus>
      break;
 8005034:	e006      	b.n	8005044 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8005036:	6839      	ldr	r1, [r7, #0]
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fae7 	bl	800560c <USBD_CtlError>
      break;    
 800503e:	e002      	b.n	8005046 <USBD_StdEPReq+0x118>
      break;	
 8005040:	bf00      	nop
 8005042:	e047      	b.n	80050d4 <USBD_StdEPReq+0x1a6>
      break;
 8005044:	bf00      	nop
    break;
 8005046:	e045      	b.n	80050d4 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800504e:	2b02      	cmp	r3, #2
 8005050:	d002      	beq.n	8005058 <USBD_StdEPReq+0x12a>
 8005052:	2b03      	cmp	r3, #3
 8005054:	d00b      	beq.n	800506e <USBD_StdEPReq+0x140>
 8005056:	e036      	b.n	80050c6 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8005058:	7bbb      	ldrb	r3, [r7, #14]
 800505a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800505e:	2b00      	cmp	r3, #0
 8005060:	d036      	beq.n	80050d0 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8005062:	7bbb      	ldrb	r3, [r7, #14]
 8005064:	4619      	mov	r1, r3
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f00b fac4 	bl	80105f4 <USBD_LL_StallEP>
      break;	
 800506c:	e030      	b.n	80050d0 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800506e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005072:	2b00      	cmp	r3, #0
 8005074:	da08      	bge.n	8005088 <USBD_StdEPReq+0x15a>
 8005076:	7bbb      	ldrb	r3, [r7, #14]
 8005078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800507c:	3301      	adds	r3, #1
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	4413      	add	r3, r2
 8005084:	3304      	adds	r3, #4
 8005086:	e007      	b.n	8005098 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8005088:	7bbb      	ldrb	r3, [r7, #14]
 800508a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800508e:	3310      	adds	r3, #16
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4413      	add	r3, r2
 8005096:	3304      	adds	r3, #4
 8005098:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800509a:	7bbb      	ldrb	r3, [r7, #14]
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f00b fb14 	bl	80106cc <USBD_LL_IsStallEP>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2201      	movs	r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e002      	b.n	80050b8 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 80050b8:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 80050ba:	2202      	movs	r2, #2
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fb10 	bl	80056e4 <USBD_CtlSendData>
      break;
 80050c4:	e005      	b.n	80050d2 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 80050c6:	6839      	ldr	r1, [r7, #0]
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fa9f 	bl	800560c <USBD_CtlError>
      break;
 80050ce:	e000      	b.n	80050d2 <USBD_StdEPReq+0x1a4>
      break;	
 80050d0:	bf00      	nop
    break;
 80050d2:	bf00      	nop
  }
  return ret;
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	885b      	ldrh	r3, [r3, #2]
 80050ee:	0a1b      	lsrs	r3, r3, #8
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	2b06      	cmp	r3, #6
 80050f6:	f200 80c9 	bhi.w	800528c <USBD_GetDescriptor+0x1ac>
 80050fa:	a201      	add	r2, pc, #4	; (adr r2, 8005100 <USBD_GetDescriptor+0x20>)
 80050fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005100:	0800511d 	.word	0x0800511d
 8005104:	08005135 	.word	0x08005135
 8005108:	08005175 	.word	0x08005175
 800510c:	0800528d 	.word	0x0800528d
 8005110:	0800528d 	.word	0x0800528d
 8005114:	08005239 	.word	0x08005239
 8005118:	0800525f 	.word	0x0800525f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	7c12      	ldrb	r2, [r2, #16]
 8005128:	f107 010a 	add.w	r1, r7, #10
 800512c:	4610      	mov	r0, r2
 800512e:	4798      	blx	r3
 8005130:	60f8      	str	r0, [r7, #12]
    break;
 8005132:	e0b0      	b.n	8005296 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	7c1b      	ldrb	r3, [r3, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10d      	bne.n	8005158 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	f107 020a 	add.w	r2, r7, #10
 8005148:	4610      	mov	r0, r2
 800514a:	4798      	blx	r3
 800514c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3301      	adds	r3, #1
 8005152:	2202      	movs	r2, #2
 8005154:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005156:	e09e      	b.n	8005296 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	f107 020a 	add.w	r2, r7, #10
 8005164:	4610      	mov	r0, r2
 8005166:	4798      	blx	r3
 8005168:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3301      	adds	r3, #1
 800516e:	2202      	movs	r2, #2
 8005170:	701a      	strb	r2, [r3, #0]
    break;
 8005172:	e090      	b.n	8005296 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	885b      	ldrh	r3, [r3, #2]
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b05      	cmp	r3, #5
 800517c:	d856      	bhi.n	800522c <USBD_GetDescriptor+0x14c>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <USBD_GetDescriptor+0xa4>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	0800519d 	.word	0x0800519d
 8005188:	080051b5 	.word	0x080051b5
 800518c:	080051cd 	.word	0x080051cd
 8005190:	080051e5 	.word	0x080051e5
 8005194:	080051fd 	.word	0x080051fd
 8005198:	08005215 	.word	0x08005215
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	7c12      	ldrb	r2, [r2, #16]
 80051a8:	f107 010a 	add.w	r1, r7, #10
 80051ac:	4610      	mov	r0, r2
 80051ae:	4798      	blx	r3
 80051b0:	60f8      	str	r0, [r7, #12]
      break;
 80051b2:	e040      	b.n	8005236 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	7c12      	ldrb	r2, [r2, #16]
 80051c0:	f107 010a 	add.w	r1, r7, #10
 80051c4:	4610      	mov	r0, r2
 80051c6:	4798      	blx	r3
 80051c8:	60f8      	str	r0, [r7, #12]
      break;
 80051ca:	e034      	b.n	8005236 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	7c12      	ldrb	r2, [r2, #16]
 80051d8:	f107 010a 	add.w	r1, r7, #10
 80051dc:	4610      	mov	r0, r2
 80051de:	4798      	blx	r3
 80051e0:	60f8      	str	r0, [r7, #12]
      break;
 80051e2:	e028      	b.n	8005236 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	7c12      	ldrb	r2, [r2, #16]
 80051f0:	f107 010a 	add.w	r1, r7, #10
 80051f4:	4610      	mov	r0, r2
 80051f6:	4798      	blx	r3
 80051f8:	60f8      	str	r0, [r7, #12]
      break;
 80051fa:	e01c      	b.n	8005236 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	7c12      	ldrb	r2, [r2, #16]
 8005208:	f107 010a 	add.w	r1, r7, #10
 800520c:	4610      	mov	r0, r2
 800520e:	4798      	blx	r3
 8005210:	60f8      	str	r0, [r7, #12]
      break;
 8005212:	e010      	b.n	8005236 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	7c12      	ldrb	r2, [r2, #16]
 8005220:	f107 010a 	add.w	r1, r7, #10
 8005224:	4610      	mov	r0, r2
 8005226:	4798      	blx	r3
 8005228:	60f8      	str	r0, [r7, #12]
      break;
 800522a:	e004      	b.n	8005236 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800522c:	6839      	ldr	r1, [r7, #0]
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f9ec 	bl	800560c <USBD_CtlError>
      return;
 8005234:	e044      	b.n	80052c0 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8005236:	e02e      	b.n	8005296 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	7c1b      	ldrb	r3, [r3, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d109      	bne.n	8005254 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005248:	f107 020a 	add.w	r2, r7, #10
 800524c:	4610      	mov	r0, r2
 800524e:	4798      	blx	r3
 8005250:	60f8      	str	r0, [r7, #12]
      break;
 8005252:	e020      	b.n	8005296 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f9d8 	bl	800560c <USBD_CtlError>
      return;
 800525c:	e030      	b.n	80052c0 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	7c1b      	ldrb	r3, [r3, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10d      	bne.n	8005282 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	f107 020a 	add.w	r2, r7, #10
 8005272:	4610      	mov	r0, r2
 8005274:	4798      	blx	r3
 8005276:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3301      	adds	r3, #1
 800527c:	2207      	movs	r2, #7
 800527e:	701a      	strb	r2, [r3, #0]
      break; 
 8005280:	e009      	b.n	8005296 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005282:	6839      	ldr	r1, [r7, #0]
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f9c1 	bl	800560c <USBD_CtlError>
      return;
 800528a:	e019      	b.n	80052c0 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 800528c:	6839      	ldr	r1, [r7, #0]
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f9bc 	bl	800560c <USBD_CtlError>
    return;
 8005294:	e014      	b.n	80052c0 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8005296:	897b      	ldrh	r3, [r7, #10]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d011      	beq.n	80052c0 <USBD_GetDescriptor+0x1e0>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	88db      	ldrh	r3, [r3, #6]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00d      	beq.n	80052c0 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	88da      	ldrh	r2, [r3, #6]
 80052a8:	897b      	ldrh	r3, [r7, #10]
 80052aa:	4293      	cmp	r3, r2
 80052ac:	bf28      	it	cs
 80052ae:	4613      	movcs	r3, r2
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 80052b4:	897b      	ldrh	r3, [r7, #10]
 80052b6:	461a      	mov	r2, r3
 80052b8:	68f9      	ldr	r1, [r7, #12]
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fa12 	bl	80056e4 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop

080052c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	889b      	ldrh	r3, [r3, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d12c      	bne.n	8005334 <USBD_SetAddress+0x6c>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	88db      	ldrh	r3, [r3, #6]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d128      	bne.n	8005334 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	885b      	ldrh	r3, [r3, #2]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ec:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d104      	bne.n	8005302 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 80052f8:	6839      	ldr	r1, [r7, #0]
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f986 	bl	800560c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005300:	e01c      	b.n	800533c <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	7bfa      	ldrb	r2, [r7, #15]
 8005306:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800530a:	7bfb      	ldrb	r3, [r7, #15]
 800530c:	4619      	mov	r1, r3
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f00b fa08 	bl	8010724 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fa43 	bl	80057a0 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d004      	beq.n	800532a <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005328:	e008      	b.n	800533c <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005332:	e003      	b.n	800533c <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8005334:	6839      	ldr	r1, [r7, #0]
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f968 	bl	800560c <USBD_CtlError>
  } 
}
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	885b      	ldrh	r3, [r3, #2]
 8005352:	b2da      	uxtb	r2, r3
 8005354:	4b3e      	ldr	r3, [pc, #248]	; (8005450 <USBD_SetConfig+0x10c>)
 8005356:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005358:	4b3d      	ldr	r3, [pc, #244]	; (8005450 <USBD_SetConfig+0x10c>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d904      	bls.n	800536a <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8005360:	6839      	ldr	r1, [r7, #0]
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f952 	bl	800560c <USBD_CtlError>
 8005368:	e06f      	b.n	800544a <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005370:	2b02      	cmp	r3, #2
 8005372:	d002      	beq.n	800537a <USBD_SetConfig+0x36>
 8005374:	2b03      	cmp	r3, #3
 8005376:	d023      	beq.n	80053c0 <USBD_SetConfig+0x7c>
 8005378:	e062      	b.n	8005440 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800537a:	4b35      	ldr	r3, [pc, #212]	; (8005450 <USBD_SetConfig+0x10c>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01a      	beq.n	80053b8 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8005382:	4b33      	ldr	r3, [pc, #204]	; (8005450 <USBD_SetConfig+0x10c>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2203      	movs	r2, #3
 8005390:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005394:	4b2e      	ldr	r3, [pc, #184]	; (8005450 <USBD_SetConfig+0x10c>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff fb22 	bl	80049e4 <USBD_SetClassConfig>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d104      	bne.n	80053b0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 80053a6:	6839      	ldr	r1, [r7, #0]
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f92f 	bl	800560c <USBD_CtlError>
          return;
 80053ae:	e04c      	b.n	800544a <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f9f5 	bl	80057a0 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80053b6:	e048      	b.n	800544a <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f9f1 	bl	80057a0 <USBD_CtlSendStatus>
      break;
 80053be:	e044      	b.n	800544a <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80053c0:	4b23      	ldr	r3, [pc, #140]	; (8005450 <USBD_SetConfig+0x10c>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d112      	bne.n	80053ee <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80053d0:	4b1f      	ldr	r3, [pc, #124]	; (8005450 <USBD_SetConfig+0x10c>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80053da:	4b1d      	ldr	r3, [pc, #116]	; (8005450 <USBD_SetConfig+0x10c>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff fb1e 	bl	8004a22 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f9da 	bl	80057a0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80053ec:	e02d      	b.n	800544a <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 80053ee:	4b18      	ldr	r3, [pc, #96]	; (8005450 <USBD_SetConfig+0x10c>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d01d      	beq.n	8005438 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	b2db      	uxtb	r3, r3
 8005402:	4619      	mov	r1, r3
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff fb0c 	bl	8004a22 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800540a:	4b11      	ldr	r3, [pc, #68]	; (8005450 <USBD_SetConfig+0x10c>)
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8005414:	4b0e      	ldr	r3, [pc, #56]	; (8005450 <USBD_SetConfig+0x10c>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff fae2 	bl	80049e4 <USBD_SetClassConfig>
 8005420:	4603      	mov	r3, r0
 8005422:	2b02      	cmp	r3, #2
 8005424:	d104      	bne.n	8005430 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8005426:	6839      	ldr	r1, [r7, #0]
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f8ef 	bl	800560c <USBD_CtlError>
          return;
 800542e:	e00c      	b.n	800544a <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f9b5 	bl	80057a0 <USBD_CtlSendStatus>
      break;
 8005436:	e008      	b.n	800544a <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f9b1 	bl	80057a0 <USBD_CtlSendStatus>
      break;
 800543e:	e004      	b.n	800544a <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f8e2 	bl	800560c <USBD_CtlError>
      break;
 8005448:	bf00      	nop
    }
  }
}
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	200008ee 	.word	0x200008ee

08005454 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	88db      	ldrh	r3, [r3, #6]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d004      	beq.n	8005470 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8005466:	6839      	ldr	r1, [r7, #0]
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f8cf 	bl	800560c <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800546e:	e01f      	b.n	80054b0 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005476:	2b02      	cmp	r3, #2
 8005478:	d002      	beq.n	8005480 <USBD_GetConfig+0x2c>
 800547a:	2b03      	cmp	r3, #3
 800547c:	d00b      	beq.n	8005496 <USBD_GetConfig+0x42>
 800547e:	e012      	b.n	80054a6 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 800548a:	2201      	movs	r2, #1
 800548c:	4619      	mov	r1, r3
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f928 	bl	80056e4 <USBD_CtlSendData>
      break;
 8005494:	e00c      	b.n	80054b0 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 800549a:	2201      	movs	r2, #1
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f920 	bl	80056e4 <USBD_CtlSendData>
      break;
 80054a4:	e004      	b.n	80054b0 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 80054a6:	6839      	ldr	r1, [r7, #0]
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f8af 	bl	800560c <USBD_CtlError>
      break;
 80054ae:	bf00      	nop
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80054c8:	3b02      	subs	r3, #2
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d815      	bhi.n	80054fa <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f043 0202 	orr.w	r2, r3, #2
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 80054ee:	2202      	movs	r2, #2
 80054f0:	4619      	mov	r1, r3
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f8f6 	bl	80056e4 <USBD_CtlSendData>
                      2);
    break;
 80054f8:	e004      	b.n	8005504 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 80054fa:	6839      	ldr	r1, [r7, #0]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f885 	bl	800560c <USBD_CtlError>
    break;
 8005502:	bf00      	nop
  }
}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	885b      	ldrh	r3, [r3, #2]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d10d      	bne.n	800553a <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f933 	bl	80057a0 <USBD_CtlSendStatus>
  }

}
 800553a:	bf00      	nop
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005552:	3b02      	subs	r3, #2
 8005554:	2b01      	cmp	r3, #1
 8005556:	d812      	bhi.n	800557e <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	885b      	ldrh	r3, [r3, #2]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d113      	bne.n	8005588 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	6839      	ldr	r1, [r7, #0]
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f912 	bl	80057a0 <USBD_CtlSendStatus>
    }
    break;
 800557c:	e004      	b.n	8005588 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f843 	bl	800560c <USBD_CtlError>
    break;
 8005586:	e000      	b.n	800558a <USBD_ClrFeature+0x48>
    break;
 8005588:	bf00      	nop
  }
}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781a      	ldrb	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	785a      	ldrb	r2, [r3, #1]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	3302      	adds	r3, #2
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	3303      	adds	r3, #3
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	b29b      	uxth	r3, r3
 80055c0:	4413      	add	r3, r2
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	3304      	adds	r3, #4
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	3305      	adds	r3, #5
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	021b      	lsls	r3, r3, #8
 80055da:	b29b      	uxth	r3, r3
 80055dc:	4413      	add	r3, r2
 80055de:	b29a      	uxth	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	3306      	adds	r3, #6
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	3307      	adds	r3, #7
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	4413      	add	r3, r2
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	80da      	strh	r2, [r3, #6]

}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8005616:	2180      	movs	r1, #128	; 0x80
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f00a ffeb 	bl	80105f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800561e:	2100      	movs	r1, #0
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f00a ffe7 	bl	80105f4 <USBD_LL_StallEP>
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b086      	sub	sp, #24
 8005632:	af00      	add	r7, sp, #0
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d033      	beq.n	80056ac <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f835 	bl	80056b4 <USBD_GetLen>
 800564a:	4603      	mov	r3, r0
 800564c:	3301      	adds	r3, #1
 800564e:	b29b      	uxth	r3, r3
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8005658:	7dfb      	ldrb	r3, [r7, #23]
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	75fa      	strb	r2, [r7, #23]
 800565e:	461a      	mov	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4413      	add	r3, r2
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	8812      	ldrh	r2, [r2, #0]
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	75fa      	strb	r2, [r7, #23]
 8005672:	461a      	mov	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4413      	add	r3, r2
 8005678:	2203      	movs	r2, #3
 800567a:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 800567c:	e012      	b.n	80056a4 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 800567e:	7dfb      	ldrb	r3, [r7, #23]
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	75fa      	strb	r2, [r7, #23]
 8005684:	461a      	mov	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	441a      	add	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	1c59      	adds	r1, r3, #1
 800568e:	60f9      	str	r1, [r7, #12]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8005694:	7dfb      	ldrb	r3, [r7, #23]
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	75fa      	strb	r2, [r7, #23]
 800569a:	461a      	mov	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4413      	add	r3, r2
 80056a0:	2200      	movs	r2, #0
 80056a2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e8      	bne.n	800567e <USBD_GetString+0x50>
    }
  } 
}
 80056ac:	bf00      	nop
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 80056c0:	e005      	b.n	80056ce <USBD_GetLen+0x1a>
    {
        len++;
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	3301      	adds	r3, #1
 80056c6:	73fb      	strb	r3, [r7, #15]
        buf++;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3301      	adds	r3, #1
 80056cc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f5      	bne.n	80056c2 <USBD_GetLen+0xe>
    }

    return len;
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	4613      	mov	r3, r2
 80056f0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2202      	movs	r2, #2
 80056f6:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80056fa:	88fa      	ldrh	r2, [r7, #6]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8005700:	88fa      	ldrh	r2, [r7, #6]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8005706:	88fb      	ldrh	r3, [r7, #6]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	2100      	movs	r1, #0
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f00b f83f 	bl	8010790 <USBD_LL_Transmit>
  
  return USBD_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	4613      	mov	r3, r2
 8005728:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	2100      	movs	r1, #0
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f00b f82d 	bl	8010790 <USBD_LL_Transmit>
  
  return USBD_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	4613      	mov	r3, r2
 800574c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2203      	movs	r2, #3
 8005752:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8005756:	88fa      	ldrh	r2, [r7, #6]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800575e:	88fa      	ldrh	r2, [r7, #6]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8005766:	88fb      	ldrh	r3, [r7, #6]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	2100      	movs	r1, #0
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f00b f849 	bl	8010804 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	4613      	mov	r3, r2
 8005788:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	2100      	movs	r1, #0
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f00b f837 	bl	8010804 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2204      	movs	r2, #4
 80057ac:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80057b0:	2300      	movs	r3, #0
 80057b2:	2200      	movs	r2, #0
 80057b4:	2100      	movs	r1, #0
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f00a ffea 	bl	8010790 <USBD_LL_Transmit>
  
  return USBD_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2205      	movs	r2, #5
 80057d2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80057d6:	2300      	movs	r3, #0
 80057d8:	2200      	movs	r2, #0
 80057da:	2100      	movs	r1, #0
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f00b f811 	bl	8010804 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80057fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057fe:	2b84      	cmp	r3, #132	; 0x84
 8005800:	d005      	beq.n	800580e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005802:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4413      	add	r3, r2
 800580a:	3303      	adds	r3, #3
 800580c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800580e:	68fb      	ldr	r3, [r7, #12]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005820:	f001 fe74 	bl	800750c <vTaskStartScheduler>
  
  return osOK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	bd80      	pop	{r7, pc}

0800582a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800582a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800582c:	b087      	sub	sp, #28
 800582e:	af02      	add	r7, sp, #8
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685c      	ldr	r4, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005840:	b29e      	uxth	r6, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff ffcf 	bl	80057ec <makeFreeRtosPriority>
 800584e:	4602      	mov	r2, r0
 8005850:	f107 030c 	add.w	r3, r7, #12
 8005854:	9301      	str	r3, [sp, #4]
 8005856:	9200      	str	r2, [sp, #0]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	4632      	mov	r2, r6
 800585c:	4629      	mov	r1, r5
 800585e:	4620      	mov	r0, r4
 8005860:	f001 fc68 	bl	8007134 <xTaskCreate>
 8005864:	4603      	mov	r3, r0
 8005866:	2b01      	cmp	r3, #1
 8005868:	d001      	beq.n	800586e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	e000      	b.n	8005870 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800586e:	68fb      	ldr	r3, [r7, #12]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005878 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <osDelay+0x16>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	e000      	b.n	8005890 <osDelay+0x18>
 800588e:	2301      	movs	r3, #1
 8005890:	4618      	mov	r0, r3
 8005892:	f001 fe07 	bl	80074a4 <vTaskDelay>
  
  return osOK;
 8005896:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80058a4:	f002 fada 	bl	8007e5c <xTaskGetSchedulerState>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d001      	beq.n	80058b2 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80058ae:	f000 fc5b 	bl	8006168 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80058b2:	bf00      	nop
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80058bc:	2018      	movs	r0, #24
 80058be:	f000 fcdf 	bl	8006280 <pvPortMalloc>
 80058c2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3304      	adds	r3, #4
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 f9e0 	bl	8005c9a <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80058da:	687b      	ldr	r3, [r7, #4]
	}
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b090      	sub	sp, #64	; 0x40
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80058f6:	2300      	movs	r3, #0
 80058f8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80058fa:	2300      	movs	r3, #0
 80058fc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d109      	bne.n	8005918 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	623b      	str	r3, [r7, #32]
 8005916:	e7fe      	b.n	8005916 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <xEventGroupWaitBits+0x52>
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	61fb      	str	r3, [r7, #28]
 8005934:	e7fe      	b.n	8005934 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <xEventGroupWaitBits+0x6c>
 800593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	e7fe      	b.n	800594e <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005950:	f002 fa84 	bl	8007e5c <xTaskGetSchedulerState>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d102      	bne.n	8005960 <xEventGroupWaitBits+0x7c>
 800595a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <xEventGroupWaitBits+0x80>
 8005960:	2301      	movs	r3, #1
 8005962:	e000      	b.n	8005966 <xEventGroupWaitBits+0x82>
 8005964:	2300      	movs	r3, #0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <xEventGroupWaitBits+0x9a>
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	e7fe      	b.n	800597c <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 800597e:	f001 fe0b 	bl	8007598 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	68b9      	ldr	r1, [r7, #8]
 800598c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800598e:	f000 f962 	bl	8005c56 <prvTestWaitCondition>
 8005992:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00e      	beq.n	80059b8 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800599a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d028      	beq.n	80059fa <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80059a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	43db      	mvns	r3, r3
 80059b0:	401a      	ands	r2, r3
 80059b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	e020      	b.n	80059fa <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80059b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d104      	bne.n	80059c8 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80059be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80059c2:	2301      	movs	r3, #1
 80059c4:	633b      	str	r3, [r7, #48]	; 0x30
 80059c6:	e018      	b.n	80059fa <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80059ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059d4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059e2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80059e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e6:	1d18      	adds	r0, r3, #4
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ec:	4313      	orrs	r3, r2
 80059ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059f0:	4619      	mov	r1, r3
 80059f2:	f001 ffc5 	bl	8007980 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80059fa:	f001 fddb 	bl	80075b4 <xTaskResumeAll>
 80059fe:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d031      	beq.n	8005a6a <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d107      	bne.n	8005a1c <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8005a0c:	4b19      	ldr	r3, [pc, #100]	; (8005a74 <xEventGroupWaitBits+0x190>)
 8005a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005a1c:	f002 fbe4 	bl	80081e8 <uxTaskResetEventItemValue>
 8005a20:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d11a      	bne.n	8005a62 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8005a2c:	f000 fb0e 	bl	800604c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	68b9      	ldr	r1, [r7, #8]
 8005a3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005a3c:	f000 f90b 	bl	8005c56 <prvTestWaitCondition>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d006      	beq.n	8005a5a <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	43db      	mvns	r3, r3
 8005a54:	401a      	ands	r2, r3
 8005a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a58:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8005a5e:	f000 fb23 	bl	80060a8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a68:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3740      	adds	r7, #64	; 0x40
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d109      	bne.n	8005aa0 <xEventGroupClearBits+0x28>
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	e7fe      	b.n	8005a9e <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d009      	beq.n	8005abe <xEventGroupClearBits+0x46>
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	60bb      	str	r3, [r7, #8]
 8005abc:	e7fe      	b.n	8005abc <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 8005abe:	f000 fac5 	bl	800604c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	401a      	ands	r2, r3
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8005ad6:	f000 fae7 	bl	80060a8 <vPortExitCritical>

	return uxReturn;
 8005ada:	693b      	ldr	r3, [r7, #16]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08e      	sub	sp, #56	; 0x38
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005aee:	2300      	movs	r3, #0
 8005af0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005af6:	2300      	movs	r3, #0
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <xEventGroupSetBits+0x30>
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	e7fe      	b.n	8005b12 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d009      	beq.n	8005b32 <xEventGroupSetBits+0x4e>
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e7fe      	b.n	8005b30 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	3304      	adds	r3, #4
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005b3e:	f001 fd2b 	bl	8007598 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005b54:	e03c      	b.n	8005bd0 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b6c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b74:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d108      	bne.n	8005b92 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	4013      	ands	r3, r2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00b      	beq.n	8005ba4 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b90:	e008      	b.n	8005ba4 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	401a      	ands	r2, r3
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d101      	bne.n	8005ba4 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d010      	beq.n	8005bcc <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005bc8:	f001 ff76 	bl	8007ab8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d1be      	bne.n	8005b56 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	43db      	mvns	r3, r3
 8005be0:	401a      	ands	r2, r3
 8005be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005be6:	f001 fce5 	bl	80075b4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	681b      	ldr	r3, [r3, #0]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3738      	adds	r7, #56	; 0x38
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b086      	sub	sp, #24
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	3304      	adds	r3, #4
 8005c06:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 8005c08:	f001 fcc6 	bl	8007598 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8005c0c:	e016      	b.n	8005c3c <vEventGroupDelete+0x46>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	3308      	adds	r3, #8
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d109      	bne.n	8005c2e <vEventGroupDelete+0x38>
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	e7fe      	b.n	8005c2c <vEventGroupDelete+0x36>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 ff3e 	bl	8007ab8 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e4      	bne.n	8005c0e <vEventGroupDelete+0x18>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
 8005c44:	6978      	ldr	r0, [r7, #20]
 8005c46:	f000 fbdd 	bl	8006404 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 8005c4a:	f001 fcb3 	bl	80075b4 <xTaskResumeAll>
}
 8005c4e:	bf00      	nop
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005c56:	b480      	push	{r7}
 8005c58:	b087      	sub	sp, #28
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d107      	bne.n	8005c7c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	4013      	ands	r3, r2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005c76:	2301      	movs	r3, #1
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	e007      	b.n	8005c8c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	401a      	ands	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d101      	bne.n	8005c8c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005c8c:	697b      	ldr	r3, [r7, #20]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f103 0208 	add.w	r2, r3, #8
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f103 0208 	add.w	r2, r3, #8
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f103 0208 	add.w	r2, r3, #8
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	601a      	str	r2, [r3, #0]
}
 8005d30:	bf00      	nop
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d52:	d103      	bne.n	8005d5c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	e00c      	b.n	8005d76 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3308      	adds	r3, #8
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	e002      	b.n	8005d6a <vListInsert+0x2e>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d9f6      	bls.n	8005d64 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	601a      	str	r2, [r3, #0]
}
 8005da2:	bf00      	nop
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005dae:	b480      	push	{r7}
 8005db0:	b085      	sub	sp, #20
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6892      	ldr	r2, [r2, #8]
 8005dc4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6852      	ldr	r2, [r2, #4]
 8005dce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d103      	bne.n	8005de2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	1e5a      	subs	r2, r3, #1
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3b04      	subs	r3, #4
 8005e14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3b04      	subs	r3, #4
 8005e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f023 0201 	bic.w	r2, r3, #1
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3b04      	subs	r3, #4
 8005e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e34:	4a0c      	ldr	r2, [pc, #48]	; (8005e68 <pxPortInitialiseStack+0x64>)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3b14      	subs	r3, #20
 8005e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3b04      	subs	r3, #4
 8005e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f06f 0202 	mvn.w	r2, #2
 8005e52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3b20      	subs	r3, #32
 8005e58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	08005e6d 	.word	0x08005e6d

08005e6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e72:	2300      	movs	r3, #0
 8005e74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e76:	4b11      	ldr	r3, [pc, #68]	; (8005ebc <prvTaskExitError+0x50>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7e:	d009      	beq.n	8005e94 <prvTaskExitError+0x28>
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	e7fe      	b.n	8005e92 <prvTaskExitError+0x26>
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ea6:	bf00      	nop
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0fc      	beq.n	8005ea8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005eae:	bf00      	nop
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	20000098 	.word	0x20000098

08005ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ec0:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <pxCurrentTCBConst2>)
 8005ec2:	6819      	ldr	r1, [r3, #0]
 8005ec4:	6808      	ldr	r0, [r1, #0]
 8005ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eca:	f380 8809 	msr	PSP, r0
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f04f 0000 	mov.w	r0, #0
 8005ed6:	f380 8811 	msr	BASEPRI, r0
 8005eda:	4770      	bx	lr
 8005edc:	f3af 8000 	nop.w

08005ee0 <pxCurrentTCBConst2>:
 8005ee0:	2000450c 	.word	0x2000450c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ee4:	bf00      	nop
 8005ee6:	bf00      	nop

08005ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ee8:	4808      	ldr	r0, [pc, #32]	; (8005f0c <prvPortStartFirstTask+0x24>)
 8005eea:	6800      	ldr	r0, [r0, #0]
 8005eec:	6800      	ldr	r0, [r0, #0]
 8005eee:	f380 8808 	msr	MSP, r0
 8005ef2:	f04f 0000 	mov.w	r0, #0
 8005ef6:	f380 8814 	msr	CONTROL, r0
 8005efa:	b662      	cpsie	i
 8005efc:	b661      	cpsie	f
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	df00      	svc	0
 8005f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f0a:	bf00      	nop
 8005f0c:	e000ed08 	.word	0xe000ed08

08005f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f16:	4b44      	ldr	r3, [pc, #272]	; (8006028 <xPortStartScheduler+0x118>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a44      	ldr	r2, [pc, #272]	; (800602c <xPortStartScheduler+0x11c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d109      	bne.n	8005f34 <xPortStartScheduler+0x24>
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	e7fe      	b.n	8005f32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f34:	4b3c      	ldr	r3, [pc, #240]	; (8006028 <xPortStartScheduler+0x118>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a3d      	ldr	r2, [pc, #244]	; (8006030 <xPortStartScheduler+0x120>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d109      	bne.n	8005f52 <xPortStartScheduler+0x42>
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	e7fe      	b.n	8005f50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f52:	4b38      	ldr	r3, [pc, #224]	; (8006034 <xPortStartScheduler+0x124>)
 8005f54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	22ff      	movs	r2, #255	; 0xff
 8005f62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	4b30      	ldr	r3, [pc, #192]	; (8006038 <xPortStartScheduler+0x128>)
 8005f78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f7a:	4b30      	ldr	r3, [pc, #192]	; (800603c <xPortStartScheduler+0x12c>)
 8005f7c:	2207      	movs	r2, #7
 8005f7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f80:	e009      	b.n	8005f96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005f82:	4b2e      	ldr	r3, [pc, #184]	; (800603c <xPortStartScheduler+0x12c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	4a2c      	ldr	r2, [pc, #176]	; (800603c <xPortStartScheduler+0x12c>)
 8005f8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f8c:	78fb      	ldrb	r3, [r7, #3]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9e:	2b80      	cmp	r3, #128	; 0x80
 8005fa0:	d0ef      	beq.n	8005f82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fa2:	4b26      	ldr	r3, [pc, #152]	; (800603c <xPortStartScheduler+0x12c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f1c3 0307 	rsb	r3, r3, #7
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d009      	beq.n	8005fc2 <xPortStartScheduler+0xb2>
 8005fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	60bb      	str	r3, [r7, #8]
 8005fc0:	e7fe      	b.n	8005fc0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005fc2:	4b1e      	ldr	r3, [pc, #120]	; (800603c <xPortStartScheduler+0x12c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	; (800603c <xPortStartScheduler+0x12c>)
 8005fca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005fcc:	4b1b      	ldr	r3, [pc, #108]	; (800603c <xPortStartScheduler+0x12c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fd4:	4a19      	ldr	r2, [pc, #100]	; (800603c <xPortStartScheduler+0x12c>)
 8005fd6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fe0:	4a17      	ldr	r2, [pc, #92]	; (8006040 <xPortStartScheduler+0x130>)
 8005fe2:	4b17      	ldr	r3, [pc, #92]	; (8006040 <xPortStartScheduler+0x130>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fec:	4a14      	ldr	r2, [pc, #80]	; (8006040 <xPortStartScheduler+0x130>)
 8005fee:	4b14      	ldr	r3, [pc, #80]	; (8006040 <xPortStartScheduler+0x130>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ff6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ff8:	f000 f8d6 	bl	80061a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ffc:	4b11      	ldr	r3, [pc, #68]	; (8006044 <xPortStartScheduler+0x134>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006002:	f000 f8f5 	bl	80061f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006006:	4a10      	ldr	r2, [pc, #64]	; (8006048 <xPortStartScheduler+0x138>)
 8006008:	4b0f      	ldr	r3, [pc, #60]	; (8006048 <xPortStartScheduler+0x138>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006010:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006012:	f7ff ff69 	bl	8005ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006016:	f001 fc35 	bl	8007884 <vTaskSwitchContext>
	prvTaskExitError();
 800601a:	f7ff ff27 	bl	8005e6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	e000ed00 	.word	0xe000ed00
 800602c:	410fc271 	.word	0x410fc271
 8006030:	410fc270 	.word	0x410fc270
 8006034:	e000e400 	.word	0xe000e400
 8006038:	200008ef 	.word	0x200008ef
 800603c:	200008f0 	.word	0x200008f0
 8006040:	e000ed20 	.word	0xe000ed20
 8006044:	20000098 	.word	0x20000098
 8006048:	e000ef34 	.word	0xe000ef34

0800604c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006064:	4b0e      	ldr	r3, [pc, #56]	; (80060a0 <vPortEnterCritical+0x54>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3301      	adds	r3, #1
 800606a:	4a0d      	ldr	r2, [pc, #52]	; (80060a0 <vPortEnterCritical+0x54>)
 800606c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800606e:	4b0c      	ldr	r3, [pc, #48]	; (80060a0 <vPortEnterCritical+0x54>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d10e      	bne.n	8006094 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006076:	4b0b      	ldr	r3, [pc, #44]	; (80060a4 <vPortEnterCritical+0x58>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d009      	beq.n	8006094 <vPortEnterCritical+0x48>
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	603b      	str	r3, [r7, #0]
 8006092:	e7fe      	b.n	8006092 <vPortEnterCritical+0x46>
	}
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	20000098 	.word	0x20000098
 80060a4:	e000ed04 	.word	0xe000ed04

080060a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060ae:	4b11      	ldr	r3, [pc, #68]	; (80060f4 <vPortExitCritical+0x4c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d109      	bne.n	80060ca <vPortExitCritical+0x22>
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	607b      	str	r3, [r7, #4]
 80060c8:	e7fe      	b.n	80060c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80060ca:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <vPortExitCritical+0x4c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	4a08      	ldr	r2, [pc, #32]	; (80060f4 <vPortExitCritical+0x4c>)
 80060d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80060d4:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <vPortExitCritical+0x4c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d104      	bne.n	80060e6 <vPortExitCritical+0x3e>
 80060dc:	2300      	movs	r3, #0
 80060de:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	20000098 	.word	0x20000098
	...

08006100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006100:	f3ef 8009 	mrs	r0, PSP
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	4b15      	ldr	r3, [pc, #84]	; (8006160 <pxCurrentTCBConst>)
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	f01e 0f10 	tst.w	lr, #16
 8006110:	bf08      	it	eq
 8006112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611a:	6010      	str	r0, [r2, #0]
 800611c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006124:	f380 8811 	msr	BASEPRI, r0
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f001 fba8 	bl	8007884 <vTaskSwitchContext>
 8006134:	f04f 0000 	mov.w	r0, #0
 8006138:	f380 8811 	msr	BASEPRI, r0
 800613c:	bc09      	pop	{r0, r3}
 800613e:	6819      	ldr	r1, [r3, #0]
 8006140:	6808      	ldr	r0, [r1, #0]
 8006142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006146:	f01e 0f10 	tst.w	lr, #16
 800614a:	bf08      	it	eq
 800614c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006150:	f380 8809 	msr	PSP, r0
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	f3af 8000 	nop.w

08006160 <pxCurrentTCBConst>:
 8006160:	2000450c 	.word	0x2000450c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop

08006168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006180:	f001 fac4 	bl	800770c <xTaskIncrementTick>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800618a:	4b06      	ldr	r3, [pc, #24]	; (80061a4 <xPortSysTickHandler+0x3c>)
 800618c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	2300      	movs	r3, #0
 8006194:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800619c:	bf00      	nop
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	e000ed04 	.word	0xe000ed04

080061a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061ac:	4b0b      	ldr	r3, [pc, #44]	; (80061dc <vPortSetupTimerInterrupt+0x34>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061b2:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <vPortSetupTimerInterrupt+0x38>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061b8:	4a0a      	ldr	r2, [pc, #40]	; (80061e4 <vPortSetupTimerInterrupt+0x3c>)
 80061ba:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <vPortSetupTimerInterrupt+0x40>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	490b      	ldr	r1, [pc, #44]	; (80061ec <vPortSetupTimerInterrupt+0x44>)
 80061c0:	fba1 1303 	umull	r1, r3, r1, r3
 80061c4:	099b      	lsrs	r3, r3, #6
 80061c6:	3b01      	subs	r3, #1
 80061c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80061ca:	4b04      	ldr	r3, [pc, #16]	; (80061dc <vPortSetupTimerInterrupt+0x34>)
 80061cc:	2207      	movs	r2, #7
 80061ce:	601a      	str	r2, [r3, #0]
}
 80061d0:	bf00      	nop
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	e000e010 	.word	0xe000e010
 80061e0:	e000e018 	.word	0xe000e018
 80061e4:	e000e014 	.word	0xe000e014
 80061e8:	200000bc 	.word	0x200000bc
 80061ec:	10624dd3 	.word	0x10624dd3

080061f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80061f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006200 <vPortEnableVFP+0x10>
 80061f4:	6801      	ldr	r1, [r0, #0]
 80061f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80061fa:	6001      	str	r1, [r0, #0]
 80061fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80061fe:	bf00      	nop
 8006200:	e000ed88 	.word	0xe000ed88

08006204 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800620a:	f3ef 8305 	mrs	r3, IPSR
 800620e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b0f      	cmp	r3, #15
 8006214:	d913      	bls.n	800623e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006216:	4a16      	ldr	r2, [pc, #88]	; (8006270 <vPortValidateInterruptPriority+0x6c>)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006220:	4b14      	ldr	r3, [pc, #80]	; (8006274 <vPortValidateInterruptPriority+0x70>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	7afa      	ldrb	r2, [r7, #11]
 8006226:	429a      	cmp	r2, r3
 8006228:	d209      	bcs.n	800623e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	607b      	str	r3, [r7, #4]
 800623c:	e7fe      	b.n	800623c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800623e:	4b0e      	ldr	r3, [pc, #56]	; (8006278 <vPortValidateInterruptPriority+0x74>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006246:	4b0d      	ldr	r3, [pc, #52]	; (800627c <vPortValidateInterruptPriority+0x78>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d909      	bls.n	8006262 <vPortValidateInterruptPriority+0x5e>
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	e7fe      	b.n	8006260 <vPortValidateInterruptPriority+0x5c>
	}
 8006262:	bf00      	nop
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	e000e3f0 	.word	0xe000e3f0
 8006274:	200008ef 	.word	0x200008ef
 8006278:	e000ed0c 	.word	0xe000ed0c
 800627c:	200008f0 	.word	0x200008f0

08006280 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	; 0x28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006288:	2300      	movs	r3, #0
 800628a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800628c:	f001 f984 	bl	8007598 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006290:	4b57      	ldr	r3, [pc, #348]	; (80063f0 <pvPortMalloc+0x170>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006298:	f000 f90c 	bl	80064b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800629c:	4b55      	ldr	r3, [pc, #340]	; (80063f4 <pvPortMalloc+0x174>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4013      	ands	r3, r2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f040 808c 	bne.w	80063c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01c      	beq.n	80062ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80062b0:	2208      	movs	r2, #8
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4413      	add	r3, r2
 80062b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d013      	beq.n	80062ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f023 0307 	bic.w	r3, r3, #7
 80062c8:	3308      	adds	r3, #8
 80062ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d009      	beq.n	80062ea <pvPortMalloc+0x6a>
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e7fe      	b.n	80062e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d068      	beq.n	80063c2 <pvPortMalloc+0x142>
 80062f0:	4b41      	ldr	r3, [pc, #260]	; (80063f8 <pvPortMalloc+0x178>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d863      	bhi.n	80063c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062fa:	4b40      	ldr	r3, [pc, #256]	; (80063fc <pvPortMalloc+0x17c>)
 80062fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062fe:	4b3f      	ldr	r3, [pc, #252]	; (80063fc <pvPortMalloc+0x17c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006304:	e004      	b.n	8006310 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	429a      	cmp	r2, r3
 8006318:	d203      	bcs.n	8006322 <pvPortMalloc+0xa2>
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1f1      	bne.n	8006306 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006322:	4b33      	ldr	r3, [pc, #204]	; (80063f0 <pvPortMalloc+0x170>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006328:	429a      	cmp	r2, r3
 800632a:	d04a      	beq.n	80063c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2208      	movs	r2, #8
 8006332:	4413      	add	r3, r2
 8006334:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	1ad2      	subs	r2, r2, r3
 8006346:	2308      	movs	r3, #8
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	429a      	cmp	r2, r3
 800634c:	d91e      	bls.n	800638c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800634e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4413      	add	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	2b00      	cmp	r3, #0
 800635e:	d009      	beq.n	8006374 <pvPortMalloc+0xf4>
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	e7fe      	b.n	8006372 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	1ad2      	subs	r2, r2, r3
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006386:	69b8      	ldr	r0, [r7, #24]
 8006388:	f000 f8f6 	bl	8006578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800638c:	4b1a      	ldr	r3, [pc, #104]	; (80063f8 <pvPortMalloc+0x178>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <pvPortMalloc+0x178>)
 8006398:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800639a:	4b17      	ldr	r3, [pc, #92]	; (80063f8 <pvPortMalloc+0x178>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	4b18      	ldr	r3, [pc, #96]	; (8006400 <pvPortMalloc+0x180>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d203      	bcs.n	80063ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063a6:	4b14      	ldr	r3, [pc, #80]	; (80063f8 <pvPortMalloc+0x178>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a15      	ldr	r2, [pc, #84]	; (8006400 <pvPortMalloc+0x180>)
 80063ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <pvPortMalloc+0x174>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063c2:	f001 f8f7 	bl	80075b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d009      	beq.n	80063e4 <pvPortMalloc+0x164>
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	e7fe      	b.n	80063e2 <pvPortMalloc+0x162>
	return pvReturn;
 80063e4:	69fb      	ldr	r3, [r7, #28]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3728      	adds	r7, #40	; 0x28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	200044fc 	.word	0x200044fc
 80063f4:	20004508 	.word	0x20004508
 80063f8:	20004500 	.word	0x20004500
 80063fc:	200044f4 	.word	0x200044f4
 8006400:	20004504 	.word	0x20004504

08006404 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d046      	beq.n	80064a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006416:	2308      	movs	r3, #8
 8006418:	425b      	negs	r3, r3
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	4413      	add	r3, r2
 800641e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	4b20      	ldr	r3, [pc, #128]	; (80064ac <vPortFree+0xa8>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4013      	ands	r3, r2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d109      	bne.n	8006446 <vPortFree+0x42>
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	e7fe      	b.n	8006444 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <vPortFree+0x5e>
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	60bb      	str	r3, [r7, #8]
 8006460:	e7fe      	b.n	8006460 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	4b11      	ldr	r3, [pc, #68]	; (80064ac <vPortFree+0xa8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4013      	ands	r3, r2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d019      	beq.n	80064a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d115      	bne.n	80064a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <vPortFree+0xa8>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	43db      	mvns	r3, r3
 8006482:	401a      	ands	r2, r3
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006488:	f001 f886 	bl	8007598 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <vPortFree+0xac>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4413      	add	r3, r2
 8006496:	4a06      	ldr	r2, [pc, #24]	; (80064b0 <vPortFree+0xac>)
 8006498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800649a:	6938      	ldr	r0, [r7, #16]
 800649c:	f000 f86c 	bl	8006578 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80064a0:	f001 f888 	bl	80075b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064a4:	bf00      	nop
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	20004508 	.word	0x20004508
 80064b0:	20004500 	.word	0x20004500

080064b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80064be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064c0:	4b27      	ldr	r3, [pc, #156]	; (8006560 <prvHeapInit+0xac>)
 80064c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00c      	beq.n	80064e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3307      	adds	r3, #7
 80064d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0307 	bic.w	r3, r3, #7
 80064da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	4a1f      	ldr	r2, [pc, #124]	; (8006560 <prvHeapInit+0xac>)
 80064e4:	4413      	add	r3, r2
 80064e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064ec:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <prvHeapInit+0xb0>)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064f2:	4b1c      	ldr	r3, [pc, #112]	; (8006564 <prvHeapInit+0xb0>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	4413      	add	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006500:	2208      	movs	r2, #8
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	1a9b      	subs	r3, r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 0307 	bic.w	r3, r3, #7
 800650e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4a15      	ldr	r2, [pc, #84]	; (8006568 <prvHeapInit+0xb4>)
 8006514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <prvHeapInit+0xb4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2200      	movs	r2, #0
 800651c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800651e:	4b12      	ldr	r3, [pc, #72]	; (8006568 <prvHeapInit+0xb4>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	1ad2      	subs	r2, r2, r3
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006534:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <prvHeapInit+0xb4>)
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	4a0a      	ldr	r2, [pc, #40]	; (800656c <prvHeapInit+0xb8>)
 8006542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	4a09      	ldr	r2, [pc, #36]	; (8006570 <prvHeapInit+0xbc>)
 800654a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800654c:	4b09      	ldr	r3, [pc, #36]	; (8006574 <prvHeapInit+0xc0>)
 800654e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006552:	601a      	str	r2, [r3, #0]
}
 8006554:	bf00      	nop
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	200008f4 	.word	0x200008f4
 8006564:	200044f4 	.word	0x200044f4
 8006568:	200044fc 	.word	0x200044fc
 800656c:	20004504 	.word	0x20004504
 8006570:	20004500 	.word	0x20004500
 8006574:	20004508 	.word	0x20004508

08006578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006580:	4b28      	ldr	r3, [pc, #160]	; (8006624 <prvInsertBlockIntoFreeList+0xac>)
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	e002      	b.n	800658c <prvInsertBlockIntoFreeList+0x14>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	429a      	cmp	r2, r3
 8006594:	d3f7      	bcc.n	8006586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	441a      	add	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d108      	bne.n	80065ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	441a      	add	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	441a      	add	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d118      	bne.n	8006600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	4b15      	ldr	r3, [pc, #84]	; (8006628 <prvInsertBlockIntoFreeList+0xb0>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d00d      	beq.n	80065f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	441a      	add	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	e008      	b.n	8006608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065f6:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <prvInsertBlockIntoFreeList+0xb0>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	e003      	b.n	8006608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	429a      	cmp	r2, r3
 800660e:	d002      	beq.n	8006616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006616:	bf00      	nop
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	200044f4 	.word	0x200044f4
 8006628:	200044fc 	.word	0x200044fc

0800662c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d109      	bne.n	8006654 <xQueueGenericReset+0x28>
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	60bb      	str	r3, [r7, #8]
 8006652:	e7fe      	b.n	8006652 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006654:	f7ff fcfa 	bl	800604c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006660:	68f9      	ldr	r1, [r7, #12]
 8006662:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006664:	fb01 f303 	mul.w	r3, r1, r3
 8006668:	441a      	add	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006684:	3b01      	subs	r3, #1
 8006686:	68f9      	ldr	r1, [r7, #12]
 8006688:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800668a:	fb01 f303 	mul.w	r3, r1, r3
 800668e:	441a      	add	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	22ff      	movs	r2, #255	; 0xff
 8006698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	22ff      	movs	r2, #255	; 0xff
 80066a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d114      	bne.n	80066d4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d01a      	beq.n	80066e8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3310      	adds	r3, #16
 80066b6:	4618      	mov	r0, r3
 80066b8:	f001 f99c 	bl	80079f4 <xTaskRemoveFromEventList>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d012      	beq.n	80066e8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066c2:	4b0d      	ldr	r3, [pc, #52]	; (80066f8 <xQueueGenericReset+0xcc>)
 80066c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	e009      	b.n	80066e8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	3310      	adds	r3, #16
 80066d8:	4618      	mov	r0, r3
 80066da:	f7ff fade 	bl	8005c9a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3324      	adds	r3, #36	; 0x24
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff fad9 	bl	8005c9a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066e8:	f7ff fcde 	bl	80060a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066ec:	2301      	movs	r3, #1
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	e000ed04 	.word	0xe000ed04

080066fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	; 0x28
 8006700:	af02      	add	r7, sp, #8
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	4613      	mov	r3, r2
 8006708:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d109      	bne.n	8006724 <xQueueGenericCreate+0x28>
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	e7fe      	b.n	8006722 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d102      	bne.n	8006730 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800672a:	2300      	movs	r3, #0
 800672c:	61fb      	str	r3, [r7, #28]
 800672e:	e004      	b.n	800673a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	fb02 f303 	mul.w	r3, r2, r3
 8006738:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	3348      	adds	r3, #72	; 0x48
 800673e:	4618      	mov	r0, r3
 8006740:	f7ff fd9e 	bl	8006280 <pvPortMalloc>
 8006744:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	3348      	adds	r3, #72	; 0x48
 8006750:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006752:	79fa      	ldrb	r2, [r7, #7]
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	4613      	mov	r3, r2
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	68b9      	ldr	r1, [r7, #8]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f805 	bl	800676e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006764:	69bb      	ldr	r3, [r7, #24]
	}
 8006766:	4618      	mov	r0, r3
 8006768:	3720      	adds	r7, #32
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b084      	sub	sp, #16
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	607a      	str	r2, [r7, #4]
 800677a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d103      	bne.n	800678a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	e002      	b.n	8006790 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800679c:	2101      	movs	r1, #1
 800679e:	69b8      	ldr	r0, [r7, #24]
 80067a0:	f7ff ff44 	bl	800662c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067a4:	bf00      	nop
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d109      	bne.n	80067d0 <xQueueCreateCountingSemaphore+0x24>
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	613b      	str	r3, [r7, #16]
 80067ce:	e7fe      	b.n	80067ce <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d909      	bls.n	80067ec <xQueueCreateCountingSemaphore+0x40>
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e7fe      	b.n	80067ea <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80067ec:	2202      	movs	r2, #2
 80067ee:	2100      	movs	r1, #0
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff ff83 	bl	80066fc <xQueueGenericCreate>
 80067f6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006804:	697b      	ldr	r3, [r7, #20]
	}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08e      	sub	sp, #56	; 0x38
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800681e:	2300      	movs	r3, #0
 8006820:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	2b00      	cmp	r3, #0
 800682a:	d109      	bne.n	8006840 <xQueueGenericSend+0x30>
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	62bb      	str	r3, [r7, #40]	; 0x28
 800683e:	e7fe      	b.n	800683e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d103      	bne.n	800684e <xQueueGenericSend+0x3e>
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <xQueueGenericSend+0x42>
 800684e:	2301      	movs	r3, #1
 8006850:	e000      	b.n	8006854 <xQueueGenericSend+0x44>
 8006852:	2300      	movs	r3, #0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d109      	bne.n	800686c <xQueueGenericSend+0x5c>
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
 800686a:	e7fe      	b.n	800686a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b02      	cmp	r3, #2
 8006870:	d103      	bne.n	800687a <xQueueGenericSend+0x6a>
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006876:	2b01      	cmp	r3, #1
 8006878:	d101      	bne.n	800687e <xQueueGenericSend+0x6e>
 800687a:	2301      	movs	r3, #1
 800687c:	e000      	b.n	8006880 <xQueueGenericSend+0x70>
 800687e:	2300      	movs	r3, #0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d109      	bne.n	8006898 <xQueueGenericSend+0x88>
 8006884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	623b      	str	r3, [r7, #32]
 8006896:	e7fe      	b.n	8006896 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006898:	f001 fae0 	bl	8007e5c <xTaskGetSchedulerState>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d102      	bne.n	80068a8 <xQueueGenericSend+0x98>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <xQueueGenericSend+0x9c>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e000      	b.n	80068ae <xQueueGenericSend+0x9e>
 80068ac:	2300      	movs	r3, #0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <xQueueGenericSend+0xb6>
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	61fb      	str	r3, [r7, #28]
 80068c4:	e7fe      	b.n	80068c4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068c6:	f7ff fbc1 	bl	800604c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d302      	bcc.n	80068dc <xQueueGenericSend+0xcc>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d129      	bne.n	8006930 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	68b9      	ldr	r1, [r7, #8]
 80068e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068e2:	f000 fac5 	bl	8006e70 <prvCopyDataToQueue>
 80068e6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d010      	beq.n	8006912 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f2:	3324      	adds	r3, #36	; 0x24
 80068f4:	4618      	mov	r0, r3
 80068f6:	f001 f87d 	bl	80079f4 <xTaskRemoveFromEventList>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d013      	beq.n	8006928 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006900:	4b3f      	ldr	r3, [pc, #252]	; (8006a00 <xQueueGenericSend+0x1f0>)
 8006902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	e00a      	b.n	8006928 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	2b00      	cmp	r3, #0
 8006916:	d007      	beq.n	8006928 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006918:	4b39      	ldr	r3, [pc, #228]	; (8006a00 <xQueueGenericSend+0x1f0>)
 800691a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006928:	f7ff fbbe 	bl	80060a8 <vPortExitCritical>
				return pdPASS;
 800692c:	2301      	movs	r3, #1
 800692e:	e063      	b.n	80069f8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d103      	bne.n	800693e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006936:	f7ff fbb7 	bl	80060a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800693a:	2300      	movs	r3, #0
 800693c:	e05c      	b.n	80069f8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800693e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006940:	2b00      	cmp	r3, #0
 8006942:	d106      	bne.n	8006952 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006944:	f107 0314 	add.w	r3, r7, #20
 8006948:	4618      	mov	r0, r3
 800694a:	f001 f93b 	bl	8007bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800694e:	2301      	movs	r3, #1
 8006950:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006952:	f7ff fba9 	bl	80060a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006956:	f000 fe1f 	bl	8007598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800695a:	f7ff fb77 	bl	800604c <vPortEnterCritical>
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006964:	b25b      	sxtb	r3, r3
 8006966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696a:	d103      	bne.n	8006974 <xQueueGenericSend+0x164>
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800697a:	b25b      	sxtb	r3, r3
 800697c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006980:	d103      	bne.n	800698a <xQueueGenericSend+0x17a>
 8006982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800698a:	f7ff fb8d 	bl	80060a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800698e:	1d3a      	adds	r2, r7, #4
 8006990:	f107 0314 	add.w	r3, r7, #20
 8006994:	4611      	mov	r1, r2
 8006996:	4618      	mov	r0, r3
 8006998:	f001 f92a 	bl	8007bf0 <xTaskCheckForTimeOut>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d124      	bne.n	80069ec <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069a4:	f000 fb5c 	bl	8007060 <prvIsQueueFull>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d018      	beq.n	80069e0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	3310      	adds	r3, #16
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	4611      	mov	r1, r2
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 ffbe 	bl	8007938 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069be:	f000 fae7 	bl	8006f90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069c2:	f000 fdf7 	bl	80075b4 <xTaskResumeAll>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f47f af7c 	bne.w	80068c6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80069ce:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <xQueueGenericSend+0x1f0>)
 80069d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	e772      	b.n	80068c6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069e2:	f000 fad5 	bl	8006f90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069e6:	f000 fde5 	bl	80075b4 <xTaskResumeAll>
 80069ea:	e76c      	b.n	80068c6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069ee:	f000 facf 	bl	8006f90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069f2:	f000 fddf 	bl	80075b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069f6:	2300      	movs	r3, #0
		}
	}
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3738      	adds	r7, #56	; 0x38
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	e000ed04 	.word	0xe000ed04

08006a04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08c      	sub	sp, #48	; 0x30
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a10:	2300      	movs	r3, #0
 8006a12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d109      	bne.n	8006a32 <xQueueReceive+0x2e>
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	623b      	str	r3, [r7, #32]
 8006a30:	e7fe      	b.n	8006a30 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d103      	bne.n	8006a40 <xQueueReceive+0x3c>
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <xQueueReceive+0x40>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <xQueueReceive+0x42>
 8006a44:	2300      	movs	r3, #0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <xQueueReceive+0x5a>
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	61fb      	str	r3, [r7, #28]
 8006a5c:	e7fe      	b.n	8006a5c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a5e:	f001 f9fd 	bl	8007e5c <xTaskGetSchedulerState>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d102      	bne.n	8006a6e <xQueueReceive+0x6a>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <xQueueReceive+0x6e>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <xQueueReceive+0x70>
 8006a72:	2300      	movs	r3, #0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d109      	bne.n	8006a8c <xQueueReceive+0x88>
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	e7fe      	b.n	8006a8a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a8c:	f7ff fade 	bl	800604c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01f      	beq.n	8006adc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aa0:	f000 fa50 	bl	8006f44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	1e5a      	subs	r2, r3, #1
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00f      	beq.n	8006ad4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	3310      	adds	r3, #16
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 ff9b 	bl	80079f4 <xTaskRemoveFromEventList>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d007      	beq.n	8006ad4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ac4:	4b3c      	ldr	r3, [pc, #240]	; (8006bb8 <xQueueReceive+0x1b4>)
 8006ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ad4:	f7ff fae8 	bl	80060a8 <vPortExitCritical>
				return pdPASS;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e069      	b.n	8006bb0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d103      	bne.n	8006aea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ae2:	f7ff fae1 	bl	80060a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	e062      	b.n	8006bb0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d106      	bne.n	8006afe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006af0:	f107 0310 	add.w	r3, r7, #16
 8006af4:	4618      	mov	r0, r3
 8006af6:	f001 f865 	bl	8007bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006afa:	2301      	movs	r3, #1
 8006afc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006afe:	f7ff fad3 	bl	80060a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b02:	f000 fd49 	bl	8007598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b06:	f7ff faa1 	bl	800604c <vPortEnterCritical>
 8006b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b10:	b25b      	sxtb	r3, r3
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d103      	bne.n	8006b20 <xQueueReceive+0x11c>
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b26:	b25b      	sxtb	r3, r3
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2c:	d103      	bne.n	8006b36 <xQueueReceive+0x132>
 8006b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b36:	f7ff fab7 	bl	80060a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b3a:	1d3a      	adds	r2, r7, #4
 8006b3c:	f107 0310 	add.w	r3, r7, #16
 8006b40:	4611      	mov	r1, r2
 8006b42:	4618      	mov	r0, r3
 8006b44:	f001 f854 	bl	8007bf0 <xTaskCheckForTimeOut>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d123      	bne.n	8006b96 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b50:	f000 fa70 	bl	8007034 <prvIsQueueEmpty>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d017      	beq.n	8006b8a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	3324      	adds	r3, #36	; 0x24
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	4611      	mov	r1, r2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fee8 	bl	8007938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b6a:	f000 fa11 	bl	8006f90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b6e:	f000 fd21 	bl	80075b4 <xTaskResumeAll>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d189      	bne.n	8006a8c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006b78:	4b0f      	ldr	r3, [pc, #60]	; (8006bb8 <xQueueReceive+0x1b4>)
 8006b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	e780      	b.n	8006a8c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b8c:	f000 fa00 	bl	8006f90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b90:	f000 fd10 	bl	80075b4 <xTaskResumeAll>
 8006b94:	e77a      	b.n	8006a8c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b98:	f000 f9fa 	bl	8006f90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b9c:	f000 fd0a 	bl	80075b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ba2:	f000 fa47 	bl	8007034 <prvIsQueueEmpty>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f43f af6f 	beq.w	8006a8c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006bae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3730      	adds	r7, #48	; 0x30
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	e000ed04 	.word	0xe000ed04

08006bbc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08e      	sub	sp, #56	; 0x38
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d109      	bne.n	8006bec <xQueueSemaphoreTake+0x30>
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	623b      	str	r3, [r7, #32]
 8006bea:	e7fe      	b.n	8006bea <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d009      	beq.n	8006c08 <xQueueSemaphoreTake+0x4c>
 8006bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	61fb      	str	r3, [r7, #28]
 8006c06:	e7fe      	b.n	8006c06 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c08:	f001 f928 	bl	8007e5c <xTaskGetSchedulerState>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d102      	bne.n	8006c18 <xQueueSemaphoreTake+0x5c>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <xQueueSemaphoreTake+0x60>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e000      	b.n	8006c1e <xQueueSemaphoreTake+0x62>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d109      	bne.n	8006c36 <xQueueSemaphoreTake+0x7a>
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	61bb      	str	r3, [r7, #24]
 8006c34:	e7fe      	b.n	8006c34 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c36:	f7ff fa09 	bl	800604c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d024      	beq.n	8006c90 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	1e5a      	subs	r2, r3, #1
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d104      	bne.n	8006c60 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006c56:	f001 fadf 	bl	8008218 <pvTaskIncrementMutexHeldCount>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00f      	beq.n	8006c88 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6a:	3310      	adds	r3, #16
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fec1 	bl	80079f4 <xTaskRemoveFromEventList>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d007      	beq.n	8006c88 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c78:	4b53      	ldr	r3, [pc, #332]	; (8006dc8 <xQueueSemaphoreTake+0x20c>)
 8006c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c88:	f7ff fa0e 	bl	80060a8 <vPortExitCritical>
				return pdPASS;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e096      	b.n	8006dbe <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d110      	bne.n	8006cb8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d009      	beq.n	8006cb0 <xQueueSemaphoreTake+0xf4>
 8006c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	617b      	str	r3, [r7, #20]
 8006cae:	e7fe      	b.n	8006cae <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006cb0:	f7ff f9fa 	bl	80060a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	e082      	b.n	8006dbe <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d106      	bne.n	8006ccc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cbe:	f107 030c 	add.w	r3, r7, #12
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 ff7e 	bl	8007bc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ccc:	f7ff f9ec 	bl	80060a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cd0:	f000 fc62 	bl	8007598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cd4:	f7ff f9ba 	bl	800604c <vPortEnterCritical>
 8006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cde:	b25b      	sxtb	r3, r3
 8006ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce4:	d103      	bne.n	8006cee <xQueueSemaphoreTake+0x132>
 8006ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cf4:	b25b      	sxtb	r3, r3
 8006cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfa:	d103      	bne.n	8006d04 <xQueueSemaphoreTake+0x148>
 8006cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d04:	f7ff f9d0 	bl	80060a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d08:	463a      	mov	r2, r7
 8006d0a:	f107 030c 	add.w	r3, r7, #12
 8006d0e:	4611      	mov	r1, r2
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 ff6d 	bl	8007bf0 <xTaskCheckForTimeOut>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d132      	bne.n	8006d82 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d1e:	f000 f989 	bl	8007034 <prvIsQueueEmpty>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d026      	beq.n	8006d76 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d109      	bne.n	8006d44 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006d30:	f7ff f98c 	bl	800604c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f001 f8ad 	bl	8007e98 <xTaskPriorityInherit>
 8006d3e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006d40:	f7ff f9b2 	bl	80060a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d46:	3324      	adds	r3, #36	; 0x24
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fdf3 	bl	8007938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d54:	f000 f91c 	bl	8006f90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d58:	f000 fc2c 	bl	80075b4 <xTaskResumeAll>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f47f af69 	bne.w	8006c36 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006d64:	4b18      	ldr	r3, [pc, #96]	; (8006dc8 <xQueueSemaphoreTake+0x20c>)
 8006d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	e75f      	b.n	8006c36 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006d76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d78:	f000 f90a 	bl	8006f90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d7c:	f000 fc1a 	bl	80075b4 <xTaskResumeAll>
 8006d80:	e759      	b.n	8006c36 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006d82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d84:	f000 f904 	bl	8006f90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d88:	f000 fc14 	bl	80075b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d8e:	f000 f951 	bl	8007034 <prvIsQueueEmpty>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f43f af4e 	beq.w	8006c36 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00d      	beq.n	8006dbc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006da0:	f7ff f954 	bl	800604c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006da4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006da6:	f000 f84b 	bl	8006e40 <prvGetDisinheritPriorityAfterTimeout>
 8006daa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006db2:	4618      	mov	r0, r3
 8006db4:	f001 f97a 	bl	80080ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006db8:	f7ff f976 	bl	80060a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006dbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3738      	adds	r7, #56	; 0x38
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	e000ed04 	.word	0xe000ed04

08006dcc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d109      	bne.n	8006dee <uxQueueMessagesWaiting+0x22>
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	60bb      	str	r3, [r7, #8]
 8006dec:	e7fe      	b.n	8006dec <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8006dee:	f7ff f92d 	bl	800604c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006df8:	f7ff f956 	bl	80060a8 <vPortExitCritical>

	return uxReturn;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d109      	bne.n	8006e2c <vQueueDelete+0x26>
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	60bb      	str	r3, [r7, #8]
 8006e2a:	e7fe      	b.n	8006e2a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 f957 	bl	80070e0 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f7ff fae6 	bl	8006404 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006e38:	bf00      	nop
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d006      	beq.n	8006e5e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f1c3 0307 	rsb	r3, r3, #7
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	e001      	b.n	8006e62 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006e62:	68fb      	ldr	r3, [r7, #12]
	}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10d      	bne.n	8006eaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d14d      	bne.n	8006f32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f001 f882 	bl	8007fa4 <xTaskPriorityDisinherit>
 8006ea0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	605a      	str	r2, [r3, #4]
 8006ea8:	e043      	b.n	8006f32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d119      	bne.n	8006ee4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6898      	ldr	r0, [r3, #8]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	461a      	mov	r2, r3
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	f009 fdfd 	bl	8010aba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec8:	441a      	add	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d32b      	bcc.n	8006f32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	609a      	str	r2, [r3, #8]
 8006ee2:	e026      	b.n	8006f32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	68d8      	ldr	r0, [r3, #12]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	461a      	mov	r2, r3
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	f009 fde3 	bl	8010aba <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	68da      	ldr	r2, [r3, #12]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efc:	425b      	negs	r3, r3
 8006efe:	441a      	add	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d207      	bcs.n	8006f20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	425b      	negs	r3, r3
 8006f1a:	441a      	add	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d105      	bne.n	8006f32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f3a:	697b      	ldr	r3, [r7, #20]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3718      	adds	r7, #24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d018      	beq.n	8006f88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	441a      	add	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d303      	bcc.n	8006f78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68d9      	ldr	r1, [r3, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f80:	461a      	mov	r2, r3
 8006f82:	6838      	ldr	r0, [r7, #0]
 8006f84:	f009 fd99 	bl	8010aba <memcpy>
	}
}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f98:	f7ff f858 	bl	800604c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fa2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fa4:	e011      	b.n	8006fca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d012      	beq.n	8006fd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3324      	adds	r3, #36	; 0x24
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 fd1e 	bl	80079f4 <xTaskRemoveFromEventList>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006fbe:	f000 fe77 	bl	8007cb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	dce9      	bgt.n	8006fa6 <prvUnlockQueue+0x16>
 8006fd2:	e000      	b.n	8006fd6 <prvUnlockQueue+0x46>
					break;
 8006fd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	22ff      	movs	r2, #255	; 0xff
 8006fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006fde:	f7ff f863 	bl	80060a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006fe2:	f7ff f833 	bl	800604c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fee:	e011      	b.n	8007014 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d012      	beq.n	800701e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3310      	adds	r3, #16
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 fcf9 	bl	80079f4 <xTaskRemoveFromEventList>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007008:	f000 fe52 	bl	8007cb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	3b01      	subs	r3, #1
 8007010:	b2db      	uxtb	r3, r3
 8007012:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007018:	2b00      	cmp	r3, #0
 800701a:	dce9      	bgt.n	8006ff0 <prvUnlockQueue+0x60>
 800701c:	e000      	b.n	8007020 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800701e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	22ff      	movs	r2, #255	; 0xff
 8007024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007028:	f7ff f83e 	bl	80060a8 <vPortExitCritical>
}
 800702c:	bf00      	nop
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800703c:	f7ff f806 	bl	800604c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007044:	2b00      	cmp	r3, #0
 8007046:	d102      	bne.n	800704e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007048:	2301      	movs	r3, #1
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	e001      	b.n	8007052 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007052:	f7ff f829 	bl	80060a8 <vPortExitCritical>

	return xReturn;
 8007056:	68fb      	ldr	r3, [r7, #12]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007068:	f7fe fff0 	bl	800604c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007074:	429a      	cmp	r2, r3
 8007076:	d102      	bne.n	800707e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007078:	2301      	movs	r3, #1
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	e001      	b.n	8007082 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007082:	f7ff f811 	bl	80060a8 <vPortExitCritical>

	return xReturn;
 8007086:	68fb      	ldr	r3, [r7, #12]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800709a:	2300      	movs	r3, #0
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	e014      	b.n	80070ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070a0:	4a0e      	ldr	r2, [pc, #56]	; (80070dc <vQueueAddToRegistry+0x4c>)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10b      	bne.n	80070c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070ac:	490b      	ldr	r1, [pc, #44]	; (80070dc <vQueueAddToRegistry+0x4c>)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070b6:	4a09      	ldr	r2, [pc, #36]	; (80070dc <vQueueAddToRegistry+0x4c>)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	4413      	add	r3, r2
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070c2:	e005      	b.n	80070d0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3301      	adds	r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2b07      	cmp	r3, #7
 80070ce:	d9e7      	bls.n	80070a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80070d0:	bf00      	nop
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	20005848 	.word	0x20005848

080070e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070e8:	2300      	movs	r3, #0
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	e016      	b.n	800711c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80070ee:	4a10      	ldr	r2, [pc, #64]	; (8007130 <vQueueUnregisterQueue+0x50>)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	4413      	add	r3, r2
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d10b      	bne.n	8007116 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80070fe:	4a0c      	ldr	r2, [pc, #48]	; (8007130 <vQueueUnregisterQueue+0x50>)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2100      	movs	r1, #0
 8007104:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007108:	4a09      	ldr	r2, [pc, #36]	; (8007130 <vQueueUnregisterQueue+0x50>)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	4413      	add	r3, r2
 8007110:	2200      	movs	r2, #0
 8007112:	605a      	str	r2, [r3, #4]
				break;
 8007114:	e005      	b.n	8007122 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3301      	adds	r3, #1
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b07      	cmp	r3, #7
 8007120:	d9e5      	bls.n	80070ee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007122:	bf00      	nop
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	20005848 	.word	0x20005848

08007134 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007134:	b580      	push	{r7, lr}
 8007136:	b08c      	sub	sp, #48	; 0x30
 8007138:	af04      	add	r7, sp, #16
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	603b      	str	r3, [r7, #0]
 8007140:	4613      	mov	r3, r2
 8007142:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007144:	88fb      	ldrh	r3, [r7, #6]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff f899 	bl	8006280 <pvPortMalloc>
 800714e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00e      	beq.n	8007174 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007156:	2054      	movs	r0, #84	; 0x54
 8007158:	f7ff f892 	bl	8006280 <pvPortMalloc>
 800715c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	631a      	str	r2, [r3, #48]	; 0x30
 800716a:	e005      	b.n	8007178 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800716c:	6978      	ldr	r0, [r7, #20]
 800716e:	f7ff f949 	bl	8006404 <vPortFree>
 8007172:	e001      	b.n	8007178 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007174:	2300      	movs	r3, #0
 8007176:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d013      	beq.n	80071a6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800717e:	88fa      	ldrh	r2, [r7, #6]
 8007180:	2300      	movs	r3, #0
 8007182:	9303      	str	r3, [sp, #12]
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	9302      	str	r3, [sp, #8]
 8007188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	68b9      	ldr	r1, [r7, #8]
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f80e 	bl	80071b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800719a:	69f8      	ldr	r0, [r7, #28]
 800719c:	f000 f88a 	bl	80072b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071a0:	2301      	movs	r3, #1
 80071a2:	61bb      	str	r3, [r7, #24]
 80071a4:	e002      	b.n	80071ac <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071a6:	f04f 33ff 	mov.w	r3, #4294967295
 80071aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071ac:	69bb      	ldr	r3, [r7, #24]
	}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3720      	adds	r7, #32
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b088      	sub	sp, #32
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	607a      	str	r2, [r7, #4]
 80071c2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071ce:	3b01      	subs	r3, #1
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	f023 0307 	bic.w	r3, r3, #7
 80071dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	f003 0307 	and.w	r3, r3, #7
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d009      	beq.n	80071fc <prvInitialiseNewTask+0x46>
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	e7fe      	b.n	80071fa <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071fc:	2300      	movs	r3, #0
 80071fe:	61fb      	str	r3, [r7, #28]
 8007200:	e012      	b.n	8007228 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	4413      	add	r3, r2
 8007208:	7819      	ldrb	r1, [r3, #0]
 800720a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	4413      	add	r3, r2
 8007210:	3334      	adds	r3, #52	; 0x34
 8007212:	460a      	mov	r2, r1
 8007214:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	4413      	add	r3, r2
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d006      	beq.n	8007230 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	3301      	adds	r3, #1
 8007226:	61fb      	str	r3, [r7, #28]
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	2b0f      	cmp	r3, #15
 800722c:	d9e9      	bls.n	8007202 <prvInitialiseNewTask+0x4c>
 800722e:	e000      	b.n	8007232 <prvInitialiseNewTask+0x7c>
		{
			break;
 8007230:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800723a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723c:	2b06      	cmp	r3, #6
 800723e:	d901      	bls.n	8007244 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007240:	2306      	movs	r3, #6
 8007242:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007248:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800724e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	2200      	movs	r2, #0
 8007254:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	3304      	adds	r3, #4
 800725a:	4618      	mov	r0, r3
 800725c:	f7fe fd3d 	bl	8005cda <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007262:	3318      	adds	r3, #24
 8007264:	4618      	mov	r0, r3
 8007266:	f7fe fd38 	bl	8005cda <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800726e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	f1c3 0207 	rsb	r2, r3, #7
 8007276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007278:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800727e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007282:	2200      	movs	r2, #0
 8007284:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	68f9      	ldr	r1, [r7, #12]
 8007292:	69b8      	ldr	r0, [r7, #24]
 8007294:	f7fe fdb6 	bl	8005e04 <pxPortInitialiseStack>
 8007298:	4602      	mov	r2, r0
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072aa:	bf00      	nop
 80072ac:	3720      	adds	r7, #32
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
	...

080072b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072bc:	f7fe fec6 	bl	800604c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072c0:	4b2a      	ldr	r3, [pc, #168]	; (800736c <prvAddNewTaskToReadyList+0xb8>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3301      	adds	r3, #1
 80072c6:	4a29      	ldr	r2, [pc, #164]	; (800736c <prvAddNewTaskToReadyList+0xb8>)
 80072c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072ca:	4b29      	ldr	r3, [pc, #164]	; (8007370 <prvAddNewTaskToReadyList+0xbc>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d109      	bne.n	80072e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072d2:	4a27      	ldr	r2, [pc, #156]	; (8007370 <prvAddNewTaskToReadyList+0xbc>)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072d8:	4b24      	ldr	r3, [pc, #144]	; (800736c <prvAddNewTaskToReadyList+0xb8>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d110      	bne.n	8007302 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072e0:	f000 fd0a 	bl	8007cf8 <prvInitialiseTaskLists>
 80072e4:	e00d      	b.n	8007302 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072e6:	4b23      	ldr	r3, [pc, #140]	; (8007374 <prvAddNewTaskToReadyList+0xc0>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d109      	bne.n	8007302 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072ee:	4b20      	ldr	r3, [pc, #128]	; (8007370 <prvAddNewTaskToReadyList+0xbc>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d802      	bhi.n	8007302 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072fc:	4a1c      	ldr	r2, [pc, #112]	; (8007370 <prvAddNewTaskToReadyList+0xbc>)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007302:	4b1d      	ldr	r3, [pc, #116]	; (8007378 <prvAddNewTaskToReadyList+0xc4>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3301      	adds	r3, #1
 8007308:	4a1b      	ldr	r2, [pc, #108]	; (8007378 <prvAddNewTaskToReadyList+0xc4>)
 800730a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	2201      	movs	r2, #1
 8007312:	409a      	lsls	r2, r3
 8007314:	4b19      	ldr	r3, [pc, #100]	; (800737c <prvAddNewTaskToReadyList+0xc8>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4313      	orrs	r3, r2
 800731a:	4a18      	ldr	r2, [pc, #96]	; (800737c <prvAddNewTaskToReadyList+0xc8>)
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007322:	4613      	mov	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4a15      	ldr	r2, [pc, #84]	; (8007380 <prvAddNewTaskToReadyList+0xcc>)
 800732c:	441a      	add	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	3304      	adds	r3, #4
 8007332:	4619      	mov	r1, r3
 8007334:	4610      	mov	r0, r2
 8007336:	f7fe fcdd 	bl	8005cf4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800733a:	f7fe feb5 	bl	80060a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800733e:	4b0d      	ldr	r3, [pc, #52]	; (8007374 <prvAddNewTaskToReadyList+0xc0>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00e      	beq.n	8007364 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007346:	4b0a      	ldr	r3, [pc, #40]	; (8007370 <prvAddNewTaskToReadyList+0xbc>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	429a      	cmp	r2, r3
 8007352:	d207      	bcs.n	8007364 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007354:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <prvAddNewTaskToReadyList+0xd0>)
 8007356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	2000460c 	.word	0x2000460c
 8007370:	2000450c 	.word	0x2000450c
 8007374:	20004618 	.word	0x20004618
 8007378:	20004628 	.word	0x20004628
 800737c:	20004614 	.word	0x20004614
 8007380:	20004510 	.word	0x20004510
 8007384:	e000ed04 	.word	0xe000ed04

08007388 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007390:	f7fe fe5c 	bl	800604c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d102      	bne.n	80073a0 <vTaskDelete+0x18>
 800739a:	4b38      	ldr	r3, [pc, #224]	; (800747c <vTaskDelete+0xf4>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	e000      	b.n	80073a2 <vTaskDelete+0x1a>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	3304      	adds	r3, #4
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7fe fd00 	bl	8005dae <uxListRemove>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d115      	bne.n	80073e0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b8:	4931      	ldr	r1, [pc, #196]	; (8007480 <vTaskDelete+0xf8>)
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	440b      	add	r3, r1
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10a      	bne.n	80073e0 <vTaskDelete+0x58>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ce:	2201      	movs	r2, #1
 80073d0:	fa02 f303 	lsl.w	r3, r2, r3
 80073d4:	43da      	mvns	r2, r3
 80073d6:	4b2b      	ldr	r3, [pc, #172]	; (8007484 <vTaskDelete+0xfc>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4013      	ands	r3, r2
 80073dc:	4a29      	ldr	r2, [pc, #164]	; (8007484 <vTaskDelete+0xfc>)
 80073de:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3318      	adds	r3, #24
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fe fcde 	bl	8005dae <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80073f2:	4b25      	ldr	r3, [pc, #148]	; (8007488 <vTaskDelete+0x100>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3301      	adds	r3, #1
 80073f8:	4a23      	ldr	r2, [pc, #140]	; (8007488 <vTaskDelete+0x100>)
 80073fa:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80073fc:	4b1f      	ldr	r3, [pc, #124]	; (800747c <vTaskDelete+0xf4>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	429a      	cmp	r2, r3
 8007404:	d10b      	bne.n	800741e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3304      	adds	r3, #4
 800740a:	4619      	mov	r1, r3
 800740c:	481f      	ldr	r0, [pc, #124]	; (800748c <vTaskDelete+0x104>)
 800740e:	f7fe fc71 	bl	8005cf4 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007412:	4b1f      	ldr	r3, [pc, #124]	; (8007490 <vTaskDelete+0x108>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3301      	adds	r3, #1
 8007418:	4a1d      	ldr	r2, [pc, #116]	; (8007490 <vTaskDelete+0x108>)
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	e009      	b.n	8007432 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800741e:	4b1d      	ldr	r3, [pc, #116]	; (8007494 <vTaskDelete+0x10c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3b01      	subs	r3, #1
 8007424:	4a1b      	ldr	r2, [pc, #108]	; (8007494 <vTaskDelete+0x10c>)
 8007426:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 fcd1 	bl	8007dd0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800742e:	f000 fcdf 	bl	8007df0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007432:	f7fe fe39 	bl	80060a8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007436:	4b18      	ldr	r3, [pc, #96]	; (8007498 <vTaskDelete+0x110>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d01a      	beq.n	8007474 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800743e:	4b0f      	ldr	r3, [pc, #60]	; (800747c <vTaskDelete+0xf4>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	429a      	cmp	r2, r3
 8007446:	d115      	bne.n	8007474 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007448:	4b14      	ldr	r3, [pc, #80]	; (800749c <vTaskDelete+0x114>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d009      	beq.n	8007464 <vTaskDelete+0xdc>
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	60bb      	str	r3, [r7, #8]
 8007462:	e7fe      	b.n	8007462 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8007464:	4b0e      	ldr	r3, [pc, #56]	; (80074a0 <vTaskDelete+0x118>)
 8007466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007474:	bf00      	nop
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	2000450c 	.word	0x2000450c
 8007480:	20004510 	.word	0x20004510
 8007484:	20004614 	.word	0x20004614
 8007488:	20004628 	.word	0x20004628
 800748c:	200045e0 	.word	0x200045e0
 8007490:	200045f4 	.word	0x200045f4
 8007494:	2000460c 	.word	0x2000460c
 8007498:	20004618 	.word	0x20004618
 800749c:	20004634 	.word	0x20004634
 80074a0:	e000ed04 	.word	0xe000ed04

080074a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d016      	beq.n	80074e4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074b6:	4b13      	ldr	r3, [pc, #76]	; (8007504 <vTaskDelay+0x60>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d009      	beq.n	80074d2 <vTaskDelay+0x2e>
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	60bb      	str	r3, [r7, #8]
 80074d0:	e7fe      	b.n	80074d0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80074d2:	f000 f861 	bl	8007598 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074d6:	2100      	movs	r1, #0
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 ff89 	bl	80083f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074de:	f000 f869 	bl	80075b4 <xTaskResumeAll>
 80074e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d107      	bne.n	80074fa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80074ea:	4b07      	ldr	r3, [pc, #28]	; (8007508 <vTaskDelay+0x64>)
 80074ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074fa:	bf00      	nop
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	20004634 	.word	0x20004634
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8007512:	4b1b      	ldr	r3, [pc, #108]	; (8007580 <vTaskStartScheduler+0x74>)
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	2300      	movs	r3, #0
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	2300      	movs	r3, #0
 800751c:	2280      	movs	r2, #128	; 0x80
 800751e:	4919      	ldr	r1, [pc, #100]	; (8007584 <vTaskStartScheduler+0x78>)
 8007520:	4819      	ldr	r0, [pc, #100]	; (8007588 <vTaskStartScheduler+0x7c>)
 8007522:	f7ff fe07 	bl	8007134 <xTaskCreate>
 8007526:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d115      	bne.n	800755a <vTaskStartScheduler+0x4e>
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007540:	4b12      	ldr	r3, [pc, #72]	; (800758c <vTaskStartScheduler+0x80>)
 8007542:	f04f 32ff 	mov.w	r2, #4294967295
 8007546:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007548:	4b11      	ldr	r3, [pc, #68]	; (8007590 <vTaskStartScheduler+0x84>)
 800754a:	2201      	movs	r2, #1
 800754c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800754e:	4b11      	ldr	r3, [pc, #68]	; (8007594 <vTaskStartScheduler+0x88>)
 8007550:	2200      	movs	r2, #0
 8007552:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007554:	f7fe fcdc 	bl	8005f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007558:	e00d      	b.n	8007576 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d109      	bne.n	8007576 <vTaskStartScheduler+0x6a>
 8007562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	607b      	str	r3, [r7, #4]
 8007574:	e7fe      	b.n	8007574 <vTaskStartScheduler+0x68>
}
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20004630 	.word	0x20004630
 8007584:	08010db0 	.word	0x08010db0
 8007588:	08007cc9 	.word	0x08007cc9
 800758c:	2000462c 	.word	0x2000462c
 8007590:	20004618 	.word	0x20004618
 8007594:	20004610 	.word	0x20004610

08007598 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800759c:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <vTaskSuspendAll+0x18>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3301      	adds	r3, #1
 80075a2:	4a03      	ldr	r2, [pc, #12]	; (80075b0 <vTaskSuspendAll+0x18>)
 80075a4:	6013      	str	r3, [r2, #0]
}
 80075a6:	bf00      	nop
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	20004634 	.word	0x20004634

080075b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075ba:	2300      	movs	r3, #0
 80075bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075be:	2300      	movs	r3, #0
 80075c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075c2:	4b41      	ldr	r3, [pc, #260]	; (80076c8 <xTaskResumeAll+0x114>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d109      	bne.n	80075de <xTaskResumeAll+0x2a>
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	e7fe      	b.n	80075dc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075de:	f7fe fd35 	bl	800604c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075e2:	4b39      	ldr	r3, [pc, #228]	; (80076c8 <xTaskResumeAll+0x114>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	4a37      	ldr	r2, [pc, #220]	; (80076c8 <xTaskResumeAll+0x114>)
 80075ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ec:	4b36      	ldr	r3, [pc, #216]	; (80076c8 <xTaskResumeAll+0x114>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d161      	bne.n	80076b8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075f4:	4b35      	ldr	r3, [pc, #212]	; (80076cc <xTaskResumeAll+0x118>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d05d      	beq.n	80076b8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075fc:	e02e      	b.n	800765c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80075fe:	4b34      	ldr	r3, [pc, #208]	; (80076d0 <xTaskResumeAll+0x11c>)
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3318      	adds	r3, #24
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe fbcf 	bl	8005dae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3304      	adds	r3, #4
 8007614:	4618      	mov	r0, r3
 8007616:	f7fe fbca 	bl	8005dae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	2201      	movs	r2, #1
 8007620:	409a      	lsls	r2, r3
 8007622:	4b2c      	ldr	r3, [pc, #176]	; (80076d4 <xTaskResumeAll+0x120>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4313      	orrs	r3, r2
 8007628:	4a2a      	ldr	r2, [pc, #168]	; (80076d4 <xTaskResumeAll+0x120>)
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007630:	4613      	mov	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4a27      	ldr	r2, [pc, #156]	; (80076d8 <xTaskResumeAll+0x124>)
 800763a:	441a      	add	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3304      	adds	r3, #4
 8007640:	4619      	mov	r1, r3
 8007642:	4610      	mov	r0, r2
 8007644:	f7fe fb56 	bl	8005cf4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764c:	4b23      	ldr	r3, [pc, #140]	; (80076dc <xTaskResumeAll+0x128>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007652:	429a      	cmp	r2, r3
 8007654:	d302      	bcc.n	800765c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007656:	4b22      	ldr	r3, [pc, #136]	; (80076e0 <xTaskResumeAll+0x12c>)
 8007658:	2201      	movs	r2, #1
 800765a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800765c:	4b1c      	ldr	r3, [pc, #112]	; (80076d0 <xTaskResumeAll+0x11c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1cc      	bne.n	80075fe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800766a:	f000 fbc1 	bl	8007df0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800766e:	4b1d      	ldr	r3, [pc, #116]	; (80076e4 <xTaskResumeAll+0x130>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d010      	beq.n	800769c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800767a:	f000 f847 	bl	800770c <xTaskIncrementTick>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007684:	4b16      	ldr	r3, [pc, #88]	; (80076e0 <xTaskResumeAll+0x12c>)
 8007686:	2201      	movs	r2, #1
 8007688:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3b01      	subs	r3, #1
 800768e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1f1      	bne.n	800767a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007696:	4b13      	ldr	r3, [pc, #76]	; (80076e4 <xTaskResumeAll+0x130>)
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800769c:	4b10      	ldr	r3, [pc, #64]	; (80076e0 <xTaskResumeAll+0x12c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d009      	beq.n	80076b8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076a4:	2301      	movs	r3, #1
 80076a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076a8:	4b0f      	ldr	r3, [pc, #60]	; (80076e8 <xTaskResumeAll+0x134>)
 80076aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076b8:	f7fe fcf6 	bl	80060a8 <vPortExitCritical>

	return xAlreadyYielded;
 80076bc:	68bb      	ldr	r3, [r7, #8]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20004634 	.word	0x20004634
 80076cc:	2000460c 	.word	0x2000460c
 80076d0:	200045cc 	.word	0x200045cc
 80076d4:	20004614 	.word	0x20004614
 80076d8:	20004510 	.word	0x20004510
 80076dc:	2000450c 	.word	0x2000450c
 80076e0:	20004620 	.word	0x20004620
 80076e4:	2000461c 	.word	0x2000461c
 80076e8:	e000ed04 	.word	0xe000ed04

080076ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80076f2:	4b05      	ldr	r3, [pc, #20]	; (8007708 <xTaskGetTickCount+0x1c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076f8:	687b      	ldr	r3, [r7, #4]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	20004610 	.word	0x20004610

0800770c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007716:	4b50      	ldr	r3, [pc, #320]	; (8007858 <xTaskIncrementTick+0x14c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	f040 808c 	bne.w	8007838 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007720:	4b4e      	ldr	r3, [pc, #312]	; (800785c <xTaskIncrementTick+0x150>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3301      	adds	r3, #1
 8007726:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007728:	4a4c      	ldr	r2, [pc, #304]	; (800785c <xTaskIncrementTick+0x150>)
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d11f      	bne.n	8007774 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007734:	4b4a      	ldr	r3, [pc, #296]	; (8007860 <xTaskIncrementTick+0x154>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d009      	beq.n	8007752 <xTaskIncrementTick+0x46>
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	e7fe      	b.n	8007750 <xTaskIncrementTick+0x44>
 8007752:	4b43      	ldr	r3, [pc, #268]	; (8007860 <xTaskIncrementTick+0x154>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	4b42      	ldr	r3, [pc, #264]	; (8007864 <xTaskIncrementTick+0x158>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a40      	ldr	r2, [pc, #256]	; (8007860 <xTaskIncrementTick+0x154>)
 800775e:	6013      	str	r3, [r2, #0]
 8007760:	4a40      	ldr	r2, [pc, #256]	; (8007864 <xTaskIncrementTick+0x158>)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6013      	str	r3, [r2, #0]
 8007766:	4b40      	ldr	r3, [pc, #256]	; (8007868 <xTaskIncrementTick+0x15c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3301      	adds	r3, #1
 800776c:	4a3e      	ldr	r2, [pc, #248]	; (8007868 <xTaskIncrementTick+0x15c>)
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	f000 fb3e 	bl	8007df0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007774:	4b3d      	ldr	r3, [pc, #244]	; (800786c <xTaskIncrementTick+0x160>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	429a      	cmp	r2, r3
 800777c:	d34d      	bcc.n	800781a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800777e:	4b38      	ldr	r3, [pc, #224]	; (8007860 <xTaskIncrementTick+0x154>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <xTaskIncrementTick+0x80>
 8007788:	2301      	movs	r3, #1
 800778a:	e000      	b.n	800778e <xTaskIncrementTick+0x82>
 800778c:	2300      	movs	r3, #0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d004      	beq.n	800779c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007792:	4b36      	ldr	r3, [pc, #216]	; (800786c <xTaskIncrementTick+0x160>)
 8007794:	f04f 32ff 	mov.w	r2, #4294967295
 8007798:	601a      	str	r2, [r3, #0]
					break;
 800779a:	e03e      	b.n	800781a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800779c:	4b30      	ldr	r3, [pc, #192]	; (8007860 <xTaskIncrementTick+0x154>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d203      	bcs.n	80077bc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077b4:	4a2d      	ldr	r2, [pc, #180]	; (800786c <xTaskIncrementTick+0x160>)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6013      	str	r3, [r2, #0]
						break;
 80077ba:	e02e      	b.n	800781a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	3304      	adds	r3, #4
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fe faf4 	bl	8005dae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d004      	beq.n	80077d8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	3318      	adds	r3, #24
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fe faeb 	bl	8005dae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	2201      	movs	r2, #1
 80077de:	409a      	lsls	r2, r3
 80077e0:	4b23      	ldr	r3, [pc, #140]	; (8007870 <xTaskIncrementTick+0x164>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	4a22      	ldr	r2, [pc, #136]	; (8007870 <xTaskIncrementTick+0x164>)
 80077e8:	6013      	str	r3, [r2, #0]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ee:	4613      	mov	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4a1f      	ldr	r2, [pc, #124]	; (8007874 <xTaskIncrementTick+0x168>)
 80077f8:	441a      	add	r2, r3
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	3304      	adds	r3, #4
 80077fe:	4619      	mov	r1, r3
 8007800:	4610      	mov	r0, r2
 8007802:	f7fe fa77 	bl	8005cf4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780a:	4b1b      	ldr	r3, [pc, #108]	; (8007878 <xTaskIncrementTick+0x16c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007810:	429a      	cmp	r2, r3
 8007812:	d3b4      	bcc.n	800777e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007814:	2301      	movs	r3, #1
 8007816:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007818:	e7b1      	b.n	800777e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800781a:	4b17      	ldr	r3, [pc, #92]	; (8007878 <xTaskIncrementTick+0x16c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	4914      	ldr	r1, [pc, #80]	; (8007874 <xTaskIncrementTick+0x168>)
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	440b      	add	r3, r1
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d907      	bls.n	8007842 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007832:	2301      	movs	r3, #1
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	e004      	b.n	8007842 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007838:	4b10      	ldr	r3, [pc, #64]	; (800787c <xTaskIncrementTick+0x170>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3301      	adds	r3, #1
 800783e:	4a0f      	ldr	r2, [pc, #60]	; (800787c <xTaskIncrementTick+0x170>)
 8007840:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007842:	4b0f      	ldr	r3, [pc, #60]	; (8007880 <xTaskIncrementTick+0x174>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800784a:	2301      	movs	r3, #1
 800784c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800784e:	697b      	ldr	r3, [r7, #20]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	20004634 	.word	0x20004634
 800785c:	20004610 	.word	0x20004610
 8007860:	200045c4 	.word	0x200045c4
 8007864:	200045c8 	.word	0x200045c8
 8007868:	20004624 	.word	0x20004624
 800786c:	2000462c 	.word	0x2000462c
 8007870:	20004614 	.word	0x20004614
 8007874:	20004510 	.word	0x20004510
 8007878:	2000450c 	.word	0x2000450c
 800787c:	2000461c 	.word	0x2000461c
 8007880:	20004620 	.word	0x20004620

08007884 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800788a:	4b26      	ldr	r3, [pc, #152]	; (8007924 <vTaskSwitchContext+0xa0>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007892:	4b25      	ldr	r3, [pc, #148]	; (8007928 <vTaskSwitchContext+0xa4>)
 8007894:	2201      	movs	r2, #1
 8007896:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007898:	e03e      	b.n	8007918 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800789a:	4b23      	ldr	r3, [pc, #140]	; (8007928 <vTaskSwitchContext+0xa4>)
 800789c:	2200      	movs	r2, #0
 800789e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80078a0:	4b22      	ldr	r3, [pc, #136]	; (800792c <vTaskSwitchContext+0xa8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	fab3 f383 	clz	r3, r3
 80078ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80078ae:	7afb      	ldrb	r3, [r7, #11]
 80078b0:	f1c3 031f 	rsb	r3, r3, #31
 80078b4:	617b      	str	r3, [r7, #20]
 80078b6:	491e      	ldr	r1, [pc, #120]	; (8007930 <vTaskSwitchContext+0xac>)
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	4613      	mov	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	440b      	add	r3, r1
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <vTaskSwitchContext+0x5a>
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	607b      	str	r3, [r7, #4]
 80078dc:	e7fe      	b.n	80078dc <vTaskSwitchContext+0x58>
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	4613      	mov	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4a11      	ldr	r2, [pc, #68]	; (8007930 <vTaskSwitchContext+0xac>)
 80078ea:	4413      	add	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	605a      	str	r2, [r3, #4]
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	3308      	adds	r3, #8
 8007900:	429a      	cmp	r2, r3
 8007902:	d104      	bne.n	800790e <vTaskSwitchContext+0x8a>
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	605a      	str	r2, [r3, #4]
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	4a07      	ldr	r2, [pc, #28]	; (8007934 <vTaskSwitchContext+0xb0>)
 8007916:	6013      	str	r3, [r2, #0]
}
 8007918:	bf00      	nop
 800791a:	371c      	adds	r7, #28
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr
 8007924:	20004634 	.word	0x20004634
 8007928:	20004620 	.word	0x20004620
 800792c:	20004614 	.word	0x20004614
 8007930:	20004510 	.word	0x20004510
 8007934:	2000450c 	.word	0x2000450c

08007938 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d109      	bne.n	800795c <vTaskPlaceOnEventList+0x24>
 8007948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	60fb      	str	r3, [r7, #12]
 800795a:	e7fe      	b.n	800795a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800795c:	4b07      	ldr	r3, [pc, #28]	; (800797c <vTaskPlaceOnEventList+0x44>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3318      	adds	r3, #24
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7fe f9e9 	bl	8005d3c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800796a:	2101      	movs	r1, #1
 800796c:	6838      	ldr	r0, [r7, #0]
 800796e:	f000 fd3f 	bl	80083f0 <prvAddCurrentTaskToDelayedList>
}
 8007972:	bf00      	nop
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	2000450c 	.word	0x2000450c

08007980 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d109      	bne.n	80079a6 <vTaskPlaceOnUnorderedEventList+0x26>
 8007992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	e7fe      	b.n	80079a4 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80079a6:	4b11      	ldr	r3, [pc, #68]	; (80079ec <vTaskPlaceOnUnorderedEventList+0x6c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d109      	bne.n	80079c2 <vTaskPlaceOnUnorderedEventList+0x42>
 80079ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	613b      	str	r3, [r7, #16]
 80079c0:	e7fe      	b.n	80079c0 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80079c2:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <vTaskPlaceOnUnorderedEventList+0x70>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80079cc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079ce:	4b08      	ldr	r3, [pc, #32]	; (80079f0 <vTaskPlaceOnUnorderedEventList+0x70>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3318      	adds	r3, #24
 80079d4:	4619      	mov	r1, r3
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f7fe f98c 	bl	8005cf4 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079dc:	2101      	movs	r1, #1
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fd06 	bl	80083f0 <prvAddCurrentTaskToDelayedList>
}
 80079e4:	bf00      	nop
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	20004634 	.word	0x20004634
 80079f0:	2000450c 	.word	0x2000450c

080079f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d109      	bne.n	8007a1e <xTaskRemoveFromEventList+0x2a>
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	e7fe      	b.n	8007a1c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	3318      	adds	r3, #24
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe f9c3 	bl	8005dae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a28:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <xTaskRemoveFromEventList+0xac>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d11c      	bne.n	8007a6a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	3304      	adds	r3, #4
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fe f9ba 	bl	8005dae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3e:	2201      	movs	r2, #1
 8007a40:	409a      	lsls	r2, r3
 8007a42:	4b18      	ldr	r3, [pc, #96]	; (8007aa4 <xTaskRemoveFromEventList+0xb0>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	4a16      	ldr	r2, [pc, #88]	; (8007aa4 <xTaskRemoveFromEventList+0xb0>)
 8007a4a:	6013      	str	r3, [r2, #0]
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a50:	4613      	mov	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4a13      	ldr	r2, [pc, #76]	; (8007aa8 <xTaskRemoveFromEventList+0xb4>)
 8007a5a:	441a      	add	r2, r3
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	4619      	mov	r1, r3
 8007a62:	4610      	mov	r0, r2
 8007a64:	f7fe f946 	bl	8005cf4 <vListInsertEnd>
 8007a68:	e005      	b.n	8007a76 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	3318      	adds	r3, #24
 8007a6e:	4619      	mov	r1, r3
 8007a70:	480e      	ldr	r0, [pc, #56]	; (8007aac <xTaskRemoveFromEventList+0xb8>)
 8007a72:	f7fe f93f 	bl	8005cf4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7a:	4b0d      	ldr	r3, [pc, #52]	; (8007ab0 <xTaskRemoveFromEventList+0xbc>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d905      	bls.n	8007a90 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a84:	2301      	movs	r3, #1
 8007a86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a88:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <xTaskRemoveFromEventList+0xc0>)
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	e001      	b.n	8007a94 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007a90:	2300      	movs	r3, #0
 8007a92:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007a94:	697b      	ldr	r3, [r7, #20]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3718      	adds	r7, #24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20004634 	.word	0x20004634
 8007aa4:	20004614 	.word	0x20004614
 8007aa8:	20004510 	.word	0x20004510
 8007aac:	200045cc 	.word	0x200045cc
 8007ab0:	2000450c 	.word	0x2000450c
 8007ab4:	20004620 	.word	0x20004620

08007ab8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007ac2:	4b28      	ldr	r3, [pc, #160]	; (8007b64 <vTaskRemoveFromUnorderedEventList+0xac>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d109      	bne.n	8007ade <vTaskRemoveFromUnorderedEventList+0x26>
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	613b      	str	r3, [r7, #16]
 8007adc:	e7fe      	b.n	8007adc <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d109      	bne.n	8007b08 <vTaskRemoveFromUnorderedEventList+0x50>
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	60fb      	str	r3, [r7, #12]
 8007b06:	e7fe      	b.n	8007b06 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7fe f950 	bl	8005dae <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	3304      	adds	r3, #4
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe f94b 	bl	8005dae <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	409a      	lsls	r2, r3
 8007b20:	4b11      	ldr	r3, [pc, #68]	; (8007b68 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	4a10      	ldr	r2, [pc, #64]	; (8007b68 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4a0d      	ldr	r2, [pc, #52]	; (8007b6c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007b38:	441a      	add	r2, r3
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4610      	mov	r0, r2
 8007b42:	f7fe f8d7 	bl	8005cf4 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4a:	4b09      	ldr	r3, [pc, #36]	; (8007b70 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d902      	bls.n	8007b5a <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007b54:	4b07      	ldr	r3, [pc, #28]	; (8007b74 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007b56:	2201      	movs	r2, #1
 8007b58:	601a      	str	r2, [r3, #0]
	}
}
 8007b5a:	bf00      	nop
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20004634 	.word	0x20004634
 8007b68:	20004614 	.word	0x20004614
 8007b6c:	20004510 	.word	0x20004510
 8007b70:	2000450c 	.word	0x2000450c
 8007b74:	20004620 	.word	0x20004620

08007b78 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d109      	bne.n	8007b9a <vTaskSetTimeOutState+0x22>
 8007b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	e7fe      	b.n	8007b98 <vTaskSetTimeOutState+0x20>
	taskENTER_CRITICAL();
 8007b9a:	f7fe fa57 	bl	800604c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b9e:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <vTaskSetTimeOutState+0x44>)
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007ba6:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <vTaskSetTimeOutState+0x48>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007bae:	f7fe fa7b 	bl	80060a8 <vPortExitCritical>
}
 8007bb2:	bf00      	nop
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	20004624 	.word	0x20004624
 8007bc0:	20004610 	.word	0x20004610

08007bc4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bcc:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <vTaskInternalSetTimeOutState+0x24>)
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bd4:	4b05      	ldr	r3, [pc, #20]	; (8007bec <vTaskInternalSetTimeOutState+0x28>)
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	605a      	str	r2, [r3, #4]
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	20004624 	.word	0x20004624
 8007bec:	20004610 	.word	0x20004610

08007bf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b088      	sub	sp, #32
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d109      	bne.n	8007c14 <xTaskCheckForTimeOut+0x24>
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	613b      	str	r3, [r7, #16]
 8007c12:	e7fe      	b.n	8007c12 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d109      	bne.n	8007c2e <xTaskCheckForTimeOut+0x3e>
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	e7fe      	b.n	8007c2c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007c2e:	f7fe fa0d 	bl	800604c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c32:	4b1d      	ldr	r3, [pc, #116]	; (8007ca8 <xTaskCheckForTimeOut+0xb8>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4a:	d102      	bne.n	8007c52 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	61fb      	str	r3, [r7, #28]
 8007c50:	e023      	b.n	8007c9a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	4b15      	ldr	r3, [pc, #84]	; (8007cac <xTaskCheckForTimeOut+0xbc>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d007      	beq.n	8007c6e <xTaskCheckForTimeOut+0x7e>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d802      	bhi.n	8007c6e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	61fb      	str	r3, [r7, #28]
 8007c6c:	e015      	b.n	8007c9a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d90b      	bls.n	8007c90 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	1ad2      	subs	r2, r2, r3
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff ff9d 	bl	8007bc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	61fb      	str	r3, [r7, #28]
 8007c8e:	e004      	b.n	8007c9a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c96:	2301      	movs	r3, #1
 8007c98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c9a:	f7fe fa05 	bl	80060a8 <vPortExitCritical>

	return xReturn;
 8007c9e:	69fb      	ldr	r3, [r7, #28]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3720      	adds	r7, #32
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	20004610 	.word	0x20004610
 8007cac:	20004624 	.word	0x20004624

08007cb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007cb4:	4b03      	ldr	r3, [pc, #12]	; (8007cc4 <vTaskMissedYield+0x14>)
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	601a      	str	r2, [r3, #0]
}
 8007cba:	bf00      	nop
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	20004620 	.word	0x20004620

08007cc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007cd0:	f000 f852 	bl	8007d78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cd4:	4b06      	ldr	r3, [pc, #24]	; (8007cf0 <prvIdleTask+0x28>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d9f9      	bls.n	8007cd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007cdc:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <prvIdleTask+0x2c>)
 8007cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007cec:	e7f0      	b.n	8007cd0 <prvIdleTask+0x8>
 8007cee:	bf00      	nop
 8007cf0:	20004510 	.word	0x20004510
 8007cf4:	e000ed04 	.word	0xe000ed04

08007cf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cfe:	2300      	movs	r3, #0
 8007d00:	607b      	str	r3, [r7, #4]
 8007d02:	e00c      	b.n	8007d1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4a12      	ldr	r2, [pc, #72]	; (8007d58 <prvInitialiseTaskLists+0x60>)
 8007d10:	4413      	add	r3, r2
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fd ffc1 	bl	8005c9a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	607b      	str	r3, [r7, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2b06      	cmp	r3, #6
 8007d22:	d9ef      	bls.n	8007d04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d24:	480d      	ldr	r0, [pc, #52]	; (8007d5c <prvInitialiseTaskLists+0x64>)
 8007d26:	f7fd ffb8 	bl	8005c9a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d2a:	480d      	ldr	r0, [pc, #52]	; (8007d60 <prvInitialiseTaskLists+0x68>)
 8007d2c:	f7fd ffb5 	bl	8005c9a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d30:	480c      	ldr	r0, [pc, #48]	; (8007d64 <prvInitialiseTaskLists+0x6c>)
 8007d32:	f7fd ffb2 	bl	8005c9a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d36:	480c      	ldr	r0, [pc, #48]	; (8007d68 <prvInitialiseTaskLists+0x70>)
 8007d38:	f7fd ffaf 	bl	8005c9a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d3c:	480b      	ldr	r0, [pc, #44]	; (8007d6c <prvInitialiseTaskLists+0x74>)
 8007d3e:	f7fd ffac 	bl	8005c9a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d42:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <prvInitialiseTaskLists+0x78>)
 8007d44:	4a05      	ldr	r2, [pc, #20]	; (8007d5c <prvInitialiseTaskLists+0x64>)
 8007d46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d48:	4b0a      	ldr	r3, [pc, #40]	; (8007d74 <prvInitialiseTaskLists+0x7c>)
 8007d4a:	4a05      	ldr	r2, [pc, #20]	; (8007d60 <prvInitialiseTaskLists+0x68>)
 8007d4c:	601a      	str	r2, [r3, #0]
}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20004510 	.word	0x20004510
 8007d5c:	2000459c 	.word	0x2000459c
 8007d60:	200045b0 	.word	0x200045b0
 8007d64:	200045cc 	.word	0x200045cc
 8007d68:	200045e0 	.word	0x200045e0
 8007d6c:	200045f8 	.word	0x200045f8
 8007d70:	200045c4 	.word	0x200045c4
 8007d74:	200045c8 	.word	0x200045c8

08007d78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d7e:	e019      	b.n	8007db4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d80:	f7fe f964 	bl	800604c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007d84:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <prvCheckTasksWaitingTermination+0x4c>)
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3304      	adds	r3, #4
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fe f80c 	bl	8005dae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d96:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <prvCheckTasksWaitingTermination+0x50>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	4a0a      	ldr	r2, [pc, #40]	; (8007dc8 <prvCheckTasksWaitingTermination+0x50>)
 8007d9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007da0:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <prvCheckTasksWaitingTermination+0x54>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	4a09      	ldr	r2, [pc, #36]	; (8007dcc <prvCheckTasksWaitingTermination+0x54>)
 8007da8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007daa:	f7fe f97d 	bl	80060a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f80e 	bl	8007dd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007db4:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <prvCheckTasksWaitingTermination+0x54>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e1      	bne.n	8007d80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007dbc:	bf00      	nop
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	200045e0 	.word	0x200045e0
 8007dc8:	2000460c 	.word	0x2000460c
 8007dcc:	200045f4 	.word	0x200045f4

08007dd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fe fb11 	bl	8006404 <vPortFree>
			vPortFree( pxTCB );
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7fe fb0e 	bl	8006404 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007df6:	4b0f      	ldr	r3, [pc, #60]	; (8007e34 <prvResetNextTaskUnblockTime+0x44>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <prvResetNextTaskUnblockTime+0x14>
 8007e00:	2301      	movs	r3, #1
 8007e02:	e000      	b.n	8007e06 <prvResetNextTaskUnblockTime+0x16>
 8007e04:	2300      	movs	r3, #0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d004      	beq.n	8007e14 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e0a:	4b0b      	ldr	r3, [pc, #44]	; (8007e38 <prvResetNextTaskUnblockTime+0x48>)
 8007e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e10:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e12:	e008      	b.n	8007e26 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007e14:	4b07      	ldr	r3, [pc, #28]	; (8007e34 <prvResetNextTaskUnblockTime+0x44>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	4a05      	ldr	r2, [pc, #20]	; (8007e38 <prvResetNextTaskUnblockTime+0x48>)
 8007e24:	6013      	str	r3, [r2, #0]
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	200045c4 	.word	0x200045c4
 8007e38:	2000462c 	.word	0x2000462c

08007e3c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007e42:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <xTaskGetCurrentTaskHandle+0x1c>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007e48:	687b      	ldr	r3, [r7, #4]
	}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	2000450c 	.word	0x2000450c

08007e5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e62:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <xTaskGetSchedulerState+0x34>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d102      	bne.n	8007e70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	607b      	str	r3, [r7, #4]
 8007e6e:	e008      	b.n	8007e82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e70:	4b08      	ldr	r3, [pc, #32]	; (8007e94 <xTaskGetSchedulerState+0x38>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d102      	bne.n	8007e7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e78:	2302      	movs	r3, #2
 8007e7a:	607b      	str	r3, [r7, #4]
 8007e7c:	e001      	b.n	8007e82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e82:	687b      	ldr	r3, [r7, #4]
	}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	20004618 	.word	0x20004618
 8007e94:	20004634 	.word	0x20004634

08007e98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d06e      	beq.n	8007f8c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb2:	4b39      	ldr	r3, [pc, #228]	; (8007f98 <xTaskPriorityInherit+0x100>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d25e      	bcs.n	8007f7a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	db06      	blt.n	8007ed2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ec4:	4b34      	ldr	r3, [pc, #208]	; (8007f98 <xTaskPriorityInherit+0x100>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	f1c3 0207 	rsb	r2, r3, #7
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	6959      	ldr	r1, [r3, #20]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eda:	4613      	mov	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4413      	add	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4a2e      	ldr	r2, [pc, #184]	; (8007f9c <xTaskPriorityInherit+0x104>)
 8007ee4:	4413      	add	r3, r2
 8007ee6:	4299      	cmp	r1, r3
 8007ee8:	d101      	bne.n	8007eee <xTaskPriorityInherit+0x56>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e000      	b.n	8007ef0 <xTaskPriorityInherit+0x58>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d03a      	beq.n	8007f6a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fd ff58 	bl	8005dae <uxListRemove>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d115      	bne.n	8007f30 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f08:	4924      	ldr	r1, [pc, #144]	; (8007f9c <xTaskPriorityInherit+0x104>)
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	440b      	add	r3, r1
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10a      	bne.n	8007f30 <xTaskPriorityInherit+0x98>
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1e:	2201      	movs	r2, #1
 8007f20:	fa02 f303 	lsl.w	r3, r2, r3
 8007f24:	43da      	mvns	r2, r3
 8007f26:	4b1e      	ldr	r3, [pc, #120]	; (8007fa0 <xTaskPriorityInherit+0x108>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	4a1c      	ldr	r2, [pc, #112]	; (8007fa0 <xTaskPriorityInherit+0x108>)
 8007f2e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f30:	4b19      	ldr	r3, [pc, #100]	; (8007f98 <xTaskPriorityInherit+0x100>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3e:	2201      	movs	r2, #1
 8007f40:	409a      	lsls	r2, r3
 8007f42:	4b17      	ldr	r3, [pc, #92]	; (8007fa0 <xTaskPriorityInherit+0x108>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	4a15      	ldr	r2, [pc, #84]	; (8007fa0 <xTaskPriorityInherit+0x108>)
 8007f4a:	6013      	str	r3, [r2, #0]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f50:	4613      	mov	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4a10      	ldr	r2, [pc, #64]	; (8007f9c <xTaskPriorityInherit+0x104>)
 8007f5a:	441a      	add	r2, r3
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	3304      	adds	r3, #4
 8007f60:	4619      	mov	r1, r3
 8007f62:	4610      	mov	r0, r2
 8007f64:	f7fd fec6 	bl	8005cf4 <vListInsertEnd>
 8007f68:	e004      	b.n	8007f74 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f6a:	4b0b      	ldr	r3, [pc, #44]	; (8007f98 <xTaskPriorityInherit+0x100>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007f74:	2301      	movs	r3, #1
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	e008      	b.n	8007f8c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f7e:	4b06      	ldr	r3, [pc, #24]	; (8007f98 <xTaskPriorityInherit+0x100>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d201      	bcs.n	8007f8c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
	}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	2000450c 	.word	0x2000450c
 8007f9c:	20004510 	.word	0x20004510
 8007fa0:	20004614 	.word	0x20004614

08007fa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d06c      	beq.n	8008094 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fba:	4b39      	ldr	r3, [pc, #228]	; (80080a0 <xTaskPriorityDisinherit+0xfc>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d009      	beq.n	8007fd8 <xTaskPriorityDisinherit+0x34>
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	e7fe      	b.n	8007fd6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d109      	bne.n	8007ff4 <xTaskPriorityDisinherit+0x50>
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	60bb      	str	r3, [r7, #8]
 8007ff2:	e7fe      	b.n	8007ff2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ff8:	1e5a      	subs	r2, r3, #1
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008006:	429a      	cmp	r2, r3
 8008008:	d044      	beq.n	8008094 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800800e:	2b00      	cmp	r3, #0
 8008010:	d140      	bne.n	8008094 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	3304      	adds	r3, #4
 8008016:	4618      	mov	r0, r3
 8008018:	f7fd fec9 	bl	8005dae <uxListRemove>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d115      	bne.n	800804e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008026:	491f      	ldr	r1, [pc, #124]	; (80080a4 <xTaskPriorityDisinherit+0x100>)
 8008028:	4613      	mov	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	440b      	add	r3, r1
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10a      	bne.n	800804e <xTaskPriorityDisinherit+0xaa>
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	2201      	movs	r2, #1
 800803e:	fa02 f303 	lsl.w	r3, r2, r3
 8008042:	43da      	mvns	r2, r3
 8008044:	4b18      	ldr	r3, [pc, #96]	; (80080a8 <xTaskPriorityDisinherit+0x104>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4013      	ands	r3, r2
 800804a:	4a17      	ldr	r2, [pc, #92]	; (80080a8 <xTaskPriorityDisinherit+0x104>)
 800804c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805a:	f1c3 0207 	rsb	r2, r3, #7
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008066:	2201      	movs	r2, #1
 8008068:	409a      	lsls	r2, r3
 800806a:	4b0f      	ldr	r3, [pc, #60]	; (80080a8 <xTaskPriorityDisinherit+0x104>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4313      	orrs	r3, r2
 8008070:	4a0d      	ldr	r2, [pc, #52]	; (80080a8 <xTaskPriorityDisinherit+0x104>)
 8008072:	6013      	str	r3, [r2, #0]
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008078:	4613      	mov	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4a08      	ldr	r2, [pc, #32]	; (80080a4 <xTaskPriorityDisinherit+0x100>)
 8008082:	441a      	add	r2, r3
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	3304      	adds	r3, #4
 8008088:	4619      	mov	r1, r3
 800808a:	4610      	mov	r0, r2
 800808c:	f7fd fe32 	bl	8005cf4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008090:	2301      	movs	r3, #1
 8008092:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008094:	697b      	ldr	r3, [r7, #20]
	}
 8008096:	4618      	mov	r0, r3
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	2000450c 	.word	0x2000450c
 80080a4:	20004510 	.word	0x20004510
 80080a8:	20004614 	.word	0x20004614

080080ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80080ba:	2301      	movs	r3, #1
 80080bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 8086 	beq.w	80081d2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d109      	bne.n	80080e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	e7fe      	b.n	80080e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d202      	bcs.n	80080f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	61fb      	str	r3, [r7, #28]
 80080f0:	e002      	b.n	80080f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d067      	beq.n	80081d2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	429a      	cmp	r2, r3
 800810a:	d162      	bne.n	80081d2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800810c:	4b33      	ldr	r3, [pc, #204]	; (80081dc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	429a      	cmp	r2, r3
 8008114:	d109      	bne.n	800812a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8008116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	60bb      	str	r3, [r7, #8]
 8008128:	e7fe      	b.n	8008128 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	69fa      	ldr	r2, [r7, #28]
 8008134:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	2b00      	cmp	r3, #0
 800813c:	db04      	blt.n	8008148 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	f1c3 0207 	rsb	r2, r3, #7
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	6959      	ldr	r1, [r3, #20]
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	4613      	mov	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4a22      	ldr	r2, [pc, #136]	; (80081e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008158:	4413      	add	r3, r2
 800815a:	4299      	cmp	r1, r3
 800815c:	d101      	bne.n	8008162 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800815e:	2301      	movs	r3, #1
 8008160:	e000      	b.n	8008164 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8008162:	2300      	movs	r3, #0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d034      	beq.n	80081d2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	3304      	adds	r3, #4
 800816c:	4618      	mov	r0, r3
 800816e:	f7fd fe1e 	bl	8005dae <uxListRemove>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d115      	bne.n	80081a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817c:	4918      	ldr	r1, [pc, #96]	; (80081e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800817e:	4613      	mov	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	440b      	add	r3, r1
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10a      	bne.n	80081a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008192:	2201      	movs	r2, #1
 8008194:	fa02 f303 	lsl.w	r3, r2, r3
 8008198:	43da      	mvns	r2, r3
 800819a:	4b12      	ldr	r3, [pc, #72]	; (80081e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4013      	ands	r3, r2
 80081a0:	4a10      	ldr	r2, [pc, #64]	; (80081e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80081a2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a8:	2201      	movs	r2, #1
 80081aa:	409a      	lsls	r2, r3
 80081ac:	4b0d      	ldr	r3, [pc, #52]	; (80081e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	4a0c      	ldr	r2, [pc, #48]	; (80081e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80081b4:	6013      	str	r3, [r2, #0]
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ba:	4613      	mov	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4a07      	ldr	r2, [pc, #28]	; (80081e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80081c4:	441a      	add	r2, r3
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	3304      	adds	r3, #4
 80081ca:	4619      	mov	r1, r3
 80081cc:	4610      	mov	r0, r2
 80081ce:	f7fd fd91 	bl	8005cf4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081d2:	bf00      	nop
 80081d4:	3720      	adds	r7, #32
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	2000450c 	.word	0x2000450c
 80081e0:	20004510 	.word	0x20004510
 80081e4:	20004614 	.word	0x20004614

080081e8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80081ee:	4b09      	ldr	r3, [pc, #36]	; (8008214 <uxTaskResetEventItemValue+0x2c>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081f6:	4b07      	ldr	r3, [pc, #28]	; (8008214 <uxTaskResetEventItemValue+0x2c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a06      	ldr	r2, [pc, #24]	; (8008214 <uxTaskResetEventItemValue+0x2c>)
 80081fc:	6812      	ldr	r2, [r2, #0]
 80081fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008200:	f1c2 0207 	rsb	r2, r2, #7
 8008204:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008206:	687b      	ldr	r3, [r7, #4]
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	2000450c 	.word	0x2000450c

08008218 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008218:	b480      	push	{r7}
 800821a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800821c:	4b07      	ldr	r3, [pc, #28]	; (800823c <pvTaskIncrementMutexHeldCount+0x24>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d004      	beq.n	800822e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008224:	4b05      	ldr	r3, [pc, #20]	; (800823c <pvTaskIncrementMutexHeldCount+0x24>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800822a:	3201      	adds	r2, #1
 800822c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800822e:	4b03      	ldr	r3, [pc, #12]	; (800823c <pvTaskIncrementMutexHeldCount+0x24>)
 8008230:	681b      	ldr	r3, [r3, #0]
	}
 8008232:	4618      	mov	r0, r3
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	2000450c 	.word	0x2000450c

08008240 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800824a:	f7fd feff 	bl	800604c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800824e:	4b1e      	ldr	r3, [pc, #120]	; (80082c8 <ulTaskNotifyTake+0x88>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d113      	bne.n	8008280 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008258:	4b1b      	ldr	r3, [pc, #108]	; (80082c8 <ulTaskNotifyTake+0x88>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008268:	2101      	movs	r1, #1
 800826a:	6838      	ldr	r0, [r7, #0]
 800826c:	f000 f8c0 	bl	80083f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008270:	4b16      	ldr	r3, [pc, #88]	; (80082cc <ulTaskNotifyTake+0x8c>)
 8008272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008280:	f7fd ff12 	bl	80060a8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008284:	f7fd fee2 	bl	800604c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8008288:	4b0f      	ldr	r3, [pc, #60]	; (80082c8 <ulTaskNotifyTake+0x88>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800828e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00c      	beq.n	80082b0 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d004      	beq.n	80082a6 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800829c:	4b0a      	ldr	r3, [pc, #40]	; (80082c8 <ulTaskNotifyTake+0x88>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2200      	movs	r2, #0
 80082a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80082a4:	e004      	b.n	80082b0 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80082a6:	4b08      	ldr	r3, [pc, #32]	; (80082c8 <ulTaskNotifyTake+0x88>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	3a01      	subs	r2, #1
 80082ae:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082b0:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <ulTaskNotifyTake+0x88>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80082ba:	f7fd fef5 	bl	80060a8 <vPortExitCritical>

		return ulReturn;
 80082be:	68fb      	ldr	r3, [r7, #12]
	}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	2000450c 	.word	0x2000450c
 80082cc:	e000ed04 	.word	0xe000ed04

080082d0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08a      	sub	sp, #40	; 0x28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d109      	bne.n	80082f4 <vTaskNotifyGiveFromISR+0x24>
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	61bb      	str	r3, [r7, #24]
 80082f2:	e7fe      	b.n	80082f2 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082f4:	f7fd ff86 	bl	8006204 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 80082fc:	f3ef 8211 	mrs	r2, BASEPRI
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	617a      	str	r2, [r7, #20]
 8008312:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008314:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008316:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800831e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	2202      	movs	r2, #2
 8008324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008332:	7ffb      	ldrb	r3, [r7, #31]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d145      	bne.n	80083c4 <vTaskNotifyGiveFromISR+0xf4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833c:	2b00      	cmp	r3, #0
 800833e:	d009      	beq.n	8008354 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	e7fe      	b.n	8008352 <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008354:	4b20      	ldr	r3, [pc, #128]	; (80083d8 <vTaskNotifyGiveFromISR+0x108>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d11c      	bne.n	8008396 <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	3304      	adds	r3, #4
 8008360:	4618      	mov	r0, r3
 8008362:	f7fd fd24 	bl	8005dae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836a:	2201      	movs	r2, #1
 800836c:	409a      	lsls	r2, r3
 800836e:	4b1b      	ldr	r3, [pc, #108]	; (80083dc <vTaskNotifyGiveFromISR+0x10c>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4313      	orrs	r3, r2
 8008374:	4a19      	ldr	r2, [pc, #100]	; (80083dc <vTaskNotifyGiveFromISR+0x10c>)
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800837c:	4613      	mov	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4a16      	ldr	r2, [pc, #88]	; (80083e0 <vTaskNotifyGiveFromISR+0x110>)
 8008386:	441a      	add	r2, r3
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	3304      	adds	r3, #4
 800838c:	4619      	mov	r1, r3
 800838e:	4610      	mov	r0, r2
 8008390:	f7fd fcb0 	bl	8005cf4 <vListInsertEnd>
 8008394:	e005      	b.n	80083a2 <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	3318      	adds	r3, #24
 800839a:	4619      	mov	r1, r3
 800839c:	4811      	ldr	r0, [pc, #68]	; (80083e4 <vTaskNotifyGiveFromISR+0x114>)
 800839e:	f7fd fca9 	bl	8005cf4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a6:	4b10      	ldr	r3, [pc, #64]	; (80083e8 <vTaskNotifyGiveFromISR+0x118>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d909      	bls.n	80083c4 <vTaskNotifyGiveFromISR+0xf4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d003      	beq.n	80083be <vTaskNotifyGiveFromISR+0xee>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2201      	movs	r2, #1
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	e002      	b.n	80083c4 <vTaskNotifyGiveFromISR+0xf4>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 80083be:	4b0b      	ldr	r3, [pc, #44]	; (80083ec <vTaskNotifyGiveFromISR+0x11c>)
 80083c0:	2201      	movs	r2, #1
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80083ce:	bf00      	nop
 80083d0:	3728      	adds	r7, #40	; 0x28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20004634 	.word	0x20004634
 80083dc:	20004614 	.word	0x20004614
 80083e0:	20004510 	.word	0x20004510
 80083e4:	200045cc 	.word	0x200045cc
 80083e8:	2000450c 	.word	0x2000450c
 80083ec:	20004620 	.word	0x20004620

080083f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083fa:	4b29      	ldr	r3, [pc, #164]	; (80084a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008400:	4b28      	ldr	r3, [pc, #160]	; (80084a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3304      	adds	r3, #4
 8008406:	4618      	mov	r0, r3
 8008408:	f7fd fcd1 	bl	8005dae <uxListRemove>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10b      	bne.n	800842a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008412:	4b24      	ldr	r3, [pc, #144]	; (80084a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008418:	2201      	movs	r2, #1
 800841a:	fa02 f303 	lsl.w	r3, r2, r3
 800841e:	43da      	mvns	r2, r3
 8008420:	4b21      	ldr	r3, [pc, #132]	; (80084a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4013      	ands	r3, r2
 8008426:	4a20      	ldr	r2, [pc, #128]	; (80084a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008428:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008430:	d10a      	bne.n	8008448 <prvAddCurrentTaskToDelayedList+0x58>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d007      	beq.n	8008448 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008438:	4b1a      	ldr	r3, [pc, #104]	; (80084a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3304      	adds	r3, #4
 800843e:	4619      	mov	r1, r3
 8008440:	481a      	ldr	r0, [pc, #104]	; (80084ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8008442:	f7fd fc57 	bl	8005cf4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008446:	e026      	b.n	8008496 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4413      	add	r3, r2
 800844e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008450:	4b14      	ldr	r3, [pc, #80]	; (80084a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	429a      	cmp	r2, r3
 800845e:	d209      	bcs.n	8008474 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008460:	4b13      	ldr	r3, [pc, #76]	; (80084b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	4b0f      	ldr	r3, [pc, #60]	; (80084a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3304      	adds	r3, #4
 800846a:	4619      	mov	r1, r3
 800846c:	4610      	mov	r0, r2
 800846e:	f7fd fc65 	bl	8005d3c <vListInsert>
}
 8008472:	e010      	b.n	8008496 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008474:	4b0f      	ldr	r3, [pc, #60]	; (80084b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	4b0a      	ldr	r3, [pc, #40]	; (80084a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3304      	adds	r3, #4
 800847e:	4619      	mov	r1, r3
 8008480:	4610      	mov	r0, r2
 8008482:	f7fd fc5b 	bl	8005d3c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008486:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	429a      	cmp	r2, r3
 800848e:	d202      	bcs.n	8008496 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008490:	4a09      	ldr	r2, [pc, #36]	; (80084b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	6013      	str	r3, [r2, #0]
}
 8008496:	bf00      	nop
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20004610 	.word	0x20004610
 80084a4:	2000450c 	.word	0x2000450c
 80084a8:	20004614 	.word	0x20004614
 80084ac:	200045f8 	.word	0x200045f8
 80084b0:	200045c8 	.word	0x200045c8
 80084b4:	200045c4 	.word	0x200045c4
 80084b8:	2000462c 	.word	0x2000462c

080084bc <eARPProcessPacket>:
};

/*-----------------------------------------------------------*/

eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
eFrameProcessingResult_t eReturn = eReleaseBuffer;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73fb      	strb	r3, [r7, #15]
ARPHeader_t *pxARPHeader;

	pxARPHeader = &( pxARPFrame->xARPHeader );
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	330e      	adds	r3, #14
 80084cc:	60bb      	str	r3, [r7, #8]

	traceARP_PACKET_RECEIVED();

	/* Don't do anything if the local IP address is zero because
	that means a DHCP request has not completed. */
	if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 80084ce:	4b39      	ldr	r3, [pc, #228]	; (80085b4 <eARPProcessPacket+0xf8>)
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d068      	beq.n	80085a8 <eARPProcessPacket+0xec>
	{
		switch( pxARPHeader->usOperation )
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	88db      	ldrh	r3, [r3, #6]
 80084da:	b29b      	uxth	r3, r3
 80084dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084e0:	d003      	beq.n	80084ea <eARPProcessPacket+0x2e>
 80084e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084e6:	d053      	beq.n	8008590 <eARPProcessPacket+0xd4>
				#endif /* ipconfigARP_USE_CLASH_DETECTION */
				break;

			default :
				/* Invalid. */
				break;
 80084e8:	e05e      	b.n	80085a8 <eARPProcessPacket+0xec>
				if( pxARPHeader->ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	699a      	ldr	r2, [r3, #24]
 80084ee:	4b31      	ldr	r3, [pc, #196]	; (80085b4 <eARPProcessPacket+0xf8>)
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d157      	bne.n	80085a6 <eARPProcessPacket+0xea>
					vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), pxARPHeader->ulSenderProtocolAddress );
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	f103 0208 	add.w	r2, r3, #8
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8008502:	4619      	mov	r1, r3
 8008504:	4610      	mov	r0, r2
 8008506:	f000 f859 	bl	80085bc <vARPRefreshCacheEntry>
					pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2200      	movs	r2, #0
 800850e:	719a      	strb	r2, [r3, #6]
 8008510:	2200      	movs	r2, #0
 8008512:	f042 0202 	orr.w	r2, r2, #2
 8008516:	71da      	strb	r2, [r3, #7]
					if( pxARPHeader->ulTargetProtocolAddress == pxARPHeader->ulSenderProtocolAddress )
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	699a      	ldr	r2, [r3, #24]
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8008522:	429a      	cmp	r2, r3
 8008524:	d117      	bne.n	8008556 <eARPProcessPacket+0x9a>
						memcpy( pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes, xBroadcastMACAddress.ucBytes, sizeof( xBroadcastMACAddress ) );
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3306      	adds	r3, #6
 800852a:	4a23      	ldr	r2, [pc, #140]	; (80085b8 <eARPProcessPacket+0xfc>)
 800852c:	6811      	ldr	r1, [r2, #0]
 800852e:	6019      	str	r1, [r3, #0]
 8008530:	8892      	ldrh	r2, [r2, #4]
 8008532:	809a      	strh	r2, [r3, #4]
						memset( pxARPHeader->xTargetHardwareAddress.ucBytes, '\0', sizeof( MACAddress_t ) );
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	3312      	adds	r3, #18
 8008538:	2206      	movs	r2, #6
 800853a:	2100      	movs	r1, #0
 800853c:	4618      	mov	r0, r3
 800853e:	f008 fae1 	bl	8010b04 <memset>
						pxARPHeader->ulTargetProtocolAddress = 0UL;
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2200      	movs	r2, #0
 8008546:	761a      	strb	r2, [r3, #24]
 8008548:	2200      	movs	r2, #0
 800854a:	765a      	strb	r2, [r3, #25]
 800854c:	2200      	movs	r2, #0
 800854e:	769a      	strb	r2, [r3, #26]
 8008550:	2200      	movs	r2, #0
 8008552:	76da      	strb	r2, [r3, #27]
 8008554:	e00d      	b.n	8008572 <eARPProcessPacket+0xb6>
						memcpy( pxARPHeader->xTargetHardwareAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, sizeof( MACAddress_t ) );
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	f103 0012 	add.w	r0, r3, #18
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	3308      	adds	r3, #8
 8008560:	2206      	movs	r2, #6
 8008562:	4619      	mov	r1, r3
 8008564:	f008 faa9 	bl	8010aba <memcpy>
						pxARPHeader->ulTargetProtocolAddress = pxARPHeader->ulSenderProtocolAddress;
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	619a      	str	r2, [r3, #24]
					memcpy( pxARPHeader->xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	3308      	adds	r3, #8
 8008576:	2206      	movs	r2, #6
 8008578:	490e      	ldr	r1, [pc, #56]	; (80085b4 <eARPProcessPacket+0xf8>)
 800857a:	4618      	mov	r0, r3
 800857c:	f008 fa9d 	bl	8010aba <memcpy>
					pxARPHeader->ulSenderProtocolAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8008580:	4b0c      	ldr	r3, [pc, #48]	; (80085b4 <eARPProcessPacket+0xf8>)
 8008582:	695a      	ldr	r2, [r3, #20]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	f8c3 200e 	str.w	r2, [r3, #14]
					eReturn = eReturnEthernetFrame;
 800858a:	2302      	movs	r3, #2
 800858c:	73fb      	strb	r3, [r7, #15]
				break;
 800858e:	e00a      	b.n	80085a6 <eARPProcessPacket+0xea>
				vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), pxARPHeader->ulSenderProtocolAddress );
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	f103 0208 	add.w	r2, r3, #8
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800859c:	4619      	mov	r1, r3
 800859e:	4610      	mov	r0, r2
 80085a0:	f000 f80c 	bl	80085bc <vARPRefreshCacheEntry>
				break;
 80085a4:	e000      	b.n	80085a8 <eARPProcessPacket+0xec>
				break;
 80085a6:	bf00      	nop
		}
	}

	return eReturn;
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	2000009c 	.word	0x2000009c
 80085b8:	08010f48 	.word	0x08010f48

080085bc <vARPRefreshCacheEntry>:

#endif	/* ipconfigUSE_ARP_REMOVE_ENTRY != 0 */
/*-----------------------------------------------------------*/

void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress, const uint32_t ulIPAddress )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b088      	sub	sp, #32
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
BaseType_t x, xIpEntry = -1, xMacEntry = -1, xUseEntry = 0;
 80085c6:	f04f 33ff 	mov.w	r3, #4294967295
 80085ca:	61bb      	str	r3, [r7, #24]
 80085cc:	f04f 33ff 	mov.w	r3, #4294967295
 80085d0:	617b      	str	r3, [r7, #20]
 80085d2:	2300      	movs	r3, #0
 80085d4:	613b      	str	r3, [r7, #16]
uint8_t ucMinAgeFound = 0U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	73fb      	strb	r3, [r7, #15]

	#if( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )
		/* Only process the IP address if it is on the local network.
		Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
		and netmask are still unknown. */
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 80085da:	4b71      	ldr	r3, [pc, #452]	; (80087a0 <vARPRefreshCacheEntry+0x1e4>)
 80085dc:	695a      	ldr	r2, [r3, #20]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	405a      	eors	r2, r3
 80085e2:	4b70      	ldr	r3, [pc, #448]	; (80087a4 <vARPRefreshCacheEntry+0x1e8>)
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	4013      	ands	r3, r2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <vARPRefreshCacheEntry+0x3a>
			( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 80085ec:	4b6c      	ldr	r3, [pc, #432]	; (80087a0 <vARPRefreshCacheEntry+0x1e4>)
 80085ee:	695b      	ldr	r3, [r3, #20]
		if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f040 80d2 	bne.w	800879a <vARPRefreshCacheEntry+0x1de>
		zero the the gateway address is the only option. */
		if( pdTRUE )
	#endif
	{
		/* Start with the maximum possible number. */
		ucMinAgeFound--;
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	73fb      	strb	r3, [r7, #15]

		/* For each entry in the ARP cache table. */
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80085fc:	2300      	movs	r3, #0
 80085fe:	61fb      	str	r3, [r7, #28]
 8008600:	e069      	b.n	80086d6 <vARPRefreshCacheEntry+0x11a>
		{
			/* Does this line in the cache table hold an entry for the IP
			address	being queried? */
			if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8008602:	4969      	ldr	r1, [pc, #420]	; (80087a8 <vARPRefreshCacheEntry+0x1ec>)
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	4613      	mov	r3, r2
 8008608:	005b      	lsls	r3, r3, #1
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	440b      	add	r3, r1
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	429a      	cmp	r2, r3
 8008616:	d12d      	bne.n	8008674 <vARPRefreshCacheEntry+0xb8>
			{
				if( pxMACAddress == NULL )
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d102      	bne.n	8008624 <vARPRefreshCacheEntry+0x68>
				{
					/* In case the parameter pxMACAddress is NULL, an entry will be reserved to
					indicate that there is an outstanding ARP request, This entry will have
					"ucValid == pdFALSE". */
					xIpEntry = x;
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	61bb      	str	r3, [r7, #24]
					break;
 8008622:	e05b      	b.n	80086dc <vARPRefreshCacheEntry+0x120>
				}

				/* See if the MAC-address also matches. */
				if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8008624:	69fa      	ldr	r2, [r7, #28]
 8008626:	4613      	mov	r3, r2
 8008628:	005b      	lsls	r3, r3, #1
 800862a:	4413      	add	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4a5e      	ldr	r2, [pc, #376]	; (80087a8 <vARPRefreshCacheEntry+0x1ec>)
 8008630:	4413      	add	r3, r2
 8008632:	3304      	adds	r3, #4
 8008634:	6879      	ldr	r1, [r7, #4]
 8008636:	2206      	movs	r2, #6
 8008638:	4618      	mov	r0, r3
 800863a:	f008 fa2f 	bl	8010a9c <memcmp>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d114      	bne.n	800866e <vARPRefreshCacheEntry+0xb2>
				{
					/* This function will be called for each received packet
					As this is by far the most common path the coding standard
					is relaxed in this case and a return is permitted as an
					optimisation. */
					xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8008644:	4958      	ldr	r1, [pc, #352]	; (80087a8 <vARPRefreshCacheEntry+0x1ec>)
 8008646:	69fa      	ldr	r2, [r7, #28]
 8008648:	4613      	mov	r3, r2
 800864a:	005b      	lsls	r3, r3, #1
 800864c:	4413      	add	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	440b      	add	r3, r1
 8008652:	330a      	adds	r3, #10
 8008654:	2296      	movs	r2, #150	; 0x96
 8008656:	701a      	strb	r2, [r3, #0]
					xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 8008658:	4953      	ldr	r1, [pc, #332]	; (80087a8 <vARPRefreshCacheEntry+0x1ec>)
 800865a:	69fa      	ldr	r2, [r7, #28]
 800865c:	4613      	mov	r3, r2
 800865e:	005b      	lsls	r3, r3, #1
 8008660:	4413      	add	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	440b      	add	r3, r1
 8008666:	330b      	adds	r3, #11
 8008668:	2201      	movs	r2, #1
 800866a:	701a      	strb	r2, [r3, #0]
					return;
 800866c:	e095      	b.n	800879a <vARPRefreshCacheEntry+0x1de>
				/* Found an entry containing ulIPAddress, but the MAC address
				doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
				for an ARP reply.  Still want to see if there is match with the
				given MAC address.ucBytes.  If found, either of the two entries
				must be cleared. */
				xIpEntry = x;
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	61bb      	str	r3, [r7, #24]
 8008672:	e02d      	b.n	80086d0 <vARPRefreshCacheEntry+0x114>
			}
			else if( ( pxMACAddress != NULL ) && ( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 ) )
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d012      	beq.n	80086a0 <vARPRefreshCacheEntry+0xe4>
 800867a:	69fa      	ldr	r2, [r7, #28]
 800867c:	4613      	mov	r3, r2
 800867e:	005b      	lsls	r3, r3, #1
 8008680:	4413      	add	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4a48      	ldr	r2, [pc, #288]	; (80087a8 <vARPRefreshCacheEntry+0x1ec>)
 8008686:	4413      	add	r3, r2
 8008688:	3304      	adds	r3, #4
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	2206      	movs	r2, #6
 800868e:	4618      	mov	r0, r3
 8008690:	f008 fa04 	bl	8010a9c <memcmp>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d102      	bne.n	80086a0 <vARPRefreshCacheEntry+0xe4>
				if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
				{
					xMacEntry = x;
				}
	#else
				xMacEntry = x;
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	e017      	b.n	80086d0 <vARPRefreshCacheEntry+0x114>
	#endif
			}
			/* _HT_
			Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
			else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 80086a0:	4941      	ldr	r1, [pc, #260]	; (80087a8 <vARPRefreshCacheEntry+0x1ec>)
 80086a2:	69fa      	ldr	r2, [r7, #28]
 80086a4:	4613      	mov	r3, r2
 80086a6:	005b      	lsls	r3, r3, #1
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	440b      	add	r3, r1
 80086ae:	330a      	adds	r3, #10
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	7bfa      	ldrb	r2, [r7, #15]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d90b      	bls.n	80086d0 <vARPRefreshCacheEntry+0x114>
			{
				/* As the table is traversed, remember the table row that
				contains the oldest entry (the lowest age count, as ages are
				decremented to zero) so the row can be re-used if this function
				needs to add an entry that does not already exist. */
				ucMinAgeFound = xARPCache[ x ].ucAge;
 80086b8:	493b      	ldr	r1, [pc, #236]	; (80087a8 <vARPRefreshCacheEntry+0x1ec>)
 80086ba:	69fa      	ldr	r2, [r7, #28]
 80086bc:	4613      	mov	r3, r2
 80086be:	005b      	lsls	r3, r3, #1
 80086c0:	4413      	add	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	440b      	add	r3, r1
 80086c6:	330a      	adds	r3, #10
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	73fb      	strb	r3, [r7, #15]
				xUseEntry = x;
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	613b      	str	r3, [r7, #16]
		for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	3301      	adds	r3, #1
 80086d4:	61fb      	str	r3, [r7, #28]
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	2b05      	cmp	r3, #5
 80086da:	dd92      	ble.n	8008602 <vARPRefreshCacheEntry+0x46>
			}
		}

		if( xMacEntry >= 0 )
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	db11      	blt.n	8008706 <vARPRefreshCacheEntry+0x14a>
		{
			xUseEntry = xMacEntry;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	613b      	str	r3, [r7, #16]

			if( xIpEntry >= 0 )
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	db11      	blt.n	8008710 <vARPRefreshCacheEntry+0x154>
			{
				/* Both the MAC address as well as the IP address were found in
				different locations: clear the entry which matches the
				IP-address */
				memset( &xARPCache[ xIpEntry ], '\0', sizeof( xARPCache[ xIpEntry ] ) );
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	4613      	mov	r3, r2
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	4413      	add	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4a2c      	ldr	r2, [pc, #176]	; (80087a8 <vARPRefreshCacheEntry+0x1ec>)
 80086f8:	4413      	add	r3, r2
 80086fa:	220c      	movs	r2, #12
 80086fc:	2100      	movs	r1, #0
 80086fe:	4618      	mov	r0, r3
 8008700:	f008 fa00 	bl	8010b04 <memset>
 8008704:	e004      	b.n	8008710 <vARPRefreshCacheEntry+0x154>
			}
		}
		else if( xIpEntry >= 0 )
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	2b00      	cmp	r3, #0
 800870a:	db01      	blt.n	8008710 <vARPRefreshCacheEntry+0x154>
		{
			/* An entry containing the IP-address was found, but it had a different MAC address */
			xUseEntry = xIpEntry;
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	613b      	str	r3, [r7, #16]
		}

		/* If the entry was not found, we use the oldest entry and set the IPaddress */
		xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 8008710:	4925      	ldr	r1, [pc, #148]	; (80087a8 <vARPRefreshCacheEntry+0x1ec>)
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	4613      	mov	r3, r2
 8008716:	005b      	lsls	r3, r3, #1
 8008718:	4413      	add	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	440b      	add	r3, r1
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	601a      	str	r2, [r3, #0]

		if( pxMACAddress != NULL )
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d021      	beq.n	800876c <vARPRefreshCacheEntry+0x1b0>
		{
			memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	4613      	mov	r3, r2
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	4413      	add	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4a1d      	ldr	r2, [pc, #116]	; (80087a8 <vARPRefreshCacheEntry+0x1ec>)
 8008734:	4413      	add	r3, r2
 8008736:	3304      	adds	r3, #4
 8008738:	6879      	ldr	r1, [r7, #4]
 800873a:	2206      	movs	r2, #6
 800873c:	4618      	mov	r0, r3
 800873e:	f008 f9bc 	bl	8010aba <memcpy>

			iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, (*pxMACAddress) );
			/* And this entry does not need immediate attention */
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8008742:	4919      	ldr	r1, [pc, #100]	; (80087a8 <vARPRefreshCacheEntry+0x1ec>)
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	4613      	mov	r3, r2
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	440b      	add	r3, r1
 8008750:	330a      	adds	r3, #10
 8008752:	2296      	movs	r2, #150	; 0x96
 8008754:	701a      	strb	r2, [r3, #0]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8008756:	4914      	ldr	r1, [pc, #80]	; (80087a8 <vARPRefreshCacheEntry+0x1ec>)
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	4613      	mov	r3, r2
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	4413      	add	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	440b      	add	r3, r1
 8008764:	330b      	adds	r3, #11
 8008766:	2201      	movs	r2, #1
 8008768:	701a      	strb	r2, [r3, #0]
 800876a:	e016      	b.n	800879a <vARPRefreshCacheEntry+0x1de>
		}
		else if( xIpEntry < 0 )
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	2b00      	cmp	r3, #0
 8008770:	da13      	bge.n	800879a <vARPRefreshCacheEntry+0x1de>
		{
			xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8008772:	490d      	ldr	r1, [pc, #52]	; (80087a8 <vARPRefreshCacheEntry+0x1ec>)
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	4613      	mov	r3, r2
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	4413      	add	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	440b      	add	r3, r1
 8008780:	330a      	adds	r3, #10
 8008782:	2205      	movs	r2, #5
 8008784:	701a      	strb	r2, [r3, #0]
			xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8008786:	4908      	ldr	r1, [pc, #32]	; (80087a8 <vARPRefreshCacheEntry+0x1ec>)
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	4613      	mov	r3, r2
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	4413      	add	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	440b      	add	r3, r1
 8008794:	330b      	adds	r3, #11
 8008796:	2200      	movs	r2, #0
 8008798:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800879a:	3720      	adds	r7, #32
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	2000009c 	.word	0x2000009c
 80087a4:	20004728 	.word	0x20004728
 80087a8:	20004638 	.word	0x20004638

080087ac <eARPGetCacheEntry>:
#endif /* ipconfigUSE_ARP_REVERSED_LOOKUP */

/*-----------------------------------------------------------*/

eARPLookupResult_t eARPGetCacheEntry( uint32_t *pulIPAddress, MACAddress_t * const pxMACAddress )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
eARPLookupResult_t eReturn;
uint32_t ulAddressToLookup;

#if( ipconfigUSE_LLMNR == 1 )
	if( *pulIPAddress == ipLLMNR_IP_ADDR )	/* Is in network byte order */
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a2a      	ldr	r2, [pc, #168]	; (8008864 <eARPGetCacheEntry+0xb8>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d108      	bne.n	80087d2 <eARPGetCacheEntry+0x26>
	{
		/* The LLMNR IP-address has a fixed virtual MAC address */
		memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	4a29      	ldr	r2, [pc, #164]	; (8008868 <eARPGetCacheEntry+0xbc>)
 80087c4:	6811      	ldr	r1, [r2, #0]
 80087c6:	6019      	str	r1, [r3, #0]
 80087c8:	8892      	ldrh	r2, [r2, #4]
 80087ca:	809a      	strh	r2, [r3, #4]
		eReturn = eARPCacheHit;
 80087cc:	2301      	movs	r3, #1
 80087ce:	73fb      	strb	r3, [r7, #15]
 80087d0:	e042      	b.n	8008858 <eARPGetCacheEntry+0xac>
	}
	else
#endif
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087da:	d005      	beq.n	80087e8 <eARPGetCacheEntry+0x3c>
		( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) )/* Or a local broadcast address, eg 192.168.1.255? */
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	4b22      	ldr	r3, [pc, #136]	; (800886c <eARPGetCacheEntry+0xc0>)
 80087e2:	691b      	ldr	r3, [r3, #16]
	if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||	/* Is it the general broadcast address 255.255.255.255? */
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d108      	bne.n	80087fa <eARPGetCacheEntry+0x4e>
	{
		/* This is a broadcast so uses the broadcast MAC address. */
		memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	4a21      	ldr	r2, [pc, #132]	; (8008870 <eARPGetCacheEntry+0xc4>)
 80087ec:	6811      	ldr	r1, [r2, #0]
 80087ee:	6019      	str	r1, [r3, #0]
 80087f0:	8892      	ldrh	r2, [r2, #4]
 80087f2:	809a      	strh	r2, [r3, #4]
		eReturn = eARPCacheHit;
 80087f4:	2301      	movs	r3, #1
 80087f6:	73fb      	strb	r3, [r7, #15]
 80087f8:	e02e      	b.n	8008858 <eARPGetCacheEntry+0xac>
	}
	else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 80087fa:	4b1e      	ldr	r3, [pc, #120]	; (8008874 <eARPGetCacheEntry+0xc8>)
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d102      	bne.n	8008808 <eARPGetCacheEntry+0x5c>
	{
		/* The IP address has not yet been assigned, so there is nothing that
		can be done. */
		eReturn = eCantSendPacket;
 8008802:	2302      	movs	r3, #2
 8008804:	73fb      	strb	r3, [r7, #15]
 8008806:	e027      	b.n	8008858 <eARPGetCacheEntry+0xac>
	}
	else
	{
		eReturn = eARPCacheMiss;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]

		if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	4b18      	ldr	r3, [pc, #96]	; (8008874 <eARPGetCacheEntry+0xc8>)
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	405a      	eors	r2, r3
 8008816:	4b15      	ldr	r3, [pc, #84]	; (800886c <eARPGetCacheEntry+0xc0>)
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	4013      	ands	r3, r2
 800881c:	2b00      	cmp	r3, #0
 800881e:	d003      	beq.n	8008828 <eARPGetCacheEntry+0x7c>
			else
#endif
			{
				/* The IP address is off the local network, so look up the
				hardware address of the router, if any. */
				ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 8008820:	4b12      	ldr	r3, [pc, #72]	; (800886c <eARPGetCacheEntry+0xc0>)
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	60bb      	str	r3, [r7, #8]
 8008826:	e002      	b.n	800882e <eARPGetCacheEntry+0x82>
		}
		else
		{
			/* The IP address is on the local network, so lookup the requested
			IP address directly. */
			ulAddressToLookup = *pulIPAddress;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	60bb      	str	r3, [r7, #8]
		}

		if( eReturn == eARPCacheMiss )
 800882e:	7bfb      	ldrb	r3, [r7, #15]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d111      	bne.n	8008858 <eARPGetCacheEntry+0xac>
		{
			if( ulAddressToLookup == 0UL )
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d102      	bne.n	8008840 <eARPGetCacheEntry+0x94>
			{
				/* The address is not on the local network, and there is not a
				router. */
				eReturn = eCantSendPacket;
 800883a:	2302      	movs	r3, #2
 800883c:	73fb      	strb	r3, [r7, #15]
 800883e:	e00b      	b.n	8008858 <eARPGetCacheEntry+0xac>
			}
			else
			{
				eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	68b8      	ldr	r0, [r7, #8]
 8008844:	f000 f818 	bl	8008878 <prvCacheLookup>
 8008848:	4603      	mov	r3, r0
 800884a:	73fb      	strb	r3, [r7, #15]

				if( eReturn == eARPCacheMiss )
 800884c:	7bfb      	ldrb	r3, [r7, #15]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d102      	bne.n	8008858 <eARPGetCacheEntry+0xac>
				{
					/* It might be that the ARP has to go to the gateway. */
					*pulIPAddress = ulAddressToLookup;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

	return eReturn;
 8008858:	7bfb      	ldrb	r3, [r7, #15]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	fc0000e0 	.word	0xfc0000e0
 8008868:	08010f40 	.word	0x08010f40
 800886c:	20004728 	.word	0x20004728
 8008870:	08010f48 	.word	0x08010f48
 8008874:	2000009c 	.word	0x2000009c

08008878 <prvCacheLookup>:

/*-----------------------------------------------------------*/

static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup, MACAddress_t * const pxMACAddress )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
BaseType_t x;
eARPLookupResult_t eReturn = eARPCacheMiss;
 8008882:	2300      	movs	r3, #0
 8008884:	72fb      	strb	r3, [r7, #11]

	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8008886:	2300      	movs	r3, #0
 8008888:	60fb      	str	r3, [r7, #12]
 800888a:	e02b      	b.n	80088e4 <prvCacheLookup+0x6c>
	{
		/* Does this row in the ARP cache table hold an entry for the IP address
		being queried? */
		if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800888c:	4919      	ldr	r1, [pc, #100]	; (80088f4 <prvCacheLookup+0x7c>)
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	4613      	mov	r3, r2
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	440b      	add	r3, r1
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d11d      	bne.n	80088de <prvCacheLookup+0x66>
		{
			/* A matching valid entry was found. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80088a2:	4914      	ldr	r1, [pc, #80]	; (80088f4 <prvCacheLookup+0x7c>)
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	4613      	mov	r3, r2
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	4413      	add	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	440b      	add	r3, r1
 80088b0:	330b      	adds	r3, #11
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d102      	bne.n	80088be <prvCacheLookup+0x46>
			{
				/* This entry is waiting an ARP reply, so is not valid. */
				eReturn = eCantSendPacket;
 80088b8:	2302      	movs	r3, #2
 80088ba:	72fb      	strb	r3, [r7, #11]
			{
				/* A valid entry was found. */
				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
				eReturn = eARPCacheHit;
			}
			break;
 80088bc:	e015      	b.n	80088ea <prvCacheLookup+0x72>
				memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80088be:	6838      	ldr	r0, [r7, #0]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	4613      	mov	r3, r2
 80088c4:	005b      	lsls	r3, r3, #1
 80088c6:	4413      	add	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4a0a      	ldr	r2, [pc, #40]	; (80088f4 <prvCacheLookup+0x7c>)
 80088cc:	4413      	add	r3, r2
 80088ce:	3304      	adds	r3, #4
 80088d0:	2206      	movs	r2, #6
 80088d2:	4619      	mov	r1, r3
 80088d4:	f008 f8f1 	bl	8010aba <memcpy>
				eReturn = eARPCacheHit;
 80088d8:	2301      	movs	r3, #1
 80088da:	72fb      	strb	r3, [r7, #11]
			break;
 80088dc:	e005      	b.n	80088ea <prvCacheLookup+0x72>
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3301      	adds	r3, #1
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b05      	cmp	r3, #5
 80088e8:	ddd0      	ble.n	800888c <prvCacheLookup+0x14>
		}
	}

	return eReturn;
 80088ea:	7afb      	ldrb	r3, [r7, #11]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	20004638 	.word	0x20004638

080088f8 <vARPAgeCache>:
/*-----------------------------------------------------------*/

void vARPAgeCache( void )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
BaseType_t x;
TickType_t xTimeNow;

	/* Loop through each entry in the ARP cache. */
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80088fe:	2300      	movs	r3, #0
 8008900:	607b      	str	r3, [r7, #4]
 8008902:	e063      	b.n	80089cc <vARPAgeCache+0xd4>
	{
		/* If the entry is valid (its age is greater than zero). */
		if( xARPCache[ x ].ucAge > 0U )
 8008904:	4940      	ldr	r1, [pc, #256]	; (8008a08 <vARPAgeCache+0x110>)
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	4613      	mov	r3, r2
 800890a:	005b      	lsls	r3, r3, #1
 800890c:	4413      	add	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	440b      	add	r3, r1
 8008912:	330a      	adds	r3, #10
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d055      	beq.n	80089c6 <vARPAgeCache+0xce>
		{
			/* Decrement the age value of the entry in this ARP cache table row.
			When the age reaches zero it is no longer considered valid. */
			( xARPCache[ x ].ucAge )--;
 800891a:	493b      	ldr	r1, [pc, #236]	; (8008a08 <vARPAgeCache+0x110>)
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	4613      	mov	r3, r2
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	4413      	add	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	440b      	add	r3, r1
 8008928:	330a      	adds	r3, #10
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	3b01      	subs	r3, #1
 800892e:	b2d8      	uxtb	r0, r3
 8008930:	4935      	ldr	r1, [pc, #212]	; (8008a08 <vARPAgeCache+0x110>)
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	4613      	mov	r3, r2
 8008936:	005b      	lsls	r3, r3, #1
 8008938:	4413      	add	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	440b      	add	r3, r1
 800893e:	330a      	adds	r3, #10
 8008940:	4602      	mov	r2, r0
 8008942:	701a      	strb	r2, [r3, #0]

			/* If the entry is not yet valid, then it is waiting an ARP
			reply, and the ARP request should be retransmitted. */
			if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8008944:	4930      	ldr	r1, [pc, #192]	; (8008a08 <vARPAgeCache+0x110>)
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	4613      	mov	r3, r2
 800894a:	005b      	lsls	r3, r3, #1
 800894c:	4413      	add	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	440b      	add	r3, r1
 8008952:	330b      	adds	r3, #11
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10b      	bne.n	8008972 <vARPAgeCache+0x7a>
			{
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800895a:	492b      	ldr	r1, [pc, #172]	; (8008a08 <vARPAgeCache+0x110>)
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	4613      	mov	r3, r2
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	4413      	add	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	440b      	add	r3, r1
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4618      	mov	r0, r3
 800896c:	f000 f85e 	bl	8008a2c <FreeRTOS_OutputARPRequest>
 8008970:	e015      	b.n	800899e <vARPAgeCache+0xa6>
			}
			else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8008972:	4925      	ldr	r1, [pc, #148]	; (8008a08 <vARPAgeCache+0x110>)
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	4613      	mov	r3, r2
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	440b      	add	r3, r1
 8008980:	330a      	adds	r3, #10
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	2b03      	cmp	r3, #3
 8008986:	d80a      	bhi.n	800899e <vARPAgeCache+0xa6>
			{
				/* This entry will get removed soon.  See if the MAC address is
				still valid to prevent this happening. */
				iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
				FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8008988:	491f      	ldr	r1, [pc, #124]	; (8008a08 <vARPAgeCache+0x110>)
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	4613      	mov	r3, r2
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	4413      	add	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	440b      	add	r3, r1
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	f000 f847 	bl	8008a2c <FreeRTOS_OutputARPRequest>
			else
			{
				/* The age has just ticked down, with nothing to do. */
			}

			if( xARPCache[ x ].ucAge == 0u )
 800899e:	491a      	ldr	r1, [pc, #104]	; (8008a08 <vARPAgeCache+0x110>)
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	4613      	mov	r3, r2
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	4413      	add	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	440b      	add	r3, r1
 80089ac:	330a      	adds	r3, #10
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d108      	bne.n	80089c6 <vARPAgeCache+0xce>
			{
				/* The entry is no longer valid.  Wipe it out. */
				iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
				xARPCache[ x ].ulIPAddress = 0UL;
 80089b4:	4914      	ldr	r1, [pc, #80]	; (8008a08 <vARPAgeCache+0x110>)
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	4613      	mov	r3, r2
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	4413      	add	r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	440b      	add	r3, r1
 80089c2:	2200      	movs	r2, #0
 80089c4:	601a      	str	r2, [r3, #0]
	for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	3301      	adds	r3, #1
 80089ca:	607b      	str	r3, [r7, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b05      	cmp	r3, #5
 80089d0:	dd98      	ble.n	8008904 <vARPAgeCache+0xc>
			}
		}
	}

	xTimeNow = xTaskGetTickCount ();
 80089d2:	f7fe fe8b 	bl	80076ec <xTaskGetTickCount>
 80089d6:	6038      	str	r0, [r7, #0]

	if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 80089d8:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <vARPAgeCache+0x114>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d007      	beq.n	80089f0 <vARPAgeCache+0xf8>
 80089e0:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <vARPAgeCache+0x114>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d907      	bls.n	8008a00 <vARPAgeCache+0x108>
	{
		FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 80089f0:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <vARPAgeCache+0x118>)
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 f819 	bl	8008a2c <FreeRTOS_OutputARPRequest>
		xLastGratuitousARPTime = xTimeNow;
 80089fa:	4a04      	ldr	r2, [pc, #16]	; (8008a0c <vARPAgeCache+0x114>)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	6013      	str	r3, [r2, #0]
	}
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	20004638 	.word	0x20004638
 8008a0c:	20004680 	.word	0x20004680
 8008a10:	2000009c 	.word	0x2000009c

08008a14 <vARPSendGratuitous>:
/*-----------------------------------------------------------*/

void vARPSendGratuitous( void )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	af00      	add	r7, sp, #0
	/* Setting xLastGratuitousARPTime to 0 will force a gratuitous ARP the next
	time vARPAgeCache() is called. */
	xLastGratuitousARPTime = ( TickType_t ) 0;
 8008a18:	4b03      	ldr	r3, [pc, #12]	; (8008a28 <vARPSendGratuitous+0x14>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]

	/* Let the IP-task call vARPAgeCache(). */
	xSendEventToIPTask( eARPTimerEvent );
 8008a1e:	2002      	movs	r0, #2
 8008a20:	f001 fc96 	bl	800a350 <xSendEventToIPTask>
}
 8008a24:	bf00      	nop
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	20004680 	.word	0x20004680

08008a2c <FreeRTOS_OutputARPRequest>:

/*-----------------------------------------------------------*/
void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
NetworkBufferDescriptor_t *pxNetworkBuffer;

	/* This is called from the context of the IP event task, so a block time
	must not be used. */
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0 );
 8008a34:	2100      	movs	r1, #0
 8008a36:	202a      	movs	r0, #42	; 0x2a
 8008a38:	f007 f818 	bl	800fa6c <pxGetNetworkBufferWithDescriptor>
 8008a3c:	60f8      	str	r0, [r7, #12]

	if( pxNetworkBuffer != NULL )
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d009      	beq.n	8008a58 <FreeRTOS_OutputARPRequest+0x2c>
	{
		pxNetworkBuffer->ulIPAddress = ulIPAddress;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	615a      	str	r2, [r3, #20]
		vARPGenerateRequestPacket( pxNetworkBuffer );
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 f808 	bl	8008a60 <vARPGenerateRequestPacket>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
			}
		}
		#endif

		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8008a50:	2101      	movs	r1, #1
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f7fb fec0 	bl	80047d8 <xNetworkInterfaceOutput>
	}
}
 8008a58:	bf00      	nop
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <vARPGenerateRequestPacket>:

void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
ARPPacket_t *pxARPPacket;

	pxARPPacket = ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	60fb      	str	r3, [r7, #12]
		xARPHeader.ucHardwareAddressLength;
		xARPHeader.ucProtocolAddressLength;
		xARPHeader.usOperation;
		xARPHeader.xTargetHardwareAddress;
	*/
	memcpy( ( void * ) &( pxARPPacket->xEthernetHeader ), ( void * ) xDefaultPartARPPacketHeader, sizeof( xDefaultPartARPPacketHeader ) );
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	4a1a      	ldr	r2, [pc, #104]	; (8008adc <vARPGenerateRequestPacket+0x7c>)
 8008a72:	4614      	mov	r4, r2
 8008a74:	469e      	mov	lr, r3
 8008a76:	f104 0c20 	add.w	ip, r4, #32
 8008a7a:	4675      	mov	r5, lr
 8008a7c:	4626      	mov	r6, r4
 8008a7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008a80:	6028      	str	r0, [r5, #0]
 8008a82:	6069      	str	r1, [r5, #4]
 8008a84:	60aa      	str	r2, [r5, #8]
 8008a86:	60eb      	str	r3, [r5, #12]
 8008a88:	3410      	adds	r4, #16
 8008a8a:	f10e 0e10 	add.w	lr, lr, #16
 8008a8e:	4564      	cmp	r4, ip
 8008a90:	d1f3      	bne.n	8008a7a <vARPGenerateRequestPacket+0x1a>
 8008a92:	4673      	mov	r3, lr
 8008a94:	4622      	mov	r2, r4
 8008a96:	6810      	ldr	r0, [r2, #0]
 8008a98:	6018      	str	r0, [r3, #0]
 8008a9a:	8892      	ldrh	r2, [r2, #4]
 8008a9c:	809a      	strh	r2, [r3, #4]
	memcpy( ( void * ) pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3306      	adds	r3, #6
 8008aa2:	2206      	movs	r2, #6
 8008aa4:	490e      	ldr	r1, [pc, #56]	; (8008ae0 <vARPGenerateRequestPacket+0x80>)
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f008 f807 	bl	8010aba <memcpy>
	memcpy( ( void * ) pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes, ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	3316      	adds	r3, #22
 8008ab0:	2206      	movs	r2, #6
 8008ab2:	490b      	ldr	r1, [pc, #44]	; (8008ae0 <vARPGenerateRequestPacket+0x80>)
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f008 f800 	bl	8010aba <memcpy>
	/* HT:endian: network to network */
	pxARPPacket->xARPHeader.ulSenderProtocolAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8008aba:	4b09      	ldr	r3, [pc, #36]	; (8008ae0 <vARPGenerateRequestPacket+0x80>)
 8008abc:	695a      	ldr	r2, [r3, #20]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	61da      	str	r2, [r3, #28]
	pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	695a      	ldr	r2, [r3, #20]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

	pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	222a      	movs	r2, #42	; 0x2a
 8008ad0:	61da      	str	r2, [r3, #28]

	iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
 8008ad2:	bf00      	nop
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ada:	bf00      	nop
 8008adc:	08010eec 	.word	0x08010eec
 8008ae0:	2000009c 	.word	0x2000009c

08008ae4 <xIsDHCPSocket>:
static DHCPData_t xDHCPData;

/*-----------------------------------------------------------*/

BaseType_t xIsDHCPSocket( Socket_t xSocket )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	if( xDHCPData.xDHCPSocket == xSocket )
 8008aec:	4b08      	ldr	r3, [pc, #32]	; (8008b10 <xIsDHCPSocket+0x2c>)
 8008aee:	6a1a      	ldr	r2, [r3, #32]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d102      	bne.n	8008afc <xIsDHCPSocket+0x18>
	{
		xReturn = pdTRUE;
 8008af6:	2301      	movs	r3, #1
 8008af8:	60fb      	str	r3, [r7, #12]
 8008afa:	e001      	b.n	8008b00 <xIsDHCPSocket+0x1c>
	}
	else
	{
		xReturn = pdFALSE;
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008b00:	68fb      	ldr	r3, [r7, #12]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	20004684 	.word	0x20004684

08008b14 <vDHCPProcess>:
/*-----------------------------------------------------------*/

void vDHCPProcess( BaseType_t xReset )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
BaseType_t xGivingUp = pdFALSE;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	60fb      	str	r3, [r7, #12]
#if( ipconfigUSE_DHCP_HOOK != 0 )
	eDHCPCallbackAnswer_t eAnswer;
#endif	/* ipconfigUSE_DHCP_HOOK */

	/* Is DHCP starting over? */
	if( xReset != pdFALSE )
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <vDHCPProcess+0x18>
	{
		xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 8008b26:	4b8d      	ldr	r3, [pc, #564]	; (8008d5c <vDHCPProcess+0x248>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	771a      	strb	r2, [r3, #28]
	}

	switch( xDHCPData.eDHCPState )
 8008b2c:	4b8b      	ldr	r3, [pc, #556]	; (8008d5c <vDHCPProcess+0x248>)
 8008b2e:	7f1b      	ldrb	r3, [r3, #28]
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	f200 80e6 	bhi.w	8008d02 <vDHCPProcess+0x1ee>
 8008b36:	a201      	add	r2, pc, #4	; (adr r2, 8008b3c <vDHCPProcess+0x28>)
 8008b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3c:	08008b51 	.word	0x08008b51
 8008b40:	08008b89 	.word	0x08008b89
 8008b44:	08008c17 	.word	0x08008c17
 8008b48:	08008ccb 	.word	0x08008ccb
 8008b4c:	08008cfb 	.word	0x08008cfb
			if( eAnswer == eDHCPContinue )
		#endif	/* ipconfigUSE_DHCP_HOOK */
			{
				/* Initial state.  Create the DHCP socket, timer, etc. if they
				have not already been created. */
				prvInitialiseDHCP();
 8008b50:	f000 f956 	bl	8008e00 <prvInitialiseDHCP>

				/* See if prvInitialiseDHCP() has creates a socket. */
				if( xDHCPData.xDHCPSocket == NULL )
 8008b54:	4b81      	ldr	r3, [pc, #516]	; (8008d5c <vDHCPProcess+0x248>)
 8008b56:	6a1b      	ldr	r3, [r3, #32]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d102      	bne.n	8008b62 <vDHCPProcess+0x4e>
				{
					xGivingUp = pdTRUE;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	60fb      	str	r3, [r7, #12]
					break;
 8008b60:	e0d8      	b.n	8008d14 <vDHCPProcess+0x200>
				}

				*ipLOCAL_IP_ADDRESS_POINTER = 0UL;
 8008b62:	4b7f      	ldr	r3, [pc, #508]	; (8008d60 <vDHCPProcess+0x24c>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	615a      	str	r2, [r3, #20]

				/* Send the first discover request. */
				if( xDHCPData.xDHCPSocket != NULL )
 8008b68:	4b7c      	ldr	r3, [pc, #496]	; (8008d5c <vDHCPProcess+0x248>)
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 80ca 	beq.w	8008d06 <vDHCPProcess+0x1f2>
				{
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008b72:	f7fe fdbb 	bl	80076ec <xTaskGetTickCount>
 8008b76:	4602      	mov	r2, r0
 8008b78:	4b78      	ldr	r3, [pc, #480]	; (8008d5c <vDHCPProcess+0x248>)
 8008b7a:	611a      	str	r2, [r3, #16]
					prvSendDHCPDiscover( );
 8008b7c:	f000 fbd6 	bl	800932c <prvSendDHCPDiscover>
					xDHCPData.eDHCPState = eWaitingOffer;
 8008b80:	4b76      	ldr	r3, [pc, #472]	; (8008d5c <vDHCPProcess+0x248>)
 8008b82:	2201      	movs	r2, #1
 8008b84:	771a      	strb	r2, [r3, #28]

				/* The user indicates that the DHCP process does not continue. */
				xGivingUp = pdTRUE;
			}
		#endif	/* ipconfigUSE_DHCP_HOOK */
			break;
 8008b86:	e0be      	b.n	8008d06 <vDHCPProcess+0x1f2>

		case eWaitingOffer :

			xGivingUp = pdFALSE;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	60fb      	str	r3, [r7, #12]

			/* Look for offers coming in. */
			if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_OFFER ) == pdPASS )
 8008b8c:	2002      	movs	r0, #2
 8008b8e:	f000 f95f 	bl	8008e50 <prvProcessDHCPReplies>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d10e      	bne.n	8008bb6 <vDHCPProcess+0xa2>
				if( eAnswer == eDHCPContinue )
			#endif	/* ipconfigUSE_DHCP_HOOK */
				{
					/* An offer has been made, the user wants to continue,
					generate the request. */
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008b98:	f7fe fda8 	bl	80076ec <xTaskGetTickCount>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	4b6f      	ldr	r3, [pc, #444]	; (8008d5c <vDHCPProcess+0x248>)
 8008ba0:	611a      	str	r2, [r3, #16]
					xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 8008ba2:	4b6e      	ldr	r3, [pc, #440]	; (8008d5c <vDHCPProcess+0x248>)
 8008ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba8:	615a      	str	r2, [r3, #20]
					prvSendDHCPRequest( );
 8008baa:	f000 fb8d 	bl	80092c8 <prvSendDHCPRequest>
					xDHCPData.eDHCPState = eWaitingAcknowledge;
 8008bae:	4b6b      	ldr	r3, [pc, #428]	; (8008d5c <vDHCPProcess+0x248>)
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	771a      	strb	r2, [r3, #28]
					break;
 8008bb4:	e0ae      	b.n	8008d14 <vDHCPProcess+0x200>

				/* The user indicates that the DHCP process does not continue. */
				xGivingUp = pdTRUE;
			#endif	/* ipconfigUSE_DHCP_HOOK */
			}
			else if( ( xTaskGetTickCount() - xDHCPData.xDHCPTxTime ) > xDHCPData.xDHCPTxPeriod )
 8008bb6:	f7fe fd99 	bl	80076ec <xTaskGetTickCount>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	4b67      	ldr	r3, [pc, #412]	; (8008d5c <vDHCPProcess+0x248>)
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	1ad2      	subs	r2, r2, r3
 8008bc2:	4b66      	ldr	r3, [pc, #408]	; (8008d5c <vDHCPProcess+0x248>)
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	f240 809f 	bls.w	8008d0a <vDHCPProcess+0x1f6>
			{
				/* It is time to send another Discover.  Increase the time
				period, and if it has not got to the point of giving up - send
				another discovery. */
				xDHCPData.xDHCPTxPeriod <<= 1;
 8008bcc:	4b63      	ldr	r3, [pc, #396]	; (8008d5c <vDHCPProcess+0x248>)
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	005b      	lsls	r3, r3, #1
 8008bd2:	4a62      	ldr	r2, [pc, #392]	; (8008d5c <vDHCPProcess+0x248>)
 8008bd4:	6153      	str	r3, [r2, #20]

				if( xDHCPData.xDHCPTxPeriod <= ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 8008bd6:	4b61      	ldr	r3, [pc, #388]	; (8008d5c <vDHCPProcess+0x248>)
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	f247 5230 	movw	r2, #30000	; 0x7530
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d816      	bhi.n	8008c10 <vDHCPProcess+0xfc>
				{
					xDHCPData.ulTransactionId++;
 8008be2:	4b5e      	ldr	r3, [pc, #376]	; (8008d5c <vDHCPProcess+0x248>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3301      	adds	r3, #1
 8008be8:	4a5c      	ldr	r2, [pc, #368]	; (8008d5c <vDHCPProcess+0x248>)
 8008bea:	6013      	str	r3, [r2, #0]
					xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008bec:	f7fe fd7e 	bl	80076ec <xTaskGetTickCount>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	4b5a      	ldr	r3, [pc, #360]	; (8008d5c <vDHCPProcess+0x248>)
 8008bf4:	611a      	str	r2, [r3, #16]
					xDHCPData.xUseBroadcast = !xDHCPData.xUseBroadcast;
 8008bf6:	4b59      	ldr	r3, [pc, #356]	; (8008d5c <vDHCPProcess+0x248>)
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	bf0c      	ite	eq
 8008bfe:	2301      	moveq	r3, #1
 8008c00:	2300      	movne	r3, #0
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	461a      	mov	r2, r3
 8008c06:	4b55      	ldr	r3, [pc, #340]	; (8008d5c <vDHCPProcess+0x248>)
 8008c08:	619a      	str	r2, [r3, #24]
					prvSendDHCPDiscover( );
 8008c0a:	f000 fb8f 	bl	800932c <prvSendDHCPDiscover>
						xGivingUp = pdTRUE;
					}
					#endif /* ipconfigDHCP_FALL_BACK_AUTO_IP */
				}
			}
			break;
 8008c0e:	e07c      	b.n	8008d0a <vDHCPProcess+0x1f6>
						xGivingUp = pdTRUE;
 8008c10:	2301      	movs	r3, #1
 8008c12:	60fb      	str	r3, [r7, #12]
			break;
 8008c14:	e079      	b.n	8008d0a <vDHCPProcess+0x1f6>

		case eWaitingAcknowledge :

			/* Look for acks coming in. */
			if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_ACK ) == pdPASS )
 8008c16:	2005      	movs	r0, #5
 8008c18:	f000 f91a 	bl	8008e50 <prvProcessDHCPReplies>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d132      	bne.n	8008c88 <vDHCPProcess+0x174>
			{
				FreeRTOS_debug_printf( ( "vDHCPProcess: acked %lxip\n", FreeRTOS_ntohl( xDHCPData.ulOfferedIPAddress ) ) );

				/* DHCP completed.  The IP address can now be used, and the
				timer set to the lease timeout time. */
				*ipLOCAL_IP_ADDRESS_POINTER = xDHCPData.ulOfferedIPAddress;
 8008c22:	4b4e      	ldr	r3, [pc, #312]	; (8008d5c <vDHCPProcess+0x248>)
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	4a4e      	ldr	r2, [pc, #312]	; (8008d60 <vDHCPProcess+0x24c>)
 8008c28:	6153      	str	r3, [r2, #20]

				/* Setting the 'local' broadcast address, something like
				'192.168.1.255'. */
				xNetworkAddressing.ulBroadcastAddress = ( xDHCPData.ulOfferedIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
 8008c2a:	4b4c      	ldr	r3, [pc, #304]	; (8008d5c <vDHCPProcess+0x248>)
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	4b4d      	ldr	r3, [pc, #308]	; (8008d64 <vDHCPProcess+0x250>)
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	43db      	mvns	r3, r3
 8008c34:	4313      	orrs	r3, r2
 8008c36:	4a4b      	ldr	r2, [pc, #300]	; (8008d64 <vDHCPProcess+0x250>)
 8008c38:	6113      	str	r3, [r2, #16]
				xDHCPData.eDHCPState = eLeasedAddress;
 8008c3a:	4b48      	ldr	r3, [pc, #288]	; (8008d5c <vDHCPProcess+0x248>)
 8008c3c:	2203      	movs	r2, #3
 8008c3e:	771a      	strb	r2, [r3, #28]
				iptraceDHCP_SUCCEDEED( xDHCPData.ulOfferedIPAddress );

				/* DHCP failed, the default configured IP-address will be used
				Now call vIPNetworkUpCalls() to send the network-up event and
				start the ARP timer. */
				vIPNetworkUpCalls( );
 8008c40:	f001 fc60 	bl	800a504 <vIPNetworkUpCalls>

				/* Close socket to ensure packets don't queue on it. */
				vSocketClose( xDHCPData.xDHCPSocket );
 8008c44:	4b45      	ldr	r3, [pc, #276]	; (8008d5c <vDHCPProcess+0x248>)
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f002 fb61 	bl	800b310 <vSocketClose>
				xDHCPData.xDHCPSocket = NULL;
 8008c4e:	4b43      	ldr	r3, [pc, #268]	; (8008d5c <vDHCPProcess+0x248>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	621a      	str	r2, [r3, #32]

				if( xDHCPData.ulLeaseTime == 0UL )
 8008c54:	4b41      	ldr	r3, [pc, #260]	; (8008d5c <vDHCPProcess+0x248>)
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d103      	bne.n	8008c64 <vDHCPProcess+0x150>
				{
					xDHCPData.ulLeaseTime = dhcpDEFAULT_LEASE_TIME;
 8008c5c:	4b3f      	ldr	r3, [pc, #252]	; (8008d5c <vDHCPProcess+0x248>)
 8008c5e:	4a42      	ldr	r2, [pc, #264]	; (8008d68 <vDHCPProcess+0x254>)
 8008c60:	60da      	str	r2, [r3, #12]
 8008c62:	e009      	b.n	8008c78 <vDHCPProcess+0x164>
				}
				else if( xDHCPData.ulLeaseTime < dhcpMINIMUM_LEASE_TIME )
 8008c64:	4b3d      	ldr	r3, [pc, #244]	; (8008d5c <vDHCPProcess+0x248>)
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d803      	bhi.n	8008c78 <vDHCPProcess+0x164>
				{
					xDHCPData.ulLeaseTime = dhcpMINIMUM_LEASE_TIME;
 8008c70:	4b3a      	ldr	r3, [pc, #232]	; (8008d5c <vDHCPProcess+0x248>)
 8008c72:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008c76:	60da      	str	r2, [r3, #12]
				{
					/* The lease time is already valid. */
				}

				/* Check for clashes. */
				vARPSendGratuitous();
 8008c78:	f7ff fecc 	bl	8008a14 <vARPSendGratuitous>
				vIPReloadDHCPTimer( xDHCPData.ulLeaseTime );
 8008c7c:	4b37      	ldr	r3, [pc, #220]	; (8008d5c <vDHCPProcess+0x248>)
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f001 fe89 	bl	800a998 <vIPReloadDHCPTimer>
						/* Give up, start again. */
						xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
					}
				}
			}
			break;
 8008c86:	e042      	b.n	8008d0e <vDHCPProcess+0x1fa>
				if( ( xTaskGetTickCount() - xDHCPData.xDHCPTxTime ) > xDHCPData.xDHCPTxPeriod )
 8008c88:	f7fe fd30 	bl	80076ec <xTaskGetTickCount>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	4b33      	ldr	r3, [pc, #204]	; (8008d5c <vDHCPProcess+0x248>)
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	1ad2      	subs	r2, r2, r3
 8008c94:	4b31      	ldr	r3, [pc, #196]	; (8008d5c <vDHCPProcess+0x248>)
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d938      	bls.n	8008d0e <vDHCPProcess+0x1fa>
					xDHCPData.xDHCPTxPeriod <<= 1;
 8008c9c:	4b2f      	ldr	r3, [pc, #188]	; (8008d5c <vDHCPProcess+0x248>)
 8008c9e:	695b      	ldr	r3, [r3, #20]
 8008ca0:	005b      	lsls	r3, r3, #1
 8008ca2:	4a2e      	ldr	r2, [pc, #184]	; (8008d5c <vDHCPProcess+0x248>)
 8008ca4:	6153      	str	r3, [r2, #20]
					if( xDHCPData.xDHCPTxPeriod <= ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 8008ca6:	4b2d      	ldr	r3, [pc, #180]	; (8008d5c <vDHCPProcess+0x248>)
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	f247 5230 	movw	r2, #30000	; 0x7530
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d807      	bhi.n	8008cc2 <vDHCPProcess+0x1ae>
						xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008cb2:	f7fe fd1b 	bl	80076ec <xTaskGetTickCount>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	4b28      	ldr	r3, [pc, #160]	; (8008d5c <vDHCPProcess+0x248>)
 8008cba:	611a      	str	r2, [r3, #16]
						prvSendDHCPRequest( );
 8008cbc:	f000 fb04 	bl	80092c8 <prvSendDHCPRequest>
			break;
 8008cc0:	e025      	b.n	8008d0e <vDHCPProcess+0x1fa>
						xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 8008cc2:	4b26      	ldr	r3, [pc, #152]	; (8008d5c <vDHCPProcess+0x248>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	771a      	strb	r2, [r3, #28]
			break;
 8008cc8:	e021      	b.n	8008d0e <vDHCPProcess+0x1fa>
	#endif	/* ipconfigDHCP_FALL_BACK_AUTO_IP */

		case eLeasedAddress :

			/* Resend the request at the appropriate time to renew the lease. */
			prvCreateDHCPSocket();
 8008cca:	f000 f84f 	bl	8008d6c <prvCreateDHCPSocket>

			if( xDHCPData.xDHCPSocket != NULL )
 8008cce:	4b23      	ldr	r3, [pc, #140]	; (8008d5c <vDHCPProcess+0x248>)
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d01d      	beq.n	8008d12 <vDHCPProcess+0x1fe>
			{
				xDHCPData.xDHCPTxTime = xTaskGetTickCount();
 8008cd6:	f7fe fd09 	bl	80076ec <xTaskGetTickCount>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	4b1f      	ldr	r3, [pc, #124]	; (8008d5c <vDHCPProcess+0x248>)
 8008cde:	611a      	str	r2, [r3, #16]
				xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 8008ce0:	4b1e      	ldr	r3, [pc, #120]	; (8008d5c <vDHCPProcess+0x248>)
 8008ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ce6:	615a      	str	r2, [r3, #20]
				prvSendDHCPRequest( );
 8008ce8:	f000 faee 	bl	80092c8 <prvSendDHCPRequest>
				xDHCPData.eDHCPState = eWaitingAcknowledge;
 8008cec:	4b1b      	ldr	r3, [pc, #108]	; (8008d5c <vDHCPProcess+0x248>)
 8008cee:	2202      	movs	r2, #2
 8008cf0:	771a      	strb	r2, [r3, #28]

				/* From now on, we should be called more often */
				vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 8008cf2:	20fa      	movs	r0, #250	; 0xfa
 8008cf4:	f001 fe50 	bl	800a998 <vIPReloadDHCPTimer>
			}
			break;
 8008cf8:	e00b      	b.n	8008d12 <vDHCPProcess+0x1fe>

		case eNotUsingLeasedAddress:

			vIPSetDHCPTimerEnableState( pdFALSE );
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	f001 fe32 	bl	800a964 <vIPSetDHCPTimerEnableState>
			break;
 8008d00:	e008      	b.n	8008d14 <vDHCPProcess+0x200>

		default:
			break;
 8008d02:	bf00      	nop
 8008d04:	e006      	b.n	8008d14 <vDHCPProcess+0x200>
			break;
 8008d06:	bf00      	nop
 8008d08:	e004      	b.n	8008d14 <vDHCPProcess+0x200>
			break;
 8008d0a:	bf00      	nop
 8008d0c:	e002      	b.n	8008d14 <vDHCPProcess+0x200>
			break;
 8008d0e:	bf00      	nop
 8008d10:	e000      	b.n	8008d14 <vDHCPProcess+0x200>
			break;
 8008d12:	bf00      	nop
	}

	if( xGivingUp != pdFALSE )
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d01b      	beq.n	8008d52 <vDHCPProcess+0x23e>
		/* xGivingUp became true either because of a time-out, or because
		xApplicationDHCPHook() returned another value than 'eDHCPContinue',
		meaning that the conversion is canceled from here. */

		/* Revert to static IP address. */
		taskENTER_CRITICAL();
 8008d1a:	f7fd f997 	bl	800604c <vPortEnterCritical>
		{
			*ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 8008d1e:	4b11      	ldr	r3, [pc, #68]	; (8008d64 <vDHCPProcess+0x250>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a0f      	ldr	r2, [pc, #60]	; (8008d60 <vDHCPProcess+0x24c>)
 8008d24:	6153      	str	r3, [r2, #20]
			iptraceDHCP_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( xNetworkAddressing.ulDefaultIPAddress );
		}
		taskEXIT_CRITICAL();
 8008d26:	f7fd f9bf 	bl	80060a8 <vPortExitCritical>

		xDHCPData.eDHCPState = eNotUsingLeasedAddress;
 8008d2a:	4b0c      	ldr	r3, [pc, #48]	; (8008d5c <vDHCPProcess+0x248>)
 8008d2c:	2204      	movs	r2, #4
 8008d2e:	771a      	strb	r2, [r3, #28]
		vIPSetDHCPTimerEnableState( pdFALSE );
 8008d30:	2000      	movs	r0, #0
 8008d32:	f001 fe17 	bl	800a964 <vIPSetDHCPTimerEnableState>

		/* DHCP failed, the default configured IP-address will be used.  Now
		call vIPNetworkUpCalls() to send the network-up event and start the ARP
		timer. */
		vIPNetworkUpCalls( );
 8008d36:	f001 fbe5 	bl	800a504 <vIPNetworkUpCalls>

		/* Test if socket was indeed created. */
		if( xDHCPData.xDHCPSocket != NULL )
 8008d3a:	4b08      	ldr	r3, [pc, #32]	; (8008d5c <vDHCPProcess+0x248>)
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d007      	beq.n	8008d52 <vDHCPProcess+0x23e>
		{
			/* Close socket to ensure packets don't queue on it. */
			vSocketClose( xDHCPData.xDHCPSocket );
 8008d42:	4b06      	ldr	r3, [pc, #24]	; (8008d5c <vDHCPProcess+0x248>)
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f002 fae2 	bl	800b310 <vSocketClose>
			xDHCPData.xDHCPSocket = NULL;
 8008d4c:	4b03      	ldr	r3, [pc, #12]	; (8008d5c <vDHCPProcess+0x248>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	621a      	str	r2, [r3, #32]
		}
	}
}
 8008d52:	bf00      	nop
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	20004684 	.word	0x20004684
 8008d60:	2000009c 	.word	0x2000009c
 8008d64:	20004728 	.word	0x20004728
 8008d68:	0a4cb800 	.word	0x0a4cb800

08008d6c <prvCreateDHCPSocket>:
/*-----------------------------------------------------------*/

static void prvCreateDHCPSocket( void )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af02      	add	r7, sp, #8
struct freertos_sockaddr xAddress;
BaseType_t xReturn;
TickType_t xTimeoutTime = ( TickType_t ) 0;
 8008d72:	2300      	movs	r3, #0
 8008d74:	603b      	str	r3, [r7, #0]

	/* Create the socket, if it has not already been created. */
	if( xDHCPData.xDHCPSocket == NULL )
 8008d76:	4b21      	ldr	r3, [pc, #132]	; (8008dfc <prvCreateDHCPSocket+0x90>)
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d13a      	bne.n	8008df4 <prvCreateDHCPSocket+0x88>
	{
		xDHCPData.xDHCPSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8008d7e:	2211      	movs	r2, #17
 8008d80:	2102      	movs	r1, #2
 8008d82:	2002      	movs	r0, #2
 8008d84:	f001 ffac 	bl	800ace0 <FreeRTOS_socket>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	4b1c      	ldr	r3, [pc, #112]	; (8008dfc <prvCreateDHCPSocket+0x90>)
 8008d8c:	621a      	str	r2, [r3, #32]
		if( xDHCPData.xDHCPSocket != FREERTOS_INVALID_SOCKET )
 8008d8e:	4b1b      	ldr	r3, [pc, #108]	; (8008dfc <prvCreateDHCPSocket+0x90>)
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d96:	d02a      	beq.n	8008dee <prvCreateDHCPSocket+0x82>
		{

			/* Ensure the Rx and Tx timeouts are zero as the DHCP executes in the
			context of the IP task. */
			FreeRTOS_setsockopt( xDHCPData.xDHCPSocket, 0, FREERTOS_SO_RCVTIMEO, ( void * ) &xTimeoutTime, sizeof( TickType_t ) );
 8008d98:	4b18      	ldr	r3, [pc, #96]	; (8008dfc <prvCreateDHCPSocket+0x90>)
 8008d9a:	6a18      	ldr	r0, [r3, #32]
 8008d9c:	463a      	mov	r2, r7
 8008d9e:	2304      	movs	r3, #4
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	4613      	mov	r3, r2
 8008da4:	2200      	movs	r2, #0
 8008da6:	2100      	movs	r1, #0
 8008da8:	f002 fb4a 	bl	800b440 <FreeRTOS_setsockopt>
			FreeRTOS_setsockopt( xDHCPData.xDHCPSocket, 0, FREERTOS_SO_SNDTIMEO, ( void * ) &xTimeoutTime, sizeof( TickType_t ) );
 8008dac:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <prvCreateDHCPSocket+0x90>)
 8008dae:	6a18      	ldr	r0, [r3, #32]
 8008db0:	463a      	mov	r2, r7
 8008db2:	2304      	movs	r3, #4
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	4613      	mov	r3, r2
 8008db8:	2201      	movs	r2, #1
 8008dba:	2100      	movs	r1, #0
 8008dbc:	f002 fb40 	bl	800b440 <FreeRTOS_setsockopt>

			/* Bind to the standard DHCP client port. */
			xAddress.sin_port = ( uint16_t ) dhcpCLIENT_PORT;
 8008dc0:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8008dc4:	80fb      	strh	r3, [r7, #6]
			xReturn = vSocketBind( xDHCPData.xDHCPSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8008dc6:	4b0d      	ldr	r3, [pc, #52]	; (8008dfc <prvCreateDHCPSocket+0x90>)
 8008dc8:	6a18      	ldr	r0, [r3, #32]
 8008dca:	1d39      	adds	r1, r7, #4
 8008dcc:	2300      	movs	r3, #0
 8008dce:	2208      	movs	r2, #8
 8008dd0:	f002 f9e8 	bl	800b1a4 <vSocketBind>
 8008dd4:	60f8      	str	r0, [r7, #12]
			if( xReturn != 0 )
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00b      	beq.n	8008df4 <prvCreateDHCPSocket+0x88>
			{
				/* Binding failed, close the socket again. */
				vSocketClose( xDHCPData.xDHCPSocket );
 8008ddc:	4b07      	ldr	r3, [pc, #28]	; (8008dfc <prvCreateDHCPSocket+0x90>)
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f002 fa95 	bl	800b310 <vSocketClose>
				xDHCPData.xDHCPSocket = NULL;
 8008de6:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <prvCreateDHCPSocket+0x90>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	621a      	str	r2, [r3, #32]
		{
			/* Change to NULL for easier testing. */
			xDHCPData.xDHCPSocket = NULL;
		}
	}
}
 8008dec:	e002      	b.n	8008df4 <prvCreateDHCPSocket+0x88>
			xDHCPData.xDHCPSocket = NULL;
 8008dee:	4b03      	ldr	r3, [pc, #12]	; (8008dfc <prvCreateDHCPSocket+0x90>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	621a      	str	r2, [r3, #32]
}
 8008df4:	bf00      	nop
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	20004684 	.word	0x20004684

08008e00 <prvInitialiseDHCP>:
/*-----------------------------------------------------------*/

static void prvInitialiseDHCP( void )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
	/* Initialise the parameters that will be set by the DHCP process. */
	if( xDHCPData.ulTransactionId == 0ul )
 8008e04:	4b11      	ldr	r3, [pc, #68]	; (8008e4c <prvInitialiseDHCP+0x4c>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d105      	bne.n	8008e18 <prvInitialiseDHCP+0x18>
	{
		xDHCPData.ulTransactionId = ipconfigRAND32();
 8008e0c:	f006 ff58 	bl	800fcc0 <uxRand>
 8008e10:	4602      	mov	r2, r0
 8008e12:	4b0e      	ldr	r3, [pc, #56]	; (8008e4c <prvInitialiseDHCP+0x4c>)
 8008e14:	601a      	str	r2, [r3, #0]
 8008e16:	e004      	b.n	8008e22 <prvInitialiseDHCP+0x22>
	}
	else
	{
		xDHCPData.ulTransactionId++;
 8008e18:	4b0c      	ldr	r3, [pc, #48]	; (8008e4c <prvInitialiseDHCP+0x4c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	4a0b      	ldr	r2, [pc, #44]	; (8008e4c <prvInitialiseDHCP+0x4c>)
 8008e20:	6013      	str	r3, [r2, #0]
	}

	xDHCPData.xUseBroadcast = 0;
 8008e22:	4b0a      	ldr	r3, [pc, #40]	; (8008e4c <prvInitialiseDHCP+0x4c>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	619a      	str	r2, [r3, #24]
	xDHCPData.ulOfferedIPAddress = 0UL;
 8008e28:	4b08      	ldr	r3, [pc, #32]	; (8008e4c <prvInitialiseDHCP+0x4c>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	605a      	str	r2, [r3, #4]
	xDHCPData.ulDHCPServerAddress = 0UL;
 8008e2e:	4b07      	ldr	r3, [pc, #28]	; (8008e4c <prvInitialiseDHCP+0x4c>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	609a      	str	r2, [r3, #8]
	xDHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 8008e34:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <prvInitialiseDHCP+0x4c>)
 8008e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e3a:	615a      	str	r2, [r3, #20]

	/* Create the DHCP socket if it has not already been created. */
	prvCreateDHCPSocket();
 8008e3c:	f7ff ff96 	bl	8008d6c <prvCreateDHCPSocket>
	FreeRTOS_debug_printf( ( "prvInitialiseDHCP: start after %lu ticks\n", dhcpINITIAL_TIMER_PERIOD ) );
	vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 8008e40:	20fa      	movs	r0, #250	; 0xfa
 8008e42:	f001 fda9 	bl	800a998 <vIPReloadDHCPTimer>
}
 8008e46:	bf00      	nop
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20004684 	.word	0x20004684

08008e50 <prvProcessDHCPReplies>:
/*-----------------------------------------------------------*/

static BaseType_t prvProcessDHCPReplies( BaseType_t xExpectedMessageType )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b092      	sub	sp, #72	; 0x48
 8008e54:	af02      	add	r7, sp, #8
 8008e56:	6078      	str	r0, [r7, #4]
uint8_t *pucUDPPayload, *pucLastByte;
struct freertos_sockaddr xClient;
uint32_t xClientLength = sizeof( xClient );
 8008e58:	2308      	movs	r3, #8
 8008e5a:	613b      	str	r3, [r7, #16]
int32_t lBytes;
DHCPMessage_t *pxDHCPMessage;
uint8_t *pucByte, ucOptionCode, ucLength;
uint32_t ulProcessed, ulParameter;
BaseType_t xReturn = pdFALSE;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	637b      	str	r3, [r7, #52]	; 0x34
const uint32_t ulMandatoryOptions = 2ul; /* DHCP server address, and the correct DHCP message type must be present in the options. */
 8008e60:	2302      	movs	r3, #2
 8008e62:	633b      	str	r3, [r7, #48]	; 0x30

	lBytes = FreeRTOS_recvfrom( xDHCPData.xDHCPSocket, ( void * ) &pucUDPPayload, 0ul, FREERTOS_ZERO_COPY, &xClient, &xClientLength );
 8008e64:	4bb9      	ldr	r3, [pc, #740]	; (800914c <prvProcessDHCPReplies+0x2fc>)
 8008e66:	6a18      	ldr	r0, [r3, #32]
 8008e68:	f107 011c 	add.w	r1, r7, #28
 8008e6c:	f107 0310 	add.w	r3, r7, #16
 8008e70:	9301      	str	r3, [sp, #4]
 8008e72:	f107 0314 	add.w	r3, r7, #20
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	2301      	movs	r3, #1
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f001 ffca 	bl	800ae14 <FreeRTOS_recvfrom>
 8008e80:	62f8      	str	r0, [r7, #44]	; 0x2c

	if( lBytes > 0 )
 8008e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f340 815b 	ble.w	8009140 <prvProcessDHCPReplies+0x2f0>
	{
		/* Map a DHCP structure onto the received data. */
		pxDHCPMessage = ( DHCPMessage_t * ) ( pucUDPPayload );
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Sanity check. */
		if( ( pxDHCPMessage->ulDHCPCookie == ( uint32_t ) dhcpCOOKIE ) &&
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008e94:	4aae      	ldr	r2, [pc, #696]	; (8009150 <prvProcessDHCPReplies+0x300>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	f040 814e 	bne.w	8009138 <prvProcessDHCPReplies+0x2e8>
			( pxDHCPMessage->ucOpcode == ( uint8_t ) dhcpREPLY_OPCODE ) &&
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	781b      	ldrb	r3, [r3, #0]
		if( ( pxDHCPMessage->ulDHCPCookie == ( uint32_t ) dhcpCOOKIE ) &&
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	f040 8149 	bne.w	8009138 <prvProcessDHCPReplies+0x2e8>
			( pxDHCPMessage->ulTransactionID == FreeRTOS_htonl( xDHCPData.ulTransactionId ) ) )
 8008ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea8:	685a      	ldr	r2, [r3, #4]
 8008eaa:	4ba8      	ldr	r3, [pc, #672]	; (800914c <prvProcessDHCPReplies+0x2fc>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	0619      	lsls	r1, r3, #24
 8008eb0:	4ba6      	ldr	r3, [pc, #664]	; (800914c <prvProcessDHCPReplies+0x2fc>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	021b      	lsls	r3, r3, #8
 8008eb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008eba:	4319      	orrs	r1, r3
 8008ebc:	4ba3      	ldr	r3, [pc, #652]	; (800914c <prvProcessDHCPReplies+0x2fc>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	0a1b      	lsrs	r3, r3, #8
 8008ec2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008ec6:	4319      	orrs	r1, r3
 8008ec8:	4ba0      	ldr	r3, [pc, #640]	; (800914c <prvProcessDHCPReplies+0x2fc>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	0e1b      	lsrs	r3, r3, #24
 8008ece:	430b      	orrs	r3, r1
			( pxDHCPMessage->ucOpcode == ( uint8_t ) dhcpREPLY_OPCODE ) &&
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	f040 8131 	bne.w	8009138 <prvProcessDHCPReplies+0x2e8>
		{
			if( memcmp( ( void * ) &( pxDHCPMessage->ucClientHardwareAddress ), ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) ) == 0 )
 8008ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed8:	331c      	adds	r3, #28
 8008eda:	2206      	movs	r2, #6
 8008edc:	499d      	ldr	r1, [pc, #628]	; (8009154 <prvProcessDHCPReplies+0x304>)
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f007 fddc 	bl	8010a9c <memcmp>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f040 8126 	bne.w	8009138 <prvProcessDHCPReplies+0x2e8>
			{
				/* None of the essential options have been processed yet. */
				ulProcessed = 0ul;
 8008eec:	2300      	movs	r3, #0
 8008eee:	63bb      	str	r3, [r7, #56]	; 0x38

				/* Walk through the options until the dhcpOPTION_END_BYTE byte
				is found, taking care not to walk off the end of the options. */
				pucByte = &( pxDHCPMessage->ucFirstOptionByte );
 8008ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef2:	33f0      	adds	r3, #240	; 0xf0
 8008ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
				pucLastByte = &( pucUDPPayload[ lBytes - dhcpMAX_OPTION_LENGTH_OF_INTEREST ] );
 8008ef6:	69fa      	ldr	r2, [r7, #28]
 8008ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efa:	3b02      	subs	r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	627b      	str	r3, [r7, #36]	; 0x24

				while( pucByte < pucLastByte )
 8008f00:	e107      	b.n	8009112 <prvProcessDHCPReplies+0x2c2>
				{
					ucOptionCode = pucByte[ 0 ];
 8008f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					if( ucOptionCode == dhcpOPTION_END_BYTE )
 8008f0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f0e:	2bff      	cmp	r3, #255	; 0xff
 8008f10:	f000 8105 	beq.w	800911e <prvProcessDHCPReplies+0x2ce>
					{
						/* Ready, the last byte has been seen. */
						break;
					}
					if( ucOptionCode == dhcpZERO_PAD_OPTION_CODE )
 8008f14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d103      	bne.n	8008f24 <prvProcessDHCPReplies+0xd4>
					{
						/* The value zero is used as a pad byte,
						it is not followed by a length byte. */
						pucByte += 1;
 8008f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f1e:	3301      	adds	r3, #1
 8008f20:	63fb      	str	r3, [r7, #60]	; 0x3c
						continue;
 8008f22:	e0f6      	b.n	8009112 <prvProcessDHCPReplies+0x2c2>
					}
					ucLength = pucByte[ 1 ];
 8008f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f26:	785b      	ldrb	r3, [r3, #1]
 8008f28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					pucByte += 2;
 8008f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2e:	3302      	adds	r3, #2
 8008f30:	63fb      	str	r3, [r7, #60]	; 0x3c

					/* In most cases, a 4-byte network-endian parameter follows,
					just get it once here and use later */
					memcpy( ( void * ) &( ulParameter ), ( void * ) pucByte, ( size_t ) sizeof( ulParameter ) );
 8008f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	60fb      	str	r3, [r7, #12]

					switch( ucOptionCode )
 8008f38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	2b35      	cmp	r3, #53	; 0x35
 8008f40:	f200 80d3 	bhi.w	80090ea <prvProcessDHCPReplies+0x29a>
 8008f44:	a201      	add	r2, pc, #4	; (adr r2, 8008f4c <prvProcessDHCPReplies+0xfc>)
 8008f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4a:	bf00      	nop
 8008f4c:	0800904f 	.word	0x0800904f
 8008f50:	080090eb 	.word	0x080090eb
 8008f54:	0800905f 	.word	0x0800905f
 8008f58:	080090eb 	.word	0x080090eb
 8008f5c:	080090eb 	.word	0x080090eb
 8008f60:	0800906f 	.word	0x0800906f
 8008f64:	080090eb 	.word	0x080090eb
 8008f68:	080090eb 	.word	0x080090eb
 8008f6c:	080090eb 	.word	0x080090eb
 8008f70:	080090eb 	.word	0x080090eb
 8008f74:	080090eb 	.word	0x080090eb
 8008f78:	080090eb 	.word	0x080090eb
 8008f7c:	080090eb 	.word	0x080090eb
 8008f80:	080090eb 	.word	0x080090eb
 8008f84:	080090eb 	.word	0x080090eb
 8008f88:	080090eb 	.word	0x080090eb
 8008f8c:	080090eb 	.word	0x080090eb
 8008f90:	080090eb 	.word	0x080090eb
 8008f94:	080090eb 	.word	0x080090eb
 8008f98:	080090eb 	.word	0x080090eb
 8008f9c:	080090eb 	.word	0x080090eb
 8008fa0:	080090eb 	.word	0x080090eb
 8008fa4:	080090eb 	.word	0x080090eb
 8008fa8:	080090eb 	.word	0x080090eb
 8008fac:	080090eb 	.word	0x080090eb
 8008fb0:	080090eb 	.word	0x080090eb
 8008fb4:	080090eb 	.word	0x080090eb
 8008fb8:	080090eb 	.word	0x080090eb
 8008fbc:	080090eb 	.word	0x080090eb
 8008fc0:	080090eb 	.word	0x080090eb
 8008fc4:	080090eb 	.word	0x080090eb
 8008fc8:	080090eb 	.word	0x080090eb
 8008fcc:	080090eb 	.word	0x080090eb
 8008fd0:	080090eb 	.word	0x080090eb
 8008fd4:	080090eb 	.word	0x080090eb
 8008fd8:	080090eb 	.word	0x080090eb
 8008fdc:	080090eb 	.word	0x080090eb
 8008fe0:	080090eb 	.word	0x080090eb
 8008fe4:	080090eb 	.word	0x080090eb
 8008fe8:	080090eb 	.word	0x080090eb
 8008fec:	080090eb 	.word	0x080090eb
 8008ff0:	080090eb 	.word	0x080090eb
 8008ff4:	080090eb 	.word	0x080090eb
 8008ff8:	080090eb 	.word	0x080090eb
 8008ffc:	080090eb 	.word	0x080090eb
 8009000:	080090eb 	.word	0x080090eb
 8009004:	080090eb 	.word	0x080090eb
 8009008:	080090eb 	.word	0x080090eb
 800900c:	080090eb 	.word	0x080090eb
 8009010:	080090eb 	.word	0x080090eb
 8009014:	080090a5 	.word	0x080090a5
 8009018:	080090eb 	.word	0x080090eb
 800901c:	08009025 	.word	0x08009025
 8009020:	08009077 	.word	0x08009077
					{
						case dhcpMESSAGE_TYPE_OPTION_CODE	:

							if( *pucByte == ( uint8_t ) xExpectedMessageType )
 8009024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009026:	781a      	ldrb	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	b2db      	uxtb	r3, r3
 800902c:	429a      	cmp	r2, r3
 800902e:	d103      	bne.n	8009038 <prvProcessDHCPReplies+0x1e8>
							{
								/* The message type is the message type the
								state machine is expecting. */
								ulProcessed++;
 8009030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009032:	3301      	adds	r3, #1
 8009034:	63bb      	str	r3, [r7, #56]	; 0x38
							}
							else
							{
								/* Don't process other message types. */
							}
							break;
 8009036:	e05a      	b.n	80090ee <prvProcessDHCPReplies+0x29e>
							else if( *pucByte == ( uint8_t ) dhcpMESSAGE_TYPE_NACK )
 8009038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	2b06      	cmp	r3, #6
 800903e:	d156      	bne.n	80090ee <prvProcessDHCPReplies+0x29e>
								if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_ACK )
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b05      	cmp	r3, #5
 8009044:	d153      	bne.n	80090ee <prvProcessDHCPReplies+0x29e>
									xDHCPData.eDHCPState = eWaitingSendFirstDiscover;
 8009046:	4b41      	ldr	r3, [pc, #260]	; (800914c <prvProcessDHCPReplies+0x2fc>)
 8009048:	2200      	movs	r2, #0
 800904a:	771a      	strb	r2, [r3, #28]
							break;
 800904c:	e04f      	b.n	80090ee <prvProcessDHCPReplies+0x29e>

						case dhcpSUBNET_MASK_OPTION_CODE :

							if( ucLength == sizeof( uint32_t ) )
 800904e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009052:	2b04      	cmp	r3, #4
 8009054:	d14d      	bne.n	80090f2 <prvProcessDHCPReplies+0x2a2>
							{
								xNetworkAddressing.ulNetMask = ulParameter;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	4a3f      	ldr	r2, [pc, #252]	; (8009158 <prvProcessDHCPReplies+0x308>)
 800905a:	6053      	str	r3, [r2, #4]
							}
							break;
 800905c:	e049      	b.n	80090f2 <prvProcessDHCPReplies+0x2a2>

						case dhcpGATEWAY_OPTION_CODE :

							if( ucLength == sizeof( uint32_t ) )
 800905e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009062:	2b04      	cmp	r3, #4
 8009064:	d147      	bne.n	80090f6 <prvProcessDHCPReplies+0x2a6>
							{
								/* ulProcessed is not incremented in this case
								because the gateway is not essential. */
								xNetworkAddressing.ulGatewayAddress = ulParameter;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4a3b      	ldr	r2, [pc, #236]	; (8009158 <prvProcessDHCPReplies+0x308>)
 800906a:	6093      	str	r3, [r2, #8]
							}
							break;
 800906c:	e043      	b.n	80090f6 <prvProcessDHCPReplies+0x2a6>
						case dhcpDNS_SERVER_OPTIONS_CODE :

							/* ulProcessed is not incremented in this case
							because the DNS server is not essential.  Only the
							first DNS server address is taken. */
							xNetworkAddressing.ulDNSServerAddress = ulParameter;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	4a39      	ldr	r2, [pc, #228]	; (8009158 <prvProcessDHCPReplies+0x308>)
 8009072:	60d3      	str	r3, [r2, #12]
							break;
 8009074:	e044      	b.n	8009100 <prvProcessDHCPReplies+0x2b0>

						case dhcpSERVER_IP_ADDRESS_OPTION_CODE :

							if( ucLength == sizeof( uint32_t ) )
 8009076:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800907a:	2b04      	cmp	r3, #4
 800907c:	d13d      	bne.n	80090fa <prvProcessDHCPReplies+0x2aa>
							{
								if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_OFFER )
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b02      	cmp	r3, #2
 8009082:	d106      	bne.n	8009092 <prvProcessDHCPReplies+0x242>
								{
									/* Offers state the replying server. */
									ulProcessed++;
 8009084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009086:	3301      	adds	r3, #1
 8009088:	63bb      	str	r3, [r7, #56]	; 0x38
									xDHCPData.ulDHCPServerAddress = ulParameter;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	4a2f      	ldr	r2, [pc, #188]	; (800914c <prvProcessDHCPReplies+0x2fc>)
 800908e:	6093      	str	r3, [r2, #8]
									{
										ulProcessed++;
									}
								}
							}
							break;
 8009090:	e033      	b.n	80090fa <prvProcessDHCPReplies+0x2aa>
									if( xDHCPData.ulDHCPServerAddress == ulParameter )
 8009092:	4b2e      	ldr	r3, [pc, #184]	; (800914c <prvProcessDHCPReplies+0x2fc>)
 8009094:	689a      	ldr	r2, [r3, #8]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	429a      	cmp	r2, r3
 800909a:	d12e      	bne.n	80090fa <prvProcessDHCPReplies+0x2aa>
										ulProcessed++;
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	3301      	adds	r3, #1
 80090a0:	63bb      	str	r3, [r7, #56]	; 0x38
							break;
 80090a2:	e02a      	b.n	80090fa <prvProcessDHCPReplies+0x2aa>

						case dhcpLEASE_TIME_OPTION_CODE :

							if( ucLength == sizeof( &( xDHCPData.ulLeaseTime ) ) )
 80090a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80090a8:	2b04      	cmp	r3, #4
 80090aa:	d128      	bne.n	80090fe <prvProcessDHCPReplies+0x2ae>
							{
								/* ulProcessed is not incremented in this case
								because the lease time is not essential. */
								/* The DHCP parameter is in seconds, convert
								to host-endian format. */
								xDHCPData.ulLeaseTime = FreeRTOS_ntohl( ulParameter );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	061a      	lsls	r2, r3, #24
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	021b      	lsls	r3, r3, #8
 80090b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80090b8:	431a      	orrs	r2, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	0a1b      	lsrs	r3, r3, #8
 80090be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80090c2:	431a      	orrs	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	0e1b      	lsrs	r3, r3, #24
 80090c8:	4313      	orrs	r3, r2
 80090ca:	4a20      	ldr	r2, [pc, #128]	; (800914c <prvProcessDHCPReplies+0x2fc>)
 80090cc:	60d3      	str	r3, [r2, #12]

								/* Divide the lease time by two to ensure a
								renew request is sent before the lease actually
								expires. */
								xDHCPData.ulLeaseTime >>= 1UL;
 80090ce:	4b1f      	ldr	r3, [pc, #124]	; (800914c <prvProcessDHCPReplies+0x2fc>)
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	085b      	lsrs	r3, r3, #1
 80090d4:	4a1d      	ldr	r2, [pc, #116]	; (800914c <prvProcessDHCPReplies+0x2fc>)
 80090d6:	60d3      	str	r3, [r2, #12]

								/* Multiply with configTICK_RATE_HZ to get clock
								ticks. */
								xDHCPData.ulLeaseTime = configTICK_RATE_HZ * xDHCPData.ulLeaseTime;
 80090d8:	4b1c      	ldr	r3, [pc, #112]	; (800914c <prvProcessDHCPReplies+0x2fc>)
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090e0:	fb02 f303 	mul.w	r3, r2, r3
 80090e4:	4a19      	ldr	r2, [pc, #100]	; (800914c <prvProcessDHCPReplies+0x2fc>)
 80090e6:	60d3      	str	r3, [r2, #12]
							}
							break;
 80090e8:	e009      	b.n	80090fe <prvProcessDHCPReplies+0x2ae>

						default :

							/* Not interested in this field. */

							break;
 80090ea:	bf00      	nop
 80090ec:	e008      	b.n	8009100 <prvProcessDHCPReplies+0x2b0>
							break;
 80090ee:	bf00      	nop
 80090f0:	e006      	b.n	8009100 <prvProcessDHCPReplies+0x2b0>
							break;
 80090f2:	bf00      	nop
 80090f4:	e004      	b.n	8009100 <prvProcessDHCPReplies+0x2b0>
							break;
 80090f6:	bf00      	nop
 80090f8:	e002      	b.n	8009100 <prvProcessDHCPReplies+0x2b0>
							break;
 80090fa:	bf00      	nop
 80090fc:	e000      	b.n	8009100 <prvProcessDHCPReplies+0x2b0>
							break;
 80090fe:	bf00      	nop
					}

					/* Jump over the data to find the next option code. */
					if( ucLength == 0u )
 8009100:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00c      	beq.n	8009122 <prvProcessDHCPReplies+0x2d2>
					{
						break;
					}
					else
					{
						pucByte += ucLength;
 8009108:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800910c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800910e:	4413      	add	r3, r2
 8009110:	63fb      	str	r3, [r7, #60]	; 0x3c
				while( pucByte < pucLastByte )
 8009112:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	429a      	cmp	r2, r3
 8009118:	f4ff aef3 	bcc.w	8008f02 <prvProcessDHCPReplies+0xb2>
 800911c:	e002      	b.n	8009124 <prvProcessDHCPReplies+0x2d4>
						break;
 800911e:	bf00      	nop
 8009120:	e000      	b.n	8009124 <prvProcessDHCPReplies+0x2d4>
						break;
 8009122:	bf00      	nop
					}
				}

				/* Were all the mandatory options received? */
				if( ulProcessed >= ulMandatoryOptions )
 8009124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	429a      	cmp	r2, r3
 800912a:	d305      	bcc.n	8009138 <prvProcessDHCPReplies+0x2e8>
				{
					/* HT:endian: used to be network order */
					xDHCPData.ulOfferedIPAddress = pxDHCPMessage->ulYourIPAddress_yiaddr;
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	4a06      	ldr	r2, [pc, #24]	; (800914c <prvProcessDHCPReplies+0x2fc>)
 8009132:	6053      	str	r3, [r2, #4]
					FreeRTOS_printf( ( "vDHCPProcess: offer %lxip\n", FreeRTOS_ntohl( xDHCPData.ulOfferedIPAddress ) ) );
					xReturn = pdPASS;
 8009134:	2301      	movs	r3, #1
 8009136:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}

		FreeRTOS_ReleaseUDPPayloadBuffer( ( void * ) pucUDPPayload );
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	4618      	mov	r0, r3
 800913c:	f001 f80e 	bl	800a15c <FreeRTOS_ReleaseUDPPayloadBuffer>
	}

	return xReturn;
 8009140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009142:	4618      	mov	r0, r3
 8009144:	3740      	adds	r7, #64	; 0x40
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20004684 	.word	0x20004684
 8009150:	63538263 	.word	0x63538263
 8009154:	2000009c 	.word	0x2000009c
 8009158:	20004728 	.word	0x20004728

0800915c <prvCreatePartDHCPMessage>:
/*-----------------------------------------------------------*/

static uint8_t *prvCreatePartDHCPMessage( struct freertos_sockaddr *pxAddress, BaseType_t xOpcode, const uint8_t * const pucOptionsArray, size_t *pxOptionsArraySize )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b08a      	sub	sp, #40	; 0x28
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
 8009168:	603b      	str	r3, [r7, #0]
DHCPMessage_t *pxDHCPMessage;
size_t xRequiredBufferSize = sizeof( DHCPMessage_t ) + *pxOptionsArraySize;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	33f1      	adds	r3, #241	; 0xf1
 8009170:	627b      	str	r3, [r7, #36]	; 0x24
uint8_t *pucUDPPayloadBuffer;

#if( ipconfigDHCP_REGISTER_HOSTNAME == 1 )
	const char *pucHostName = pcApplicationHostnameHook ();
 8009172:	f006 fd9b 	bl	800fcac <pcApplicationHostnameHook>
 8009176:	6238      	str	r0, [r7, #32]
	size_t xNameLength = strlen( pucHostName );
 8009178:	6a38      	ldr	r0, [r7, #32]
 800917a:	f7f7 f831 	bl	80001e0 <strlen>
 800917e:	61f8      	str	r0, [r7, #28]
	uint8_t *pucPtr;

	xRequiredBufferSize += ( 2 + xNameLength );
 8009180:	69fa      	ldr	r2, [r7, #28]
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	4413      	add	r3, r2
 8009186:	3302      	adds	r3, #2
 8009188:	627b      	str	r3, [r7, #36]	; 0x24
	/* Get a buffer.  This uses a maximum delay, but the delay will be capped
	to ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS so the return value still needs to
	be test. */
	do
	{
	} while( ( pucUDPPayloadBuffer = ( uint8_t * ) FreeRTOS_GetUDPPayloadBuffer( xRequiredBufferSize, portMAX_DELAY ) ) == NULL );
 800918a:	f04f 31ff 	mov.w	r1, #4294967295
 800918e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009190:	f000 ff78 	bl	800a084 <FreeRTOS_GetUDPPayloadBuffer>
 8009194:	61b8      	str	r0, [r7, #24]
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d0f6      	beq.n	800918a <prvCreatePartDHCPMessage+0x2e>

	pxDHCPMessage = ( DHCPMessage_t * ) pucUDPPayloadBuffer;
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	617b      	str	r3, [r7, #20]

	/* Most fields need to be zero. */
	memset( ( void * ) pxDHCPMessage, 0x00, sizeof( DHCPMessage_t ) );
 80091a0:	22f1      	movs	r2, #241	; 0xf1
 80091a2:	2100      	movs	r1, #0
 80091a4:	6978      	ldr	r0, [r7, #20]
 80091a6:	f007 fcad 	bl	8010b04 <memset>

	/* Create the message. */
	pxDHCPMessage->ucOpcode = ( uint8_t ) xOpcode;
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	701a      	strb	r2, [r3, #0]
	pxDHCPMessage->ucAddressType = ( uint8_t ) dhcpADDRESS_TYPE_ETHERNET;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2201      	movs	r2, #1
 80091b6:	705a      	strb	r2, [r3, #1]
	pxDHCPMessage->ucAddressLength = ( uint8_t ) dhcpETHERNET_ADDRESS_LENGTH;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	2206      	movs	r2, #6
 80091bc:	709a      	strb	r2, [r3, #2]

	/* ulTransactionID doesn't really need a htonl() translation, but when DHCP
	times out, it is nicer to see an increasing number in this ID field */
	pxDHCPMessage->ulTransactionID = FreeRTOS_htonl( xDHCPData.ulTransactionId );
 80091be:	4b40      	ldr	r3, [pc, #256]	; (80092c0 <prvCreatePartDHCPMessage+0x164>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	061a      	lsls	r2, r3, #24
 80091c4:	4b3e      	ldr	r3, [pc, #248]	; (80092c0 <prvCreatePartDHCPMessage+0x164>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	021b      	lsls	r3, r3, #8
 80091ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091ce:	431a      	orrs	r2, r3
 80091d0:	4b3b      	ldr	r3, [pc, #236]	; (80092c0 <prvCreatePartDHCPMessage+0x164>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	0a1b      	lsrs	r3, r3, #8
 80091d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80091da:	431a      	orrs	r2, r3
 80091dc:	4b38      	ldr	r3, [pc, #224]	; (80092c0 <prvCreatePartDHCPMessage+0x164>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	0e1b      	lsrs	r3, r3, #24
 80091e2:	431a      	orrs	r2, r3
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	605a      	str	r2, [r3, #4]
	pxDHCPMessage->ulDHCPCookie = ( uint32_t ) dhcpCOOKIE;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80091f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80091f4:	2200      	movs	r2, #0
 80091f6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80091fa:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80091fe:	2200      	movs	r2, #0
 8009200:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8009204:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8009208:	2200      	movs	r2, #0
 800920a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800920e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
	if( xDHCPData.xUseBroadcast != pdFALSE )
 8009212:	4b2b      	ldr	r3, [pc, #172]	; (80092c0 <prvCreatePartDHCPMessage+0x164>)
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d007      	beq.n	800922a <prvCreatePartDHCPMessage+0xce>
	{
		pxDHCPMessage->usFlags = ( uint16_t ) dhcpBROADCAST;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2200      	movs	r2, #0
 800921e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009222:	729a      	strb	r2, [r3, #10]
 8009224:	2200      	movs	r2, #0
 8009226:	72da      	strb	r2, [r3, #11]
 8009228:	e004      	b.n	8009234 <prvCreatePartDHCPMessage+0xd8>
	}
	else
	{
		pxDHCPMessage->usFlags = 0u;
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	2200      	movs	r2, #0
 800922e:	729a      	strb	r2, [r3, #10]
 8009230:	2200      	movs	r2, #0
 8009232:	72da      	strb	r2, [r3, #11]
	}

	memcpy( ( void * ) &( pxDHCPMessage->ucClientHardwareAddress[ 0 ] ), ( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	331c      	adds	r3, #28
 8009238:	2206      	movs	r2, #6
 800923a:	4922      	ldr	r1, [pc, #136]	; (80092c4 <prvCreatePartDHCPMessage+0x168>)
 800923c:	4618      	mov	r0, r3
 800923e:	f007 fc3c 	bl	8010aba <memcpy>

	/* Copy in the const part of the options options. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET ] ), ( void * ) pucOptionsArray, *pxOptionsArraySize );
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	461a      	mov	r2, r3
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	f007 fc33 	bl	8010aba <memcpy>
	{
		/* With this option, the hostname can be registered as well which makes
		it easier to lookup a device in a router's list of DHCP clients. */

		/* Point to where the OPTION_END was stored to add data. */
		pucPtr = &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + ( *pxOptionsArraySize - 1 ) ] );
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	33ef      	adds	r3, #239	; 0xef
 800925a:	69ba      	ldr	r2, [r7, #24]
 800925c:	4413      	add	r3, r2
 800925e:	613b      	str	r3, [r7, #16]
		pucPtr[ 0 ] = dhcpDNS_HOSTNAME_OPTIONS_CODE;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	220c      	movs	r2, #12
 8009264:	701a      	strb	r2, [r3, #0]
		pucPtr[ 1 ] = ( uint8_t ) xNameLength;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	3301      	adds	r3, #1
 800926a:	69fa      	ldr	r2, [r7, #28]
 800926c:	b2d2      	uxtb	r2, r2
 800926e:	701a      	strb	r2, [r3, #0]
		memcpy( ( void *) ( pucPtr + 2 ), pucHostName, xNameLength );
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	3302      	adds	r3, #2
 8009274:	69fa      	ldr	r2, [r7, #28]
 8009276:	6a39      	ldr	r1, [r7, #32]
 8009278:	4618      	mov	r0, r3
 800927a:	f007 fc1e 	bl	8010aba <memcpy>
		pucPtr[ 2 + xNameLength ] = dhcpOPTION_END_BYTE;
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	3302      	adds	r3, #2
 8009282:	693a      	ldr	r2, [r7, #16]
 8009284:	4413      	add	r3, r2
 8009286:	22ff      	movs	r2, #255	; 0xff
 8009288:	701a      	strb	r2, [r3, #0]
		*pxOptionsArraySize += ( 2 + xNameLength );
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	4413      	add	r3, r2
 8009292:	1c9a      	adds	r2, r3, #2
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	601a      	str	r2, [r3, #0]
	}
	#endif

	/* Map in the client identifier. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpCLIENT_IDENTIFIER_OFFSET ] ),
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	33f5      	adds	r3, #245	; 0xf5
 800929c:	2206      	movs	r2, #6
 800929e:	4909      	ldr	r1, [pc, #36]	; (80092c4 <prvCreatePartDHCPMessage+0x168>)
 80092a0:	4618      	mov	r0, r3
 80092a2:	f007 fc0a 	bl	8010aba <memcpy>
		( void * ) ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );

	/* Set the addressing. */
	pxAddress->sin_addr = ipBROADCAST_IP_ADDRESS;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f04f 32ff 	mov.w	r2, #4294967295
 80092ac:	605a      	str	r2, [r3, #4]
	pxAddress->sin_port = ( uint16_t ) dhcpSERVER_PORT;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f44f 4286 	mov.w	r2, #17152	; 0x4300
 80092b4:	805a      	strh	r2, [r3, #2]

	return pucUDPPayloadBuffer;
 80092b6:	69bb      	ldr	r3, [r7, #24]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3728      	adds	r7, #40	; 0x28
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20004684 	.word	0x20004684
 80092c4:	2000009c 	.word	0x2000009c

080092c8 <prvSendDHCPRequest>:
/*-----------------------------------------------------------*/

static void prvSendDHCPRequest( void )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af02      	add	r7, sp, #8
	dhcpCLIENT_IDENTIFIER_OPTION_CODE, 6, 0, 0, 0, 0, 0, 0,			/* Client identifier. */
	dhcpREQUEST_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,				/* The IP address being requested. */
	dhcpSERVER_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,				/* The IP address of the DHCP server. */
	dhcpOPTION_END_BYTE
};
size_t xOptionsLength = sizeof( ucDHCPRequestOptions );
 80092ce:	2318      	movs	r3, #24
 80092d0:	603b      	str	r3, [r7, #0]

	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress, dhcpREQUEST_OPCODE, ucDHCPRequestOptions, &xOptionsLength );
 80092d2:	463b      	mov	r3, r7
 80092d4:	1d38      	adds	r0, r7, #4
 80092d6:	4a13      	ldr	r2, [pc, #76]	; (8009324 <prvSendDHCPRequest+0x5c>)
 80092d8:	2101      	movs	r1, #1
 80092da:	f7ff ff3f 	bl	800915c <prvCreatePartDHCPMessage>
 80092de:	60f8      	str	r0, [r7, #12]

	/* Copy in the IP address being requested. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpREQUESTED_IP_ADDRESS_OFFSET ] ),
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	33fd      	adds	r3, #253	; 0xfd
 80092e4:	4a10      	ldr	r2, [pc, #64]	; (8009328 <prvSendDHCPRequest+0x60>)
 80092e6:	6852      	ldr	r2, [r2, #4]
 80092e8:	601a      	str	r2, [r3, #0]
		( void * ) &( xDHCPData.ulOfferedIPAddress ), sizeof( xDHCPData.ulOfferedIPAddress ) );

	/* Copy in the address of the DHCP server being used. */
	memcpy( ( void * ) &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpDHCP_SERVER_IP_ADDRESS_OFFSET ] ),
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f203 1303 	addw	r3, r3, #259	; 0x103
 80092f0:	4a0d      	ldr	r2, [pc, #52]	; (8009328 <prvSendDHCPRequest+0x60>)
 80092f2:	6892      	ldr	r2, [r2, #8]
 80092f4:	601a      	str	r2, [r3, #0]
		( void * ) &( xDHCPData.ulDHCPServerAddress ), sizeof( xDHCPData.ulDHCPServerAddress ) );

	FreeRTOS_debug_printf( ( "vDHCPProcess: reply %lxip\n", FreeRTOS_ntohl( xDHCPData.ulOfferedIPAddress ) ) );
	iptraceSENDING_DHCP_REQUEST();

	if( FreeRTOS_sendto( xDHCPData.xDHCPSocket, pucUDPPayloadBuffer, ( sizeof( DHCPMessage_t ) + xOptionsLength ), FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
 80092f6:	4b0c      	ldr	r3, [pc, #48]	; (8009328 <prvSendDHCPRequest+0x60>)
 80092f8:	6a18      	ldr	r0, [r3, #32]
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	f103 02f1 	add.w	r2, r3, #241	; 0xf1
 8009300:	2308      	movs	r3, #8
 8009302:	9301      	str	r3, [sp, #4]
 8009304:	1d3b      	adds	r3, r7, #4
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	2301      	movs	r3, #1
 800930a:	68f9      	ldr	r1, [r7, #12]
 800930c:	f001 fe4f 	bl	800afae <FreeRTOS_sendto>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d102      	bne.n	800931c <prvSendDHCPRequest+0x54>
	{
		/* The packet was not successfully queued for sending and must be
		returned to the stack. */
		FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 ff20 	bl	800a15c <FreeRTOS_ReleaseUDPPayloadBuffer>
	}
}
 800931c:	bf00      	nop
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	08010f14 	.word	0x08010f14
 8009328:	20004684 	.word	0x20004684

0800932c <prvSendDHCPDiscover>:
/*-----------------------------------------------------------*/

static void prvSendDHCPDiscover( void )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af02      	add	r7, sp, #8
	dhcpMESSAGE_TYPE_OPTION_CODE, 1, dhcpMESSAGE_TYPE_DISCOVER,					/* Message type option. */
	dhcpCLIENT_IDENTIFIER_OPTION_CODE, 6, 0, 0, 0, 0, 0, 0,						/* Client identifier. */
	dhcpPARAMETER_REQUEST_OPTION_CODE, 3, dhcpSUBNET_MASK_OPTION_CODE, dhcpGATEWAY_OPTION_CODE, dhcpDNS_SERVER_OPTIONS_CODE,	/* Parameter request option. */
	dhcpOPTION_END_BYTE
};
size_t xOptionsLength = sizeof( ucDHCPDiscoverOptions );
 8009332:	2311      	movs	r3, #17
 8009334:	603b      	str	r3, [r7, #0]

	pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress, dhcpREQUEST_OPCODE, ucDHCPDiscoverOptions, &xOptionsLength );
 8009336:	463b      	mov	r3, r7
 8009338:	1d38      	adds	r0, r7, #4
 800933a:	4a0e      	ldr	r2, [pc, #56]	; (8009374 <prvSendDHCPDiscover+0x48>)
 800933c:	2101      	movs	r1, #1
 800933e:	f7ff ff0d 	bl	800915c <prvCreatePartDHCPMessage>
 8009342:	60f8      	str	r0, [r7, #12]

	FreeRTOS_debug_printf( ( "vDHCPProcess: discover\n" ) );
	iptraceSENDING_DHCP_DISCOVER();

	if( FreeRTOS_sendto( xDHCPData.xDHCPSocket, pucUDPPayloadBuffer, ( sizeof( DHCPMessage_t ) + xOptionsLength ), FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
 8009344:	4b0c      	ldr	r3, [pc, #48]	; (8009378 <prvSendDHCPDiscover+0x4c>)
 8009346:	6a18      	ldr	r0, [r3, #32]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	f103 02f1 	add.w	r2, r3, #241	; 0xf1
 800934e:	2308      	movs	r3, #8
 8009350:	9301      	str	r3, [sp, #4]
 8009352:	1d3b      	adds	r3, r7, #4
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	2301      	movs	r3, #1
 8009358:	68f9      	ldr	r1, [r7, #12]
 800935a:	f001 fe28 	bl	800afae <FreeRTOS_sendto>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d102      	bne.n	800936a <prvSendDHCPDiscover+0x3e>
	{
		/* The packet was not successfully queued for sending and must be
		returned to the stack. */
		FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f000 fef9 	bl	800a15c <FreeRTOS_ReleaseUDPPayloadBuffer>
	}
}
 800936a:	bf00      	nop
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	08010f2c 	.word	0x08010f2c
 8009378:	20004684 	.word	0x20004684

0800937c <usChar2u16>:
			( ( ( uint32_t )apChr[3] ) );
}

static portINLINE uint16_t usChar2u16 (const uint8_t *apChr);
static portINLINE uint16_t usChar2u16 (const uint8_t *apChr)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
	return ( uint16_t )
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	b29b      	uxth	r3, r3
 800938a:	021b      	lsls	r3, r3, #8
 800938c:	b29a      	uxth	r2, r3
			  ( ( ( uint32_t )apChr[1] ) ) );
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	3301      	adds	r3, #1
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	b29b      	uxth	r3, r3
	return ( uint16_t )
 8009396:	4313      	orrs	r3, r2
 8009398:	b29b      	uxth	r3, r3
}
 800939a:	4618      	mov	r0, r3
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
	...

080093a8 <vDNSInitialise>:
	/*-----------------------------------------------------------*/

	/* Initialise the list of call-back structures. */
	void vDNSInitialise( void );
	void vDNSInitialise( void )
	{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	af00      	add	r7, sp, #0
		vListInitialise( &xCallbackList );
 80093ac:	4802      	ldr	r0, [pc, #8]	; (80093b8 <vDNSInitialise+0x10>)
 80093ae:	f7fc fc74 	bl	8005c9a <vListInitialise>
	}
 80093b2:	bf00      	nop
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20004708 	.word	0x20004708

080093bc <vDNSCheckCallBack>:
	As soon as the list hase become empty, the DNS timer will be stopped
	In case pvSearchID is supplied, the user wants to cancel a DNS request
	*/
	void vDNSCheckCallBack( void *pvSearchID );
	void vDNSCheckCallBack( void *pvSearchID )
	{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b086      	sub	sp, #24
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
	const ListItem_t *pxIterator;
	const MiniListItem_t* xEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xCallbackList );
 80093c4:	4b25      	ldr	r3, [pc, #148]	; (800945c <vDNSCheckCallBack+0xa0>)
 80093c6:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80093c8:	f7fe f8e6 	bl	8007598 <vTaskSuspendAll>
		{
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	617b      	str	r3, [r7, #20]
 80093d2:	e031      	b.n	8009438 <vDNSCheckCallBack+0x7c>
				 pxIterator != ( const ListItem_t * ) xEnd;
				  )
			{
				DNSCallback_t *pxCallback = ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	60fb      	str	r3, [r7, #12]
				/* Move to the next item because we might remove this item */
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	617b      	str	r3, [r7, #20]
				if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00d      	beq.n	8009402 <vDNSCheckCallBack+0x46>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	691a      	ldr	r2, [r3, #16]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d108      	bne.n	8009402 <vDNSCheckCallBack+0x46>
				{
					uxListRemove( &pxCallback->xListItem );
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	3314      	adds	r3, #20
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fc fcda 	bl	8005dae <uxListRemove>
					vPortFree( pxCallback );
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f7fd f802 	bl	8006404 <vPortFree>
 8009400:	e01a      	b.n	8009438 <vDNSCheckCallBack+0x7c>
				}
				else if( xTaskCheckForTimeOut( &pxCallback->xTimeoutState, &pxCallback->xRemaningTime ) != pdFALSE )
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3308      	adds	r3, #8
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	4611      	mov	r1, r2
 800940a:	4618      	mov	r0, r3
 800940c:	f7fe fbf0 	bl	8007bf0 <xTaskCheckForTimeOut>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d010      	beq.n	8009438 <vDNSCheckCallBack+0x7c>
				{
					pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0 );
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	f102 0028 	add.w	r0, r2, #40	; 0x28
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	6911      	ldr	r1, [r2, #16]
 8009424:	2200      	movs	r2, #0
 8009426:	4798      	blx	r3
					uxListRemove( &pxCallback->xListItem );
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3314      	adds	r3, #20
 800942c:	4618      	mov	r0, r3
 800942e:	f7fc fcbe 	bl	8005dae <uxListRemove>
					vPortFree( ( void * ) pxCallback );
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f7fc ffe6 	bl	8006404 <vPortFree>
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8009438:	697a      	ldr	r2, [r7, #20]
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	429a      	cmp	r2, r3
 800943e:	d1c9      	bne.n	80093d4 <vDNSCheckCallBack+0x18>
				}
			}
		}
		xTaskResumeAll();
 8009440:	f7fe f8b8 	bl	80075b4 <xTaskResumeAll>

		if( listLIST_IS_EMPTY( &xCallbackList ) )
 8009444:	4b06      	ldr	r3, [pc, #24]	; (8009460 <vDNSCheckCallBack+0xa4>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d102      	bne.n	8009452 <vDNSCheckCallBack+0x96>
		{
			vIPSetDnsTimerEnableState( pdFALSE );
 800944c:	2000      	movs	r0, #0
 800944e:	f001 fab1 	bl	800a9b4 <vIPSetDnsTimerEnableState>
		}
	}
 8009452:	bf00      	nop
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20004710 	.word	0x20004710
 8009460:	20004708 	.word	0x20004708

08009464 <vDNSDoCallback>:

	/* A DNS reply was received, see if there is any matching entry and
	call the handler. */
	static void vDNSDoCallback( TickType_t xIdentifier, const char *pcName, uint32_t ulIPAddress );
	static void vDNSDoCallback( TickType_t xIdentifier, const char *pcName, uint32_t ulIPAddress )
	{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
		const ListItem_t *pxIterator;
		const MiniListItem_t* xEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xCallbackList );
 8009470:	4b1a      	ldr	r3, [pc, #104]	; (80094dc <vDNSDoCallback+0x78>)
 8009472:	61bb      	str	r3, [r7, #24]

		vTaskSuspendAll();
 8009474:	f7fe f890 	bl	8007598 <vTaskSuspendAll>
		{
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	61fb      	str	r3, [r7, #28]
 800947e:	e021      	b.n	80094c4 <vDNSDoCallback+0x60>
				 pxIterator != ( const ListItem_t * ) xEnd;
				 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
			{
				if( listGET_LIST_ITEM_VALUE( pxIterator ) == xIdentifier )
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	429a      	cmp	r2, r3
 8009488:	d119      	bne.n	80094be <vDNSDoCallback+0x5a>
				{
					DNSCallback_t *pxCallback = ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	617b      	str	r3, [r7, #20]
					pxCallback->pCallbackFunction( pcName, pxCallback->pvSearchID, ulIPAddress );
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	6911      	ldr	r1, [r2, #16]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	68b8      	ldr	r0, [r7, #8]
 800949c:	4798      	blx	r3
					uxListRemove( &pxCallback->xListItem );
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	3314      	adds	r3, #20
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fc fc83 	bl	8005dae <uxListRemove>
					vPortFree( pxCallback );
 80094a8:	6978      	ldr	r0, [r7, #20]
 80094aa:	f7fc ffab 	bl	8006404 <vPortFree>
					if( listLIST_IS_EMPTY( &xCallbackList ) )
 80094ae:	4b0c      	ldr	r3, [pc, #48]	; (80094e0 <vDNSDoCallback+0x7c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10b      	bne.n	80094ce <vDNSDoCallback+0x6a>
					{
						vIPSetDnsTimerEnableState( pdFALSE );
 80094b6:	2000      	movs	r0, #0
 80094b8:	f001 fa7c 	bl	800a9b4 <vIPSetDnsTimerEnableState>
					}
					break;
 80094bc:	e007      	b.n	80094ce <vDNSDoCallback+0x6a>
				 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	61fb      	str	r3, [r7, #28]
			for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80094c4:	69fa      	ldr	r2, [r7, #28]
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d1d9      	bne.n	8009480 <vDNSDoCallback+0x1c>
 80094cc:	e000      	b.n	80094d0 <vDNSDoCallback+0x6c>
					break;
 80094ce:	bf00      	nop
				}
			}
		}
		xTaskResumeAll();
 80094d0:	f7fe f870 	bl	80075b4 <xTaskResumeAll>
	}
 80094d4:	bf00      	nop
 80094d6:	3720      	adds	r7, #32
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	20004710 	.word	0x20004710
 80094e0:	20004708 	.word	0x20004708

080094e4 <prvReadNameField>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DNS_CACHE == 1 )

	static uint8_t *prvReadNameField( uint8_t *pucByte, char *pcName, BaseType_t xLen )
	{
 80094e4:	b480      	push	{r7}
 80094e6:	b087      	sub	sp, #28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
	BaseType_t xNameLen = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	617b      	str	r3, [r7, #20]
		/* Determine if the name is the fully coded name, or an offset to the name
		elsewhere in the message. */
		if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80094fc:	2bc0      	cmp	r3, #192	; 0xc0
 80094fe:	d12f      	bne.n	8009560 <prvReadNameField+0x7c>
		{
			/* Jump over the two byte offset. */
			pucByte += sizeof( uint16_t );
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	3302      	adds	r3, #2
 8009504:	60fb      	str	r3, [r7, #12]
 8009506:	e032      	b.n	800956e <prvReadNameField+0x8a>
		{
			/* pucByte points to the full name.  Walk over the string. */
			while( *pucByte != 0x00 )
			{
				BaseType_t xCount;
				if( xNameLen && xNameLen < xLen - 1 )
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00c      	beq.n	8009528 <prvReadNameField+0x44>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	1e5a      	subs	r2, r3, #1
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	429a      	cmp	r2, r3
 8009516:	dd07      	ble.n	8009528 <prvReadNameField+0x44>
					pcName[xNameLen++] = '.';
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	1c5a      	adds	r2, r3, #1
 800951c:	617a      	str	r2, [r7, #20]
 800951e:	461a      	mov	r2, r3
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	4413      	add	r3, r2
 8009524:	222e      	movs	r2, #46	; 0x2e
 8009526:	701a      	strb	r2, [r3, #0]
				for( xCount = *(pucByte++); xCount--; pucByte++ )
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	1c5a      	adds	r2, r3, #1
 800952c:	60fa      	str	r2, [r7, #12]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	613b      	str	r3, [r7, #16]
 8009532:	e010      	b.n	8009556 <prvReadNameField+0x72>
				{
					if( xNameLen < xLen - 1 )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	1e5a      	subs	r2, r3, #1
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	429a      	cmp	r2, r3
 800953c:	dd08      	ble.n	8009550 <prvReadNameField+0x6c>
						pcName[xNameLen++] = *( ( char * ) pucByte );
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	1c5a      	adds	r2, r3, #1
 8009542:	617a      	str	r2, [r7, #20]
 8009544:	461a      	mov	r2, r3
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	4413      	add	r3, r2
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	7812      	ldrb	r2, [r2, #0]
 800954e:	701a      	strb	r2, [r3, #0]
				for( xCount = *(pucByte++); xCount--; pucByte++ )
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	3301      	adds	r3, #1
 8009554:	60fb      	str	r3, [r7, #12]
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	1e5a      	subs	r2, r3, #1
 800955a:	613a      	str	r2, [r7, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e9      	bne.n	8009534 <prvReadNameField+0x50>
			while( *pucByte != 0x00 )
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1cf      	bne.n	8009508 <prvReadNameField+0x24>
				}
			}

			pucByte++;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	3301      	adds	r3, #1
 800956c:	60fb      	str	r3, [r7, #12]
		}

		return pucByte;
 800956e:	68fb      	ldr	r3, [r7, #12]
	}
 8009570:	4618      	mov	r0, r3
 8009572:	371c      	adds	r7, #28
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <prvSkipNameField>:
#endif	/* ipconfigUSE_DNS_CACHE == 1 */
/*-----------------------------------------------------------*/

static uint8_t *prvSkipNameField( uint8_t *pucByte )
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
	/* Determine if the name is the fully coded name, or an offset to the name
	elsewhere in the message. */
	if( ( *pucByte & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800958c:	2bc0      	cmp	r3, #192	; 0xc0
 800958e:	d109      	bne.n	80095a4 <prvSkipNameField+0x28>
	{
		/* Jump over the two byte offset. */
		pucByte += sizeof( uint16_t );
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	3302      	adds	r3, #2
 8009594:	607b      	str	r3, [r7, #4]
 8009596:	e00c      	b.n	80095b2 <prvSkipNameField+0x36>
		/* pucByte points to the full name.  Walk over the string. */
		while( *pucByte != 0x00 )
		{
			/* The number of bytes to jump for each name section is stored in the byte
			before the name section. */
			pucByte += ( *pucByte + 1 );
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	3301      	adds	r3, #1
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	4413      	add	r3, r2
 80095a2:	607b      	str	r3, [r7, #4]
		while( *pucByte != 0x00 )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1f5      	bne.n	8009598 <prvSkipNameField+0x1c>
		}

		pucByte++;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	3301      	adds	r3, #1
 80095b0:	607b      	str	r3, [r7, #4]
	}

	return pucByte;
 80095b2:	687b      	ldr	r3, [r7, #4]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <ulDNSHandlePacket>:
/*-----------------------------------------------------------*/

uint32_t ulDNSHandlePacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
uint8_t *pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + sizeof( UDPPacket_t );
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	332a      	adds	r3, #42	; 0x2a
 80095ce:	60fb      	str	r3, [r7, #12]
DNSMessage_t *pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	60bb      	str	r3, [r7, #8]

	prvParseDNSReply( pucUDPPayloadBuffer, ( uint32_t ) pxDNSMessageHeader->usIdentifier );
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	881b      	ldrh	r3, [r3, #0]
 80095d8:	b29b      	uxth	r3, r3
 80095da:	4619      	mov	r1, r3
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 f805 	bl	80095ec <prvParseDNSReply>

	/* The packet was not consumed. */
	return pdFAIL;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <prvParseDNSReply>:

#endif /* ipconfigUSE_NBNS */
/*-----------------------------------------------------------*/

static uint32_t prvParseDNSReply( uint8_t *pucUDPPayloadBuffer, TickType_t xIdentifier )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b0b2      	sub	sp, #200	; 0xc8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
DNSMessage_t *pxDNSMessageHeader;
uint32_t ulIPAddress = 0UL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#if( ipconfigUSE_LLMNR == 1 )
	char *pcRequestedName = NULL;
 80095fc:	2300      	movs	r3, #0
 80095fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
#endif
uint8_t *pucByte;
uint16_t x, usDataLength, usQuestions;
#if( ipconfigUSE_LLMNR == 1 )
	uint16_t usType = 0, usClass = 0;
 8009602:	2300      	movs	r3, #0
 8009604:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8009608:	2300      	movs	r3, #0
 800960a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
#endif
#if( ipconfigUSE_DNS_CACHE == 1 )
	char pcName[128] = ""; /*_RB_ What is the significance of 128?  Probably too big to go on the stack for a small MCU but don't know how else it could be made re-entrant.  Might be necessary. */
 800960e:	2300      	movs	r3, #0
 8009610:	60fb      	str	r3, [r7, #12]
 8009612:	f107 0310 	add.w	r3, r7, #16
 8009616:	227c      	movs	r2, #124	; 0x7c
 8009618:	2100      	movs	r1, #0
 800961a:	4618      	mov	r0, r3
 800961c:	f007 fa72 	bl	8010b04 <memset>
#endif

	pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	if( pxDNSMessageHeader->usIdentifier == ( uint16_t ) xIdentifier )
 8009626:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800962a:	881b      	ldrh	r3, [r3, #0]
 800962c:	b29a      	uxth	r2, r3
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	b29b      	uxth	r3, r3
 8009632:	429a      	cmp	r2, r3
 8009634:	f040 8221 	bne.w	8009a7a <prvParseDNSReply+0x48e>
	{
		/* Start at the first byte after the header. */
		pucByte = pucUDPPayloadBuffer + sizeof( DNSMessage_t );
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	330c      	adds	r3, #12
 800963c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Skip any question records. */
		usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 8009640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009644:	889b      	ldrh	r3, [r3, #4]
 8009646:	b29b      	uxth	r3, r3
 8009648:	021b      	lsls	r3, r3, #8
 800964a:	b21a      	sxth	r2, r3
 800964c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009650:	889b      	ldrh	r3, [r3, #4]
 8009652:	b29b      	uxth	r3, r3
 8009654:	0a1b      	lsrs	r3, r3, #8
 8009656:	b29b      	uxth	r3, r3
 8009658:	b21b      	sxth	r3, r3
 800965a:	4313      	orrs	r3, r2
 800965c:	b21b      	sxth	r3, r3
 800965e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		for( x = 0; x < usQuestions; x++ )
 8009662:	2300      	movs	r3, #0
 8009664:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8009668:	e036      	b.n	80096d8 <prvParseDNSReply+0xec>
		{
			#if( ipconfigUSE_LLMNR == 1 )
			{
				if( x == 0 )
 800966a:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800966e:	2b00      	cmp	r3, #0
 8009670:	d103      	bne.n	800967a <prvParseDNSReply+0x8e>
				{
					pcRequestedName = ( char * ) pucByte;
 8009672:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009676:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
				}
			}
			#endif

#if( ipconfigUSE_DNS_CACHE == 1 )
			if( x == 0 )
 800967a:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10a      	bne.n	8009698 <prvParseDNSReply+0xac>
			{
				pucByte = prvReadNameField( pucByte, pcName, sizeof( pcName ) );
 8009682:	f107 030c 	add.w	r3, r7, #12
 8009686:	2280      	movs	r2, #128	; 0x80
 8009688:	4619      	mov	r1, r3
 800968a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800968e:	f7ff ff29 	bl	80094e4 <prvReadNameField>
 8009692:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 8009696:	e005      	b.n	80096a4 <prvParseDNSReply+0xb8>
			}
			else
#endif /* ipconfigUSE_DNS_CACHE */
			{
				/* Skip the variable length pcName field. */
				pucByte = prvSkipNameField( pucByte );
 8009698:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800969c:	f7ff ff6e 	bl	800957c <prvSkipNameField>
 80096a0:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
			}

			#if( ipconfigUSE_LLMNR == 1 )
			{
				/* usChar2u16 returns value in host endianness */
				usType = usChar2u16( pucByte );
 80096a4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80096a8:	f7ff fe68 	bl	800937c <usChar2u16>
 80096ac:	4603      	mov	r3, r0
 80096ae:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
				usClass = usChar2u16( pucByte + 2 );
 80096b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096b6:	3302      	adds	r3, #2
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7ff fe5f 	bl	800937c <usChar2u16>
 80096be:	4603      	mov	r3, r0
 80096c0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
			}
			#endif /* ipconfigUSE_LLMNR */

			/* Skip the type and class fields. */
			pucByte += sizeof( uint32_t );
 80096c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096c8:	3304      	adds	r3, #4
 80096ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		for( x = 0; x < usQuestions; x++ )
 80096ce:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80096d2:	3301      	adds	r3, #1
 80096d4:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 80096d8:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80096dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d3c2      	bcc.n	800966a <prvParseDNSReply+0x7e>
		}

		/* Search through the answers records. */
		pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 80096e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80096e8:	88db      	ldrh	r3, [r3, #6]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	021b      	lsls	r3, r3, #8
 80096ee:	b21a      	sxth	r2, r3
 80096f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80096f4:	88db      	ldrh	r3, [r3, #6]
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	0a1b      	lsrs	r3, r3, #8
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	b21b      	sxth	r3, r3
 80096fe:	4313      	orrs	r3, r2
 8009700:	b21b      	sxth	r3, r3
 8009702:	b29a      	uxth	r2, r3
 8009704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009708:	80da      	strh	r2, [r3, #6]

		if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 800970a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800970e:	885b      	ldrh	r3, [r3, #2]
 8009710:	b29b      	uxth	r3, r3
 8009712:	f403 6378 	and.w	r3, r3, #3968	; 0xf80
 8009716:	2b80      	cmp	r3, #128	; 0x80
 8009718:	d169      	bne.n	80097ee <prvParseDNSReply+0x202>
		{
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 800971a:	2300      	movs	r3, #0
 800971c:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8009720:	e05c      	b.n	80097dc <prvParseDNSReply+0x1f0>
			{
				pucByte = prvSkipNameField( pucByte );
 8009722:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8009726:	f7ff ff29 	bl	800957c <prvSkipNameField>
 800972a:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

				/* Is the type field that of an A record? */
				if( usChar2u16( pucByte ) == dnsTYPE_A_HOST )
 800972e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8009732:	f7ff fe23 	bl	800937c <usChar2u16>
 8009736:	4603      	mov	r3, r0
 8009738:	2b01      	cmp	r3, #1
 800973a:	d129      	bne.n	8009790 <prvParseDNSReply+0x1a4>
				{
					/* This is the required record.  Skip the type, class, and
					time to live fields, plus the first byte of the data
					length. */
					pucByte += ( sizeof( uint32_t ) + sizeof( uint32_t ) + sizeof( uint8_t ) );
 800973c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009740:	3309      	adds	r3, #9
 8009742:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

					/* Sanity check the data length. */
					if( ( size_t ) *pucByte == sizeof( uint32_t ) )
 8009746:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2b04      	cmp	r3, #4
 800974e:	f040 8193 	bne.w	8009a78 <prvParseDNSReply+0x48c>
					{
						/* Skip the second byte of the length. */
						pucByte++;
 8009752:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009756:	3301      	adds	r3, #1
 8009758:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

						/* Copy the IP address out of the record. */
						memcpy( ( void * ) &ulIPAddress, ( void * ) pucByte, sizeof( uint32_t ) );
 800975c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

						#if( ipconfigUSE_DNS_CACHE == 1 )
						{
							prvProcessDNSCache( pcName, &ulIPAddress, pdFALSE );
 8009766:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800976a:	f107 030c 	add.w	r3, r7, #12
 800976e:	2200      	movs	r2, #0
 8009770:	4618      	mov	r0, r3
 8009772:	f000 f9f7 	bl	8009b64 <prvProcessDNSCache>
						}
						#endif /* ipconfigUSE_DNS_CACHE */
						#if( ipconfigDNS_USE_CALLBACKS != 0 )
						{
							/* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
							vDNSDoCallback( ( TickType_t ) pxDNSMessageHeader->usIdentifier, pcName, ulIPAddress );
 8009776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800977a:	881b      	ldrh	r3, [r3, #0]
 800977c:	b29b      	uxth	r3, r3
 800977e:	4618      	mov	r0, r3
 8009780:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009784:	f107 030c 	add.w	r3, r7, #12
 8009788:	4619      	mov	r1, r3
 800978a:	f7ff fe6b 	bl	8009464 <vDNSDoCallback>
						}
						#endif	/* ipconfigDNS_USE_CALLBACKS != 0 */
					}

					break;
 800978e:	e173      	b.n	8009a78 <prvParseDNSReply+0x48c>
				}
				else
				{
					/* Skip the type, class and time to live fields. */
					pucByte += ( sizeof( uint32_t ) + sizeof( uint32_t ) );
 8009790:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009794:	3308      	adds	r3, #8
 8009796:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

					/* Determine the length of the data in the field. */
					memcpy( ( void * ) &usDataLength, ( void * ) pucByte, sizeof( uint16_t ) );
 800979a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					usDataLength = FreeRTOS_ntohs( usDataLength );
 80097a6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80097aa:	021b      	lsls	r3, r3, #8
 80097ac:	b21a      	sxth	r2, r3
 80097ae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80097b2:	0a1b      	lsrs	r3, r3, #8
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	b21b      	sxth	r3, r3
 80097b8:	4313      	orrs	r3, r2
 80097ba:	b21b      	sxth	r3, r3
 80097bc:	b29b      	uxth	r3, r3
 80097be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

					/* Jump over the data length bytes, and the data itself. */
					pucByte += usDataLength + sizeof( uint16_t );
 80097c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80097c6:	3302      	adds	r3, #2
 80097c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80097cc:	4413      	add	r3, r2
 80097ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			for( x = 0; x < pxDNSMessageHeader->usAnswers; x++ )
 80097d2:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80097d6:	3301      	adds	r3, #1
 80097d8:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 80097dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097e0:	88db      	ldrh	r3, [r3, #6]
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d39a      	bcc.n	8009722 <prvParseDNSReply+0x136>
 80097ec:	e145      	b.n	8009a7a <prvParseDNSReply+0x48e>
				}
			}
		}
#if( ipconfigUSE_LLMNR == 1 )
		else if( usQuestions && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) )
 80097ee:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f000 8141 	beq.w	8009a7a <prvParseDNSReply+0x48e>
 80097f8:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	f040 813c 	bne.w	8009a7a <prvParseDNSReply+0x48e>
 8009802:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009806:	2b01      	cmp	r3, #1
 8009808:	f040 8137 	bne.w	8009a7a <prvParseDNSReply+0x48e>
		{
			/* If this is not a reply to our DNS request, it might an LLMNR
			request. */
			if( xApplicationDNSQueryHook ( ( pcRequestedName + 1 ) ) )
 800980c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009810:	3301      	adds	r3, #1
 8009812:	4618      	mov	r0, r3
 8009814:	f006 fa5e 	bl	800fcd4 <xApplicationDNSQueryHook>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 812d 	beq.w	8009a7a <prvParseDNSReply+0x48e>
			{
			int16_t usLength;
			NetworkBufferDescriptor_t *pxNewBuffer = NULL;
 8009820:	2300      	movs	r3, #0
 8009822:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			NetworkBufferDescriptor_t *pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fc77 	bl	800a11a <pxUDPPayloadBuffer_to_NetworkBuffer>
 800982c:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
			LLMNRAnswer_t *pxAnswer;

				if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 8009830:	4b95      	ldr	r3, [pc, #596]	; (8009a88 <prvParseDNSReply+0x49c>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d144      	bne.n	80098c2 <prvParseDNSReply+0x2d6>
 8009838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800983c:	2b00      	cmp	r3, #0
 800983e:	d040      	beq.n	80098c2 <prvParseDNSReply+0x2d6>
				{
				BaseType_t xDataLength = pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) +
 8009840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009844:	69db      	ldr	r3, [r3, #28]
					sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 8009846:	332a      	adds	r3, #42	; 0x2a
				BaseType_t xDataLength = pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) +
 8009848:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

					/* The field xDataLength was set to the length of the UDP payload.
					The answer (reply) will be longer than the request, so the packet
					must be duplicaed into a bigger buffer */
					pxNetworkBuffer->xDataLength = xDataLength;
 800984c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009854:	61da      	str	r2, [r3, #28]
					pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, xDataLength + 16 );
 8009856:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800985a:	3310      	adds	r3, #16
 800985c:	4619      	mov	r1, r3
 800985e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009862:	f000 fc32 	bl	800a0ca <pxDuplicateNetworkBufferWithDescriptor>
 8009866:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
					if( pxNewBuffer != NULL )
 800986a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d024      	beq.n	80098bc <prvParseDNSReply+0x2d0>
					{
					BaseType_t xOffset1, xOffset2;

						xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 8009872:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
 800987e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

						pxNetworkBuffer = pxNewBuffer;
 800988a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800988e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
						pucUDPPayloadBuffer = pxNetworkBuffer->pucEthernetBuffer + ipUDP_PAYLOAD_OFFSET_IPv4;
 8009892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	332a      	adds	r3, #42	; 0x2a
 800989a:	607b      	str	r3, [r7, #4]

						pucByte = pucUDPPayloadBuffer + xOffset1;
 800989c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	4413      	add	r3, r2
 80098a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						pcRequestedName = ( char * ) ( pucUDPPayloadBuffer + xOffset2 );
 80098a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	4413      	add	r3, r2
 80098b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
						pxDNSMessageHeader = ( DNSMessage_t * ) pucUDPPayloadBuffer;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098ba:	e002      	b.n	80098c2 <prvParseDNSReply+0x2d6>

					}
					else
					{
						/* Just to indicate that the message may not be answered. */
						pxNetworkBuffer = NULL;
 80098bc:	2300      	movs	r3, #0
 80098be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					}
				}
				if( pxNetworkBuffer != NULL )
 80098c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f000 80d7 	beq.w	8009a7a <prvParseDNSReply+0x48e>
				{
					pxAnswer = (LLMNRAnswer_t *)pucByte;
 80098cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80098d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

					/* We leave 'usIdentifier' and 'usQuestions' untouched */
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE );	/* Set the response flag */
 80098d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098d8:	3302      	adds	r3, #2
 80098da:	2280      	movs	r2, #128	; 0x80
 80098dc:	701a      	strb	r2, [r3, #0]
 80098de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098e2:	3303      	adds	r3, #3
 80098e4:	2200      	movs	r2, #0
 80098e6:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );	/* Provide a single answer */
 80098e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098ec:	3306      	adds	r3, #6
 80098ee:	2200      	movs	r2, #0
 80098f0:	701a      	strb	r2, [r3, #0]
 80098f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098f6:	3307      	adds	r3, #7
 80098f8:	2201      	movs	r2, #1
 80098fa:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );	/* No authority */
 80098fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009900:	3308      	adds	r3, #8
 8009902:	2200      	movs	r2, #0
 8009904:	701a      	strb	r2, [r3, #0]
 8009906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800990a:	3309      	adds	r3, #9
 800990c:	2200      	movs	r2, #0
 800990e:	701a      	strb	r2, [r3, #0]
					vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );	/* No additional info */
 8009910:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009914:	330a      	adds	r3, #10
 8009916:	2200      	movs	r2, #0
 8009918:	701a      	strb	r2, [r3, #0]
 800991a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800991e:	330b      	adds	r3, #11
 8009920:	2200      	movs	r2, #0
 8009922:	701a      	strb	r2, [r3, #0]

					pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8009924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009928:	22c0      	movs	r2, #192	; 0xc0
 800992a:	701a      	strb	r2, [r3, #0]
					pxAnswer->ucNameOffset = ( uint8_t )( pcRequestedName - ( char * ) pucUDPPayloadBuffer );
 800992c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	b2da      	uxtb	r2, r3
 8009936:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800993a:	705a      	strb	r2, [r3, #1]

					vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST );	/* Type A: host */
 800993c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009940:	3302      	adds	r3, #2
 8009942:	2200      	movs	r2, #0
 8009944:	701a      	strb	r2, [r3, #0]
 8009946:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800994a:	3303      	adds	r3, #3
 800994c:	2201      	movs	r2, #1
 800994e:	701a      	strb	r2, [r3, #0]
					vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );	/* 1: Class IN */
 8009950:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009954:	3304      	adds	r3, #4
 8009956:	2200      	movs	r2, #0
 8009958:	701a      	strb	r2, [r3, #0]
 800995a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800995e:	3305      	adds	r3, #5
 8009960:	2201      	movs	r2, #1
 8009962:	701a      	strb	r2, [r3, #0]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8009964:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009968:	3306      	adds	r3, #6
 800996a:	2200      	movs	r2, #0
 800996c:	701a      	strb	r2, [r3, #0]
 800996e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009972:	3307      	adds	r3, #7
 8009974:	2204      	movs	r2, #4
 8009976:	701a      	strb	r2, [r3, #0]
 8009978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800997c:	3308      	adds	r3, #8
 800997e:	2293      	movs	r2, #147	; 0x93
 8009980:	701a      	strb	r2, [r3, #0]
 8009982:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009986:	3309      	adds	r3, #9
 8009988:	22e0      	movs	r2, #224	; 0xe0
 800998a:	701a      	strb	r2, [r3, #0]
					vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 800998c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009990:	330a      	adds	r3, #10
 8009992:	2200      	movs	r2, #0
 8009994:	701a      	strb	r2, [r3, #0]
 8009996:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800999a:	330b      	adds	r3, #11
 800999c:	2204      	movs	r2, #4
 800999e:	701a      	strb	r2, [r3, #0]
					vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 80099a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099a4:	330c      	adds	r3, #12
 80099a6:	4a39      	ldr	r2, [pc, #228]	; (8009a8c <prvParseDNSReply+0x4a0>)
 80099a8:	6952      	ldr	r2, [r2, #20]
 80099aa:	0611      	lsls	r1, r2, #24
 80099ac:	4a37      	ldr	r2, [pc, #220]	; (8009a8c <prvParseDNSReply+0x4a0>)
 80099ae:	6952      	ldr	r2, [r2, #20]
 80099b0:	0212      	lsls	r2, r2, #8
 80099b2:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80099b6:	4311      	orrs	r1, r2
 80099b8:	4a34      	ldr	r2, [pc, #208]	; (8009a8c <prvParseDNSReply+0x4a0>)
 80099ba:	6952      	ldr	r2, [r2, #20]
 80099bc:	0a12      	lsrs	r2, r2, #8
 80099be:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80099c2:	4311      	orrs	r1, r2
 80099c4:	4a31      	ldr	r2, [pc, #196]	; (8009a8c <prvParseDNSReply+0x4a0>)
 80099c6:	6952      	ldr	r2, [r2, #20]
 80099c8:	0e12      	lsrs	r2, r2, #24
 80099ca:	430a      	orrs	r2, r1
 80099cc:	0e12      	lsrs	r2, r2, #24
 80099ce:	b2d2      	uxtb	r2, r2
 80099d0:	701a      	strb	r2, [r3, #0]
 80099d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099d6:	330d      	adds	r3, #13
 80099d8:	4a2c      	ldr	r2, [pc, #176]	; (8009a8c <prvParseDNSReply+0x4a0>)
 80099da:	6952      	ldr	r2, [r2, #20]
 80099dc:	0611      	lsls	r1, r2, #24
 80099de:	4a2b      	ldr	r2, [pc, #172]	; (8009a8c <prvParseDNSReply+0x4a0>)
 80099e0:	6952      	ldr	r2, [r2, #20]
 80099e2:	0212      	lsls	r2, r2, #8
 80099e4:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80099e8:	4311      	orrs	r1, r2
 80099ea:	4a28      	ldr	r2, [pc, #160]	; (8009a8c <prvParseDNSReply+0x4a0>)
 80099ec:	6952      	ldr	r2, [r2, #20]
 80099ee:	0a12      	lsrs	r2, r2, #8
 80099f0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80099f4:	4311      	orrs	r1, r2
 80099f6:	4a25      	ldr	r2, [pc, #148]	; (8009a8c <prvParseDNSReply+0x4a0>)
 80099f8:	6952      	ldr	r2, [r2, #20]
 80099fa:	0e12      	lsrs	r2, r2, #24
 80099fc:	430a      	orrs	r2, r1
 80099fe:	0c12      	lsrs	r2, r2, #16
 8009a00:	b2d2      	uxtb	r2, r2
 8009a02:	701a      	strb	r2, [r3, #0]
 8009a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a08:	330e      	adds	r3, #14
 8009a0a:	4a20      	ldr	r2, [pc, #128]	; (8009a8c <prvParseDNSReply+0x4a0>)
 8009a0c:	6952      	ldr	r2, [r2, #20]
 8009a0e:	0611      	lsls	r1, r2, #24
 8009a10:	4a1e      	ldr	r2, [pc, #120]	; (8009a8c <prvParseDNSReply+0x4a0>)
 8009a12:	6952      	ldr	r2, [r2, #20]
 8009a14:	0212      	lsls	r2, r2, #8
 8009a16:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8009a1a:	4311      	orrs	r1, r2
 8009a1c:	4a1b      	ldr	r2, [pc, #108]	; (8009a8c <prvParseDNSReply+0x4a0>)
 8009a1e:	6952      	ldr	r2, [r2, #20]
 8009a20:	0a12      	lsrs	r2, r2, #8
 8009a22:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8009a26:	4311      	orrs	r1, r2
 8009a28:	4a18      	ldr	r2, [pc, #96]	; (8009a8c <prvParseDNSReply+0x4a0>)
 8009a2a:	6952      	ldr	r2, [r2, #20]
 8009a2c:	0e12      	lsrs	r2, r2, #24
 8009a2e:	430a      	orrs	r2, r1
 8009a30:	0a12      	lsrs	r2, r2, #8
 8009a32:	b2d2      	uxtb	r2, r2
 8009a34:	701a      	strb	r2, [r3, #0]
 8009a36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a3a:	330f      	adds	r3, #15
 8009a3c:	4a13      	ldr	r2, [pc, #76]	; (8009a8c <prvParseDNSReply+0x4a0>)
 8009a3e:	6952      	ldr	r2, [r2, #20]
 8009a40:	0e12      	lsrs	r2, r2, #24
 8009a42:	b2d2      	uxtb	r2, r2
 8009a44:	701a      	strb	r2, [r3, #0]

					usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucUDPPayloadBuffer ) );
 8009a46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	3310      	adds	r3, #16
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

					prvReplyDNSMessage( pxNetworkBuffer, usLength );
 8009a58:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009a62:	f000 f815 	bl	8009a90 <prvReplyDNSMessage>

					if( pxNewBuffer != NULL )
 8009a66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d005      	beq.n	8009a7a <prvParseDNSReply+0x48e>
					{
						vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8009a6e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8009a72:	f006 f873 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
 8009a76:	e000      	b.n	8009a7a <prvParseDNSReply+0x48e>
					break;
 8009a78:	bf00      	nop
			}
		}
#endif /* ipconfigUSE_LLMNR == 1 */
	}

	return ulIPAddress;
 8009a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	37c8      	adds	r7, #200	; 0xc8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	08010f58 	.word	0x08010f58
 8009a8c:	2000009c 	.word	0x2000009c

08009a90 <prvReplyDNSMessage>:
/*-----------------------------------------------------------*/

#if( ( ipconfigUSE_NBNS == 1 ) || ( ipconfigUSE_LLMNR == 1 ) )

	static void prvReplyDNSMessage( NetworkBufferDescriptor_t *pxNetworkBuffer, BaseType_t lNetLength )
	{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
	UDPPacket_t *pxUDPPacket;
	IPHeader_t *pxIPHeader;
	UDPHeader_t *pxUDPHeader;

		pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	617b      	str	r3, [r7, #20]
		pxIPHeader = &pxUDPPacket->xIPHeader;
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	330e      	adds	r3, #14
 8009aa4:	613b      	str	r3, [r7, #16]
		pxUDPHeader = &pxUDPPacket->xUDPHeader;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	3322      	adds	r3, #34	; 0x22
 8009aaa:	60fb      	str	r3, [r7, #12]
		/* HT: started using defines like 'ipSIZE_OF_xxx' */
		pxIPHeader->usLength               = FreeRTOS_htons( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	331c      	adds	r3, #28
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	021b      	lsls	r3, r3, #8
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	331c      	adds	r3, #28
 8009abc:	0a1b      	lsrs	r3, r3, #8
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	805a      	strh	r2, [r3, #2]
		/* HT:endian: should not be translated, copying from packet to packet */
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	68da      	ldr	r2, [r3, #12]
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress      = *ipLOCAL_IP_ADDRESS_POINTER;
 8009ad0:	4b22      	ldr	r3, [pc, #136]	; (8009b5c <prvReplyDNSMessage+0xcc>)
 8009ad2:	695a      	ldr	r2, [r3, #20]
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	60da      	str	r2, [r3, #12]
		pxIPHeader->ucTimeToLive           = ipconfigUDP_TIME_TO_LIVE;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	2280      	movs	r2, #128	; 0x80
 8009adc:	721a      	strb	r2, [r3, #8]
		pxIPHeader->usIdentification       = FreeRTOS_htons( usPacketIdentifier );
 8009ade:	4b20      	ldr	r3, [pc, #128]	; (8009b60 <prvReplyDNSMessage+0xd0>)
 8009ae0:	881b      	ldrh	r3, [r3, #0]
 8009ae2:	021b      	lsls	r3, r3, #8
 8009ae4:	b21a      	sxth	r2, r3
 8009ae6:	4b1e      	ldr	r3, [pc, #120]	; (8009b60 <prvReplyDNSMessage+0xd0>)
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	0a1b      	lsrs	r3, r3, #8
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	b21b      	sxth	r3, r3
 8009af0:	4313      	orrs	r3, r2
 8009af2:	b21b      	sxth	r3, r3
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	809a      	strh	r2, [r3, #4]
		usPacketIdentifier++;
 8009afa:	4b19      	ldr	r3, [pc, #100]	; (8009b60 <prvReplyDNSMessage+0xd0>)
 8009afc:	881b      	ldrh	r3, [r3, #0]
 8009afe:	3301      	adds	r3, #1
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	4b17      	ldr	r3, [pc, #92]	; (8009b60 <prvReplyDNSMessage+0xd0>)
 8009b04:	801a      	strh	r2, [r3, #0]
		pxUDPHeader->usLength              = FreeRTOS_htons( lNetLength + ipSIZE_OF_UDP_HEADER );
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	3308      	adds	r3, #8
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	021b      	lsls	r3, r3, #8
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	3308      	adds	r3, #8
 8009b16:	0a1b      	lsrs	r3, r3, #8
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	809a      	strh	r2, [r3, #4]
		vFlip_16( pxUDPPacket->xUDPHeader.usSourcePort, pxUDPPacket->xUDPHeader.usDestinationPort );
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8009b28:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009b2c:	021b      	lsls	r3, r3, #8
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	817b      	strh	r3, [r7, #10]
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	845a      	strh	r2, [r3, #34]	; 0x22
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	897a      	ldrh	r2, [r7, #10]
 8009b40:	849a      	strh	r2, [r3, #36]	; 0x24
			usGenerateProtocolChecksum( ( uint8_t* ) pxUDPPacket, pdTRUE );
		}
		#endif

		/* Important: tell NIC driver how many bytes must be sent */
		pxNetworkBuffer->xDataLength = ( size_t ) ( lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER );
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	61da      	str	r2, [r3, #28]

		/* This function will fill in the eth addresses and send the packet */
		vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fee8 	bl	800a924 <vReturnEthernetFrame>
	}
 8009b54:	bf00      	nop
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	2000009c 	.word	0x2000009c
 8009b60:	20004724 	.word	0x20004724

08009b64 <prvProcessDNSCache>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DNS_CACHE == 1 )

	static void prvProcessDNSCache( const char *pcName, uint32_t *pulIP, BaseType_t xLookUp )
	{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
	BaseType_t x;
	BaseType_t xFound = pdFALSE;
 8009b70:	2300      	movs	r3, #0
 8009b72:	613b      	str	r3, [r7, #16]
	static BaseType_t xFreeEntry = 0;

		/* For each entry in the DNS cache table. */
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8009b74:	2300      	movs	r3, #0
 8009b76:	617b      	str	r3, [r7, #20]
 8009b78:	e038      	b.n	8009bec <prvProcessDNSCache+0x88>
		{
			if( xDNSCache[ x ].pcName[ 0 ] == 0 )
 8009b7a:	4939      	ldr	r1, [pc, #228]	; (8009c60 <prvProcessDNSCache+0xfc>)
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	005b      	lsls	r3, r3, #1
 8009b82:	4413      	add	r3, r2
 8009b84:	00db      	lsls	r3, r3, #3
 8009b86:	440b      	add	r3, r1
 8009b88:	3304      	adds	r3, #4
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d031      	beq.n	8009bf4 <prvProcessDNSCache+0x90>
			{
				break;
			}

			if( strncmp( xDNSCache[ x ].pcName, pcName, sizeof( xDNSCache[ x ].pcName ) ) == 0 )
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	4613      	mov	r3, r2
 8009b94:	005b      	lsls	r3, r3, #1
 8009b96:	4413      	add	r3, r2
 8009b98:	00db      	lsls	r3, r3, #3
 8009b9a:	4a31      	ldr	r2, [pc, #196]	; (8009c60 <prvProcessDNSCache+0xfc>)
 8009b9c:	4413      	add	r3, r2
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	2210      	movs	r2, #16
 8009ba2:	68f9      	ldr	r1, [r7, #12]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f007 f80d 	bl	8010bc4 <strncmp>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d11a      	bne.n	8009be6 <prvProcessDNSCache+0x82>
			{
				/* Is this function called for a lookup or to add/update an IP address? */
				if( xLookUp != pdFALSE )
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <prvProcessDNSCache+0x68>
				{
					*pulIP = xDNSCache[ x ].ulIPAddress;
 8009bb6:	492a      	ldr	r1, [pc, #168]	; (8009c60 <prvProcessDNSCache+0xfc>)
 8009bb8:	697a      	ldr	r2, [r7, #20]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	4413      	add	r3, r2
 8009bc0:	00db      	lsls	r3, r3, #3
 8009bc2:	440b      	add	r3, r1
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	601a      	str	r2, [r3, #0]
 8009bca:	e009      	b.n	8009be0 <prvProcessDNSCache+0x7c>
				}
				else
				{
					xDNSCache[ x ].ulIPAddress = *pulIP;
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	6819      	ldr	r1, [r3, #0]
 8009bd0:	4823      	ldr	r0, [pc, #140]	; (8009c60 <prvProcessDNSCache+0xfc>)
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	005b      	lsls	r3, r3, #1
 8009bd8:	4413      	add	r3, r2
 8009bda:	00db      	lsls	r3, r3, #3
 8009bdc:	4403      	add	r3, r0
 8009bde:	6019      	str	r1, [r3, #0]
				}

				xFound = pdTRUE;
 8009be0:	2301      	movs	r3, #1
 8009be2:	613b      	str	r3, [r7, #16]
				break;
 8009be4:	e007      	b.n	8009bf6 <prvProcessDNSCache+0x92>
		for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	3301      	adds	r3, #1
 8009bea:	617b      	str	r3, [r7, #20]
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	ddc3      	ble.n	8009b7a <prvProcessDNSCache+0x16>
 8009bf2:	e000      	b.n	8009bf6 <prvProcessDNSCache+0x92>
				break;
 8009bf4:	bf00      	nop
			}
		}

		if( xFound == pdFALSE )
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d12b      	bne.n	8009c54 <prvProcessDNSCache+0xf0>
		{
			if( xLookUp != pdFALSE )
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d003      	beq.n	8009c0a <prvProcessDNSCache+0xa6>
			{
				*pulIP = 0;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2200      	movs	r2, #0
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	e024      	b.n	8009c54 <prvProcessDNSCache+0xf0>
			}
			else
			{
				/* Called to add or update an item */
				strncpy( xDNSCache[ xFreeEntry ].pcName, pcName, sizeof( xDNSCache[ xFreeEntry ].pcName ) );
 8009c0a:	4b16      	ldr	r3, [pc, #88]	; (8009c64 <prvProcessDNSCache+0x100>)
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	4413      	add	r3, r2
 8009c14:	00db      	lsls	r3, r3, #3
 8009c16:	4a12      	ldr	r2, [pc, #72]	; (8009c60 <prvProcessDNSCache+0xfc>)
 8009c18:	4413      	add	r3, r2
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	2210      	movs	r2, #16
 8009c1e:	68f9      	ldr	r1, [r7, #12]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f006 ffe1 	bl	8010be8 <strncpy>
				xDNSCache[ xFreeEntry ].ulIPAddress = *pulIP;
 8009c26:	4b0f      	ldr	r3, [pc, #60]	; (8009c64 <prvProcessDNSCache+0x100>)
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	6819      	ldr	r1, [r3, #0]
 8009c2e:	480c      	ldr	r0, [pc, #48]	; (8009c60 <prvProcessDNSCache+0xfc>)
 8009c30:	4613      	mov	r3, r2
 8009c32:	005b      	lsls	r3, r3, #1
 8009c34:	4413      	add	r3, r2
 8009c36:	00db      	lsls	r3, r3, #3
 8009c38:	4403      	add	r3, r0
 8009c3a:	6019      	str	r1, [r3, #0]

				xFreeEntry++;
 8009c3c:	4b09      	ldr	r3, [pc, #36]	; (8009c64 <prvProcessDNSCache+0x100>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3301      	adds	r3, #1
 8009c42:	4a08      	ldr	r2, [pc, #32]	; (8009c64 <prvProcessDNSCache+0x100>)
 8009c44:	6013      	str	r3, [r2, #0]
				if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8009c46:	4b07      	ldr	r3, [pc, #28]	; (8009c64 <prvProcessDNSCache+0x100>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b04      	cmp	r3, #4
 8009c4c:	d102      	bne.n	8009c54 <prvProcessDNSCache+0xf0>
				{
					xFreeEntry = 0;
 8009c4e:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <prvProcessDNSCache+0x100>)
 8009c50:	2200      	movs	r2, #0
 8009c52:	601a      	str	r2, [r3, #0]
				}
			}
		}

		if( ( xLookUp == 0 ) || ( *pulIP != 0 ) )
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
		{
			FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", xLookUp ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
		}
	}
 8009c58:	bf00      	nop
 8009c5a:	3718      	adds	r7, #24
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	200046a8 	.word	0x200046a8
 8009c64:	2000471c 	.word	0x2000471c

08009c68 <prvIPTask>:
#endif

/*-----------------------------------------------------------*/

static void prvIPTask( void *pvParameters )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b088      	sub	sp, #32
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]

	/* Generate a dummy message to say that the network connection has gone
	down.  This will cause this task to initialise the network interface.  After
	this it is the responsibility of the network interface hardware driver to
	send this message if a previously connected network is disconnected. */
	FreeRTOS_NetworkDown();
 8009c70:	f000 f9ec 	bl	800a04c <FreeRTOS_NetworkDown>

	#if( ipconfigUSE_TCP == 1 )
	{
		/* Initialise the TCP timer. */
		prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8009c74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009c78:	4850      	ldr	r0, [pc, #320]	; (8009dbc <prvIPTask+0x154>)
 8009c7a:	f000 f9a7 	bl	8009fcc <prvIPTimerReload>
	}
	#endif

	/* Initialisation is complete and events can now be processed. */
	xIPTaskInitialised = pdTRUE;
 8009c7e:	4b50      	ldr	r3, [pc, #320]	; (8009dc0 <prvIPTask+0x158>)
 8009c80:	2201      	movs	r2, #1
 8009c82:	601a      	str	r2, [r3, #0]
	{
		ipconfigWATCHDOG_TIMER();

		/* Check the ARP, DHCP and TCP timers to see if there is any periodic
		or timeout processing to perform. */
		prvCheckNetworkTimers();
 8009c84:	f000 f910 	bl	8009ea8 <prvCheckNetworkTimers>

		/* Calculate the acceptable maximum sleep time. */
		xNextIPSleep = prvCalculateSleepTime();
 8009c88:	f000 f8c4 	bl	8009e14 <prvCalculateSleepTime>
 8009c8c:	61f8      	str	r0, [r7, #28]

		/* Wait until there is something to do.  The event is initialised to "no
		event" in case the following call exits due to a time out rather than a
		message being received. */
		xReceivedEvent.eEventType = eNoEvent;
 8009c8e:	23ff      	movs	r3, #255	; 0xff
 8009c90:	743b      	strb	r3, [r7, #16]
		xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep );
 8009c92:	4b4c      	ldr	r3, [pc, #304]	; (8009dc4 <prvIPTask+0x15c>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f107 0110 	add.w	r1, r7, #16
 8009c9a:	69fa      	ldr	r2, [r7, #28]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fc feb1 	bl	8006a04 <xQueueReceive>
		}
		#endif /* ipconfigCHECK_IP_QUEUE_SPACE */

		iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

		switch( xReceivedEvent.eEventType )
 8009ca2:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8009ca6:	2b0b      	cmp	r3, #11
 8009ca8:	d87d      	bhi.n	8009da6 <prvIPTask+0x13e>
 8009caa:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <prvIPTask+0x48>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009ce1 	.word	0x08009ce1
 8009cb4:	08009ced 	.word	0x08009ced
 8009cb8:	08009cf7 	.word	0x08009cf7
 8009cbc:	08009d51 	.word	0x08009d51
 8009cc0:	08009d5b 	.word	0x08009d5b
 8009cc4:	08009d77 	.word	0x08009d77
 8009cc8:	08009d83 	.word	0x08009d83
 8009ccc:	08009da7 	.word	0x08009da7
 8009cd0:	08009cfd 	.word	0x08009cfd
 8009cd4:	08009d47 	.word	0x08009d47
 8009cd8:	08009d63 	.word	0x08009d63
 8009cdc:	08009d6d 	.word	0x08009d6d
		{
			case eNetworkDownEvent :
				/* Attempt to establish a connection. */
				xNetworkUp = pdFALSE;
 8009ce0:	4b39      	ldr	r3, [pc, #228]	; (8009dc8 <prvIPTask+0x160>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
				prvProcessNetworkDownEvent();
 8009ce6:	f000 fbe3 	bl	800a4b0 <prvProcessNetworkDownEvent>
				break;
 8009cea:	e05f      	b.n	8009dac <prvIPTask+0x144>

			case eNetworkRxEvent:
				/* The network hardware driver has received a new packet.  A
				pointer to the received buffer is located in the pvData member
				of the received event structure. */
				prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 f884 	bl	8009dfc <prvHandleEthernetPacket>
				break;
 8009cf4:	e05a      	b.n	8009dac <prvIPTask+0x144>

			case eARPTimerEvent :
				/* The ARP timer has expired, process the ARP cache. */
				vARPAgeCache();
 8009cf6:	f7fe fdff 	bl	80088f8 <vARPAgeCache>
				break;
 8009cfa:	e057      	b.n	8009dac <prvIPTask+0x144>
				/* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
				to a port. The port number is communicated in the socket field
				usLocalPort. vSocketBind() will actually bind the socket and the
				API will unblock as soon as the eSOCKET_BOUND event is
				triggered. */
				pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	61bb      	str	r3, [r7, #24]
				xAddress.sin_addr = 0u;	/* For the moment. */
 8009d00:	2300      	movs	r3, #0
 8009d02:	60fb      	str	r3, [r7, #12]
				xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d08:	021b      	lsls	r3, r3, #8
 8009d0a:	b21a      	sxth	r2, r3
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d10:	0a1b      	lsrs	r3, r3, #8
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	b21b      	sxth	r3, r3
 8009d16:	4313      	orrs	r3, r2
 8009d18:	b21b      	sxth	r3, r3
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	817b      	strh	r3, [r7, #10]
				pxSocket->usLocalPort = 0u;
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	2200      	movs	r2, #0
 8009d22:	849a      	strh	r2, [r3, #36]	; 0x24
				vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8009d24:	f107 0108 	add.w	r1, r7, #8
 8009d28:	2300      	movs	r3, #0
 8009d2a:	2208      	movs	r2, #8
 8009d2c:	69b8      	ldr	r0, [r7, #24]
 8009d2e:	f001 fa39 	bl	800b1a4 <vSocketBind>

				/* Before 'eSocketBindEvent' was sent it was tested that
				( xEventGroup != NULL ) so it can be used now to wake up the
				user. */
				pxSocket->xEventBits |= eSOCKET_BOUND;
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f043 0210 	orr.w	r2, r3, #16
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	601a      	str	r2, [r3, #0]
				vSocketWakeUpUser( pxSocket );
 8009d3e:	69b8      	ldr	r0, [r7, #24]
 8009d40:	f001 fdbc 	bl	800b8bc <vSocketWakeUpUser>
				break;
 8009d44:	e032      	b.n	8009dac <prvIPTask+0x144>
			case eSocketCloseEvent :
				/* The user API FreeRTOS_closesocket() has sent a message to the
				IP-task to actually close a socket. This is handled in
				vSocketClose().  As the socket gets closed, there is no way to
				report back to the API, so the API won't wait for the result */
				vSocketClose( ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData ) );
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f001 fae1 	bl	800b310 <vSocketClose>
				break;
 8009d4e:	e02d      	b.n	8009dac <prvIPTask+0x144>

			case eStackTxEvent :
				/* The network stack has generated a packet to send.  A
				pointer to the generated buffer is located in the pvData
				member of the received event structure. */
				vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) ( xReceivedEvent.pvData ) );
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f005 fcb2 	bl	800f6bc <vProcessGeneratedUDPPacket>
				break;
 8009d58:	e028      	b.n	8009dac <prvIPTask+0x144>

			case eDHCPEvent:
				/* The DHCP state machine needs processing. */
				#if( ipconfigUSE_DHCP == 1 )
				{
					vDHCPProcess( pdFALSE );
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	f7fe feda 	bl	8008b14 <vDHCPProcess>
				}
				#endif /* ipconfigUSE_DHCP */
				break;
 8009d60:	e024      	b.n	8009dac <prvIPTask+0x144>
				/* FreeRTOS_select() has got unblocked by a socket event,
				vSocketSelect() will check which sockets actually have an event
				and update the socket field xSocketBits. */
				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
				{
					vSocketSelect( ( SocketSelect_t * ) ( xReceivedEvent.pvData ) );
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	4618      	mov	r0, r3
 8009d66:	f001 ffc5 	bl	800bcf4 <vSocketSelect>
				}
				#endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
				break;
 8009d6a:	e01f      	b.n	8009dac <prvIPTask+0x144>
			case eSocketSignalEvent :
				#if( ipconfigSUPPORT_SIGNALS != 0 )
				{
					/* Some task wants to signal the user of this socket in
					order to interrupt a call to recv() or a call to select(). */
					FreeRTOS_SignalSocket( ( Socket_t ) xReceivedEvent.pvData );
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f002 f8cc 	bl	800bf0c <FreeRTOS_SignalSocket>
				}
				#endif /* ipconfigSUPPORT_SIGNALS */
				break;
 8009d74:	e01a      	b.n	8009dac <prvIPTask+0x144>
			case eTCPTimerEvent :
				#if( ipconfigUSE_TCP == 1 )
				{
					/* Simply mark the TCP timer as expired so it gets processed
					the next time prvCheckNetworkTimers() is called. */
					xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8009d76:	4a11      	ldr	r2, [pc, #68]	; (8009dbc <prvIPTask+0x154>)
 8009d78:	7813      	ldrb	r3, [r2, #0]
 8009d7a:	f043 0302 	orr.w	r3, r3, #2
 8009d7e:	7013      	strb	r3, [r2, #0]
				}
				#endif /* ipconfigUSE_TCP */
				break;
 8009d80:	e014      	b.n	8009dac <prvIPTask+0x144>
				/* The API FreeRTOS_accept() was called, the IP-task will now
				check if the listening socket (communicated in pvData) actually
				received a new connection. */
				#if( ipconfigUSE_TCP == 1 )
				{
					pxSocket = ( FreeRTOS_Socket_t * ) ( xReceivedEvent.pvData );
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	61bb      	str	r3, [r7, #24]

					if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8009d86:	69b8      	ldr	r0, [r7, #24]
 8009d88:	f004 fc96 	bl	800e6b8 <xTCPCheckNewClient>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00b      	beq.n	8009daa <prvIPTask+0x142>
					{
						pxSocket->xEventBits |= eSOCKET_ACCEPT;
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f043 0204 	orr.w	r2, r3, #4
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	601a      	str	r2, [r3, #0]
						vSocketWakeUpUser( pxSocket );
 8009d9e:	69b8      	ldr	r0, [r7, #24]
 8009da0:	f001 fd8c 	bl	800b8bc <vSocketWakeUpUser>
					}
				}
				#endif /* ipconfigUSE_TCP */
				break;
 8009da4:	e001      	b.n	8009daa <prvIPTask+0x142>
				#endif /* ipconfigUSE_TCP */
				break;

			default :
				/* Should not get here. */
				break;
 8009da6:	bf00      	nop
 8009da8:	e000      	b.n	8009dac <prvIPTask+0x144>
				break;
 8009daa:	bf00      	nop
		}

		if( xNetworkDownEventPending != pdFALSE )
 8009dac:	4b07      	ldr	r3, [pc, #28]	; (8009dcc <prvIPTask+0x164>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f43f af67 	beq.w	8009c84 <prvIPTask+0x1c>
		{
			/* A network down event could not be posted to the network event
			queue because the queue was full.  Try posting again. */
			FreeRTOS_NetworkDown();
 8009db6:	f000 f949 	bl	800a04c <FreeRTOS_NetworkDown>
		prvCheckNetworkTimers();
 8009dba:	e763      	b.n	8009c84 <prvIPTask+0x1c>
 8009dbc:	20004788 	.word	0x20004788
 8009dc0:	200047b0 	.word	0x200047b0
 8009dc4:	20004720 	.word	0x20004720
 8009dc8:	2000475c 	.word	0x2000475c
 8009dcc:	20004750 	.word	0x20004750

08009dd0 <xIsCallingFromIPTask>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xIsCallingFromIPTask( void )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
BaseType_t xReturn;

	if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 8009dd6:	f7fe f831 	bl	8007e3c <xTaskGetCurrentTaskHandle>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	4b06      	ldr	r3, [pc, #24]	; (8009df8 <xIsCallingFromIPTask+0x28>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d102      	bne.n	8009dea <xIsCallingFromIPTask+0x1a>
	{
		xReturn = pdTRUE;
 8009de4:	2301      	movs	r3, #1
 8009de6:	607b      	str	r3, [r7, #4]
 8009de8:	e001      	b.n	8009dee <xIsCallingFromIPTask+0x1e>
	}
	else
	{
		xReturn = pdFALSE;
 8009dea:	2300      	movs	r3, #0
 8009dec:	607b      	str	r3, [r7, #4]
	}

	return xReturn;
 8009dee:	687b      	ldr	r3, [r7, #4]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	20004754 	.word	0x20004754

08009dfc <prvHandleEthernetPacket>:
/*-----------------------------------------------------------*/

static void prvHandleEthernetPacket( NetworkBufferDescriptor_t *pxBuffer )
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
	#if( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
	{
		/* When ipconfigUSE_LINKED_RX_MESSAGES is not set to 0 then only one
		buffer will be sent at a time.  This is the default way for +TCP to pass
		messages from the MAC to the TCP/IP stack. */
		prvProcessEthernetPacket( pxBuffer );
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fb93 	bl	800a530 <prvProcessEthernetPacket>

		/* While there is another packet in the chain. */
		} while( pxBuffer != NULL );
	}
	#endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8009e0a:	bf00      	nop
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
	...

08009e14 <prvCalculateSleepTime>:
/*-----------------------------------------------------------*/

static TickType_t prvCalculateSleepTime( void )
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
TickType_t xMaximumSleepTime;

	/* Start with the maximum sleep time, then check this against the remaining
	time in any other timers that are active. */
	xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 8009e1a:	f242 7310 	movw	r3, #10000	; 0x2710
 8009e1e:	607b      	str	r3, [r7, #4]

	if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 8009e20:	4b1d      	ldr	r3, [pc, #116]	; (8009e98 <prvCalculateSleepTime+0x84>)
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	f003 0301 	and.w	r3, r3, #1
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d007      	beq.n	8009e3e <prvCalculateSleepTime+0x2a>
	{
		if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 8009e2e:	4b1a      	ldr	r3, [pc, #104]	; (8009e98 <prvCalculateSleepTime+0x84>)
 8009e30:	68da      	ldr	r2, [r3, #12]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d202      	bcs.n	8009e3e <prvCalculateSleepTime+0x2a>
		{
			xMaximumSleepTime = xARPTimer.ulReloadTime;
 8009e38:	4b17      	ldr	r3, [pc, #92]	; (8009e98 <prvCalculateSleepTime+0x84>)
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	607b      	str	r3, [r7, #4]
		}
	}

	#if( ipconfigUSE_DHCP == 1 )
	{
		if( xDHCPTimer.bActive != pdFALSE_UNSIGNED )
 8009e3e:	4b17      	ldr	r3, [pc, #92]	; (8009e9c <prvCalculateSleepTime+0x88>)
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d007      	beq.n	8009e5c <prvCalculateSleepTime+0x48>
		{
			if( xDHCPTimer.ulRemainingTime < xMaximumSleepTime )
 8009e4c:	4b13      	ldr	r3, [pc, #76]	; (8009e9c <prvCalculateSleepTime+0x88>)
 8009e4e:	68da      	ldr	r2, [r3, #12]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d202      	bcs.n	8009e5c <prvCalculateSleepTime+0x48>
			{
				xMaximumSleepTime = xDHCPTimer.ulRemainingTime;
 8009e56:	4b11      	ldr	r3, [pc, #68]	; (8009e9c <prvCalculateSleepTime+0x88>)
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	607b      	str	r3, [r7, #4]
	}
	#endif /* ipconfigUSE_DHCP */

	#if( ipconfigUSE_TCP == 1 )
	{
		if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 8009e5c:	4b10      	ldr	r3, [pc, #64]	; (8009ea0 <prvCalculateSleepTime+0x8c>)
 8009e5e:	68da      	ldr	r2, [r3, #12]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d202      	bcs.n	8009e6c <prvCalculateSleepTime+0x58>
		{
			xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 8009e66:	4b0e      	ldr	r3, [pc, #56]	; (8009ea0 <prvCalculateSleepTime+0x8c>)
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	607b      	str	r3, [r7, #4]
	}
	#endif

	#if( ipconfigDNS_USE_CALLBACKS != 0 )
	{
		if( xDNSTimer.bActive != pdFALSE )
 8009e6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ea4 <prvCalculateSleepTime+0x90>)
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d007      	beq.n	8009e8a <prvCalculateSleepTime+0x76>
		{
			if( xDNSTimer.ulRemainingTime < xMaximumSleepTime )
 8009e7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ea4 <prvCalculateSleepTime+0x90>)
 8009e7c:	68da      	ldr	r2, [r3, #12]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d202      	bcs.n	8009e8a <prvCalculateSleepTime+0x76>
			{
				xMaximumSleepTime = xDNSTimer.ulRemainingTime;
 8009e84:	4b07      	ldr	r3, [pc, #28]	; (8009ea4 <prvCalculateSleepTime+0x90>)
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	607b      	str	r3, [r7, #4]
			}
		}
	}
	#endif

	return xMaximumSleepTime;
 8009e8a:	687b      	ldr	r3, [r7, #4]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr
 8009e98:	20004760 	.word	0x20004760
 8009e9c:	20004774 	.word	0x20004774
 8009ea0:	20004788 	.word	0x20004788
 8009ea4:	2000479c 	.word	0x2000479c

08009ea8 <prvCheckNetworkTimers>:
/*-----------------------------------------------------------*/

static void prvCheckNetworkTimers( void )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
	/* Is it time for ARP processing? */
	if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 8009eae:	482d      	ldr	r0, [pc, #180]	; (8009f64 <prvCheckNetworkTimers+0xbc>)
 8009eb0:	f000 f89c 	bl	8009fec <prvIPTimerCheck>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d002      	beq.n	8009ec0 <prvCheckNetworkTimers+0x18>
	{
		xSendEventToIPTask( eARPTimerEvent );
 8009eba:	2002      	movs	r0, #2
 8009ebc:	f000 fa48 	bl	800a350 <xSendEventToIPTask>
	}

	#if( ipconfigUSE_DHCP == 1 )
	{
		/* Is it time for DHCP processing? */
		if( prvIPTimerCheck( &xDHCPTimer ) != pdFALSE )
 8009ec0:	4829      	ldr	r0, [pc, #164]	; (8009f68 <prvCheckNetworkTimers+0xc0>)
 8009ec2:	f000 f893 	bl	8009fec <prvIPTimerCheck>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d002      	beq.n	8009ed2 <prvCheckNetworkTimers+0x2a>
		{
			xSendEventToIPTask( eDHCPEvent );
 8009ecc:	2004      	movs	r0, #4
 8009ece:	f000 fa3f 	bl	800a350 <xSendEventToIPTask>
	#if( ipconfigDNS_USE_CALLBACKS != 0 )
	{
	extern void vDNSCheckCallBack( void *pvSearchID );

		/* Is it time for DNS processing? */
		if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 8009ed2:	4826      	ldr	r0, [pc, #152]	; (8009f6c <prvCheckNetworkTimers+0xc4>)
 8009ed4:	f000 f88a 	bl	8009fec <prvIPTimerCheck>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d002      	beq.n	8009ee4 <prvCheckNetworkTimers+0x3c>
		{
			vDNSCheckCallBack( NULL );
 8009ede:	2000      	movs	r0, #0
 8009ee0:	f7ff fa6c 	bl	80093bc <vDNSCheckCallBack>
	static TickType_t xStart = ( TickType_t ) 0;
	TickType_t xTimeNow, xNextTime;
	BaseType_t xCheckTCPSockets;
	extern uint32_t ulNextInitialSequenceNumber;

		if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0u )
 8009ee4:	4b22      	ldr	r3, [pc, #136]	; (8009f70 <prvCheckNetworkTimers+0xc8>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fc ff6f 	bl	8006dcc <uxQueueMessagesWaiting>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d102      	bne.n	8009efa <prvCheckNetworkTimers+0x52>
		{
			xWillSleep = pdTRUE;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	60fb      	str	r3, [r7, #12]
 8009ef8:	e001      	b.n	8009efe <prvCheckNetworkTimers+0x56>
		}
		else
		{
			xWillSleep = pdFALSE;
 8009efa:	2300      	movs	r3, #0
 8009efc:	60fb      	str	r3, [r7, #12]
		}

		xTimeNow = xTaskGetTickCount();
 8009efe:	f7fd fbf5 	bl	80076ec <xTaskGetTickCount>
 8009f02:	6078      	str	r0, [r7, #4]

		if( xStart != ( TickType_t ) 0 )
 8009f04:	4b1b      	ldr	r3, [pc, #108]	; (8009f74 <prvCheckNetworkTimers+0xcc>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d009      	beq.n	8009f20 <prvCheckNetworkTimers+0x78>
		{
			/* It is advised to increment the Initial Sequence Number every 4
			microseconds which makes 250 times per ms.  This will make it harder
			for a third party to 'guess' our sequence number and 'take over'
			a TCP connection */
			ulNextInitialSequenceNumber += ipINITIAL_SEQUENCE_NUMBER_FACTOR * ( ( xTimeNow - xStart ) * portTICK_PERIOD_MS );
 8009f0c:	4b19      	ldr	r3, [pc, #100]	; (8009f74 <prvCheckNetworkTimers+0xcc>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	021a      	lsls	r2, r3, #8
 8009f16:	4b18      	ldr	r3, [pc, #96]	; (8009f78 <prvCheckNetworkTimers+0xd0>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	4a16      	ldr	r2, [pc, #88]	; (8009f78 <prvCheckNetworkTimers+0xd0>)
 8009f1e:	6013      	str	r3, [r2, #0]
		}

		xStart = xTimeNow;
 8009f20:	4a14      	ldr	r2, [pc, #80]	; (8009f74 <prvCheckNetworkTimers+0xcc>)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6013      	str	r3, [r2, #0]

		/* Sockets need to be checked if the TCP timer has expired. */
		xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 8009f26:	4815      	ldr	r0, [pc, #84]	; (8009f7c <prvCheckNetworkTimers+0xd4>)
 8009f28:	f000 f860 	bl	8009fec <prvIPTimerCheck>
 8009f2c:	60b8      	str	r0, [r7, #8]

		/* Sockets will also be checked if there are TCP messages but the
		message queue is empty (indicated by xWillSleep being true). */
		if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 8009f2e:	4b14      	ldr	r3, [pc, #80]	; (8009f80 <prvCheckNetworkTimers+0xd8>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d004      	beq.n	8009f40 <prvCheckNetworkTimers+0x98>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d001      	beq.n	8009f40 <prvCheckNetworkTimers+0x98>
		{
			xCheckTCPSockets = pdTRUE;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	60bb      	str	r3, [r7, #8]
		}

		if( xCheckTCPSockets != pdFALSE )
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00a      	beq.n	8009f5c <prvCheckNetworkTimers+0xb4>
		{
			/* Attend to the sockets, returning the period after which the
			check must be repeated. */
			xNextTime = xTCPTimerCheck( xWillSleep );
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f001 fcf4 	bl	800b934 <xTCPTimerCheck>
 8009f4c:	6038      	str	r0, [r7, #0]
			prvIPTimerStart( &xTCPTimer, xNextTime );
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	480a      	ldr	r0, [pc, #40]	; (8009f7c <prvCheckNetworkTimers+0xd4>)
 8009f52:	f000 f817 	bl	8009f84 <prvIPTimerStart>
			xProcessedTCPMessage = 0;
 8009f56:	4b0a      	ldr	r3, [pc, #40]	; (8009f80 <prvCheckNetworkTimers+0xd8>)
 8009f58:	2200      	movs	r2, #0
 8009f5a:	601a      	str	r2, [r3, #0]
		}
	}
	#endif /* ipconfigUSE_TCP == 1 */
}
 8009f5c:	bf00      	nop
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	20004760 	.word	0x20004760
 8009f68:	20004774 	.word	0x20004774
 8009f6c:	2000479c 	.word	0x2000479c
 8009f70:	20004720 	.word	0x20004720
 8009f74:	200047b4 	.word	0x200047b4
 8009f78:	200047c4 	.word	0x200047c4
 8009f7c:	20004788 	.word	0x20004788
 8009f80:	20004758 	.word	0x20004758

08009f84 <prvIPTimerStart>:
/*-----------------------------------------------------------*/

static void prvIPTimerStart( IPTimer_t *pxTimer, TickType_t xTime )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
	vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	3304      	adds	r3, #4
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7fd fdf0 	bl	8007b78 <vTaskSetTimeOutState>
	pxTimer->ulRemainingTime = xTime;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	683a      	ldr	r2, [r7, #0]
 8009f9c:	60da      	str	r2, [r3, #12]

	if( xTime == ( TickType_t ) 0 )
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d105      	bne.n	8009fb0 <prvIPTimerStart+0x2c>
	{
		pxTimer->bExpired = pdTRUE_UNSIGNED;
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	7813      	ldrb	r3, [r2, #0]
 8009fa8:	f043 0302 	orr.w	r3, r3, #2
 8009fac:	7013      	strb	r3, [r2, #0]
 8009fae:	e004      	b.n	8009fba <prvIPTimerStart+0x36>
	}
	else
	{
		pxTimer->bExpired = pdFALSE_UNSIGNED;
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	7813      	ldrb	r3, [r2, #0]
 8009fb4:	f36f 0341 	bfc	r3, #1, #1
 8009fb8:	7013      	strb	r3, [r2, #0]
	}

	pxTimer->bActive = pdTRUE_UNSIGNED;
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	7813      	ldrb	r3, [r2, #0]
 8009fbe:	f043 0301 	orr.w	r3, r3, #1
 8009fc2:	7013      	strb	r3, [r2, #0]
}
 8009fc4:	bf00      	nop
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <prvIPTimerReload>:
/*-----------------------------------------------------------*/

static void prvIPTimerReload( IPTimer_t *pxTimer, TickType_t xTime )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
	pxTimer->ulReloadTime = xTime;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	683a      	ldr	r2, [r7, #0]
 8009fda:	611a      	str	r2, [r3, #16]
	prvIPTimerStart( pxTimer, xTime );
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7ff ffd0 	bl	8009f84 <prvIPTimerStart>
}
 8009fe4:	bf00      	nop
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <prvIPTimerCheck>:
/*-----------------------------------------------------------*/

static BaseType_t prvIPTimerCheck( IPTimer_t *pxTimer )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	if( pxTimer->bActive == pdFALSE_UNSIGNED )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d102      	bne.n	800a008 <prvIPTimerCheck+0x1c>
	{
		/* The timer is not enabled. */
		xReturn = pdFALSE;
 800a002:	2300      	movs	r3, #0
 800a004:	60fb      	str	r3, [r7, #12]
 800a006:	e01c      	b.n	800a042 <prvIPTimerCheck+0x56>
	}
	else
	{
		/* The timer might have set the bExpired flag already, if not, check the
		value of xTimeOut against ulRemainingTime. */
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	f003 0302 	and.w	r3, r3, #2
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10a      	bne.n	800a02c <prvIPTimerCheck+0x40>
			( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE ) )
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	1d1a      	adds	r2, r3, #4
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	330c      	adds	r3, #12
 800a01e:	4619      	mov	r1, r3
 800a020:	4610      	mov	r0, r2
 800a022:	f7fd fde5 	bl	8007bf0 <xTaskCheckForTimeOut>
 800a026:	4603      	mov	r3, r0
		if( ( pxTimer->bExpired != pdFALSE_UNSIGNED ) ||
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d008      	beq.n	800a03e <prvIPTimerCheck+0x52>
		{
			prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	4619      	mov	r1, r3
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7ff ffa6 	bl	8009f84 <prvIPTimerStart>
			xReturn = pdTRUE;
 800a038:	2301      	movs	r3, #1
 800a03a:	60fb      	str	r3, [r7, #12]
 800a03c:	e001      	b.n	800a042 <prvIPTimerCheck+0x56>
		}
		else
		{
			xReturn = pdFALSE;
 800a03e:	2300      	movs	r3, #0
 800a040:	60fb      	str	r3, [r7, #12]
		}
	}

	return xReturn;
 800a042:	68fb      	ldr	r3, [r7, #12]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <FreeRTOS_NetworkDown>:
/*-----------------------------------------------------------*/

void FreeRTOS_NetworkDown( void )
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
const TickType_t xDontBlock = ( TickType_t ) 0;
 800a052:	2300      	movs	r3, #0
 800a054:	607b      	str	r3, [r7, #4]

	/* Simply send the network task the appropriate event. */
	if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 800a056:	6879      	ldr	r1, [r7, #4]
 800a058:	4808      	ldr	r0, [pc, #32]	; (800a07c <FreeRTOS_NetworkDown+0x30>)
 800a05a:	f000 f98f 	bl	800a37c <xSendEventStructToIPTask>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b01      	cmp	r3, #1
 800a062:	d003      	beq.n	800a06c <FreeRTOS_NetworkDown+0x20>
	{
		/* Could not send the message, so it is still pending. */
		xNetworkDownEventPending = pdTRUE;
 800a064:	4b06      	ldr	r3, [pc, #24]	; (800a080 <FreeRTOS_NetworkDown+0x34>)
 800a066:	2201      	movs	r2, #1
 800a068:	601a      	str	r2, [r3, #0]
		/* Message was sent so it is not pending. */
		xNetworkDownEventPending = pdFALSE;
	}

	iptraceNETWORK_DOWN();
}
 800a06a:	e002      	b.n	800a072 <FreeRTOS_NetworkDown+0x26>
		xNetworkDownEventPending = pdFALSE;
 800a06c:	4b04      	ldr	r3, [pc, #16]	; (800a080 <FreeRTOS_NetworkDown+0x34>)
 800a06e:	2200      	movs	r2, #0
 800a070:	601a      	str	r2, [r3, #0]
}
 800a072:	bf00      	nop
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	08010f50 	.word	0x08010f50
 800a080:	20004750 	.word	0x20004750

0800a084 <FreeRTOS_GetUDPPayloadBuffer>:
	return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void *FreeRTOS_GetUDPPayloadBuffer( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
void *pvReturn;

	/* Cap the block time.  The reason for this is explained where
	ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined (assuming an official
	FreeRTOSIPConfig.h header file is being used). */
	if( xBlockTimeTicks > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	f241 3288 	movw	r2, #5000	; 0x1388
 800a094:	4293      	cmp	r3, r2
 800a096:	d902      	bls.n	800a09e <FreeRTOS_GetUDPPayloadBuffer+0x1a>
	{
		xBlockTimeTicks = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800a098:	f241 3388 	movw	r3, #5000	; 0x1388
 800a09c:	603b      	str	r3, [r7, #0]
	}

	/* Obtain a network buffer with the required amount of storage. */
	pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( UDPPacket_t ) + xRequestedSizeBytes, xBlockTimeTicks );
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	332a      	adds	r3, #42	; 0x2a
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f005 fce1 	bl	800fa6c <pxGetNetworkBufferWithDescriptor>
 800a0aa:	60b8      	str	r0, [r7, #8]

	if( pxNetworkBuffer != NULL )
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d004      	beq.n	800a0bc <FreeRTOS_GetUDPPayloadBuffer+0x38>
	{
		/* Leave space for the UPD header. */
		pvReturn = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	332a      	adds	r3, #42	; 0x2a
 800a0b8:	60fb      	str	r3, [r7, #12]
 800a0ba:	e001      	b.n	800a0c0 <FreeRTOS_GetUDPPayloadBuffer+0x3c>
	}
	else
	{
		pvReturn = NULL;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	60fb      	str	r3, [r7, #12]
	}

	return ( void * ) pvReturn;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <pxDuplicateNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxDuplicateNetworkBufferWithDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer,
	BaseType_t xNewLength )
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b084      	sub	sp, #16
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	6039      	str	r1, [r7, #0]
NetworkBufferDescriptor_t * pxNewBuffer;

	/* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
	The transmit routine wants to have ownership of the network buffer
	descriptor, because it will pass the buffer straight to DMA. */
	pxNewBuffer = pxGetNetworkBufferWithDescriptor( ( size_t ) xNewLength, ( TickType_t ) 0 );
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f005 fcc7 	bl	800fa6c <pxGetNetworkBufferWithDescriptor>
 800a0de:	60f8      	str	r0, [r7, #12]

	if( pxNewBuffer != NULL )
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d014      	beq.n	800a110 <pxDuplicateNetworkBufferWithDescriptor+0x46>
	{
		pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	695a      	ldr	r2, [r3, #20]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	615a      	str	r2, [r3, #20]
		pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	8c1a      	ldrh	r2, [r3, #32]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	841a      	strh	r2, [r3, #32]
		pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	845a      	strh	r2, [r3, #34]	; 0x22
		memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6998      	ldr	r0, [r3, #24]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6999      	ldr	r1, [r3, #24]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	69db      	ldr	r3, [r3, #28]
 800a10a:	461a      	mov	r2, r3
 800a10c:	f006 fcd5 	bl	8010aba <memcpy>
	}

	return pxNewBuffer;
 800a110:	68fb      	ldr	r3, [r7, #12]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <pxUDPPayloadBuffer_to_NetworkBuffer>:

#endif /* ipconfigZERO_COPY_TX_DRIVER != 0 */
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxUDPPayloadBuffer_to_NetworkBuffer( void *pvBuffer )
{
 800a11a:	b480      	push	{r7}
 800a11c:	b085      	sub	sp, #20
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
uint8_t *pucBuffer;
NetworkBufferDescriptor_t *pxResult;

	if( pvBuffer == NULL )
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d102      	bne.n	800a12e <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
	{
		pxResult = NULL;
 800a128:	2300      	movs	r3, #0
 800a12a:	60fb      	str	r3, [r7, #12]
 800a12c:	e00f      	b.n	800a14e <pxUDPPayloadBuffer_to_NetworkBuffer+0x34>
	}
	else
	{
		/* Obtain the network buffer from the zero copy pointer. */
		pucBuffer = ( uint8_t * ) pvBuffer;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	60bb      	str	r3, [r7, #8]

		/* The input here is a pointer to a payload buffer.  Subtract
		the total size of a UDP/IP header plus the size of the header in
		the network buffer, usually 8 + 2 bytes. */
		pucBuffer -= ( sizeof( UDPPacket_t ) + ipBUFFER_PADDING );
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	3b34      	subs	r3, #52	; 0x34
 800a136:	60bb      	str	r3, [r7, #8]

		/* Here a pointer was placed to the network descriptor,
		As a pointer is dereferenced, make sure it is well aligned */
		if( ( ( ( uint32_t ) pucBuffer ) & ( sizeof( pucBuffer ) - 1 ) ) == 0 )
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	f003 0303 	and.w	r3, r3, #3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d103      	bne.n	800a14a <pxUDPPayloadBuffer_to_NetworkBuffer+0x30>
		{
			/* The following statement may trigger a:
			warning: cast increases required alignment of target type [-Wcast-align].
			It has been confirmed though that the alignment is suitable. */
			pxResult = * ( ( NetworkBufferDescriptor_t ** ) pucBuffer );
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	e001      	b.n	800a14e <pxUDPPayloadBuffer_to_NetworkBuffer+0x34>
		}
		else
		{
			pxResult = NULL;
 800a14a:	2300      	movs	r3, #0
 800a14c:	60fb      	str	r3, [r7, #12]
		}
	}

	return pxResult;
 800a14e:	68fb      	ldr	r3, [r7, #12]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3714      	adds	r7, #20
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <FreeRTOS_ReleaseUDPPayloadBuffer>:
/*-----------------------------------------------------------*/

void FreeRTOS_ReleaseUDPPayloadBuffer( void *pvBuffer )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
	vReleaseNetworkBufferAndDescriptor( pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer ) );
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7ff ffd8 	bl	800a11a <pxUDPPayloadBuffer_to_NetworkBuffer>
 800a16a:	4603      	mov	r3, r0
 800a16c:	4618      	mov	r0, r3
 800a16e:	f005 fcf5 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
}
 800a172:	bf00      	nop
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
	...

0800a17c <FreeRTOS_IPInit>:
/*_RB_ Should we add an error or assert if the task priorities are set such that the servers won't function as expected? */
/*_HT_ There was a bug in FreeRTOS_TCP_IP.c that only occurred when the applications' priority was too high.
 As that bug has been repaired, there is not an urgent reason to warn.
 It is better though to use the advised priority scheme. */
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ], const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 800a17c:	b5b0      	push	{r4, r5, r7, lr}
 800a17e:	b08c      	sub	sp, #48	; 0x30
 800a180:	af02      	add	r7, sp, #8
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
 800a188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFALSE;
 800a18a:	2300      	movs	r3, #0
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24

	/* This function should only be called once. */
	configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800a18e:	f000 fc2b 	bl	800a9e8 <xIPIsNetworkTaskReady>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d009      	beq.n	800a1ac <FreeRTOS_IPInit+0x30>
	__asm volatile
 800a198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	623b      	str	r3, [r7, #32]
 800a1aa:	e7fe      	b.n	800a1aa <FreeRTOS_IPInit+0x2e>
	configASSERT( xNetworkEventQueue == NULL );
 800a1ac:	4b60      	ldr	r3, [pc, #384]	; (800a330 <FreeRTOS_IPInit+0x1b4>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d009      	beq.n	800a1c8 <FreeRTOS_IPInit+0x4c>
 800a1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	61fb      	str	r3, [r7, #28]
 800a1c6:	e7fe      	b.n	800a1c6 <FreeRTOS_IPInit+0x4a>
	configASSERT( xIPTaskHandle == NULL );
 800a1c8:	4b5a      	ldr	r3, [pc, #360]	; (800a334 <FreeRTOS_IPInit+0x1b8>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d009      	beq.n	800a1e4 <FreeRTOS_IPInit+0x68>
 800a1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	61bb      	str	r3, [r7, #24]
 800a1e2:	e7fe      	b.n	800a1e2 <FreeRTOS_IPInit+0x66>
	configASSERT( sizeof( IPHeader_t ) == ipEXPECTED_IPHeader_t_SIZE );
	configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
	configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );

	/* Attempt to create the queue used to communicate with the IP task. */
	xNetworkEventQueue = xQueueCreate( ( UBaseType_t ) ipconfigEVENT_QUEUE_LENGTH, ( UBaseType_t ) sizeof( IPStackEvent_t ) );
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2108      	movs	r1, #8
 800a1e8:	201e      	movs	r0, #30
 800a1ea:	f7fc fa87 	bl	80066fc <xQueueGenericCreate>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	4b4f      	ldr	r3, [pc, #316]	; (800a330 <FreeRTOS_IPInit+0x1b4>)
 800a1f2:	601a      	str	r2, [r3, #0]
	configASSERT( xNetworkEventQueue );
 800a1f4:	4b4e      	ldr	r3, [pc, #312]	; (800a330 <FreeRTOS_IPInit+0x1b4>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d109      	bne.n	800a210 <FreeRTOS_IPInit+0x94>
 800a1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a200:	f383 8811 	msr	BASEPRI, r3
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	617b      	str	r3, [r7, #20]
 800a20e:	e7fe      	b.n	800a20e <FreeRTOS_IPInit+0x92>

	if( xNetworkEventQueue != NULL )
 800a210:	4b47      	ldr	r3, [pc, #284]	; (800a330 <FreeRTOS_IPInit+0x1b4>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	f000 8086 	beq.w	800a326 <FreeRTOS_IPInit+0x1aa>
		#if ( configQUEUE_REGISTRY_SIZE > 0 )
		{
			/* A queue registry is normally used to assist a kernel aware
			debugger.  If one is in use then it will be helpful for the debugger
			to show information about the network event queue. */
			vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 800a21a:	4b45      	ldr	r3, [pc, #276]	; (800a330 <FreeRTOS_IPInit+0x1b4>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4946      	ldr	r1, [pc, #280]	; (800a338 <FreeRTOS_IPInit+0x1bc>)
 800a220:	4618      	mov	r0, r3
 800a222:	f7fc ff35 	bl	8007090 <vQueueAddToRegistry>
		}
		#endif /* configQUEUE_REGISTRY_SIZE */

		if( xNetworkBuffersInitialise() == pdPASS )
 800a226:	f005 fb93 	bl	800f950 <xNetworkBuffersInitialise>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d172      	bne.n	800a316 <FreeRTOS_IPInit+0x19a>
		{
			/* Store the local IP and MAC address. */
			xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	3303      	adds	r3, #3
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	061a      	lsls	r2, r3, #24
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	3302      	adds	r3, #2
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	041b      	lsls	r3, r3, #16
 800a240:	431a      	orrs	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	3301      	adds	r3, #1
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	021b      	lsls	r3, r3, #8
 800a24a:	4313      	orrs	r3, r2
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	7812      	ldrb	r2, [r2, #0]
 800a250:	4313      	orrs	r3, r2
 800a252:	4a3a      	ldr	r2, [pc, #232]	; (800a33c <FreeRTOS_IPInit+0x1c0>)
 800a254:	6013      	str	r3, [r2, #0]
			xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	3303      	adds	r3, #3
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	061a      	lsls	r2, r3, #24
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	3302      	adds	r3, #2
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	041b      	lsls	r3, r3, #16
 800a266:	431a      	orrs	r2, r3
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	3301      	adds	r3, #1
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	021b      	lsls	r3, r3, #8
 800a270:	4313      	orrs	r3, r2
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	7812      	ldrb	r2, [r2, #0]
 800a276:	4313      	orrs	r3, r2
 800a278:	4a30      	ldr	r2, [pc, #192]	; (800a33c <FreeRTOS_IPInit+0x1c0>)
 800a27a:	6053      	str	r3, [r2, #4]
			xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	3303      	adds	r3, #3
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	061a      	lsls	r2, r3, #24
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3302      	adds	r3, #2
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	041b      	lsls	r3, r3, #16
 800a28c:	431a      	orrs	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	3301      	adds	r3, #1
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	021b      	lsls	r3, r3, #8
 800a296:	4313      	orrs	r3, r2
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	7812      	ldrb	r2, [r2, #0]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	4a27      	ldr	r2, [pc, #156]	; (800a33c <FreeRTOS_IPInit+0x1c0>)
 800a2a0:	6093      	str	r3, [r2, #8]
			xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	3303      	adds	r3, #3
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	061a      	lsls	r2, r3, #24
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	3302      	adds	r3, #2
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	041b      	lsls	r3, r3, #16
 800a2b2:	431a      	orrs	r2, r3
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	021b      	lsls	r3, r3, #8
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	7812      	ldrb	r2, [r2, #0]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	4a1d      	ldr	r2, [pc, #116]	; (800a33c <FreeRTOS_IPInit+0x1c0>)
 800a2c6:	60d3      	str	r3, [r2, #12]
			xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) |  ~xNetworkAddressing.ulNetMask;
 800a2c8:	4b1c      	ldr	r3, [pc, #112]	; (800a33c <FreeRTOS_IPInit+0x1c0>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	4b1b      	ldr	r3, [pc, #108]	; (800a33c <FreeRTOS_IPInit+0x1c0>)
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	43db      	mvns	r3, r3
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	4a19      	ldr	r2, [pc, #100]	; (800a33c <FreeRTOS_IPInit+0x1c0>)
 800a2d6:	6113      	str	r3, [r2, #16]

			memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 800a2d8:	4a19      	ldr	r2, [pc, #100]	; (800a340 <FreeRTOS_IPInit+0x1c4>)
 800a2da:	4b18      	ldr	r3, [pc, #96]	; (800a33c <FreeRTOS_IPInit+0x1c0>)
 800a2dc:	4614      	mov	r4, r2
 800a2de:	461d      	mov	r5, r3
 800a2e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	6023      	str	r3, [r4, #0]

			#if ipconfigUSE_DHCP == 1
			{
				/* The IP address is not set until DHCP completes. */
				*ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
 800a2e8:	4b16      	ldr	r3, [pc, #88]	; (800a344 <FreeRTOS_IPInit+0x1c8>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	615a      	str	r2, [r3, #20]
			}
			#endif /* ipconfigUSE_DHCP == 1 */

			/* The MAC address is stored in the start of the default packet
			header fragment, which is used when sending UDP packets. */
			memcpy( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800a2ee:	2206      	movs	r2, #6
 800a2f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2f2:	4814      	ldr	r0, [pc, #80]	; (800a344 <FreeRTOS_IPInit+0x1c8>)
 800a2f4:	f006 fbe1 	bl	8010aba <memcpy>

			/* Prepare the sockets interface. */
			vNetworkSocketsInit();
 800a2f8:	f000 fc4c 	bl	800ab94 <vNetworkSocketsInit>

			/* Create the task that processes Ethernet and stack events. */
			xReturn = xTaskCreate( prvIPTask, "IP-task", ( uint16_t ) ipconfigIP_TASK_STACK_SIZE_WORDS, NULL, ( UBaseType_t ) ipconfigIP_TASK_PRIORITY, &xIPTaskHandle );
 800a2fc:	4b0d      	ldr	r3, [pc, #52]	; (800a334 <FreeRTOS_IPInit+0x1b8>)
 800a2fe:	9301      	str	r3, [sp, #4]
 800a300:	2305      	movs	r3, #5
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	2300      	movs	r3, #0
 800a306:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a30a:	490f      	ldr	r1, [pc, #60]	; (800a348 <FreeRTOS_IPInit+0x1cc>)
 800a30c:	480f      	ldr	r0, [pc, #60]	; (800a34c <FreeRTOS_IPInit+0x1d0>)
 800a30e:	f7fc ff11 	bl	8007134 <xTaskCreate>
 800a312:	6278      	str	r0, [r7, #36]	; 0x24
 800a314:	e007      	b.n	800a326 <FreeRTOS_IPInit+0x1aa>
		else
		{
			FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n") );

			/* Clean up. */
			vQueueDelete( xNetworkEventQueue );
 800a316:	4b06      	ldr	r3, [pc, #24]	; (800a330 <FreeRTOS_IPInit+0x1b4>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fc fd73 	bl	8006e06 <vQueueDelete>
			xNetworkEventQueue = NULL;
 800a320:	4b03      	ldr	r3, [pc, #12]	; (800a330 <FreeRTOS_IPInit+0x1b4>)
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
	else
	{
		FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n") );
	}

	return xReturn;
 800a326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3728      	adds	r7, #40	; 0x28
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bdb0      	pop	{r4, r5, r7, pc}
 800a330:	20004720 	.word	0x20004720
 800a334:	20004754 	.word	0x20004754
 800a338:	08010db8 	.word	0x08010db8
 800a33c:	20004728 	.word	0x20004728
 800a340:	2000473c 	.word	0x2000473c
 800a344:	2000009c 	.word	0x2000009c
 800a348:	08010dc0 	.word	0x08010dc0
 800a34c:	08009c69 	.word	0x08009c69

0800a350 <xSendEventToIPTask>:

#endif /* ipconfigSUPPORT_OUTGOING_PINGS == 1 */
/*-----------------------------------------------------------*/

BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	71fb      	strb	r3, [r7, #7]
IPStackEvent_t xEventMessage;
const TickType_t xDontBlock = ( TickType_t ) 0;
 800a35a:	2300      	movs	r3, #0
 800a35c:	617b      	str	r3, [r7, #20]

	xEventMessage.eEventType = eEvent;
 800a35e:	79fb      	ldrb	r3, [r7, #7]
 800a360:	733b      	strb	r3, [r7, #12]
	xEventMessage.pvData = ( void* )NULL;
 800a362:	2300      	movs	r3, #0
 800a364:	613b      	str	r3, [r7, #16]

	return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 800a366:	f107 030c 	add.w	r3, r7, #12
 800a36a:	6979      	ldr	r1, [r7, #20]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 f805 	bl	800a37c <xSendEventStructToIPTask>
 800a372:	4603      	mov	r3, r0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3718      	adds	r7, #24
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <xSendEventStructToIPTask>:
/*-----------------------------------------------------------*/

BaseType_t xSendEventStructToIPTask( const IPStackEvent_t *pxEvent, TickType_t xTimeout )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
BaseType_t xReturn, xSendMessage;

	if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 800a386:	f000 fb2f 	bl	800a9e8 <xIPIsNetworkTaskReady>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d107      	bne.n	800a3a0 <xSendEventStructToIPTask+0x24>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f993 3000 	ldrsb.w	r3, [r3]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <xSendEventStructToIPTask+0x24>
	{
		/* Only allow eNetworkDownEvent events if the IP task is not ready
		yet.  Not going to attempt to send the message so the send failed. */
		xReturn = pdFAIL;
 800a39a:	2300      	movs	r3, #0
 800a39c:	60fb      	str	r3, [r7, #12]
 800a39e:	e02d      	b.n	800a3fc <xSendEventStructToIPTask+0x80>
	}
	else
	{
		xSendMessage = pdTRUE;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	60bb      	str	r3, [r7, #8]

		#if( ipconfigUSE_TCP == 1 )
		{
			if( pxEvent->eEventType == eTCPTimerEvent )
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f993 3000 	ldrsb.w	r3, [r3]
 800a3aa:	2b05      	cmp	r3, #5
 800a3ac:	d10e      	bne.n	800a3cc <xSendEventStructToIPTask+0x50>
			{
				/* TCP timer events are sent to wake the timer task when
				xTCPTimer has expired, but there is no point sending them if the
				IP task is already awake processing other message. */
				xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800a3ae:	4a16      	ldr	r2, [pc, #88]	; (800a408 <xSendEventStructToIPTask+0x8c>)
 800a3b0:	7813      	ldrb	r3, [r2, #0]
 800a3b2:	f043 0302 	orr.w	r3, r3, #2
 800a3b6:	7013      	strb	r3, [r2, #0]

				if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0u )
 800a3b8:	4b14      	ldr	r3, [pc, #80]	; (800a40c <xSendEventStructToIPTask+0x90>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7fc fd05 	bl	8006dcc <uxQueueMessagesWaiting>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <xSendEventStructToIPTask+0x50>
				{
					/* Not actually going to send the message but this is not a
					failure as the message didn't need to be sent. */
					xSendMessage = pdFALSE;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	60bb      	str	r3, [r7, #8]
				}
			}
		}
		#endif /* ipconfigUSE_TCP */

		if( xSendMessage != pdFALSE )
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d012      	beq.n	800a3f8 <xSendEventStructToIPTask+0x7c>
		{
			/* The IP task cannot block itself while waiting for itself to
			respond. */
			if( ( xIsCallingFromIPTask() == pdTRUE ) && ( xTimeout > ( TickType_t ) 0 ) )
 800a3d2:	f7ff fcfd 	bl	8009dd0 <xIsCallingFromIPTask>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d104      	bne.n	800a3e6 <xSendEventStructToIPTask+0x6a>
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <xSendEventStructToIPTask+0x6a>
			{
				xTimeout = ( TickType_t ) 0;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	603b      	str	r3, [r7, #0]
			}

			xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, xTimeout );
 800a3e6:	4b09      	ldr	r3, [pc, #36]	; (800a40c <xSendEventStructToIPTask+0x90>)
 800a3e8:	6818      	ldr	r0, [r3, #0]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	6879      	ldr	r1, [r7, #4]
 800a3f0:	f7fc fa0e 	bl	8006810 <xQueueGenericSend>
 800a3f4:	60f8      	str	r0, [r7, #12]
 800a3f6:	e001      	b.n	800a3fc <xSendEventStructToIPTask+0x80>
		}
		else
		{
			/* It was not necessary to send the message to process the event so
			even though the message was not sent the call was successful. */
			xReturn = pdPASS;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	60fb      	str	r3, [r7, #12]
		}
	}

	return xReturn;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	20004788 	.word	0x20004788
 800a40c:	20004720 	.word	0x20004720

0800a410 <eConsiderFrameForProcessing>:
/*-----------------------------------------------------------*/

eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
eFrameProcessingResult_t eReturn;
const EthernetHeader_t *pxEthernetHeader;

	pxEthernetHeader = ( const EthernetHeader_t * ) pucEthernetBuffer;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	613b      	str	r3, [r7, #16]

	if( memcmp( ( void * ) ipLOCAL_MAC_ADDRESS, ( void * ) &( pxEthernetHeader->xDestinationAddress ), sizeof( MACAddress_t ) ) == 0 )
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	2206      	movs	r2, #6
 800a420:	4619      	mov	r1, r3
 800a422:	4820      	ldr	r0, [pc, #128]	; (800a4a4 <eConsiderFrameForProcessing+0x94>)
 800a424:	f006 fb3a 	bl	8010a9c <memcmp>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d102      	bne.n	800a434 <eConsiderFrameForProcessing+0x24>
	{
		/* The packet was directed to this node directly - process it. */
		eReturn = eProcessBuffer;
 800a42e:	2301      	movs	r3, #1
 800a430:	75fb      	strb	r3, [r7, #23]
 800a432:	e019      	b.n	800a468 <eConsiderFrameForProcessing+0x58>
	}
	else if( memcmp( ( void * ) xBroadcastMACAddress.ucBytes, ( void * ) pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	2206      	movs	r2, #6
 800a438:	4619      	mov	r1, r3
 800a43a:	481b      	ldr	r0, [pc, #108]	; (800a4a8 <eConsiderFrameForProcessing+0x98>)
 800a43c:	f006 fb2e 	bl	8010a9c <memcmp>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d102      	bne.n	800a44c <eConsiderFrameForProcessing+0x3c>
	{
		/* The packet was a broadcast - process it. */
		eReturn = eProcessBuffer;
 800a446:	2301      	movs	r3, #1
 800a448:	75fb      	strb	r3, [r7, #23]
 800a44a:	e00d      	b.n	800a468 <eConsiderFrameForProcessing+0x58>
	}
	else
#if( ipconfigUSE_LLMNR == 1 )
	if( memcmp( ( void * ) xLLMNR_MacAdress.ucBytes, ( void * ) pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	2206      	movs	r2, #6
 800a450:	4619      	mov	r1, r3
 800a452:	4816      	ldr	r0, [pc, #88]	; (800a4ac <eConsiderFrameForProcessing+0x9c>)
 800a454:	f006 fb22 	bl	8010a9c <memcmp>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d102      	bne.n	800a464 <eConsiderFrameForProcessing+0x54>
	{
		/* The packet is a request for LLMNR - process it. */
		eReturn = eProcessBuffer;
 800a45e:	2301      	movs	r3, #1
 800a460:	75fb      	strb	r3, [r7, #23]
 800a462:	e001      	b.n	800a468 <eConsiderFrameForProcessing+0x58>
	else
#endif /* ipconfigUSE_LLMNR */
	{
		/* The packet was not a broadcast, or for this node, just release
		the buffer without taking any other action. */
		eReturn = eReleaseBuffer;
 800a464:	2300      	movs	r3, #0
 800a466:	75fb      	strb	r3, [r7, #23]

	#if( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
	{
	uint16_t usFrameType;

		if( eReturn == eProcessBuffer )
 800a468:	7dfb      	ldrb	r3, [r7, #23]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d115      	bne.n	800a49a <eConsiderFrameForProcessing+0x8a>
		{
			usFrameType = pxEthernetHeader->usFrameType;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	7b1a      	ldrb	r2, [r3, #12]
 800a472:	7b5b      	ldrb	r3, [r3, #13]
 800a474:	021b      	lsls	r3, r3, #8
 800a476:	4313      	orrs	r3, r2
 800a478:	81fb      	strh	r3, [r7, #14]
			usFrameType = FreeRTOS_ntohs( usFrameType );
 800a47a:	89fb      	ldrh	r3, [r7, #14]
 800a47c:	021b      	lsls	r3, r3, #8
 800a47e:	b21a      	sxth	r2, r3
 800a480:	89fb      	ldrh	r3, [r7, #14]
 800a482:	0a1b      	lsrs	r3, r3, #8
 800a484:	b29b      	uxth	r3, r3
 800a486:	b21b      	sxth	r3, r3
 800a488:	4313      	orrs	r3, r2
 800a48a:	b21b      	sxth	r3, r3
 800a48c:	81fb      	strh	r3, [r7, #14]

			if( usFrameType <= 0x600U )
 800a48e:	89fb      	ldrh	r3, [r7, #14]
 800a490:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a494:	d801      	bhi.n	800a49a <eConsiderFrameForProcessing+0x8a>
			{
				/* Not an Ethernet II frame. */
				eReturn = eReleaseBuffer;
 800a496:	2300      	movs	r3, #0
 800a498:	75fb      	strb	r3, [r7, #23]
			}
		}
	}
	#endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

	return eReturn;
 800a49a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3718      	adds	r7, #24
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	2000009c 	.word	0x2000009c
 800a4a8:	08010f48 	.word	0x08010f48
 800a4ac:	08010f40 	.word	0x08010f40

0800a4b0 <prvProcessNetworkDownEvent>:
/*-----------------------------------------------------------*/

static void prvProcessNetworkDownEvent( void )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	af00      	add	r7, sp, #0
	/* Stop the ARP timer while there is no network. */
	xARPTimer.bActive = pdFALSE_UNSIGNED;
 800a4b4:	4a11      	ldr	r2, [pc, #68]	; (800a4fc <prvProcessNetworkDownEvent+0x4c>)
 800a4b6:	7813      	ldrb	r3, [r2, #0]
 800a4b8:	f36f 0300 	bfc	r3, #0, #1
 800a4bc:	7013      	strb	r3, [r2, #0]
		static BaseType_t xCallEventHook = pdFALSE;

		/* The first network down event is generated by the IP stack itself to
		initialise the network hardware, so do not call the network down event
		the first time through. */
		if( xCallEventHook == pdTRUE )
 800a4be:	4b10      	ldr	r3, [pc, #64]	; (800a500 <prvProcessNetworkDownEvent+0x50>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d102      	bne.n	800a4cc <prvProcessNetworkDownEvent+0x1c>
		{
			vApplicationIPNetworkEventHook( eNetworkDown );
 800a4c6:	2001      	movs	r0, #1
 800a4c8:	f005 fbe4 	bl	800fc94 <vApplicationIPNetworkEventHook>
		}
		xCallEventHook = pdTRUE;
 800a4cc:	4b0c      	ldr	r3, [pc, #48]	; (800a500 <prvProcessNetworkDownEvent+0x50>)
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	601a      	str	r2, [r3, #0]
	#endif

	/* The network has been disconnected (or is being initialised for the first
	time).  Perform whatever hardware processing is necessary to bring it up
	again, or wait for it to be available again.  This is hardware dependent. */
	if( xNetworkInterfaceInitialise() != pdPASS )
 800a4d2:	f7fa f969 	bl	80047a8 <xNetworkInterfaceInitialise>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d006      	beq.n	800a4ea <prvProcessNetworkDownEvent+0x3a>
	{
		/* Ideally the network interface initialisation function will only
		return when the network is available.  In case this is not the case,
		wait a while before retrying the initialisation. */
		vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 800a4dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a4e0:	f7fc ffe0 	bl	80074a4 <vTaskDelay>
		FreeRTOS_NetworkDown();
 800a4e4:	f7ff fdb2 	bl	800a04c <FreeRTOS_NetworkDown>
			/* Perform any necessary 'network up' processing. */
			vIPNetworkUpCalls();
		}
		#endif
	}
}
 800a4e8:	e005      	b.n	800a4f6 <prvProcessNetworkDownEvent+0x46>
			vDHCPProcess( pdTRUE );
 800a4ea:	2001      	movs	r0, #1
 800a4ec:	f7fe fb12 	bl	8008b14 <vDHCPProcess>
			xSendEventToIPTask( eDHCPEvent );
 800a4f0:	2004      	movs	r0, #4
 800a4f2:	f7ff ff2d 	bl	800a350 <xSendEventToIPTask>
}
 800a4f6:	bf00      	nop
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	20004760 	.word	0x20004760
 800a500:	200047b8 	.word	0x200047b8

0800a504 <vIPNetworkUpCalls>:
/*-----------------------------------------------------------*/

void vIPNetworkUpCalls( void )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	af00      	add	r7, sp, #0
	xNetworkUp = pdTRUE;
 800a508:	4b07      	ldr	r3, [pc, #28]	; (800a528 <vIPNetworkUpCalls+0x24>)
 800a50a:	2201      	movs	r2, #1
 800a50c:	601a      	str	r2, [r3, #0]

	#if( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
	{
		vApplicationIPNetworkEventHook( eNetworkUp );
 800a50e:	2000      	movs	r0, #0
 800a510:	f005 fbc0 	bl	800fc94 <vApplicationIPNetworkEventHook>
	#if( ipconfigDNS_USE_CALLBACKS != 0 )
	{
		/* The following function is declared in FreeRTOS_DNS.c	and 'private' to
		this library */
		extern void vDNSInitialise( void );
		vDNSInitialise();
 800a514:	f7fe ff48 	bl	80093a8 <vDNSInitialise>
	}
	#endif /* ipconfigDNS_USE_CALLBACKS != 0 */

	/* Set remaining time to 0 so it will become active immediately. */
	prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 800a518:	f242 7110 	movw	r1, #10000	; 0x2710
 800a51c:	4803      	ldr	r0, [pc, #12]	; (800a52c <vIPNetworkUpCalls+0x28>)
 800a51e:	f7ff fd55 	bl	8009fcc <prvIPTimerReload>
}
 800a522:	bf00      	nop
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	2000475c 	.word	0x2000475c
 800a52c:	20004760 	.word	0x20004760

0800a530 <prvProcessEthernetPacket>:
/*-----------------------------------------------------------*/

static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
EthernetHeader_t *pxEthernetHeader;
volatile eFrameProcessingResult_t eReturned; /* Volatile to prevent complier warnings when ipCONSIDER_FRAME_FOR_PROCESSING just sets it to eProcessBuffer. */

	configASSERT( pxNetworkBuffer );
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d109      	bne.n	800a552 <prvProcessEthernetPacket+0x22>
 800a53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	613b      	str	r3, [r7, #16]
 800a550:	e7fe      	b.n	800a550 <prvProcessEthernetPacket+0x20>

	/* Interpret the Ethernet frame. */
	eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 800a552:	2301      	movs	r3, #1
 800a554:	73fb      	strb	r3, [r7, #15]
	pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	617b      	str	r3, [r7, #20]

	if( eReturned == eProcessBuffer )
 800a55c:	7bfb      	ldrb	r3, [r7, #15]
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b01      	cmp	r3, #1
 800a562:	d11b      	bne.n	800a59c <prvProcessEthernetPacket+0x6c>
	{
		/* Interpret the received Ethernet packet. */
		switch( pxEthernetHeader->usFrameType )
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	899b      	ldrh	r3, [r3, #12]
 800a568:	b29b      	uxth	r3, r3
 800a56a:	2b08      	cmp	r3, #8
 800a56c:	d00a      	beq.n	800a584 <prvProcessEthernetPacket+0x54>
 800a56e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800a572:	d110      	bne.n	800a596 <prvProcessEthernetPacket+0x66>
		{
			case ipARP_FRAME_TYPE :
				/* The Ethernet frame contains an ARP packet. */
				eReturned = eARPProcessPacket( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fd ff9f 	bl	80084bc <eARPProcessPacket>
 800a57e:	4603      	mov	r3, r0
 800a580:	73fb      	strb	r3, [r7, #15]
				break;
 800a582:	e00b      	b.n	800a59c <prvProcessEthernetPacket+0x6c>

			case ipIPv4_FRAME_TYPE :
				/* The Ethernet frame contains an IP packet. */
				eReturned = prvProcessIPPacket( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer );
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	6879      	ldr	r1, [r7, #4]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 f866 	bl	800a65c <prvProcessIPPacket>
 800a590:	4603      	mov	r3, r0
 800a592:	73fb      	strb	r3, [r7, #15]
				break;
 800a594:	e002      	b.n	800a59c <prvProcessEthernetPacket+0x6c>

			default :
				/* No other packet types are handled.  Nothing to do. */
				eReturned = eReleaseBuffer;
 800a596:	2300      	movs	r3, #0
 800a598:	73fb      	strb	r3, [r7, #15]
				break;
 800a59a:	bf00      	nop
		}
	}

	/* Perform any actions that resulted from processing the Ethernet frame. */
	switch( eReturned )
 800a59c:	7bfb      	ldrb	r3, [r7, #15]
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d002      	beq.n	800a5aa <prvProcessEthernetPacket+0x7a>
 800a5a4:	2b03      	cmp	r3, #3
 800a5a6:	d009      	beq.n	800a5bc <prvProcessEthernetPacket+0x8c>
 800a5a8:	e004      	b.n	800a5b4 <prvProcessEthernetPacket+0x84>
	{
		case eReturnEthernetFrame :
			/* The Ethernet frame will have been updated (maybe it was
			an ARP request or a PING request?) and should be sent back to
			its source. */
			vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 800a5aa:	2101      	movs	r1, #1
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 f9b9 	bl	800a924 <vReturnEthernetFrame>
			/* parameter pdTRUE: the buffer must be released once
			the frame has been transmitted */
			break;
 800a5b2:	e004      	b.n	800a5be <prvProcessEthernetPacket+0x8e>

		default :
			/* The frame is not being used anywhere, and the
			NetworkBufferDescriptor_t structure containing the frame should
			just be	released back to the list of free buffers. */
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f005 fad1 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
			break;
 800a5ba:	e000      	b.n	800a5be <prvProcessEthernetPacket+0x8e>
			break;
 800a5bc:	bf00      	nop
	}
}
 800a5be:	bf00      	nop
 800a5c0:	3718      	adds	r7, #24
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
	...

0800a5c8 <prvAllowIPPacket>:
/*-----------------------------------------------------------*/

static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
	NetworkBufferDescriptor_t * const pxNetworkBuffer, UBaseType_t uxHeaderLength )
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b089      	sub	sp, #36	; 0x24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
eFrameProcessingResult_t eReturn = eProcessBuffer;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	77fb      	strb	r3, [r7, #31]

#if( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
	const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	330e      	adds	r3, #14
 800a5dc:	61bb      	str	r3, [r7, #24]
	#if( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
	{
		/* In systems with a very small amount of RAM, it might be advantageous
		to have incoming messages checked earlier, by the network card driver.
		This method may decrease the usage of sparse network buffers. */
		uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	617b      	str	r3, [r7, #20]

			/* Ensure that the incoming packet is not fragmented (only outgoing
			packets can be fragmented) as these are the only handled IP frames
			currently. */
			if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	88db      	ldrh	r3, [r3, #6]
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	f64f 730f 	movw	r3, #65295	; 0xff0f
 800a5f0:	4013      	ands	r3, r2
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d002      	beq.n	800a5fc <prvAllowIPPacket+0x34>
			{
				/* Can not handle, fragmented packet. */
				eReturn = eReleaseBuffer;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	77fb      	strb	r3, [r7, #31]
 800a5fa:	e022      	b.n	800a642 <prvAllowIPPacket+0x7a>
			}
			/* 0x45 means: IPv4 with an IP header of 5 x 4 = 20 bytes
			 * 0x47 means: IPv4 with an IP header of 7 x 4 = 28 bytes */
			else if( ( pxIPHeader->ucVersionHeaderLength < 0x45u ) || ( pxIPHeader->ucVersionHeaderLength > 0x4Fu ) )
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b44      	cmp	r3, #68	; 0x44
 800a602:	d903      	bls.n	800a60c <prvAllowIPPacket+0x44>
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	2b4f      	cmp	r3, #79	; 0x4f
 800a60a:	d902      	bls.n	800a612 <prvAllowIPPacket+0x4a>
			{
				/* Can not handle, unknown or invalid header version. */
				eReturn = eReleaseBuffer;
 800a60c:	2300      	movs	r3, #0
 800a60e:	77fb      	strb	r3, [r7, #31]
 800a610:	e017      	b.n	800a642 <prvAllowIPPacket+0x7a>
			}
				/* Is the packet for this IP address? */
			else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 800a612:	4b0f      	ldr	r3, [pc, #60]	; (800a650 <prvAllowIPPacket+0x88>)
 800a614:	695a      	ldr	r2, [r3, #20]
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d012      	beq.n	800a642 <prvAllowIPPacket+0x7a>
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a622:	d00e      	beq.n	800a642 <prvAllowIPPacket+0x7a>
				/* Is it the global broadcast address 255.255.255.255 ? */
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
				/* Is it a specific broadcast address 192.168.1.255 ? */
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800a624:	4b0b      	ldr	r3, [pc, #44]	; (800a654 <prvAllowIPPacket+0x8c>)
 800a626:	691a      	ldr	r2, [r3, #16]
				( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d009      	beq.n	800a642 <prvAllowIPPacket+0x7a>
				( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	4a09      	ldr	r2, [pc, #36]	; (800a658 <prvAllowIPPacket+0x90>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d005      	beq.n	800a642 <prvAllowIPPacket+0x7a>
			#if( ipconfigUSE_LLMNR == 1 )
				/* Is it the LLMNR multicast address? */
				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
			#endif
				/* Or (during DHCP negotiation) we have no IP-address yet? */
				( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
 800a636:	4b06      	ldr	r3, [pc, #24]	; (800a650 <prvAllowIPPacket+0x88>)
 800a638:	695b      	ldr	r3, [r3, #20]
				( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <prvAllowIPPacket+0x7a>
			{
				/* Packet is not for this node, release it */
				eReturn = eReleaseBuffer;
 800a63e:	2300      	movs	r3, #0
 800a640:	77fb      	strb	r3, [r7, #31]
		( void ) pxNetworkBuffer;
		( void ) uxHeaderLength;
	}
	#endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

	return eReturn;
 800a642:	7ffb      	ldrb	r3, [r7, #31]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3724      	adds	r7, #36	; 0x24
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	2000009c 	.word	0x2000009c
 800a654:	20004728 	.word	0x20004728
 800a658:	fc0000e0 	.word	0xfc0000e0

0800a65c <prvProcessIPPacket>:
/*-----------------------------------------------------------*/

static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * const pxIPPacket, NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b08c      	sub	sp, #48	; 0x30
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
eFrameProcessingResult_t eReturn;
const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	330e      	adds	r3, #14
 800a66a:	62bb      	str	r3, [r7, #40]	; 0x28
UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0x0Fu ) << 2 );
 800a66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800a676:	627b      	str	r3, [r7, #36]	; 0x24
uint8_t ucProtocol;

	ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	7ddb      	ldrb	r3, [r3, #23]
 800a67c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	/* Check if the IP headers are acceptable and if it has our destination. */
	eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 800a680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f7ff ff9f 	bl	800a5c8 <prvAllowIPPacket>
 800a68a:	4603      	mov	r3, r0
 800a68c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if( eReturn == eProcessBuffer )
 800a690:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a694:	2b01      	cmp	r3, #1
 800a696:	f040 8082 	bne.w	800a79e <prvProcessIPPacket+0x142>
	{
		if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800a69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69c:	2b14      	cmp	r3, #20
 800a69e:	d91a      	bls.n	800a6d6 <prvProcessIPPacket+0x7a>
		{
			/* All structs of headers expect a IP header size of 20 bytes
			 * IP header options were included, we'll ignore them and cut them out
			 * Note: IP options are mostly use in Multi-cast protocols */
			const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a2:	3b14      	subs	r3, #20
 800a6a4:	61fb      	str	r3, [r7, #28]
			/* From: the previous start of UDP/ICMP/TCP data */
			uint8_t *pucSource = ( ( uint8_t * ) pxIPHeader ) + uxHeaderLength;
 800a6a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	4413      	add	r3, r2
 800a6ac:	61bb      	str	r3, [r7, #24]
			/* To: the usual start of UDP/ICMP/TCP data at offset 20 from IP header */
			uint8_t *pucTarget = ( ( uint8_t * ) pxIPHeader ) + ipSIZE_OF_IPv4_HEADER;
 800a6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b0:	3314      	adds	r3, #20
 800a6b2:	617b      	str	r3, [r7, #20]
			/* How many: total length minus the options and the lower headers */
			const size_t  xMoveLen = pxNetworkBuffer->xDataLength - optlen - ipSIZE_OF_IPv4_HEADER - ipSIZE_OF_ETH_HEADER;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	69da      	ldr	r2, [r3, #28]
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	3b22      	subs	r3, #34	; 0x22
 800a6be:	613b      	str	r3, [r7, #16]

			memmove( pucTarget, pucSource, xMoveLen );
 800a6c0:	693a      	ldr	r2, [r7, #16]
 800a6c2:	69b9      	ldr	r1, [r7, #24]
 800a6c4:	6978      	ldr	r0, [r7, #20]
 800a6c6:	f006 fa03 	bl	8010ad0 <memmove>
			pxNetworkBuffer->xDataLength -= optlen;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	69da      	ldr	r2, [r3, #28]
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	1ad2      	subs	r2, r2, r3
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	61da      	str	r2, [r3, #28]
		}
		/* Add the IP and MAC addresses to the ARP table if they are not
		already there - otherwise refresh the age of the existing
		entry. */
		if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 800a6d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6da:	2b11      	cmp	r3, #17
 800a6dc:	d007      	beq.n	800a6ee <prvProcessIPPacket+0x92>
			 * For UDP packets, this will be done later in xProcessReceivedUDPPacket()
			 * as soon as know that the message will be handled by someone
			 * This will prevent that the ARP cache will get overwritten
			 * with the IP-address of useless broadcast packets
			 */
			vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	1d9a      	adds	r2, r3, #6
 800a6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	f7fd ff67 	bl	80085bc <vARPRefreshCacheEntry>
		}
		switch( ucProtocol )
 800a6ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6f2:	2b06      	cmp	r3, #6
 800a6f4:	d041      	beq.n	800a77a <prvProcessIPPacket+0x11e>
 800a6f6:	2b11      	cmp	r3, #17
 800a6f8:	d012      	beq.n	800a720 <prvProcessIPPacket+0xc4>
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d000      	beq.n	800a700 <prvProcessIPPacket+0xa4>
				}
				break;
#endif
			default	:
				/* Not a supported frame type. */
				break;
 800a6fe:	e04e      	b.n	800a79e <prvProcessIPPacket+0x142>
					ICMPPacket_t *pxICMPPacket = ( ICMPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	60fb      	str	r3, [r7, #12]
					if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800a706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a708:	691a      	ldr	r2, [r3, #16]
 800a70a:	4b28      	ldr	r3, [pc, #160]	; (800a7ac <prvProcessIPPacket+0x150>)
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d142      	bne.n	800a798 <prvProcessIPPacket+0x13c>
						eReturn = prvProcessICMPPacket( pxICMPPacket );
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f000 f8e8 	bl	800a8e8 <prvProcessICMPPacket>
 800a718:	4603      	mov	r3, r0
 800a71a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800a71e:	e03b      	b.n	800a798 <prvProcessIPPacket+0x13c>
					UDPPacket_t *pxUDPPacket = ( UDPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	60bb      	str	r3, [r7, #8]
					pxNetworkBuffer->xDataLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength ) - sizeof( UDPHeader_t );
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	021b      	lsls	r3, r3, #8
 800a72e:	b21a      	sxth	r2, r3
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a734:	b29b      	uxth	r3, r3
 800a736:	0a1b      	lsrs	r3, r3, #8
 800a738:	b29b      	uxth	r3, r3
 800a73a:	b21b      	sxth	r3, r3
 800a73c:	4313      	orrs	r3, r2
 800a73e:	b21b      	sxth	r3, r3
 800a740:	b29b      	uxth	r3, r3
 800a742:	f1a3 0208 	sub.w	r2, r3, #8
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	61da      	str	r2, [r3, #28]
					pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a74e:	b29a      	uxth	r2, r3
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	841a      	strh	r2, [r3, #32]
					pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	615a      	str	r2, [r3, #20]
					if( xProcessReceivedUDPPacket( pxNetworkBuffer, pxUDPPacket->xUDPHeader.usDestinationPort ) == pdPASS )
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a762:	b29b      	uxth	r3, r3
 800a764:	4619      	mov	r1, r3
 800a766:	6838      	ldr	r0, [r7, #0]
 800a768:	f005 f85c 	bl	800f824 <xProcessReceivedUDPPacket>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d114      	bne.n	800a79c <prvProcessIPPacket+0x140>
						eReturn = eFrameConsumed;
 800a772:	2303      	movs	r3, #3
 800a774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800a778:	e010      	b.n	800a79c <prvProcessIPPacket+0x140>
					if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800a77a:	6838      	ldr	r0, [r7, #0]
 800a77c:	f003 fd5c 	bl	800e238 <xProcessReceivedTCPPacket>
 800a780:	4603      	mov	r3, r0
 800a782:	2b01      	cmp	r3, #1
 800a784:	d102      	bne.n	800a78c <prvProcessIPPacket+0x130>
						eReturn = eFrameConsumed;
 800a786:	2303      	movs	r3, #3
 800a788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					xProcessedTCPMessage++;
 800a78c:	4b08      	ldr	r3, [pc, #32]	; (800a7b0 <prvProcessIPPacket+0x154>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	3301      	adds	r3, #1
 800a792:	4a07      	ldr	r2, [pc, #28]	; (800a7b0 <prvProcessIPPacket+0x154>)
 800a794:	6013      	str	r3, [r2, #0]
				break;
 800a796:	e002      	b.n	800a79e <prvProcessIPPacket+0x142>
				break;
 800a798:	bf00      	nop
 800a79a:	e000      	b.n	800a79e <prvProcessIPPacket+0x142>
				break;
 800a79c:	bf00      	nop
		}
	}

	return eReturn;
 800a79e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3730      	adds	r7, #48	; 0x30
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	2000009c 	.word	0x2000009c
 800a7b0:	20004758 	.word	0x20004758

0800a7b4 <prvProcessICMPEchoReply>:
/*-----------------------------------------------------------*/

#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

	static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
	{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
	ePingReplyStatus_t eStatus = eSuccess;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	75fb      	strb	r3, [r7, #23]
	uint16_t usDataLength, usCount;
	uint8_t *pucByte;

		/* Find the total length of the IP packet. */
		usDataLength = pxICMPPacket->xIPHeader.usLength;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	7c1a      	ldrb	r2, [r3, #16]
 800a7c4:	7c5b      	ldrb	r3, [r3, #17]
 800a7c6:	021b      	lsls	r3, r3, #8
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	81fb      	strh	r3, [r7, #14]
		usDataLength = FreeRTOS_ntohs( usDataLength );
 800a7cc:	89fb      	ldrh	r3, [r7, #14]
 800a7ce:	021b      	lsls	r3, r3, #8
 800a7d0:	b21a      	sxth	r2, r3
 800a7d2:	89fb      	ldrh	r3, [r7, #14]
 800a7d4:	0a1b      	lsrs	r3, r3, #8
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	b21b      	sxth	r3, r3
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	b21b      	sxth	r3, r3
 800a7de:	81fb      	strh	r3, [r7, #14]

		/* Remove the length of the IP headers to obtain the length of the ICMP
		message itself. */
		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 800a7e0:	89fb      	ldrh	r3, [r7, #14]
 800a7e2:	3b14      	subs	r3, #20
 800a7e4:	81fb      	strh	r3, [r7, #14]

		/* Remove the length of the ICMP header, to obtain the length of
		data contained in the ping. */
		usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMP_HEADER );
 800a7e6:	89fb      	ldrh	r3, [r7, #14]
 800a7e8:	3b08      	subs	r3, #8
 800a7ea:	81fb      	strh	r3, [r7, #14]

		/* Checksum has already been checked before in prvProcessIPPacket */

		/* Find the first byte of the data within the ICMP packet. */
		pucByte = ( uint8_t * ) pxICMPPacket;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	613b      	str	r3, [r7, #16]
		pucByte += sizeof( ICMPPacket_t );
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	332a      	adds	r3, #42	; 0x2a
 800a7f4:	613b      	str	r3, [r7, #16]

		/* Check each byte. */
		for( usCount = 0; usCount < usDataLength; usCount++ )
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	82bb      	strh	r3, [r7, #20]
 800a7fa:	e00c      	b.n	800a816 <prvProcessICMPEchoReply+0x62>
		{
			if( *pucByte != ipECHO_DATA_FILL_BYTE )
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	2b78      	cmp	r3, #120	; 0x78
 800a802:	d002      	beq.n	800a80a <prvProcessICMPEchoReply+0x56>
			{
				eStatus = eInvalidData;
 800a804:	2302      	movs	r3, #2
 800a806:	75fb      	strb	r3, [r7, #23]
				break;
 800a808:	e009      	b.n	800a81e <prvProcessICMPEchoReply+0x6a>
			}

			pucByte++;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	3301      	adds	r3, #1
 800a80e:	613b      	str	r3, [r7, #16]
		for( usCount = 0; usCount < usDataLength; usCount++ )
 800a810:	8abb      	ldrh	r3, [r7, #20]
 800a812:	3301      	adds	r3, #1
 800a814:	82bb      	strh	r3, [r7, #20]
 800a816:	8aba      	ldrh	r2, [r7, #20]
 800a818:	89fb      	ldrh	r3, [r7, #14]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d3ee      	bcc.n	800a7fc <prvProcessICMPEchoReply+0x48>
		}

		/* Call back into the application to pass it the result. */
		vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a822:	b29a      	uxth	r2, r3
 800a824:	7dfb      	ldrb	r3, [r7, #23]
 800a826:	4611      	mov	r1, r2
 800a828:	4618      	mov	r0, r3
 800a82a:	f005 fa25 	bl	800fc78 <vApplicationPingReplyHook>
	}
 800a82e:	bf00      	nop
 800a830:	3718      	adds	r7, #24
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
	...

0800a838 <prvProcessICMPEchoRequest>:
/*-----------------------------------------------------------*/

#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )

	static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket )
	{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
	ICMPHeader_t *pxICMPHeader;
	IPHeader_t *pxIPHeader;
	uint16_t usRequest;

		pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	3322      	adds	r3, #34	; 0x22
 800a844:	617b      	str	r3, [r7, #20]
		pxIPHeader = &( pxICMPPacket->xIPHeader );
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	330e      	adds	r3, #14
 800a84a:	613b      	str	r3, [r7, #16]

		/* The checksum can be checked here - but a ping reply should be
		returned even if the checksum is incorrect so the other end can
		tell that the ping was received - even if the ping reply contains
		invalid data. */
		pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	2200      	movs	r2, #0
 800a850:	701a      	strb	r2, [r3, #0]
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	68da      	ldr	r2, [r3, #12]
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800a85a:	4b22      	ldr	r3, [pc, #136]	; (800a8e4 <prvProcessICMPEchoRequest+0xac>)
 800a85c:	695a      	ldr	r2, [r3, #20]
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	60da      	str	r2, [r3, #12]
		has been changed to ipICMP_ECHO_REPLY.  This is faster than calling
		usGenerateChecksum(). */

		/* due to compiler warning "integer operation result is out of range" */

		usRequest = ( uint16_t ) ( ( uint16_t )ipICMP_ECHO_REQUEST << 8 );
 800a862:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a866:	81fb      	strh	r3, [r7, #14]

		if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFu - usRequest ) )
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	885b      	ldrh	r3, [r3, #2]
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	89fb      	ldrh	r3, [r7, #14]
 800a870:	43db      	mvns	r3, r3
 800a872:	b29b      	uxth	r3, r3
 800a874:	021b      	lsls	r3, r3, #8
 800a876:	b299      	uxth	r1, r3
 800a878:	89fb      	ldrh	r3, [r7, #14]
 800a87a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800a87e:	33ff      	adds	r3, #255	; 0xff
 800a880:	0a1b      	lsrs	r3, r3, #8
 800a882:	b29b      	uxth	r3, r3
 800a884:	430b      	orrs	r3, r1
 800a886:	b29b      	uxth	r3, r3
 800a888:	429a      	cmp	r2, r3
 800a88a:	d312      	bcc.n	800a8b2 <prvProcessICMPEchoRequest+0x7a>
		{
			pxICMPHeader->usChecksum = ( uint16_t )
				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	885b      	ldrh	r3, [r3, #2]
 800a890:	b29a      	uxth	r2, r3
					FreeRTOS_htons( usRequest + 1UL ) );
 800a892:	89fb      	ldrh	r3, [r7, #14]
 800a894:	3301      	adds	r3, #1
 800a896:	b29b      	uxth	r3, r3
 800a898:	021b      	lsls	r3, r3, #8
 800a89a:	b299      	uxth	r1, r3
 800a89c:	89fb      	ldrh	r3, [r7, #14]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	0a1b      	lsrs	r3, r3, #8
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	430b      	orrs	r3, r1
 800a8a6:	b29b      	uxth	r3, r3
			pxICMPHeader->usChecksum = ( uint16_t )
 800a8a8:	4413      	add	r3, r2
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	805a      	strh	r2, [r3, #2]
 800a8b0:	e010      	b.n	800a8d4 <prvProcessICMPEchoRequest+0x9c>
		}
		else
		{
			pxICMPHeader->usChecksum = ( uint16_t )
				( ( ( uint32_t ) pxICMPHeader->usChecksum ) +
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	885b      	ldrh	r3, [r3, #2]
 800a8b6:	b29a      	uxth	r2, r3
					FreeRTOS_htons( usRequest ) );
 800a8b8:	89fb      	ldrh	r3, [r7, #14]
 800a8ba:	021b      	lsls	r3, r3, #8
 800a8bc:	b219      	sxth	r1, r3
 800a8be:	89fb      	ldrh	r3, [r7, #14]
 800a8c0:	0a1b      	lsrs	r3, r3, #8
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	b21b      	sxth	r3, r3
 800a8c6:	430b      	orrs	r3, r1
 800a8c8:	b21b      	sxth	r3, r3
 800a8ca:	b29b      	uxth	r3, r3
			pxICMPHeader->usChecksum = ( uint16_t )
 800a8cc:	4413      	add	r3, r2
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	805a      	strh	r2, [r3, #2]
		}
		return eReturnEthernetFrame;
 800a8d4:	2302      	movs	r3, #2
	}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	371c      	adds	r7, #28
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	2000009c 	.word	0x2000009c

0800a8e8 <prvProcessICMPPacket>:
/*-----------------------------------------------------------*/

#if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

	static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket )
	{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
	eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	73fb      	strb	r3, [r7, #15]

		iptraceICMP_PACKET_RECEIVED();
		switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d008      	beq.n	800a910 <prvProcessICMPPacket+0x28>
 800a8fe:	2b08      	cmp	r3, #8
 800a900:	d000      	beq.n	800a904 <prvProcessICMPPacket+0x1c>
				}
				#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
				break;

			default	:
				break;
 800a902:	e009      	b.n	800a918 <prvProcessICMPPacket+0x30>
					eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7ff ff97 	bl	800a838 <prvProcessICMPEchoRequest>
 800a90a:	4603      	mov	r3, r0
 800a90c:	73fb      	strb	r3, [r7, #15]
				break;
 800a90e:	e003      	b.n	800a918 <prvProcessICMPPacket+0x30>
					prvProcessICMPEchoReply( pxICMPPacket );
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff ff4f 	bl	800a7b4 <prvProcessICMPEchoReply>
				break;
 800a916:	bf00      	nop
		}

		return eReturn;
 800a918:	7bfb      	ldrb	r3, [r7, #15]
	}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
	...

0800a924 <vReturnEthernetFrame>:
	return FreeRTOS_htons( ( (uint16_t) xSum.u32 ) );
}
/*-----------------------------------------------------------*/

void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer, BaseType_t xReleaseAfterSend )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
	}

	if( pxNetworkBuffer != NULL )
#endif
	{
		pxEthernetHeader = ( EthernetHeader_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	699b      	ldr	r3, [r3, #24]
 800a932:	60fb      	str	r3, [r7, #12]

		/* Swap source and destination MAC addresses. */
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ), sizeof( pxEthernetHeader->xDestinationAddress ) );
 800a934:	68f8      	ldr	r0, [r7, #12]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	3306      	adds	r3, #6
 800a93a:	2206      	movs	r2, #6
 800a93c:	4619      	mov	r1, r3
 800a93e:	f006 f8bc 	bl	8010aba <memcpy>
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	3306      	adds	r3, #6
 800a946:	2206      	movs	r2, #6
 800a948:	4905      	ldr	r1, [pc, #20]	; (800a960 <vReturnEthernetFrame+0x3c>)
 800a94a:	4618      	mov	r0, r3
 800a94c:	f006 f8b5 	bl	8010aba <memcpy>

		/* Send! */
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7f9 ff40 	bl	80047d8 <xNetworkInterfaceOutput>
	}
}
 800a958:	bf00      	nop
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	2000009c 	.word	0x2000009c

0800a964 <vIPSetDHCPTimerEnableState>:
}
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DHCP == 1 )
	void vIPSetDHCPTimerEnableState( BaseType_t xEnableState )
	{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
		if( xEnableState != pdFALSE )
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d005      	beq.n	800a97e <vIPSetDHCPTimerEnableState+0x1a>
		{
			xDHCPTimer.bActive = pdTRUE_UNSIGNED;
 800a972:	4a08      	ldr	r2, [pc, #32]	; (800a994 <vIPSetDHCPTimerEnableState+0x30>)
 800a974:	7813      	ldrb	r3, [r2, #0]
 800a976:	f043 0301 	orr.w	r3, r3, #1
 800a97a:	7013      	strb	r3, [r2, #0]
		}
		else
		{
			xDHCPTimer.bActive = pdFALSE_UNSIGNED;
		}
	}
 800a97c:	e004      	b.n	800a988 <vIPSetDHCPTimerEnableState+0x24>
			xDHCPTimer.bActive = pdFALSE_UNSIGNED;
 800a97e:	4a05      	ldr	r2, [pc, #20]	; (800a994 <vIPSetDHCPTimerEnableState+0x30>)
 800a980:	7813      	ldrb	r3, [r2, #0]
 800a982:	f36f 0300 	bfc	r3, #0, #1
 800a986:	7013      	strb	r3, [r2, #0]
	}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	20004774 	.word	0x20004774

0800a998 <vIPReloadDHCPTimer>:
#endif /* ipconfigUSE_DHCP */
/*-----------------------------------------------------------*/

#if( ipconfigUSE_DHCP == 1 )
	void vIPReloadDHCPTimer( uint32_t ulLeaseTime )
	{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
		prvIPTimerReload( &xDHCPTimer, ulLeaseTime );
 800a9a0:	6879      	ldr	r1, [r7, #4]
 800a9a2:	4803      	ldr	r0, [pc, #12]	; (800a9b0 <vIPReloadDHCPTimer+0x18>)
 800a9a4:	f7ff fb12 	bl	8009fcc <prvIPTimerReload>
	}
 800a9a8:	bf00      	nop
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	20004774 	.word	0x20004774

0800a9b4 <vIPSetDnsTimerEnableState>:
#endif /* ipconfigUSE_DHCP */
/*-----------------------------------------------------------*/

#if( ipconfigDNS_USE_CALLBACKS == 1 )
	void vIPSetDnsTimerEnableState( BaseType_t xEnableState )
	{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
		if( xEnableState != 0 )
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d005      	beq.n	800a9ce <vIPSetDnsTimerEnableState+0x1a>
		{
			xDNSTimer.bActive = pdTRUE;
 800a9c2:	4a08      	ldr	r2, [pc, #32]	; (800a9e4 <vIPSetDnsTimerEnableState+0x30>)
 800a9c4:	7813      	ldrb	r3, [r2, #0]
 800a9c6:	f043 0301 	orr.w	r3, r3, #1
 800a9ca:	7013      	strb	r3, [r2, #0]
		}
		else
		{
			xDNSTimer.bActive = pdFALSE;
		}
	}
 800a9cc:	e004      	b.n	800a9d8 <vIPSetDnsTimerEnableState+0x24>
			xDNSTimer.bActive = pdFALSE;
 800a9ce:	4a05      	ldr	r2, [pc, #20]	; (800a9e4 <vIPSetDnsTimerEnableState+0x30>)
 800a9d0:	7813      	ldrb	r3, [r2, #0]
 800a9d2:	f36f 0300 	bfc	r3, #0, #1
 800a9d6:	7013      	strb	r3, [r2, #0]
	}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr
 800a9e4:	2000479c 	.word	0x2000479c

0800a9e8 <xIPIsNetworkTaskReady>:
	}
#endif /* ipconfigDNS_USE_CALLBACKS != 0 */
/*-----------------------------------------------------------*/

BaseType_t xIPIsNetworkTaskReady( void )
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	af00      	add	r7, sp, #0
	return xIPTaskInitialised;
 800a9ec:	4b03      	ldr	r3, [pc, #12]	; (800a9fc <xIPIsNetworkTaskReady+0x14>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	200047b0 	.word	0x200047b0

0800aa00 <FreeRTOS_max_uint32>:
	static portINLINE BaseType_t  	FreeRTOS_min_BaseType  (BaseType_t  a, BaseType_t  b);
	static portINLINE UBaseType_t  	FreeRTOS_min_UBaseType (UBaseType_t  a, UBaseType_t  b);


	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_max_uint32 (uint32_t a, uint32_t b) { return a >= b ? a : b; }
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	bf38      	it	cc
 800aa12:	4613      	movcc	r3, r2
 800aa14:	4618      	mov	r0, r3
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <FreeRTOS_round_up>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
	static portINLINE uint32_t FreeRTOS_round_up   (uint32_t a, uint32_t d) { return d * ( ( a + d - 1u ) / d ); }
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	4413      	add	r3, r2
 800aa30:	1e5a      	subs	r2, r3, #1
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	fb02 f303 	mul.w	r3, r2, r3
 800aa3e:	4618      	mov	r0, r3
 800aa40:	370c      	adds	r7, #12
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <uxStreamBufferSpace>:
}
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper );
static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper )
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b087      	sub	sp, #28
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	60f8      	str	r0, [r7, #12]
 800aa52:	60b9      	str	r1, [r7, #8]
 800aa54:	607a      	str	r2, [r7, #4]
/* Returns the space between uxLower and uxUpper, which equals to the distance minus 1 */
size_t uxCount;

	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	691a      	ldr	r2, [r3, #16]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	441a      	add	r2, r3
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	3b01      	subs	r3, #1
 800aa64:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	691a      	ldr	r2, [r3, #16]
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d804      	bhi.n	800aa7a <uxStreamBufferSpace+0x30>
	{
		uxCount -= pxBuffer->LENGTH;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	697a      	ldr	r2, [r7, #20]
 800aa76:	1ad3      	subs	r3, r2, r3
 800aa78:	617b      	str	r3, [r7, #20]
	}

	return uxCount;
 800aa7a:	697b      	ldr	r3, [r7, #20]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	371c      	adds	r7, #28
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <uxStreamBufferDistance>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper );
static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t *pxBuffer, const size_t uxLower, const size_t uxUpper )
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b087      	sub	sp, #28
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
/* Returns the distance between uxLower and uxUpper */
size_t uxCount;

	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	691a      	ldr	r2, [r3, #16]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	441a      	add	r2, r3
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	691a      	ldr	r2, [r3, #16]
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d804      	bhi.n	800aab6 <uxStreamBufferDistance+0x2e>
	{
		uxCount -= pxBuffer->LENGTH;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	697a      	ldr	r2, [r7, #20]
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	617b      	str	r3, [r7, #20]
	}

	return uxCount;
 800aab6:	697b      	ldr	r3, [r7, #20]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	371c      	adds	r7, #28
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <uxStreamBufferGetSpace>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t *pxBuffer )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can still be added to uxHead
before hitting on uxTail */
size_t uxHead = pxBuffer->uxHead;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800aad8:	68ba      	ldr	r2, [r7, #8]
 800aada:	68f9      	ldr	r1, [r7, #12]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7ff ffb4 	bl	800aa4a <uxStreamBufferSpace>
 800aae2:	4603      	mov	r3, r0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <uxStreamBufferFrontSpace>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t *pxBuffer )
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
/* Distance between uxFront and uxTail
or the number of items which can still be added to uxFront,
before hitting on uxTail */

size_t uxFront = pxBuffer->uxFront;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800ab00:	68ba      	ldr	r2, [r7, #8]
 800ab02:	68f9      	ldr	r1, [r7, #12]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff ffa0 	bl	800aa4a <uxStreamBufferSpace>
 800ab0a:	4603      	mov	r3, r0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <uxStreamBufferGetSize>:
/*-----------------------------------------------------------*/

static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer );
static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t *pxBuffer )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can be read from uxTail
before reaching uxHead */
size_t uxHead = pxBuffer->uxHead;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	60bb      	str	r3, [r7, #8]

	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	68b9      	ldr	r1, [r7, #8]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7ff ffab 	bl	800aa88 <uxStreamBufferDistance>
 800ab32:	4603      	mov	r3, r0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <prvValidSocket>:
static uint16_t usNextPortToUse[ socketPROTOCOL_COUNT ] = { 0 };

/*-----------------------------------------------------------*/

static BaseType_t prvValidSocket( FreeRTOS_Socket_t *pxSocket, BaseType_t xProtocol, BaseType_t xIsBound )
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b087      	sub	sp, #28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdTRUE;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	617b      	str	r3, [r7, #20]

	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d003      	beq.n	800ab5a <prvValidSocket+0x1e>
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab58:	d102      	bne.n	800ab60 <prvValidSocket+0x24>
	{
		xReturn = pdFALSE;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	617b      	str	r3, [r7, #20]
 800ab5e:	e012      	b.n	800ab86 <prvValidSocket+0x4a>
	}
	else if( ( xIsBound != pdFALSE ) && ( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE ) )
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d006      	beq.n	800ab74 <prvValidSocket+0x38>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d102      	bne.n	800ab74 <prvValidSocket+0x38>
	{
		/* The caller expects the socket to be bound, but it isn't. */
		xReturn = pdFALSE;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	617b      	str	r3, [r7, #20]
 800ab72:	e008      	b.n	800ab86 <prvValidSocket+0x4a>
	}
	else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d001      	beq.n	800ab86 <prvValidSocket+0x4a>
	{
		/* Socket has a wrong type (UDP != TCP). */
		xReturn = pdFALSE;
 800ab82:	2300      	movs	r3, #0
 800ab84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab86:	697b      	ldr	r3, [r7, #20]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	371c      	adds	r7, #28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <vNetworkSocketsInit>:
/*-----------------------------------------------------------*/

void vNetworkSocketsInit( void )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
const uint32_t ulAutoPortRange = socketAUTO_PORT_ALLOCATION_MAX_NUMBER - socketAUTO_PORT_ALLOCATION_RESET_NUMBER;
 800ab9a:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 800ab9e:	607b      	str	r3, [r7, #4]
uint32_t ulRandomPort;

	vListInitialise( &xBoundUDPSocketsList );
 800aba0:	481b      	ldr	r0, [pc, #108]	; (800ac10 <vNetworkSocketsInit+0x7c>)
 800aba2:	f7fb f87a 	bl	8005c9a <vListInitialise>

	/* Determine the first anonymous UDP port number to get assigned.  Give it
	a random value in order to avoid confusion about port numbers being used
	earlier, before rebooting the device.  Start with the first auto port
	number, then add a random offset up to a maximum of the range of numbers. */
	ulRandomPort = socketAUTO_PORT_ALLOCATION_START_NUMBER;
 800aba6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800abaa:	603b      	str	r3, [r7, #0]
	ulRandomPort += ( ipconfigRAND32() % ulAutoPortRange );
 800abac:	f005 f888 	bl	800fcc0 <uxRand>
 800abb0:	4603      	mov	r3, r0
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	fbb3 f2f2 	udiv	r2, r3, r2
 800abb8:	6879      	ldr	r1, [r7, #4]
 800abba:	fb01 f202 	mul.w	r2, r1, r2
 800abbe:	1a9b      	subs	r3, r3, r2
 800abc0:	683a      	ldr	r2, [r7, #0]
 800abc2:	4413      	add	r3, r2
 800abc4:	603b      	str	r3, [r7, #0]
	usNextPortToUse[ socketNEXT_UDP_PORT_NUMBER_INDEX ] = ( uint16_t ) ulRandomPort;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	b29a      	uxth	r2, r3
 800abca:	4b12      	ldr	r3, [pc, #72]	; (800ac14 <vNetworkSocketsInit+0x80>)
 800abcc:	801a      	strh	r2, [r3, #0]

	#if( ipconfigUSE_TCP == 1 )
	{
		extern uint32_t ulNextInitialSequenceNumber;

		ulNextInitialSequenceNumber = ipconfigRAND32();
 800abce:	f005 f877 	bl	800fcc0 <uxRand>
 800abd2:	4602      	mov	r2, r0
 800abd4:	4b10      	ldr	r3, [pc, #64]	; (800ac18 <vNetworkSocketsInit+0x84>)
 800abd6:	601a      	str	r2, [r3, #0]

		/* Determine the first anonymous TCP port number to get assigned. */
		ulRandomPort = socketAUTO_PORT_ALLOCATION_START_NUMBER;
 800abd8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800abdc:	603b      	str	r3, [r7, #0]
		ulRandomPort += ( ipconfigRAND32() % ulAutoPortRange );
 800abde:	f005 f86f 	bl	800fcc0 <uxRand>
 800abe2:	4603      	mov	r3, r0
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	fbb3 f2f2 	udiv	r2, r3, r2
 800abea:	6879      	ldr	r1, [r7, #4]
 800abec:	fb01 f202 	mul.w	r2, r1, r2
 800abf0:	1a9b      	subs	r3, r3, r2
 800abf2:	683a      	ldr	r2, [r7, #0]
 800abf4:	4413      	add	r3, r2
 800abf6:	603b      	str	r3, [r7, #0]
		usNextPortToUse[ socketNEXT_TCP_PORT_NUMBER_INDEX ] = ( uint16_t ) ulRandomPort;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	4b05      	ldr	r3, [pc, #20]	; (800ac14 <vNetworkSocketsInit+0x80>)
 800abfe:	805a      	strh	r2, [r3, #2]

		vListInitialise( &xBoundTCPSocketsList );
 800ac00:	4806      	ldr	r0, [pc, #24]	; (800ac1c <vNetworkSocketsInit+0x88>)
 800ac02:	f7fb f84a 	bl	8005c9a <vListInitialise>
	}
	#endif  /* ipconfigUSE_TCP == 1 */
}
 800ac06:	bf00      	nop
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	2000589c 	.word	0x2000589c
 800ac14:	200047bc 	.word	0x200047bc
 800ac18:	200047c4 	.word	0x200047c4
 800ac1c:	20005888 	.word	0x20005888

0800ac20 <prvDetermineSocketSize>:
/*-----------------------------------------------------------*/

static BaseType_t prvDetermineSocketSize( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol, size_t *pxSocketSize )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b088      	sub	sp, #32
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	607a      	str	r2, [r7, #4]
 800ac2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdPASS;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	61fb      	str	r3, [r7, #28]
FreeRTOS_Socket_t *pxSocket;

	/* Asserts must not appear before it has been determined that the network
	task is ready - otherwise the asserts will fail. */
	if( xIPIsNetworkTaskReady() == pdFALSE )
 800ac32:	f7ff fed9 	bl	800a9e8 <xIPIsNetworkTaskReady>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d102      	bne.n	800ac42 <prvDetermineSocketSize+0x22>
	{
		xReturn = pdFAIL;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	61fb      	str	r3, [r7, #28]
 800ac40:	e045      	b.n	800acce <prvDetermineSocketSize+0xae>
	}
	else
	{
		/* Only Ethernet is currently supported. */
		configASSERT( xDomain == FREERTOS_AF_INET );
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d009      	beq.n	800ac5c <prvDetermineSocketSize+0x3c>
 800ac48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4c:	f383 8811 	msr	BASEPRI, r3
 800ac50:	f3bf 8f6f 	isb	sy
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	61bb      	str	r3, [r7, #24]
 800ac5a:	e7fe      	b.n	800ac5a <prvDetermineSocketSize+0x3a>

		/* Check if the UDP socket-list has been initialised. */
		configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800ac5c:	4b1e      	ldr	r3, [pc, #120]	; (800acd8 <prvDetermineSocketSize+0xb8>)
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac64:	d009      	beq.n	800ac7a <prvDetermineSocketSize+0x5a>
 800ac66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6a:	f383 8811 	msr	BASEPRI, r3
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	617b      	str	r3, [r7, #20]
 800ac78:	e7fe      	b.n	800ac78 <prvDetermineSocketSize+0x58>
		#if( ipconfigUSE_TCP == 1 )
		{
			/* Check if the TCP socket-list has been initialised. */
			configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800ac7a:	4b18      	ldr	r3, [pc, #96]	; (800acdc <prvDetermineSocketSize+0xbc>)
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac82:	d009      	beq.n	800ac98 <prvDetermineSocketSize+0x78>
 800ac84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	613b      	str	r3, [r7, #16]
 800ac96:	e7fe      	b.n	800ac96 <prvDetermineSocketSize+0x76>
		}
		#endif  /* ipconfigUSE_TCP == 1 */

		if( xProtocol == FREERTOS_IPPROTO_UDP )
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b11      	cmp	r3, #17
 800ac9c:	d108      	bne.n	800acb0 <prvDetermineSocketSize+0x90>
		{
			if( xType != FREERTOS_SOCK_DGRAM )
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d001      	beq.n	800aca8 <prvDetermineSocketSize+0x88>
			{
				xReturn = pdFAIL;
 800aca4:	2300      	movs	r3, #0
 800aca6:	61fb      	str	r3, [r7, #28]
			}
			/* In case a UDP socket is created, do not allocate space for TCP data. */
			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	224c      	movs	r2, #76	; 0x4c
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	e00e      	b.n	800acce <prvDetermineSocketSize+0xae>
		}
#if( ipconfigUSE_TCP == 1 )
		else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2b06      	cmp	r3, #6
 800acb4:	d109      	bne.n	800acca <prvDetermineSocketSize+0xaa>
		{
			if( xType != FREERTOS_SOCK_STREAM )
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d001      	beq.n	800acc0 <prvDetermineSocketSize+0xa0>
			{
				xReturn = pdFAIL;
 800acbc:	2300      	movs	r3, #0
 800acbe:	61fb      	str	r3, [r7, #28]
			}

			*pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800acc6:	601a      	str	r2, [r3, #0]
 800acc8:	e001      	b.n	800acce <prvDetermineSocketSize+0xae>
		}
#endif  /* ipconfigUSE_TCP == 1 */
		else
		{
			xReturn = pdFAIL;
 800acca:	2300      	movs	r3, #0
 800accc:	61fb      	str	r3, [r7, #28]
		}
	}
	/* In case configASSERT() is not used */
	( void )xDomain;
	return xReturn;
 800acce:	69fb      	ldr	r3, [r7, #28]
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3720      	adds	r7, #32
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	2000589c 	.word	0x2000589c
 800acdc:	20005888 	.word	0x20005888

0800ace0 <FreeRTOS_socket>:
/*-----------------------------------------------------------*/

/* FreeRTOS_socket() allocates and initiates a socket */
Socket_t FreeRTOS_socket( BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b088      	sub	sp, #32
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
FreeRTOS_Socket_t *pxSocket;
size_t uxSocketSize;
EventGroupHandle_t xEventGroup;
Socket_t xReturn;

	if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
 800acec:	f107 0310 	add.w	r3, r7, #16
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	68b9      	ldr	r1, [r7, #8]
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f7ff ff93 	bl	800ac20 <prvDetermineSocketSize>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d103      	bne.n	800ad08 <FreeRTOS_socket+0x28>
	{
		xReturn = FREERTOS_INVALID_SOCKET;
 800ad00:	f04f 33ff 	mov.w	r3, #4294967295
 800ad04:	61bb      	str	r3, [r7, #24]
 800ad06:	e07d      	b.n	800ae04 <FreeRTOS_socket+0x124>
	{
		/* Allocate the structure that will hold the socket information.  The
		size depends on the type of socket: UDP sockets need less space.  A
		define 'pvPortMallocSocket' will used to allocate the necessary space.
		By default it points to the FreeRTOS function 'pvPortMalloc()'. */
		pxSocket = ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize );
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fb fab8 	bl	8006280 <pvPortMalloc>
 800ad10:	61f8      	str	r0, [r7, #28]

		if( pxSocket == NULL )
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d103      	bne.n	800ad20 <FreeRTOS_socket+0x40>
		{
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800ad18:	f04f 33ff 	mov.w	r3, #4294967295
 800ad1c:	61fb      	str	r3, [r7, #28]
 800ad1e:	e06f      	b.n	800ae00 <FreeRTOS_socket+0x120>
			iptraceFAILED_TO_CREATE_SOCKET();
		}
		else if( ( xEventGroup = xEventGroupCreate() ) == NULL )
 800ad20:	f7fa fdc9 	bl	80058b6 <xEventGroupCreate>
 800ad24:	6178      	str	r0, [r7, #20]
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d106      	bne.n	800ad3a <FreeRTOS_socket+0x5a>
		{
			vPortFreeSocket( pxSocket );
 800ad2c:	69f8      	ldr	r0, [r7, #28]
 800ad2e:	f7fb fb69 	bl	8006404 <vPortFree>
			pxSocket = ( FreeRTOS_Socket_t * ) FREERTOS_INVALID_SOCKET;
 800ad32:	f04f 33ff 	mov.w	r3, #4294967295
 800ad36:	61fb      	str	r3, [r7, #28]
 800ad38:	e062      	b.n	800ae00 <FreeRTOS_socket+0x120>
			iptraceFAILED_TO_CREATE_EVENT_GROUP();
		}
		else
		{
			/* Clear the entire space to avoid nulling individual entries */
			memset( pxSocket, '\0', uxSocketSize );
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	2100      	movs	r1, #0
 800ad40:	69f8      	ldr	r0, [r7, #28]
 800ad42:	f005 fedf 	bl	8010b04 <memset>

			pxSocket->xEventGroup = xEventGroup;
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	605a      	str	r2, [r3, #4]

			/* Initialise the socket's members.  The semaphore will be created
			if the socket is bound to an address, for now the pointer to the
			semaphore is just set to NULL to show it has not been created. */
			if( xProtocol == FREERTOS_IPPROTO_UDP )
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2b11      	cmp	r3, #17
 800ad50:	d104      	bne.n	800ad5c <FreeRTOS_socket+0x7c>
			{
				vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	3338      	adds	r3, #56	; 0x38
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fa ff9f 	bl	8005c9a <vListInitialise>
					pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
				}
				#endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
			}

			vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	3308      	adds	r3, #8
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7fa ffba 	bl	8005cda <vListInitialiseItem>
			listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	69fa      	ldr	r2, [r7, #28]
 800ad6a:	615a      	str	r2, [r3, #20]

			pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad72:	61da      	str	r2, [r3, #28]
			pxSocket->xSendBlockTime    = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad7a:	621a      	str	r2, [r3, #32]
			pxSocket->ucSocketOptions   = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	2202      	movs	r2, #2
 800ad80:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			pxSocket->ucProtocol        = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

			#if( ipconfigUSE_TCP == 1 )
			{
				if( xProtocol == FREERTOS_IPPROTO_TCP )
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2b06      	cmp	r3, #6
 800ad92:	d135      	bne.n	800ae00 <FreeRTOS_socket+0x120>
				{
					/* StreamSize is expressed in number of bytes */
					/* Round up buffer sizes to nearest multiple of MSS */
					pxSocket->u.xTCP.usInitMSS    = pxSocket->u.xTCP.usCurMSS = ipconfigTCP_MSS;
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800ad9a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	f241 121c 	movw	r2, #4380	; 0x111c
 800adb0:	66da      	str	r2, [r3, #108]	; 0x6c
					pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800adb2:	f240 51b4 	movw	r1, #1460	; 0x5b4
 800adb6:	f640 3068 	movw	r0, #2920	; 0xb68
 800adba:	f7ff fe31 	bl	800aa20 <FreeRTOS_round_up>
 800adbe:	4602      	mov	r2, r0
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	671a      	str	r2, [r3, #112]	; 0x70
					/* Use half of the buffer size of the TCP windows */
					#if ( ipconfigUSE_TCP_WIN == 1 )
					{
						pxSocket->u.xTCP.uxRxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2 ) / ipconfigTCP_MSS );
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adc8:	08db      	lsrs	r3, r3, #3
 800adca:	4a11      	ldr	r2, [pc, #68]	; (800ae10 <FreeRTOS_socket+0x130>)
 800adcc:	fba2 2303 	umull	r2, r3, r2, r3
 800add0:	099b      	lsrs	r3, r3, #6
 800add2:	4619      	mov	r1, r3
 800add4:	2001      	movs	r0, #1
 800add6:	f7ff fe13 	bl	800aa00 <FreeRTOS_max_uint32>
 800adda:	4602      	mov	r2, r0
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize  = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2 ) / ipconfigTCP_MSS );
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ade6:	08db      	lsrs	r3, r3, #3
 800ade8:	4a09      	ldr	r2, [pc, #36]	; (800ae10 <FreeRTOS_socket+0x130>)
 800adea:	fba2 2303 	umull	r2, r3, r2, r3
 800adee:	099b      	lsrs	r3, r3, #6
 800adf0:	4619      	mov	r1, r3
 800adf2:	2001      	movs	r0, #1
 800adf4:	f7ff fe04 	bl	800aa00 <FreeRTOS_max_uint32>
 800adf8:	4602      	mov	r2, r0
 800adfa:	69fb      	ldr	r3, [r7, #28]
 800adfc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				}
			}
			#endif  /* ipconfigUSE_TCP == 1 */
		}

		xReturn = ( Socket_t ) pxSocket;
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	61bb      	str	r3, [r7, #24]
	}

	/* Remove compiler warnings in the case the configASSERT() is not defined. */
	( void ) xDomain;

	return xReturn;
 800ae04:	69bb      	ldr	r3, [r7, #24]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3720      	adds	r7, #32
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	2ce33e6d 	.word	0x2ce33e6d

0800ae14 <FreeRTOS_recvfrom>:
 * FreeRTOS_recvfrom: receive data from a bound socket
 * In this library, the function can only be used with connectionsless sockets
 * (UDP)
 */
int32_t FreeRTOS_recvfrom( Socket_t xSocket, void *pvBuffer, size_t xBufferLength, BaseType_t xFlags, struct freertos_sockaddr *pxSourceAddress, socklen_t *pxSourceAddressLength )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b090      	sub	sp, #64	; 0x40
 800ae18:	af02      	add	r7, sp, #8
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
 800ae20:	603b      	str	r3, [r7, #0]
BaseType_t lPacketCount = 0;
 800ae22:	2300      	movs	r3, #0
 800ae24:	637b      	str	r3, [r7, #52]	; 0x34
NetworkBufferDescriptor_t *pxNetworkBuffer;
FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	627b      	str	r3, [r7, #36]	; 0x24
TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	61fb      	str	r3, [r7, #28]
BaseType_t xTimed = pdFALSE;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;
int32_t lReturn;
EventBits_t xEventBits = ( EventBits_t ) 0;
 800ae32:	2300      	movs	r3, #0
 800ae34:	62bb      	str	r3, [r7, #40]	; 0x28

	if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdTRUE ) == pdFALSE )
 800ae36:	2201      	movs	r2, #1
 800ae38:	2111      	movs	r1, #17
 800ae3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae3c:	f7ff fe7e 	bl	800ab3c <prvValidSocket>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d102      	bne.n	800ae4c <FreeRTOS_recvfrom+0x38>
	{
		return -pdFREERTOS_ERRNO_EINVAL;
 800ae46:	f06f 0315 	mvn.w	r3, #21
 800ae4a:	e0ac      	b.n	800afa6 <FreeRTOS_recvfrom+0x192>
	}

	lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae50:	637b      	str	r3, [r7, #52]	; 0x34

	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the parameters. */
	( void ) pxSourceAddressLength;

	while( lPacketCount == 0 )
 800ae52:	e04b      	b.n	800aeec <FreeRTOS_recvfrom+0xd8>
	{
		if( xTimed == pdFALSE )
 800ae54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d11c      	bne.n	800ae94 <FreeRTOS_recvfrom+0x80>
		{
			/* Check to see if the socket is non blocking on the first
			iteration.  */
			xRemainingTime = pxSocket->xReceiveBlockTime;
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5c:	69db      	ldr	r3, [r3, #28]
 800ae5e:	61fb      	str	r3, [r7, #28]

			if( xRemainingTime == ( TickType_t ) 0 )
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10a      	bne.n	800ae7c <FreeRTOS_recvfrom+0x68>
			{
				#if( ipconfigSUPPORT_SIGNALS != 0 )
				{
					/* Just check for the interrupt flag. */
					xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_INTR,
 800ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae68:	6858      	ldr	r0, [r3, #4]
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	2300      	movs	r3, #0
 800ae70:	2201      	movs	r2, #1
 800ae72:	2140      	movs	r1, #64	; 0x40
 800ae74:	f7fa fd36 	bl	80058e4 <xEventGroupWaitBits>
 800ae78:	62b8      	str	r0, [r7, #40]	; 0x28
						pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, socketDONT_BLOCK );
				}
				#endif /* ipconfigSUPPORT_SIGNALS */
				break;
 800ae7a:	e042      	b.n	800af02 <FreeRTOS_recvfrom+0xee>
			}

			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	f003 0310 	and.w	r3, r3, #16
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d136      	bne.n	800aef4 <FreeRTOS_recvfrom+0xe0>
			{
				break;
			}

			/* To ensure this part only executes once. */
			xTimed = pdTRUE;
 800ae86:	2301      	movs	r3, #1
 800ae88:	633b      	str	r3, [r7, #48]	; 0x30

			/* Fetch the current time. */
			vTaskSetTimeOutState( &xTimeOut );
 800ae8a:	f107 0314 	add.w	r3, r7, #20
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fc fe72 	bl	8007b78 <vTaskSetTimeOutState>
		}

		/* Wait for arrival of data.  While waiting, the IP-task may set the
		'eSOCKET_RECEIVE' bit in 'xEventGroup', if it receives data for this
		socket, thus unblocking this API call. */
		xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_RECEIVE | eSOCKET_INTR,
 800ae94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae96:	6858      	ldr	r0, [r3, #4]
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	2201      	movs	r2, #1
 800aea0:	2141      	movs	r1, #65	; 0x41
 800aea2:	f7fa fd1f 	bl	80058e4 <xEventGroupWaitBits>
 800aea6:	62b8      	str	r0, [r7, #40]	; 0x28
			pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

		#if( ipconfigSUPPORT_SIGNALS != 0 )
		{
			if( ( xEventBits & eSOCKET_INTR ) != 0 )
 800aea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d00b      	beq.n	800aeca <FreeRTOS_recvfrom+0xb6>
			{
				if( ( xEventBits & eSOCKET_RECEIVE ) != 0 )
 800aeb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb4:	f003 0301 	and.w	r3, r3, #1
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d01d      	beq.n	800aef8 <FreeRTOS_recvfrom+0xe4>
				{
					/* Shouldn't have cleared the eSOCKET_RECEIVE flag. */
					xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 800aebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	2101      	movs	r1, #1
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fa fe0e 	bl	8005ae4 <xEventGroupSetBits>
				}
				break;
 800aec8:	e016      	b.n	800aef8 <FreeRTOS_recvfrom+0xe4>
		{
			( void ) xEventBits;
		}
		#endif /* ipconfigSUPPORT_SIGNALS */

		lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800aeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aece:	637b      	str	r3, [r7, #52]	; 0x34

		if( lPacketCount != 0 )
 800aed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d112      	bne.n	800aefc <FreeRTOS_recvfrom+0xe8>
		{
			break;
		}

		/* Has the timeout been reached ? */
		if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) )
 800aed6:	f107 021c 	add.w	r2, r7, #28
 800aeda:	f107 0314 	add.w	r3, r7, #20
 800aede:	4611      	mov	r1, r2
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7fc fe85 	bl	8007bf0 <xTaskCheckForTimeOut>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d109      	bne.n	800af00 <FreeRTOS_recvfrom+0xec>
	while( lPacketCount == 0 )
 800aeec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d0b0      	beq.n	800ae54 <FreeRTOS_recvfrom+0x40>
 800aef2:	e006      	b.n	800af02 <FreeRTOS_recvfrom+0xee>
				break;
 800aef4:	bf00      	nop
 800aef6:	e004      	b.n	800af02 <FreeRTOS_recvfrom+0xee>
				break;
 800aef8:	bf00      	nop
 800aefa:	e002      	b.n	800af02 <FreeRTOS_recvfrom+0xee>
			break;
 800aefc:	bf00      	nop
 800aefe:	e000      	b.n	800af02 <FreeRTOS_recvfrom+0xee>
		{
			break;
 800af00:	bf00      	nop
		}
	} /* while( lPacketCount == 0 ) */

	if( lPacketCount != 0 )
 800af02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af04:	2b00      	cmp	r3, #0
 800af06:	d041      	beq.n	800af8c <FreeRTOS_recvfrom+0x178>
	{
		taskENTER_CRITICAL();
 800af08:	f7fb f8a0 	bl	800604c <vPortEnterCritical>
		{
			/* The owner of the list item is the network buffer. */
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800af0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	623b      	str	r3, [r7, #32]

			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	f003 0304 	and.w	r3, r3, #4
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d103      	bne.n	800af26 <FreeRTOS_recvfrom+0x112>
			{
				/* Remove the network buffer from the list of buffers waiting to
				be processed by the socket. */
				uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800af1e:	6a3b      	ldr	r3, [r7, #32]
 800af20:	4618      	mov	r0, r3
 800af22:	f7fa ff44 	bl	8005dae <uxListRemove>
			}
		}
		taskEXIT_CRITICAL();
 800af26:	f7fb f8bf 	bl	80060a8 <vPortExitCritical>

		/* The returned value is the data length, which may have been capped to
		the receive buffer size. */
		lReturn = ( int32_t ) pxNetworkBuffer->xDataLength;
 800af2a:	6a3b      	ldr	r3, [r7, #32]
 800af2c:	69db      	ldr	r3, [r3, #28]
 800af2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxSourceAddress != NULL )
 800af30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af32:	2b00      	cmp	r3, #0
 800af34:	d007      	beq.n	800af46 <FreeRTOS_recvfrom+0x132>
		{
			pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
 800af36:	6a3b      	ldr	r3, [r7, #32]
 800af38:	8c1a      	ldrh	r2, [r3, #32]
 800af3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af3c:	805a      	strh	r2, [r3, #2]
			pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	695a      	ldr	r2, [r3, #20]
 800af42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af44:	605a      	str	r2, [r3, #4]
		}

		if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	f003 0301 	and.w	r3, r3, #1
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d116      	bne.n	800af7e <FreeRTOS_recvfrom+0x16a>
		{
			/* The zero copy flag is not set.  Truncate the length if it won't
			fit in the provided buffer. */
			if( lReturn > ( int32_t ) xBufferLength )
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af54:	429a      	cmp	r2, r3
 800af56:	dd01      	ble.n	800af5c <FreeRTOS_recvfrom+0x148>
			{
				iptraceRECVFROM_DISCARDING_BYTES( ( xBufferLength - lReturn ) );
				lReturn = ( int32_t )xBufferLength;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

			/* Copy the received data into the provided buffer, then release the
			network buffer. */
			memcpy( pvBuffer, ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ), ( size_t )lReturn );
 800af5c:	6a3b      	ldr	r3, [r7, #32]
 800af5e:	699b      	ldr	r3, [r3, #24]
 800af60:	332a      	adds	r3, #42	; 0x2a
 800af62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af64:	4619      	mov	r1, r3
 800af66:	68b8      	ldr	r0, [r7, #8]
 800af68:	f005 fda7 	bl	8010aba <memcpy>

			if( ( xFlags & FREERTOS_MSG_PEEK ) == 0 )
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	f003 0304 	and.w	r3, r3, #4
 800af72:	2b00      	cmp	r3, #0
 800af74:	d116      	bne.n	800afa4 <FreeRTOS_recvfrom+0x190>
			{
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800af76:	6a38      	ldr	r0, [r7, #32]
 800af78:	f004 fdf0 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
 800af7c:	e012      	b.n	800afa4 <FreeRTOS_recvfrom+0x190>
		{
			/* The zero copy flag was set.  pvBuffer is not a buffer into which
			the received data can be copied, but a pointer that must be set to
			point to the buffer in which the received data has already been
			placed. */
			*( ( void** ) pvBuffer ) = ( void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ) );
 800af7e:	6a3b      	ldr	r3, [r7, #32]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	601a      	str	r2, [r3, #0]
 800af8a:	e00b      	b.n	800afa4 <FreeRTOS_recvfrom+0x190>
		}

	}
#if( ipconfigSUPPORT_SIGNALS != 0 )
	else if( ( xEventBits & eSOCKET_INTR ) != 0 )
 800af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af92:	2b00      	cmp	r3, #0
 800af94:	d003      	beq.n	800af9e <FreeRTOS_recvfrom+0x18a>
	{
		lReturn = -pdFREERTOS_ERRNO_EINTR;
 800af96:	f06f 0303 	mvn.w	r3, #3
 800af9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af9c:	e002      	b.n	800afa4 <FreeRTOS_recvfrom+0x190>
		iptraceRECVFROM_INTERRUPTED();
	}
#endif /* ipconfigSUPPORT_SIGNALS */
	else
	{
		lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800af9e:	f06f 030a 	mvn.w	r3, #10
 800afa2:	62fb      	str	r3, [r7, #44]	; 0x2c
		iptraceRECVFROM_TIMEOUT();
	}

	return lReturn;
 800afa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3738      	adds	r7, #56	; 0x38
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <FreeRTOS_sendto>:
/*-----------------------------------------------------------*/

int32_t FreeRTOS_sendto( Socket_t xSocket, const void *pvBuffer, size_t xTotalDataLength, BaseType_t xFlags, const struct freertos_sockaddr *pxDestinationAddress, socklen_t xDestinationAddressLength )
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b08e      	sub	sp, #56	; 0x38
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	60f8      	str	r0, [r7, #12]
 800afb6:	60b9      	str	r1, [r7, #8]
 800afb8:	607a      	str	r2, [r7, #4]
 800afba:	603b      	str	r3, [r7, #0]
NetworkBufferDescriptor_t *pxNetworkBuffer;
IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800afbc:	2303      	movs	r3, #3
 800afbe:	f887 3020 	strb.w	r3, [r7, #32]
 800afc2:	2300      	movs	r3, #0
 800afc4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
TickType_t xTicksToWait;
int32_t lReturn = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	633b      	str	r3, [r7, #48]	; 0x30
FreeRTOS_Socket_t *pxSocket;

	pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the
	parameters. */
	( void ) xDestinationAddressLength;
	configASSERT( pvBuffer );
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d109      	bne.n	800afe8 <FreeRTOS_sendto+0x3a>
 800afd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	62bb      	str	r3, [r7, #40]	; 0x28
 800afe6:	e7fe      	b.n	800afe6 <FreeRTOS_sendto+0x38>

	if( xTotalDataLength <= ( size_t ) ipMAX_UDP_PAYLOAD_LENGTH )
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 800afee:	d875      	bhi.n	800b0dc <FreeRTOS_sendto+0x12e>
	{
		/* If the socket is not already bound to an address, bind it now.
		Passing NULL as the address parameter tells FreeRTOS_bind() to select
		the address to bind to. */
		if( ( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE ) ||
 800aff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff2:	699b      	ldr	r3, [r3, #24]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d107      	bne.n	800b008 <FreeRTOS_sendto+0x5a>
			( FreeRTOS_bind( xSocket, NULL, 0u ) == 0 ) )
 800aff8:	2200      	movs	r2, #0
 800affa:	2100      	movs	r1, #0
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f000 f872 	bl	800b0e6 <FreeRTOS_bind>
 800b002:	4603      	mov	r3, r0
		if( ( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE ) ||
 800b004:	2b00      	cmp	r3, #0
 800b006:	d169      	bne.n	800b0dc <FreeRTOS_sendto+0x12e>
		{
			xTicksToWait = pxSocket->xSendBlockTime;
 800b008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00a:	6a1b      	ldr	r3, [r3, #32]
 800b00c:	617b      	str	r3, [r7, #20]
					xTicksToWait = ( TickType_t )0;
				}
			}
			#endif /* ipconfigUSE_CALLBACKS */

			if( ( xFlags & FREERTOS_MSG_DONTWAIT ) != 0 )
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	f003 0310 	and.w	r3, r3, #16
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <FreeRTOS_sendto+0x6e>
			{
				xTicksToWait = ( TickType_t ) 0;
 800b018:	2300      	movs	r3, #0
 800b01a:	617b      	str	r3, [r7, #20]
			}

			if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	f003 0301 	and.w	r3, r3, #1
 800b022:	2b00      	cmp	r3, #0
 800b024:	d125      	bne.n	800b072 <FreeRTOS_sendto+0xc4>
			{
				/* Zero copy is not set, so obtain a network buffer into
				which the payload will be copied. */
				vTaskSetTimeOutState( &xTimeOut );
 800b026:	f107 0318 	add.w	r3, r7, #24
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fc fda4 	bl	8007b78 <vTaskSetTimeOutState>

				/* Block until a buffer becomes available, or until a
				timeout has been reached */
				pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( xTotalDataLength + sizeof( UDPPacket_t ), xTicksToWait );
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	332a      	adds	r3, #42	; 0x2a
 800b034:	697a      	ldr	r2, [r7, #20]
 800b036:	4611      	mov	r1, r2
 800b038:	4618      	mov	r0, r3
 800b03a:	f004 fd17 	bl	800fa6c <pxGetNetworkBufferWithDescriptor>
 800b03e:	6378      	str	r0, [r7, #52]	; 0x34

				if( pxNetworkBuffer != NULL )
 800b040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b042:	2b00      	cmp	r3, #0
 800b044:	d019      	beq.n	800b07a <FreeRTOS_sendto+0xcc>
				{
					memcpy( ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ), ( void * ) pvBuffer, xTotalDataLength );
 800b046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b048:	699b      	ldr	r3, [r3, #24]
 800b04a:	332a      	adds	r3, #42	; 0x2a
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	68b9      	ldr	r1, [r7, #8]
 800b050:	4618      	mov	r0, r3
 800b052:	f005 fd32 	bl	8010aba <memcpy>

					if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800b056:	f107 0214 	add.w	r2, r7, #20
 800b05a:	f107 0318 	add.w	r3, r7, #24
 800b05e:	4611      	mov	r1, r2
 800b060:	4618      	mov	r0, r3
 800b062:	f7fc fdc5 	bl	8007bf0 <xTaskCheckForTimeOut>
 800b066:	4603      	mov	r3, r0
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d106      	bne.n	800b07a <FreeRTOS_sendto+0xcc>
					{
						/* The entire block time has been used up. */
						xTicksToWait = ( TickType_t ) 0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	617b      	str	r3, [r7, #20]
 800b070:	e003      	b.n	800b07a <FreeRTOS_sendto+0xcc>
			else
			{
				/* When zero copy is used, pvBuffer is a pointer to the
				payload of a buffer that has already been obtained from the
				stack.  Obtain the network buffer pointer from the buffer. */
				pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( (void*)pvBuffer );
 800b072:	68b8      	ldr	r0, [r7, #8]
 800b074:	f7ff f851 	bl	800a11a <pxUDPPayloadBuffer_to_NetworkBuffer>
 800b078:	6378      	str	r0, [r7, #52]	; 0x34
			}

			if( pxNetworkBuffer != NULL )
 800b07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d02d      	beq.n	800b0dc <FreeRTOS_sendto+0x12e>
			{
				pxNetworkBuffer->xDataLength = xTotalDataLength;
 800b080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	61da      	str	r2, [r3, #28]
				pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800b086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b088:	885a      	ldrh	r2, [r3, #2]
 800b08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b08c:	841a      	strh	r2, [r3, #32]
				pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800b08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	b29a      	uxth	r2, r3
 800b094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b096:	845a      	strh	r2, [r3, #34]	; 0x22
				pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
 800b098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b09a:	685a      	ldr	r2, [r3, #4]
 800b09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b09e:	615a      	str	r2, [r3, #20]

				/* The socket options are passed to the IP layer in the
				space that will eventually get used by the Ethernet header. */
				pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800b0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a2:	699b      	ldr	r3, [r3, #24]
 800b0a4:	3306      	adds	r3, #6
 800b0a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0a8:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800b0ac:	701a      	strb	r2, [r3, #0]

				/* Tell the networking task that the packet needs sending. */
				xStackTxEvent.pvData = pxNetworkBuffer;
 800b0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0b0:	627b      	str	r3, [r7, #36]	; 0x24

				/* Ask the IP-task to send this packet */
				if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	f107 0320 	add.w	r3, r7, #32
 800b0b8:	4611      	mov	r1, r2
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7ff f95e 	bl	800a37c <xSendEventStructToIPTask>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d102      	bne.n	800b0cc <FreeRTOS_sendto+0x11e>
				{
					/* The packet was successfully sent to the IP task. */
					lReturn = ( int32_t ) xTotalDataLength;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	633b      	str	r3, [r7, #48]	; 0x30
 800b0ca:	e007      	b.n	800b0dc <FreeRTOS_sendto+0x12e>
				}
				else
				{
					/* If the buffer was allocated in this function, release
					it. */
					if( ( xFlags & FREERTOS_ZERO_COPY ) == 0 )
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	f003 0301 	and.w	r3, r3, #1
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d102      	bne.n	800b0dc <FreeRTOS_sendto+0x12e>
					{
						vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800b0d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b0d8:	f004 fd40 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
	{
		/* The data is longer than the available buffer space. */
		iptraceSENDTO_DATA_TOO_LONG();
	}

	return lReturn;
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
} /* Tested */
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3738      	adds	r7, #56	; 0x38
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <FreeRTOS_bind>:
 * be used for both UDP and TCP sockets.  The actual binding will be performed
 * by the IP-task to avoid mutual access to the bound-socket-lists
 * (xBoundUDPSocketsList or xBoundTCPSocketsList).
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket, struct freertos_sockaddr * pxAddress, socklen_t xAddressLength )
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b08a      	sub	sp, #40	; 0x28
 800b0ea:	af02      	add	r7, sp, #8
 800b0ec:	60f8      	str	r0, [r7, #12]
 800b0ee:	60b9      	str	r1, [r7, #8]
 800b0f0:	607a      	str	r2, [r7, #4]
IPStackEvent_t xBindEvent;
FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	61bb      	str	r3, [r7, #24]
BaseType_t xReturn = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	61fb      	str	r3, [r7, #28]

	( void ) xAddressLength;

	if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d003      	beq.n	800b108 <FreeRTOS_bind+0x22>
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b106:	d103      	bne.n	800b110 <FreeRTOS_bind+0x2a>
	{
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b108:	f06f 0315 	mvn.w	r3, #21
 800b10c:	61fb      	str	r3, [r7, #28]
 800b10e:	e044      	b.n	800b19a <FreeRTOS_bind+0xb4>
	}
	/* Once a socket is bound to a port, it can not be bound to a different
	port number */
	else if( socketSOCKET_IS_BOUND( pxSocket) != pdFALSE )
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d001      	beq.n	800b11c <FreeRTOS_bind+0x36>
 800b118:	2301      	movs	r3, #1
 800b11a:	e000      	b.n	800b11e <FreeRTOS_bind+0x38>
 800b11c:	2300      	movs	r3, #0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <FreeRTOS_bind+0x44>
	{
		/* The socket is already bound. */
		FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
		xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b122:	f06f 0315 	mvn.w	r3, #21
 800b126:	61fb      	str	r3, [r7, #28]
 800b128:	e037      	b.n	800b19a <FreeRTOS_bind+0xb4>
	}
	else
	{
		/* Prepare a messages to the IP-task in order to perform the binding.
		The desired port number will be passed in usLocalPort. */
		xBindEvent.eEventType = eSocketBindEvent;
 800b12a:	2308      	movs	r3, #8
 800b12c:	743b      	strb	r3, [r7, #16]
		xBindEvent.pvData = ( void * ) xSocket;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	617b      	str	r3, [r7, #20]
		if( pxAddress != NULL )
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00e      	beq.n	800b156 <FreeRTOS_bind+0x70>
		{
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	885b      	ldrh	r3, [r3, #2]
 800b13c:	021b      	lsls	r3, r3, #8
 800b13e:	b21a      	sxth	r2, r3
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	885b      	ldrh	r3, [r3, #2]
 800b144:	0a1b      	lsrs	r3, r3, #8
 800b146:	b29b      	uxth	r3, r3
 800b148:	b21b      	sxth	r3, r3
 800b14a:	4313      	orrs	r3, r2
 800b14c:	b21b      	sxth	r3, r3
 800b14e:	b29a      	uxth	r2, r3
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	849a      	strh	r2, [r3, #36]	; 0x24
 800b154:	e002      	b.n	800b15c <FreeRTOS_bind+0x76>
		}
		else
		{
			/* Caller wants to bind to a random port number. */
			pxSocket->usLocalPort = 0u;
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	2200      	movs	r2, #0
 800b15a:	849a      	strh	r2, [r3, #36]	; 0x24
		}

		/* portMAX_DELAY is used as a the time-out parameter, as binding *must*
		succeed before the socket can be used.  _RB_ The use of an infinite
		block time needs be changed as it could result in the task hanging. */
		if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800b15c:	f107 0310 	add.w	r3, r7, #16
 800b160:	f04f 31ff 	mov.w	r1, #4294967295
 800b164:	4618      	mov	r0, r3
 800b166:	f7ff f909 	bl	800a37c <xSendEventStructToIPTask>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d103      	bne.n	800b178 <FreeRTOS_bind+0x92>
		{
			/* Failed to wake-up the IP-task, no use to wait for it */
			FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
			xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800b170:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800b174:	61fb      	str	r3, [r7, #28]
 800b176:	e010      	b.n	800b19a <FreeRTOS_bind+0xb4>
		}
		else
		{
			/* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
			job. */
			xEventGroupWaitBits( pxSocket->xEventGroup, eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	6858      	ldr	r0, [r3, #4]
 800b17c:	f04f 33ff 	mov.w	r3, #4294967295
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	2300      	movs	r3, #0
 800b184:	2201      	movs	r2, #1
 800b186:	2110      	movs	r1, #16
 800b188:	f7fa fbac 	bl	80058e4 <xEventGroupWaitBits>
			if( socketSOCKET_IS_BOUND( pxSocket ) == pdFALSE )
 800b18c:	69bb      	ldr	r3, [r7, #24]
 800b18e:	699b      	ldr	r3, [r3, #24]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d102      	bne.n	800b19a <FreeRTOS_bind+0xb4>
			{
				xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b194:	f06f 0315 	mvn.w	r3, #21
 800b198:	61fb      	str	r3, [r7, #28]
			}
		}
	}

	return xReturn;
 800b19a:	69fb      	ldr	r3, [r7, #28]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3720      	adds	r7, #32
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <vSocketBind>:
 * vSocketBind(): internal version of bind() that should not be called directly.
 * 'xInternal' is used for TCP sockets only: it allows to have several
 * (connected) child sockets bound to the same server port.
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t *pxSocket, struct freertos_sockaddr * pxAddress, size_t uxAddressLength, BaseType_t xInternal )
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b08c      	sub	sp, #48	; 0x30
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
 800b1b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
	struct freertos_sockaddr xAddress;
#endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

#if( ipconfigUSE_TCP == 1 )
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b1bc:	2b06      	cmp	r3, #6
 800b1be:	d102      	bne.n	800b1c6 <vSocketBind+0x22>
	{
		pxSocketList = &xBoundTCPSocketsList;
 800b1c0:	4b3e      	ldr	r3, [pc, #248]	; (800b2bc <vSocketBind+0x118>)
 800b1c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1c4:	e001      	b.n	800b1ca <vSocketBind+0x26>
	}
	else
#endif  /* ipconfigUSE_TCP == 1 */
	{
		pxSocketList = &xBoundUDPSocketsList;
 800b1c6:	4b3e      	ldr	r3, [pc, #248]	; (800b2c0 <vSocketBind+0x11c>)
 800b1c8:	62bb      	str	r3, [r7, #40]	; 0x28

	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the parameters. */
	( void ) uxAddressLength;

	configASSERT( pxSocket );
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d109      	bne.n	800b1e4 <vSocketBind+0x40>
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b1e2:	e7fe      	b.n	800b1e2 <vSocketBind+0x3e>
	configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ea:	d109      	bne.n	800b200 <vSocketBind+0x5c>
 800b1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f0:	f383 8811 	msr	BASEPRI, r3
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	f3bf 8f4f 	dsb	sy
 800b1fc:	623b      	str	r3, [r7, #32]
 800b1fe:	e7fe      	b.n	800b1fe <vSocketBind+0x5a>
		/* pxAddress will be NULL if sendto() was called on a socket without the
		socket being bound to an address.  In this case, automatically allocate
		an address to the socket.  There is a very tiny chance that the allocated
		port will already be in use - if that is the case, then the check below
		[pxListFindListItemWithValue()] will result in an error being returned. */
		if( pxAddress == NULL )
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d105      	bne.n	800b212 <vSocketBind+0x6e>
		{
			pxAddress = &xAddress;
 800b206:	f107 0314 	add.w	r3, r7, #20
 800b20a:	60bb      	str	r3, [r7, #8]
			/* For now, put it to zero, will be assigned later */
			pxAddress->sin_port = 0u;
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	2200      	movs	r2, #0
 800b210:	805a      	strh	r2, [r3, #2]
	}
	#endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

	/* Sockets must be bound before calling FreeRTOS_sendto() if
	ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
	configASSERT( pxAddress );
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d109      	bne.n	800b22c <vSocketBind+0x88>
 800b218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21c:	f383 8811 	msr	BASEPRI, r3
 800b220:	f3bf 8f6f 	isb	sy
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	61fb      	str	r3, [r7, #28]
 800b22a:	e7fe      	b.n	800b22a <vSocketBind+0x86>

	if( pxAddress != NULL )
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d03c      	beq.n	800b2ac <vSocketBind+0x108>
	{
		if( pxAddress->sin_port == 0u )
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	885b      	ldrh	r3, [r3, #2]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d109      	bne.n	800b24e <vSocketBind+0xaa>
		{
			pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b240:	4618      	mov	r0, r3
 800b242:	f000 fa9f 	bl	800b784 <prvGetPrivatePortNumber>
 800b246:	4603      	mov	r3, r0
 800b248:	461a      	mov	r2, r3
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	805a      	strh	r2, [r3, #2]
		confirmed that the socket was not yet bound to a port.  If it is called
		from the IP-task, no such check is necessary. */

		/* Check to ensure the port is not already in use.  If the bind is
		called internally, a port MAY be used by more than one socket. */
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d004      	beq.n	800b25e <vSocketBind+0xba>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b25a:	2b06      	cmp	r3, #6
 800b25c:	d00c      	beq.n	800b278 <vSocketBind+0xd4>
			( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	885b      	ldrh	r3, [r3, #2]
 800b262:	4619      	mov	r1, r3
 800b264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b266:	f000 fad9 	bl	800b81c <pxListFindListItemWithValue>
 800b26a:	4603      	mov	r3, r0
		if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d003      	beq.n	800b278 <vSocketBind+0xd4>
		{
			FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
				pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ? "TC" : "UD",
				FreeRTOS_ntohs( pxAddress->sin_port ) ) );
			xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800b270:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800b274:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b276:	e01c      	b.n	800b2b2 <vSocketBind+0x10e>
		}
		else
		{
			/* Allocate the port number to the socket.
			This macro will set 'xBoundSocketListItem->xItemValue' */
			socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	885b      	ldrh	r3, [r3, #2]
 800b27c:	461a      	mov	r2, r3
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	609a      	str	r2, [r3, #8]

			/* And also store it in a socket field 'usLocalPort' in host-byte-order,
			mostly used for logging and debugging purposes */
			pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	885b      	ldrh	r3, [r3, #2]
 800b286:	021b      	lsls	r3, r3, #8
 800b288:	b21a      	sxth	r2, r3
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	885b      	ldrh	r3, [r3, #2]
 800b28e:	0a1b      	lsrs	r3, r3, #8
 800b290:	b29b      	uxth	r3, r3
 800b292:	b21b      	sxth	r3, r3
 800b294:	4313      	orrs	r3, r2
 800b296:	b21b      	sxth	r3, r3
 800b298:	b29a      	uxth	r2, r3
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	849a      	strh	r2, [r3, #36]	; 0x24
					vTaskSuspendAll();
				}
				#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

				/* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
				vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	3308      	adds	r3, #8
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2a6:	f7fa fd25 	bl	8005cf4 <vListInsertEnd>
 800b2aa:	e002      	b.n	800b2b2 <vSocketBind+0x10e>
			}
		}
	}
	else
	{
		xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800b2ac:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800b2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if( xReturn != 0 )
	{
		iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
	}

	return xReturn;
 800b2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
} /* Tested */
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3730      	adds	r7, #48	; 0x30
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	20005888 	.word	0x20005888
 800b2c0:	2000589c 	.word	0x2000589c

0800b2c4 <FreeRTOS_closesocket>:
 * In case of a TCP socket: the connection will not be closed automatically
 * Subsequent messages for the closed socket will be responded to with a RST
 * The IP-task will actually close the socket, after receiving a 'eSocketCloseEvent' message
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
BaseType_t xResult;
#if( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 )
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * )xSocket;
#endif
IPStackEvent_t xCloseEvent;
xCloseEvent.eEventType = eSocketCloseEvent;
 800b2cc:	2309      	movs	r3, #9
 800b2ce:	733b      	strb	r3, [r7, #12]
xCloseEvent.pvData = ( void * ) xSocket;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	613b      	str	r3, [r7, #16]

	if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d003      	beq.n	800b2e2 <FreeRTOS_closesocket+0x1e>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e0:	d102      	bne.n	800b2e8 <FreeRTOS_closesocket+0x24>
	{
		xResult = 0;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	617b      	str	r3, [r7, #20]
 800b2e6:	e00e      	b.n	800b306 <FreeRTOS_closesocket+0x42>
		packet handling. */

		/* Note when changing the time-out value below, it must be checked who is calling
		this function. If it is called by the IP-task, a deadlock could occur.
		The IP-task would only call it in case of a user call-back */
		if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 800b2e8:	f107 030c 	add.w	r3, r7, #12
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7ff f844 	bl	800a37c <xSendEventStructToIPTask>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d103      	bne.n	800b302 <FreeRTOS_closesocket+0x3e>
		{
			FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
			xResult = -1;
 800b2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b2fe:	617b      	str	r3, [r7, #20]
 800b300:	e001      	b.n	800b306 <FreeRTOS_closesocket+0x42>
		}
		else
		{
			xResult = 1;
 800b302:	2301      	movs	r3, #1
 800b304:	617b      	str	r3, [r7, #20]
		}
	}

	return xResult;
 800b306:	697b      	ldr	r3, [r7, #20]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3718      	adds	r7, #24
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <vSocketClose>:

/* This is the internal version of FreeRTOS_closesocket()
 * It will be called by the IPtask only to avoid problems with synchronicity
 */
void *vSocketClose( FreeRTOS_Socket_t *pxSocket )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
NetworkBufferDescriptor_t *pxNetworkBuffer;

	#if( ipconfigUSE_TCP == 1 )
	{
		/* For TCP: clean up a little more. */
		if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b31e:	2b06      	cmp	r3, #6
 800b320:	d122      	bne.n	800b368 <vSocketClose+0x58>
		{
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b326:	2b00      	cmp	r3, #0
 800b328:	d004      	beq.n	800b334 <vSocketClose+0x24>
				{
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b32e:	4618      	mov	r0, r3
 800b330:	f004 fc14 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
				}
				/* Free the resources which were claimed by the tcpWin member */
				vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	33dc      	adds	r3, #220	; 0xdc
 800b338:	4618      	mov	r0, r3
 800b33a:	f003 fc1b 	bl	800eb74 <vTCPWindowDestroy>
			}
			#endif /* ipconfigUSE_TCP_WIN */

			/* Free the input and output streams */
			if( pxSocket->u.xTCP.rxStream != NULL )
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b342:	2b00      	cmp	r3, #0
 800b344:	d004      	beq.n	800b350 <vSocketClose+0x40>
			{
				vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fb f85a 	bl	8006404 <vPortFree>
			}

			if( pxSocket->u.xTCP.txStream != NULL )
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b354:	2b00      	cmp	r3, #0
 800b356:	d004      	beq.n	800b362 <vSocketClose+0x52>
			{
				vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7fb f851 	bl	8006404 <vPortFree>
			}

			/* In case this is a child socket, make sure the child-count of the
			parent socket is decreased. */
			prvTCPSetSocketCount( pxSocket );
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f834 	bl	800b3d0 <prvTCPSetSocketCount>
	}
	#endif  /* ipconfigUSE_TCP == 1 */

	/* Socket must be unbound first, to ensure no more packets are queued on
	it. */
	if( socketSOCKET_IS_BOUND( pxSocket ) != pdFALSE )
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <vSocketClose+0x64>
 800b370:	2301      	movs	r3, #1
 800b372:	e000      	b.n	800b376 <vSocketClose+0x66>
 800b374:	2300      	movs	r3, #0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d004      	beq.n	800b384 <vSocketClose+0x74>
		{
			vTaskSuspendAll();
		}
		#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

		uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	3308      	adds	r3, #8
 800b37e:	4618      	mov	r0, r3
 800b380:	f7fa fd15 	bl	8005dae <uxListRemove>
		#endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
	}

	/* Now the socket is not bound the list of waiting packets can be
	drained. */
	if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b38a:	2b11      	cmp	r3, #17
 800b38c:	d10f      	bne.n	800b3ae <vSocketClose+0x9e>
	{
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800b38e:	e00a      	b.n	800b3a6 <vSocketClose+0x96>
		{
			pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	60fb      	str	r3, [r7, #12]
			uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fa fd07 	bl	8005dae <uxListRemove>
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f004 fbdb 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
		while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1f0      	bne.n	800b390 <vSocketClose+0x80>
		}
	}

	if( pxSocket->xEventGroup )
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d004      	beq.n	800b3c0 <vSocketClose+0xb0>
	{
		vEventGroupDelete( pxSocket->xEventGroup );
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7fa fc1b 	bl	8005bf6 <vEventGroupDelete>
		}
	}
	#endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

	/* Anf finally, after all resources have been freed, free the socket space */
	vPortFreeSocket( pxSocket );
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f7fb f81f 	bl	8006404 <vPortFree>

	return 0;
 800b3c6:	2300      	movs	r3, #0
} /* Tested */
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <prvTCPSetSocketCount>:
	 * When a child socket gets closed, make sure to update the child-count of the
	 * parent.  When a listening parent socket is closed, make sure no child-sockets
	 * keep a pointer to it.
	 */
	static void prvTCPSetSocketCount( FreeRTOS_Socket_t *pxSocketToDelete )
	{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b087      	sub	sp, #28
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
	const ListItem_t *pxIterator;
	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800b3d8:	4b18      	ldr	r3, [pc, #96]	; (800b43c <prvTCPSetSocketCount+0x6c>)
 800b3da:	613b      	str	r3, [r7, #16]
	FreeRTOS_Socket_t *pxOtherSocket;
	uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b3e0:	81fb      	strh	r3, [r7, #14]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	617b      	str	r3, [r7, #20]
 800b3e8:	e01d      	b.n	800b426 <prvTCPSetSocketCount+0x56>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxOtherSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	60bb      	str	r3, [r7, #8]
			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d112      	bne.n	800b420 <prvTCPSetSocketCount+0x50>
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if( ( pxOtherSocket->u.xTCP.ucTCPState == eTCP_LISTEN ) &&
 800b3fe:	89fa      	ldrh	r2, [r7, #14]
 800b400:	429a      	cmp	r2, r3
 800b402:	d10d      	bne.n	800b420 <prvTCPSetSocketCount+0x50>
				( pxOtherSocket->u.xTCP.usChildCount ) )
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
				( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d008      	beq.n	800b420 <prvTCPSetSocketCount+0x50>
			{
				pxOtherSocket->u.xTCP.usChildCount--;
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800b414:	3b01      	subs	r3, #1
 800b416:	b29a      	uxth	r2, r3
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
				FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
					pxOtherSocket->usLocalPort,
					pxOtherSocket->u.xTCP.usChildCount,
					pxOtherSocket->u.xTCP.usBacklog,
					pxOtherSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );
				break;
 800b41e:	e006      	b.n	800b42e <prvTCPSetSocketCount+0x5e>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	617b      	str	r3, [r7, #20]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800b426:	697a      	ldr	r2, [r7, #20]
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d1dd      	bne.n	800b3ea <prvTCPSetSocketCount+0x1a>
			}
		}
	}
 800b42e:	bf00      	nop
 800b430:	371c      	adds	r7, #28
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	20005890 	.word	0x20005890

0800b440 <FreeRTOS_setsockopt>:
#endif /* ipconfigUSE_TCP == 1 */

/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_setsockopt( Socket_t xSocket, int32_t lLevel, int32_t lOptionName, const void *pvOptionValue, size_t xOptionLength )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08c      	sub	sp, #48	; 0x30
 800b444:	af02      	add	r7, sp, #8
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b44e:	f06f 0315 	mvn.w	r3, #21
 800b452:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t lOptionValue;
FreeRTOS_Socket_t *pxSocket;

	pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	623b      	str	r3, [r7, #32]
	/* The function prototype is designed to maintain the expected Berkeley
	sockets standard, but this implementation does not use all the parameters. */
	( void ) lLevel;
	( void ) xOptionLength;

	configASSERT( xSocket );
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d109      	bne.n	800b472 <FreeRTOS_setsockopt+0x32>
 800b45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b462:	f383 8811 	msr	BASEPRI, r3
 800b466:	f3bf 8f6f 	isb	sy
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	613b      	str	r3, [r7, #16]
 800b470:	e7fe      	b.n	800b470 <FreeRTOS_setsockopt+0x30>

	switch( lOptionName )
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b0f      	cmp	r3, #15
 800b476:	f200 8171 	bhi.w	800b75c <FreeRTOS_setsockopt+0x31c>
 800b47a:	a201      	add	r2, pc, #4	; (adr r2, 800b480 <FreeRTOS_setsockopt+0x40>)
 800b47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b480:	0800b4c1 	.word	0x0800b4c1
 800b484:	0800b4cf 	.word	0x0800b4cf
 800b488:	0800b4fb 	.word	0x0800b4fb
 800b48c:	0800b75d 	.word	0x0800b75d
 800b490:	0800b531 	.word	0x0800b531
 800b494:	0800b531 	.word	0x0800b531
 800b498:	0800b75d 	.word	0x0800b75d
 800b49c:	0800b75d 	.word	0x0800b75d
 800b4a0:	0800b75d 	.word	0x0800b75d
 800b4a4:	0800b75d 	.word	0x0800b75d
 800b4a8:	0800b75d 	.word	0x0800b75d
 800b4ac:	0800b633 	.word	0x0800b633
 800b4b0:	0800b66b 	.word	0x0800b66b
 800b4b4:	0800b58d 	.word	0x0800b58d
 800b4b8:	0800b6a1 	.word	0x0800b6a1
 800b4bc:	0800b70b 	.word	0x0800b70b
	{
		case FREERTOS_SO_RCVTIMEO	:
			/* Receive time out. */
			pxSocket->xReceiveBlockTime = *( ( TickType_t * ) pvOptionValue );
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	6a3b      	ldr	r3, [r7, #32]
 800b4c6:	61da      	str	r2, [r3, #28]
			xReturn = 0;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800b4cc:	e155      	b.n	800b77a <FreeRTOS_setsockopt+0x33a>

		case FREERTOS_SO_SNDTIMEO	:
			pxSocket->xSendBlockTime = *( ( TickType_t * ) pvOptionValue );
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	6a3b      	ldr	r3, [r7, #32]
 800b4d4:	621a      	str	r2, [r3, #32]
			if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800b4d6:	6a3b      	ldr	r3, [r7, #32]
 800b4d8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b4dc:	2b11      	cmp	r3, #17
 800b4de:	d109      	bne.n	800b4f4 <FreeRTOS_setsockopt+0xb4>
			{
				/* The send time out is capped for the reason stated in the
				comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
				in FreeRTOSIPConfig.h (assuming an official configuration file
				is being used. */
				if( pxSocket->xSendBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800b4e0:	6a3b      	ldr	r3, [r7, #32]
 800b4e2:	6a1b      	ldr	r3, [r3, #32]
 800b4e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d903      	bls.n	800b4f4 <FreeRTOS_setsockopt+0xb4>
				{
					pxSocket->xSendBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800b4ec:	6a3b      	ldr	r3, [r7, #32]
 800b4ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4f2:	621a      	str	r2, [r3, #32]
			{
				/* For TCP socket, it isn't necessary to limit the blocking time
				because	the FreeRTOS_send() function does not wait for a network
				buffer to become available. */
			}
			xReturn = 0;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800b4f8:	e13f      	b.n	800b77a <FreeRTOS_setsockopt+0x33a>
				break;
		#endif /* ipconfigUDP_MAX_RX_PACKETS */

		case FREERTOS_SO_UDPCKSUM_OUT :
			/* Turn calculating of the UDP checksum on/off for this socket. */
			lOptionValue = ( BaseType_t ) pvOptionValue;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	61fb      	str	r3, [r7, #28]

			if( lOptionValue == 0 )
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d109      	bne.n	800b518 <FreeRTOS_setsockopt+0xd8>
			{
				pxSocket->ucSocketOptions &= ( uint8_t ) ~FREERTOS_SO_UDPCKSUM_OUT;
 800b504:	6a3b      	ldr	r3, [r7, #32]
 800b506:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b50a:	f023 0302 	bic.w	r3, r3, #2
 800b50e:	b2da      	uxtb	r2, r3
 800b510:	6a3b      	ldr	r3, [r7, #32]
 800b512:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800b516:	e008      	b.n	800b52a <FreeRTOS_setsockopt+0xea>
			}
			else
			{
				pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800b518:	6a3b      	ldr	r3, [r7, #32]
 800b51a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b51e:	f043 0302 	orr.w	r3, r3, #2
 800b522:	b2da      	uxtb	r2, r3
 800b524:	6a3b      	ldr	r3, [r7, #32]
 800b526:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			}
			xReturn = 0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800b52e:	e124      	b.n	800b77a <FreeRTOS_setsockopt+0x33a>
			case FREERTOS_SO_SNDBUF:	/* Set the size of the send buffer, in units of MSS (TCP only) */
			case FREERTOS_SO_RCVBUF:	/* Set the size of the receive buffer, in units of MSS (TCP only) */
				{
					uint32_t ulNewValue;

					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b536:	2b06      	cmp	r3, #6
 800b538:	f040 8114 	bne.w	800b764 <FreeRTOS_setsockopt+0x324>
						FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
							( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b04      	cmp	r3, #4
 800b540:	d104      	bne.n	800b54c <FreeRTOS_setsockopt+0x10c>
 800b542:	6a3b      	ldr	r3, [r7, #32]
 800b544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b546:	2b00      	cmp	r3, #0
 800b548:	f040 8117 	bne.w	800b77a <FreeRTOS_setsockopt+0x33a>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b05      	cmp	r3, #5
 800b550:	d104      	bne.n	800b55c <FreeRTOS_setsockopt+0x11c>
						( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800b552:	6a3b      	ldr	r3, [r7, #32]
 800b554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b556:	2b00      	cmp	r3, #0
 800b558:	f040 810f 	bne.w	800b77a <FreeRTOS_setsockopt+0x33a>
						FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
							( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					ulNewValue = *( ( uint32_t * ) pvOptionValue );
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	61bb      	str	r3, [r7, #24]

					if( lOptionName == FREERTOS_SO_SNDBUF )
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2b04      	cmp	r3, #4
 800b566:	d10b      	bne.n	800b580 <FreeRTOS_setsockopt+0x140>
					{
						/* Round up to nearest MSS size */
						ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800b568:	6a3b      	ldr	r3, [r7, #32]
 800b56a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800b56e:	4619      	mov	r1, r3
 800b570:	69b8      	ldr	r0, [r7, #24]
 800b572:	f7ff fa55 	bl	800aa20 <FreeRTOS_round_up>
 800b576:	61b8      	str	r0, [r7, #24]
						pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800b578:	6a3b      	ldr	r3, [r7, #32]
 800b57a:	69ba      	ldr	r2, [r7, #24]
 800b57c:	671a      	str	r2, [r3, #112]	; 0x70
 800b57e:	e002      	b.n	800b586 <FreeRTOS_setsockopt+0x146>
					}
					else
					{
						pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800b580:	6a3b      	ldr	r3, [r7, #32]
 800b582:	69ba      	ldr	r2, [r7, #24]
 800b584:	66da      	str	r2, [r3, #108]	; 0x6c
					}
				}
				xReturn = 0;
 800b586:	2300      	movs	r3, #0
 800b588:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b58a:	e0f6      	b.n	800b77a <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_WIN_PROPERTIES:	/* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
				{
					WinProperties_t* pxProps;

					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b58c:	6a3b      	ldr	r3, [r7, #32]
 800b58e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b592:	2b06      	cmp	r3, #6
 800b594:	f040 80e8 	bne.w	800b768 <FreeRTOS_setsockopt+0x328>
					{
						FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( ( pxSocket->u.xTCP.txStream != NULL ) || ( pxSocket->u.xTCP.rxStream != NULL ) )
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f040 80ec 	bne.w	800b77a <FreeRTOS_setsockopt+0x33a>
 800b5a2:	6a3b      	ldr	r3, [r7, #32]
 800b5a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f040 80e7 	bne.w	800b77a <FreeRTOS_setsockopt+0x33a>
					{
						FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: buffer already created\n" ) );
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					pxProps = ( ( WinProperties_t * ) pvOptionValue );
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	617b      	str	r3, [r7, #20]
					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ), sizeof( pxProps->lTxBufSize ) );
 800b5b0:	697a      	ldr	r2, [r7, #20]
 800b5b2:	2304      	movs	r3, #4
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	2204      	movs	r2, #4
 800b5ba:	2100      	movs	r1, #0
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f7ff ff3f 	bl	800b440 <FreeRTOS_setsockopt>
					FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ), sizeof( pxProps->lRxBufSize ) );
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	f103 0208 	add.w	r2, r3, #8
 800b5c8:	2304      	movs	r3, #4
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	2205      	movs	r2, #5
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f7ff ff34 	bl	800b440 <FreeRTOS_setsockopt>
					#if( ipconfigUSE_TCP_WIN == 1 )
					{
						pxSocket->u.xTCP.uxRxWinSize = ( uint32_t )pxProps->lRxWinSize;	/* Fixed value: size of the TCP reception window */
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	6a3b      	ldr	r3, [r7, #32]
 800b5e0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
						pxSocket->u.xTCP.uxTxWinSize = ( uint32_t )pxProps->lTxWinSize;	/* Fixed value: size of the TCP transmit window */
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
					}
					#endif

					/* In case the socket has already initialised its tcpWin,
					adapt the window size parameters */
					if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800b5f0:	6a3b      	ldr	r3, [r7, #32]
 800b5f2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800b5f6:	f003 0301 	and.w	r3, r3, #1
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d015      	beq.n	800b62c <FreeRTOS_setsockopt+0x1ec>
					{
						pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxRxWinSize * pxSocket->u.xTCP.usInitMSS;
 800b600:	6a3b      	ldr	r3, [r7, #32]
 800b602:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b606:	6a3a      	ldr	r2, [r7, #32]
 800b608:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800b60c:	fb02 f203 	mul.w	r2, r2, r3
 800b610:	6a3b      	ldr	r3, [r7, #32]
 800b612:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
						pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxTxWinSize * pxSocket->u.xTCP.usInitMSS;
 800b616:	6a3b      	ldr	r3, [r7, #32]
 800b618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b61c:	6a3a      	ldr	r2, [r7, #32]
 800b61e:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800b622:	fb02 f203 	mul.w	r2, r2, r3
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
					}
				}

				xReturn = 0;
 800b62c:	2300      	movs	r3, #0
 800b62e:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b630:	e0a3      	b.n	800b77a <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_REUSE_LISTEN_SOCKET:	/* If true, the server-socket will turn into a connected socket */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b632:	6a3b      	ldr	r3, [r7, #32]
 800b634:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b638:	2b06      	cmp	r3, #6
 800b63a:	f040 8097 	bne.w	800b76c <FreeRTOS_setsockopt+0x32c>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}
					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d007      	beq.n	800b656 <FreeRTOS_setsockopt+0x216>
					{
						pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800b646:	6a3a      	ldr	r2, [r7, #32]
 800b648:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b64c:	f043 0308 	orr.w	r3, r3, #8
 800b650:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800b654:	e006      	b.n	800b664 <FreeRTOS_setsockopt+0x224>
					}
					else
					{
						pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800b656:	6a3a      	ldr	r2, [r7, #32]
 800b658:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b65c:	f36f 03c3 	bfc	r3, #3, #1
 800b660:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
					}
				}
				xReturn = 0;
 800b664:	2300      	movs	r3, #0
 800b666:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b668:	e087      	b.n	800b77a <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_CLOSE_AFTER_SEND:		/* As soon as the last byte has been transmitted, finalise the connection */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b66a:	6a3b      	ldr	r3, [r7, #32]
 800b66c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b670:	2b06      	cmp	r3, #6
 800b672:	d17d      	bne.n	800b770 <FreeRTOS_setsockopt+0x330>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d007      	beq.n	800b68c <FreeRTOS_setsockopt+0x24c>
					{
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800b67c:	6a3a      	ldr	r2, [r7, #32]
 800b67e:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b682:	f043 0310 	orr.w	r3, r3, #16
 800b686:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800b68a:	e006      	b.n	800b69a <FreeRTOS_setsockopt+0x25a>
					}
					else
					{
						pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800b68c:	6a3a      	ldr	r2, [r7, #32]
 800b68e:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b692:	f36f 1304 	bfc	r3, #4, #1
 800b696:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
					}
				}
				xReturn = 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b69e:	e06c      	b.n	800b77a <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_SET_FULL_SIZE:		/* Refuse to send packets smaller than MSS  */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b6a0:	6a3b      	ldr	r3, [r7, #32]
 800b6a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b6a6:	2b06      	cmp	r3, #6
 800b6a8:	d164      	bne.n	800b774 <FreeRTOS_setsockopt+0x334>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d007      	beq.n	800b6c2 <FreeRTOS_setsockopt+0x282>
					{
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800b6b2:	6a3a      	ldr	r2, [r7, #32]
 800b6b4:	f892 30dc 	ldrb.w	r3, [r2, #220]	; 0xdc
 800b6b8:	f043 0302 	orr.w	r3, r3, #2
 800b6bc:	f882 30dc 	strb.w	r3, [r2, #220]	; 0xdc
 800b6c0:	e006      	b.n	800b6d0 <FreeRTOS_setsockopt+0x290>
					}
					else
					{
						pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800b6c2:	6a3a      	ldr	r2, [r7, #32]
 800b6c4:	f892 30dc 	ldrb.w	r3, [r2, #220]	; 0xdc
 800b6c8:	f36f 0341 	bfc	r3, #1, #1
 800b6cc:	f882 30dc 	strb.w	r3, [r2, #220]	; 0xdc
					}

					if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 800b6d0:	6a3b      	ldr	r3, [r7, #32]
 800b6d2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800b6d6:	f003 0302 	and.w	r3, r3, #2
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d111      	bne.n	800b704 <FreeRTOS_setsockopt+0x2c4>
						( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800b6e0:	6a3b      	ldr	r3, [r7, #32]
 800b6e2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
					if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 800b6e6:	2b04      	cmp	r3, #4
 800b6e8:	d90c      	bls.n	800b704 <FreeRTOS_setsockopt+0x2c4>
						( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800b6ea:	6a38      	ldr	r0, [r7, #32]
 800b6ec:	f000 fabd 	bl	800bc6a <FreeRTOS_tx_size>
 800b6f0:	4603      	mov	r3, r0
						( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d006      	beq.n	800b704 <FreeRTOS_setsockopt+0x2c4>
					{
						pxSocket->u.xTCP.usTimeout = 1u; /* to set/clear bSendFullSize */
 800b6f6:	6a3b      	ldr	r3, [r7, #32]
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
						xSendEventToIPTask( eTCPTimerEvent );
 800b6fe:	2005      	movs	r0, #5
 800b700:	f7fe fe26 	bl	800a350 <xSendEventToIPTask>
					}
				}
				xReturn = 0;
 800b704:	2300      	movs	r3, #0
 800b706:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b708:	e037      	b.n	800b77a <FreeRTOS_setsockopt+0x33a>

			case FREERTOS_SO_STOP_RX:		/* Refuse to receive more packts */
				{
					if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b710:	2b06      	cmp	r3, #6
 800b712:	d131      	bne.n	800b778 <FreeRTOS_setsockopt+0x338>
					{
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
					}

					if( *( ( BaseType_t * ) pvOptionValue ) != 0 )
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d007      	beq.n	800b72c <FreeRTOS_setsockopt+0x2ec>
					{
						pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800b71c:	6a3a      	ldr	r2, [r7, #32]
 800b71e:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800b722:	f043 0304 	orr.w	r3, r3, #4
 800b726:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
 800b72a:	e006      	b.n	800b73a <FreeRTOS_setsockopt+0x2fa>
					}
					else
					{
						pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800b72c:	6a3a      	ldr	r2, [r7, #32]
 800b72e:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800b732:	f36f 0382 	bfc	r3, #2, #1
 800b736:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
					}

					pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800b73a:	6a3a      	ldr	r2, [r7, #32]
 800b73c:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800b740:	f043 0301 	orr.w	r3, r3, #1
 800b744:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = 1u; /* to set/clear bRxStopped */
 800b748:	6a3b      	ldr	r3, [r7, #32]
 800b74a:	2201      	movs	r2, #1
 800b74c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
					xSendEventToIPTask( eTCPTimerEvent );
 800b750:	2005      	movs	r0, #5
 800b752:	f7fe fdfd 	bl	800a350 <xSendEventToIPTask>
				}
				xReturn = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800b75a:	e00e      	b.n	800b77a <FreeRTOS_setsockopt+0x33a>

		#endif  /* ipconfigUSE_TCP == 1 */

		default :
			/* No other options are handled. */
			xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800b75c:	f06f 036c 	mvn.w	r3, #108	; 0x6c
 800b760:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800b762:	e00a      	b.n	800b77a <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b764:	bf00      	nop
 800b766:	e008      	b.n	800b77a <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b768:	bf00      	nop
 800b76a:	e006      	b.n	800b77a <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b76c:	bf00      	nop
 800b76e:	e004      	b.n	800b77a <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b770:	bf00      	nop
 800b772:	e002      	b.n	800b77a <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b774:	bf00      	nop
 800b776:	e000      	b.n	800b77a <FreeRTOS_setsockopt+0x33a>
						break;	/* will return -pdFREERTOS_ERRNO_EINVAL */
 800b778:	bf00      	nop
	}

	return xReturn;
 800b77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
} /* Tested */
 800b77c:	4618      	mov	r0, r3
 800b77e:	3728      	adds	r7, #40	; 0x28
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <prvGetPrivatePortNumber>:

/*-----------------------------------------------------------*/

/* Get a free private ('anonymous') port number */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
uint16_t usResult;
BaseType_t xIndex;
const List_t *pxList;

#if ipconfigUSE_TCP == 1
	if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2b06      	cmp	r3, #6
 800b790:	d104      	bne.n	800b79c <prvGetPrivatePortNumber+0x18>
	{
		xIndex = socketNEXT_TCP_PORT_NUMBER_INDEX;
 800b792:	2301      	movs	r3, #1
 800b794:	617b      	str	r3, [r7, #20]
		pxList = &xBoundTCPSocketsList;
 800b796:	4b1e      	ldr	r3, [pc, #120]	; (800b810 <prvGetPrivatePortNumber+0x8c>)
 800b798:	613b      	str	r3, [r7, #16]
 800b79a:	e003      	b.n	800b7a4 <prvGetPrivatePortNumber+0x20>
	}
	else
#endif
	{
		xIndex = socketNEXT_UDP_PORT_NUMBER_INDEX;
 800b79c:	2300      	movs	r3, #0
 800b79e:	617b      	str	r3, [r7, #20]
		pxList = &xBoundUDPSocketsList;
 800b7a0:	4b1c      	ldr	r3, [pc, #112]	; (800b814 <prvGetPrivatePortNumber+0x90>)
 800b7a2:	613b      	str	r3, [r7, #16]
	/*_RB_ This needs to be randomised rather than sequential. */
	/* _HT_ Agreed, although many OS's use sequential port numbers, see
	https://www.cymru.com/jtk/misc/ephemeralports.html  */
	for ( ;; )
	{
		++( usNextPortToUse[ xIndex ] );
 800b7a4:	4a1c      	ldr	r2, [pc, #112]	; (800b818 <prvGetPrivatePortNumber+0x94>)
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	b299      	uxth	r1, r3
 800b7b0:	4a19      	ldr	r2, [pc, #100]	; (800b818 <prvGetPrivatePortNumber+0x94>)
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if( usNextPortToUse[ xIndex ] >= socketAUTO_PORT_ALLOCATION_MAX_NUMBER )
 800b7b8:	4a17      	ldr	r2, [pc, #92]	; (800b818 <prvGetPrivatePortNumber+0x94>)
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7c0:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800b7c4:	d305      	bcc.n	800b7d2 <prvGetPrivatePortNumber+0x4e>
		{
			/* Don't go right back to the start of the dynamic/private port
			range numbers as any persistent sockets are likely to have been
			create first so the early port numbers may still be in use. */
			usNextPortToUse[ xIndex ] = socketAUTO_PORT_ALLOCATION_RESET_NUMBER;
 800b7c6:	4a14      	ldr	r2, [pc, #80]	; (800b818 <prvGetPrivatePortNumber+0x94>)
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	f44f 4141 	mov.w	r1, #49408	; 0xc100
 800b7ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		usResult = FreeRTOS_htons( usNextPortToUse[ xIndex ] );
 800b7d2:	4a11      	ldr	r2, [pc, #68]	; (800b818 <prvGetPrivatePortNumber+0x94>)
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7da:	021b      	lsls	r3, r3, #8
 800b7dc:	b21a      	sxth	r2, r3
 800b7de:	490e      	ldr	r1, [pc, #56]	; (800b818 <prvGetPrivatePortNumber+0x94>)
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800b7e6:	0a1b      	lsrs	r3, r3, #8
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	b21b      	sxth	r3, r3
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	b21b      	sxth	r3, r3
 800b7f0:	81fb      	strh	r3, [r7, #14]

		if( pxListFindListItemWithValue( pxList, ( TickType_t ) usResult ) == NULL )
 800b7f2:	89fb      	ldrh	r3, [r7, #14]
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6938      	ldr	r0, [r7, #16]
 800b7f8:	f000 f810 	bl	800b81c <pxListFindListItemWithValue>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d000      	beq.n	800b804 <prvGetPrivatePortNumber+0x80>
		++( usNextPortToUse[ xIndex ] );
 800b802:	e7cf      	b.n	800b7a4 <prvGetPrivatePortNumber+0x20>
		{
			break;
 800b804:	bf00      	nop
		}
	}
	return usResult;
 800b806:	89fb      	ldrh	r3, [r7, #14]
} /* Tested */
 800b808:	4618      	mov	r0, r3
 800b80a:	3718      	adds	r7, #24
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	20005888 	.word	0x20005888
 800b814:	2000589c 	.word	0x2000589c
 800b818:	200047bc 	.word	0x200047bc

0800b81c <pxListFindListItemWithValue>:
/*-----------------------------------------------------------*/

/* pxListFindListItemWithValue: find a list item in a bound socket list
'xWantedItemValue' refers to a port number */
static const ListItem_t * pxListFindListItemWithValue( const List_t *pxList, TickType_t xWantedItemValue )
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
const ListItem_t * pxResult = NULL;
 800b826:	2300      	movs	r3, #0
 800b828:	617b      	str	r3, [r7, #20]

	if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800b82a:	f7ff f8dd 	bl	800a9e8 <xIPIsNetworkTaskReady>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d018      	beq.n	800b866 <pxListFindListItemWithValue+0x4a>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d015      	beq.n	800b866 <pxListFindListItemWithValue+0x4a>
	{
		const ListItem_t *pxIterator;
		const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( pxList );
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	3308      	adds	r3, #8
 800b83e:	60fb      	str	r3, [r7, #12]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	613b      	str	r3, [r7, #16]
 800b846:	e00a      	b.n	800b85e <pxListFindListItemWithValue+0x42>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d102      	bne.n	800b858 <pxListFindListItemWithValue+0x3c>
			{
				pxResult = pxIterator;
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	617b      	str	r3, [r7, #20]
				break;
 800b856:	e006      	b.n	800b866 <pxListFindListItemWithValue+0x4a>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	613b      	str	r3, [r7, #16]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	429a      	cmp	r2, r3
 800b864:	d1f0      	bne.n	800b848 <pxListFindListItemWithValue+0x2c>
			}
		}
	}

	return pxResult;
 800b866:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800b868:	4618      	mov	r0, r3
 800b86a:	3718      	adds	r7, #24
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <pxUDPSocketLookup>:

/*-----------------------------------------------------------*/

FreeRTOS_Socket_t *pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b086      	sub	sp, #24
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
const ListItem_t *pxListItem;
FreeRTOS_Socket_t *pxSocket = NULL;
 800b878:	2300      	movs	r3, #0
 800b87a:	617b      	str	r3, [r7, #20]

	/* Looking up a socket is quite simple, find a match with the local port.

	See if there is a list item associated with the port number on the
	list of bound sockets. */
	pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800b87c:	6879      	ldr	r1, [r7, #4]
 800b87e:	480e      	ldr	r0, [pc, #56]	; (800b8b8 <pxUDPSocketLookup+0x48>)
 800b880:	f7ff ffcc 	bl	800b81c <pxListFindListItemWithValue>
 800b884:	6138      	str	r0, [r7, #16]

	if( pxListItem != NULL )
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00f      	beq.n	800b8ac <pxUDPSocketLookup+0x3c>
	{
		/* The owner of the list item is the socket itself. */
		pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem );
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	617b      	str	r3, [r7, #20]
		configASSERT( pxSocket != NULL );
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d109      	bne.n	800b8ac <pxUDPSocketLookup+0x3c>
 800b898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89c:	f383 8811 	msr	BASEPRI, r3
 800b8a0:	f3bf 8f6f 	isb	sy
 800b8a4:	f3bf 8f4f 	dsb	sy
 800b8a8:	60fb      	str	r3, [r7, #12]
 800b8aa:	e7fe      	b.n	800b8aa <pxUDPSocketLookup+0x3a>
	}
	return pxSocket;
 800b8ac:	697b      	ldr	r3, [r7, #20]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3718      	adds	r7, #24
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	2000589c 	.word	0x2000589c

0800b8bc <vSocketWakeUpUser>:
}

/*-----------------------------------------------------------*/

void vSocketWakeUpUser( FreeRTOS_Socket_t *pxSocket )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
	}
	#endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		if( pxSocket->pxSocketSet != NULL )
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d015      	beq.n	800b8f8 <vSocketWakeUpUser+0x3c>
		{
			EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & eSELECT_ALL;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	0a1b      	lsrs	r3, r3, #8
 800b8d2:	f003 030f 	and.w	r3, r3, #15
 800b8d6:	60fb      	str	r3, [r7, #12]
			if( xSelectBits != 0ul )
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00c      	beq.n	800b8f8 <vSocketWakeUpUser+0x3c>
			{
				pxSocket->xSocketBits |= xSelectBits;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	431a      	orrs	r2, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	631a      	str	r2, [r3, #48]	; 0x30
				xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68f9      	ldr	r1, [r7, #12]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fa f8f6 	bl	8005ae4 <xEventGroupSetBits>
			}
		}

		pxSocket->xEventBits &= eSOCKET_ALL;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	601a      	str	r2, [r3, #0]
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0u ) )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00b      	beq.n	800b924 <vSocketWakeUpUser+0x68>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d007      	beq.n	800b924 <vSocketWakeUpUser+0x68>
	{
		xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	685a      	ldr	r2, [r3, #4]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4619      	mov	r1, r3
 800b91e:	4610      	mov	r0, r2
 800b920:	f7fa f8e0 	bl	8005ae4 <xEventGroupSetBits>
	}

	pxSocket->xEventBits = 0ul;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	601a      	str	r2, [r3, #0]
}
 800b92a:	bf00      	nop
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
	...

0800b934 <xTCPTimerCheck>:
	 * - Send new data
	 * - Send a keep-alive packet
	 * - Check for timeout (in non-connected states only)
	 */
	TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
	{
 800b934:	b580      	push	{r7, lr}
 800b936:	b088      	sub	sp, #32
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket;
	TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800b93c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b940:	61fb      	str	r3, [r7, #28]
	TickType_t xNow = xTaskGetTickCount();
 800b942:	f7fb fed3 	bl	80076ec <xTaskGetTickCount>
 800b946:	6138      	str	r0, [r7, #16]
	static TickType_t xLastTime = 0u;
	TickType_t xDelta = xNow - xLastTime;
 800b948:	4b30      	ldr	r3, [pc, #192]	; (800ba0c <xTCPTimerCheck+0xd8>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	693a      	ldr	r2, [r7, #16]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	61bb      	str	r3, [r7, #24]
	ListItem_t* pxEnd = ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
 800b952:	4b2f      	ldr	r3, [pc, #188]	; (800ba10 <xTCPTimerCheck+0xdc>)
 800b954:	60fb      	str	r3, [r7, #12]
	ListItem_t *pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800b956:	4b2f      	ldr	r3, [pc, #188]	; (800ba14 <xTCPTimerCheck+0xe0>)
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	617b      	str	r3, [r7, #20]

		xLastTime = xNow;
 800b95c:	4a2b      	ldr	r2, [pc, #172]	; (800ba0c <xTCPTimerCheck+0xd8>)
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	6013      	str	r3, [r2, #0]

		if( xDelta == 0u )
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d148      	bne.n	800b9fa <xTCPTimerCheck+0xc6>
		{
			xDelta = 1u;
 800b968:	2301      	movs	r3, #1
 800b96a:	61bb      	str	r3, [r7, #24]
		}

		while( pxIterator != pxEnd )
 800b96c:	e045      	b.n	800b9fa <xTCPTimerCheck+0xc6>
		{
			pxSocket = ( FreeRTOS_Socket_t * )listGET_LIST_ITEM_OWNER( pxIterator );
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	60bb      	str	r3, [r7, #8]
			pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	617b      	str	r3, [r7, #20]

			/* Sockets with 'tmout == 0' do not need any regular attention. */
			if( pxSocket->u.xTCP.usTimeout == 0u )
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b980:	2b00      	cmp	r3, #0
 800b982:	d100      	bne.n	800b986 <xTCPTimerCheck+0x52>
			{
				continue;
 800b984:	e039      	b.n	800b9fa <xTCPTimerCheck+0xc6>
			}

			if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b98c:	461a      	mov	r2, r3
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	429a      	cmp	r2, r3
 800b992:	d90a      	bls.n	800b9aa <xTCPTimerCheck+0x76>
			{
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	1ad3      	subs	r3, r2, r3
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b9a8:	e00a      	b.n	800b9c0 <xTCPTimerCheck+0x8c>
			}
			else
			{
				pxSocket->u.xTCP.usTimeout = 0u;
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

				/* Within this function, the socket might want to send a delayed
				ack or send out data or whatever it needs to do. */
				if( xTCPSocketCheck( pxSocket ) < 0 )
 800b9b2:	68b8      	ldr	r0, [r7, #8]
 800b9b4:	f000 fdfc 	bl	800c5b0 <xTCPSocketCheck>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	da00      	bge.n	800b9c0 <xTCPTimerCheck+0x8c>
				{
					/* Continue because the socket was deleted. */
					continue;
 800b9be:	e01c      	b.n	800b9fa <xTCPTimerCheck+0xc6>
			}

			/* In xEventBits the driver may indicate that the socket has
			important events for the user.  These are only done just before the
			IP-task goes to sleep. */
			if( pxSocket->xEventBits != 0u )
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d008      	beq.n	800b9da <xTCPTimerCheck+0xa6>
			{
				if( xWillSleep != pdFALSE )
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <xTCPTimerCheck+0xa2>
				{
					/* The IP-task is about to go to sleep, so messages can be
					sent to the socket owners. */
					vSocketWakeUpUser( pxSocket );
 800b9ce:	68b8      	ldr	r0, [r7, #8]
 800b9d0:	f7ff ff74 	bl	800b8bc <vSocketWakeUpUser>
 800b9d4:	e001      	b.n	800b9da <xTCPTimerCheck+0xa6>
				}
				else
				{
					/* Or else make sure this will be called again to wake-up
					the sockets' owner. */
					xShortest = ( TickType_t ) 0;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	61fb      	str	r3, [r7, #28]
				}
			}

			if( ( pxSocket->u.xTCP.usTimeout != 0u ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d00a      	beq.n	800b9fa <xTCPTimerCheck+0xc6>
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d203      	bcs.n	800b9fa <xTCPTimerCheck+0xc6>
			{
				xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b9f8:	61fb      	str	r3, [r7, #28]
		while( pxIterator != pxEnd )
 800b9fa:	697a      	ldr	r2, [r7, #20]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d1b5      	bne.n	800b96e <xTCPTimerCheck+0x3a>
			}
		}

		return xShortest;
 800ba02:	69fb      	ldr	r3, [r7, #28]
	}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3720      	adds	r7, #32
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	200047c0 	.word	0x200047c0
 800ba10:	20005890 	.word	0x20005890
 800ba14:	20005888 	.word	0x20005888

0800ba18 <pxTCPSocketLookup>:
	 * looking up a socket is a little more complex:
	 * Both a local port, and a remote port and IP address are being used
	 * For a socket in listening mode, the remote port and IP address are both 0
	 */
	FreeRTOS_Socket_t *pxTCPSocketLookup( uint32_t ulLocalIP, UBaseType_t uxLocalPort, uint32_t ulRemoteIP, UBaseType_t uxRemotePort )
	{
 800ba18:	b480      	push	{r7}
 800ba1a:	b08b      	sub	sp, #44	; 0x2c
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	607a      	str	r2, [r7, #4]
 800ba24:	603b      	str	r3, [r7, #0]
	ListItem_t *pxIterator;
	FreeRTOS_Socket_t *pxResult = NULL, *pxListenSocket = NULL;
 800ba26:	2300      	movs	r3, #0
 800ba28:	623b      	str	r3, [r7, #32]
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	61fb      	str	r3, [r7, #28]
	MiniListItem_t *pxEnd = ( MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800ba2e:	4b1c      	ldr	r3, [pc, #112]	; (800baa0 <pxTCPSocketLookup+0x88>)
 800ba30:	61bb      	str	r3, [r7, #24]

		/* Parameter not yet supported. */
		( void ) ulLocalIP;

		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	627b      	str	r3, [r7, #36]	; 0x24
 800ba38:	e021      	b.n	800ba7e <pxTCPSocketLookup+0x66>
			 pxIterator != ( ListItem_t * ) pxEnd;
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	617b      	str	r3, [r7, #20]

			if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d115      	bne.n	800ba78 <pxTCPSocketLookup+0x60>
			{
				if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d102      	bne.n	800ba5c <pxTCPSocketLookup+0x44>
				{
					/* If this is a socket listening to uxLocalPort, remember it
					in case there is no perfect match. */
					pxListenSocket = pxSocket;
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	61fb      	str	r3, [r7, #28]
 800ba5a:	e00d      	b.n	800ba78 <pxTCPSocketLookup+0x60>
				}
				else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d107      	bne.n	800ba78 <pxTCPSocketLookup+0x60>
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d102      	bne.n	800ba78 <pxTCPSocketLookup+0x60>
				{
					/* For sockets not in listening mode, find a match with
					xLocalPort, ulRemoteIP AND xRemotePort. */
					pxResult = pxSocket;
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	623b      	str	r3, [r7, #32]
					break;
 800ba76:	e006      	b.n	800ba86 <pxTCPSocketLookup+0x6e>
			 pxIterator  = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 800ba78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	627b      	str	r3, [r7, #36]	; 0x24
		for( pxIterator  = ( ListItem_t * ) listGET_NEXT( pxEnd );
 800ba7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d1d9      	bne.n	800ba3a <pxTCPSocketLookup+0x22>
				}
			}
		}
		if( pxResult == NULL )
 800ba86:	6a3b      	ldr	r3, [r7, #32]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d101      	bne.n	800ba90 <pxTCPSocketLookup+0x78>
		{
			/* An exact match was not found, maybe a listening socket was
			found. */
			pxResult = pxListenSocket;
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	623b      	str	r3, [r7, #32]
		}

		return pxResult;
 800ba90:	6a3b      	ldr	r3, [r7, #32]
	}
 800ba92:	4618      	mov	r0, r3
 800ba94:	372c      	adds	r7, #44	; 0x2c
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	20005890 	.word	0x20005890

0800baa4 <prvTCPCreateStream>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP == 1 )

	static StreamBuffer_t *prvTCPCreateStream ( FreeRTOS_Socket_t *pxSocket, BaseType_t xIsInputStream )
	{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
	size_t uxLength;
	size_t uxSize;

		/* Now that a stream is created, the maximum size is fixed before
		creation, it could still be changed with setsockopt(). */
		if( xIsInputStream != pdFALSE )
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d01c      	beq.n	800baee <prvTCPCreateStream+0x4a>
		{
			uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bab8:	617b      	str	r3, [r7, #20]

			if( pxSocket->u.xTCP.uxLittleSpace == 0ul )
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d107      	bne.n	800bad2 <prvTCPCreateStream+0x2e>
			{
				pxSocket->u.xTCP.uxLittleSpace  = ( 1ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why divide by 5?  Can this be changed to a #define? */
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bac6:	4a25      	ldr	r2, [pc, #148]	; (800bb5c <prvTCPCreateStream+0xb8>)
 800bac8:	fba2 2303 	umull	r2, r3, r2, r3
 800bacc:	089a      	lsrs	r2, r3, #2
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	665a      	str	r2, [r3, #100]	; 0x64
			}

			if( pxSocket->u.xTCP.uxEnoughSpace == 0ul )
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d10c      	bne.n	800baf4 <prvTCPCreateStream+0x50>
			{
				pxSocket->u.xTCP.uxEnoughSpace = ( 4ul * pxSocket->u.xTCP.uxRxStreamSize ) / 5u; /*_RB_ Why multiply by 4?  Maybe sock80_PERCENT?*/
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	4a1e      	ldr	r2, [pc, #120]	; (800bb5c <prvTCPCreateStream+0xb8>)
 800bae2:	fba2 2303 	umull	r2, r3, r2, r3
 800bae6:	089a      	lsrs	r2, r3, #2
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	669a      	str	r2, [r3, #104]	; 0x68
 800baec:	e002      	b.n	800baf4 <prvTCPCreateStream+0x50>
			}
		}
		else
		{
			uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baf2:	617b      	str	r3, [r7, #20]
		}

		/* Add an extra 4 (or 8) bytes. */
		uxLength += sizeof( size_t );
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	3304      	adds	r3, #4
 800baf8:	617b      	str	r3, [r7, #20]

		/* And make the length a multiple of sizeof( size_t ). */
		uxLength &= ~( sizeof( size_t ) - 1u );
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	f023 0303 	bic.w	r3, r3, #3
 800bb00:	617b      	str	r3, [r7, #20]

		uxSize = sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) + uxLength;
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	3314      	adds	r3, #20
 800bb06:	613b      	str	r3, [r7, #16]

		pxBuffer = ( StreamBuffer_t * )pvPortMallocLarge( uxSize );
 800bb08:	6938      	ldr	r0, [r7, #16]
 800bb0a:	f7fa fbb9 	bl	8006280 <pvPortMalloc>
 800bb0e:	60f8      	str	r0, [r7, #12]

		if( pxBuffer == NULL )
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d10b      	bne.n	800bb2e <prvTCPCreateStream+0x8a>
		{
			FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
			pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800bb1c:	f043 0308 	orr.w	r3, r3, #8
 800bb20:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800bb24:	2108      	movs	r1, #8
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f001 fa5f 	bl	800cfea <vTCPStateChange>
 800bb2c:	e011      	b.n	800bb52 <prvTCPCreateStream+0xae>
		}
		else
		{
			/* Clear the markers of the stream */
			memset( pxBuffer, '\0', sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800bb2e:	2214      	movs	r2, #20
 800bb30:	2100      	movs	r1, #0
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f004 ffe6 	bl	8010b04 <memset>
			pxBuffer->LENGTH = ( size_t ) uxLength ;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	611a      	str	r2, [r3, #16]
			if( xTCPWindowLoggingLevel != 0 )
			{
				FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %lu bytes (total %lu)\n", xIsInputStream ? 'R' : 'T', uxLength, uxSize ) );
			}

			if( xIsInputStream != 0 )
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d003      	beq.n	800bb4c <prvTCPCreateStream+0xa8>
			{
				pxSocket->u.xTCP.rxStream = pxBuffer;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	675a      	str	r2, [r3, #116]	; 0x74
 800bb4a:	e002      	b.n	800bb52 <prvTCPCreateStream+0xae>
			}
			else
			{
				pxSocket->u.xTCP.txStream = pxBuffer;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	679a      	str	r2, [r3, #120]	; 0x78
			}
		}

		return pxBuffer;
 800bb52:	68fb      	ldr	r3, [r7, #12]
	}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3718      	adds	r7, #24
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	cccccccd 	.word	0xcccccccd

0800bb60 <lTCPAddRxdata>:
	/*
	 * Add data to the RxStream.  When uxOffset > 0, data has come in out-of-order
	 * and will be put in front of the head so it can not be popped by the user.
	 */
	int32_t lTCPAddRxdata( FreeRTOS_Socket_t *pxSocket, size_t uxOffset, const uint8_t *pcData, uint32_t ulByteCount )
	{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b088      	sub	sp, #32
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	603b      	str	r3, [r7, #0]
	StreamBuffer_t *pxStream = pxSocket->u.xTCP.rxStream;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb72:	61fb      	str	r3, [r7, #28]
		/* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
		if( pucData != NULL ) copy data the the buffer
		if( pucData == NULL ) no copying, just advance rxHead
		if( uxOffset != 0 ) Just store data which has come out-of-order
		if( uxOffset == 0 ) Also advance rxHead */
		if( pxStream == NULL )
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10a      	bne.n	800bb90 <lTCPAddRxdata+0x30>
		{
			pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800bb7a:	2101      	movs	r1, #1
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	f7ff ff91 	bl	800baa4 <prvTCPCreateStream>
 800bb82:	61f8      	str	r0, [r7, #28]
			if( pxStream == NULL )
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d102      	bne.n	800bb90 <lTCPAddRxdata+0x30>
			{
				return -1;
 800bb8a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb8e:	e045      	b.n	800bc1c <lTCPAddRxdata+0xbc>
				pcData = NULL;
			}
		}
		#endif /* ipconfigUSE_CALLBACKS */

		xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	68b9      	ldr	r1, [r7, #8]
 800bb96:	69f8      	ldr	r0, [r7, #28]
 800bb98:	f000 fa97 	bl	800c0ca <uxStreamBufferAdd>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	61bb      	str	r3, [r7, #24]
					pxStream->uxFront ) );
			}
		}
		#endif /* ipconfigHAS_DEBUG_PRINTF */

		if( uxOffset == 0u )
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d139      	bne.n	800bc1a <lTCPAddRxdata+0xba>
					}
				} else
			#endif /* ipconfigUSE_CALLBACKS */
			{
				/* See if running out of space. */
				if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bbac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d11f      	bne.n	800bbf6 <lTCPAddRxdata+0x96>
				{
					size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7fe ff96 	bl	800aaec <uxStreamBufferFrontSpace>
 800bbc0:	6178      	str	r0, [r7, #20]
					if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace  )
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d314      	bcc.n	800bbf6 <lTCPAddRxdata+0x96>
					{
						pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800bbd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbd6:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
						pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800bbe0:	f043 0301 	orr.w	r3, r3, #1
 800bbe4:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

						/* bLowWater was reached, send the changed window size. */
						pxSocket->u.xTCP.usTimeout = 1u;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2201      	movs	r2, #1
 800bbec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
						xSendEventToIPTask( eTCPTimerEvent );
 800bbf0:	2005      	movs	r0, #5
 800bbf2:	f7fe fbad 	bl	800a350 <xSendEventToIPTask>
					}
				}

				/* New incoming data is available, wake up the user.   User's
				semaphores will be set just before the IP-task goes asleep. */
				pxSocket->xEventBits |= eSOCKET_RECEIVE;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f043 0201 	orr.w	r2, r3, #1
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	601a      	str	r2, [r3, #0]

				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
				{
					if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc06:	f003 0301 	and.w	r3, r3, #1
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d005      	beq.n	800bc1a <lTCPAddRxdata+0xba>
					{
						pxSocket->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	601a      	str	r2, [r3, #0]
				}
				#endif
			}
		}

		return xResult;
 800bc1a:	69bb      	ldr	r3, [r7, #24]
	}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3720      	adds	r7, #32
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <FreeRTOS_tx_space>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP ==1 )

	BaseType_t FreeRTOS_tx_space( Socket_t xSocket )
	{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800bc36:	2b06      	cmp	r3, #6
 800bc38:	d003      	beq.n	800bc42 <FreeRTOS_tx_space+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bc3a:	f06f 0315 	mvn.w	r3, #21
 800bc3e:	60fb      	str	r3, [r7, #12]
 800bc40:	e00e      	b.n	800bc60 <FreeRTOS_tx_space+0x3c>
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d007      	beq.n	800bc5a <FreeRTOS_tx_space+0x36>
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSpace ( pxSocket->u.xTCP.txStream );
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fe ff38 	bl	800aac4 <uxStreamBufferGetSpace>
 800bc54:	4603      	mov	r3, r0
 800bc56:	60fb      	str	r3, [r7, #12]
 800bc58:	e002      	b.n	800bc60 <FreeRTOS_tx_space+0x3c>
			}
			else
			{
				xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc5e:	60fb      	str	r3, [r7, #12]
			}
		}

		return xReturn;
 800bc60:	68fb      	ldr	r3, [r7, #12]
	}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <FreeRTOS_tx_size>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP == 1 )

	BaseType_t FreeRTOS_tx_size( Socket_t xSocket )
	{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b084      	sub	sp, #16
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800bc7c:	2b06      	cmp	r3, #6
 800bc7e:	d003      	beq.n	800bc88 <FreeRTOS_tx_size+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bc80:	f06f 0315 	mvn.w	r3, #21
 800bc84:	60fb      	str	r3, [r7, #12]
 800bc86:	e00d      	b.n	800bca4 <FreeRTOS_tx_size+0x3a>
		}
		else
		{
			if( pxSocket->u.xTCP.txStream != NULL )
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d007      	beq.n	800bca0 <FreeRTOS_tx_size+0x36>
			{
				xReturn = ( BaseType_t ) uxStreamBufferGetSize ( pxSocket->u.xTCP.txStream );
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7fe ff3d 	bl	800ab14 <uxStreamBufferGetSize>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	60fb      	str	r3, [r7, #12]
 800bc9e:	e001      	b.n	800bca4 <FreeRTOS_tx_size+0x3a>
			}
			else
			{
				xReturn = 0;
 800bca0:	2300      	movs	r3, #0
 800bca2:	60fb      	str	r3, [r7, #12]
			}
		}

		return xReturn;
 800bca4:	68fb      	ldr	r3, [r7, #12]
	}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <FreeRTOS_rx_size>:

	/*
	 * Returns the number of bytes which can be read.
	 */
	BaseType_t FreeRTOS_rx_size( Socket_t xSocket )
	{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b084      	sub	sp, #16
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800bcc0:	2b06      	cmp	r3, #6
 800bcc2:	d003      	beq.n	800bccc <FreeRTOS_rx_size+0x1e>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bcc4:	f06f 0315 	mvn.w	r3, #21
 800bcc8:	60fb      	str	r3, [r7, #12]
 800bcca:	e00d      	b.n	800bce8 <FreeRTOS_rx_size+0x3a>
		}
		else if( pxSocket->u.xTCP.rxStream != NULL )
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d007      	beq.n	800bce4 <FreeRTOS_rx_size+0x36>
		{
			xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7fe ff1b 	bl	800ab14 <uxStreamBufferGetSize>
 800bcde:	4603      	mov	r3, r0
 800bce0:	60fb      	str	r3, [r7, #12]
 800bce2:	e001      	b.n	800bce8 <FreeRTOS_rx_size+0x3a>
		}
		else
		{
			xReturn = 0;
 800bce4:	2300      	movs	r3, #0
 800bce6:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800bce8:	68fb      	ldr	r3, [r7, #12]
	}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
	...

0800bcf4 <vSocketSelect>:
/*-----------------------------------------------------------*/

#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )

	void vSocketSelect( SocketSelect_t *pxSocketSet )
	{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b08c      	sub	sp, #48	; 0x30
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
	BaseType_t xRound;
	EventBits_t xSocketBits, xBitsToClear;
	#if ipconfigUSE_TCP == 1
		BaseType_t xLastRound = 1;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	613b      	str	r3, [r7, #16]
	#else
		BaseType_t xLastRound = 0;
	#endif

		/* These flags will be switched on after checking the socket status. */
		EventBits_t xGroupBits = 0;
 800bd00:	2300      	movs	r3, #0
 800bd02:	627b      	str	r3, [r7, #36]	; 0x24
		pxSocketSet->pxSocket = NULL;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	609a      	str	r2, [r3, #8]

		for( xRound = 0; xRound <= xLastRound; xRound++ )
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd0e:	e0cc      	b.n	800beaa <vSocketSelect+0x1b6>
		{
			const ListItem_t *pxIterator;
			const MiniListItem_t *pxEnd;
			if( xRound == 0 )
 800bd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d102      	bne.n	800bd1c <vSocketSelect+0x28>
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundUDPSocketsList );
 800bd16:	4b7b      	ldr	r3, [pc, #492]	; (800bf04 <vSocketSelect+0x210>)
 800bd18:	61fb      	str	r3, [r7, #28]
 800bd1a:	e001      	b.n	800bd20 <vSocketSelect+0x2c>
			}
		#if ipconfigUSE_TCP == 1
			else
			{
				pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &xBoundTCPSocketsList );
 800bd1c:	4b7a      	ldr	r3, [pc, #488]	; (800bf08 <vSocketSelect+0x214>)
 800bd1e:	61fb      	str	r3, [r7, #28]
			}
		#endif /* ipconfigUSE_TCP == 1 */
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	623b      	str	r3, [r7, #32]
 800bd26:	e0b8      	b.n	800be9a <vSocketSelect+0x1a6>
				 pxIterator != ( const ListItem_t * ) pxEnd;
				 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
			{
				FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800bd28:	6a3b      	ldr	r3, [r7, #32]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	60fb      	str	r3, [r7, #12]
				if( pxSocket->pxSocketSet != pxSocketSet )
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	f040 80ac 	bne.w	800be92 <vSocketSelect+0x19e>
				{
					/* Socket does not belong to this select group. */
					continue;
				}
				xSocketBits = 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	62bb      	str	r3, [r7, #40]	; 0x28

				#if( ipconfigUSE_TCP == 1 )
					if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP )
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800bd44:	2b06      	cmp	r3, #6
 800bd46:	f040 808e 	bne.w	800be66 <vSocketSelect+0x172>
					{
						/* Check if the socket has already been accepted by the
						owner.  If not, it is useless to return it from a
						select(). */
						BaseType_t bAccepted = pdFALSE;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	61bb      	str	r3, [r7, #24]

						if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd54:	f003 0304 	and.w	r3, r3, #4
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d109      	bne.n	800bd72 <vSocketSelect+0x7e>
						{
							if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd64:	f003 0302 	and.w	r3, r3, #2
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d101      	bne.n	800bd72 <vSocketSelect+0x7e>
							{
								bAccepted = pdTRUE;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	61bb      	str	r3, [r7, #24]
							}
						}

						/* Is the set owner interested in READ events? */
						if( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 )
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d023      	beq.n	800bdc6 <vSocketSelect+0xd2>
						{
							if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d111      	bne.n	800bdac <vSocketSelect+0xb8>
							{
								if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != 0 ) )
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d01a      	beq.n	800bdc6 <vSocketSelect+0xd2>
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd98:	f003 0302 	and.w	r3, r3, #2
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d011      	beq.n	800bdc6 <vSocketSelect+0xd2>
								{
									xSocketBits |= eSELECT_READ;
 800bda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda4:	f043 0301 	orr.w	r3, r3, #1
 800bda8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdaa:	e00c      	b.n	800bdc6 <vSocketSelect+0xd2>
								}
							}
							else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d009      	beq.n	800bdc6 <vSocketSelect+0xd2>
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f7ff ff7b 	bl	800bcae <FreeRTOS_rx_size>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	dd03      	ble.n	800bdc6 <vSocketSelect+0xd2>
							{
								xSocketBits |= eSELECT_READ;
 800bdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc0:	f043 0301 	orr.w	r3, r3, #1
 800bdc4:	62bb      	str	r3, [r7, #40]	; 0x28
							}
						}
						/* Is the set owner interested in EXCEPTION events? */
						if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdca:	f003 0304 	and.w	r3, r3, #4
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00d      	beq.n	800bdee <vSocketSelect+0xfa>
						{
							if( ( pxSocket->u.xTCP.ucTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == eCLOSED ) )
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bdd8:	2b08      	cmp	r3, #8
 800bdda:	d004      	beq.n	800bde6 <vSocketSelect+0xf2>
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d103      	bne.n	800bdee <vSocketSelect+0xfa>
							{
								xSocketBits |= eSELECT_EXCEPT;
 800bde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde8:	f043 0304 	orr.w	r3, r3, #4
 800bdec:	62bb      	str	r3, [r7, #40]	; 0x28
							}
						}

						/* Is the set owner interested in WRITE events? */
						if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf2:	f003 0302 	and.w	r3, r3, #2
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d043      	beq.n	800be82 <vSocketSelect+0x18e>
						{
							BaseType_t bMatch = pdFALSE;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	617b      	str	r3, [r7, #20]

							if( bAccepted != 0 )
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d007      	beq.n	800be14 <vSocketSelect+0x120>
							{
								if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f7ff ff0d 	bl	800bc24 <FreeRTOS_tx_space>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	dd01      	ble.n	800be14 <vSocketSelect+0x120>
								{
									bMatch = pdTRUE;
 800be10:	2301      	movs	r3, #1
 800be12:	617b      	str	r3, [r7, #20]
								}
							}

							if( bMatch == pdFALSE )
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d11d      	bne.n	800be56 <vSocketSelect+0x162>
							{
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be20:	f003 0308 	and.w	r3, r3, #8
 800be24:	b2db      	uxtb	r3, r3
 800be26:	2b00      	cmp	r3, #0
 800be28:	d015      	beq.n	800be56 <vSocketSelect+0x162>
									( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
								if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800be30:	2b04      	cmp	r3, #4
 800be32:	d910      	bls.n	800be56 <vSocketSelect+0x162>
									( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be3a:	f003 0310 	and.w	r3, r3, #16
 800be3e:	b2db      	uxtb	r3, r3
									( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) &&
 800be40:	2b00      	cmp	r3, #0
 800be42:	d108      	bne.n	800be56 <vSocketSelect+0x162>
								{
									pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800be4a:	f043 0310 	orr.w	r3, r3, #16
 800be4e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
									bMatch = pdTRUE;
 800be52:	2301      	movs	r3, #1
 800be54:	617b      	str	r3, [r7, #20]
								}
							}

							if( bMatch != pdFALSE )
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d012      	beq.n	800be82 <vSocketSelect+0x18e>
							{
								xSocketBits |= eSELECT_WRITE;
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	f043 0302 	orr.w	r3, r3, #2
 800be62:	62bb      	str	r3, [r7, #40]	; 0x28
 800be64:	e00d      	b.n	800be82 <vSocketSelect+0x18e>
					}
					else
				#endif /* ipconfigUSE_TCP == 1 */
				{
					/* Select events for UDP are simpler. */
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6a:	f003 0301 	and.w	r3, r3, #1
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d007      	beq.n	800be82 <vSocketSelect+0x18e>
						( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
					if( ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) &&
 800be76:	2b00      	cmp	r3, #0
 800be78:	d003      	beq.n	800be82 <vSocketSelect+0x18e>
					{
						xSocketBits |= eSELECT_READ;
 800be7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7c:	f043 0301 	orr.w	r3, r3, #1
 800be80:	62bb      	str	r3, [r7, #40]	; 0x28
					/* The WRITE and EXCEPT bits are not used for UDP */
				}	/* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

				/* Each socket keeps its own event flags, which are looked-up
				by FreeRTOS_FD_ISSSET() */
				pxSocket->xSocketBits = xSocketBits;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be86:	631a      	str	r2, [r3, #48]	; 0x30

				/* The ORed value will be used to set the bits in the event
				group. */
				xGroupBits |= xSocketBits;
 800be88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8c:	4313      	orrs	r3, r2
 800be8e:	627b      	str	r3, [r7, #36]	; 0x24
 800be90:	e000      	b.n	800be94 <vSocketSelect+0x1a0>
					continue;
 800be92:	bf00      	nop
				 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800be94:	6a3b      	ldr	r3, [r7, #32]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	623b      	str	r3, [r7, #32]
			for( pxIterator = ( const ListItem_t * ) ( listGET_NEXT( pxEnd ) );
 800be9a:	6a3a      	ldr	r2, [r7, #32]
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	f47f af42 	bne.w	800bd28 <vSocketSelect+0x34>
		for( xRound = 0; xRound <= xLastRound; xRound++ )
 800bea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea6:	3301      	adds	r3, #1
 800bea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800beaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	429a      	cmp	r2, r3
 800beb0:	f77f af2e 	ble.w	800bd10 <vSocketSelect+0x1c>

			}	/* for( pxIterator ... ) */
		}	/* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

		xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2100      	movs	r1, #0
 800beba:	4618      	mov	r0, r3
 800bebc:	f7f9 fddc 	bl	8005a78 <xEventGroupClearBits>
 800bec0:	60b8      	str	r0, [r7, #8]

		/* Now set the necessary bits. */
		xBitsToClear = ( xBitsToClear & ~xGroupBits ) & eSELECT_ALL;
 800bec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec4:	43da      	mvns	r2, r3
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	4013      	ands	r3, r2
 800beca:	f003 030f 	and.w	r3, r3, #15
 800bece:	60bb      	str	r3, [r7, #8]
		#if( ipconfigSUPPORT_SIGNALS != 0 )
		{
			/* Maybe the socketset was signalled, but don't
			clear the 'eSELECT_INTR' bit here, as it will be used
			and cleared in FreeRTOS_select(). */
			xBitsToClear &= ( EventBits_t ) ~eSELECT_INTR;
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	f023 0308 	bic.w	r3, r3, #8
 800bed6:	60bb      	str	r3, [r7, #8]
		}
		#endif /* ipconfigSUPPORT_SIGNALS */

		if( xBitsToClear != 0 )
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d005      	beq.n	800beea <vSocketSelect+0x1f6>
		{
			xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	68b9      	ldr	r1, [r7, #8]
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7f9 fdc7 	bl	8005a78 <xEventGroupClearBits>
		}

		/* Now include eSELECT_CALL_IP to wakeup the caller. */
		xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | eSELECT_CALL_IP );
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	f043 0310 	orr.w	r3, r3, #16
 800bef4:	4619      	mov	r1, r3
 800bef6:	4610      	mov	r0, r2
 800bef8:	f7f9 fdf4 	bl	8005ae4 <xEventGroupSetBits>
	}
 800befc:	bf00      	nop
 800befe:	3730      	adds	r7, #48	; 0x30
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	200058a4 	.word	0x200058a4
 800bf08:	20005890 	.word	0x20005890

0800bf0c <FreeRTOS_SignalSocket>:

#if( ipconfigSUPPORT_SIGNALS != 0 )

	/* Send a signal to the task which reads from this socket. */
	BaseType_t FreeRTOS_SignalSocket( Socket_t xSocket )
	{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
	FreeRTOS_Socket_t *pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn;

		if( pxSocket == NULL )
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d103      	bne.n	800bf26 <FreeRTOS_SignalSocket+0x1a>
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bf1e:	f06f 0315 	mvn.w	r3, #21
 800bf22:	60fb      	str	r3, [r7, #12]
 800bf24:	e022      	b.n	800bf6c <FreeRTOS_SignalSocket+0x60>
		}
		else
	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
		if( ( pxSocket->pxSocketSet != NULL ) && ( pxSocket->pxSocketSet->xSelectGroup != NULL ) )
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00e      	beq.n	800bf4c <FreeRTOS_SignalSocket+0x40>
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d009      	beq.n	800bf4c <FreeRTOS_SignalSocket+0x40>
		{
			xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_INTR );
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2108      	movs	r1, #8
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7f9 fdcf 	bl	8005ae4 <xEventGroupSetBits>
			xReturn = 0;
 800bf46:	2300      	movs	r3, #0
 800bf48:	60fb      	str	r3, [r7, #12]
 800bf4a:	e00f      	b.n	800bf6c <FreeRTOS_SignalSocket+0x60>
		}
		else
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */
		if( pxSocket->xEventGroup != NULL )
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d008      	beq.n	800bf66 <FreeRTOS_SignalSocket+0x5a>
		{
			xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_INTR );
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	2140      	movs	r1, #64	; 0x40
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7f9 fdc2 	bl	8005ae4 <xEventGroupSetBits>
			xReturn = 0;
 800bf60:	2300      	movs	r3, #0
 800bf62:	60fb      	str	r3, [r7, #12]
 800bf64:	e002      	b.n	800bf6c <FreeRTOS_SignalSocket+0x60>
		}
		else
		{
			xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bf66:	f06f 0315 	mvn.w	r3, #21
 800bf6a:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
	}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800bf76:	b480      	push	{r7}
 800bf78:	b083      	sub	sp, #12
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	6039      	str	r1, [r7, #0]
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	4293      	cmp	r3, r2
 800bf86:	bf28      	it	cs
 800bf88:	4613      	movcs	r3, r2
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	370c      	adds	r7, #12
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr

0800bf96 <uxStreamBufferSpace>:
{
 800bf96:	b480      	push	{r7}
 800bf98:	b087      	sub	sp, #28
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	60f8      	str	r0, [r7, #12]
 800bf9e:	60b9      	str	r1, [r7, #8]
 800bfa0:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	691a      	ldr	r2, [r3, #16]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	441a      	add	r2, r3
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	691a      	ldr	r2, [r3, #16]
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d804      	bhi.n	800bfc6 <uxStreamBufferSpace+0x30>
		uxCount -= pxBuffer->LENGTH;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	691b      	ldr	r3, [r3, #16]
 800bfc0:	697a      	ldr	r2, [r7, #20]
 800bfc2:	1ad3      	subs	r3, r2, r3
 800bfc4:	617b      	str	r3, [r7, #20]
	return uxCount;
 800bfc6:	697b      	ldr	r3, [r7, #20]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	371c      	adds	r7, #28
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <uxStreamBufferDistance>:
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b087      	sub	sp, #28
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	691a      	ldr	r2, [r3, #16]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	441a      	add	r2, r3
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	1ad3      	subs	r3, r2, r3
 800bfec:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	691a      	ldr	r2, [r3, #16]
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d804      	bhi.n	800c002 <uxStreamBufferDistance+0x2e>
		uxCount -= pxBuffer->LENGTH;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	691b      	ldr	r3, [r3, #16]
 800bffc:	697a      	ldr	r2, [r7, #20]
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	617b      	str	r3, [r7, #20]
	return uxCount;
 800c002:	697b      	ldr	r3, [r7, #20]
}
 800c004:	4618      	mov	r0, r3
 800c006:	371c      	adds	r7, #28
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <uxStreamBufferGetSpace>:
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800c024:	68ba      	ldr	r2, [r7, #8]
 800c026:	68f9      	ldr	r1, [r7, #12]
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f7ff ffb4 	bl	800bf96 <uxStreamBufferSpace>
 800c02e:	4603      	mov	r3, r0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <uxStreamBufferGetSize>:
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	68b9      	ldr	r1, [r7, #8]
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f7ff ffbf 	bl	800bfd4 <uxStreamBufferDistance>
 800c056:	4603      	mov	r3, r0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <xStreamBufferLessThenEqual>:
}
/*-----------------------------------------------------------*/

static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t *pxBuffer, const size_t uxLeft, const size_t uxRight );
static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t *pxBuffer, const size_t uxLeft, const size_t uxRight )
{
 800c060:	b480      	push	{r7}
 800c062:	b087      	sub	sp, #28
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
size_t uxTail = pxBuffer->uxTail;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	613b      	str	r3, [r7, #16]

	/* Returns true if ( uxLeft < uxRight ) */
	if( ( uxLeft < uxTail ) ^ ( uxRight < uxTail ) )
 800c072:	68ba      	ldr	r2, [r7, #8]
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	429a      	cmp	r2, r3
 800c078:	bf34      	ite	cc
 800c07a:	2301      	movcc	r3, #1
 800c07c:	2300      	movcs	r3, #0
 800c07e:	b2da      	uxtb	r2, r3
 800c080:	6879      	ldr	r1, [r7, #4]
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	4299      	cmp	r1, r3
 800c086:	bf34      	ite	cc
 800c088:	2301      	movcc	r3, #1
 800c08a:	2300      	movcs	r3, #0
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	4053      	eors	r3, r2
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b00      	cmp	r3, #0
 800c094:	d009      	beq.n	800c0aa <xStreamBufferLessThenEqual+0x4a>
	{
		if( uxRight < uxTail )
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d202      	bcs.n	800c0a4 <xStreamBufferLessThenEqual+0x44>
		{
			xReturn = pdTRUE;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	617b      	str	r3, [r7, #20]
 800c0a2:	e00b      	b.n	800c0bc <xStreamBufferLessThenEqual+0x5c>
		}
		else
		{
			xReturn = pdFALSE;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	617b      	str	r3, [r7, #20]
 800c0a8:	e008      	b.n	800c0bc <xStreamBufferLessThenEqual+0x5c>
		}
	}
	else
	{
		if( uxLeft <= uxRight )
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d802      	bhi.n	800c0b8 <xStreamBufferLessThenEqual+0x58>
		{
			xReturn = pdTRUE;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	617b      	str	r3, [r7, #20]
 800c0b6:	e001      	b.n	800c0bc <xStreamBufferLessThenEqual+0x5c>
		}
		else
		{
			xReturn = pdFALSE;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	617b      	str	r3, [r7, #20]
		}
	}
	return xReturn;
 800c0bc:	697b      	ldr	r3, [r7, #20]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	371c      	adds	r7, #28
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr

0800c0ca <uxStreamBufferAdd>:
 * an offset from uxHead while uxHead will not be moved yet.  This possibility
 * will be used when TCP data is received while earlier data is still missing.
 * If 'pucData' equals NULL, the function is called to advance 'uxHead' only.
 */
size_t uxStreamBufferAdd( StreamBuffer_t *pxBuffer, size_t uxOffset, const uint8_t *pucData, size_t uxCount )
{
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b088      	sub	sp, #32
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	60f8      	str	r0, [r7, #12]
 800c0d2:	60b9      	str	r1, [r7, #8]
 800c0d4:	607a      	str	r2, [r7, #4]
 800c0d6:	603b      	str	r3, [r7, #0]
size_t uxSpace, uxNextHead, uxFirst;

	uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800c0d8:	68f8      	ldr	r0, [r7, #12]
 800c0da:	f7ff ff99 	bl	800c010 <uxStreamBufferGetSpace>
 800c0de:	61f8      	str	r0, [r7, #28]

	/* If uxOffset > 0, items can be placed in front of uxHead */
	if( uxSpace > uxOffset )
 800c0e0:	69fa      	ldr	r2, [r7, #28]
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d904      	bls.n	800c0f2 <uxStreamBufferAdd+0x28>
	{
		uxSpace -= uxOffset;
 800c0e8:	69fa      	ldr	r2, [r7, #28]
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	1ad3      	subs	r3, r2, r3
 800c0ee:	61fb      	str	r3, [r7, #28]
 800c0f0:	e001      	b.n	800c0f6 <uxStreamBufferAdd+0x2c>
	}
	else
	{
		uxSpace = 0u;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	61fb      	str	r3, [r7, #28]
	}

	/* The number of bytes that can be written is the minimum of the number of
	bytes requested and the number available. */
	uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );
 800c0f6:	6839      	ldr	r1, [r7, #0]
 800c0f8:	69f8      	ldr	r0, [r7, #28]
 800c0fa:	f7ff ff3c 	bl	800bf76 <FreeRTOS_min_uint32>
 800c0fe:	6038      	str	r0, [r7, #0]

	if( uxCount != 0u )
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d05a      	beq.n	800c1bc <uxStreamBufferAdd+0xf2>
	{
		uxNextHead = pxBuffer->uxHead;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	61bb      	str	r3, [r7, #24]

		if( uxOffset != 0u )
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d00d      	beq.n	800c12e <uxStreamBufferAdd+0x64>
		{
			/* ( uxOffset > 0 ) means: write in front if the uxHead marker */
			uxNextHead += uxOffset;
 800c112:	69ba      	ldr	r2, [r7, #24]
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	4413      	add	r3, r2
 800c118:	61bb      	str	r3, [r7, #24]
			if( uxNextHead >= pxBuffer->LENGTH )
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	691a      	ldr	r2, [r3, #16]
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	429a      	cmp	r2, r3
 800c122:	d804      	bhi.n	800c12e <uxStreamBufferAdd+0x64>
			{
				uxNextHead -= pxBuffer->LENGTH;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	691b      	ldr	r3, [r3, #16]
 800c128:	69ba      	ldr	r2, [r7, #24]
 800c12a:	1ad3      	subs	r3, r2, r3
 800c12c:	61bb      	str	r3, [r7, #24]
			}
		}

		if( pucData != NULL )
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d022      	beq.n	800c17a <uxStreamBufferAdd+0xb0>
		{
			/* Calculate the number of bytes that can be added in the first
			write - which may be less than the total number of bytes that need
			to be added if the buffer will wrap back to the beginning. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	691a      	ldr	r2, [r3, #16]
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	1ad3      	subs	r3, r2, r3
 800c13c:	6839      	ldr	r1, [r7, #0]
 800c13e:	4618      	mov	r0, r3
 800c140:	f7ff ff19 	bl	800bf76 <FreeRTOS_min_uint32>
 800c144:	6178      	str	r0, [r7, #20]

			/* Write as many bytes as can be written in the first write. */
			memcpy( ( void* ) ( pxBuffer->ucArray + uxNextHead ), pucData, uxFirst );
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f103 0214 	add.w	r2, r3, #20
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	4413      	add	r3, r2
 800c150:	697a      	ldr	r2, [r7, #20]
 800c152:	6879      	ldr	r1, [r7, #4]
 800c154:	4618      	mov	r0, r3
 800c156:	f004 fcb0 	bl	8010aba <memcpy>

			/* If the number of bytes written was less than the number that
			could be written in the first write... */
			if( uxCount > uxFirst )
 800c15a:	683a      	ldr	r2, [r7, #0]
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d90b      	bls.n	800c17a <uxStreamBufferAdd+0xb0>
			{
				/* ...then write the remaining bytes to the start of the
				buffer. */
				memcpy( ( void * )pxBuffer->ucArray, pucData + uxFirst, uxCount - uxFirst );
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f103 0014 	add.w	r0, r3, #20
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	18d1      	adds	r1, r2, r3
 800c16e:	683a      	ldr	r2, [r7, #0]
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	1ad3      	subs	r3, r2, r3
 800c174:	461a      	mov	r2, r3
 800c176:	f004 fca0 	bl	8010aba <memcpy>
			}
		}

		if( uxOffset == 0u )
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d110      	bne.n	800c1a2 <uxStreamBufferAdd+0xd8>
		{
			/* ( uxOffset == 0 ) means: write at uxHead position */
			uxNextHead += uxCount;
 800c180:	69ba      	ldr	r2, [r7, #24]
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	4413      	add	r3, r2
 800c186:	61bb      	str	r3, [r7, #24]
			if( uxNextHead >= pxBuffer->LENGTH )
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	691a      	ldr	r2, [r3, #16]
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d804      	bhi.n	800c19c <uxStreamBufferAdd+0xd2>
			{
				uxNextHead -= pxBuffer->LENGTH;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	69ba      	ldr	r2, [r7, #24]
 800c198:	1ad3      	subs	r3, r2, r3
 800c19a:	61bb      	str	r3, [r7, #24]
			}
			pxBuffer->uxHead = uxNextHead;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	69ba      	ldr	r2, [r7, #24]
 800c1a0:	609a      	str	r2, [r3, #8]
		}

		if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	69ba      	ldr	r2, [r7, #24]
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f7ff ff58 	bl	800c060 <xStreamBufferLessThenEqual>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d002      	beq.n	800c1bc <uxStreamBufferAdd+0xf2>
		{
			/* Advance the front pointer */
			pxBuffer->uxFront = uxNextHead;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	69ba      	ldr	r2, [r7, #24]
 800c1ba:	60da      	str	r2, [r3, #12]
		}
	}

	return uxCount;
 800c1bc:	683b      	ldr	r3, [r7, #0]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3720      	adds	r7, #32
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <uxStreamBufferGet>:
 * If 'pucData' equals NULL, the function is called to advance 'lTail' only.
 * if 'xPeek' is pdTRUE, or if 'uxOffset' is non-zero, the 'lTail' pointer will
 * not be advanced.
 */
size_t uxStreamBufferGet( StreamBuffer_t *pxBuffer, size_t uxOffset, uint8_t *pucData, size_t uxMaxCount, BaseType_t xPeek )
{
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b088      	sub	sp, #32
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	60f8      	str	r0, [r7, #12]
 800c1ce:	60b9      	str	r1, [r7, #8]
 800c1d0:	607a      	str	r2, [r7, #4]
 800c1d2:	603b      	str	r3, [r7, #0]
size_t uxSize, uxCount, uxFirst, uxNextTail;

	/* How much data is available? */
	uxSize = uxStreamBufferGetSize( pxBuffer );
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f7ff ff2f 	bl	800c038 <uxStreamBufferGetSize>
 800c1da:	61f8      	str	r0, [r7, #28]

	if( uxSize > uxOffset )
 800c1dc:	69fa      	ldr	r2, [r7, #28]
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d904      	bls.n	800c1ee <uxStreamBufferGet+0x28>
	{
		uxSize -= uxOffset;
 800c1e4:	69fa      	ldr	r2, [r7, #28]
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	1ad3      	subs	r3, r2, r3
 800c1ea:	61fb      	str	r3, [r7, #28]
 800c1ec:	e001      	b.n	800c1f2 <uxStreamBufferGet+0x2c>
	}
	else
	{
		uxSize = 0u;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	61fb      	str	r3, [r7, #28]
	}

	/* Use the minimum of the wanted bytes and the available bytes. */
	uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );
 800c1f2:	6839      	ldr	r1, [r7, #0]
 800c1f4:	69f8      	ldr	r0, [r7, #28]
 800c1f6:	f7ff febe 	bl	800bf76 <FreeRTOS_min_uint32>
 800c1fa:	6178      	str	r0, [r7, #20]

	if( uxCount > 0u )
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d050      	beq.n	800c2a4 <uxStreamBufferGet+0xde>
	{
		uxNextTail = pxBuffer->uxTail;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	61bb      	str	r3, [r7, #24]

		if( uxOffset != 0u )
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00d      	beq.n	800c22a <uxStreamBufferGet+0x64>
		{
			uxNextTail += uxOffset;
 800c20e:	69ba      	ldr	r2, [r7, #24]
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	4413      	add	r3, r2
 800c214:	61bb      	str	r3, [r7, #24]
			if( uxNextTail >= pxBuffer->LENGTH )
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	691a      	ldr	r2, [r3, #16]
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d804      	bhi.n	800c22a <uxStreamBufferGet+0x64>
			{
				uxNextTail -= pxBuffer->LENGTH;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	691b      	ldr	r3, [r3, #16]
 800c224:	69ba      	ldr	r2, [r7, #24]
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	61bb      	str	r3, [r7, #24]
			}
		}

		if( pucData != NULL )
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d022      	beq.n	800c276 <uxStreamBufferGet+0xb0>
		{
			/* Calculate the number of bytes that can be read - which may be
			less than the number wanted if the data wraps around to the start of
			the buffer. */
			uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	691a      	ldr	r2, [r3, #16]
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	6979      	ldr	r1, [r7, #20]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7ff fe9b 	bl	800bf76 <FreeRTOS_min_uint32>
 800c240:	6138      	str	r0, [r7, #16]

			/* Obtain the number of bytes it is possible to obtain in the first
			read. */
			memcpy( pucData, pxBuffer->ucArray + uxNextTail, uxFirst );
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f103 0214 	add.w	r2, r3, #20
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	4413      	add	r3, r2
 800c24c:	693a      	ldr	r2, [r7, #16]
 800c24e:	4619      	mov	r1, r3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f004 fc32 	bl	8010aba <memcpy>

			/* If the total number of wanted bytes is greater than the number
			that could be read in the first read... */
			if( uxCount > uxFirst )
 800c256:	697a      	ldr	r2, [r7, #20]
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d90b      	bls.n	800c276 <uxStreamBufferGet+0xb0>
			{
				/*...then read the remaining bytes from the start of the buffer. */
				memcpy( pucData + uxFirst, pxBuffer->ucArray, uxCount - uxFirst );
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	18d0      	adds	r0, r2, r3
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f103 0114 	add.w	r1, r3, #20
 800c26a:	697a      	ldr	r2, [r7, #20]
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	1ad3      	subs	r3, r2, r3
 800c270:	461a      	mov	r2, r3
 800c272:	f004 fc22 	bl	8010aba <memcpy>
			}
		}

		if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 800c276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d113      	bne.n	800c2a4 <uxStreamBufferGet+0xde>
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d110      	bne.n	800c2a4 <uxStreamBufferGet+0xde>
		{
			/* Move the tail pointer to effecively remove the data read from
			the buffer. */
			uxNextTail += uxCount;
 800c282:	69ba      	ldr	r2, [r7, #24]
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	4413      	add	r3, r2
 800c288:	61bb      	str	r3, [r7, #24]

			if( uxNextTail >= pxBuffer->LENGTH )
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	691a      	ldr	r2, [r3, #16]
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	429a      	cmp	r2, r3
 800c292:	d804      	bhi.n	800c29e <uxStreamBufferGet+0xd8>
			{
				uxNextTail -= pxBuffer->LENGTH;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	691b      	ldr	r3, [r3, #16]
 800c298:	69ba      	ldr	r2, [r7, #24]
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	61bb      	str	r3, [r7, #24]
			}

			pxBuffer->uxTail = uxNextTail;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	69ba      	ldr	r2, [r7, #24]
 800c2a2:	601a      	str	r2, [r3, #0]
		}
	}

	return uxCount;
 800c2a4:	697b      	ldr	r3, [r7, #20]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3720      	adds	r7, #32
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <FreeRTOS_max_int32>:
	static portINLINE int32_t  FreeRTOS_max_int32  (int32_t  a, int32_t  b) { return a >= b ? a : b; }
 800c2ae:	b480      	push	{r7}
 800c2b0:	b083      	sub	sp, #12
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
 800c2b6:	6039      	str	r1, [r7, #0]
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	bfb8      	it	lt
 800c2c0:	4613      	movlt	r3, r2
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	370c      	adds	r7, #12
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <FreeRTOS_min_int32>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 800c2ce:	b480      	push	{r7}
 800c2d0:	b083      	sub	sp, #12
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	6039      	str	r1, [r7, #0]
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	bfa8      	it	ge
 800c2e0:	4613      	movge	r3, r2
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800c2ee:	b480      	push	{r7}
 800c2f0:	b083      	sub	sp, #12
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
 800c2f6:	6039      	str	r1, [r7, #0]
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	bf28      	it	cs
 800c300:	4613      	movcs	r3, r2
 800c302:	4618      	mov	r0, r3
 800c304:	370c      	adds	r7, #12
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr

0800c30e <uxStreamBufferSpace>:
{
 800c30e:	b480      	push	{r7}
 800c310:	b087      	sub	sp, #28
 800c312:	af00      	add	r7, sp, #0
 800c314:	60f8      	str	r0, [r7, #12]
 800c316:	60b9      	str	r1, [r7, #8]
 800c318:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1u;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	691a      	ldr	r2, [r3, #16]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	441a      	add	r2, r3
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	1ad3      	subs	r3, r2, r3
 800c326:	3b01      	subs	r3, #1
 800c328:	617b      	str	r3, [r7, #20]
	if( uxCount >= pxBuffer->LENGTH )
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	691a      	ldr	r2, [r3, #16]
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	429a      	cmp	r2, r3
 800c332:	d804      	bhi.n	800c33e <uxStreamBufferSpace+0x30>
		uxCount -= pxBuffer->LENGTH;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	691b      	ldr	r3, [r3, #16]
 800c338:	697a      	ldr	r2, [r7, #20]
 800c33a:	1ad3      	subs	r3, r2, r3
 800c33c:	617b      	str	r3, [r7, #20]
	return uxCount;
 800c33e:	697b      	ldr	r3, [r7, #20]
}
 800c340:	4618      	mov	r0, r3
 800c342:	371c      	adds	r7, #28
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <uxStreamBufferDistance>:
{
 800c34c:	b480      	push	{r7}
 800c34e:	b087      	sub	sp, #28
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	607a      	str	r2, [r7, #4]
	uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	691a      	ldr	r2, [r3, #16]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	441a      	add	r2, r3
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	1ad3      	subs	r3, r2, r3
 800c364:	617b      	str	r3, [r7, #20]
	if ( uxCount >= pxBuffer->LENGTH )
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	691a      	ldr	r2, [r3, #16]
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d804      	bhi.n	800c37a <uxStreamBufferDistance+0x2e>
		uxCount -= pxBuffer->LENGTH;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	691b      	ldr	r3, [r3, #16]
 800c374:	697a      	ldr	r2, [r7, #20]
 800c376:	1ad3      	subs	r3, r2, r3
 800c378:	617b      	str	r3, [r7, #20]
	return uxCount;
 800c37a:	697b      	ldr	r3, [r7, #20]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	371c      	adds	r7, #28
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <uxStreamBufferGetSpace>:
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	68f9      	ldr	r1, [r7, #12]
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f7ff ffb4 	bl	800c30e <uxStreamBufferSpace>
 800c3a6:	4603      	mov	r3, r0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3710      	adds	r7, #16
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <uxStreamBufferFrontSpace>:
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
size_t uxFront = pxBuffer->uxFront;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	60fb      	str	r3, [r7, #12]
size_t uxTail = pxBuffer->uxTail;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	68f9      	ldr	r1, [r7, #12]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f7ff ffa0 	bl	800c30e <uxStreamBufferSpace>
 800c3ce:	4603      	mov	r3, r0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <uxStreamBufferMidSpace>:
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
size_t uxHead = pxBuffer->uxHead;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	60fb      	str	r3, [r7, #12]
size_t uxMid = pxBuffer->uxMid;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	60bb      	str	r3, [r7, #8]
	return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	68b9      	ldr	r1, [r7, #8]
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f7ff ffab 	bl	800c34c <uxStreamBufferDistance>
 800c3f6:	4603      	mov	r3, r0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <vStreamBufferMoveMid>:
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f7ff ffe4 	bl	800c3d8 <uxStreamBufferMidSpace>
 800c410:	60f8      	str	r0, [r7, #12]
	if( uxCount > uxSize )
 800c412:	683a      	ldr	r2, [r7, #0]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	429a      	cmp	r2, r3
 800c418:	d901      	bls.n	800c41e <vStreamBufferMoveMid+0x1e>
		uxCount = uxSize;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	603b      	str	r3, [r7, #0]
	pxBuffer->uxMid += uxCount;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	685a      	ldr	r2, [r3, #4]
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	441a      	add	r2, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	605a      	str	r2, [r3, #4]
	if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	685a      	ldr	r2, [r3, #4]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	429a      	cmp	r2, r3
 800c434:	d306      	bcc.n	800c444 <vStreamBufferMoveMid+0x44>
		pxBuffer->uxMid -= pxBuffer->LENGTH;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	685a      	ldr	r2, [r3, #4]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	1ad2      	subs	r2, r2, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	605a      	str	r2, [r3, #4]
}
 800c444:	bf00      	nop
 800c446:	3710      	adds	r7, #16
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <ulChar2u32>:
{
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	061a      	lsls	r2, r3, #24
			( ( ( uint32_t )apChr[1] ) << 16) |
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	3301      	adds	r3, #1
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	041b      	lsls	r3, r3, #16
	return  ( ( ( uint32_t )apChr[0] ) << 24) |
 800c462:	431a      	orrs	r2, r3
			( ( ( uint32_t )apChr[2] ) << 8) |
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	3302      	adds	r3, #2
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	021b      	lsls	r3, r3, #8
			( ( ( uint32_t )apChr[1] ) << 16) |
 800c46c:	4313      	orrs	r3, r2
			( ( ( uint32_t )apChr[3] ) );
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	3203      	adds	r2, #3
 800c472:	7812      	ldrb	r2, [r2, #0]
			( ( ( uint32_t )apChr[2] ) << 8) |
 800c474:	4313      	orrs	r3, r2
}
 800c476:	4618      	mov	r0, r3
 800c478:	370c      	adds	r7, #12
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr

0800c482 <usChar2u16>:
{
 800c482:	b480      	push	{r7}
 800c484:	b083      	sub	sp, #12
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
			( ( ( ( uint32_t )apChr[0] ) << 8) |
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	b29b      	uxth	r3, r3
 800c490:	021b      	lsls	r3, r3, #8
 800c492:	b29a      	uxth	r2, r3
			  ( ( ( uint32_t )apChr[1] ) ) );
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	3301      	adds	r3, #1
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	b29b      	uxth	r3, r3
	return ( uint16_t )
 800c49c:	4313      	orrs	r3, r2
 800c49e:	b29b      	uxth	r3, r3
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	370c      	adds	r7, #12
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr

0800c4ac <prvTCPSocketIsActive>:

/* prvTCPSocketIsActive() returns true if the socket must be checked.
 * Non-active sockets are waiting for user action, either connect()
 * or close(). */
static BaseType_t prvTCPSocketIsActive( UBaseType_t uxStatus )
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
	switch( uxStatus )
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2b0b      	cmp	r3, #11
 800c4b8:	d81c      	bhi.n	800c4f4 <prvTCPSocketIsActive+0x48>
 800c4ba:	a201      	add	r2, pc, #4	; (adr r2, 800c4c0 <prvTCPSocketIsActive+0x14>)
 800c4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c0:	0800c4f1 	.word	0x0800c4f1
 800c4c4:	0800c4f5 	.word	0x0800c4f5
 800c4c8:	0800c4f5 	.word	0x0800c4f5
 800c4cc:	0800c4f5 	.word	0x0800c4f5
 800c4d0:	0800c4f5 	.word	0x0800c4f5
 800c4d4:	0800c4f5 	.word	0x0800c4f5
 800c4d8:	0800c4f5 	.word	0x0800c4f5
 800c4dc:	0800c4f1 	.word	0x0800c4f1
 800c4e0:	0800c4f1 	.word	0x0800c4f1
 800c4e4:	0800c4f1 	.word	0x0800c4f1
 800c4e8:	0800c4f5 	.word	0x0800c4f5
 800c4ec:	0800c4f1 	.word	0x0800c4f1
	case eCLOSED:
	case eCLOSE_WAIT:
	case eFIN_WAIT_2:
	case eCLOSING:
	case eTIME_WAIT:
		return pdFALSE;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	e000      	b.n	800c4f6 <prvTCPSocketIsActive+0x4a>
	default:
		return pdTRUE;
 800c4f4:	2301      	movs	r3, #1
	}
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	370c      	adds	r7, #12
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
 800c502:	bf00      	nop

0800c504 <prvTCPStatusAgeCheck>:
/*-----------------------------------------------------------*/

#if( ipconfigTCP_HANG_PROTECTION == 1 )

	static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t *pxSocket )
	{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
	BaseType_t xResult;
		switch( pxSocket->u.xTCP.ucTCPState )
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c512:	2b08      	cmp	r3, #8
 800c514:	d81a      	bhi.n	800c54c <prvTCPStatusAgeCheck+0x48>
 800c516:	a201      	add	r2, pc, #4	; (adr r2, 800c51c <prvTCPStatusAgeCheck+0x18>)
 800c518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51c:	0800c547 	.word	0x0800c547
 800c520:	0800c547 	.word	0x0800c547
 800c524:	0800c54d 	.word	0x0800c54d
 800c528:	0800c54d 	.word	0x0800c54d
 800c52c:	0800c54d 	.word	0x0800c54d
 800c530:	0800c541 	.word	0x0800c541
 800c534:	0800c54d 	.word	0x0800c54d
 800c538:	0800c54d 	.word	0x0800c54d
 800c53c:	0800c547 	.word	0x0800c547
		{
		case eESTABLISHED:
			/* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
			state ESTABLISHED can be protected using keep-alive messages. */
			xResult = pdFALSE;
 800c540:	2300      	movs	r3, #0
 800c542:	60fb      	str	r3, [r7, #12]
			break;
 800c544:	e005      	b.n	800c552 <prvTCPStatusAgeCheck+0x4e>
		case eCLOSED:
		case eTCP_LISTEN:
		case eCLOSE_WAIT:
			/* These 3 states may last for ever, up to the owner. */
			xResult = pdFALSE;
 800c546:	2300      	movs	r3, #0
 800c548:	60fb      	str	r3, [r7, #12]
			break;
 800c54a:	e002      	b.n	800c552 <prvTCPStatusAgeCheck+0x4e>
		default:
			/* All other (non-connected) states will get anti-hanging
			protection. */
			xResult = pdTRUE;
 800c54c:	2301      	movs	r3, #1
 800c54e:	60fb      	str	r3, [r7, #12]
			break;
 800c550:	bf00      	nop
		}
		if( xResult != pdFALSE )
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d025      	beq.n	800c5a4 <prvTCPStatusAgeCheck+0xa0>
		{
			/* How much time has past since the last active moment which is
			defined as A) a state change or B) a packet has arrived. */
			TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastActTime;
 800c558:	f7fb f8c8 	bl	80076ec <xTaskGetTickCount>
 800c55c:	4602      	mov	r2, r0
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c562:	1ad3      	subs	r3, r2, r3
 800c564:	60bb      	str	r3, [r7, #8]

			/* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
			if( xAge > ( ipconfigTCP_HANG_PROTECTION_TIME * configTICK_RATE_HZ ) )
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	f247 5230 	movw	r2, #30000	; 0x7530
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d919      	bls.n	800c5a4 <prvTCPStatusAgeCheck+0xa0>
						FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) ) );
				}
				#endif /* ipconfigHAS_DEBUG_PRINTF */

				/* Move to eCLOSE_WAIT, user may close the socket. */
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c570:	2108      	movs	r1, #8
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 fd39 	bl	800cfea <vTCPStateChange>

				/* When 'bPassQueued' true, this socket is an orphan until it
				gets connected. */
				if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c57e:	f003 0304 	and.w	r3, r3, #4
 800c582:	b2db      	uxtb	r3, r3
 800c584:	2b00      	cmp	r3, #0
 800c586:	d00d      	beq.n	800c5a4 <prvTCPStatusAgeCheck+0xa0>
				{
					if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c58e:	f003 0308 	and.w	r3, r3, #8
 800c592:	b2db      	uxtb	r3, r3
 800c594:	2b00      	cmp	r3, #0
 800c596:	d102      	bne.n	800c59e <prvTCPStatusAgeCheck+0x9a>
					{
						/* As it did not get connected, and the user can never
						accept() it anymore, it will be deleted now.  Called from
						the IP-task, so it's safe to call the internal Close
						function: vSocketClose(). */
						vSocketClose( pxSocket );
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f7fe feb9 	bl	800b310 <vSocketClose>
					}
					/* Return a negative value to tell to inform the caller
					xTCPTimerCheck()
					that the socket got closed and may not be accessed anymore. */
					xResult = -1;
 800c59e:	f04f 33ff 	mov.w	r3, #4294967295
 800c5a2:	60fb      	str	r3, [r7, #12]
				}
			}
		}
		return xResult;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
	}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop

0800c5b0 <xTCPSocketCheck>:
 *		prvTCPSendRepeated()			// Send at most 8 messages on a row
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t *pxSocket )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
BaseType_t xResult = 0;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	60fb      	str	r3, [r7, #12]
BaseType_t xReady = pdFALSE;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	60bb      	str	r3, [r7, #8]

	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c5c6:	2b04      	cmp	r3, #4
 800c5c8:	d906      	bls.n	800c5d8 <xTCPSocketCheck+0x28>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d002      	beq.n	800c5d8 <xTCPSocketCheck+0x28>
	{
		/* The API FreeRTOS_send() might have added data to the TX stream.  Add
		this data to the windowing system to it can be transmitted. */
		prvTCPAddTxData( pxSocket );
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f001 f82a 	bl	800d62c <prvTCPAddTxData>
	}

	#if ipconfigUSE_TCP_WIN == 1
	{
		if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d02a      	beq.n	800c636 <xTCPSocketCheck+0x86>
		{
			/* The first task of this regular socket check is to send-out delayed
			ACK's. */
			if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c5e6:	f003 0320 	and.w	r3, r3, #32
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d116      	bne.n	800c61e <xTCPSocketCheck+0x6e>
			{
				/* Earlier data was received but not yet acknowledged.  This
				function is called when the TCP timer for the socket expires, the
				ACK may be sent now. */
				if( pxSocket->u.xTCP.ucTCPState != eCLOSED )
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d009      	beq.n	800c60e <xTCPSocketCheck+0x5e>
				{
					if( xTCPWindowLoggingLevel > 1 && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800c5fa:	4b1d      	ldr	r3, [pc, #116]	; (800c670 <xTCPSocketCheck+0xc0>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b01      	cmp	r3, #1
							pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
							pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber   - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber,
							ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) );
					}

					prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800c604:	2300      	movs	r3, #0
 800c606:	2228      	movs	r2, #40	; 0x28
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 f8bb 	bl	800c784 <prvTCPReturnPacket>
						clear the pointer to it. */
						pxSocket->u.xTCP.pxAckMessage = NULL;
					}
					#endif /* ipconfigZERO_COPY_TX_DRIVER */
				}
				if( prvTCPNextTimeout( pxSocket ) > 1 )
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 ff8e 	bl	800d530 <prvTCPNextTimeout>
 800c614:	4603      	mov	r3, r0
 800c616:	2b01      	cmp	r3, #1
 800c618:	d901      	bls.n	800c61e <xTCPSocketCheck+0x6e>
				{
					/* Tell the code below that this function is ready. */
					xReady = pdTRUE;
 800c61a:	2301      	movs	r3, #1
 800c61c:	60bb      	str	r3, [r7, #8]
				/* The user wants to perform an active shutdown(), skip sending
				the	delayed	ACK.  The function prvTCPSendPacket() will send the
				FIN	along with the ACK's. */
			}

			if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c622:	2b00      	cmp	r3, #0
 800c624:	d007      	beq.n	800c636 <xTCPSocketCheck+0x86>
			{
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c62a:	4618      	mov	r0, r3
 800c62c:	f003 fa96 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
				pxSocket->u.xTCP.pxAckMessage = NULL;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	67da      	str	r2, [r3, #124]	; 0x7c
			}
		}
	}
	#endif /* ipconfigUSE_TCP_WIN */

	if( xReady == pdFALSE )
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d113      	bne.n	800c664 <xTCPSocketCheck+0xb4>
	{
		/* The second task of this regular socket check is sending out data. */
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c642:	2b04      	cmp	r3, #4
 800c644:	d804      	bhi.n	800c650 <xTCPSocketCheck+0xa0>
			( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) )
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
		if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) ||
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	d102      	bne.n	800c656 <xTCPSocketCheck+0xa6>
		{
			prvTCPSendPacket( pxSocket );
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 f80f 	bl	800c674 <prvTCPSendPacket>
		}

		/* Set the time-out for the next wakeup for this socket. */
		prvTCPNextTimeout( pxSocket );
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 ff6a 	bl	800d530 <prvTCPNextTimeout>

		#if( ipconfigTCP_HANG_PROTECTION == 1 )
		{
			/* In all (non-connected) states in which keep-alive messages can not be sent
			the anti-hang protocol will close sockets that are 'hanging'. */
			xResult = prvTCPStatusAgeCheck( pxSocket );
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f7ff ff51 	bl	800c504 <prvTCPStatusAgeCheck>
 800c662:	60f8      	str	r0, [r7, #12]
		}
		#endif
	}

	return xResult;
 800c664:	68fb      	ldr	r3, [r7, #12]
}
 800c666:	4618      	mov	r0, r3
 800c668:	3710      	adds	r7, #16
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	200047e0 	.word	0x200047e0

0800c674 <prvTCPSendPacket>:
/*
 * prvTCPSendPacket() will be called when the socket time-out has been reached.
 * It is only called by xTCPSocketCheck().
 */
static int32_t prvTCPSendPacket( FreeRTOS_Socket_t *pxSocket )
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b086      	sub	sp, #24
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
int32_t lResult = 0;
 800c67c:	2300      	movs	r3, #0
 800c67e:	617b      	str	r3, [r7, #20]
UBaseType_t uxOptionsLength;
TCPPacket_t *pxTCPPacket;
NetworkBufferDescriptor_t *pxNetworkBuffer;

	if( pxSocket->u.xTCP.ucTCPState != eCONNECT_SYN )
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c686:	2b02      	cmp	r3, #2
 800c688:	d010      	beq.n	800c6ac <prvTCPSendPacket+0x38>
	{
		/* The connection is in s state other than SYN. */
		pxNetworkBuffer = NULL;
 800c68a:	2300      	movs	r3, #0
 800c68c:	60bb      	str	r3, [r7, #8]

		/* prvTCPSendRepeated() will only create a network buffer if necessary,
		i.e. when data must be sent to the peer. */
		lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800c68e:	f107 0308 	add.w	r3, r7, #8
 800c692:	4619      	mov	r1, r3
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 f848 	bl	800c72a <prvTCPSendRepeated>
 800c69a:	6178      	str	r0, [r7, #20]

		if( pxNetworkBuffer != NULL )
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d03e      	beq.n	800c720 <prvTCPSendPacket+0xac>
		{
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f003 fa59 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
 800c6aa:	e039      	b.n	800c720 <prvTCPSendPacket+0xac>
		}
	}
	else
	{
		if( pxSocket->u.xTCP.ucRepCount >= 3u )
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c6b2:	2b02      	cmp	r3, #2
 800c6b4:	d904      	bls.n	800c6c0 <prvTCPSendPacket+0x4c>
			to most 3 times.  When there is no response, the socket get the
			status 'eCLOSE_WAIT'. */
			FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
				pxSocket->u.xTCP.ulRemoteIP,		/* IP address of remote machine. */
				pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c6b6:	2108      	movs	r1, #8
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 fc96 	bl	800cfea <vTCPStateChange>
 800c6be:	e02f      	b.n	800c720 <prvTCPSendPacket+0xac>
		}
		else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6c6:	f003 0308 	and.w	r3, r3, #8
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d105      	bne.n	800c6dc <prvTCPSendPacket+0x68>
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 fa29 	bl	800cb28 <prvTCPPrepareConnect>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d121      	bne.n	800c720 <prvTCPSendPacket+0xac>
		{
			/* Or else, if the connection has been prepared, or can be prepared
			now, proceed to send the packet with the SYN flag.
			prvTCPPrepareConnect() prepares 'xPacket' and returns pdTRUE if
			the Ethernet address of the peer or the gateway is found. */
			pxTCPPacket = ( TCPPacket_t * )pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	3382      	adds	r3, #130	; 0x82
 800c6e0:	613b      	str	r3, [r7, #16]
			#endif

			/* About to send a SYN packet.  Call prvSetSynAckOptions() to set
			the proper options: The size of MSS and whether SACK's are
			allowed. */
			uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPPacket );
 800c6e2:	6939      	ldr	r1, [r7, #16]
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 fc08 	bl	800cefa <prvSetSynAckOptions>
 800c6ea:	60f8      	str	r0, [r7, #12]

			/* Return the number of bytes to be sent. */
			lResult = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	3328      	adds	r3, #40	; 0x28
 800c6f0:	617b      	str	r3, [r7, #20]

			/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
			uxOptionsLength is always a multiple of 4.  The complete expression
			would be:
			ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
			pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	3314      	adds	r3, #20
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	b2da      	uxtb	r2, r3
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

			/* Repeat Count is used for a connecting socket, to limit the number
			of tries. */
			pxSocket->u.xTCP.ucRepCount++;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c70a:	3301      	adds	r3, #1
 800c70c:	b2da      	uxtb	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

			/* Send the SYN message to make a connection.  The messages is
			stored in the socket field 'xPacket'.  It will be wrapped in a
			pseudo network buffer descriptor before it will be sent. */
			prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 800c714:	697a      	ldr	r2, [r7, #20]
 800c716:	2300      	movs	r3, #0
 800c718:	2100      	movs	r1, #0
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 f832 	bl	800c784 <prvTCPReturnPacket>
		}
	}

	/* Return the total number of bytes sent. */
	return lResult;
 800c720:	697b      	ldr	r3, [r7, #20]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3718      	adds	r7, #24
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}

0800c72a <prvTCPSendRepeated>:
/*
 * prvTCPSendRepeated will try to send a series of messages, as long as there is
 * data to be sent and as long as the transmit window isn't full.
 */
static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer )
{
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b086      	sub	sp, #24
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
 800c732:	6039      	str	r1, [r7, #0]
UBaseType_t uxIndex;
int32_t lResult = 0;
 800c734:	2300      	movs	r3, #0
 800c736:	613b      	str	r3, [r7, #16]
UBaseType_t uxOptionsLength = 0u;
 800c738:	2300      	movs	r3, #0
 800c73a:	60fb      	str	r3, [r7, #12]
int32_t xSendLength;

	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800c73c:	2300      	movs	r3, #0
 800c73e:	617b      	str	r3, [r7, #20]
 800c740:	e016      	b.n	800c770 <prvTCPSendRepeated+0x46>
	{
		/* prvTCPPrepareSend() might allocate a network buffer if there is data
		to be sent. */
		xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800c742:	68fa      	ldr	r2, [r7, #12]
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fd8a 	bl	800d260 <prvTCPPrepareSend>
 800c74c:	60b8      	str	r0, [r7, #8]
		if( xSendLength <= 0 )
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	2b00      	cmp	r3, #0
 800c752:	dd11      	ble.n	800c778 <prvTCPSendRepeated+0x4e>
		{
			break;
		}

		/* And return the packet to the peer. */
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	6819      	ldr	r1, [r3, #0]
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	2300      	movs	r3, #0
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 f811 	bl	800c784 <prvTCPReturnPacket>
		{
			*ppxNetworkBuffer = NULL;
		}
		#endif /* ipconfigZERO_COPY_TX_DRIVER */

		lResult += xSendLength;
 800c762:	693a      	ldr	r2, [r7, #16]
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	4413      	add	r3, r2
 800c768:	613b      	str	r3, [r7, #16]
	for( uxIndex = 0u; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	3301      	adds	r3, #1
 800c76e:	617b      	str	r3, [r7, #20]
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	2b07      	cmp	r3, #7
 800c774:	d9e5      	bls.n	800c742 <prvTCPSendRepeated+0x18>
 800c776:	e000      	b.n	800c77a <prvTCPSendRepeated+0x50>
			break;
 800c778:	bf00      	nop
	}

	/* Return the total number of bytes sent. */
	return lResult;
 800c77a:	693b      	ldr	r3, [r7, #16]
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3718      	adds	r7, #24
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <prvTCPReturnPacket>:
 * which may either point to a real network buffer or to a TCP socket field
 * called 'xTCP.xPacket'.   A temporary xNetworkBuffer will be used to pass
 * the data to the NIC.
 */
static void prvTCPReturnPacket( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulLen, BaseType_t xReleaseAfterSend )
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b098      	sub	sp, #96	; 0x60
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]
 800c790:	603b      	str	r3, [r7, #0]
uint32_t ulFrontSpace, ulSpace, ulSourceAddress, ulWinSize;
TCPWindow_t *pxTCPWindow;
NetworkBufferDescriptor_t xTempBuffer;
/* For sending, a pseudo network buffer will be used, as explained above. */

	if( pxNetworkBuffer == NULL )
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d109      	bne.n	800c7ac <prvTCPReturnPacket+0x28>
	{
		pxNetworkBuffer = &xTempBuffer;
 800c798:	f107 0310 	add.w	r3, r7, #16
 800c79c:	60bb      	str	r3, [r7, #8]
		#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
		{
			xTempBuffer.pxNextBuffer = NULL;
		}
		#endif
		xTempBuffer.pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	3382      	adds	r3, #130	; 0x82
 800c7a2:	62bb      	str	r3, [r7, #40]	; 0x28
		xTempBuffer.xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800c7a4:	2346      	movs	r3, #70	; 0x46
 800c7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		xReleaseAfterSend = pdFALSE;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	603b      	str	r3, [r7, #0]
			xReleaseAfterSend = pdTRUE;
		}
	}
	#endif /* ipconfigZERO_COPY_TX_DRIVER */

	if( pxNetworkBuffer != NULL )
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f000 818a 	beq.w	800cac8 <prvTCPReturnPacket+0x344>
	{
		pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	699b      	ldr	r3, [r3, #24]
 800c7b8:	64fb      	str	r3, [r7, #76]	; 0x4c
		pxIPHeader = &pxTCPPacket->xIPHeader;
 800c7ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7bc:	330e      	adds	r3, #14
 800c7be:	64bb      	str	r3, [r7, #72]	; 0x48
		pxEthernetHeader = &pxTCPPacket->xEthernetHeader;
 800c7c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7c2:	647b      	str	r3, [r7, #68]	; 0x44

		/* Fill the packet, using hton translations. */
		if( pxSocket != NULL )
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f000 80ed 	beq.w	800c9a6 <prvTCPReturnPacket+0x222>
		{
			/* Calculate the space in the RX buffer in order to advertise the
			size of this socket's reception window. */
			pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	33dc      	adds	r3, #220	; 0xdc
 800c7d0:	643b      	str	r3, [r7, #64]	; 0x40

			if( pxSocket->u.xTCP.rxStream != NULL )
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d006      	beq.n	800c7e8 <prvTCPReturnPacket+0x64>
			{
				/* An RX stream was created already, see how much space is
				available. */
				ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7ff fde6 	bl	800c3b0 <uxStreamBufferFrontSpace>
 800c7e4:	65f8      	str	r0, [r7, #92]	; 0x5c
 800c7e6:	e002      	b.n	800c7ee <prvTCPReturnPacket+0x6a>
			}
			else
			{
				/* No RX stream has been created, the full stream size is
				available. */
				ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7ec:	65fb      	str	r3, [r7, #92]	; 0x5c
			}

			/* Take the minimum of the RX buffer space and the RX window size. */
			ulSpace = FreeRTOS_min_uint32( pxSocket->u.xTCP.ulRxCurWinSize, pxTCPWindow->xSize.ulRxWindowLength );
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800c7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	4610      	mov	r0, r2
 800c7fc:	f7ff fd77 	bl	800c2ee <FreeRTOS_min_uint32>
 800c800:	65b8      	str	r0, [r7, #88]	; 0x58

			if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c808:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d107      	bne.n	800c822 <prvTCPReturnPacket+0x9e>
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c818:	f003 0304 	and.w	r3, r3, #4
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d001      	beq.n	800c826 <prvTCPReturnPacket+0xa2>
			{
				/* The low-water mark was reached, meaning there was little
				space left.  The socket will wait until the application has read
				or flushed the incoming data, and 'zero-window' will be
				advertised. */
				ulSpace = 0u;
 800c822:	2300      	movs	r3, #0
 800c824:	65bb      	str	r3, [r7, #88]	; 0x58
			}

			/* If possible, advertise an RX window size of at least 1 MSS, otherwise
			the peer might start 'zero window probing', i.e. sending small packets
			(1, 2, 4, 8... bytes). */
			if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c82c:	461a      	mov	r2, r3
 800c82e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c830:	429a      	cmp	r2, r3
 800c832:	d90a      	bls.n	800c84a <prvTCPReturnPacket+0xc6>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c83a:	461a      	mov	r2, r3
 800c83c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c83e:	429a      	cmp	r2, r3
 800c840:	d803      	bhi.n	800c84a <prvTCPReturnPacket+0xc6>
			{
				ulSpace = pxSocket->u.xTCP.usCurMSS;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c848:	65bb      	str	r3, [r7, #88]	; 0x58
			}

			/* Avoid overflow of the 16-bit win field. */
			ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c850:	461a      	mov	r2, r3
 800c852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c854:	40d3      	lsrs	r3, r2
 800c856:	653b      	str	r3, [r7, #80]	; 0x50
			if( ulWinSize > 0xfffcUL )
 800c858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c85a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800c85e:	4293      	cmp	r3, r2
 800c860:	d902      	bls.n	800c868 <prvTCPReturnPacket+0xe4>
			{
				ulWinSize = 0xfffcUL;
 800c862:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800c866:	653b      	str	r3, [r7, #80]	; 0x50
			}

			pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800c868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	021b      	lsls	r3, r3, #8
 800c86e:	b21a      	sxth	r2, r3
 800c870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c872:	b29b      	uxth	r3, r3
 800c874:	0a1b      	lsrs	r3, r3, #8
 800c876:	b29b      	uxth	r3, r3
 800c878:	b21b      	sxth	r3, r3
 800c87a:	4313      	orrs	r3, r2
 800c87c:	b21b      	sxth	r3, r3
 800c87e:	b29a      	uxth	r2, r3
 800c880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c882:	861a      	strh	r2, [r3, #48]	; 0x30
				}
			}
			#endif /* ipconfigHAS_DEBUG_PRINTF != 0 */

			/* The new window size has been advertised, switch off the flag. */
			pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c88a:	f36f 0300 	bfc	r3, #0, #1
 800c88e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

			/* Later on, when deciding to delay an ACK, a precise estimate is needed
			of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
			highest sequence number minus 1 that the socket will accept. */
			pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800c892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c894:	691a      	ldr	r2, [r3, #16]
 800c896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c898:	441a      	add	r2, r3
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	645a      	str	r2, [r3, #68]	; 0x44

			#if( ipconfigTCP_KEEP_ALIVE == 1 )
				if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8a4:	f003 0302 	and.w	r3, r3, #2
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d02f      	beq.n	800c90e <prvTCPReturnPacket+0x18a>
				{
					/* Sending a keep-alive packet, send the current sequence number
					minus 1, which will	be recognised as a keep-alive packet an
					responded to by acknowledging the last byte. */
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c8b4:	f36f 0341 	bfc	r3, #1, #1
 800c8b8:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c8c2:	f043 0304 	orr.w	r3, r3, #4
 800c8c6:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

					pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c8d0:	1e5a      	subs	r2, r3, #1
 800c8d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8d4:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
					pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800c8d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8da:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c8de:	061a      	lsls	r2, r3, #24
 800c8e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8e2:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c8e6:	021b      	lsls	r3, r3, #8
 800c8e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c8ec:	431a      	orrs	r2, r3
 800c8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f0:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c8f4:	0a1b      	lsrs	r3, r3, #8
 800c8f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c8fa:	431a      	orrs	r2, r3
 800c8fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8fe:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c902:	0e1b      	lsrs	r3, r3, #24
 800c904:	431a      	orrs	r2, r3
 800c906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c908:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800c90c:	e034      	b.n	800c978 <prvTCPReturnPacket+0x1f4>
				}
				else
			#endif
			{
				pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c914:	061a      	lsls	r2, r3, #24
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c91c:	021b      	lsls	r3, r3, #8
 800c91e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c922:	431a      	orrs	r2, r3
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c92a:	0a1b      	lsrs	r3, r3, #8
 800c92c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c930:	431a      	orrs	r2, r3
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c938:	0e1b      	lsrs	r3, r3, #24
 800c93a:	431a      	orrs	r2, r3
 800c93c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c93e:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

				if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u )
 800c942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c944:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c948:	f003 0301 	and.w	r3, r3, #1
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d013      	beq.n	800c978 <prvTCPReturnPacket+0x1f4>
				{
					/* Suppress FIN in case this packet carries earlier data to be
					retransmitted. */
					uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	3b28      	subs	r3, #40	; 0x28
 800c954:	63fb      	str	r3, [r7, #60]	; 0x3c
					if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 800c956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c95c:	441a      	add	r2, r3
 800c95e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c962:	429a      	cmp	r2, r3
 800c964:	d008      	beq.n	800c978 <prvTCPReturnPacket+0x1f4>
					{
						pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_FIN );
 800c966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c968:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c96c:	f023 0301 	bic.w	r3, r3, #1
 800c970:	b2da      	uxtb	r2, r3
 800c972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c974:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
					}
				}
			}

			/* Tell which sequence number is expected next time */
			pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 800c978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	061a      	lsls	r2, r3, #24
 800c97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c980:	691b      	ldr	r3, [r3, #16]
 800c982:	021b      	lsls	r3, r3, #8
 800c984:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c988:	431a      	orrs	r2, r3
 800c98a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c98c:	691b      	ldr	r3, [r3, #16]
 800c98e:	0a1b      	lsrs	r3, r3, #8
 800c990:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c994:	431a      	orrs	r2, r3
 800c996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	0e1b      	lsrs	r3, r3, #24
 800c99c:	431a      	orrs	r2, r3
 800c99e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9a0:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 800c9a4:	e00d      	b.n	800c9c2 <prvTCPReturnPacket+0x23e>
		}
		else
		{
			/* Sending data without a socket, probably replying with a RST flag
			Just swap the two sequence numbers. */
			vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 800c9a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9a8:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c9ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800c9ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9b0:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 800c9b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9b6:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800c9ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9be:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
		}

		pxIPHeader->ucTimeToLive           = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800c9c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9c4:	2280      	movs	r2, #128	; 0x80
 800c9c6:	721a      	strb	r2, [r3, #8]
		pxIPHeader->usLength               = FreeRTOS_htons( ulLen );
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	021b      	lsls	r3, r3, #8
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	0a1b      	lsrs	r3, r3, #8
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	b29a      	uxth	r2, r3
 800c9da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9dc:	805a      	strh	r2, [r3, #2]
		if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ) )
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d003      	beq.n	800c9ec <prvTCPReturnPacket+0x268>
 800c9e4:	4b3a      	ldr	r3, [pc, #232]	; (800cad0 <prvTCPReturnPacket+0x34c>)
 800c9e6:	695b      	ldr	r3, [r3, #20]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d103      	bne.n	800c9f4 <prvTCPReturnPacket+0x270>
		{
			/* When pxSocket is NULL, this function is called by prvTCPSendReset()
			and the IP-addresses must be swapped.
			Also swap the IP-addresses in case the IP-tack doesn't have an
			IP-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0ul ). */
			ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 800c9ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	657b      	str	r3, [r7, #84]	; 0x54
 800c9f2:	e002      	b.n	800c9fa <prvTCPReturnPacket+0x276>
		}
		else
		{
			ulSourceAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800c9f4:	4b36      	ldr	r3, [pc, #216]	; (800cad0 <prvTCPReturnPacket+0x34c>)
 800c9f6:	695b      	ldr	r3, [r3, #20]
 800c9f8:	657b      	str	r3, [r7, #84]	; 0x54
		}
		pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800c9fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9fc:	68da      	ldr	r2, [r3, #12]
 800c9fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca00:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 800ca02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca06:	60da      	str	r2, [r3, #12]
		vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800ca08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca0a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800ca0e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800ca12:	021b      	lsls	r3, r3, #8
 800ca14:	4313      	orrs	r3, r2
 800ca16:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ca18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca20:	845a      	strh	r2, [r3, #34]	; 0x22
 800ca22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca24:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ca26:	849a      	strh	r2, [r3, #36]	; 0x24

		/* Just an increasing number. */
		pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800ca28:	4b2a      	ldr	r3, [pc, #168]	; (800cad4 <prvTCPReturnPacket+0x350>)
 800ca2a:	881b      	ldrh	r3, [r3, #0]
 800ca2c:	021b      	lsls	r3, r3, #8
 800ca2e:	b21a      	sxth	r2, r3
 800ca30:	4b28      	ldr	r3, [pc, #160]	; (800cad4 <prvTCPReturnPacket+0x350>)
 800ca32:	881b      	ldrh	r3, [r3, #0]
 800ca34:	0a1b      	lsrs	r3, r3, #8
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	b21b      	sxth	r3, r3
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	b21b      	sxth	r3, r3
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca42:	809a      	strh	r2, [r3, #4]
		usPacketIdentifier++;
 800ca44:	4b23      	ldr	r3, [pc, #140]	; (800cad4 <prvTCPReturnPacket+0x350>)
 800ca46:	881b      	ldrh	r3, [r3, #0]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	4b21      	ldr	r3, [pc, #132]	; (800cad4 <prvTCPReturnPacket+0x350>)
 800ca4e:	801a      	strh	r2, [r3, #0]
		pxIPHeader->usFragmentOffset = 0u;
 800ca50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca52:	2200      	movs	r2, #0
 800ca54:	719a      	strb	r2, [r3, #6]
 800ca56:	2200      	movs	r2, #0
 800ca58:	71da      	strb	r2, [r3, #7]
	#if( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
		pxNetworkBuffer->pxNextBuffer = NULL;
	#endif

		/* Important: tell NIC driver how many bytes must be sent. */
		pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f103 020e 	add.w	r2, r3, #14
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	61da      	str	r2, [r3, #28]

		/* Fill in the destination MAC addresses. */
		memcpy( ( void * ) &( pxEthernetHeader->xDestinationAddress ), ( void * ) &( pxEthernetHeader->xSourceAddress ),
 800ca64:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ca66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca68:	3306      	adds	r3, #6
 800ca6a:	2206      	movs	r2, #6
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	f004 f824 	bl	8010aba <memcpy>
			sizeof( pxEthernetHeader->xDestinationAddress ) );

		/* The source MAC addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
		memcpy( ( void * ) &( pxEthernetHeader->xSourceAddress) , ( void * ) ipLOCAL_MAC_ADDRESS, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800ca72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca74:	3306      	adds	r3, #6
 800ca76:	2206      	movs	r2, #6
 800ca78:	4915      	ldr	r1, [pc, #84]	; (800cad0 <prvTCPReturnPacket+0x34c>)
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f004 f81d 	bl	8010aba <memcpy>
			}
		}
		#endif

		/* Send! */
		xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800ca80:	6839      	ldr	r1, [r7, #0]
 800ca82:	68b8      	ldr	r0, [r7, #8]
 800ca84:	f7f7 fea8 	bl	80047d8 <xNetworkInterfaceOutput>

		if( xReleaseAfterSend == pdFALSE )
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d11c      	bne.n	800cac8 <prvTCPReturnPacket+0x344>
		{
			/* Swap-back some fields, as pxBuffer probably points to a socket field
			containing the packet header. */
			vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort);
 800ca8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca90:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800ca94:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800ca98:	021b      	lsls	r3, r3, #8
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ca9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caa0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800caa2:	b29a      	uxth	r2, r3
 800caa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caa6:	845a      	strh	r2, [r3, #34]	; 0x22
 800caa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caaa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800caac:	849a      	strh	r2, [r3, #36]	; 0x24
			pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 800caae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cab0:	f8d3 201e 	ldr.w	r2, [r3, #30]
 800cab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cab6:	f8c3 201a 	str.w	r2, [r3, #26]
			memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800caba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cabc:	3306      	adds	r3, #6
 800cabe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cac0:	2206      	movs	r2, #6
 800cac2:	4618      	mov	r0, r3
 800cac4:	f003 fff9 	bl	8010aba <memcpy>
		else
		{
			/* Nothing to do: the buffer has been passed to DMA and will be released after use */
		}
	} /* if( pxNetworkBuffer != NULL ) */
}
 800cac8:	bf00      	nop
 800caca:	3760      	adds	r7, #96	; 0x60
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	2000009c 	.word	0x2000009c
 800cad4:	20004724 	.word	0x20004724

0800cad8 <prvTCPCreateWindow>:
 * random starting value, are being synchronised.  The sliding window manager
 * (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 * Size (MSS) in use.
 */
static void prvTCPCreateWindow( FreeRTOS_Socket_t *pxSocket )
{
 800cad8:	b5b0      	push	{r4, r5, r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af02      	add	r7, sp, #8
 800cade:	6078      	str	r0, [r7, #4]
		FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %lu Water %lu <= %lu <= %lu\n",
			pxSocket->u.xTCP.uxRxWinSize * ipconfigTCP_MSS,
			pxSocket->u.xTCP.uxLittleSpace ,
			pxSocket->u.xTCP.uxEnoughSpace,
			pxSocket->u.xTCP.uxRxStreamSize ) );
	vTCPWindowCreate(
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
		&pxSocket->u.xTCP.xTCPWindow,
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800caec:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800caf0:	fb02 f103 	mul.w	r1, r2, r3
		ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cafa:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800cafe:	fb02 f403 	mul.w	r4, r2, r3
	vTCPWindowCreate(
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8d3 50ec 	ldr.w	r5, [r3, #236]	; 0xec
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
		( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
	vTCPWindowCreate(
 800cb14:	9201      	str	r2, [sp, #4]
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	462b      	mov	r3, r5
 800cb1a:	4622      	mov	r2, r4
 800cb1c:	f002 f85c 	bl	800ebd8 <vTCPWindowCreate>
}
 800cb20:	bf00      	nop
 800cb22:	3708      	adds	r7, #8
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bdb0      	pop	{r4, r5, r7, pc}

0800cb28 <prvTCPPrepareConnect>:
 * the Ethernet address of the target will be found using ARP.  In case the
 * target IP address is not within the netmask, the hardware address of the
 * gateway will be used.
 */
static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t *pxSocket )
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b08a      	sub	sp, #40	; 0x28
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
TCPPacket_t *pxTCPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulRemoteIP;
MACAddress_t xEthAddress;
BaseType_t xReturn = pdTRUE;
 800cb30:	2301      	movs	r3, #1
 800cb32:	627b      	str	r3, [r7, #36]	; 0x24
		/* Only necessary for nicer logging. */
		memset( xEthAddress.ucBytes, '\0', sizeof( xEthAddress.ucBytes ) );
	}
	#endif /* ipconfigHAS_PRINTF != 0 */

	ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb38:	061a      	lsls	r2, r3, #24
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3e:	021b      	lsls	r3, r3, #8
 800cb40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cb44:	431a      	orrs	r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4a:	0a1b      	lsrs	r3, r3, #8
 800cb4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cb50:	431a      	orrs	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb56:	0e1b      	lsrs	r3, r3, #24
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	617b      	str	r3, [r7, #20]

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 800cb5c:	f107 020c 	add.w	r2, r7, #12
 800cb60:	f107 0314 	add.w	r3, r7, #20
 800cb64:	4611      	mov	r1, r2
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7fb fe20 	bl	80087ac <eARPGetCacheEntry>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	switch( eReturned )
 800cb72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d00e      	beq.n	800cb98 <prvTCPPrepareConnect+0x70>
		break;				/* We can now prepare the SYN packet. */
	case eARPCacheMiss:		/* An ARP table lookup did not find a valid entry. */
	case eCantSendPacket:	/* There is no IP address, or an ARP is still in progress. */
	default:
		/* Count the number of times it couldn't find the ARP address. */
		pxSocket->u.xTCP.ucRepCount++;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cb80:	3301      	adds	r3, #1
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			xEthAddress.ucBytes[ 3 ],
			xEthAddress.ucBytes[ 4 ],
			xEthAddress.ucBytes[ 5 ] ) );

		/* And issue a (new) ARP request */
		FreeRTOS_OutputARPRequest( ulRemoteIP );
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fb ff4d 	bl	8008a2c <FreeRTOS_OutputARPRequest>

		xReturn = pdFALSE;
 800cb92:	2300      	movs	r3, #0
 800cb94:	627b      	str	r3, [r7, #36]	; 0x24
 800cb96:	e000      	b.n	800cb9a <prvTCPPrepareConnect+0x72>
		break;				/* We can now prepare the SYN packet. */
 800cb98:	bf00      	nop
	}

	if( xReturn != pdFALSE )
 800cb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f000 8091 	beq.w	800ccc4 <prvTCPPrepareConnect+0x19c>
	{
		/* The MAC-address of the peer (or gateway) has been found,
		now prepare the initial TCP packet and some fields in the socket. */
		pxTCPPacket = ( TCPPacket_t * )pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	3382      	adds	r3, #130	; 0x82
 800cba6:	61fb      	str	r3, [r7, #28]
		pxIPHeader = &pxTCPPacket->xIPHeader;
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	330e      	adds	r3, #14
 800cbac:	61bb      	str	r3, [r7, #24]

		/* reset the retry counter to zero. */
		pxSocket->u.xTCP.ucRepCount = 0u;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

		/* And remember that the connect/SYN data are prepared. */
		pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cbbc:	f043 0308 	orr.w	r3, r3, #8
 800cbc0:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

		/* Now that the Ethernet address is known, the initial packet can be
		prepared. */
		memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, '\0', sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	3382      	adds	r3, #130	; 0x82
 800cbc8:	2246      	movs	r2, #70	; 0x46
 800cbca:	2100      	movs	r1, #0
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f003 ff99 	bl	8010b04 <memset>

		/* Write the Ethernet address in Source, because it will be swapped by
		prvTCPReturnPacket(). */
		memcpy( &pxTCPPacket->xEthernetHeader.xSourceAddress, &xEthAddress, sizeof( xEthAddress ) );
 800cbd2:	69fb      	ldr	r3, [r7, #28]
 800cbd4:	3306      	adds	r3, #6
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	f107 030c 	add.w	r3, r7, #12
 800cbdc:	6818      	ldr	r0, [r3, #0]
 800cbde:	6010      	str	r0, [r2, #0]
 800cbe0:	889b      	ldrh	r3, [r3, #4]
 800cbe2:	8093      	strh	r3, [r2, #4]

		/* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
		pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f042 0208 	orr.w	r2, r2, #8
 800cbec:	731a      	strb	r2, [r3, #12]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	735a      	strb	r2, [r3, #13]

		pxIPHeader->ucVersionHeaderLength = 0x45u;
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	2245      	movs	r2, #69	; 0x45
 800cbf6:	701a      	strb	r2, [r3, #0]
		pxIPHeader->usLength = FreeRTOS_htons( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 800cbf8:	69bb      	ldr	r3, [r7, #24]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	709a      	strb	r2, [r3, #2]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800cc04:	70da      	strb	r2, [r3, #3]
		pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	2280      	movs	r2, #128	; 0x80
 800cc0a:	721a      	strb	r2, [r3, #8]

		pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 800cc0c:	69bb      	ldr	r3, [r7, #24]
 800cc0e:	2206      	movs	r2, #6
 800cc10:	725a      	strb	r2, [r3, #9]

		/* Addresses and ports will be stored swapped because prvTCPReturnPacket
		will swap them back while replying. */
		pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800cc12:	4b2f      	ldr	r3, [pc, #188]	; (800ccd0 <prvTCPPrepareConnect+0x1a8>)
 800cc14:	695a      	ldr	r2, [r3, #20]
 800cc16:	69bb      	ldr	r3, [r7, #24]
 800cc18:	611a      	str	r2, [r3, #16]
		pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc1e:	061a      	lsls	r2, r3, #24
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc24:	021b      	lsls	r3, r3, #8
 800cc26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cc2a:	431a      	orrs	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc30:	0a1b      	lsrs	r3, r3, #8
 800cc32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cc36:	431a      	orrs	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc3c:	0e1b      	lsrs	r3, r3, #24
 800cc3e:	431a      	orrs	r2, r3
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	60da      	str	r2, [r3, #12]

		pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cc48:	021b      	lsls	r3, r3, #8
 800cc4a:	b21a      	sxth	r2, r3
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cc50:	0a1b      	lsrs	r3, r3, #8
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	b21b      	sxth	r3, r3
 800cc56:	4313      	orrs	r3, r2
 800cc58:	b21b      	sxth	r3, r3
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	845a      	strh	r2, [r3, #34]	; 0x22
		pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cc64:	021b      	lsls	r3, r3, #8
 800cc66:	b21a      	sxth	r2, r3
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cc6c:	0a1b      	lsrs	r3, r3, #8
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	b21b      	sxth	r3, r3
 800cc72:	4313      	orrs	r3, r2
 800cc74:	b21b      	sxth	r3, r3
 800cc76:	b29a      	uxth	r2, r3
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	849a      	strh	r2, [r3, #36]	; 0x24

		/* We are actively connecting, so the peer's Initial Sequence Number (ISN)
		isn't known yet. */
		pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0ul;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		/* Start with ISN (Initial Sequence Number). */
		pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulNextInitialSequenceNumber;
 800cc84:	4b13      	ldr	r3, [pc, #76]	; (800ccd4 <prvTCPPrepareConnect+0x1ac>)
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

		/* And increment it with 268 for the next new connection, which is
		recommended value. */
		ulNextInitialSequenceNumber += 0x102UL;
 800cc8e:	4b11      	ldr	r3, [pc, #68]	; (800ccd4 <prvTCPPrepareConnect+0x1ac>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800cc96:	4a0f      	ldr	r2, [pc, #60]	; (800ccd4 <prvTCPPrepareConnect+0x1ac>)
 800cc98:	6013      	str	r3, [r2, #0]

		/* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
		the high nibble of the TCP offset field. */
		pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50u;
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	2250      	movs	r2, #80	; 0x50
 800cc9e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		/* Only set the SYN flag. */
		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_SYN;
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	2202      	movs	r2, #2
 800cca6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		/* Set the values of usInitMSS / usCurMSS for this socket. */
		prvSocketSetMSS( pxSocket );
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f001 fa88 	bl	800e1c0 <prvSocketSetMSS>

		/* For now this is also the advertised window size. */
		pxSocket->u.xTCP.ulRxCurWinSize = pxSocket->u.xTCP.usInitMSS;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

		/* The initial sequence numbers at our side are known.  Later
		vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
		first wait for a SYN+ACK reply. */
		prvTCPCreateWindow( pxSocket );
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7ff ff0a 	bl	800cad8 <prvTCPCreateWindow>
	}

	return xReturn;
 800ccc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3728      	adds	r7, #40	; 0x28
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	2000009c 	.word	0x2000009c
 800ccd4:	200047c4 	.word	0x200047c4

0800ccd8 <prvCheckOptions>:
 * Parse the TCP option(s) received, if present.  It has already been verified
 * that: ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that the TP header
 * is longer than the usual 20 (5 x 4) bytes.
 */
static void prvCheckOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b08e      	sub	sp, #56	; 0x38
 800ccdc:	af02      	add	r7, sp, #8
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
const unsigned char *pucPtr;
const unsigned char *pucLast;
TCPWindow_t *pxTCPWindow;
UBaseType_t uxNewMSS;

	pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	699b      	ldr	r3, [r3, #24]
 800cce6:	627b      	str	r3, [r7, #36]	; 0x24
	pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800cce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccea:	3322      	adds	r3, #34	; 0x22
 800ccec:	623b      	str	r3, [r7, #32]

	/* A character pointer to iterate through the option data */
	pucPtr = pxTCPHeader->ucOptdata;
 800ccee:	6a3b      	ldr	r3, [r7, #32]
 800ccf0:	3314      	adds	r3, #20
 800ccf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	pucLast = pucPtr + (((pxTCPHeader->ucTCPOffset >> 4) - 5) << 2);
 800ccf4:	6a3b      	ldr	r3, [r7, #32]
 800ccf6:	7b1b      	ldrb	r3, [r3, #12]
 800ccf8:	091b      	lsrs	r3, r3, #4
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	3b05      	subs	r3, #5
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	461a      	mov	r2, r3
 800cd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd04:	4413      	add	r3, r2
 800cd06:	61fb      	str	r3, [r7, #28]
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	33dc      	adds	r3, #220	; 0xdc
 800cd0c:	61bb      	str	r3, [r7, #24]

	/* The comparison with pucLast is only necessary in case the option data are
	corrupted, we don't like to run into invalid memory and crash. */
	while( pucPtr < pucLast )
 800cd0e:	e0c7      	b.n	800cea0 <prvCheckOptions+0x1c8>
	{
		if( pucPtr[ 0 ] == TCP_OPT_END )
 800cd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	f000 80c9 	beq.w	800ceac <prvCheckOptions+0x1d4>
		{
			/* End of options. */
			return;
		}
		if( pucPtr[ 0 ] == TCP_OPT_NOOP)
 800cd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d103      	bne.n	800cd2a <prvCheckOptions+0x52>
		{
			pucPtr++;
 800cd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd24:	3301      	adds	r3, #1
 800cd26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd28:	e0ba      	b.n	800cea0 <prvCheckOptions+0x1c8>

			/* NOP option, inserted to make the length a multiple of 4. */
		}
#if( ipconfigUSE_TCP_WIN != 0 )
		else if( ( pucPtr[ 0 ] == TCP_OPT_WSOPT ) && ( pucPtr[ 1 ] == TCP_OPT_WSOPT_LEN ) )
 800cd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	2b03      	cmp	r3, #3
 800cd30:	d114      	bne.n	800cd5c <prvCheckOptions+0x84>
 800cd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd34:	3301      	adds	r3, #1
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	2b03      	cmp	r3, #3
 800cd3a:	d10f      	bne.n	800cd5c <prvCheckOptions+0x84>
		{
			pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 800cd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3e:	789a      	ldrb	r2, [r3, #2]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
			pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800cd4c:	f043 0310 	orr.w	r3, r3, #16
 800cd50:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			pucPtr += TCP_OPT_WSOPT_LEN;
 800cd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd56:	3303      	adds	r3, #3
 800cd58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd5a:	e0a1      	b.n	800cea0 <prvCheckOptions+0x1c8>
		}
#endif	/* ipconfigUSE_TCP_WIN */
		else if( ( pucPtr[ 0 ] == TCP_OPT_MSS ) && ( pucPtr[ 1 ] == TCP_OPT_MSS_LEN ) )
 800cd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	2b02      	cmp	r3, #2
 800cd62:	d14a      	bne.n	800cdfa <prvCheckOptions+0x122>
 800cd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd66:	3301      	adds	r3, #1
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	2b04      	cmp	r3, #4
 800cd6c:	d145      	bne.n	800cdfa <prvCheckOptions+0x122>
		{
			/* An MSS option with the correct option length.  FreeRTOS_htons()
			is not needed here because usChar2u16() already returns a host
			endian number. */
			uxNewMSS = usChar2u16( pucPtr + 2 );
 800cd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd70:	3302      	adds	r3, #2
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7ff fb85 	bl	800c482 <usChar2u16>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	617b      	str	r3, [r7, #20]
			if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
			{
				FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
			}

			if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800cd82:	461a      	mov	r2, r3
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d933      	bls.n	800cdf2 <prvCheckOptions+0x11a>
			{
				/* our MSS was bigger than the MSS of the other party: adapt it. */
				pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cd90:	f043 0301 	orr.w	r3, r3, #1
 800cd94:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
				if( ( pxTCPWindow != NULL ) && ( pxSocket->u.xTCP.usCurMSS > uxNewMSS ) )
 800cd98:	69bb      	ldr	r3, [r7, #24]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d00b      	beq.n	800cdb6 <prvCheckOptions+0xde>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cda4:	461a      	mov	r2, r3
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d904      	bls.n	800cdb6 <prvCheckOptions+0xde>
				{
					/* The peer advertises a smaller MSS than this socket was
					using.  Use that as well. */
					FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
					pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	b29a      	uxth	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				}
				pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	685a      	ldr	r2, [r3, #4]
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdc0:	697a      	ldr	r2, [r7, #20]
 800cdc2:	fb02 f203 	mul.w	r2, r2, r3
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	605a      	str	r2, [r3, #4]
				pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
				pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
				pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			#if( ipconfigUSE_TCP_WIN != 1 )
				/* Without scaled windows, MSS is the only interesting option. */
				break;
			#else
				/* Or else we continue to check another option: selective ACK. */
				pucPtr += TCP_OPT_MSS_LEN;
 800cdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdf8:	e052      	b.n	800cea0 <prvCheckOptions+0x1c8>
		}
		else
		{
			/* All other options have a length field, so that we easily
			can skip past them. */
			int len = ( int )pucPtr[ 1 ];
 800cdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	62bb      	str	r3, [r7, #40]	; 0x28
			if( len == 0 )
 800ce02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d053      	beq.n	800ceb0 <prvCheckOptions+0x1d8>
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				/* Selective ACK: the peer has received a packet but it is missing earlier
				packets.  At least this packet does not need retransmission anymore
				ulTCPWindowTxSack( ) takes care of this administration. */
				if( pucPtr[0] == TCP_OPT_SACK_A )
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	2b05      	cmp	r3, #5
 800ce0e:	d143      	bne.n	800ce98 <prvCheckOptions+0x1c0>
				{
					len -= 2;
 800ce10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce12:	3b02      	subs	r3, #2
 800ce14:	62bb      	str	r3, [r7, #40]	; 0x28
					pucPtr += 2;
 800ce16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce18:	3302      	adds	r3, #2
 800ce1a:	62fb      	str	r3, [r7, #44]	; 0x2c

					while( len >= 8 )
 800ce1c:	e039      	b.n	800ce92 <prvCheckOptions+0x1ba>
					{
					uint32_t ulFirst = ulChar2u32( pucPtr );
 800ce1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce20:	f7ff fb14 	bl	800c44c <ulChar2u32>
 800ce24:	6138      	str	r0, [r7, #16]
					uint32_t ulLast  = ulChar2u32( pucPtr + 4 );
 800ce26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce28:	3304      	adds	r3, #4
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7ff fb0e 	bl	800c44c <ulChar2u32>
 800ce30:	60f8      	str	r0, [r7, #12]
					uint32_t ulCount = ulTCPWindowTxSack( &pxSocket->u.xTCP.xTCPWindow, ulFirst, ulLast );
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	33dc      	adds	r3, #220	; 0xdc
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	6939      	ldr	r1, [r7, #16]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f002 fc1a 	bl	800f674 <ulTCPWindowTxSack>
 800ce40:	60b8      	str	r0, [r7, #8]
						/* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
						starting from the head position.
						Advance the tail pointer in txStream. */
						if( ( pxSocket->u.xTCP.txStream  != NULL ) && ( ulCount > 0 ) )
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d01d      	beq.n	800ce86 <prvCheckOptions+0x1ae>
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d01a      	beq.n	800ce86 <prvCheckOptions+0x1ae>
						{
							/* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
							uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ce54:	2300      	movs	r3, #0
 800ce56:	9300      	str	r3, [sp, #0]
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	f7ff f9b2 	bl	800c1c6 <uxStreamBufferGet>
							pxSocket->xEventBits |= eSOCKET_SEND;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f043 0202 	orr.w	r2, r3, #2
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	601a      	str	r2, [r3, #0]

							#if ipconfigSUPPORT_SELECT_FUNCTION == 1
							{
								if( pxSocket->xSelectBits & eSELECT_WRITE )
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce72:	f003 0302 	and.w	r3, r3, #2
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d005      	beq.n	800ce86 <prvCheckOptions+0x1ae>
								{
									/* The field 'xEventBits' is used to store regular socket events (at most 8),
									as well as 'select events', which will be left-shifted */
									pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	601a      	str	r2, [r3, #0]
									pxSocket->u.xTCP.pxHandleSent( (Socket_t *)pxSocket, ulCount );
								}
							}
							#endif /* ipconfigUSE_CALLBACKS == 1  */
						}
						pucPtr += 8;
 800ce86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce88:	3308      	adds	r3, #8
 800ce8a:	62fb      	str	r3, [r7, #44]	; 0x2c
						len -= 8;
 800ce8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8e:	3b08      	subs	r3, #8
 800ce90:	62bb      	str	r3, [r7, #40]	; 0x28
					while( len >= 8 )
 800ce92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce94:	2b07      	cmp	r3, #7
 800ce96:	dcc2      	bgt.n	800ce1e <prvCheckOptions+0x146>
					}
				#endif	/* ipconfigUSE_TCP_TIMESTAMPS == 1 */
			}
			#endif	/* ipconfigUSE_TCP_WIN == 1 */

			pucPtr += len;
 800ce98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce9c:	4413      	add	r3, r2
 800ce9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while( pucPtr < pucLast )
 800cea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cea2:	69fb      	ldr	r3, [r7, #28]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	f4ff af33 	bcc.w	800cd10 <prvCheckOptions+0x38>
 800ceaa:	e002      	b.n	800ceb2 <prvCheckOptions+0x1da>
			return;
 800ceac:	bf00      	nop
 800ceae:	e000      	b.n	800ceb2 <prvCheckOptions+0x1da>
				break;
 800ceb0:	bf00      	nop
		}
	}
}
 800ceb2:	3730      	adds	r7, #48	; 0x30
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <prvWinScaleFactor>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN != 0 )

	static uint8_t prvWinScaleFactor( FreeRTOS_Socket_t *pxSocket )
	{
 800ceb8:	b480      	push	{r7}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
	size_t uxWinSize;
	uint8_t ucFactor;

		/* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800cecc:	fb02 f303 	mul.w	r3, r2, r3
 800ced0:	60fb      	str	r3, [r7, #12]
		ucFactor = 0u;
 800ced2:	2300      	movs	r3, #0
 800ced4:	72fb      	strb	r3, [r7, #11]
		while( uxWinSize > 0xfffful )
 800ced6:	e005      	b.n	800cee4 <prvWinScaleFactor+0x2c>
		{
			/* Divide by two and increase the binary factor by 1. */
			uxWinSize >>= 1;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	085b      	lsrs	r3, r3, #1
 800cedc:	60fb      	str	r3, [r7, #12]
			ucFactor++;
 800cede:	7afb      	ldrb	r3, [r7, #11]
 800cee0:	3301      	adds	r3, #1
 800cee2:	72fb      	strb	r3, [r7, #11]
		while( uxWinSize > 0xfffful )
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ceea:	d2f5      	bcs.n	800ced8 <prvWinScaleFactor+0x20>
		FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %lu MSS %lu Factor %u\n",
			pxSocket->u.xTCP.uxRxWinSize,
			pxSocket->u.xTCP.usInitMSS,
			ucFactor ) );

		return ucFactor;
 800ceec:	7afb      	ldrb	r3, [r7, #11]
	}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3714      	adds	r7, #20
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr

0800cefa <prvSetSynAckOptions>:
 * When opening a TCP connection, while SYN's are being sent, the  parties may
 * communicate what MSS (Maximum Segment Size) they intend to use.   MSS is the
 * nett size of the payload, always smaller than MTU.
*/
static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t *pxSocket, TCPPacket_t * pxTCPPacket )
{
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b086      	sub	sp, #24
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
 800cf02:	6039      	str	r1, [r7, #0]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	3322      	adds	r3, #34	; 0x22
 800cf08:	617b      	str	r3, [r7, #20]
uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800cf10:	827b      	strh	r3, [r7, #18]
	UBaseType_t uxOptionsLength;
#endif

	/* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

	pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) TCP_OPT_MSS;
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	2202      	movs	r2, #2
 800cf16:	751a      	strb	r2, [r3, #20]
	pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) TCP_OPT_MSS_LEN;
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	2204      	movs	r2, #4
 800cf1c:	755a      	strb	r2, [r3, #21]
	pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800cf1e:	8a7b      	ldrh	r3, [r7, #18]
 800cf20:	0a1b      	lsrs	r3, r3, #8
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	759a      	strb	r2, [r3, #22]
	pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffu );
 800cf2a:	8a7b      	ldrh	r3, [r7, #18]
 800cf2c:	b2da      	uxtb	r2, r3
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	75da      	strb	r2, [r3, #23]

	#if( ipconfigUSE_TCP_WIN != 0 )
	{
		pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f7ff ffc0 	bl	800ceb8 <prvWinScaleFactor>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

		pxTCPHeader->ucOptdata[ 4 ] = TCP_OPT_NOOP;
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	2201      	movs	r2, #1
 800cf46:	761a      	strb	r2, [r3, #24]
		pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( TCP_OPT_WSOPT );
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	2203      	movs	r2, #3
 800cf4c:	765a      	strb	r2, [r3, #25]
		pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( TCP_OPT_WSOPT_LEN );
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	2203      	movs	r2, #3
 800cf52:	769a      	strb	r2, [r3, #26]
		pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	76da      	strb	r2, [r3, #27]
		uxOptionsLength = 8u;
 800cf5e:	2308      	movs	r3, #8
 800cf60:	60fb      	str	r3, [r7, #12]
				uxOptionsLength += 2u;
			}
			else
		#endif
		{
			pxTCPHeader->ucOptdata[ uxOptionsLength + 0 ] = TCP_OPT_NOOP;
 800cf62:	697a      	ldr	r2, [r7, #20]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	4413      	add	r3, r2
 800cf68:	3314      	adds	r3, #20
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	701a      	strb	r2, [r3, #0]
			pxTCPHeader->ucOptdata[ uxOptionsLength + 1 ] = TCP_OPT_NOOP;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	3301      	adds	r3, #1
 800cf72:	697a      	ldr	r2, [r7, #20]
 800cf74:	4413      	add	r3, r2
 800cf76:	2201      	movs	r2, #1
 800cf78:	751a      	strb	r2, [r3, #20]
			pxTCPHeader->ucOptdata[ uxOptionsLength + 2 ] = TCP_OPT_SACK_P;	/* 4: Sack-Permitted Option. */
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	3302      	adds	r3, #2
 800cf7e:	697a      	ldr	r2, [r7, #20]
 800cf80:	4413      	add	r3, r2
 800cf82:	2204      	movs	r2, #4
 800cf84:	751a      	strb	r2, [r3, #20]
			pxTCPHeader->ucOptdata[ uxOptionsLength + 3 ] = 2;	/* 2: length of this option. */
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	3303      	adds	r3, #3
 800cf8a:	697a      	ldr	r2, [r7, #20]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	2202      	movs	r2, #2
 800cf90:	751a      	strb	r2, [r3, #20]
			uxOptionsLength += 4u;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	3304      	adds	r3, #4
 800cf96:	60fb      	str	r3, [r7, #12]
		}
		return uxOptionsLength; /* bytes, not words. */
 800cf98:	68fb      	ldr	r3, [r7, #12]
	}
	#endif	/* ipconfigUSE_TCP_WIN == 0 */
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3718      	adds	r7, #24
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <prvTCPTouchSocket>:
 * For anti-hanging protection and TCP keep-alive messages.  Called in two
 * places: after receiving a packet and after a state change.  The socket's
 * alive timer may be reset.
 */
static void prvTCPTouchSocket( FreeRTOS_Socket_t *pxSocket )
{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b082      	sub	sp, #8
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	6078      	str	r0, [r7, #4]
	#if( ipconfigTCP_HANG_PROTECTION == 1 )
	{
		pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount( );
 800cfaa:	f7fa fb9f 	bl	80076ec <xTaskGetTickCount>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif

	#if( ipconfigTCP_KEEP_ALIVE == 1 )
	{
		pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cfba:	f36f 0382 	bfc	r3, #2, #1
 800cfbe:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cfc8:	f36f 0341 	bfc	r3, #1, #1
 800cfcc:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		pxSocket->u.xTCP.ucKeepRepCount = 0u;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 800cfd8:	f7fa fb88 	bl	80076ec <xTaskGetTickCount>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	( void ) pxSocket;
}
 800cfe2:	bf00      	nop
 800cfe4:	3708      	adds	r7, #8
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}

0800cfea <vTCPStateChange>:
 * resetting the alive timer, calling the user's OnConnect handler to notify
 * that a socket has got (dis)connected, and setting bit to unblock a call to
 * FreeRTOS_select()
 */
void vTCPStateChange( FreeRTOS_Socket_t *pxSocket, enum eTCP_STATE eTCPState )
{
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b086      	sub	sp, #24
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
 800cff2:	460b      	mov	r3, r1
 800cff4:	70fb      	strb	r3, [r7, #3]
FreeRTOS_Socket_t *xParent = NULL;
 800cff6:	2300      	movs	r3, #0
 800cff8:	617b      	str	r3, [r7, #20]
BaseType_t bBefore = ( BaseType_t ) NOW_CONNECTED( pxSocket->u.xTCP.ucTCPState );	/* Was it connected ? */
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d000:	2b04      	cmp	r3, #4
 800d002:	d906      	bls.n	800d012 <vTCPStateChange+0x28>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d00a:	2b08      	cmp	r3, #8
 800d00c:	d001      	beq.n	800d012 <vTCPStateChange+0x28>
 800d00e:	2301      	movs	r3, #1
 800d010:	e000      	b.n	800d014 <vTCPStateChange+0x2a>
 800d012:	2300      	movs	r3, #0
 800d014:	613b      	str	r3, [r7, #16]
BaseType_t bAfter  = ( BaseType_t ) NOW_CONNECTED( eTCPState );						/* Is it connected now ? */
 800d016:	78fb      	ldrb	r3, [r7, #3]
 800d018:	2b04      	cmp	r3, #4
 800d01a:	d904      	bls.n	800d026 <vTCPStateChange+0x3c>
 800d01c:	78fb      	ldrb	r3, [r7, #3]
 800d01e:	2b08      	cmp	r3, #8
 800d020:	d001      	beq.n	800d026 <vTCPStateChange+0x3c>
 800d022:	2301      	movs	r3, #1
 800d024:	e000      	b.n	800d028 <vTCPStateChange+0x3e>
 800d026:	2300      	movs	r3, #0
 800d028:	60fb      	str	r3, [r7, #12]
#if( ipconfigUSE_CALLBACKS == 1 )
	FreeRTOS_Socket_t *xConnected = NULL;
#endif

	/* Has the connected status changed? */
	if( bBefore != bAfter )
 800d02a:	693a      	ldr	r2, [r7, #16]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	429a      	cmp	r2, r3
 800d030:	f000 8087 	beq.w	800d142 <vTCPStateChange+0x158>
	{
		/* Is the socket connected now ? */
		if( bAfter != pdFALSE )
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d063      	beq.n	800d102 <vTCPStateChange+0x118>
		{
			/* if bPassQueued is true, this socket is an orphan until it gets connected. */
			if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d040:	f003 0304 	and.w	r3, r3, #4
 800d044:	b2db      	uxtb	r3, r3
 800d046:	2b00      	cmp	r3, #0
 800d048:	d048      	beq.n	800d0dc <vTCPStateChange+0xf2>
			{
				/* Now that it is connected, find it's parent. */
				if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d050:	f003 0308 	and.w	r3, r3, #8
 800d054:	b2db      	uxtb	r3, r3
 800d056:	2b00      	cmp	r3, #0
 800d058:	d002      	beq.n	800d060 <vTCPStateChange+0x76>
				{
					xParent = pxSocket;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	617b      	str	r3, [r7, #20]
 800d05e:	e00f      	b.n	800d080 <vTCPStateChange+0x96>
				}
				else
				{
					xParent = pxSocket->u.xTCP.pxPeerSocket;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d064:	617b      	str	r3, [r7, #20]
					configASSERT( xParent != NULL );
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d109      	bne.n	800d080 <vTCPStateChange+0x96>
 800d06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	60bb      	str	r3, [r7, #8]
 800d07e:	e7fe      	b.n	800d07e <vTCPStateChange+0x94>
				}
				if( xParent != NULL )
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d018      	beq.n	800d0b8 <vTCPStateChange+0xce>
				{
					if( xParent->u.xTCP.pxPeerSocket == NULL )
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d102      	bne.n	800d094 <vTCPStateChange+0xaa>
					{
						xParent->u.xTCP.pxPeerSocket = pxSocket;
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	655a      	str	r2, [r3, #84]	; 0x54
					}

					xParent->xEventBits |= eSOCKET_ACCEPT;
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f043 0204 	orr.w	r2, r3, #4
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	601a      	str	r2, [r3, #0]

					#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
					{
						/* Library support FreeRTOS_select().  Receiving a new
						connection is being translated as a READ event. */
						if( ( xParent->xSelectBits & eSELECT_READ ) != 0 )
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a4:	f003 0301 	and.w	r3, r3, #1
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d005      	beq.n	800d0b8 <vTCPStateChange+0xce>
						{
							xParent->xEventBits |= ( eSELECT_READ << SOCKET_EVENT_BIT_COUNT );
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	601a      	str	r2, [r3, #0]
					#endif
				}

				/* Don't need to access the parent socket anymore, so the
				reference 'pxPeerSocket' may be cleared. */
				pxSocket->u.xTCP.pxPeerSocket = NULL;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	655a      	str	r2, [r3, #84]	; 0x54
				pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d0c4:	f36f 0382 	bfc	r3, #2, #1
 800d0c8:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

				/* When true, this socket may be returned in a call to accept(). */
				pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800d0cc:	687a      	ldr	r2, [r7, #4]
 800d0ce:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d0d2:	f043 0302 	orr.w	r3, r3, #2
 800d0d6:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800d0da:	e024      	b.n	800d126 <vTCPStateChange+0x13c>
			}
			else
			{
				pxSocket->xEventBits |= eSOCKET_CONNECT;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f043 0208 	orr.w	r2, r3, #8
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	601a      	str	r2, [r3, #0]

				#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
				{
					if( pxSocket->xSelectBits & eSELECT_WRITE )
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ec:	f003 0302 	and.w	r3, r3, #2
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d018      	beq.n	800d126 <vTCPStateChange+0x13c>
					{
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	601a      	str	r2, [r3, #0]
 800d100:	e011      	b.n	800d126 <vTCPStateChange+0x13c>
			}
		}
		else  /* bAfter == pdFALSE, connection is closed. */
		{
			/* Notify/wake-up the socket-owner by setting a semaphore. */
			pxSocket->xEventBits |= eSOCKET_CLOSED;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f043 0220 	orr.w	r2, r3, #32
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	601a      	str	r2, [r3, #0]

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->xSelectBits & eSELECT_EXCEPT ) != 0 )
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d112:	f003 0304 	and.w	r3, r3, #4
 800d116:	2b00      	cmp	r3, #0
 800d118:	d005      	beq.n	800d126 <vTCPStateChange+0x13c>
				{
					pxSocket->xEventBits |= ( eSELECT_EXCEPT << SOCKET_EVENT_BIT_COUNT );
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	601a      	str	r2, [r3, #0]
				xConnected = pxSocket;
			}
		}
		#endif /* ipconfigUSE_CALLBACKS */

		if( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE )
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7ff f9bd 	bl	800c4ac <prvTCPSocketIsActive>
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	d122      	bne.n	800d17e <vTCPStateChange+0x194>
		{
			/* Now the socket isn't in an active state anymore so it
			won't need further attention of the IP-task.
			Setting time-out to zero means that the socket won't get checked during
			timer events. */
			pxSocket->u.xTCP.usTimeout = 0u;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d140:	e01d      	b.n	800d17e <vTCPStateChange+0x194>
		}
	}
	else
	{
		if( eTCPState == eCLOSED )
 800d142:	78fb      	ldrb	r3, [r7, #3]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d11a      	bne.n	800d17e <vTCPStateChange+0x194>
		{
			/* Socket goes to status eCLOSED because of a RST.
			When nobody owns the socket yet, delete it. */
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d14e:	f003 0304 	and.w	r3, r3, #4
 800d152:	b2db      	uxtb	r3, r3
 800d154:	2b00      	cmp	r3, #0
 800d156:	d107      	bne.n	800d168 <vTCPStateChange+0x17e>
				( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d15e:	f003 0302 	and.w	r3, r3, #2
 800d162:	b2db      	uxtb	r3, r3
			if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800d164:	2b00      	cmp	r3, #0
 800d166:	d00a      	beq.n	800d17e <vTCPStateChange+0x194>
			{
				FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );
				if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d16e:	f003 0308 	and.w	r3, r3, #8
 800d172:	b2db      	uxtb	r3, r3
 800d174:	2b00      	cmp	r3, #0
 800d176:	d102      	bne.n	800d17e <vTCPStateChange+0x194>
				{
					FreeRTOS_closesocket( pxSocket );
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f7fe f8a3 	bl	800b2c4 <FreeRTOS_closesocket>
			}
		}
	}

	/* Fill in the new state. */
	pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	78fa      	ldrb	r2, [r7, #3]
 800d182:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* touch the alive timers because moving to another state. */
	prvTCPTouchSocket( pxSocket );
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f7ff ff0b 	bl	800cfa2 <prvTCPTouchSocket>
			/* The 'connected' state has changed, call the OnConnect handler of the parent. */
			xConnected->u.xTCP.pxHandleConnected( ( Socket_t * ) xConnected, bAfter );
		}
	}
	#endif
	if( xParent != NULL )
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d002      	beq.n	800d198 <vTCPStateChange+0x1ae>
	{
		vSocketWakeUpUser( xParent );
 800d192:	6978      	ldr	r0, [r7, #20]
 800d194:	f7fe fb92 	bl	800b8bc <vSocketWakeUpUser>
	}
}
 800d198:	bf00      	nop
 800d19a:	3718      	adds	r7, #24
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <prvTCPBufferResize>:
/*-----------------------------------------------------------*/

static NetworkBufferDescriptor_t *prvTCPBufferResize( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer,
	int32_t lDataLen, UBaseType_t uxOptionsLength )
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b088      	sub	sp, #32
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	60f8      	str	r0, [r7, #12]
 800d1a8:	60b9      	str	r1, [r7, #8]
 800d1aa:	607a      	str	r2, [r7, #4]
 800d1ac:	603b      	str	r3, [r7, #0]
NetworkBufferDescriptor_t *pxReturn;
int32_t lNeeded;
BaseType_t xResize;

	if( xBufferAllocFixedSize != pdFALSE )
 800d1ae:	4b2b      	ldr	r3, [pc, #172]	; (800d25c <prvTCPBufferResize+0xbc>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d00a      	beq.n	800d1cc <prvTCPBufferResize+0x2c>
	{
		/* Network buffers are created with a fixed size and can hold the largest
		MTU. */
		lNeeded = ( int32_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 800d1b6:	f240 53f2 	movw	r3, #1522	; 0x5f2
 800d1ba:	61bb      	str	r3, [r7, #24]
		/* and therefore, the buffer won't be too small.
		Only ask for a new network buffer in case none was supplied. */
		xResize = ( pxNetworkBuffer == NULL );
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	bf0c      	ite	eq
 800d1c2:	2301      	moveq	r3, #1
 800d1c4:	2300      	movne	r3, #0
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	617b      	str	r3, [r7, #20]
 800d1ca:	e014      	b.n	800d1f6 <prvTCPBufferResize+0x56>
	else
	{
		/* Network buffers are created with a variable size. See if it must
		grow. */
		lNeeded = FreeRTOS_max_int32( ( int32_t ) sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ),
			( int32_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen );
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	3336      	adds	r3, #54	; 0x36
		lNeeded = FreeRTOS_max_int32( ( int32_t ) sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ),
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	2046      	movs	r0, #70	; 0x46
 800d1d8:	f7ff f869 	bl	800c2ae <FreeRTOS_max_int32>
 800d1dc:	61b8      	str	r0, [r7, #24]
		/* In case we were called from a TCP timer event, a buffer must be
		created.  Otherwise, test 'xDataLength' of the provided buffer. */
		xResize = ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < (size_t)lNeeded );
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d004      	beq.n	800d1ee <prvTCPBufferResize+0x4e>
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	69da      	ldr	r2, [r3, #28]
 800d1e8:	69bb      	ldr	r3, [r7, #24]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d201      	bcs.n	800d1f2 <prvTCPBufferResize+0x52>
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e000      	b.n	800d1f4 <prvTCPBufferResize+0x54>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	617b      	str	r3, [r7, #20]
	}

	if( xResize != pdFALSE )
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d021      	beq.n	800d240 <prvTCPBufferResize+0xa0>
	{
		/* The caller didn't provide a network buffer or the provided buffer is
		too small.  As we must send-out a data packet, a buffer will be created
		here. */
		pxReturn = pxGetNetworkBufferWithDescriptor( ( uint32_t ) lNeeded, 0u );
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	2100      	movs	r1, #0
 800d200:	4618      	mov	r0, r3
 800d202:	f002 fc33 	bl	800fa6c <pxGetNetworkBufferWithDescriptor>
 800d206:	61f8      	str	r0, [r7, #28]

		if( pxReturn != NULL )
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d021      	beq.n	800d252 <prvTCPBufferResize+0xb2>
		{
			/* Copy the existing data to the new created buffer. */
			if( pxNetworkBuffer )
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d00c      	beq.n	800d22e <prvTCPBufferResize+0x8e>
			{
				/* Either from the previous buffer... */
				memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	6998      	ldr	r0, [r3, #24]
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	6999      	ldr	r1, [r3, #24]
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	69db      	ldr	r3, [r3, #28]
 800d220:	461a      	mov	r2, r3
 800d222:	f003 fc4a 	bl	8010aba <memcpy>

				/* ...and release it. */
				vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800d226:	68b8      	ldr	r0, [r7, #8]
 800d228:	f002 fc98 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
 800d22c:	e011      	b.n	800d252 <prvTCPBufferResize+0xb2>
			}
			else
			{
				/* Or from the socket field 'xTCP.xPacket'. */
				memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	6998      	ldr	r0, [r3, #24]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	3382      	adds	r3, #130	; 0x82
 800d236:	2246      	movs	r2, #70	; 0x46
 800d238:	4619      	mov	r1, r3
 800d23a:	f003 fc3e 	bl	8010aba <memcpy>
 800d23e:	e008      	b.n	800d252 <prvTCPBufferResize+0xb2>
		}
	}
	else
	{
		/* xResize is false, the network buffer provided was big enough. */
		pxReturn = pxNetworkBuffer;
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	61fb      	str	r3, [r7, #28]

		/* Thanks to Andrey Ivanov from swissEmbedded for reporting that the
		xDataLength member must get the correct length too! */
		pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	4413      	add	r3, r2
 800d24a:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	61da      	str	r2, [r3, #28]
	}

	return pxReturn;
 800d252:	69fb      	ldr	r3, [r7, #28]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3720      	adds	r7, #32
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	08010f58 	.word	0x08010f58

0800d260 <prvTCPPrepareSend>:

/*
 * Prepare an outgoing message, in case anything has to be sent.
 */
static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer, UBaseType_t uxOptionsLength )
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b092      	sub	sp, #72	; 0x48
 800d264:	af02      	add	r7, sp, #8
 800d266:	60f8      	str	r0, [r7, #12]
 800d268:	60b9      	str	r1, [r7, #8]
 800d26a:	607a      	str	r2, [r7, #4]
uint32_t ulDataGot, ulDistance;
TCPWindow_t *pxTCPWindow;
NetworkBufferDescriptor_t *pxNewBuffer;
int32_t lStreamPos;

	if( ( *ppxNetworkBuffer ) != NULL )
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d004      	beq.n	800d27e <prvTCPPrepareSend+0x1e>
	{
		/* A network buffer descriptor was already supplied */
		pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	699b      	ldr	r3, [r3, #24]
 800d27a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d27c:	e002      	b.n	800d284 <prvTCPPrepareSend+0x24>
	}
	else
	{
		/* For now let it point to the last packet header */
		pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	3382      	adds	r3, #130	; 0x82
 800d282:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
 800d284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d286:	637b      	str	r3, [r7, #52]	; 0x34
	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	33dc      	adds	r3, #220	; 0xdc
 800d28c:	62fb      	str	r3, [r7, #44]	; 0x2c
	lDataLen = 0;
 800d28e:	2300      	movs	r3, #0
 800d290:	63fb      	str	r3, [r7, #60]	; 0x3c
	lStreamPos = 0;
 800d292:	2300      	movs	r3, #0
 800d294:	613b      	str	r3, [r7, #16]
	pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_ACK;
 800d296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d298:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d29c:	f043 0310 	orr.w	r3, r3, #16
 800d2a0:	b2da      	uxtb	r2, r3
 800d2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	if( pxSocket->u.xTCP.txStream != NULL )
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d078      	beq.n	800d3a2 <prvTCPPrepareSend+0x142>
	{
		/* ulTCPWindowTxGet will return the amount of data which may be sent
		along with the position in the txStream.
		Why check for MSS > 1 ?
		Because some TCP-stacks (like uIP) use it for flow-control. */
		if( pxSocket->u.xTCP.usCurMSS > 1u )
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	d90a      	bls.n	800d2d0 <prvTCPPrepareSend+0x70>
		{
			lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d2c0:	f107 0210 	add.w	r2, r7, #16
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2c8:	f001 ffc8 	bl	800f25c <ulTCPWindowTxGet>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		if( lDataLen > 0 )
 800d2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	dd65      	ble.n	800d3a2 <prvTCPPrepareSend+0x142>
		{
			/* Check if the current network buffer is big enough, if not,
			resize it. */
			pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	6819      	ldr	r1, [r3, #0]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d2de:	68f8      	ldr	r0, [r7, #12]
 800d2e0:	f7ff ff5e 	bl	800d1a0 <prvTCPBufferResize>
 800d2e4:	62b8      	str	r0, [r7, #40]	; 0x28

			if( pxNewBuffer != NULL )
 800d2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d057      	beq.n	800d39c <prvTCPPrepareSend+0x13c>
			{
				*ppxNetworkBuffer = pxNewBuffer;
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2f0:	601a      	str	r2, [r3, #0]
				pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 800d2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f4:	699b      	ldr	r3, [r3, #24]
 800d2f6:	63bb      	str	r3, [r7, #56]	; 0x38
				pxTCPPacket = ( TCPPacket_t * ) ( pucEthernetBuffer );
 800d2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fa:	637b      	str	r3, [r7, #52]	; 0x34

				pucSendData = pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	3336      	adds	r3, #54	; 0x36
 800d300:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d302:	4413      	add	r3, r2
 800d304:	627b      	str	r3, [r7, #36]	; 0x24

				/* Translate the position in txStream to an offset from the tail
				marker. */
				uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	693a      	ldr	r2, [r7, #16]
 800d312:	4619      	mov	r1, r3
 800d314:	f7ff f81a 	bl	800c34c <uxStreamBufferDistance>
 800d318:	6238      	str	r0, [r7, #32]

				/* Here data is copied from the txStream in 'peek' mode.  Only
				when the packets are acked, the tail marker will be updated. */
				ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d31e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d320:	2301      	movs	r3, #1
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	4613      	mov	r3, r2
 800d326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d328:	6a39      	ldr	r1, [r7, #32]
 800d32a:	f7fe ff4c 	bl	800c1c6 <uxStreamBufferGet>
 800d32e:	61f8      	str	r0, [r7, #28]
				}
				#endif

				/* If the owner of the socket requests a closure, add the FIN
				flag to the last packet. */
				if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d030      	beq.n	800d3a2 <prvTCPPrepareSend+0x142>
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d128      	bne.n	800d3a2 <prvTCPPrepareSend+0x142>
				{
					ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	4619      	mov	r1, r3
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	461a      	mov	r2, r3
 800d360:	f7fe fff4 	bl	800c34c <uxStreamBufferDistance>
 800d364:	61b8      	str	r0, [r7, #24]

					if( ulDistance == ulDataGot )
 800d366:	69ba      	ldr	r2, [r7, #24]
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d119      	bne.n	800d3a2 <prvTCPPrepareSend+0x142>
						}
						#endif
						/* Although the socket sends a FIN, it will stay in
						ESTABLISHED until all current data has been received or
						delivered. */
						pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 800d36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d370:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d374:	f043 0301 	orr.w	r3, r3, #1
 800d378:	b2da      	uxtb	r2, r3
 800d37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d37c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800d380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d386:	441a      	add	r2, r3
 800d388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38a:	625a      	str	r2, [r3, #36]	; 0x24
						pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d38c:	68fa      	ldr	r2, [r7, #12]
 800d38e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d396:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800d39a:	e002      	b.n	800d3a2 <prvTCPPrepareSend+0x142>
					}
				}
			}
			else
			{
				lDataLen = -1;
 800d39c:	f04f 33ff 	mov.w	r3, #4294967295
 800d3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
	}

	if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) )
 800d3a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	db7e      	blt.n	800d4a6 <prvTCPPrepareSend+0x246>
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d3ae:	2b05      	cmp	r3, #5
 800d3b0:	d179      	bne.n	800d4a6 <prvTCPPrepareSend+0x246>
	{
		/* See if the socket owner wants to shutdown this connection. */
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d3b8:	f003 0320 	and.w	r3, r3, #32
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d02b      	beq.n	800d41a <prvTCPPrepareSend+0x1ba>
			( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 800d3c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3c4:	f001 fe92 	bl	800f0ec <xTCPWindowTxDone>
 800d3c8:	4603      	mov	r3, r0
		if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d025      	beq.n	800d41a <prvTCPPrepareSend+0x1ba>
		{
			pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d3d4:	f36f 1345 	bfc	r3, #5, #1
 800d3d8:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ipTCP_FLAG_FIN;
 800d3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3de:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d3e2:	f043 0301 	orr.w	r3, r3, #1
 800d3e6:	b2da      	uxtb	r2, r3
 800d3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d3ee:	68fa      	ldr	r2, [r7, #12]
 800d3f0:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d3f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3f8:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800d3fc:	68fa      	ldr	r2, [r7, #12]
 800d3fe:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d402:	f043 0301 	orr.w	r3, r3, #1
 800d406:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40c:	6a1a      	ldr	r2, [r3, #32]
 800d40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d410:	625a      	str	r2, [r3, #36]	; 0x24
			vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800d412:	2106      	movs	r1, #6
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f7ff fde8 	bl	800cfea <vTCPStateChange>
		}

		#if( ipconfigTCP_KEEP_ALIVE != 0 )
		{
			if( pxSocket->u.xTCP.ucKeepRepCount > 3u )
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d420:	2b03      	cmp	r3, #3
 800d422:	d906      	bls.n	800d432 <prvTCPPrepareSend+0x1d2>
			{
				FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
					pxSocket->u.xTCP.ulRemoteIP,			/* IP address of remote machine. */
					pxSocket->u.xTCP.usRemotePort ) );	/* Port on remote machine. */
				vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d424:	2108      	movs	r1, #8
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f7ff fddf 	bl	800cfea <vTCPStateChange>
				lDataLen = -1;
 800d42c:	f04f 33ff 	mov.w	r3, #4294967295
 800d430:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 800d432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d434:	2b00      	cmp	r3, #0
 800d436:	d136      	bne.n	800d4a6 <prvTCPPrepareSend+0x246>
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d43e:	f003 0301 	and.w	r3, r3, #1
 800d442:	b2db      	uxtb	r3, r3
 800d444:	2b00      	cmp	r3, #0
 800d446:	d12e      	bne.n	800d4a6 <prvTCPPrepareSend+0x246>
			{
				/* If there is no data to be sent, and no window-update message,
				we might want to send a keep-alive message. */
				TickType_t xAge = xTaskGetTickCount( ) - pxSocket->u.xTCP.xLastAliveTime;
 800d448:	f7fa f950 	bl	80076ec <xTaskGetTickCount>
 800d44c:	4602      	mov	r2, r0
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d452:	1ad3      	subs	r3, r2, r3
 800d454:	617b      	str	r3, [r7, #20]
				TickType_t xMax;
				xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * configTICK_RATE_HZ );
 800d456:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d45a:	633b      	str	r3, [r7, #48]	; 0x30
				if( pxSocket->u.xTCP.ucKeepRepCount )
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d462:	2b00      	cmp	r3, #0
 800d464:	d002      	beq.n	800d46c <prvTCPPrepareSend+0x20c>
				{
					xMax = ( 3u * configTICK_RATE_HZ );
 800d466:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d46a:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if( xAge > xMax )
 800d46c:	697a      	ldr	r2, [r7, #20]
 800d46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d470:	429a      	cmp	r2, r3
 800d472:	d918      	bls.n	800d4a6 <prvTCPPrepareSend+0x246>
				{
					pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount( );
 800d474:	f7fa f93a 	bl	80076ec <xTaskGetTickCount>
 800d478:	4602      	mov	r2, r0
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	65da      	str	r2, [r3, #92]	; 0x5c
					if( xTCPWindowLoggingLevel )
						FreeRTOS_debug_printf( ( "keep-alive: %lxip:%u count %u\n",
							pxSocket->u.xTCP.ulRemoteIP,
							pxSocket->u.xTCP.usRemotePort,
							pxSocket->u.xTCP.ucKeepRepCount ) );
					pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 800d47e:	68fa      	ldr	r2, [r7, #12]
 800d480:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d484:	f043 0302 	orr.w	r3, r3, #2
 800d488:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
					pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500 ) );
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800d492:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
					pxSocket->u.xTCP.ucKeepRepCount++;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d49c:	3301      	adds	r3, #1
 800d49e:	b2da      	uxtb	r2, r3
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		#endif /* ipconfigTCP_KEEP_ALIVE */
	}

	/* Anything to send, a change of the advertised window size, or maybe send a
	keep-alive message? */
	if( ( lDataLen > 0 ) ||
 800d4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	dc0f      	bgt.n	800d4cc <prvTCPPrepareSend+0x26c>
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4b2:	f003 0301 	and.w	r3, r3, #1
 800d4b6:	b2db      	uxtb	r3, r3
	if( ( lDataLen > 0 ) ||
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d107      	bne.n	800d4cc <prvTCPPrepareSend+0x26c>
		( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4c2:	f003 0302 	and.w	r3, r3, #2
 800d4c6:	b2db      	uxtb	r3, r3
		( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d02b      	beq.n	800d524 <prvTCPPrepareSend+0x2c4>
	{
		pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~ipTCP_FLAG_PSH );
 800d4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d4d2:	f023 0308 	bic.w	r3, r3, #8
 800d4d6:	b2da      	uxtb	r2, r3
 800d4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	3314      	adds	r3, #20
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	b2da      	uxtb	r2, r3
 800d4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_ACK;
 800d4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d4f6:	f043 0310 	orr.w	r3, r3, #16
 800d4fa:	b2da      	uxtb	r2, r3
 800d4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		if( lDataLen != 0l )
 800d502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d504:	2b00      	cmp	r3, #0
 800d506:	d008      	beq.n	800d51a <prvTCPPrepareSend+0x2ba>
		{
			pxTCPPacket->xTCPHeader.ucTCPFlags |= ( uint8_t ) ipTCP_FLAG_PSH;
 800d508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d50a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d50e:	f043 0308 	orr.w	r3, r3, #8
 800d512:	b2da      	uxtb	r2, r3
 800d514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d516:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				}
			}
		}
		#endif

		lDataLen += ( int32_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800d51a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	4413      	add	r3, r2
 800d520:	3328      	adds	r3, #40	; 0x28
 800d522:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	return lDataLen;
 800d524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d526:	4618      	mov	r0, r3
 800d528:	3740      	adds	r7, #64	; 0x40
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
	...

0800d530 <prvTCPNextTimeout>:

/*
 * Calculate after how much time this socket needs to be checked again.
 */
static TickType_t prvTCPNextTimeout ( FreeRTOS_Socket_t *pxSocket )
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
TickType_t ulDelayMs = ( TickType_t ) 20000;
 800d538:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d53c:	60bb      	str	r3, [r7, #8]

	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d544:	2b02      	cmp	r3, #2
 800d546:	d135      	bne.n	800d5b4 <prvTCPNextTimeout+0x84>
	{
		/* The socket is actively connecting to a peer. */
		if( pxSocket->u.xTCP.bits.bConnPrepared )
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d54e:	f003 0308 	and.w	r3, r3, #8
 800d552:	b2db      	uxtb	r3, r3
 800d554:	2b00      	cmp	r3, #0
 800d556:	d012      	beq.n	800d57e <prvTCPNextTimeout+0x4e>
		{
			/* Ethernet address has been found, use progressive timeout for
			active connect(). */
			if( pxSocket->u.xTCP.ucRepCount < 3u )
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d55e:	2b02      	cmp	r3, #2
 800d560:	d809      	bhi.n	800d576 <prvTCPNextTimeout+0x46>
			{
				ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1u ) );
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d568:	3b01      	subs	r3, #1
 800d56a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800d56e:	fa02 f303 	lsl.w	r3, r2, r3
 800d572:	60bb      	str	r3, [r7, #8]
 800d574:	e006      	b.n	800d584 <prvTCPNextTimeout+0x54>
			}
			else
			{
				ulDelayMs = 11000UL;
 800d576:	f642 23f8 	movw	r3, #11000	; 0x2af8
 800d57a:	60bb      	str	r3, [r7, #8]
 800d57c:	e002      	b.n	800d584 <prvTCPNextTimeout+0x54>
			}
		}
		else
		{
			/* Still in the ARP phase: check every half second. */
			ulDelayMs = 500UL;
 800d57e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d582:	60bb      	str	r3, [r7, #8]
		}

		FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
			pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort,
			pxSocket->u.xTCP.ucRepCount, ulDelayMs ) );
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d58a:	fb02 f303 	mul.w	r3, r2, r3
 800d58e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d592:	d30a      	bcc.n	800d5aa <prvTCPNextTimeout+0x7a>
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d59a:	fb02 f303 	mul.w	r3, r2, r3
 800d59e:	4a22      	ldr	r2, [pc, #136]	; (800d628 <prvTCPNextTimeout+0xf8>)
 800d5a0:	fba2 2303 	umull	r2, r3, r2, r3
 800d5a4:	099b      	lsrs	r3, r3, #6
 800d5a6:	b29a      	uxth	r2, r3
 800d5a8:	e000      	b.n	800d5ac <prvTCPNextTimeout+0x7c>
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d5b2:	e032      	b.n	800d61a <prvTCPNextTimeout+0xea>
	}
	else if( pxSocket->u.xTCP.usTimeout == 0u )
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d12d      	bne.n	800d61a <prvTCPNextTimeout+0xea>
	{
		/* Let the sliding window mechanism decide what time-out is appropriate. */
		BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d5ca:	f107 0208 	add.w	r2, r7, #8
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	f001 fde4 	bl	800f19c <xTCPWindowTxHasData>
 800d5d4:	60f8      	str	r0, [r7, #12]
		if( ulDelayMs == 0u )
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d107      	bne.n	800d5ec <prvTCPNextTimeout+0xbc>
		{
			ulDelayMs = xResult ? 1UL : 20000UL;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d001      	beq.n	800d5e6 <prvTCPNextTimeout+0xb6>
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e001      	b.n	800d5ea <prvTCPNextTimeout+0xba>
 800d5e6:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d5ea:	60bb      	str	r3, [r7, #8]
		}
		else
		{
			/* ulDelayMs contains the time to wait before a re-transmission. */
		}
		pxSocket->u.xTCP.usTimeout = ( uint16_t )pdMS_TO_MIN_TICKS( ulDelayMs );
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d5f2:	fb02 f303 	mul.w	r3, r2, r3
 800d5f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d5fa:	d30a      	bcc.n	800d612 <prvTCPNextTimeout+0xe2>
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d602:	fb02 f303 	mul.w	r3, r2, r3
 800d606:	4a08      	ldr	r2, [pc, #32]	; (800d628 <prvTCPNextTimeout+0xf8>)
 800d608:	fba2 2303 	umull	r2, r3, r2, r3
 800d60c:	099b      	lsrs	r3, r3, #6
 800d60e:	b29a      	uxth	r2, r3
 800d610:	e000      	b.n	800d614 <prvTCPNextTimeout+0xe4>
 800d612:	2201      	movs	r2, #1
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		/* field '.usTimeout' has already been set (by the
		keep-alive/delayed-ACK mechanism). */
	}

	/* Return the number of clock ticks before the timer expires. */
	return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
}
 800d620:	4618      	mov	r0, r3
 800d622:	3710      	adds	r7, #16
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}
 800d628:	10624dd3 	.word	0x10624dd3

0800d62c <prvTCPAddTxData>:
/*-----------------------------------------------------------*/

static void prvTCPAddTxData( FreeRTOS_Socket_t *pxSocket )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
	the sliding window.

	uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It contains new
	Tx data which has not been passed to the sliding window yet.  The oldest
	data not-yet-confirmed can be found at rxTail. */
	lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d638:	4618      	mov	r0, r3
 800d63a:	f7fe fecd 	bl	800c3d8 <uxStreamBufferMidSpace>
 800d63e:	4603      	mov	r3, r0
 800d640:	60fb      	str	r3, [r7, #12]

	if( lLength > 0 )
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2b00      	cmp	r3, #0
 800d646:	dd17      	ble.n	800d678 <prvTCPAddTxData+0x4c>
		window manager, so it can start transmitting them.

		Hand over the new data to the sliding window handler.  It will be
		split-up in chunks of 1460 bytes each (or less, depending on
		ipconfigTCP_MSS). */
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800d64e:	68f9      	ldr	r1, [r7, #12]
								( uint32_t ) lLength,
								( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d654:	685b      	ldr	r3, [r3, #4]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800d656:	461a      	mov	r2, r3
								( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d65c:	691b      	ldr	r3, [r3, #16]
		lCount = lTCPWindowTxAdd(	&pxSocket->u.xTCP.xTCPWindow,
 800d65e:	f001 fc91 	bl	800ef84 <lTCPWindowTxAdd>
 800d662:	60b8      	str	r0, [r7, #8]

		/* Move the rxMid pointer forward up to rxHead. */
		if( lCount > 0 )
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	2b00      	cmp	r3, #0
 800d668:	dd06      	ble.n	800d678 <prvTCPAddTxData+0x4c>
		{
			vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d66e:	68ba      	ldr	r2, [r7, #8]
 800d670:	4611      	mov	r1, r2
 800d672:	4618      	mov	r0, r3
 800d674:	f7fe fec4 	bl	800c400 <vStreamBufferMoveMid>
		}
	}
}
 800d678:	bf00      	nop
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <prvTCPHandleFin>:
 * Or when the socket has sent a FIN flag to the peer
 * Before being called, it has been checked that both reception and transmission
 * are complete.
 */
static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b088      	sub	sp, #32
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	699b      	ldr	r3, [r3, #24]
 800d68e:	61bb      	str	r3, [r7, #24]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800d690:	69bb      	ldr	r3, [r7, #24]
 800d692:	3322      	adds	r3, #34	; 0x22
 800d694:	617b      	str	r3, [r7, #20]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	7b5b      	ldrb	r3, [r3, #13]
 800d69a:	74fb      	strb	r3, [r7, #19]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	33dc      	adds	r3, #220	; 0xdc
 800d6a0:	60fb      	str	r3, [r7, #12]
BaseType_t xSendLength = 0;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	61fb      	str	r3, [r7, #28]
uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	061a      	lsls	r2, r3, #24
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	021b      	lsls	r3, r3, #8
 800d6b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d6b6:	431a      	orrs	r2, r3
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	0a1b      	lsrs	r3, r3, #8
 800d6be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d6c2:	431a      	orrs	r2, r3
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	0e1b      	lsrs	r3, r3, #24
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	60bb      	str	r3, [r7, #8]

	if( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u )
 800d6ce:	7cfb      	ldrb	r3, [r7, #19]
 800d6d0:	f003 0301 	and.w	r3, r3, #1
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d004      	beq.n	800d6e2 <prvTCPHandleFin+0x62>
	{
		pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1u;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	695b      	ldr	r3, [r3, #20]
 800d6dc:	1c5a      	adds	r2, r3, #1
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	611a      	str	r2, [r3, #16]
	}
	if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d10b      	bne.n	800d70a <prvTCPHandleFin+0x8a>
	{
		/* We haven't yet replied with a FIN, do so now. */
		pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6a1a      	ldr	r2, [r3, #32]
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	625a      	str	r2, [r3, #36]	; 0x24
		pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d704:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800d708:	e00c      	b.n	800d724 <prvTCPHandleFin+0xa4>
	}
	else
	{
		/* We did send a FIN already, see if it's ACK'd. */
		if( ulAckNr == pxTCPWindow->tx.ulFINSequenceNumber + 1u )
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70e:	1c5a      	adds	r2, r3, #1
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	429a      	cmp	r2, r3
 800d714:	d106      	bne.n	800d724 <prvTCPHandleFin+0xa4>
		{
			pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d71c:	f043 0301 	orr.w	r3, r3, #1
 800d720:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
		}
	}

	if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d72a:	f003 0301 	and.w	r3, r3, #1
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10b      	bne.n	800d74c <prvTCPHandleFin+0xcc>
	{
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	621a      	str	r2, [r3, #32]
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_FIN;
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	2211      	movs	r2, #17
 800d740:	735a      	strb	r2, [r3, #13]

		/* And wait for the final ACK. */
		vTCPStateChange( pxSocket, eLAST_ACK );
 800d742:	210a      	movs	r1, #10
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f7ff fc50 	bl	800cfea <vTCPStateChange>
 800d74a:	e023      	b.n	800d794 <prvTCPHandleFin+0x114>
	}
	else
	{
		/* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
		pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1u;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d750:	1c5a      	adds	r2, r3, #1
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	621a      	str	r2, [r3, #32]
		if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d75c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d760:	b2db      	uxtb	r3, r3
 800d762:	2b00      	cmp	r3, #0
 800d764:	d103      	bne.n	800d76e <prvTCPHandleFin+0xee>
		{
			/* We have sent out a FIN but the peer hasn't replied with a FIN
			yet. Do nothing for the moment. */
			pxTCPHeader->ucTCPFlags = 0u;
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	2200      	movs	r2, #0
 800d76a:	735a      	strb	r2, [r3, #13]
 800d76c:	e012      	b.n	800d794 <prvTCPHandleFin+0x114>
		}
		else
		{
			if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d774:	f003 0302 	and.w	r3, r3, #2
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d103      	bne.n	800d786 <prvTCPHandleFin+0x106>
			{
				/* This is the third of the three-way hand shake: the last
				ACK. */
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	2210      	movs	r2, #16
 800d782:	735a      	strb	r2, [r3, #13]
 800d784:	e002      	b.n	800d78c <prvTCPHandleFin+0x10c>
			}
			else
			{
				/* The other party started the closure, so we just wait for the
				last ACK. */
				pxTCPHeader->ucTCPFlags = 0u;
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	2200      	movs	r2, #0
 800d78a:	735a      	strb	r2, [r3, #13]
			}

			/* And wait for the user to close this socket. */
			vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d78c:	2108      	movs	r1, #8
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f7ff fc2b 	bl	800cfea <vTCPStateChange>
		}
	}

	pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6a1a      	ldr	r2, [r3, #32]
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	62da      	str	r2, [r3, #44]	; 0x2c

	if( pxTCPHeader->ucTCPFlags != 0u )
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	7b5b      	ldrb	r3, [r3, #13]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d004      	beq.n	800d7ae <prvTCPHandleFin+0x12e>
	{
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7aa:	3328      	adds	r3, #40	; 0x28
 800d7ac:	61fb      	str	r3, [r7, #28]
	}

	pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7b4:	3314      	adds	r3, #20
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	b2da      	uxtb	r2, r3
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	731a      	strb	r2, [r3, #12]
			pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
			pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
			pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
	}

	return xSendLength;
 800d7c0:	69fb      	ldr	r3, [r7, #28]
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3720      	adds	r7, #32
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <prvCheckRxData>:
 *
 * The first thing that will be done is find the TCP payload data
 * and check the length of this data.
 */
static BaseType_t prvCheckRxData( NetworkBufferDescriptor_t *pxNetworkBuffer, uint8_t **ppucRecvData )
{
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b088      	sub	sp, #32
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
 800d7d2:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	699b      	ldr	r3, [r3, #24]
 800d7d8:	61bb      	str	r3, [r7, #24]
TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
 800d7da:	69bb      	ldr	r3, [r7, #24]
 800d7dc:	3322      	adds	r3, #34	; 0x22
 800d7de:	617b      	str	r3, [r7, #20]
	node.

	The size of the TCP header is given in a multiple of 4-byte words (single
	byte, needs no ntoh() translation).  A shift-right 2: is the same as
	(offset >> 4) * 4. */
    lTCPHeaderLength = ( BaseType_t ) ( ( pxTCPHeader->ucTCPOffset & VALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2 );
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	7b1b      	ldrb	r3, [r3, #12]
 800d7e4:	089b      	lsrs	r3, r3, #2
 800d7e6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800d7ea:	613b      	str	r3, [r7, #16]

	/* Let pucRecvData point to the first byte received. */
	*ppucRecvData = pxNetworkBuffer->pucEthernetBuffer + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + lTCPHeaderLength;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	699a      	ldr	r2, [r3, #24]
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	3322      	adds	r3, #34	; 0x22
 800d7f4:	441a      	add	r2, r3
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	601a      	str	r2, [r3, #0]

	/* Calculate lReceiveLength - the length of the TCP data received.  This is
	equal to the total packet length minus:
	( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
	lReceiveLength = ( ( int32_t ) pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	69db      	ldr	r3, [r3, #28]
 800d7fe:	3b0e      	subs	r3, #14
 800d800:	61fb      	str	r3, [r7, #28]
	lLength =  ( int32_t )FreeRTOS_htons( pxTCPPacket->xIPHeader.usLength );
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	8a1b      	ldrh	r3, [r3, #16]
 800d806:	b29b      	uxth	r3, r3
 800d808:	021b      	lsls	r3, r3, #8
 800d80a:	b21a      	sxth	r2, r3
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	8a1b      	ldrh	r3, [r3, #16]
 800d810:	b29b      	uxth	r3, r3
 800d812:	0a1b      	lsrs	r3, r3, #8
 800d814:	b29b      	uxth	r3, r3
 800d816:	b21b      	sxth	r3, r3
 800d818:	4313      	orrs	r3, r2
 800d81a:	b21b      	sxth	r3, r3
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	60fb      	str	r3, [r7, #12]

	if( lReceiveLength > lLength )
 800d820:	69fa      	ldr	r2, [r7, #28]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	429a      	cmp	r2, r3
 800d826:	dd01      	ble.n	800d82c <prvCheckRxData+0x62>
	{
		/* More bytes were received than the reported length, often because of
		padding bytes at the end. */
		lReceiveLength = lLength;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	61fb      	str	r3, [r7, #28]
	}

	/* Subtract the size of the TCP and IP headers and the actual data size is
	known. */
	if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER ) )
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	f103 0214 	add.w	r2, r3, #20
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	429a      	cmp	r2, r3
 800d836:	da05      	bge.n	800d844 <prvCheckRxData+0x7a>
	{
		lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) ipSIZE_OF_IPv4_HEADER );
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	3314      	adds	r3, #20
 800d83c:	69fa      	ldr	r2, [r7, #28]
 800d83e:	1ad3      	subs	r3, r2, r3
 800d840:	61fb      	str	r3, [r7, #28]
 800d842:	e001      	b.n	800d848 <prvCheckRxData+0x7e>
	}
	else
	{
		lReceiveLength = 0;
 800d844:	2300      	movs	r3, #0
 800d846:	61fb      	str	r3, [r7, #28]
	This field communicates the current value of the urgent pointer as a
	positive offset from the sequence number in this segment.  The urgent
	pointer points to the sequence number of the octet following the urgent
	data.  This field is only be interpreted in segments with the URG control
	bit set. */
	if( ( pxTCPHeader->ucTCPFlags & ipTCP_FLAG_URG ) != 0u )
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	7b5b      	ldrb	r3, [r3, #13]
 800d84c:	f003 0320 	and.w	r3, r3, #32
 800d850:	2b00      	cmp	r3, #0
 800d852:	d01c      	beq.n	800d88e <prvCheckRxData+0xc4>
	{
		/* Although we ignore the urgent data, we have to skip it. */
		lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	8a5b      	ldrh	r3, [r3, #18]
 800d858:	b29b      	uxth	r3, r3
 800d85a:	021b      	lsls	r3, r3, #8
 800d85c:	b21a      	sxth	r2, r3
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	8a5b      	ldrh	r3, [r3, #18]
 800d862:	b29b      	uxth	r3, r3
 800d864:	0a1b      	lsrs	r3, r3, #8
 800d866:	b29b      	uxth	r3, r3
 800d868:	b21b      	sxth	r3, r3
 800d86a:	4313      	orrs	r3, r2
 800d86c:	b21b      	sxth	r3, r3
 800d86e:	b29b      	uxth	r3, r3
 800d870:	60bb      	str	r3, [r7, #8]
		*ppucRecvData += lUrgentLength;
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	681a      	ldr	r2, [r3, #0]
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	441a      	add	r2, r3
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	601a      	str	r2, [r3, #0]
		lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 800d87e:	68b9      	ldr	r1, [r7, #8]
 800d880:	69f8      	ldr	r0, [r7, #28]
 800d882:	f7fe fd24 	bl	800c2ce <FreeRTOS_min_int32>
 800d886:	4602      	mov	r2, r0
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	1a9b      	subs	r3, r3, r2
 800d88c:	61fb      	str	r3, [r7, #28]
	}

	return ( BaseType_t ) lReceiveLength;
 800d88e:	69fb      	ldr	r3, [r7, #28]
}
 800d890:	4618      	mov	r0, r3
 800d892:	3720      	adds	r7, #32
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <prvStoreRxData>:
 * The second thing is to do is check if the payload data may be accepted
 * If so, they will be added to the reception queue.
 */
static BaseType_t prvStoreRxData( FreeRTOS_Socket_t *pxSocket, uint8_t *pucRecvData,
	NetworkBufferDescriptor_t *pxNetworkBuffer, uint32_t ulReceiveLength )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b08c      	sub	sp, #48	; 0x30
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
 800d8a4:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	699b      	ldr	r3, [r3, #24]
 800d8aa:	627b      	str	r3, [r7, #36]	; 0x24
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ae:	3322      	adds	r3, #34	; 0x22
 800d8b0:	623b      	str	r3, [r7, #32]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	33dc      	adds	r3, #220	; 0xdc
 800d8b6:	61fb      	str	r3, [r7, #28]
uint32_t ulSequenceNumber, ulSpace;
int32_t lOffset, lStored;
BaseType_t xResult = 0;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	62bb      	str	r3, [r7, #40]	; 0x28

	ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800d8bc:	6a3b      	ldr	r3, [r7, #32]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	061a      	lsls	r2, r3, #24
 800d8c2:	6a3b      	ldr	r3, [r7, #32]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	021b      	lsls	r3, r3, #8
 800d8c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d8cc:	431a      	orrs	r2, r3
 800d8ce:	6a3b      	ldr	r3, [r7, #32]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	0a1b      	lsrs	r3, r3, #8
 800d8d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d8d8:	431a      	orrs	r2, r3
 800d8da:	6a3b      	ldr	r3, [r7, #32]
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	0e1b      	lsrs	r3, r3, #24
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	61bb      	str	r3, [r7, #24]

	if( ( ulReceiveLength > 0u ) && ( pxSocket->u.xTCP.ucTCPState >= eSYN_RECEIVED ) )
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d03f      	beq.n	800d96a <prvStoreRxData+0xd2>
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d8f0:	2b03      	cmp	r3, #3
 800d8f2:	d93a      	bls.n	800d96a <prvStoreRxData+0xd2>

		If it can't be "accept"ed it may have to be stored and send a selective
		ack (SACK) option to confirm it.  In that case, xTCPWindowRxStore() will be
		called later to store an out-of-order packet (in case lOffset is
		negative). */
		if ( pxSocket->u.xTCP.rxStream )
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d006      	beq.n	800d90a <prvStoreRxData+0x72>
		{
			ulSpace = ( uint32_t )uxStreamBufferGetSpace ( pxSocket->u.xTCP.rxStream );
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d900:	4618      	mov	r0, r3
 800d902:	f7fe fd41 	bl	800c388 <uxStreamBufferGetSpace>
 800d906:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d908:	e002      	b.n	800d910 <prvStoreRxData+0x78>
		}
		else
		{
			ulSpace = ( uint32_t )pxSocket->u.xTCP.uxRxStreamSize;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d90e:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 800d910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d912:	683a      	ldr	r2, [r7, #0]
 800d914:	69b9      	ldr	r1, [r7, #24]
 800d916:	69f8      	ldr	r0, [r7, #28]
 800d918:	f001 fa3c 	bl	800ed94 <lTCPWindowRxCheck>
 800d91c:	6178      	str	r0, [r7, #20]

		if( lOffset >= 0 )
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	2b00      	cmp	r3, #0
 800d922:	db10      	blt.n	800d946 <prvStoreRxData+0xae>
		{
			/* New data has arrived and may be made available to the user.  See
			if the head marker in rxStream may be advanced,	only if lOffset == 0.
			In case the low-water mark is reached, bLowWater will be set
			"low-water" here stands for "little space". */
			lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 800d924:	6979      	ldr	r1, [r7, #20]
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	68ba      	ldr	r2, [r7, #8]
 800d92a:	68f8      	ldr	r0, [r7, #12]
 800d92c:	f7fe f918 	bl	800bb60 <lTCPAddRxdata>
 800d930:	6138      	str	r0, [r7, #16]

			if( lStored != ( int32_t ) ulReceiveLength )
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	693a      	ldr	r2, [r7, #16]
 800d936:	429a      	cmp	r2, r3
 800d938:	d005      	beq.n	800d946 <prvStoreRxData+0xae>
				FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes??\n", lStored, ulReceiveLength ) );

				/* Received data could not be stored.  The socket's flag
				bMallocError has been set.  The socket now has the status
				eCLOSE_WAIT and a RST packet will be sent back. */
				prvTCPSendReset( pxNetworkBuffer );
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 fc24 	bl	800e188 <prvTCPSendReset>
				xResult = -1;
 800d940:	f04f 33ff 	mov.w	r3, #4294967295
 800d944:	62bb      	str	r3, [r7, #40]	; 0x28
		#if( ipconfigUSE_TCP_WIN == 1 )
		{
			/* Now lTCPAddRxdata() will move the rxHead pointer forward
			so data becomes available to the user immediately
			In case the low-water mark is reached, bLowWater will be set. */
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800d946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d113      	bne.n	800d974 <prvStoreRxData+0xdc>
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00f      	beq.n	800d974 <prvStoreRxData+0xdc>
			{
				lTCPAddRxdata( pxSocket, 0ul, NULL, pxTCPWindow->ulUserDataLength );
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d958:	2200      	movs	r2, #0
 800d95a:	2100      	movs	r1, #0
 800d95c:	68f8      	ldr	r0, [r7, #12]
 800d95e:	f7fe f8ff 	bl	800bb60 <lTCPAddRxdata>
				pxTCPWindow->ulUserDataLength = 0;
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	2200      	movs	r2, #0
 800d966:	631a      	str	r2, [r3, #48]	; 0x30
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800d968:	e004      	b.n	800d974 <prvStoreRxData+0xdc>
		}
		#endif /* ipconfigUSE_TCP_WIN */
	}
	else
	{
		pxTCPWindow->ucOptionLength = 0u;
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	2200      	movs	r2, #0
 800d96e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d972:	e000      	b.n	800d976 <prvStoreRxData+0xde>
			if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0 ) )
 800d974:	bf00      	nop
	}

	return xResult;
 800d976:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3730      	adds	r7, #48	; 0x30
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <prvSetOptions>:
/*-----------------------------------------------------------*/

/* Set the TCP options (if any) for the outgoing packet. */
static UBaseType_t prvSetOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b086      	sub	sp, #24
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	699b      	ldr	r3, [r3, #24]
 800d98e:	613b      	str	r3, [r7, #16]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	3322      	adds	r3, #34	; 0x22
 800d994:	60fb      	str	r3, [r7, #12]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	33dc      	adds	r3, #220	; 0xdc
 800d99a:	60bb      	str	r3, [r7, #8]
UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9a2:	617b      	str	r3, [r7, #20]

	#if(	ipconfigUSE_TCP_WIN == 1 )
		if( uxOptionsLength != 0u )
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d011      	beq.n	800d9ce <prvSetOptions+0x4e>
					pxSocket->usLocalPort,
					pxSocket->u.xTCP.usRemotePort,
					uxOptionsLength,
					FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 1 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
					FreeRTOS_ntohl( pxTCPWindow->ulOptionsData[ 2 ] ) - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ) );
			memcpy( pxTCPHeader->ucOptdata, pxTCPWindow->ulOptionsData, ( size_t ) uxOptionsLength );
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f103 0014 	add.w	r0, r3, #20
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	3380      	adds	r3, #128	; 0x80
 800d9b4:	697a      	ldr	r2, [r7, #20]
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	f003 f87f 	bl	8010aba <memcpy>

			/* The header length divided by 4, goes into the higher nibble,
			effectively a shift-left 2. */
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	3314      	adds	r3, #20
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	b2da      	uxtb	r2, r3
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	731a      	strb	r2, [r3, #12]
 800d9cc:	e031      	b.n	800da32 <prvSetOptions+0xb2>
		}
		else
	#endif	/* ipconfigUSE_TCP_WIN */
	if( ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d9d4:	2b04      	cmp	r3, #4
 800d9d6:	d92c      	bls.n	800da32 <prvSetOptions+0xb2>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d9de:	f003 0301 	and.w	r3, r3, #1
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d024      	beq.n	800da32 <prvSetOptions+0xb2>
	{
		/* TCP options must be sent because the MSS has changed. */
		pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d9ee:	f36f 0300 	bfc	r3, #0, #1
 800d9f2:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		if( xTCPWindowLoggingLevel >= 0 )
		{
			FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
		}

		pxTCPHeader->ucOptdata[ 0 ] = TCP_OPT_MSS;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2202      	movs	r2, #2
 800d9fa:	751a      	strb	r2, [r3, #20]
		pxTCPHeader->ucOptdata[ 1 ] = TCP_OPT_MSS_LEN;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2204      	movs	r2, #4
 800da00:	755a      	strb	r2, [r3, #21]
		pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800da08:	0a1b      	lsrs	r3, r3, #8
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	b2da      	uxtb	r2, r3
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	759a      	strb	r2, [r3, #22]
		pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffu );
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800da18:	b2da      	uxtb	r2, r3
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	75da      	strb	r2, [r3, #23]
		uxOptionsLength = 4u;
 800da1e:	2304      	movs	r3, #4
 800da20:	617b      	str	r3, [r7, #20]
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	b2db      	uxtb	r3, r3
 800da26:	3314      	adds	r3, #20
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	b2da      	uxtb	r2, r3
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	731a      	strb	r2, [r3, #12]
			uxOptionsLength += prvTCPSetTimeStamp( xOptionsLength, pxSocket, pxTCPHeader );
		}
	}
	#endif	/* ipconfigUSE_TCP_TIMESTAMPS == 1 */

	return uxOptionsLength;
 800da32:	697b      	ldr	r3, [r7, #20]
}
 800da34:	4618      	mov	r0, r3
 800da36:	3718      	adds	r7, #24
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <prvHandleSynReceived>:
 * Called from the states: eSYN_RECEIVED and eCONNECT_SYN
 * If the flags received are correct, the socket will move to eESTABLISHED.
 */
static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b08c      	sub	sp, #48	; 0x30
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	607a      	str	r2, [r7, #4]
 800da48:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	699b      	ldr	r3, [r3, #24]
 800da50:	627b      	str	r3, [r7, #36]	; 0x24
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800da52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da54:	3322      	adds	r3, #34	; 0x22
 800da56:	623b      	str	r3, [r7, #32]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	33dc      	adds	r3, #220	; 0xdc
 800da5c:	61fb      	str	r3, [r7, #28]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800da5e:	6a3b      	ldr	r3, [r7, #32]
 800da60:	7b5b      	ldrb	r3, [r3, #13]
 800da62:	76fb      	strb	r3, [r7, #27]
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800da64:	6a3b      	ldr	r3, [r7, #32]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	061a      	lsls	r2, r3, #24
 800da6a:	6a3b      	ldr	r3, [r7, #32]
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	021b      	lsls	r3, r3, #8
 800da70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800da74:	431a      	orrs	r2, r3
 800da76:	6a3b      	ldr	r3, [r7, #32]
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	0a1b      	lsrs	r3, r3, #8
 800da7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800da80:	431a      	orrs	r2, r3
 800da82:	6a3b      	ldr	r3, [r7, #32]
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	0e1b      	lsrs	r3, r3, #24
 800da88:	4313      	orrs	r3, r2
 800da8a:	617b      	str	r3, [r7, #20]
BaseType_t xSendLength = 0;
 800da8c:	2300      	movs	r3, #0
 800da8e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Either expect a ACK or a SYN+ACK. */
	uint16_t usExpect = ( uint16_t ) ipTCP_FLAG_ACK;
 800da90:	2310      	movs	r3, #16
 800da92:	857b      	strh	r3, [r7, #42]	; 0x2a
	if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	d103      	bne.n	800daa6 <prvHandleSynReceived+0x6a>
	{
		usExpect |= ( uint16_t ) ipTCP_FLAG_SYN;
 800da9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800daa0:	f043 0302 	orr.w	r3, r3, #2
 800daa4:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	if( ( ucTCPFlags & 0x17u ) != usExpect )
 800daa6:	7efb      	ldrb	r3, [r7, #27]
 800daa8:	f003 0217 	and.w	r2, r3, #23
 800daac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800daae:	429a      	cmp	r2, r3
 800dab0:	d016      	beq.n	800dae0 <prvHandleSynReceived+0xa4>
		/* eSYN_RECEIVED: flags 0010 expected, not 0002. */
		/* eSYN_RECEIVED: flags ACK  expected, not SYN. */
		FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
			pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ? "eSYN_RECEIVED" : "eCONNECT_SYN",
			usExpect, ucTCPFlags ) );
		vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800dab2:	2108      	movs	r1, #8
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	f7ff fa98 	bl	800cfea <vTCPStateChange>
		pxTCPHeader->ucTCPFlags |= ipTCP_FLAG_RST;
 800daba:	6a3b      	ldr	r3, [r7, #32]
 800dabc:	7b5b      	ldrb	r3, [r3, #13]
 800dabe:	f043 0304 	orr.w	r3, r3, #4
 800dac2:	b2da      	uxtb	r2, r3
 800dac4:	6a3b      	ldr	r3, [r7, #32]
 800dac6:	735a      	strb	r2, [r3, #13]
		xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	3328      	adds	r3, #40	; 0x28
 800dacc:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	3314      	adds	r3, #20
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	6a3b      	ldr	r3, [r7, #32]
 800dadc:	731a      	strb	r2, [r3, #12]
 800dade:	e069      	b.n	800dbb4 <prvHandleSynReceived+0x178>
	}
	else
	{
		pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800dae4:	69fb      	ldr	r3, [r7, #28]
 800dae6:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800daee:	69fb      	ldr	r3, [r7, #28]
 800daf0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

		if( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN )
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dafa:	2b02      	cmp	r3, #2
 800dafc:	d125      	bne.n	800db4a <prvHandleSynReceived+0x10e>
		{
			TCPPacket_t *pxLastTCPPacket = ( TCPPacket_t * ) ( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	3382      	adds	r3, #130	; 0x82
 800db02:	613b      	str	r3, [r7, #16]

			/* Clear the SYN flag in lastPacket. */
			pxLastTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK;
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	2210      	movs	r2, #16
 800db08:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

			/* This socket was the one connecting actively so now perofmr the
			synchronisation. */
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
				ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usCurMSS );
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
			vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800db1e:	6979      	ldr	r1, [r7, #20]
 800db20:	f001 f892 	bl	800ec48 <vTCPWindowInit>
			pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	1c5a      	adds	r2, r3, #1
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	619a      	str	r2, [r3, #24]
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	699a      	ldr	r2, [r3, #24]
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	611a      	str	r2, [r3, #16]
			pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	6a1b      	ldr	r3, [r3, #32]
 800db38:	1c5a      	adds	r2, r3, #1
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	621a      	str	r2, [r3, #32]
			pxTCPWindow->ulNextTxSequenceNumber++;
 800db3e:	69fb      	ldr	r3, [r7, #28]
 800db40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db42:	1c5a      	adds	r2, r3, #1
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	635a      	str	r2, [r3, #52]	; 0x34
 800db48:	e005      	b.n	800db56 <prvHandleSynReceived+0x11a>
		}
		else if( ulReceiveLength == 0u )
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d102      	bne.n	800db56 <prvHandleSynReceived+0x11a>
		{
			pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	697a      	ldr	r2, [r7, #20]
 800db54:	611a      	str	r2, [r3, #16]
		}

		/* The SYN+ACK has been confirmed, increase the next sequence number by
		1. */
		pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u;
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	69db      	ldr	r3, [r3, #28]
 800db5a:	1c5a      	adds	r2, r3, #1
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	62da      	str	r2, [r3, #44]	; 0x2c
				pxSocket->u.xTCP.usRemotePort,
				( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
		}
		#endif /* ipconfigUSE_TCP_WIN */

		if( ( pxSocket->u.xTCP.ucTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0u ) )
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800db66:	2b02      	cmp	r3, #2
 800db68:	d002      	beq.n	800db70 <prvHandleSynReceived+0x134>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d00d      	beq.n	800db8c <prvHandleSynReceived+0x150>
		{
			pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800db70:	6a3b      	ldr	r3, [r7, #32]
 800db72:	2210      	movs	r2, #16
 800db74:	735a      	strb	r2, [r3, #13]
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	3328      	adds	r3, #40	; 0x28
 800db7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	3314      	adds	r3, #20
 800db82:	b2db      	uxtb	r3, r3
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	b2da      	uxtb	r2, r3
 800db88:	6a3b      	ldr	r3, [r7, #32]
 800db8a:	731a      	strb	r2, [r3, #12]
		}

		if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db92:	f003 0310 	and.w	r3, r3, #16
 800db96:	b2db      	uxtb	r3, r3
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d107      	bne.n	800dbac <prvHandleSynReceived+0x170>
		{
			/* The other party did not send a scaling factor.
			A shifting factor in this side must be canceled. */
			pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2200      	movs	r2, #0
 800dba0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2200      	movs	r2, #0
 800dba8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		}
		/* This was the third step of connecting: SYN, SYN+ACK, ACK	so now the
		connection is established. */
		vTCPStateChange( pxSocket, eESTABLISHED );
 800dbac:	2105      	movs	r1, #5
 800dbae:	68f8      	ldr	r0, [r7, #12]
 800dbb0:	f7ff fa1b 	bl	800cfea <vTCPStateChange>
	}

	return xSendLength;
 800dbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3730      	adds	r7, #48	; 0x30
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}

0800dbbe <prvHandleEstablished>:
 * the code will check if it may be accepted, i.e. if all expected data has been
 * completely received.
 */
static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, UBaseType_t uxOptionsLength )
{
 800dbbe:	b580      	push	{r7, lr}
 800dbc0:	b092      	sub	sp, #72	; 0x48
 800dbc2:	af02      	add	r7, sp, #8
 800dbc4:	60f8      	str	r0, [r7, #12]
 800dbc6:	60b9      	str	r1, [r7, #8]
 800dbc8:	607a      	str	r2, [r7, #4]
 800dbca:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	699b      	ldr	r3, [r3, #24]
 800dbd2:	637b      	str	r3, [r7, #52]	; 0x34
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800dbd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbd6:	3322      	adds	r3, #34	; 0x22
 800dbd8:	633b      	str	r3, [r7, #48]	; 0x30
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	33dc      	adds	r3, #220	; 0xdc
 800dbde:	62fb      	str	r3, [r7, #44]	; 0x2c
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800dbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe2:	7b5b      	ldrb	r3, [r3, #13]
 800dbe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount;
 800dbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	061a      	lsls	r2, r3, #24
 800dbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	021b      	lsls	r3, r3, #8
 800dbf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dbf8:	431a      	orrs	r2, r3
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	0a1b      	lsrs	r3, r3, #8
 800dc00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dc04:	431a      	orrs	r2, r3
 800dc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	0e1b      	lsrs	r3, r3, #24
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 800dc10:	2300      	movs	r3, #0
 800dc12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc14:	2300      	movs	r3, #0
 800dc16:	63bb      	str	r3, [r7, #56]	; 0x38
int32_t lDistance, lSendResult;

	/* Remember the window size the peer is advertising. */
	pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800dc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1a:	89db      	ldrh	r3, [r3, #14]
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	021b      	lsls	r3, r3, #8
 800dc20:	b21a      	sxth	r2, r3
 800dc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc24:	89db      	ldrh	r3, [r3, #14]
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	0a1b      	lsrs	r3, r3, #8
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	b21b      	sxth	r3, r3
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	b21b      	sxth	r3, r3
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	461a      	mov	r2, r3
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	pxSocket->u.xTCP.ulWindowSize =
		( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dc42:	68fa      	ldr	r2, [r7, #12]
 800dc44:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800dc48:	fa03 f202 	lsl.w	r2, r3, r2
	pxSocket->u.xTCP.ulWindowSize =
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	if( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_ACK ) != 0u )
 800dc52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc56:	f003 0310 	and.w	r3, r3, #16
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d040      	beq.n	800dce0 <prvHandleEstablished+0x122>
	{
		ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulAckNr ) );
 800dc5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc60:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800dc64:	061a      	lsls	r2, r3, #24
 800dc66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc68:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800dc6c:	021b      	lsls	r3, r3, #8
 800dc6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc72:	431a      	orrs	r2, r3
 800dc74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc76:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800dc7a:	0a1b      	lsrs	r3, r3, #8
 800dc7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dc80:	431a      	orrs	r2, r3
 800dc82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc84:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800dc88:	0e1b      	lsrs	r3, r3, #24
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc90:	f001 fcd2 	bl	800f638 <ulTCPWindowTxAck>
 800dc94:	6238      	str	r0, [r7, #32]

		/* ulTCPWindowTxAck() returns the number of bytes which have been acked,
		starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
		txStream. */
		if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0u ) )
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d020      	beq.n	800dce0 <prvHandleEstablished+0x122>
 800dc9e:	6a3b      	ldr	r3, [r7, #32]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d01d      	beq.n	800dce0 <prvHandleEstablished+0x122>
		{
			/* Just advancing the tail index, 'ulCount' bytes have been
			confirmed, and because there is new space in the txStream, the
			user/owner should be woken up. */
			/* _HT_ : only in case the socket's waiting? */
			if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0u, NULL, ( size_t ) ulCount, pdFALSE ) != 0u )
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800dca8:	2300      	movs	r3, #0
 800dcaa:	9300      	str	r3, [sp, #0]
 800dcac:	6a3b      	ldr	r3, [r7, #32]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	f7fe fa88 	bl	800c1c6 <uxStreamBufferGet>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d011      	beq.n	800dce0 <prvHandleEstablished+0x122>
			{
				pxSocket->xEventBits |= eSOCKET_SEND;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f043 0202 	orr.w	r2, r3, #2
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	601a      	str	r2, [r3, #0]

				#if ipconfigSUPPORT_SELECT_FUNCTION == 1
				{
					if( ( pxSocket->xSelectBits & eSELECT_WRITE ) != 0 )
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dccc:	f003 0302 	and.w	r3, r3, #2
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d005      	beq.n	800dce0 <prvHandleEstablished+0x122>
					{
						pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	601a      	str	r2, [r3, #0]
		}
	}

	/* If this socket has a stream for transmission, add the data to the
	outgoing segment(s). */
	if( pxSocket->u.xTCP.txStream != NULL )
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d002      	beq.n	800dcee <prvHandleEstablished+0x130>
	{
		prvTCPAddTxData( pxSocket );
 800dce8:	68f8      	ldr	r0, [r7, #12]
 800dcea:	f7ff fc9f 	bl	800d62c <prvTCPAddTxData>
	}

	pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800dcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf0:	6a1a      	ldr	r2, [r3, #32]
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) ipTCP_FLAG_FIN ) != 0u ) )
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcfe:	f003 0320 	and.w	r3, r3, #32
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d105      	bne.n	800dd14 <prvHandleEstablished+0x156>
 800dd08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd0c:	f003 0301 	and.w	r3, r3, #1
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d037      	beq.n	800dd84 <prvHandleEstablished+0x1c6>
	{
		/* Peer is requesting to stop, see if we're really finished. */
		xMayClose = pdTRUE;
 800dd14:	2301      	movs	r3, #1
 800dd16:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Checks are only necessary if we haven't sent a FIN yet. */
		if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d11c      	bne.n	800dd62 <prvHandleEstablished+0x1a4>
		{
			/* xTCPWindowTxDone returns true when all Tx queues are empty. */
			bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 800dd28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd2a:	f000 fe9b 	bl	800ea64 <xTCPWindowRxEmpty>
 800dd2e:	61f8      	str	r0, [r7, #28]
			bTxDone     = xTCPWindowTxDone( pxTCPWindow );
 800dd30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd32:	f001 f9db 	bl	800f0ec <xTCPWindowTxDone>
 800dd36:	61b8      	str	r0, [r7, #24]

			if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d002      	beq.n	800dd44 <prvHandleEstablished+0x186>
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d102      	bne.n	800dd4a <prvHandleEstablished+0x18c>
				/* Refusing FIN: Rx incomp 1 optlen 4 tx done 1. */
				FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
					pxSocket->usLocalPort,
					pxSocket->u.xTCP.usRemotePort,
					bRxComplete, bTxDone ) );
				xMayClose = pdFALSE;
 800dd44:	2300      	movs	r3, #0
 800dd46:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd48:	e00b      	b.n	800dd62 <prvHandleEstablished+0x1a4>
			}
			else
			{
				lDistance = ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800dd4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	441a      	add	r2, r3
 800dd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd52:	691b      	ldr	r3, [r3, #16]
 800dd54:	1ad3      	subs	r3, r2, r3
 800dd56:	617b      	str	r3, [r7, #20]

				if( lDistance > 1 )
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	dd01      	ble.n	800dd62 <prvHandleEstablished+0x1a4>
				{
					FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
						lDistance, pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
						pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );

					xMayClose = pdFALSE;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	63bb      	str	r3, [r7, #56]	; 0x38
			FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
				xMayClose, ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber, ulReceiveLength,
				pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) );
		}

		if( xMayClose != pdFALSE )
 800dd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d00d      	beq.n	800dd84 <prvHandleEstablished+0x1c6>
		{
			pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800dd6e:	f043 0320 	orr.w	r3, r3, #32
 800dd72:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f7ff fc7f 	bl	800d680 <prvTCPHandleFin>
 800dd82:	63f8      	str	r0, [r7, #60]	; 0x3c
		}
	}

	if( xMayClose == pdFALSE )
 800dd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d12a      	bne.n	800dde0 <prvHandleEstablished+0x222>
	{
		pxTCPHeader->ucTCPFlags = ipTCP_FLAG_ACK;
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8c:	2210      	movs	r2, #16
 800dd8e:	735a      	strb	r2, [r3, #13]

		if( ulReceiveLength != 0u )
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d016      	beq.n	800ddc4 <prvHandleEstablished+0x206>
		{
			xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	3328      	adds	r3, #40	; 0x28
 800dd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
			/* TCP-offsett equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
			pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	3314      	adds	r3, #20
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	b2da      	uxtb	r2, r3
 800dda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddaa:	731a      	strb	r2, [r3, #12]

			if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d003      	beq.n	800ddc4 <prvHandleEstablished+0x206>
			{
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800ddbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc2:	621a      	str	r2, [r3, #32]
		/* Now get data to be transmitted. */
		/* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
		can not	send-out both TCP options and also a full packet. Sending
		options (SACK) is always more urgent than sending data, which can be
		sent later. */
		if( uxOptionsLength == 0u )
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d10a      	bne.n	800dde0 <prvHandleEstablished+0x222>
		{
			/* prvTCPPrepareSend might allocate a bigger network buffer, if
			necessary. */
			lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800ddca:	683a      	ldr	r2, [r7, #0]
 800ddcc:	68b9      	ldr	r1, [r7, #8]
 800ddce:	68f8      	ldr	r0, [r7, #12]
 800ddd0:	f7ff fa46 	bl	800d260 <prvTCPPrepareSend>
 800ddd4:	6138      	str	r0, [r7, #16]
			if( lSendResult > 0 )
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	dd01      	ble.n	800dde0 <prvHandleEstablished+0x222>
			{
				xSendLength = ( BaseType_t ) lSendResult;
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
	}

	return xSendLength;
 800dde0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3740      	adds	r7, #64	; 0x40
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
	...

0800ddec <prvSendData>:
 * ipconfigUSE_TCP_WIN is defined, and if only an ACK must be sent, it will be
 * checked if it would better be postponed for efficiency.
 */
static BaseType_t prvSendData( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer,
	uint32_t ulReceiveLength, BaseType_t xSendLength )
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b08a      	sub	sp, #40	; 0x28
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	60f8      	str	r0, [r7, #12]
 800ddf4:	60b9      	str	r1, [r7, #8]
 800ddf6:	607a      	str	r2, [r7, #4]
 800ddf8:	603b      	str	r3, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	699b      	ldr	r3, [r3, #24]
 800de00:	623b      	str	r3, [r7, #32]
TCPHeader_t *pxTCPHeader = &pxTCPPacket->xTCPHeader;
 800de02:	6a3b      	ldr	r3, [r7, #32]
 800de04:	3322      	adds	r3, #34	; 0x22
 800de06:	61fb      	str	r3, [r7, #28]
TCPWindow_t *pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	33dc      	adds	r3, #220	; 0xdc
 800de0c:	61bb      	str	r3, [r7, #24]
		const int32_t lMinLength = 0;
	#else
		int32_t lMinLength;
	#endif
#endif
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 800de0e:	69bb      	ldr	r3, [r7, #24]
 800de10:	685a      	ldr	r2, [r3, #4]
									 ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800de12:	69bb      	ldr	r3, [r7, #24]
 800de14:	6919      	ldr	r1, [r3, #16]
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	699b      	ldr	r3, [r3, #24]
 800de1a:	1acb      	subs	r3, r1, r3
	pxSocket->u.xTCP.ulRxCurWinSize = pxTCPWindow->xSize.ulRxWindowLength -
 800de1c:	441a      	add	r2, r3
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	/* Free space in rxStream. */
	if( pxSocket->u.xTCP.rxStream != NULL )
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d006      	beq.n	800de3a <prvSendData+0x4e>
	{
		ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de30:	4618      	mov	r0, r3
 800de32:	f7fe fabd 	bl	800c3b0 <uxStreamBufferFrontSpace>
 800de36:	6278      	str	r0, [r7, #36]	; 0x24
 800de38:	e002      	b.n	800de40 <prvSendData+0x54>
	}
	else
	{
		ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de3e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	pxSocket->u.xTCP.ulRxCurWinSize = FreeRTOS_min_uint32( ulFrontSpace, pxSocket->u.xTCP.ulRxCurWinSize );
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800de46:	4619      	mov	r1, r3
 800de48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de4a:	f7fe fa50 	bl	800c2ee <FreeRTOS_min_uint32>
 800de4e:	4602      	mov	r2, r0
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	/* Set the time-out field, so that we'll be called by the IP-task in case no
	next message will be received. */
	lRxSpace = (int32_t)( pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber );
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	691b      	ldr	r3, [r3, #16]
 800de5e:	1ad3      	subs	r3, r2, r3
 800de60:	617b      	str	r3, [r7, #20]
	#if ipconfigUSE_TCP_WIN == 1
	{

		#if( ipconfigTCP_ACK_EARLIER_PACKET != 0 )
		{
			lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800de68:	005b      	lsls	r3, r3, #1
 800de6a:	613b      	str	r3, [r7, #16]
		}
		#endif /* ipconfigTCP_ACK_EARLIER_PACKET */

		/* In case we're receiving data continuously, we might postpone sending
		an ACK to gain performance. */
		if( ( ulReceiveLength > 0 ) &&							/* Data was sent to this socket. */
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d04f      	beq.n	800df12 <prvSendData+0x126>
 800de72:	697a      	ldr	r2, [r7, #20]
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	429a      	cmp	r2, r3
 800de78:	db4b      	blt.n	800df12 <prvSendData+0x126>
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de84:	b2db      	uxtb	r3, r3
			( lRxSpace >= lMinLength ) &&						/* There is Rx space for more data. */
 800de86:	2b00      	cmp	r3, #0
 800de88:	d143      	bne.n	800df12 <prvSendData+0x126>
			( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&	/* Not in a closure phase. */
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	2b28      	cmp	r3, #40	; 0x28
 800de8e:	d140      	bne.n	800df12 <prvSendData+0x126>
			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
			( xSendLength == ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) ) && /* No Tx data or options to be sent. */
 800de96:	2b05      	cmp	r3, #5
 800de98:	d13b      	bne.n	800df12 <prvSendData+0x126>
			( pxTCPHeader->ucTCPFlags == ipTCP_FLAG_ACK ) )		/* There are no other flags than an ACK. */
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	7b5b      	ldrb	r3, [r3, #13]
			( pxSocket->u.xTCP.ucTCPState == eESTABLISHED ) &&	/* Connection established. */
 800de9e:	2b10      	cmp	r3, #16
 800dea0:	d137      	bne.n	800df12 <prvSendData+0x126>
		{
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d00c      	beq.n	800dec8 <prvSendData+0xdc>
			{
				/* There was still a delayed in queue, delete it. */
				if( pxSocket->u.xTCP.pxAckMessage != 0 )
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d004      	beq.n	800dec0 <prvSendData+0xd4>
				{
					vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800deba:	4618      	mov	r0, r3
 800debc:	f001 fe4e 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
				}

				pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	67da      	str	r2, [r3, #124]	; 0x7c
			}
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dece:	461a      	mov	r2, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d807      	bhi.n	800dee6 <prvSendData+0xfa>
				( lRxSpace < ( int32_t ) ( 2U * pxSocket->u.xTCP.usCurMSS ) ) )	/* There are less than 2 x MSS space in the Rx buffer. */
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dedc:	005b      	lsls	r3, r3, #1
 800dede:	461a      	mov	r2, r3
			if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||	/* Received a small message. */
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	dd04      	ble.n	800def0 <prvSendData+0x104>
			{
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_SHORT_DELAY_MS );
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2202      	movs	r2, #2
 800deea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800deee:	e003      	b.n	800def8 <prvSendData+0x10c>
			else
			{
				/* Normally a delayed ACK should wait 200 ms for a next incoming
				packet.  Only wait 20 ms here to gain performance.  A slow ACK
				for full-size message. */
				pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_MIN_TICKS( DELAYED_ACK_LONGER_DELAY_MS );
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2214      	movs	r2, #20
 800def4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			}

			if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE ) )
 800def8:	4b1a      	ldr	r3, [pc, #104]	; (800df64 <prvSendData+0x178>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b01      	cmp	r3, #1
 800defe:	dd02      	ble.n	800df06 <prvSendData+0x11a>
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df04:	2b17      	cmp	r3, #23
					pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
					xSendLength,
					pxSocket->u.xTCP.usTimeout, lRxSpace ) );
			}

			*ppxNetworkBuffer = NULL;
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	2200      	movs	r2, #0
 800df0a:	601a      	str	r2, [r3, #0]
			xSendLength = 0;
 800df0c:	2300      	movs	r3, #0
 800df0e:	603b      	str	r3, [r7, #0]
 800df10:	e011      	b.n	800df36 <prvSendData+0x14a>
		}
		else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00d      	beq.n	800df36 <prvSendData+0x14a>
		{
			/* As an ACK is not being delayed, remove any earlier delayed ACK
			message. */
			if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	429a      	cmp	r2, r3
 800df24:	d004      	beq.n	800df30 <prvSendData+0x144>
			{
				vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df2a:	4618      	mov	r0, r3
 800df2c:	f001 fe16 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
			}

			pxSocket->u.xTCP.pxAckMessage = NULL;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2200      	movs	r2, #0
 800df34:	67da      	str	r2, [r3, #124]	; 0x7c
		( void ) pxTCPHeader;
		( void ) lRxSpace;
	}
	#endif /* ipconfigUSE_TCP_WIN */

	if( xSendLength != 0 )
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d00d      	beq.n	800df58 <prvSendData+0x16c>
	{
		if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) != pdFALSE ) )
 800df3c:	4b09      	ldr	r3, [pc, #36]	; (800df64 <prvSendData+0x178>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2b01      	cmp	r3, #1
 800df42:	dd02      	ble.n	800df4a <prvSendData+0x15e>
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df48:	2b17      	cmp	r3, #23
				xSendLength ) );
		}

		/* Set the parameter 'xReleaseAfterSend' to the value of
		ipconfigZERO_COPY_TX_DRIVER. */
		prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	6819      	ldr	r1, [r3, #0]
 800df4e:	683a      	ldr	r2, [r7, #0]
 800df50:	2300      	movs	r3, #0
 800df52:	68f8      	ldr	r0, [r7, #12]
 800df54:	f7fe fc16 	bl	800c784 <prvTCPReturnPacket>
			*ppxNetworkBuffer = NULL;
		}
		#endif
	}

	return xSendLength;
 800df58:	683b      	ldr	r3, [r7, #0]
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3728      	adds	r7, #40	; 0x28
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	200047e0 	.word	0x200047e0

0800df68 <prvTCPHandleState>:
 *
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer )
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b08c      	sub	sp, #48	; 0x30
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( (*ppxNetworkBuffer)->pucEthernetBuffer );
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	699b      	ldr	r3, [r3, #24]
 800df78:	62bb      	str	r3, [r7, #40]	; 0x28
TCPHeader_t *pxTCPHeader = &( pxTCPPacket->xTCPHeader );
 800df7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7c:	3322      	adds	r3, #34	; 0x22
 800df7e:	627b      	str	r3, [r7, #36]	; 0x24
BaseType_t xSendLength = 0;
 800df80:	2300      	movs	r3, #0
 800df82:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t ulReceiveLength;	/* Number of bytes contained in the TCP message. */
uint8_t *pucRecvData;
uint32_t ulSequenceNumber = FreeRTOS_ntohl (pxTCPHeader->ulSequenceNumber);
 800df84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	061a      	lsls	r2, r3, #24
 800df8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	021b      	lsls	r3, r3, #8
 800df90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800df94:	431a      	orrs	r2, r3
 800df96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	0a1b      	lsrs	r3, r3, #8
 800df9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dfa0:	431a      	orrs	r2, r3
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	0e1b      	lsrs	r3, r3, #24
 800dfa8:	4313      	orrs	r3, r2
 800dfaa:	623b      	str	r3, [r7, #32]
	/* xOptionsLength: the size of the options to be sent (always a multiple of
	4 bytes)
	1. in the SYN phase, we shall communicate the MSS
	2. in case of a SACK, Selective ACK, ack a segment which comes in
	out-of-order. */
UBaseType_t uxOptionsLength = 0u;
 800dfac:	2300      	movs	r3, #0
 800dfae:	61fb      	str	r3, [r7, #28]
uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800dfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb2:	7b5b      	ldrb	r3, [r3, #13]
 800dfb4:	76fb      	strb	r3, [r7, #27]
TCPWindow_t *pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	33dc      	adds	r3, #220	; 0xdc
 800dfba:	617b      	str	r3, [r7, #20]

	/* First get the length and the position of the received data, if any.
	pucRecvData will point to the first byte of the TCP payload. */
	ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f107 020c 	add.w	r2, r7, #12
 800dfc4:	4611      	mov	r1, r2
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7ff fbff 	bl	800d7ca <prvCheckRxData>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	613b      	str	r3, [r7, #16]

	if( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED )
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dfd6:	2b04      	cmp	r3, #4
 800dfd8:	d90c      	bls.n	800dff4 <prvTCPHandleState+0x8c>
	{
		if ( pxTCPWindow->rx.ulCurrentSequenceNumber == ulSequenceNumber + 1u )
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	691a      	ldr	r2, [r3, #16]
 800dfde:	6a3b      	ldr	r3, [r7, #32]
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d106      	bne.n	800dff4 <prvTCPHandleState+0x8c>
		{
			/* This is most probably a keep-alive message from peer.  Setting
			'bWinChange' doesn't cause a window-size-change, the flag is used
			here to force sending an immediate ACK. */
			pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800dfec:	f043 0301 	orr.w	r3, r3, #1
 800dff0:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
		}
	}

	/* Keep track of the highest sequence number that might be expected within
	this connection. */
	if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0 )
 800dff4:	6a3a      	ldr	r2, [r7, #32]
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	441a      	add	r2, r3
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	699b      	ldr	r3, [r3, #24]
 800dffe:	1ad3      	subs	r3, r2, r3
 800e000:	2b00      	cmp	r3, #0
 800e002:	dd04      	ble.n	800e00e <prvTCPHandleState+0xa6>
	{
		pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800e004:	6a3a      	ldr	r2, [r7, #32]
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	441a      	add	r2, r3
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	619a      	str	r2, [r3, #24]
	}

	/* Storing data may result in a fatal error if malloc() fails. */
	if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 800e00e:	68f9      	ldr	r1, [r7, #12]
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f7ff fc3e 	bl	800d898 <prvStoreRxData>
 800e01c:	4603      	mov	r3, r0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	da03      	bge.n	800e02a <prvTCPHandleState+0xc2>
	{
		xSendLength = -1;
 800e022:	f04f 33ff 	mov.w	r3, #4294967295
 800e026:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e028:	e09e      	b.n	800e168 <prvTCPHandleState+0x200>
	}
	else
	{
		uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4619      	mov	r1, r3
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7ff fca5 	bl	800d980 <prvSetOptions>
 800e036:	61f8      	str	r0, [r7, #28]

		if( ( pxSocket->u.xTCP.ucTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) )
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e03e:	2b04      	cmp	r3, #4
 800e040:	d108      	bne.n	800e054 <prvTCPHandleState+0xec>
 800e042:	7efb      	ldrb	r3, [r7, #27]
 800e044:	f003 031f 	and.w	r3, r3, #31
 800e048:	2b02      	cmp	r3, #2
 800e04a:	d103      	bne.n	800e054 <prvTCPHandleState+0xec>

			/* In eSYN_RECEIVED a simple ACK is expected, but apparently the
			'SYN+ACK' didn't arrive.  Step back to the previous state in which
			a first incoming SYN is handled.  The SYN was counted already so
			decrease it first. */
			vTCPStateChange( pxSocket, eSYN_FIRST );
 800e04c:	2103      	movs	r1, #3
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f7fe ffcb 	bl	800cfea <vTCPStateChange>
		}

		if( ( ( ucTCPFlags & ipTCP_FLAG_FIN ) != 0u ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800e054:	7efb      	ldrb	r3, [r7, #27]
 800e056:	f003 0301 	and.w	r3, r3, #1
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d022      	beq.n	800e0a4 <prvTCPHandleState+0x13c>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e064:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d11a      	bne.n	800e0a4 <prvTCPHandleState+0x13c>
		{
			/* It's the first time a FIN has been received, remember its
			sequence number. */
			pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800e06e:	6a3a      	ldr	r2, [r7, #32]
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	441a      	add	r2, r3
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	615a      	str	r2, [r3, #20]
			pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e07e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e082:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

			/* Was peer the first one to send a FIN? */
			if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e090:	b2db      	uxtb	r3, r3
 800e092:	2b00      	cmp	r3, #0
 800e094:	d106      	bne.n	800e0a4 <prvTCPHandleState+0x13c>
			{
				/* If so, don't send the-last-ACK. */
				pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800e09c:	f043 0302 	orr.w	r3, r3, #2
 800e0a0:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
			}
		}

		switch (pxSocket->u.xTCP.ucTCPState)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e0aa:	2b0b      	cmp	r3, #11
 800e0ac:	d85b      	bhi.n	800e166 <prvTCPHandleState+0x1fe>
 800e0ae:	a201      	add	r2, pc, #4	; (adr r2, 800e0b4 <prvTCPHandleState+0x14c>)
 800e0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b4:	0800e167 	.word	0x0800e167
 800e0b8:	0800e167 	.word	0x0800e167
 800e0bc:	0800e137 	.word	0x0800e137
 800e0c0:	0800e0e5 	.word	0x0800e0e5
 800e0c4:	0800e137 	.word	0x0800e137
 800e0c8:	0800e147 	.word	0x0800e147
 800e0cc:	0800e157 	.word	0x0800e157
 800e0d0:	0800e157 	.word	0x0800e157
 800e0d4:	0800e167 	.word	0x0800e167
 800e0d8:	0800e167 	.word	0x0800e167
 800e0dc:	0800e157 	.word	0x0800e157
 800e0e0:	0800e167 	.word	0x0800e167
							socket. */
			{
				/* A new socket has been created, reply with a SYN+ACK.
				Acknowledge with seq+1 because the SYN is seen as pseudo data
				with len = 1. */
				uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPPacket );
 800e0e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f7fe ff07 	bl	800cefa <prvSetSynAckOptions>
 800e0ec:	61f8      	str	r0, [r7, #28]
				pxTCPHeader->ucTCPFlags = ipTCP_FLAG_SYN | ipTCP_FLAG_ACK;
 800e0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f0:	2212      	movs	r2, #18
 800e0f2:	735a      	strb	r2, [r3, #13]

				xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + uxOptionsLength );
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	3328      	adds	r3, #40	; 0x28
 800e0f8:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
				xOptionsLength is a multiple of 4.  The complete expression is:
				ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + xOptionsLength ) / 4 ) << 4 */
				pxTCPHeader->ucTCPOffset = ( uint8_t )( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	3314      	adds	r3, #20
 800e100:	b2db      	uxtb	r3, r3
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	b2da      	uxtb	r2, r3
 800e106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e108:	731a      	strb	r2, [r3, #12]
				vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800e10a:	2104      	movs	r1, #4
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f7fe ff6c 	bl	800cfea <vTCPStateChange>

				pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1u;
 800e112:	6a3b      	ldr	r3, [r7, #32]
 800e114:	1c5a      	adds	r2, r3, #1
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	619a      	str	r2, [r3, #24]
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	699a      	ldr	r2, [r3, #24]
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	611a      	str	r2, [r3, #16]
				pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1u; /* because we send a TCP_SYN. */
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	69db      	ldr	r3, [r3, #28]
 800e126:	1c5a      	adds	r2, r3, #1
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	635a      	str	r2, [r3, #52]	; 0x34
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	621a      	str	r2, [r3, #32]
			}
			break;
 800e134:	e018      	b.n	800e168 <prvTCPHandleState+0x200>
		case eCONNECT_SYN:	/* (client) also called SYN_SENT: we've just send a
							SYN, expect	a SYN+ACK and send a ACK now. */
			/* Fall through */
		case eSYN_RECEIVED:	/* (server) we've had a SYN, replied with SYN+SCK
							expect a ACK and do nothing. */
			xSendLength = prvHandleSynReceived( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	693a      	ldr	r2, [r7, #16]
 800e13a:	6839      	ldr	r1, [r7, #0]
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f7ff fc7d 	bl	800da3c <prvHandleSynReceived>
 800e142:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800e144:	e010      	b.n	800e168 <prvTCPHandleState+0x200>
		case eESTABLISHED:	/* (server + client) an open connection, data
							received can be	delivered to the user. The normal
							state for the data transfer phase of the connection
							The closing states are also handled here with the
							use of some flags. */
			xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800e146:	69fb      	ldr	r3, [r7, #28]
 800e148:	693a      	ldr	r2, [r7, #16]
 800e14a:	6839      	ldr	r1, [r7, #0]
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f7ff fd36 	bl	800dbbe <prvHandleEstablished>
 800e152:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800e154:	e008      	b.n	800e168 <prvTCPHandleState+0x200>
			/* Fall through */
		case eFIN_WAIT_1:	/* (server + client) waiting for a connection termination request from the remote TCP,
							 * or an acknowledgement of the connection termination request previously sent. */
			/* Fall through */
		case eFIN_WAIT_2:	/* (server + client) waiting for a connection termination request from the remote TCP. */
			xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4619      	mov	r1, r3
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f7ff fa8f 	bl	800d680 <prvTCPHandleFin>
 800e162:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 800e164:	e000      	b.n	800e168 <prvTCPHandleState+0x200>
							a MSL (maximum segment lifetime).]  These states are
							implemented implicitly by settings flags like
							'bFinSent', 'bFinRecv', and 'bFinAcked'. */
			break;
		default:
			break;
 800e166:	bf00      	nop
		}
	}

	if( xSendLength > 0 )
 800e168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	dd06      	ble.n	800e17c <prvTCPHandleState+0x214>
	{
		xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 800e16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e170:	693a      	ldr	r2, [r7, #16]
 800e172:	6839      	ldr	r1, [r7, #0]
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f7ff fe39 	bl	800ddec <prvSendData>
 800e17a:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	return xSendLength;
 800e17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3730      	adds	r7, #48	; 0x30
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop

0800e188 <prvTCPSendReset>:
/*-----------------------------------------------------------*/

static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
	#if( ipconfigIGNORE_UNKNOWN_PACKETS == 0 )
	{
	TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	699b      	ldr	r3, [r3, #24]
 800e194:	60fb      	str	r3, [r7, #12]
	const BaseType_t xSendLength = ( BaseType_t ) ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + 0u );	/* Plus 0 options. */
 800e196:	2328      	movs	r3, #40	; 0x28
 800e198:	60bb      	str	r3, [r7, #8]

		pxTCPPacket->xTCPHeader.ucTCPFlags = ipTCP_FLAG_ACK | ipTCP_FLAG_RST;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2214      	movs	r2, #20
 800e19e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER + 0u ) << 2;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2250      	movs	r2, #80	; 0x50
 800e1a6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		prvTCPReturnPacket( NULL, pxNetworkBuffer, ( uint32_t ) xSendLength, pdFALSE );
 800e1aa:	68ba      	ldr	r2, [r7, #8]
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	6879      	ldr	r1, [r7, #4]
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	f7fe fae7 	bl	800c784 <prvTCPReturnPacket>

	/* Remove compiler warnings if ipconfigIGNORE_UNKNOWN_PACKETS == 1. */
	( void ) pxNetworkBuffer;

	/* The packet was not consumed. */
	return pdFAIL;
 800e1b6:	2300      	movs	r3, #0
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3710      	adds	r7, #16
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <prvSocketSetMSS>:
/*-----------------------------------------------------------*/

static void prvSocketSetMSS( FreeRTOS_Socket_t *pxSocket )
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b084      	sub	sp, #16
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
uint32_t ulMSS = ipconfigTCP_MSS;
 800e1c8:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800e1cc:	60fb      	str	r3, [r7, #12]

	if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0ul )
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1d2:	061a      	lsls	r2, r3, #24
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1d8:	021b      	lsls	r3, r3, #8
 800e1da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e1de:	431a      	orrs	r2, r3
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1e4:	0a1b      	lsrs	r3, r3, #8
 800e1e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e1ea:	431a      	orrs	r2, r3
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1f0:	0e1b      	lsrs	r3, r3, #24
 800e1f2:	431a      	orrs	r2, r3
 800e1f4:	4b0e      	ldr	r3, [pc, #56]	; (800e230 <prvSocketSetMSS+0x70>)
 800e1f6:	695b      	ldr	r3, [r3, #20]
 800e1f8:	405a      	eors	r2, r3
 800e1fa:	4b0e      	ldr	r3, [pc, #56]	; (800e234 <prvSocketSetMSS+0x74>)
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	4013      	ands	r3, r2
 800e200:	2b00      	cmp	r3, #0
 800e202:	d005      	beq.n	800e210 <prvSocketSetMSS+0x50>
	{
		/* Data for this peer will pass through a router, and maybe through
		the internet.  Limit the MSS to 1400 bytes or less. */
		ulMSS = FreeRTOS_min_uint32( ( uint32_t ) REDUCED_MSS_THROUGH_INTERNET, ulMSS );
 800e204:	68f9      	ldr	r1, [r7, #12]
 800e206:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800e20a:	f7fe f870 	bl	800c2ee <FreeRTOS_min_uint32>
 800e20e:	60f8      	str	r0, [r7, #12]
	}

	FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );

	pxSocket->u.xTCP.usInitMSS = pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	b29a      	uxth	r2, r3
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800e226:	bf00      	nop
 800e228:	3710      	adds	r7, #16
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	2000009c 	.word	0x2000009c
 800e234:	20004728 	.word	0x20004728

0800e238 <xProcessReceivedTCPPacket>:
 *		prvTCPSendRepeated()
 *			prvTCPReturnPacket()		// Prepare for returning
 *			xNetworkInterfaceOutput()	// Sends data to the NIC
*/
BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b08c      	sub	sp, #48	; 0x30
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
FreeRTOS_Socket_t *pxSocket;
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	699b      	ldr	r3, [r3, #24]
 800e244:	627b      	str	r3, [r7, #36]	; 0x24
uint16_t ucTCPFlags = pxTCPPacket->xTCPHeader.ucTCPFlags;
 800e246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e248:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e24c:	847b      	strh	r3, [r7, #34]	; 0x22
uint32_t ulLocalIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulDestinationIPAddress );
 800e24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e250:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e254:	061a      	lsls	r2, r3, #24
 800e256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e258:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e25c:	021b      	lsls	r3, r3, #8
 800e25e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e262:	431a      	orrs	r2, r3
 800e264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e266:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e26a:	0a1b      	lsrs	r3, r3, #8
 800e26c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e270:	431a      	orrs	r2, r3
 800e272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e274:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e278:	0e1b      	lsrs	r3, r3, #24
 800e27a:	4313      	orrs	r3, r2
 800e27c:	61fb      	str	r3, [r7, #28]
uint16_t xLocalPort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usDestinationPort );
 800e27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e280:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e282:	b29b      	uxth	r3, r3
 800e284:	021b      	lsls	r3, r3, #8
 800e286:	b21a      	sxth	r2, r3
 800e288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	0a1b      	lsrs	r3, r3, #8
 800e290:	b29b      	uxth	r3, r3
 800e292:	b21b      	sxth	r3, r3
 800e294:	4313      	orrs	r3, r2
 800e296:	b21b      	sxth	r3, r3
 800e298:	837b      	strh	r3, [r7, #26]
uint32_t ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800e29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e2a0:	061a      	lsls	r2, r3, #24
 800e2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e2a8:	021b      	lsls	r3, r3, #8
 800e2aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e2ae:	431a      	orrs	r2, r3
 800e2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b2:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e2b6:	0a1b      	lsrs	r3, r3, #8
 800e2b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e2bc:	431a      	orrs	r2, r3
 800e2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c0:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e2c4:	0e1b      	lsrs	r3, r3, #24
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	617b      	str	r3, [r7, #20]
uint16_t xRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800e2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2cc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	021b      	lsls	r3, r3, #8
 800e2d2:	b21a      	sxth	r2, r3
 800e2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	0a1b      	lsrs	r3, r3, #8
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	b21b      	sxth	r3, r3
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	b21b      	sxth	r3, r3
 800e2e4:	827b      	strh	r3, [r7, #18]
BaseType_t xResult = pdPASS;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Find the destination socket, and if not found: return a socket listing to
	the destination PORT. */
	pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 800e2ea:	8b79      	ldrh	r1, [r7, #26]
 800e2ec:	8a7b      	ldrh	r3, [r7, #18]
 800e2ee:	697a      	ldr	r2, [r7, #20]
 800e2f0:	69f8      	ldr	r0, [r7, #28]
 800e2f2:	f7fd fb91 	bl	800ba18 <pxTCPSocketLookup>
 800e2f6:	62f8      	str	r0, [r7, #44]	; 0x2c

	if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) == pdFALSE ) )
 800e2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d008      	beq.n	800e310 <xProcessReceivedTCPPacket+0xd8>
 800e2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e300:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e304:	4618      	mov	r0, r3
 800e306:	f7fe f8d1 	bl	800c4ac <prvTCPSocketIsActive>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d110      	bne.n	800e332 <xProcessReceivedTCPPacket+0xfa>
		the other party will get a ECONN error.  There are two exceptions:
		1) A packet that already has the RST flag set.
		2) A packet that only has the ACK flag set.
		A packet with only the ACK flag set might be the last ACK in
	 	a three-way hand-shake that closes a connection. */
		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
 800e310:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e312:	f003 031f 	and.w	r3, r3, #31
 800e316:	2b10      	cmp	r3, #16
 800e318:	d008      	beq.n	800e32c <xProcessReceivedTCPPacket+0xf4>
			( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u ) )
 800e31a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e31c:	f003 0304 	and.w	r3, r3, #4
		if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_ACK ) &&
 800e320:	2b00      	cmp	r3, #0
 800e322:	d103      	bne.n	800e32c <xProcessReceivedTCPPacket+0xf4>
		{
			prvTCPSendReset( pxNetworkBuffer );
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	4618      	mov	r0, r3
 800e328:	f7ff ff2e 	bl	800e188 <prvTCPSendReset>
		}

		/* The packet can't be handled. */
		xResult = pdFAIL;
 800e32c:	2300      	movs	r3, #0
 800e32e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e330:	e04d      	b.n	800e3ce <xProcessReceivedTCPPacket+0x196>
	}
	else
	{
		pxSocket->u.xTCP.ucRepCount = 0u;
 800e332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e334:	2200      	movs	r2, #0
 800e336:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

		if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN )
 800e33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e340:	2b01      	cmp	r3, #1
 800e342:	d11c      	bne.n	800e37e <xProcessReceivedTCPPacket+0x146>
		{
			/* The matching socket is in a listening state.  Test if the peer
			has set the SYN flag. */
			if( ( ucTCPFlags & ipTCP_FLAG_CTRL ) != ipTCP_FLAG_SYN )
 800e344:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e346:	f003 031f 	and.w	r3, r3, #31
 800e34a:	2b02      	cmp	r3, #2
 800e34c:	d00b      	beq.n	800e366 <xProcessReceivedTCPPacket+0x12e>
				FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
					prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
				}
				#endif /* ipconfigHAS_DEBUG_PRINTF */

				if( ( ucTCPFlags & ipTCP_FLAG_RST ) == 0u )
 800e34e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e350:	f003 0304 	and.w	r3, r3, #4
 800e354:	2b00      	cmp	r3, #0
 800e356:	d103      	bne.n	800e360 <xProcessReceivedTCPPacket+0x128>
				{
					prvTCPSendReset( pxNetworkBuffer );
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7ff ff14 	bl	800e188 <prvTCPSendReset>
				}
				xResult = pdFAIL;
 800e360:	2300      	movs	r3, #0
 800e362:	62bb      	str	r3, [r7, #40]	; 0x28
 800e364:	e033      	b.n	800e3ce <xProcessReceivedTCPPacket+0x196>
			else
			{
				/* prvHandleListen() will either return a newly created socket
				(if bReuseSocket is false), otherwise it returns the current
				socket which will later get connected. */
				pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	4619      	mov	r1, r3
 800e36a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e36c:	f000 f87e 	bl	800e46c <prvHandleListen>
 800e370:	62f8      	str	r0, [r7, #44]	; 0x2c

				if( pxSocket == NULL )
 800e372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e374:	2b00      	cmp	r3, #0
 800e376:	d12a      	bne.n	800e3ce <xProcessReceivedTCPPacket+0x196>
				{
					xResult = pdFAIL;
 800e378:	2300      	movs	r3, #0
 800e37a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e37c:	e027      	b.n	800e3ce <xProcessReceivedTCPPacket+0x196>
		}	/* if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN ). */
		else
		{
			/* This is not a socket in listening mode. Check for the RST
			flag. */
			if( ( ucTCPFlags & ipTCP_FLAG_RST ) != 0u )
 800e37e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e380:	f003 0304 	and.w	r3, r3, #4
 800e384:	2b00      	cmp	r3, #0
 800e386:	d006      	beq.n	800e396 <xProcessReceivedTCPPacket+0x15e>
			{
				/* The target socket is not in a listening state, any RST packet
				will cause the socket to be closed. */
				FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );
				vTCPStateChange( pxSocket, eCLOSED );
 800e388:	2100      	movs	r1, #0
 800e38a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e38c:	f7fe fe2d 	bl	800cfea <vTCPStateChange>

				/* The packet cannot be handled. */
				xResult = pdFAIL;
 800e390:	2300      	movs	r3, #0
 800e392:	62bb      	str	r3, [r7, #40]	; 0x28
 800e394:	e01b      	b.n	800e3ce <xProcessReceivedTCPPacket+0x196>
			}
			else if( ( ( ucTCPFlags & ipTCP_FLAG_CTRL ) == ipTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= eESTABLISHED ) )
 800e396:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e398:	f003 031f 	and.w	r3, r3, #31
 800e39c:	2b02      	cmp	r3, #2
 800e39e:	d107      	bne.n	800e3b0 <xProcessReceivedTCPPacket+0x178>
 800e3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e3a6:	2b04      	cmp	r3, #4
 800e3a8:	d902      	bls.n	800e3b0 <xProcessReceivedTCPPacket+0x178>
			{
				/* SYN flag while this socket is already connected. */
				FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );

				/* The packet cannot be handled. */
				xResult = pdFAIL;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3ae:	e00e      	b.n	800e3ce <xProcessReceivedTCPPacket+0x196>
			else
			{
				/* Update the copy of the TCP header only (skipping eth and IP
				headers).  It might be used later on, whenever data must be sent
				to the peer. */
				const BaseType_t lOffset = ( BaseType_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER );
 800e3b0:	2322      	movs	r3, #34	; 0x22
 800e3b2:	60fb      	str	r3, [r7, #12]
				memcpy( pxSocket->u.xTCP.xPacket.u.ucLastPacket + lOffset, pxNetworkBuffer->pucEthernetBuffer + lOffset, ipSIZE_OF_TCP_HEADER );
 800e3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b6:	f103 0282 	add.w	r2, r3, #130	; 0x82
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	18d0      	adds	r0, r2, r3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	699a      	ldr	r2, [r3, #24]
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	2214      	movs	r2, #20
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	f002 fb76 	bl	8010aba <memcpy>
			}
		}
	}

	if( xResult != pdFAIL )
 800e3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d046      	beq.n	800e462 <xProcessReceivedTCPPacket+0x22a>
	{
		/* Touch the alive timers because we received a message	for this
		socket. */
		prvTCPTouchSocket( pxSocket );
 800e3d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3d6:	f7fe fde4 	bl	800cfa2 <prvTCPTouchSocket>
		/* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
		then we MUST assume an MSS size of 536 bytes for backward compatibility. */

		/* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
		the number 5 (words) in the higher niblle of the TCP-offset byte. */
		if( ( pxTCPPacket->xTCPHeader.ucTCPOffset & TCP_OFFSET_LENGTH_BITS ) > TCP_OFFSET_STANDARD_LENGTH )
 800e3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3dc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e3e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3e4:	2b50      	cmp	r3, #80	; 0x50
 800e3e6:	d904      	bls.n	800e3f2 <xProcessReceivedTCPPacket+0x1ba>
		{
			prvCheckOptions( pxSocket, pxNetworkBuffer );
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3ee:	f7fe fc73 	bl	800ccd8 <prvCheckOptions>
		}


		#if( ipconfigUSE_TCP_WIN == 1 )
		{
			pxSocket->u.xTCP.ulWindowSize = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usWindow );
 800e3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	021b      	lsls	r3, r3, #8
 800e3fa:	b21a      	sxth	r2, r3
 800e3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e400:	b29b      	uxth	r3, r3
 800e402:	0a1b      	lsrs	r3, r3, #8
 800e404:	b29b      	uxth	r3, r3
 800e406:	b21b      	sxth	r3, r3
 800e408:	4313      	orrs	r3, r2
 800e40a:	b21b      	sxth	r3, r3
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	461a      	mov	r2, r3
 800e410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e412:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			pxSocket->u.xTCP.ulWindowSize =
				( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800e416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e418:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e41c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e41e:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800e422:	fa03 f202 	lsl.w	r2, r3, r2
			pxSocket->u.xTCP.ulWindowSize =
 800e426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e428:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		}
		#endif

		/* In prvTCPHandleState() the incoming messages will be handled
		depending on the current state of the connection. */
		if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 800e42c:	1d3b      	adds	r3, r7, #4
 800e42e:	4619      	mov	r1, r3
 800e430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e432:	f7ff fd99 	bl	800df68 <prvTCPHandleState>
 800e436:	4603      	mov	r3, r0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	dd04      	ble.n	800e446 <xProcessReceivedTCPPacket+0x20e>
		{
			/* prvTCPHandleState() has sent a message, see if there are more to
			be transmitted. */
			#if( ipconfigUSE_TCP_WIN == 1 )
			{
				prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800e43c:	1d3b      	adds	r3, r7, #4
 800e43e:	4619      	mov	r1, r3
 800e440:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e442:	f7fe f972 	bl	800c72a <prvTCPSendRepeated>
			}
			#endif /* ipconfigUSE_TCP_WIN */
		}

		if( pxNetworkBuffer != NULL )
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d005      	beq.n	800e458 <xProcessReceivedTCPPacket+0x220>
		{
			/* We must check if the buffer is unequal to NULL, because the
			socket might keep a reference to it in case a delayed ACK must be
			sent. */
			vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	4618      	mov	r0, r3
 800e450:	f001 fb84 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
			pxNetworkBuffer = NULL;
 800e454:	2300      	movs	r3, #0
 800e456:	607b      	str	r3, [r7, #4]
		}

		/* And finally, calculate when this socket wants to be woken up. */
		prvTCPNextTimeout ( pxSocket );
 800e458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e45a:	f7ff f869 	bl	800d530 <prvTCPNextTimeout>
		/* Return pdPASS to tell that the network buffer is 'consumed'. */
		xResult = pdPASS;
 800e45e:	2301      	movs	r3, #1
 800e460:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* pdPASS being returned means the buffer has been consumed. */
	return xResult;
 800e462:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800e464:	4618      	mov	r0, r3
 800e466:	3730      	adds	r7, #48	; 0x30
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <prvHandleListen>:
/*-----------------------------------------------------------*/

static FreeRTOS_Socket_t *prvHandleListen( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b086      	sub	sp, #24
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
TCPPacket_t * pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	699b      	ldr	r3, [r3, #24]
 800e47a:	613b      	str	r3, [r7, #16]
FreeRTOS_Socket_t *pxReturn;

	/* A pure SYN (without ACK) has come in, create a new socket to answer
	it. */
	if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e482:	f003 0308 	and.w	r3, r3, #8
 800e486:	b2db      	uxtb	r3, r3
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d00c      	beq.n	800e4a6 <prvHandleListen+0x3a>
	{
		/* The flag bReuseSocket indicates that the same instance of the
		listening socket should be used for the connection. */
		pxReturn = pxSocket;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	617b      	str	r3, [r7, #20]
		pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800e496:	f043 0304 	orr.w	r3, r3, #4
 800e49a:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	655a      	str	r2, [r3, #84]	; 0x54
 800e4a4:	e027      	b.n	800e4f6 <prvHandleListen+0x8a>
	}
	else
	{
		/* The socket does not have the bReuseSocket flag set meaning create a
		new socket when a connection comes in. */
		pxReturn = NULL;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	617b      	str	r3, [r7, #20]

		if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d303      	bcc.n	800e4c2 <prvHandleListen+0x56>
			FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
				pxSocket->usLocalPort,
				pxSocket->u.xTCP.usChildCount,
				pxSocket->u.xTCP.usBacklog,
				pxSocket->u.xTCP.usChildCount == 1 ? "" : "ren" ) );
			prvTCPSendReset( pxNetworkBuffer );
 800e4ba:	6838      	ldr	r0, [r7, #0]
 800e4bc:	f7ff fe64 	bl	800e188 <prvTCPSendReset>
 800e4c0:	e019      	b.n	800e4f6 <prvHandleListen+0x8a>
		}
		else
		{
			FreeRTOS_Socket_t *pxNewSocket = (FreeRTOS_Socket_t *)
 800e4c2:	2206      	movs	r2, #6
 800e4c4:	2101      	movs	r1, #1
 800e4c6:	2002      	movs	r0, #2
 800e4c8:	f7fc fc0a 	bl	800ace0 <FreeRTOS_socket>
 800e4cc:	60f8      	str	r0, [r7, #12]
				FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );

			if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d003      	beq.n	800e4dc <prvHandleListen+0x70>
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4da:	d103      	bne.n	800e4e4 <prvHandleListen+0x78>
			{
				FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
				prvTCPSendReset( pxNetworkBuffer );
 800e4dc:	6838      	ldr	r0, [r7, #0]
 800e4de:	f7ff fe53 	bl	800e188 <prvTCPSendReset>
 800e4e2:	e008      	b.n	800e4f6 <prvHandleListen+0x8a>
			}
			else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 800e4e4:	6879      	ldr	r1, [r7, #4]
 800e4e6:	68f8      	ldr	r0, [r7, #12]
 800e4e8:	f000 f870 	bl	800e5cc <prvTCPSocketCopy>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d001      	beq.n	800e4f6 <prvHandleListen+0x8a>
			{
				/* The socket will be connected immediately, no time for the
				owner to setsockopt's, therefore copy properties of the server
				socket to the new socket.  Only the binding might fail (due to
				lack of resources). */
				pxReturn = pxNewSocket;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	617b      	str	r3, [r7, #20]
			}
		}
	}

	if( pxReturn != NULL )
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d060      	beq.n	800e5be <prvHandleListen+0x152>
	{
		pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e500:	b29b      	uxth	r3, r3
 800e502:	021b      	lsls	r3, r3, #8
 800e504:	b21a      	sxth	r2, r3
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	0a1b      	lsrs	r3, r3, #8
 800e50e:	b29b      	uxth	r3, r3
 800e510:	b21b      	sxth	r3, r3
 800e512:	4313      	orrs	r3, r2
 800e514:	b21b      	sxth	r3, r3
 800e516:	b29a      	uxth	r2, r3
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	879a      	strh	r2, [r3, #60]	; 0x3c
		pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e522:	061a      	lsls	r2, r3, #24
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e52a:	021b      	lsls	r3, r3, #8
 800e52c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e530:	431a      	orrs	r2, r3
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e538:	0a1b      	lsrs	r3, r3, #8
 800e53a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e53e:	431a      	orrs	r2, r3
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e546:	0e1b      	lsrs	r3, r3, #24
 800e548:	431a      	orrs	r2, r3
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	639a      	str	r2, [r3, #56]	; 0x38
		pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulNextInitialSequenceNumber;
 800e54e:	4b1e      	ldr	r3, [pc, #120]	; (800e5c8 <prvHandleListen+0x15c>)
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

		/* Here is the SYN action. */
		pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800e55e:	061a      	lsls	r2, r3, #24
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800e566:	021b      	lsls	r3, r3, #8
 800e568:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e56c:	431a      	orrs	r2, r3
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800e574:	0a1b      	lsrs	r3, r3, #8
 800e576:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e57a:	431a      	orrs	r2, r3
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800e582:	0e1b      	lsrs	r3, r3, #24
 800e584:	431a      	orrs	r2, r3
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
		prvSocketSetMSS( pxReturn );
 800e58c:	6978      	ldr	r0, [r7, #20]
 800e58e:	f7ff fe17 	bl	800e1c0 <prvSocketSetMSS>

		prvTCPCreateWindow( pxReturn );
 800e592:	6978      	ldr	r0, [r7, #20]
 800e594:	f7fe faa0 	bl	800cad8 <prvTCPCreateWindow>

		/* It is recommended to increase the ISS for each new connection with a value of 0x102. */
		ulNextInitialSequenceNumber += INITIAL_SEQUENCE_NUMBER_INCREMENT;
 800e598:	4b0b      	ldr	r3, [pc, #44]	; (800e5c8 <prvHandleListen+0x15c>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800e5a0:	4a09      	ldr	r2, [pc, #36]	; (800e5c8 <prvHandleListen+0x15c>)
 800e5a2:	6013      	str	r3, [r2, #0]

		vTCPStateChange( pxReturn, eSYN_FIRST );
 800e5a4:	2103      	movs	r1, #3
 800e5a6:	6978      	ldr	r0, [r7, #20]
 800e5a8:	f7fe fd1f 	bl	800cfea <vTCPStateChange>

		/* Make a copy of the header up to the TCP header.  It is needed later
		on, whenever data must be sent to the peer. */
		memcpy( pxReturn->u.xTCP.xPacket.u.ucLastPacket, pxNetworkBuffer->pucEthernetBuffer, sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	f103 0082 	add.w	r0, r3, #130	; 0x82
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	699b      	ldr	r3, [r3, #24]
 800e5b6:	2246      	movs	r2, #70	; 0x46
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	f002 fa7e 	bl	8010aba <memcpy>
	}
	return pxReturn;
 800e5be:	697b      	ldr	r3, [r7, #20]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3718      	adds	r7, #24
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	200047c4 	.word	0x200047c4

0800e5cc <prvTCPSocketCopy>:

/*
 * Duplicates a socket after a listening socket receives a connection.
 */
static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t *pxNewSocket, FreeRTOS_Socket_t *pxSocket )
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
struct freertos_sockaddr xAddress;

	pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	69da      	ldr	r2, [r3, #28]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	61da      	str	r2, [r3, #28]
	pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	6a1a      	ldr	r2, [r3, #32]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	621a      	str	r2, [r3, #32]
	pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	66da      	str	r2, [r3, #108]	; 0x6c
	pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	671a      	str	r2, [r3, #112]	; 0x70
	pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	665a      	str	r2, [r3, #100]	; 0x64
	pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	669a      	str	r2, [r3, #104]	; 0x68
	pxNewSocket->u.xTCP.uxRxWinSize  = pxSocket->u.xTCP.uxRxWinSize;
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	pxNewSocket->u.xTCP.uxTxWinSize  = pxSocket->u.xTCP.uxTxWinSize;
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
	{
		/* Child socket of listening sockets will inherit the Socket Set
		Otherwise the owner has no chance of including it into the set. */
		if( pxSocket->pxSocketSet )
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d009      	beq.n	800e646 <prvTCPSocketCopy+0x7a>
		{
			pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	629a      	str	r2, [r3, #40]	; 0x28
			pxNewSocket->xSelectBits = pxSocket->xSelectBits | eSELECT_READ | eSELECT_EXCEPT;
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e63e:	f043 0205 	orr.w	r2, r3, #5
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	#endif /* ipconfigSUPPORT_SELECT_FUNCTION */

	/* And bind it to the same local port as its parent. */
	xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 800e646:	4b1b      	ldr	r3, [pc, #108]	; (800e6b4 <prvTCPSocketCopy+0xe8>)
 800e648:	695b      	ldr	r3, [r3, #20]
 800e64a:	60fb      	str	r3, [r7, #12]
	xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e650:	021b      	lsls	r3, r3, #8
 800e652:	b21a      	sxth	r2, r3
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e658:	0a1b      	lsrs	r3, r3, #8
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	b21b      	sxth	r3, r3
 800e65e:	4313      	orrs	r3, r2
 800e660:	b21b      	sxth	r3, r3
 800e662:	b29b      	uxth	r3, r3
 800e664:	817b      	strh	r3, [r7, #10]
		orphan temporarily.  Once this socket is really connected, the owner of
		the server socket will be notified. */

		/* When bPassQueued is true, the socket is an orphan until it gets
		connected. */
		pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800e66c:	f043 0304 	orr.w	r3, r3, #4
 800e670:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
		pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	683a      	ldr	r2, [r7, #0]
 800e678:	655a      	str	r2, [r3, #84]	; 0x54
			pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
		}
	}
	#endif

	pxSocket->u.xTCP.usChildCount++;
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e680:	3301      	adds	r3, #1
 800e682:	b29a      	uxth	r2, r3
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
		pxSocket->u.xTCP.usChildCount,
		pxSocket->u.xTCP.usBacklog,
		pxSocket->u.xTCP.usChildCount == 1u ? "" : "ren" ) );

	/* Now bind the child socket to the same port as the listening socket. */
	if( vSocketBind ( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800e68a:	f107 0108 	add.w	r1, r7, #8
 800e68e:	2301      	movs	r3, #1
 800e690:	2208      	movs	r2, #8
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f7fc fd86 	bl	800b1a4 <vSocketBind>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d004      	beq.n	800e6a8 <prvTCPSocketCopy+0xdc>
	{
		FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
		vSocketClose( pxNewSocket );
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7fc fe36 	bl	800b310 <vSocketClose>
		return pdFALSE;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	e000      	b.n	800e6aa <prvTCPSocketCopy+0xde>
	}

	return pdTRUE;
 800e6a8:	2301      	movs	r3, #1
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3710      	adds	r7, #16
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	2000009c 	.word	0x2000009c

0800e6b8 <xTCPCheckNewClient>:
/*
 * In the API accept(), the user asks is there is a new client?  As API's can
 * not walk through the xBoundTCPSocketsList the IP-task will do this.
 */
BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t *pxSocket )
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b087      	sub	sp, #28
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
TickType_t xLocalPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e6c4:	021b      	lsls	r3, r3, #8
 800e6c6:	b21a      	sxth	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e6cc:	0a1b      	lsrs	r3, r3, #8
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	b21b      	sxth	r3, r3
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	b21b      	sxth	r3, r3
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	60fb      	str	r3, [r7, #12]
ListItem_t *pxIterator;
FreeRTOS_Socket_t *pxFound;
BaseType_t xResult = pdFALSE;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	613b      	str	r3, [r7, #16]

	/* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
	who has access. */
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800e6de:	4b16      	ldr	r3, [pc, #88]	; (800e738 <xTCPCheckNewClient+0x80>)
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	617b      	str	r3, [r7, #20]
 800e6e4:	e01d      	b.n	800e722 <xTCPCheckNewClient+0x6a>
		pxIterator != ( ListItem_t * ) listGET_END_MARKER( &xBoundTCPSocketsList );
		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
	{
		if( listGET_LIST_ITEM_VALUE( pxIterator ) == xLocalPort )
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d115      	bne.n	800e71c <xTCPCheckNewClient+0x64>
		{
			pxFound = ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	68db      	ldr	r3, [r3, #12]
 800e6f4:	60bb      	str	r3, [r7, #8]
			if( ( pxFound->ucProtocol == FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e6fc:	2b06      	cmp	r3, #6
 800e6fe:	d10d      	bne.n	800e71c <xTCPCheckNewClient+0x64>
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e706:	f003 0302 	and.w	r3, r3, #2
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d005      	beq.n	800e71c <xTCPCheckNewClient+0x64>
			{
				pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	68ba      	ldr	r2, [r7, #8]
 800e714:	655a      	str	r2, [r3, #84]	; 0x54
				FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
				xResult = pdTRUE;
 800e716:	2301      	movs	r3, #1
 800e718:	613b      	str	r3, [r7, #16]
				break;
 800e71a:	e006      	b.n	800e72a <xTCPCheckNewClient+0x72>
		pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator ) )
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	617b      	str	r3, [r7, #20]
	for( pxIterator = ( ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	4a05      	ldr	r2, [pc, #20]	; (800e73c <xTCPCheckNewClient+0x84>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d1dd      	bne.n	800e6e6 <xTCPCheckNewClient+0x2e>
			}
		}
	}
	return xResult;
 800e72a:	693b      	ldr	r3, [r7, #16]
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	371c      	adds	r7, #28
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr
 800e738:	20005888 	.word	0x20005888
 800e73c:	20005890 	.word	0x20005890

0800e740 <FreeRTOS_min_int32>:
	static portINLINE int32_t  FreeRTOS_min_int32  (int32_t  a, int32_t  b) { return a <= b ? a : b; }
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	4293      	cmp	r3, r2
 800e750:	bfa8      	it	ge
 800e752:	4613      	movge	r3, r2
 800e754:	4618      	mov	r0, r3
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <FreeRTOS_min_uint32>:
	static portINLINE uint32_t FreeRTOS_min_uint32 (uint32_t a, uint32_t b) { return a <= b ? a : b; }
 800e760:	b480      	push	{r7}
 800e762:	b083      	sub	sp, #12
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	4293      	cmp	r3, r2
 800e770:	bf28      	it	cs
 800e772:	4613      	movcs	r3, r2
 800e774:	4618      	mov	r0, r3
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr

0800e780 <xSequenceLessThanOrEqual>:

#if( ipconfigUSE_TCP_WIN == 1 )
	/* Some 32-bit arithmetic: comparing sequence numbers */
	static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a, uint32_t b )
	{
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	6039      	str	r1, [r7, #0]
		/* Test if a <= b
		Return true if the unsigned subtraction of (b-a) doesn't generate an
		arithmetic overflow. */
		return ( ( b - a ) & 0x80000000UL ) == 0UL;
 800e78a:	683a      	ldr	r2, [r7, #0]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	1ad3      	subs	r3, r2, r3
 800e790:	43db      	mvns	r3, r3
 800e792:	0fdb      	lsrs	r3, r3, #31
 800e794:	b2db      	uxtb	r3, r3
	}
 800e796:	4618      	mov	r0, r3
 800e798:	370c      	adds	r7, #12
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr

0800e7a2 <xSequenceLessThan>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE BaseType_t xSequenceLessThan( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceLessThan( uint32_t a, uint32_t b )
	{
 800e7a2:	b480      	push	{r7}
 800e7a4:	b083      	sub	sp, #12
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	6078      	str	r0, [r7, #4]
 800e7aa:	6039      	str	r1, [r7, #0]
		/* Test if a < b */
		return ( ( b - a - 1UL ) & 0x80000000UL ) == 0UL;
 800e7ac:	683a      	ldr	r2, [r7, #0]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	1ad3      	subs	r3, r2, r3
 800e7b2:	3b01      	subs	r3, #1
 800e7b4:	43db      	mvns	r3, r3
 800e7b6:	0fdb      	lsrs	r3, r3, #31
 800e7b8:	b2db      	uxtb	r3, r3
	}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	370c      	adds	r7, #12
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c4:	4770      	bx	lr

0800e7c6 <xSequenceGreaterThan>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a, uint32_t b );
	static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a, uint32_t b )
	{
 800e7c6:	b480      	push	{r7}
 800e7c8:	b083      	sub	sp, #12
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]
 800e7ce:	6039      	str	r1, [r7, #0]
		/* Test if a > b */
		return ( ( a - b - 1UL ) & 0x80000000UL ) == 0UL;
 800e7d0:	687a      	ldr	r2, [r7, #4]
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	1ad3      	subs	r3, r2, r3
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	43db      	mvns	r3, r3
 800e7da:	0fdb      	lsrs	r3, r3, #31
 800e7dc:	b2db      	uxtb	r3, r3
	}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	370c      	adds	r7, #12
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e8:	4770      	bx	lr

0800e7ea <xSequenceGreaterThanOrEqual>:
#endif /* ipconfigUSE_TCP_WIN */

/*-----------------------------------------------------------*/
static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a, uint32_t b );
static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a, uint32_t b )
{
 800e7ea:	b480      	push	{r7}
 800e7ec:	b083      	sub	sp, #12
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	6078      	str	r0, [r7, #4]
 800e7f2:	6039      	str	r1, [r7, #0]
	/* Test if a >= b */
	return ( ( a - b ) & 0x80000000UL ) == 0UL;
 800e7f4:	687a      	ldr	r2, [r7, #4]
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	1ad3      	subs	r3, r2, r3
 800e7fa:	43db      	mvns	r3, r3
 800e7fc:	0fdb      	lsrs	r3, r3, #31
 800e7fe:	b2db      	uxtb	r3, r3
}
 800e800:	4618      	mov	r0, r3
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <vListInsertFifo>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )
	static portINLINE void vListInsertFifo( List_t * const pxList, ListItem_t * const pxNewListItem );
	static portINLINE void vListInsertFifo( List_t * const pxList, ListItem_t * const pxNewListItem )
	{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	6039      	str	r1, [r7, #0]
		vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	3308      	adds	r3, #8
 800e81a:	461a      	mov	r2, r3
 800e81c:	6839      	ldr	r1, [r7, #0]
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 f81f 	bl	800e862 <vListInsertGeneric>
	}
 800e824:	bf00      	nop
 800e826:	3708      	adds	r7, #8
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <vTCPTimerSet>:
#endif
/*-----------------------------------------------------------*/

static portINLINE void vTCPTimerSet( TCPTimer_t *pxTimer );
static portINLINE void vTCPTimerSet( TCPTimer_t *pxTimer )
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
	pxTimer->ulBorn = xTaskGetTickCount ( );
 800e834:	f7f8 ff5a 	bl	80076ec <xTaskGetTickCount>
 800e838:	4602      	mov	r2, r0
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	601a      	str	r2, [r3, #0]
}
 800e83e:	bf00      	nop
 800e840:	3708      	adds	r7, #8
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}

0800e846 <ulTimerGetAge>:
/*-----------------------------------------------------------*/

static portINLINE uint32_t ulTimerGetAge( TCPTimer_t *pxTimer );
static portINLINE uint32_t ulTimerGetAge( TCPTimer_t *pxTimer )
{
 800e846:	b580      	push	{r7, lr}
 800e848:	b082      	sub	sp, #8
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
	return ( ( xTaskGetTickCount() - pxTimer->ulBorn ) * portTICK_PERIOD_MS );
 800e84e:	f7f8 ff4d 	bl	80076ec <xTaskGetTickCount>
 800e852:	4602      	mov	r2, r0
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	1ad3      	subs	r3, r2, r3
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3708      	adds	r7, #8
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}

0800e862 <vListInsertGeneric>:
preceded by a prototype. Later this prototype will be located in list.h? */

extern void vListInsertGeneric( List_t * const pxList, ListItem_t * const pxNewListItem, MiniListItem_t * const pxWhere );

void vListInsertGeneric( List_t * const pxList, ListItem_t * const pxNewListItem, MiniListItem_t * const pxWhere )
{
 800e862:	b480      	push	{r7}
 800e864:	b085      	sub	sp, #20
 800e866:	af00      	add	r7, sp, #0
 800e868:	60f8      	str	r0, [r7, #12]
 800e86a:	60b9      	str	r1, [r7, #8]
 800e86c:	607a      	str	r2, [r7, #4]
	/* Insert a new list item into pxList, it does not sort the list,
	but it puts the item just before xListEnd, so it will be the last item
	returned by listGET_HEAD_ENTRY() */
	pxNewListItem->pxNext = (struct xLIST_ITEM * configLIST_VOLATILE)pxWhere;
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	689a      	ldr	r2, [r3, #8]
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	609a      	str	r2, [r3, #8]
	pxWhere->pxPrevious->pxNext = pxNewListItem;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	689b      	ldr	r3, [r3, #8]
 800e880:	68ba      	ldr	r2, [r7, #8]
 800e882:	605a      	str	r2, [r3, #4]
	pxWhere->pxPrevious = pxNewListItem;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	68ba      	ldr	r2, [r7, #8]
 800e888:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	1c5a      	adds	r2, r3, #1
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	601a      	str	r2, [r3, #0]
}
 800e89a:	bf00      	nop
 800e89c:	3714      	adds	r7, #20
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a4:	4770      	bx	lr
	...

0800e8a8 <prvCreateSectors>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvCreateSectors( void )
	{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
	BaseType_t xIndex, xReturn;

		/* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

		vListInitialise( &xSegmentList );
 800e8ae:	4824      	ldr	r0, [pc, #144]	; (800e940 <prvCreateSectors+0x98>)
 800e8b0:	f7f7 f9f3 	bl	8005c9a <vListInitialise>
		xTCPSegments = ( TCPSegment_t * ) pvPortMallocLarge( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800e8b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e8b8:	f7f7 fce2 	bl	8006280 <pvPortMalloc>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	4b21      	ldr	r3, [pc, #132]	; (800e944 <prvCreateSectors+0x9c>)
 800e8c0:	601a      	str	r2, [r3, #0]

		if( xTCPSegments == NULL )
 800e8c2:	4b20      	ldr	r3, [pc, #128]	; (800e944 <prvCreateSectors+0x9c>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d102      	bne.n	800e8d0 <prvCreateSectors+0x28>
		{
			FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %lu failed\n",
				ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );

			xReturn = pdFAIL;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	603b      	str	r3, [r7, #0]
 800e8ce:	e032      	b.n	800e936 <prvCreateSectors+0x8e>
		}
		else
		{
			/* Clear the allocated space. */
			memset( xTCPSegments, '\0', ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800e8d0:	4b1c      	ldr	r3, [pc, #112]	; (800e944 <prvCreateSectors+0x9c>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e8d8:	2100      	movs	r1, #0
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f002 f912 	bl	8010b04 <memset>

			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	607b      	str	r3, [r7, #4]
 800e8e4:	e022      	b.n	800e92c <prvCreateSectors+0x84>
			{
				/* Could call vListInitialiseItem here but all data has been
				nulled already.  Set the owner to a segment descriptor. */
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xListItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 800e8e6:	4b17      	ldr	r3, [pc, #92]	; (800e944 <prvCreateSectors+0x9c>)
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	019b      	lsls	r3, r3, #6
 800e8ee:	4413      	add	r3, r2
 800e8f0:	4a14      	ldr	r2, [pc, #80]	; (800e944 <prvCreateSectors+0x9c>)
 800e8f2:	6811      	ldr	r1, [r2, #0]
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	0192      	lsls	r2, r2, #6
 800e8f8:	440a      	add	r2, r1
 800e8fa:	639a      	str	r2, [r3, #56]	; 0x38
				listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void* ) &( xTCPSegments[ xIndex ] ) );
 800e8fc:	4b11      	ldr	r3, [pc, #68]	; (800e944 <prvCreateSectors+0x9c>)
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	019b      	lsls	r3, r3, #6
 800e904:	4413      	add	r3, r2
 800e906:	4a0f      	ldr	r2, [pc, #60]	; (800e944 <prvCreateSectors+0x9c>)
 800e908:	6811      	ldr	r1, [r2, #0]
 800e90a:	687a      	ldr	r2, [r7, #4]
 800e90c:	0192      	lsls	r2, r2, #6
 800e90e:	440a      	add	r2, r1
 800e910:	625a      	str	r2, [r3, #36]	; 0x24

				/* And add it to the pool of available segments */
				vListInsertFifo( &xSegmentList, &( xTCPSegments[xIndex].xListItem ) );
 800e912:	4b0c      	ldr	r3, [pc, #48]	; (800e944 <prvCreateSectors+0x9c>)
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	019b      	lsls	r3, r3, #6
 800e91a:	4413      	add	r3, r2
 800e91c:	332c      	adds	r3, #44	; 0x2c
 800e91e:	4619      	mov	r1, r3
 800e920:	4807      	ldr	r0, [pc, #28]	; (800e940 <prvCreateSectors+0x98>)
 800e922:	f7ff ff73 	bl	800e80c <vListInsertFifo>
			for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	3301      	adds	r3, #1
 800e92a:	607b      	str	r3, [r7, #4]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2b3f      	cmp	r3, #63	; 0x3f
 800e930:	ddd9      	ble.n	800e8e6 <prvCreateSectors+0x3e>
			}

			xReturn = pdPASS;
 800e932:	2301      	movs	r3, #1
 800e934:	603b      	str	r3, [r7, #0]
		}

		return xReturn;
 800e936:	683b      	ldr	r3, [r7, #0]
	}
 800e938:	4618      	mov	r0, r3
 800e93a:	3708      	adds	r7, #8
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	200047cc 	.word	0x200047cc
 800e944:	200047c8 	.word	0x200047c8

0800e948 <xTCPWindowRxFind>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxFind( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 800e948:	b480      	push	{r7}
 800e94a:	b087      	sub	sp, #28
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
	const ListItem_t *pxIterator;
	const MiniListItem_t* pxEnd;
	TCPSegment_t *pxSegment, *pxReturn = NULL;
 800e952:	2300      	movs	r3, #0
 800e954:	613b      	str	r3, [r7, #16]

		/* Find a segment with a given sequence number in the list of received
		segments. */

		pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xRxSegments );
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	33ac      	adds	r3, #172	; 0xac
 800e95a:	60fb      	str	r3, [r7, #12]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	617b      	str	r3, [r7, #20]
 800e962:	e00d      	b.n	800e980 <xTCPWindowRxFind+0x38>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	60bb      	str	r3, [r7, #8]

			if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	429a      	cmp	r2, r3
 800e972:	d102      	bne.n	800e97a <xTCPWindowRxFind+0x32>
			{
				pxReturn = pxSegment;
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	613b      	str	r3, [r7, #16]
				break;
 800e978:	e006      	b.n	800e988 <xTCPWindowRxFind+0x40>
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	617b      	str	r3, [r7, #20]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800e980:	697a      	ldr	r2, [r7, #20]
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	429a      	cmp	r2, r3
 800e986:	d1ed      	bne.n	800e964 <xTCPWindowRxFind+0x1c>
			}
		}

		return pxReturn;
 800e988:	693b      	ldr	r3, [r7, #16]
	}
 800e98a:	4618      	mov	r0, r3
 800e98c:	371c      	adds	r7, #28
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr
	...

0800e998 <xTCPWindowNew>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowNew( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, int32_t lCount, BaseType_t xIsForRx )
	{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b088      	sub	sp, #32
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
 800e9a4:	603b      	str	r3, [r7, #0]
	TCPSegment_t *pxSegment;
	ListItem_t * pxItem;

		/* Allocate a new segment.  The socket will borrow all segments from a
		common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
		if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 800e9a6:	4b2e      	ldr	r3, [pc, #184]	; (800ea60 <xTCPWindowNew+0xc8>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d101      	bne.n	800e9b2 <xTCPWindowNew+0x1a>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e000      	b.n	800e9b4 <xTCPWindowNew+0x1c>
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d002      	beq.n	800e9be <xTCPWindowNew+0x26>
		{
			/* If the TCP-stack runs out of segments, you might consider
			increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
			FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", xIsForRx ? 'R' : 'T' ) );
			pxSegment = NULL;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	61fb      	str	r3, [r7, #28]
 800e9bc:	e04a      	b.n	800ea54 <xTCPWindowNew+0xbc>
		}
		else
		{
			/* Pop the item at the head of the list.  Semaphore protection is
			not required as only the IP task will call these functions.  */
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 800e9be:	4b28      	ldr	r3, [pc, #160]	; (800ea60 <xTCPWindowNew+0xc8>)
 800e9c0:	68db      	ldr	r3, [r3, #12]
 800e9c2:	61bb      	str	r3, [r7, #24]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800e9c4:	69bb      	ldr	r3, [r7, #24]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	61fb      	str	r3, [r7, #28]

			configASSERT( pxItem != NULL );
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d109      	bne.n	800e9e4 <xTCPWindowNew+0x4c>
 800e9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d4:	f383 8811 	msr	BASEPRI, r3
 800e9d8:	f3bf 8f6f 	isb	sy
 800e9dc:	f3bf 8f4f 	dsb	sy
 800e9e0:	617b      	str	r3, [r7, #20]
 800e9e2:	e7fe      	b.n	800e9e2 <xTCPWindowNew+0x4a>
			configASSERT( pxSegment != NULL );
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d109      	bne.n	800e9fe <xTCPWindowNew+0x66>
 800e9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ee:	f383 8811 	msr	BASEPRI, r3
 800e9f2:	f3bf 8f6f 	isb	sy
 800e9f6:	f3bf 8f4f 	dsb	sy
 800e9fa:	613b      	str	r3, [r7, #16]
 800e9fc:	e7fe      	b.n	800e9fc <xTCPWindowNew+0x64>

			/* Remove the item from xSegmentList. */
			uxListRemove( pxItem );
 800e9fe:	69b8      	ldr	r0, [r7, #24]
 800ea00:	f7f7 f9d5 	bl	8005dae <uxListRemove>

			/* Add it to either the connections' Rx or Tx queue. */
			vListInsertFifo( xIsForRx ? &pxWindow->xRxSegments : &pxWindow->xTxSegments, pxItem );
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d002      	beq.n	800ea10 <xTCPWindowNew+0x78>
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	33a4      	adds	r3, #164	; 0xa4
 800ea0e:	e001      	b.n	800ea14 <xTCPWindowNew+0x7c>
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	3390      	adds	r3, #144	; 0x90
 800ea14:	69b9      	ldr	r1, [r7, #24]
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7ff fef8 	bl	800e80c <vListInsertFifo>

			/* And set the segment's timer to zero */
			vTCPTimerSet( &pxSegment->xTransmitTimer );
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	3310      	adds	r3, #16
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7ff ff03 	bl	800e82c <vTCPTimerSet>

			pxSegment->u.ulFlags = 0;
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	615a      	str	r2, [r3, #20]
			pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 );
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	bf14      	ite	ne
 800ea32:	2301      	movne	r3, #1
 800ea34:	2300      	moveq	r3, #0
 800ea36:	b2d9      	uxtb	r1, r3
 800ea38:	69fa      	ldr	r2, [r7, #28]
 800ea3a:	7d93      	ldrb	r3, [r2, #22]
 800ea3c:	f361 0382 	bfi	r3, r1, #2, #1
 800ea40:	7593      	strb	r3, [r2, #22]
			pxSegment->lMaxLength = lCount;
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	605a      	str	r2, [r3, #4]
			pxSegment->lDataLength = lCount;
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	609a      	str	r2, [r3, #8]
			pxSegment->ulSequenceNumber = ulSequenceNumber;
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	68ba      	ldr	r2, [r7, #8]
 800ea52:	601a      	str	r2, [r3, #0]
				}
			}
			#endif /* ipconfigHAS_DEBUG_PRINTF */
		}

		return pxSegment;
 800ea54:	69fb      	ldr	r3, [r7, #28]
	}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3720      	adds	r7, #32
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	200047cc 	.word	0x200047cc

0800ea64 <xTCPWindowRxEmpty>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowRxEmpty( TCPWindow_t *pxWindow )
	{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
		/* When the peer has a close request (FIN flag), the driver will check
		if there are missing packets in the Rx-queue.  It will accept the
		closure of the connection if both conditions are true:
		  - the Rx-queue is empty
		  - the highest Rx sequence number has been ACK'ed */
		if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d002      	beq.n	800ea7c <xTCPWindowRxEmpty+0x18>
		{
			/* Rx data has been stored while earlier packets were missing. */
			xReturn = pdFALSE;
 800ea76:	2300      	movs	r3, #0
 800ea78:	60fb      	str	r3, [r7, #12]
 800ea7a:	e00f      	b.n	800ea9c <xTCPWindowRxEmpty+0x38>
		}
		else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	691a      	ldr	r2, [r3, #16]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	699b      	ldr	r3, [r3, #24]
 800ea84:	4619      	mov	r1, r3
 800ea86:	4610      	mov	r0, r2
 800ea88:	f7ff feaf 	bl	800e7ea <xSequenceGreaterThanOrEqual>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d002      	beq.n	800ea98 <xTCPWindowRxEmpty+0x34>
		{
			/* No Rx packets are being stored and the highest sequence number
			that has been received has been ACKed. */
			xReturn = pdTRUE;
 800ea92:	2301      	movs	r3, #1
 800ea94:	60fb      	str	r3, [r7, #12]
 800ea96:	e001      	b.n	800ea9c <xTCPWindowRxEmpty+0x38>
		else
		{
			FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
				( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
				( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
			xReturn = pdFALSE;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
	}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3710      	adds	r7, #16
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}

0800eaa6 <xTCPWindowGetHead>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowGetHead( List_t *pxList )
	{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b084      	sub	sp, #16
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
	TCPSegment_t *pxSegment;
	ListItem_t * pxItem;

		/* Detaches and returns the head of a queue. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d101      	bne.n	800eaba <xTCPWindowGetHead+0x14>
 800eab6:	2301      	movs	r3, #1
 800eab8:	e000      	b.n	800eabc <xTCPWindowGetHead+0x16>
 800eaba:	2300      	movs	r3, #0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d002      	beq.n	800eac6 <xTCPWindowGetHead+0x20>
		{
			pxSegment = NULL;
 800eac0:	2300      	movs	r3, #0
 800eac2:	60fb      	str	r3, [r7, #12]
 800eac4:	e008      	b.n	800ead8 <xTCPWindowGetHead+0x32>
		}
		else
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	68db      	ldr	r3, [r3, #12]
 800eaca:	60bb      	str	r3, [r7, #8]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	68db      	ldr	r3, [r3, #12]
 800ead0:	60fb      	str	r3, [r7, #12]

			uxListRemove( pxItem );
 800ead2:	68b8      	ldr	r0, [r7, #8]
 800ead4:	f7f7 f96b 	bl	8005dae <uxListRemove>
		}

		return pxSegment;
 800ead8:	68fb      	ldr	r3, [r7, #12]
	}
 800eada:	4618      	mov	r0, r3
 800eadc:	3710      	adds	r7, #16
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}

0800eae2 <xTCPWindowPeekHead>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowPeekHead( List_t *pxList )
	{
 800eae2:	b480      	push	{r7}
 800eae4:	b085      	sub	sp, #20
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
	ListItem_t *pxItem;
	TCPSegment_t *pxReturn;

		/* Returns the head of a queue but it won't be detached. */
		if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d101      	bne.n	800eaf6 <xTCPWindowPeekHead+0x14>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e000      	b.n	800eaf8 <xTCPWindowPeekHead+0x16>
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d002      	beq.n	800eb02 <xTCPWindowPeekHead+0x20>
		{
			pxReturn = NULL;
 800eafc:	2300      	movs	r3, #0
 800eafe:	60fb      	str	r3, [r7, #12]
 800eb00:	e005      	b.n	800eb0e <xTCPWindowPeekHead+0x2c>
		}
		else
		{
			pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	68db      	ldr	r3, [r3, #12]
 800eb06:	60bb      	str	r3, [r7, #8]
			pxReturn = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem );
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	68db      	ldr	r3, [r3, #12]
 800eb0c:	60fb      	str	r3, [r7, #12]
		}

		return pxReturn;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
	}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3714      	adds	r7, #20
 800eb14:	46bd      	mov	sp, r7
 800eb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1a:	4770      	bx	lr

0800eb1c <vTCPWindowFree>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static void vTCPWindowFree( TCPSegment_t *pxSegment )
	{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
		/*  Free entry pxSegment because it's not used any more.  The ownership
		will be passed back to the segment pool.

		Unlink it from one of the queues, if any. */
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d004      	beq.n	800eb36 <vTCPWindowFree+0x1a>
		{
			uxListRemove( &( pxSegment->xQueueItem ) );
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	3318      	adds	r3, #24
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7f7 f93c 	bl	8005dae <uxListRemove>
		}

		pxSegment->ulSequenceNumber = 0u;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	601a      	str	r2, [r3, #0]
		pxSegment->lDataLength = 0l;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	609a      	str	r2, [r3, #8]
		pxSegment->u.ulFlags = 0u;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2200      	movs	r2, #0
 800eb46:	615a      	str	r2, [r3, #20]

		/* Take it out of xRxSegments/xTxSegments */
		if( listLIST_ITEM_CONTAINER( &( pxSegment->xListItem ) ) != NULL )
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d004      	beq.n	800eb5a <vTCPWindowFree+0x3e>
		{
			uxListRemove( &( pxSegment->xListItem ) );
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	332c      	adds	r3, #44	; 0x2c
 800eb54:	4618      	mov	r0, r3
 800eb56:	f7f7 f92a 	bl	8005dae <uxListRemove>
		}

		/* Return it to xSegmentList */
		vListInsertFifo( &xSegmentList, &( pxSegment->xListItem ) );
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	332c      	adds	r3, #44	; 0x2c
 800eb5e:	4619      	mov	r1, r3
 800eb60:	4803      	ldr	r0, [pc, #12]	; (800eb70 <vTCPWindowFree+0x54>)
 800eb62:	f7ff fe53 	bl	800e80c <vListInsertFifo>
	}
 800eb66:	bf00      	nop
 800eb68:	3708      	adds	r7, #8
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	200047cc 	.word	0x200047cc

0800eb74 <vTCPWindowDestroy>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	void vTCPWindowDestroy( TCPWindow_t *pxWindow )
	{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b086      	sub	sp, #24
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]

		/*  Destroy a window.  A TCP window doesn't serve any more.  Return all
		owned segments to the pool.  In order to save code, it will make 2 rounds,
		one to remove the segments from xRxSegments, and a second round to clear
		xTxSegments*/
		for( xRound = 0; xRound < 2; xRound++ )
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	613b      	str	r3, [r7, #16]
 800eb80:	e022      	b.n	800ebc8 <vTCPWindowDestroy+0x54>
		{
			if( xRound != 0 )
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d003      	beq.n	800eb90 <vTCPWindowDestroy+0x1c>
			{
				pxSegments = &( pxWindow->xRxSegments );
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	33a4      	adds	r3, #164	; 0xa4
 800eb8c:	617b      	str	r3, [r7, #20]
 800eb8e:	e002      	b.n	800eb96 <vTCPWindowDestroy+0x22>
			}
			else
			{
				pxSegments = &( pxWindow->xTxSegments );
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	3390      	adds	r3, #144	; 0x90
 800eb94:	617b      	str	r3, [r7, #20]
			}

			if( listLIST_IS_INITIALISED( pxSegments ) != pdFALSE )
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	689b      	ldr	r3, [r3, #8]
 800eb9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb9e:	d101      	bne.n	800eba4 <vTCPWindowDestroy+0x30>
 800eba0:	2301      	movs	r3, #1
 800eba2:	e000      	b.n	800eba6 <vTCPWindowDestroy+0x32>
 800eba4:	2300      	movs	r3, #0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d00b      	beq.n	800ebc2 <vTCPWindowDestroy+0x4e>
			{
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800ebaa:	e006      	b.n	800ebba <vTCPWindowDestroy+0x46>
				{
					pxSegment = ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments );
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	68db      	ldr	r3, [r3, #12]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	60fb      	str	r3, [r7, #12]
					vTCPWindowFree( pxSegment );
 800ebb4:	68f8      	ldr	r0, [r7, #12]
 800ebb6:	f7ff ffb1 	bl	800eb1c <vTCPWindowFree>
				while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d1f4      	bne.n	800ebac <vTCPWindowDestroy+0x38>
		for( xRound = 0; xRound < 2; xRound++ )
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	613b      	str	r3, [r7, #16]
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	ddd9      	ble.n	800eb82 <vTCPWindowDestroy+0xe>
				}
			}
		}
	}
 800ebce:	bf00      	nop
 800ebd0:	3718      	adds	r7, #24
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
	...

0800ebd8 <vTCPWindowCreate>:
#endif /* ipconfigUSE_TCP_WIN == 1 */
/*-----------------------------------------------------------*/

void vTCPWindowCreate( TCPWindow_t *pxWindow, uint32_t ulRxWindowLength,
	uint32_t ulTxWindowLength, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS )
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	607a      	str	r2, [r7, #4]
 800ebe4:	603b      	str	r3, [r7, #0]
	/* Create and initialize a window. */

	#if( ipconfigUSE_TCP_WIN == 1 )
	{
		if( xTCPSegments == NULL )
 800ebe6:	4b17      	ldr	r3, [pc, #92]	; (800ec44 <vTCPWindowCreate+0x6c>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d101      	bne.n	800ebf2 <vTCPWindowCreate+0x1a>
		{
			prvCreateSectors();
 800ebee:	f7ff fe5b 	bl	800e8a8 <prvCreateSectors>
		}

		vListInitialise( &pxWindow->xTxSegments );
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	3390      	adds	r3, #144	; 0x90
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7f7 f84f 	bl	8005c9a <vListInitialise>
		vListInitialise( &pxWindow->xRxSegments );
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	33a4      	adds	r3, #164	; 0xa4
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7f7 f84a 	bl	8005c9a <vListInitialise>

		vListInitialise( &pxWindow->xPriorityQueue );			/* Priority queue: segments which must be sent immediately */
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	3340      	adds	r3, #64	; 0x40
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7f7 f845 	bl	8005c9a <vListInitialise>
		vListInitialise( &pxWindow->xTxQueue   );			/* Transmit queue: segments queued for transmission */
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	3354      	adds	r3, #84	; 0x54
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7f7 f840 	bl	8005c9a <vListInitialise>
		vListInitialise( &pxWindow->xWaitQueue );			/* Waiting queue:  outstanding segments */
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	3368      	adds	r3, #104	; 0x68
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7f7 f83b 	bl	8005c9a <vListInitialise>
	{
		FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
			ulRxWindowLength, ulTxWindowLength ) );
	}

	pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	68ba      	ldr	r2, [r7, #8]
 800ec28:	605a      	str	r2, [r3, #4]
	pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	609a      	str	r2, [r3, #8]

	vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	69ba      	ldr	r2, [r7, #24]
 800ec34:	6839      	ldr	r1, [r7, #0]
 800ec36:	68f8      	ldr	r0, [r7, #12]
 800ec38:	f000 f806 	bl	800ec48 <vTCPWindowInit>
}
 800ec3c:	bf00      	nop
 800ec3e:	3710      	adds	r7, #16
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}
 800ec44:	200047c8 	.word	0x200047c8

0800ec48 <vTCPWindowInit>:
/*-----------------------------------------------------------*/

void vTCPWindowInit( TCPWindow_t *pxWindow, uint32_t ulAckNumber, uint32_t ulSequenceNumber, uint32_t ulMSS )
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b087      	sub	sp, #28
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	607a      	str	r2, [r7, #4]
 800ec54:	603b      	str	r3, [r7, #0]
const int32_t l500ms = 500;
 800ec56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ec5a:	617b      	str	r3, [r7, #20]

	pxWindow->u.ulFlags = 0ul;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2200      	movs	r2, #0
 800ec60:	601a      	str	r2, [r3, #0]
	pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 800ec62:	68fa      	ldr	r2, [r7, #12]
 800ec64:	7813      	ldrb	r3, [r2, #0]
 800ec66:	f043 0301 	orr.w	r3, r3, #1
 800ec6a:	7013      	strb	r3, [r2, #0]

	if( ulMSS != 0ul )
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d024      	beq.n	800ecbc <vTCPWindowInit+0x74>
	{
		if( pxWindow->usMSSInit != 0u )
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d004      	beq.n	800ec86 <vTCPWindowInit+0x3e>
		{
			pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	b29a      	uxth	r2, r3
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		}

		if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0u ) )
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d804      	bhi.n	800ec9e <vTCPWindowInit+0x56>
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d10e      	bne.n	800ecbc <vTCPWindowInit+0x74>
		{
			pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	685a      	ldr	r2, [r3, #4]
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	fbb2 f3f3 	udiv	r3, r2, r3
 800eca8:	683a      	ldr	r2, [r7, #0]
 800ecaa:	fb02 f203 	mul.w	r2, r2, r3
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	605a      	str	r2, [r3, #4]
			pxWindow->usMSS = ( uint16_t ) ulMSS;
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	b29a      	uxth	r2, r3
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
	}
	#endif /* ipconfigUSE_TCP_WIN == 1 */

	/*Start with a timeout of 2 * 500 ms (1 sec). */
	pxWindow->lSRTT = l500ms;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	697a      	ldr	r2, [r7, #20]
 800ecc0:	639a      	str	r2, [r3, #56]	; 0x38

	/* Just for logging, to print relative sequence numbers. */
	pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	68ba      	ldr	r2, [r7, #8]
 800ecc6:	60da      	str	r2, [r3, #12]

	/* The segment asked for in the next transmission. */
	pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	68ba      	ldr	r2, [r7, #8]
 800eccc:	611a      	str	r2, [r3, #16]

	/* The right-hand side of the receive window. */
	pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	68ba      	ldr	r2, [r7, #8]
 800ecd2:	619a      	str	r2, [r3, #24]

	pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	687a      	ldr	r2, [r7, #4]
 800ecd8:	61da      	str	r2, [r3, #28]

	/* The segment asked for in next transmission. */
	pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	687a      	ldr	r2, [r7, #4]
 800ecde:	621a      	str	r2, [r3, #32]

	/* The sequence number given to the next outgoing byte to be added is
	maintained by lTCPWindowTxAdd(). */
	pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	635a      	str	r2, [r3, #52]	; 0x34

	/* The right-hand side of the transmit window. */
	pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	629a      	str	r2, [r3, #40]	; 0x28
	pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ecf2:	bf00      	nop
 800ecf4:	371c      	adds	r7, #28
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr

0800ecfe <xTCPWindowRxConfirm>:
 *=============================================================================*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static TCPSegment_t *xTCPWindowRxConfirm( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength )
	{
 800ecfe:	b580      	push	{r7, lr}
 800ed00:	b08a      	sub	sp, #40	; 0x28
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	60f8      	str	r0, [r7, #12]
 800ed06:	60b9      	str	r1, [r7, #8]
 800ed08:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxBest = NULL;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	627b      	str	r3, [r7, #36]	; 0x24
	const ListItem_t *pxIterator;
	uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 800ed0e:	68ba      	ldr	r2, [r7, #8]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	4413      	add	r3, r2
 800ed14:	61fb      	str	r3, [r7, #28]
	const MiniListItem_t* pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &pxWindow->xRxSegments );
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	33ac      	adds	r3, #172	; 0xac
 800ed1a:	61bb      	str	r3, [r7, #24]
		and (ulSequenceNumber+ulLength).  Normally none will be found, because
		the next RX segment should have a sequence number equal to
		'(ulSequenceNumber+ulLength)'. */

		/* Iterate through all RX segments that are stored: */
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800ed1c:	69bb      	ldr	r3, [r7, #24]
 800ed1e:	685b      	ldr	r3, [r3, #4]
 800ed20:	623b      	str	r3, [r7, #32]
 800ed22:	e027      	b.n	800ed74 <xTCPWindowRxConfirm+0x76>
			 pxIterator != ( const ListItem_t * ) pxEnd;
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
		{
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800ed24:	6a3b      	ldr	r3, [r7, #32]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	617b      	str	r3, [r7, #20]
			/* And see if there is a segment for which:
			'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
			If there are more matching segments, the one with the lowest sequence number
			shall be taken */
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	68b9      	ldr	r1, [r7, #8]
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7ff fd5a 	bl	800e7ea <xSequenceGreaterThanOrEqual>
 800ed36:	4603      	mov	r3, r0
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d018      	beq.n	800ed6e <xTCPWindowRxConfirm+0x70>
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	69f9      	ldr	r1, [r7, #28]
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7ff fd2d 	bl	800e7a2 <xSequenceLessThan>
 800ed48:	4603      	mov	r3, r0
			if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d00f      	beq.n	800ed6e <xTCPWindowRxConfirm+0x70>
			{
				if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 800ed4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d00a      	beq.n	800ed6a <xTCPWindowRxConfirm+0x6c>
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	681a      	ldr	r2, [r3, #0]
 800ed58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	4610      	mov	r0, r2
 800ed60:	f7ff fd1f 	bl	800e7a2 <xSequenceLessThan>
 800ed64:	4603      	mov	r3, r0
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d001      	beq.n	800ed6e <xTCPWindowRxConfirm+0x70>
				{
					pxBest = pxSegment;
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	627b      	str	r3, [r7, #36]	; 0x24
			 pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800ed6e:	6a3b      	ldr	r3, [r7, #32]
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	623b      	str	r3, [r7, #32]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800ed74:	6a3a      	ldr	r2, [r7, #32]
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d1d3      	bne.n	800ed24 <xTCPWindowRxConfirm+0x26>
				}
			}
		}

		if( ( pxBest != NULL ) &&
 800ed7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d003      	beq.n	800ed8a <xTCPWindowRxConfirm+0x8c>
			( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 800ed82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed84:	681a      	ldr	r2, [r3, #0]
		if( ( pxBest != NULL ) &&
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	429a      	cmp	r2, r3
				pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
				pxBest->lDataLength,
				pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) );
		}

		return pxBest;
 800ed8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3728      	adds	r7, #40	; 0x28
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <lTCPWindowRxCheck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	int32_t lTCPWindowRxCheck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber, uint32_t ulLength, uint32_t ulSpace )
	{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b08a      	sub	sp, #40	; 0x28
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	607a      	str	r2, [r7, #4]
 800eda0:	603b      	str	r3, [r7, #0]
		or there is not enough space.

		As a side-effect, pxWindow->ulUserDataLength will get set to non-zero,
		if more Rx data may be passed to the user after this packet. */

		ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	691b      	ldr	r3, [r3, #16]
 800eda6:	627b      	str	r3, [r7, #36]	; 0x24

		/* For Selective Ack (SACK), used when out-of-sequence data come in. */
		pxWindow->ucOptionLength = 0u;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2200      	movs	r2, #0
 800edac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Non-zero if TCP-windows contains data which must be popped. */
		pxWindow->ulUserDataLength = 0ul;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2200      	movs	r2, #0
 800edb4:	631a      	str	r2, [r3, #48]	; 0x30

		if( ulCurrentSequenceNumber == ulSequenceNumber )
 800edb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	429a      	cmp	r2, r3
 800edbc:	d145      	bne.n	800ee4a <lTCPWindowRxCheck+0xb6>
		{
			/* This is the packet with the lowest sequence number we're waiting
			for.  It can be passed directly to the rx stream. */
			if( ulLength > ulSpace )
 800edbe:	687a      	ldr	r2, [r7, #4]
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d903      	bls.n	800edce <lTCPWindowRxCheck+0x3a>
			{
				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
				lReturn = -1;
 800edc6:	f04f 33ff 	mov.w	r3, #4294967295
 800edca:	61fb      	str	r3, [r7, #28]
 800edcc:	e0b9      	b.n	800ef42 <lTCPWindowRxCheck+0x1ae>
			}
			else
			{
				ulCurrentSequenceNumber += ulLength;
 800edce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	4413      	add	r3, r2
 800edd4:	627b      	str	r3, [r7, #36]	; 0x24

				if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0 )
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d02e      	beq.n	800ee3e <lTCPWindowRxCheck+0xaa>
				{
					ulSavedSequenceNumber = ulCurrentSequenceNumber;
 800ede0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede2:	61bb      	str	r3, [r7, #24]

					/* See if (part of) this segment has been stored already,
					but this rarely happens. */
					pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	68b9      	ldr	r1, [r7, #8]
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f7ff ff88 	bl	800ecfe <xTCPWindowRxConfirm>
 800edee:	6178      	str	r0, [r7, #20]
					if( pxFound != NULL )
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d012      	beq.n	800ee1c <lTCPWindowRxCheck+0x88>
					{
						ulCurrentSequenceNumber = pxFound->ulSequenceNumber + ( ( uint32_t ) pxFound->lDataLength );
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	697a      	ldr	r2, [r7, #20]
 800edfc:	6892      	ldr	r2, [r2, #8]
 800edfe:	4413      	add	r3, r2
 800ee00:	627b      	str	r3, [r7, #36]	; 0x24

						/* Remove it because it will be passed to user directly. */
						vTCPWindowFree( pxFound );
 800ee02:	6978      	ldr	r0, [r7, #20]
 800ee04:	f7ff fe8a 	bl	800eb1c <vTCPWindowFree>
					}

					/*  Check for following segments that are already in the
					queue and increment ulCurrentSequenceNumber. */
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
 800ee08:	e008      	b.n	800ee1c <lTCPWindowRxCheck+0x88>
					{
						ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	689b      	ldr	r3, [r3, #8]
 800ee0e:	461a      	mov	r2, r3
 800ee10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee12:	4413      	add	r3, r2
 800ee14:	627b      	str	r3, [r7, #36]	; 0x24

						/* As all packet below this one have been passed to the
						user it can be discarded. */
						vTCPWindowFree( pxFound );
 800ee16:	6978      	ldr	r0, [r7, #20]
 800ee18:	f7ff fe80 	bl	800eb1c <vTCPWindowFree>
					while( ( pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber ) ) != NULL )
 800ee1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee1e:	68f8      	ldr	r0, [r7, #12]
 800ee20:	f7ff fd92 	bl	800e948 <xTCPWindowRxFind>
 800ee24:	6178      	str	r0, [r7, #20]
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1ee      	bne.n	800ee0a <lTCPWindowRxCheck+0x76>
					}

					if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 800ee2c:	69ba      	ldr	r2, [r7, #24]
 800ee2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d004      	beq.n	800ee3e <lTCPWindowRxCheck+0xaa>
					{
						/*  After the current data-package, there is more data
						to be popped. */
						pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 800ee34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee36:	69bb      	ldr	r3, [r7, #24]
 800ee38:	1ad2      	subs	r2, r2, r3
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	631a      	str	r2, [r3, #48]	; 0x30
								listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
						}
					}
				}

				pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee42:	611a      	str	r2, [r3, #16]

				/* Packet was expected, may be passed directly to the socket
				buffer or application.  Store the packet at offset 0. */
				lReturn = 0;
 800ee44:	2300      	movs	r3, #0
 800ee46:	61fb      	str	r3, [r7, #28]
 800ee48:	e07b      	b.n	800ef42 <lTCPWindowRxCheck+0x1ae>
			}
		}
		else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	1c5a      	adds	r2, r3, #1
 800ee4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d103      	bne.n	800ee5c <lTCPWindowRxCheck+0xc8>
		{
			/* Looks like a TCP keep-alive message.  Do not accept/store Rx data
			ulUserDataLength = 0. Not packet out-of-sync.  Just reply to it. */
			lReturn = -1;
 800ee54:	f04f 33ff 	mov.w	r3, #4294967295
 800ee58:	61fb      	str	r3, [r7, #28]
 800ee5a:	e072      	b.n	800ef42 <lTCPWindowRxCheck+0x1ae>
			/* The packet is not the one expected.  See if it falls within the Rx
			window so it can be stored. */

			/*  An "out-of-sequence" segment was received, must have missed one.
			Prepare a SACK (Selective ACK). */
			ulLast = ulSequenceNumber + ulLength;
 800ee5c:	68ba      	ldr	r2, [r7, #8]
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	4413      	add	r3, r2
 800ee62:	623b      	str	r3, [r7, #32]
			lDistance = ( int32_t ) ( ulLast - ulCurrentSequenceNumber );
 800ee64:	6a3a      	ldr	r2, [r7, #32]
 800ee66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee68:	1ad3      	subs	r3, r2, r3
 800ee6a:	613b      	str	r3, [r7, #16]

			if( lDistance <= 0 )
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	dc03      	bgt.n	800ee7a <lTCPWindowRxCheck+0xe6>
			{
				/* An earlier has been received, must be a retransmission of a
				packet that has been accepted already.  No need to send out a
				Selective ACK (SACK). */
				lReturn = -1;
 800ee72:	f04f 33ff 	mov.w	r3, #4294967295
 800ee76:	61fb      	str	r3, [r7, #28]
 800ee78:	e063      	b.n	800ef42 <lTCPWindowRxCheck+0x1ae>
			}
			else if( lDistance > ( int32_t ) ulSpace )
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	693a      	ldr	r2, [r7, #16]
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	dd09      	ble.n	800ee96 <lTCPWindowRxCheck+0x102>
			{
				/* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
				sequence number of this packet is too far ahead, ignore it. */
				FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
				lReturn = -1;
 800ee82:	f04f 33ff 	mov.w	r3, #4294967295
 800ee86:	61fb      	str	r3, [r7, #28]
 800ee88:	e05b      	b.n	800ef42 <lTCPWindowRxCheck+0x1ae>
				 * This is useful because subsequent packets will be SACK'd with
				 * single one message
				 */
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
				{
					ulLast += ( uint32_t ) pxFound->lDataLength;
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	461a      	mov	r2, r3
 800ee90:	6a3b      	ldr	r3, [r7, #32]
 800ee92:	4413      	add	r3, r2
 800ee94:	623b      	str	r3, [r7, #32]
				while( ( pxFound = xTCPWindowRxFind( pxWindow, ulLast ) ) != NULL )
 800ee96:	6a39      	ldr	r1, [r7, #32]
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	f7ff fd55 	bl	800e948 <xTCPWindowRxFind>
 800ee9e:	6178      	str	r0, [r7, #20]
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d1f1      	bne.n	800ee8a <lTCPWindowRxCheck+0xf6>
						ulLast - pxWindow->rx.ulFirstSequenceNumber ) );
				}

				/* Now prepare the SACK message.
				Code OPTION_CODE_SINGLE_SACK already in network byte order. */
				pxWindow->ulOptionsData[0] = OPTION_CODE_SINGLE_SACK;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	4a28      	ldr	r2, [pc, #160]	; (800ef4c <lTCPWindowRxCheck+0x1b8>)
 800eeaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				/* First sequence number that we received. */
				pxWindow->ulOptionsData[1] = FreeRTOS_htonl( ulSequenceNumber );
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	061a      	lsls	r2, r3, #24
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	021b      	lsls	r3, r3, #8
 800eeb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eeba:	431a      	orrs	r2, r3
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	0a1b      	lsrs	r3, r3, #8
 800eec0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eec4:	431a      	orrs	r2, r3
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	0e1b      	lsrs	r3, r3, #24
 800eeca:	431a      	orrs	r2, r3
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

				/* Last + 1 */
				pxWindow->ulOptionsData[2] = FreeRTOS_htonl( ulLast );
 800eed2:	6a3b      	ldr	r3, [r7, #32]
 800eed4:	061a      	lsls	r2, r3, #24
 800eed6:	6a3b      	ldr	r3, [r7, #32]
 800eed8:	021b      	lsls	r3, r3, #8
 800eeda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eede:	431a      	orrs	r2, r3
 800eee0:	6a3b      	ldr	r3, [r7, #32]
 800eee2:	0a1b      	lsrs	r3, r3, #8
 800eee4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eee8:	431a      	orrs	r2, r3
 800eeea:	6a3b      	ldr	r3, [r7, #32]
 800eeec:	0e1b      	lsrs	r3, r3, #24
 800eeee:	431a      	orrs	r2, r3
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				/* Which make 12 (3*4) option bytes. */
				pxWindow->ucOptionLength = 3 * sizeof( pxWindow->ulOptionsData[ 0 ] );
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	220c      	movs	r2, #12
 800eefa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 800eefe:	68b9      	ldr	r1, [r7, #8]
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f7ff fd21 	bl	800e948 <xTCPWindowRxFind>
 800ef06:	6178      	str	r0, [r7, #20]

				if( pxFound != NULL )
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d003      	beq.n	800ef16 <lTCPWindowRxCheck+0x182>
				{
					/* This out-of-sequence packet has been received for a
					second time.  It is already stored but do send a SACK
					again. */
					lReturn = -1;
 800ef0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef12:	61fb      	str	r3, [r7, #28]
 800ef14:	e015      	b.n	800ef42 <lTCPWindowRxCheck+0x1ae>
				}
				else
				{
					pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 800ef16:	687a      	ldr	r2, [r7, #4]
 800ef18:	2301      	movs	r3, #1
 800ef1a:	68b9      	ldr	r1, [r7, #8]
 800ef1c:	68f8      	ldr	r0, [r7, #12]
 800ef1e:	f7ff fd3b 	bl	800e998 <xTCPWindowNew>
 800ef22:	6178      	str	r0, [r7, #20]

					if( pxFound == NULL )
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d107      	bne.n	800ef3a <lTCPWindowRxCheck+0x1a6>
					{
						/* Can not send a SACK, because the segment cannot be
						stored. */
						pxWindow->ucOptionLength = 0u;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

						/* Needs to be stored but there is no segment
						available. */
						lReturn = -1;
 800ef32:	f04f 33ff 	mov.w	r3, #4294967295
 800ef36:	61fb      	str	r3, [r7, #28]
 800ef38:	e003      	b.n	800ef42 <lTCPWindowRxCheck+0x1ae>
							FreeRTOS_flush_logging( );
						}

						/* Return a positive value.  The packet may be accepted
						and stored but an earlier packet is still missing. */
						lReturn = ( int32_t ) ( ulSequenceNumber - ulCurrentSequenceNumber );
 800ef3a:	68ba      	ldr	r2, [r7, #8]
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3e:	1ad3      	subs	r3, r2, r3
 800ef40:	61fb      	str	r3, [r7, #28]
					}
				}
			}
		}

		return lReturn;
 800ef42:	69fb      	ldr	r3, [r7, #28]
	}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3728      	adds	r7, #40	; 0x28
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	0a050101 	.word	0x0a050101

0800ef50 <lTCPIncrementTxPosition>:
 *=============================================================================*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static int32_t lTCPIncrementTxPosition( int32_t lPosition, int32_t lMax, int32_t lCount )
	{
 800ef50:	b480      	push	{r7}
 800ef52:	b085      	sub	sp, #20
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	60b9      	str	r1, [r7, #8]
 800ef5a:	607a      	str	r2, [r7, #4]
		/* +TCP stores data in circular buffers.  Calculate the next position to
		store. */
		lPosition += lCount;
 800ef5c:	68fa      	ldr	r2, [r7, #12]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4413      	add	r3, r2
 800ef62:	60fb      	str	r3, [r7, #12]
		if( lPosition >= lMax )
 800ef64:	68fa      	ldr	r2, [r7, #12]
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	db03      	blt.n	800ef74 <lTCPIncrementTxPosition+0x24>
		{
			lPosition -= lMax;
 800ef6c:	68fa      	ldr	r2, [r7, #12]
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	1ad3      	subs	r3, r2, r3
 800ef72:	60fb      	str	r3, [r7, #12]
		}

		return lPosition;
 800ef74:	68fb      	ldr	r3, [r7, #12]
	}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3714      	adds	r7, #20
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr
	...

0800ef84 <lTCPWindowTxAdd>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	int32_t lTCPWindowTxAdd( TCPWindow_t *pxWindow, uint32_t ulLength, int32_t lPosition, int32_t lMax )
	{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b088      	sub	sp, #32
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	60f8      	str	r0, [r7, #12]
 800ef8c:	60b9      	str	r1, [r7, #8]
 800ef8e:	607a      	str	r2, [r7, #4]
 800ef90:	603b      	str	r3, [r7, #0]
	int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	61fb      	str	r3, [r7, #28]
	int32_t lDone = 0;
 800ef96:	2300      	movs	r3, #0
 800ef98:	61bb      	str	r3, [r7, #24]
	TCPSegment_t *pxSegment = pxWindow->pxHeadSegment;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef9e:	617b      	str	r3, [r7, #20]

		/* Puts a message in the Tx-window (after buffer size has been
		verified). */
		if( pxSegment != NULL )
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	f000 8096 	beq.w	800f0d4 <lTCPWindowTxAdd+0x150>
		{
			if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	689a      	ldr	r2, [r3, #8]
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	f280 808f 	bge.w	800f0d4 <lTCPWindowTxAdd+0x150>
			{
				if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	7d9b      	ldrb	r3, [r3, #22]
 800efba:	f003 0301 	and.w	r3, r3, #1
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	f040 8087 	bne.w	800f0d4 <lTCPWindowTxAdd+0x150>
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	689b      	ldr	r3, [r3, #8]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f000 8082 	beq.w	800f0d4 <lTCPWindowTxAdd+0x150>
				{
					/* Adding data to a segment that was already in the TX queue.  It
					will be filled-up to a maximum of MSS (maximum segment size). */
					lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	685a      	ldr	r2, [r3, #4]
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	1ad3      	subs	r3, r2, r3
 800efda:	4619      	mov	r1, r3
 800efdc:	69f8      	ldr	r0, [r7, #28]
 800efde:	f7ff fbaf 	bl	800e740 <FreeRTOS_min_int32>
 800efe2:	6138      	str	r0, [r7, #16]

					pxSegment->lDataLength += lToWrite;
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	689a      	ldr	r2, [r3, #8]
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	441a      	add	r2, r3
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	609a      	str	r2, [r3, #8]

					if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	689a      	ldr	r2, [r3, #8]
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	429a      	cmp	r2, r3
 800effa:	db02      	blt.n	800f002 <lTCPWindowTxAdd+0x7e>
					{
						/* This segment is full, don't add more bytes. */
						pxWindow->pxHeadSegment = NULL;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2200      	movs	r2, #0
 800f000:	67da      	str	r2, [r3, #124]	; 0x7c
					}

					lBytesLeft -= lToWrite;
 800f002:	69fa      	ldr	r2, [r7, #28]
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	1ad3      	subs	r3, r2, r3
 800f008:	61fb      	str	r3, [r7, #28]

					/* ulNextTxSequenceNumber is the sequence number of the next byte to
					be stored for transmission. */
					pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	441a      	add	r2, r3
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	635a      	str	r2, [r3, #52]	; 0x34

					/* Increased the return value. */
					lDone += lToWrite;
 800f016:	69ba      	ldr	r2, [r7, #24]
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	4413      	add	r3, r2
 800f01c:	61bb      	str	r3, [r7, #24]

					/* Some detailed logging, for those who're interested. */
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 ) )
 800f01e:	4b32      	ldr	r3, [pc, #200]	; (800f0e8 <lTCPWindowTxAdd+0x164>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2b01      	cmp	r3, #1
						FreeRTOS_flush_logging( );
					}

					/* Calculate the next position in the circular data buffer, knowing
					its maximum length 'lMax'. */
					lPosition = lTCPIncrementTxPosition( lPosition, lMax, lToWrite );
 800f024:	693a      	ldr	r2, [r7, #16]
 800f026:	6839      	ldr	r1, [r7, #0]
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f7ff ff91 	bl	800ef50 <lTCPIncrementTxPosition>
 800f02e:	6078      	str	r0, [r7, #4]
				}
			}
		}

		while( lBytesLeft > 0 )
 800f030:	e050      	b.n	800f0d4 <lTCPWindowTxAdd+0x150>
		{
			/* The current transmission segment is full, create new segments as
			needed. */
			pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, pxWindow->usMSS );
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f03c:	461a      	mov	r2, r3
 800f03e:	2300      	movs	r3, #0
 800f040:	68f8      	ldr	r0, [r7, #12]
 800f042:	f7ff fca9 	bl	800e998 <xTCPWindowNew>
 800f046:	6178      	str	r0, [r7, #20]

			if( pxSegment != NULL )
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d046      	beq.n	800f0dc <lTCPWindowTxAdd+0x158>
			{
				/* Store as many as needed, but no more than the maximum
				(MSS). */
				lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	4619      	mov	r1, r3
 800f054:	69f8      	ldr	r0, [r7, #28]
 800f056:	f7ff fb73 	bl	800e740 <FreeRTOS_min_int32>
 800f05a:	6138      	str	r0, [r7, #16]

				pxSegment->lDataLength = lToWrite;
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	693a      	ldr	r2, [r7, #16]
 800f060:	609a      	str	r2, [r3, #8]
				pxSegment->lStreamPos = lPosition;
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	60da      	str	r2, [r3, #12]
				lBytesLeft -= lToWrite;
 800f068:	69fa      	ldr	r2, [r7, #28]
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	1ad3      	subs	r3, r2, r3
 800f06e:	61fb      	str	r3, [r7, #28]
				lPosition = lTCPIncrementTxPosition( lPosition, lMax, lToWrite );
 800f070:	693a      	ldr	r2, [r7, #16]
 800f072:	6839      	ldr	r1, [r7, #0]
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f7ff ff6b 	bl	800ef50 <lTCPIncrementTxPosition>
 800f07a:	6078      	str	r0, [r7, #4]
				pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	441a      	add	r2, r3
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	635a      	str	r2, [r3, #52]	; 0x34
				lDone += lToWrite;
 800f088:	69ba      	ldr	r2, [r7, #24]
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	4413      	add	r3, r2
 800f08e:	61bb      	str	r3, [r7, #24]

				/* Link this segment in the Tx-Queue. */
				vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	3318      	adds	r3, #24
 800f09a:	4619      	mov	r1, r3
 800f09c:	4610      	mov	r0, r2
 800f09e:	f7ff fbb5 	bl	800e80c <vListInsertFifo>

				/* Let 'pxHeadSegment' point to this segment if there is still
				space. */
				if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	689a      	ldr	r2, [r3, #8]
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	da03      	bge.n	800f0b6 <lTCPWindowTxAdd+0x132>
				{
					pxWindow->pxHeadSegment = pxSegment;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	697a      	ldr	r2, [r7, #20]
 800f0b2:	67da      	str	r2, [r3, #124]	; 0x7c
 800f0b4:	e002      	b.n	800f0bc <lTCPWindowTxAdd+0x138>
				}
				else
				{
					pxWindow->pxHeadSegment = NULL;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	67da      	str	r2, [r3, #124]	; 0x7c
				}

				if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 )
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f0c2:	2b17      	cmp	r3, #23
 800f0c4:	d006      	beq.n	800f0d4 <lTCPWindowTxAdd+0x150>
				{
					if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800f0c6:	4b08      	ldr	r3, [pc, #32]	; (800f0e8 <lTCPWindowTxAdd+0x164>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	2b02      	cmp	r3, #2
 800f0cc:	dc02      	bgt.n	800f0d4 <lTCPWindowTxAdd+0x150>
						( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 800f0ce:	4b06      	ldr	r3, [pc, #24]	; (800f0e8 <lTCPWindowTxAdd+0x164>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
					if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800f0d2:	2b01      	cmp	r3, #1
		while( lBytesLeft > 0 )
 800f0d4:	69fb      	ldr	r3, [r7, #28]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	dcab      	bgt.n	800f032 <lTCPWindowTxAdd+0xae>
 800f0da:	e000      	b.n	800f0de <lTCPWindowTxAdd+0x15a>
				No more data can be sent at the moment. */
				if( lDone != 0 )
				{
					FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
				}
				break;
 800f0dc:	bf00      	nop
			}
		}

		return lDone;
 800f0de:	69bb      	ldr	r3, [r7, #24]
	}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3720      	adds	r7, #32
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}
 800f0e8:	200047e0 	.word	0x200047e0

0800f0ec <xTCPWindowTxDone>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowTxDone( TCPWindow_t *pxWindow )
	{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
		return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments) );
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	bf0c      	ite	eq
 800f0fe:	2301      	moveq	r3, #1
 800f100:	2300      	movne	r3, #0
 800f102:	b2db      	uxtb	r3, r3
	}
 800f104:	4618      	mov	r0, r3
 800f106:	370c      	adds	r7, #12
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr

0800f110 <prvTCPWindowTxHasSpace>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t *pxWindow, uint32_t ulWindowSize )
	{
 800f110:	b580      	push	{r7, lr}
 800f112:	b086      	sub	sp, #24
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
	TCPSegment_t *pxSegment;

		/* This function will look if there is new transmission data.  It will
		return true if there is data to be sent. */

		pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	3354      	adds	r3, #84	; 0x54
 800f11e:	4618      	mov	r0, r3
 800f120:	f7ff fcdf 	bl	800eae2 <xTCPWindowPeekHead>
 800f124:	60f8      	str	r0, [r7, #12]

		if( pxSegment == NULL )
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d102      	bne.n	800f132 <prvTCPWindowTxHasSpace+0x22>
		{
			xHasSpace = pdFALSE;
 800f12c:	2300      	movs	r3, #0
 800f12e:	613b      	str	r3, [r7, #16]
 800f130:	e02f      	b.n	800f192 <prvTCPWindowTxHasSpace+0x82>
		}
		else
		{
			/* How much data is outstanding, i.e. how much data has been sent
			but not yet acknowledged ? */
			if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6a1b      	ldr	r3, [r3, #32]
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d306      	bcc.n	800f14c <prvTCPWindowTxHasSpace+0x3c>
			{
				ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6a1b      	ldr	r3, [r3, #32]
 800f146:	1ad3      	subs	r3, r2, r3
 800f148:	617b      	str	r3, [r7, #20]
 800f14a:	e001      	b.n	800f150 <prvTCPWindowTxHasSpace+0x40>
			}
			else
			{
				ulTxOutstanding = 0UL;
 800f14c:	2300      	movs	r3, #0
 800f14e:	617b      	str	r3, [r7, #20]
			}

			/* Subtract this from the peer's space. */
			ulWindowSize -= FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 800f150:	6979      	ldr	r1, [r7, #20]
 800f152:	6838      	ldr	r0, [r7, #0]
 800f154:	f7ff fb04 	bl	800e760 <FreeRTOS_min_uint32>
 800f158:	4602      	mov	r2, r0
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	1a9b      	subs	r3, r3, r2
 800f15e:	603b      	str	r3, [r7, #0]

			/* See if the next segment may be sent. */
			if( ulWindowSize >= ( uint32_t ) pxSegment->lDataLength )
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	689b      	ldr	r3, [r3, #8]
 800f164:	461a      	mov	r2, r3
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d802      	bhi.n	800f172 <prvTCPWindowTxHasSpace+0x62>
			{
				xHasSpace = pdTRUE;
 800f16c:	2301      	movs	r3, #1
 800f16e:	613b      	str	r3, [r7, #16]
 800f170:	e001      	b.n	800f176 <prvTCPWindowTxHasSpace+0x66>
			}
			else
			{
				xHasSpace = pdFALSE;
 800f172:	2300      	movs	r3, #0
 800f174:	613b      	str	r3, [r7, #16]

			/* If 'xHasSpace', it looks like the peer has at least space for 1
			more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
			limitation of the transmission window (in case of many resends it
			may be decreased). */
			if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) )
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d00a      	beq.n	800f192 <prvTCPWindowTxHasSpace+0x82>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	689a      	ldr	r2, [r3, #8]
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	689b      	ldr	r3, [r3, #8]
 800f184:	4619      	mov	r1, r3
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	440b      	add	r3, r1
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d201      	bcs.n	800f192 <prvTCPWindowTxHasSpace+0x82>
			{
				xHasSpace = pdFALSE;
 800f18e:	2300      	movs	r3, #0
 800f190:	613b      	str	r3, [r7, #16]
			}
		}

		return xHasSpace;
 800f192:	693b      	ldr	r3, [r7, #16]
	}
 800f194:	4618      	mov	r0, r3
 800f196:	3718      	adds	r7, #24
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <xTCPWindowTxHasData>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	BaseType_t xTCPWindowTxHasData( TCPWindow_t *pxWindow, uint32_t ulWindowSize, TickType_t *pulDelay )
	{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b088      	sub	sp, #32
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	60b9      	str	r1, [r7, #8]
 800f1a6:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxSegment;
	BaseType_t xReturn;
	TickType_t ulAge, ulMaxAge;

		*pulDelay = 0u;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	601a      	str	r2, [r3, #0]

		if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d002      	beq.n	800f1bc <xTCPWindowTxHasData+0x20>
		{
			/* No need to look at retransmissions or new transmission as long as
			there are priority segments.  *pulDelay equals zero, meaning it must
			be sent out immediately. */
			xReturn = pdTRUE;
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	61fb      	str	r3, [r7, #28]
 800f1ba:	e04a      	b.n	800f252 <xTCPWindowTxHasData+0xb6>
		}
		else
		{
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	3368      	adds	r3, #104	; 0x68
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7ff fc8e 	bl	800eae2 <xTCPWindowPeekHead>
 800f1c6:	61b8      	str	r0, [r7, #24]

			if( pxSegment != NULL )
 800f1c8:	69bb      	ldr	r3, [r7, #24]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d019      	beq.n	800f202 <xTCPWindowTxHasData+0x66>
			{
				/* There is an outstanding segment, see if it is time to resend
				it. */
				ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 800f1ce:	69bb      	ldr	r3, [r7, #24]
 800f1d0:	3310      	adds	r3, #16
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7ff fb37 	bl	800e846 <ulTimerGetAge>
 800f1d8:	6178      	str	r0, [r7, #20]

				/* After a packet has been sent for the first time, it will wait
				'1 * lSRTT' ms for an ACK. A second time it will wait '2 * lSRTT' ms,
				each time doubling the time-out */
				ulMaxAge = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1de:	461a      	mov	r2, r3
 800f1e0:	69bb      	ldr	r3, [r7, #24]
 800f1e2:	7d1b      	ldrb	r3, [r3, #20]
 800f1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800f1e8:	613b      	str	r3, [r7, #16]

				if( ulMaxAge > ulAge )
 800f1ea:	693a      	ldr	r2, [r7, #16]
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d904      	bls.n	800f1fc <xTCPWindowTxHasData+0x60>
				{
					/* A segment must be sent after this amount of msecs */
					*pulDelay = ulMaxAge - ulAge;
 800f1f2:	693a      	ldr	r2, [r7, #16]
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	1ad2      	subs	r2, r2, r3
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	601a      	str	r2, [r3, #0]
				}

				xReturn = pdTRUE;
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	61fb      	str	r3, [r7, #28]
 800f200:	e027      	b.n	800f252 <xTCPWindowTxHasData+0xb6>
			}
			else
			{
				/* No priority segment, no outstanding data, see if there is new
				transmission data. */
				pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	3354      	adds	r3, #84	; 0x54
 800f206:	4618      	mov	r0, r3
 800f208:	f7ff fc6b 	bl	800eae2 <xTCPWindowPeekHead>
 800f20c:	61b8      	str	r0, [r7, #24]

				/* See if it fits in the peer's reception window. */
				if( pxSegment == NULL )
 800f20e:	69bb      	ldr	r3, [r7, #24]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d102      	bne.n	800f21a <xTCPWindowTxHasData+0x7e>
				{
					xReturn = pdFALSE;
 800f214:	2300      	movs	r3, #0
 800f216:	61fb      	str	r3, [r7, #28]
 800f218:	e01b      	b.n	800f252 <xTCPWindowTxHasData+0xb6>
				}
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800f21a:	68b9      	ldr	r1, [r7, #8]
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f7ff ff77 	bl	800f110 <prvTCPWindowTxHasSpace>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d102      	bne.n	800f22e <xTCPWindowTxHasData+0x92>
				{
					/* Too many outstanding messages. */
					xReturn = pdFALSE;
 800f228:	2300      	movs	r3, #0
 800f22a:	61fb      	str	r3, [r7, #28]
 800f22c:	e011      	b.n	800f252 <xTCPWindowTxHasData+0xb6>
				}
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	f003 0302 	and.w	r3, r3, #2
 800f236:	b2db      	uxtb	r3, r3
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d008      	beq.n	800f24e <xTCPWindowTxHasData+0xb2>
 800f23c:	69bb      	ldr	r3, [r7, #24]
 800f23e:	689a      	ldr	r2, [r3, #8]
 800f240:	69bb      	ldr	r3, [r7, #24]
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	429a      	cmp	r2, r3
 800f246:	da02      	bge.n	800f24e <xTCPWindowTxHasData+0xb2>
				{
					/* 'bSendFullSize' is a special optimisation.  If true, the
					driver will only sent completely filled packets (of MSS
					bytes). */
					xReturn = pdFALSE;
 800f248:	2300      	movs	r3, #0
 800f24a:	61fb      	str	r3, [r7, #28]
 800f24c:	e001      	b.n	800f252 <xTCPWindowTxHasData+0xb6>
				}
				else
				{
					xReturn = pdTRUE;
 800f24e:	2301      	movs	r3, #1
 800f250:	61fb      	str	r3, [r7, #28]
				}
			}
		}

		return xReturn;
 800f252:	69fb      	ldr	r3, [r7, #28]
	}
 800f254:	4618      	mov	r0, r3
 800f256:	3720      	adds	r7, #32
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <ulTCPWindowTxGet>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxGet( TCPWindow_t *pxWindow, uint32_t ulWindowSize, int32_t *plPosition )
	{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b088      	sub	sp, #32
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	607a      	str	r2, [r7, #4]
	TCPSegment_t *pxSegment;
	uint32_t ulMaxTime;
	uint32_t ulReturn  = ~0UL;
 800f268:	f04f 33ff 	mov.w	r3, #4294967295
 800f26c:	61bb      	str	r3, [r7, #24]

		/* Fetches data to be sent-out now.

		Priority messages: segments with a resend need no check current sliding
		window size. */
		pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	3340      	adds	r3, #64	; 0x40
 800f272:	4618      	mov	r0, r3
 800f274:	f7ff fc17 	bl	800eaa6 <xTCPWindowGetHead>
 800f278:	61f8      	str	r0, [r7, #28]
		pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	62da      	str	r2, [r3, #44]	; 0x2c

		if( pxSegment == NULL )
 800f282:	69fb      	ldr	r3, [r7, #28]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d16e      	bne.n	800f366 <ulTCPWindowTxGet+0x10a>
		{
			/* Waiting messages: outstanding messages with a running timer
			neither check peer's reception window size because these packets
			have been sent earlier. */
			pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	3368      	adds	r3, #104	; 0x68
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7ff fc28 	bl	800eae2 <xTCPWindowPeekHead>
 800f292:	61f8      	str	r0, [r7, #28]

			if( pxSegment != NULL )
 800f294:	69fb      	ldr	r3, [r7, #28]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d01f      	beq.n	800f2da <ulTCPWindowTxGet+0x7e>
			{
				/* Do check the timing. */
				ulMaxTime = ( 1u << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f29e:	461a      	mov	r2, r3
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	7d1b      	ldrb	r3, [r3, #20]
 800f2a4:	fa02 f303 	lsl.w	r3, r2, r3
 800f2a8:	617b      	str	r3, [r7, #20]

				if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	3310      	adds	r3, #16
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7ff fac9 	bl	800e846 <ulTimerGetAge>
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d90c      	bls.n	800f2d6 <ulTCPWindowTxGet+0x7a>
				{
					/* A normal (non-fast) retransmission.  Move it from the
					head of the waiting queue. */
					pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	3368      	adds	r3, #104	; 0x68
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7ff fbf0 	bl	800eaa6 <xTCPWindowGetHead>
 800f2c6:	61f8      	str	r0, [r7, #28]
					pxSegment->u.bits.ucDupAckCount = pdFALSE_UNSIGNED;
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	755a      	strb	r2, [r3, #21]

					/* Some detailed logging. */
					if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != 0 ) )
 800f2ce:	4b4c      	ldr	r3, [pc, #304]	; (800f400 <ulTCPWindowTxGet+0x1a4>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	e001      	b.n	800f2da <ulTCPWindowTxGet+0x7e>
						FreeRTOS_flush_logging( );
					}
				}
				else
				{
					pxSegment = NULL;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	61fb      	str	r3, [r7, #28]
				}
			}

			if( pxSegment == NULL )
 800f2da:	69fb      	ldr	r3, [r7, #28]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d142      	bne.n	800f366 <ulTCPWindowTxGet+0x10a>
			{
				/* New messages: sent-out for the first time.  Check current
				sliding window size of peer. */
				pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	3354      	adds	r3, #84	; 0x54
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7ff fbfc 	bl	800eae2 <xTCPWindowPeekHead>
 800f2ea:	61f8      	str	r0, [r7, #28]

				if( pxSegment == NULL )
 800f2ec:	69fb      	ldr	r3, [r7, #28]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d102      	bne.n	800f2f8 <ulTCPWindowTxGet+0x9c>
				{
					/* No segments queued. */
					ulReturn = 0UL;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	61bb      	str	r3, [r7, #24]
 800f2f6:	e036      	b.n	800f366 <ulTCPWindowTxGet+0x10a>
				}
				else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	f003 0302 	and.w	r3, r3, #2
 800f300:	b2db      	uxtb	r3, r3
 800f302:	2b00      	cmp	r3, #0
 800f304:	d008      	beq.n	800f318 <ulTCPWindowTxGet+0xbc>
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	689a      	ldr	r2, [r3, #8]
 800f30a:	69fb      	ldr	r3, [r7, #28]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	429a      	cmp	r2, r3
 800f310:	da02      	bge.n	800f318 <ulTCPWindowTxGet+0xbc>
				{
					/* A segment has been queued but the driver waits until it
					has a full size of MSS. */
					ulReturn = 0;
 800f312:	2300      	movs	r3, #0
 800f314:	61bb      	str	r3, [r7, #24]
 800f316:	e026      	b.n	800f366 <ulTCPWindowTxGet+0x10a>
				}
				else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800f318:	68b9      	ldr	r1, [r7, #8]
 800f31a:	68f8      	ldr	r0, [r7, #12]
 800f31c:	f7ff fef8 	bl	800f110 <prvTCPWindowTxHasSpace>
 800f320:	4603      	mov	r3, r0
 800f322:	2b00      	cmp	r3, #0
 800f324:	d102      	bne.n	800f32c <ulTCPWindowTxGet+0xd0>
				{
					/* Peer has no more space at this moment. */
					ulReturn = 0;
 800f326:	2300      	movs	r3, #0
 800f328:	61bb      	str	r3, [r7, #24]
 800f32a:	e01c      	b.n	800f366 <ulTCPWindowTxGet+0x10a>
				}
				else
				{
					/* Move it out of the Tx queue. */
					pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	3354      	adds	r3, #84	; 0x54
 800f330:	4618      	mov	r0, r3
 800f332:	f7ff fbb8 	bl	800eaa6 <xTCPWindowGetHead>
 800f336:	61f8      	str	r0, [r7, #28]

					/* Don't let pxHeadSegment point to this segment any more,
					so no more data will be added. */
					if( pxWindow->pxHeadSegment == pxSegment )
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f33c:	69fb      	ldr	r3, [r7, #28]
 800f33e:	429a      	cmp	r2, r3
 800f340:	d102      	bne.n	800f348 <ulTCPWindowTxGet+0xec>
					{
						pxWindow->pxHeadSegment = NULL;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	2200      	movs	r2, #0
 800f346:	67da      	str	r2, [r3, #124]	; 0x7c
					}

					/* pxWindow->tx.highest registers the highest sequence
					number in our transmission window. */
					pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	69fa      	ldr	r2, [r7, #28]
 800f34e:	6892      	ldr	r2, [r2, #8]
 800f350:	441a      	add	r2, r3
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	629a      	str	r2, [r3, #40]	; 0x28

					/* ...and more detailed logging */
					if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 800f356:	4b2a      	ldr	r3, [pc, #168]	; (800f400 <ulTCPWindowTxGet+0x1a4>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	2b01      	cmp	r3, #1
 800f35c:	dd03      	ble.n	800f366 <ulTCPWindowTxGet+0x10a>
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f364:	2b17      	cmp	r3, #23
				FreeRTOS_flush_logging( );
			}
		}

		/* See if it has already been determined to return 0. */
		if( ulReturn != 0UL )
 800f366:	69bb      	ldr	r3, [r7, #24]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d043      	beq.n	800f3f4 <ulTCPWindowTxGet+0x198>
		{
			configASSERT( listLIST_ITEM_CONTAINER( &(pxSegment->xQueueItem ) ) == NULL );
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f370:	2b00      	cmp	r3, #0
 800f372:	d009      	beq.n	800f388 <ulTCPWindowTxGet+0x12c>
 800f374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f378:	f383 8811 	msr	BASEPRI, r3
 800f37c:	f3bf 8f6f 	isb	sy
 800f380:	f3bf 8f4f 	dsb	sy
 800f384:	613b      	str	r3, [r7, #16]
 800f386:	e7fe      	b.n	800f386 <ulTCPWindowTxGet+0x12a>

			/* Now that the segment will be transmitted, add it to the tail of
			the waiting queue. */
			vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f38e:	69fb      	ldr	r3, [r7, #28]
 800f390:	3318      	adds	r3, #24
 800f392:	4619      	mov	r1, r3
 800f394:	4610      	mov	r0, r2
 800f396:	f7ff fa39 	bl	800e80c <vListInsertFifo>

			/* And mark it as outstanding. */
			pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 800f39a:	69fa      	ldr	r2, [r7, #28]
 800f39c:	7d93      	ldrb	r3, [r2, #22]
 800f39e:	f043 0301 	orr.w	r3, r3, #1
 800f3a2:	7593      	strb	r3, [r2, #22]

			/* Administer the transmit count, needed for fast
			retransmissions. */
			( pxSegment->u.bits.ucTransmitCount )++;
 800f3a4:	69fb      	ldr	r3, [r7, #28]
 800f3a6:	7d1b      	ldrb	r3, [r3, #20]
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	b2da      	uxtb	r2, r3
 800f3ac:	69fb      	ldr	r3, [r7, #28]
 800f3ae:	751a      	strb	r2, [r3, #20]

			/* If there have been several retransmissions (4), decrease the
			size of the transmission window to at most 2 times MSS. */
			if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	7d1b      	ldrb	r3, [r3, #20]
 800f3b4:	2b04      	cmp	r3, #4
 800f3b6:	d10d      	bne.n	800f3d4 <ulTCPWindowTxGet+0x178>
			{
				if( pxWindow->xSize.ulTxWindowLength > ( 2U * pxWindow->usMSS ) )
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	689a      	ldr	r2, [r3, #8]
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f3c2:	005b      	lsls	r3, r3, #1
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d905      	bls.n	800f3d4 <ulTCPWindowTxGet+0x178>
				{
					FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
						pxWindow->usPeerPortNumber, pxWindow->usOurPortNumber,
						pxWindow->xSize.ulTxWindowLength, 2 * pxWindow->usMSS ) );
					pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f3ce:	005a      	lsls	r2, r3, #1
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	609a      	str	r2, [r3, #8]
				}
			}

			/* Clear the transmit timer. */
			vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 800f3d4:	69fb      	ldr	r3, [r7, #28]
 800f3d6:	3310      	adds	r3, #16
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f7ff fa27 	bl	800e82c <vTCPTimerSet>

			pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 800f3de:	69fb      	ldr	r3, [r7, #28]
 800f3e0:	681a      	ldr	r2, [r3, #0]
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	62da      	str	r2, [r3, #44]	; 0x2c

			/* Inform the caller where to find the data within the queue. */
			*plPosition = pxSegment->lStreamPos;
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	68da      	ldr	r2, [r3, #12]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	601a      	str	r2, [r3, #0]

			/* And return the length of the data segment */
			ulReturn = ( uint32_t ) pxSegment->lDataLength;
 800f3ee:	69fb      	ldr	r3, [r7, #28]
 800f3f0:	689b      	ldr	r3, [r3, #8]
 800f3f2:	61bb      	str	r3, [r7, #24]
		}

		return ulReturn;
 800f3f4:	69bb      	ldr	r3, [r7, #24]
	}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3720      	adds	r7, #32
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	200047e0 	.word	0x200047e0

0800f404 <prvTCPWindowTxCheckAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 800f404:	b580      	push	{r7, lr}
 800f406:	b08c      	sub	sp, #48	; 0x30
 800f408:	af00      	add	r7, sp, #0
 800f40a:	60f8      	str	r0, [r7, #12]
 800f40c:	60b9      	str	r1, [r7, #8]
 800f40e:	607a      	str	r2, [r7, #4]
	uint32_t ulBytesConfirmed = 0u;
 800f410:	2300      	movs	r3, #0
 800f412:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	62bb      	str	r3, [r7, #40]	; 0x28
	const ListItem_t *pxIterator;
	const MiniListItem_t *pxEnd = ( const MiniListItem_t* )listGET_END_MARKER( &pxWindow->xTxSegments );
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	3398      	adds	r3, #152	; 0x98
 800f41c:	61fb      	str	r3, [r7, #28]

		 A Smoothed RTT will increase quickly, but it is conservative when
		 becoming smaller. */

		for(
				pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	627b      	str	r3, [r7, #36]	; 0x24
		for(
 800f424:	e09b      	b.n	800f55e <prvTCPWindowTxCheckAck+0x15a>
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
			)
		{
			xDoUnlink = pdFALSE;
 800f426:	2300      	movs	r3, #0
 800f428:	623b      	str	r3, [r7, #32]
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800f42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	61bb      	str	r3, [r7, #24]

			/* Move to the next item because the current item might get
			removed. */
			pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800f430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	627b      	str	r3, [r7, #36]	; 0x24

			/* Continue if this segment does not fall within the ACK'd range. */
			if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 800f436:	69bb      	ldr	r3, [r7, #24]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	4619      	mov	r1, r3
 800f43c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f43e:	f7ff f9c2 	bl	800e7c6 <xSequenceGreaterThan>
 800f442:	4603      	mov	r3, r0
 800f444:	2b00      	cmp	r3, #0
 800f446:	d000      	beq.n	800f44a <prvTCPWindowTxCheckAck+0x46>
			{
				continue;
 800f448:	e089      	b.n	800f55e <prvTCPWindowTxCheckAck+0x15a>
			}

			/* Is it ready? */
			if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 800f44a:	69bb      	ldr	r3, [r7, #24]
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f450:	429a      	cmp	r2, r3
 800f452:	f040 8091 	bne.w	800f578 <prvTCPWindowTxCheckAck+0x174>
			{
				break;
			}

			ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 800f456:	69bb      	ldr	r3, [r7, #24]
 800f458:	689b      	ldr	r3, [r3, #8]
 800f45a:	617b      	str	r3, [r7, #20]

			if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800f45c:	69bb      	ldr	r3, [r7, #24]
 800f45e:	7d9b      	ldrb	r3, [r3, #22]
 800f460:	f003 0302 	and.w	r3, r3, #2
 800f464:	b2db      	uxtb	r3, r3
 800f466:	2b00      	cmp	r3, #0
 800f468:	d14d      	bne.n	800f506 <prvTCPWindowTxCheckAck+0x102>
			{
				if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t )ulDataLength, ulLast ) != pdFALSE )
 800f46a:	69bb      	ldr	r3, [r7, #24]
 800f46c:	681a      	ldr	r2, [r3, #0]
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	4413      	add	r3, r2
 800f472:	6879      	ldr	r1, [r7, #4]
 800f474:	4618      	mov	r0, r3
 800f476:	f7ff f9a6 	bl	800e7c6 <xSequenceGreaterThan>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d17d      	bne.n	800f57c <prvTCPWindowTxCheckAck+0x178>
					#endif /* ipconfigHAS_DEBUG_PRINTF */
					break;
				}

				/* This segment is fully ACK'd, set the flag. */
				pxSegment->u.bits.bAcked = pdTRUE_UNSIGNED;
 800f480:	69ba      	ldr	r2, [r7, #24]
 800f482:	7d93      	ldrb	r3, [r2, #22]
 800f484:	f043 0302 	orr.w	r3, r3, #2
 800f488:	7593      	strb	r3, [r2, #22]

				/* Calculate the RTT only if the segment was sent-out for the
				first time and if this is the last ACK'd segment in a range. */
				if( ( pxSegment->u.bits.ucTransmitCount == 1 ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	7d1b      	ldrb	r3, [r3, #20]
 800f48e:	2b01      	cmp	r3, #1
 800f490:	d137      	bne.n	800f502 <prvTCPWindowTxCheckAck+0xfe>
 800f492:	69bb      	ldr	r3, [r7, #24]
 800f494:	681a      	ldr	r2, [r3, #0]
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	441a      	add	r2, r3
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	429a      	cmp	r2, r3
 800f49e:	d130      	bne.n	800f502 <prvTCPWindowTxCheckAck+0xfe>
				{
					int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 800f4a0:	69bb      	ldr	r3, [r7, #24]
 800f4a2:	3310      	adds	r3, #16
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7ff f9ce 	bl	800e846 <ulTimerGetAge>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	613b      	str	r3, [r7, #16]

					if( pxWindow->lSRTT >= mS )
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	db0e      	blt.n	800f4d6 <prvTCPWindowTxCheckAck+0xd2>
					{
						/* RTT becomes smaller: adapt slowly. */
						pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4bc:	4613      	mov	r3, r2
 800f4be:	00db      	lsls	r3, r3, #3
 800f4c0:	1a9a      	subs	r2, r3, r2
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	4413      	add	r3, r2
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	da00      	bge.n	800f4cc <prvTCPWindowTxCheckAck+0xc8>
 800f4ca:	3307      	adds	r3, #7
 800f4cc:	10db      	asrs	r3, r3, #3
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	639a      	str	r2, [r3, #56]	; 0x38
 800f4d4:	e00e      	b.n	800f4f4 <prvTCPWindowTxCheckAck+0xf0>
					}
					else
					{
						/* RTT becomes larger: adapt quicker */
						pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4da:	4613      	mov	r3, r2
 800f4dc:	005b      	lsls	r3, r3, #1
 800f4de:	441a      	add	r2, r3
 800f4e0:	693b      	ldr	r3, [r7, #16]
 800f4e2:	4413      	add	r3, r2
 800f4e4:	005b      	lsls	r3, r3, #1
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	da00      	bge.n	800f4ec <prvTCPWindowTxCheckAck+0xe8>
 800f4ea:	3307      	adds	r3, #7
 800f4ec:	10db      	asrs	r3, r3, #3
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	639a      	str	r2, [r3, #56]	; 0x38
					}

					/* Cap to the minimum of 50ms. */
					if( pxWindow->lSRTT < winSRTT_CAP_mS )
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4f8:	2b31      	cmp	r3, #49	; 0x31
 800f4fa:	dc02      	bgt.n	800f502 <prvTCPWindowTxCheckAck+0xfe>
					{
						pxWindow->lSRTT = winSRTT_CAP_mS;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2232      	movs	r2, #50	; 0x32
 800f500:	639a      	str	r2, [r3, #56]	; 0x38
					}
				}

				/* Unlink it from the 3 queues, but do not destroy it (yet). */
				xDoUnlink = pdTRUE;
 800f502:	2301      	movs	r3, #1
 800f504:	623b      	str	r3, [r7, #32]
			}

			/* pxSegment->u.bits.bAcked is now true.  Is it located at the left
			side of the transmission queue?  If so, it may be freed. */
			if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	6a1a      	ldr	r2, [r3, #32]
 800f50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d116      	bne.n	800f53e <prvTCPWindowTxCheckAck+0x13a>
			{
				if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 800f510:	4b1d      	ldr	r3, [pc, #116]	; (800f588 <prvTCPWindowTxCheckAck+0x184>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2b01      	cmp	r3, #1
 800f516:	dd03      	ble.n	800f520 <prvTCPWindowTxCheckAck+0x11c>
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f51e:	2b17      	cmp	r3, #23
						ulLast - pxWindow->tx.ulFirstSequenceNumber,
						pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
				}

				/* Increase the left-hand value of the transmission window. */
				pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	6a1a      	ldr	r2, [r3, #32]
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	441a      	add	r2, r3
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	621a      	str	r2, [r3, #32]

				/* This function will return the number of bytes that the tail
				of txStream may be advanced. */
				ulBytesConfirmed += ulDataLength;
 800f52c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	4413      	add	r3, r2
 800f532:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* All segments below tx.ulCurrentSequenceNumber may be freed. */
				vTCPWindowFree( pxSegment );
 800f534:	69b8      	ldr	r0, [r7, #24]
 800f536:	f7ff faf1 	bl	800eb1c <vTCPWindowFree>

				/* No need to unlink it any more. */
				xDoUnlink = pdFALSE;
 800f53a:	2300      	movs	r3, #0
 800f53c:	623b      	str	r3, [r7, #32]
			}

			if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 800f53e:	6a3b      	ldr	r3, [r7, #32]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d008      	beq.n	800f556 <prvTCPWindowTxCheckAck+0x152>
 800f544:	69bb      	ldr	r3, [r7, #24]
 800f546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d004      	beq.n	800f556 <prvTCPWindowTxCheckAck+0x152>
			{
				/* Remove item from its queues. */
				uxListRemove( &pxSegment->xQueueItem );
 800f54c:	69bb      	ldr	r3, [r7, #24]
 800f54e:	3318      	adds	r3, #24
 800f550:	4618      	mov	r0, r3
 800f552:	f7f6 fc2c 	bl	8005dae <uxListRemove>
			}

			ulSequenceNumber += ulDataLength;
 800f556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	4413      	add	r3, r2
 800f55c:	62bb      	str	r3, [r7, #40]	; 0x28
		for(
 800f55e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f560:	69fb      	ldr	r3, [r7, #28]
 800f562:	429a      	cmp	r2, r3
 800f564:	d00b      	beq.n	800f57e <prvTCPWindowTxCheckAck+0x17a>
				( pxIterator != ( const ListItem_t * ) pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 );
 800f566:	6879      	ldr	r1, [r7, #4]
 800f568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f56a:	f7ff f91a 	bl	800e7a2 <xSequenceLessThan>
 800f56e:	4603      	mov	r3, r0
 800f570:	2b00      	cmp	r3, #0
 800f572:	f47f af58 	bne.w	800f426 <prvTCPWindowTxCheckAck+0x22>
 800f576:	e002      	b.n	800f57e <prvTCPWindowTxCheckAck+0x17a>
				break;
 800f578:	bf00      	nop
 800f57a:	e000      	b.n	800f57e <prvTCPWindowTxCheckAck+0x17a>
					break;
 800f57c:	bf00      	nop
		}

		return ulBytesConfirmed;
 800f57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f580:	4618      	mov	r0, r3
 800f582:	3730      	adds	r7, #48	; 0x30
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}
 800f588:	200047e0 	.word	0x200047e0

0800f58c <prvTCPWindowFastRetransmit>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t *pxWindow, uint32_t ulFirst )
	{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b086      	sub	sp, #24
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	6039      	str	r1, [r7, #0]
	const ListItem_t *pxIterator;
	const MiniListItem_t* pxEnd;
	TCPSegment_t *pxSegment;
	uint32_t ulCount = 0UL;
 800f596:	2300      	movs	r3, #0
 800f598:	613b      	str	r3, [r7, #16]

		/* A higher Tx block has been acknowledged.  Now iterate through the
		 xWaitQueue to find a possible condition for a FAST retransmission. */

		pxEnd = ( const MiniListItem_t* ) listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	3370      	adds	r3, #112	; 0x70
 800f59e:	60fb      	str	r3, [r7, #12]

		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	617b      	str	r3, [r7, #20]
 800f5a6:	e03b      	b.n	800f620 <prvTCPWindowFastRetransmit+0x94>
			 pxIterator != ( const ListItem_t * ) pxEnd; )
		{
			/* Get the owner, which is a TCP segment. */
			pxSegment = ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator );
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	60bb      	str	r3, [r7, #8]

			/* Hop to the next item before the current gets unlinked. */
			pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	617b      	str	r3, [r7, #20]

			/* Fast retransmission:
			When 3 packets with a higher sequence number have been acknowledged
			by the peer, it is very unlikely a current packet will ever arrive.
			It will be retransmitted far before the RTO. */
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	7d9b      	ldrb	r3, [r3, #22]
 800f5b8:	f003 0302 	and.w	r3, r3, #2
 800f5bc:	b2db      	uxtb	r3, r3
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d12e      	bne.n	800f620 <prvTCPWindowFastRetransmit+0x94>
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	6839      	ldr	r1, [r7, #0]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7ff f8ea 	bl	800e7a2 <xSequenceLessThan>
 800f5ce:	4603      	mov	r3, r0
			if( ( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED ) &&
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d025      	beq.n	800f620 <prvTCPWindowFastRetransmit+0x94>
				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	7d5b      	ldrb	r3, [r3, #21]
 800f5d8:	3301      	adds	r3, #1
 800f5da:	b2da      	uxtb	r2, r3
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	755a      	strb	r2, [r3, #21]
				( ++( pxSegment->u.bits.ucDupAckCount ) == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT ) )
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	7d5b      	ldrb	r3, [r3, #21]
				( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE ) &&
 800f5e4:	2b03      	cmp	r3, #3
 800f5e6:	d11b      	bne.n	800f620 <prvTCPWindowFastRetransmit+0x94>
			{
				pxSegment->u.bits.ucTransmitCount = pdFALSE_UNSIGNED;
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	751a      	strb	r2, [r3, #20]

				/* Not clearing 'ucDupAckCount' yet as more SACK's might come in
				which might lead to a second fast rexmit. */
				if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) != pdFALSE ) )
 800f5ee:	4b11      	ldr	r3, [pc, #68]	; (800f634 <prvTCPWindowFastRetransmit+0xa8>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	db03      	blt.n	800f5fe <prvTCPWindowFastRetransmit+0x72>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f5fc:	2b17      	cmp	r3, #23
						ulFirst - pxWindow->tx.ulFirstSequenceNumber ) );
					FreeRTOS_flush_logging( );
				}

				/* Remove it from xWaitQueue. */
				uxListRemove( &pxSegment->xQueueItem );
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	3318      	adds	r3, #24
 800f602:	4618      	mov	r0, r3
 800f604:	f7f6 fbd3 	bl	8005dae <uxListRemove>

				/* Add this segment to the priority queue so it gets
				retransmitted immediately. */
				vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	3318      	adds	r3, #24
 800f612:	4619      	mov	r1, r3
 800f614:	4610      	mov	r0, r2
 800f616:	f7ff f8f9 	bl	800e80c <vListInsertFifo>
				ulCount++;
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	3301      	adds	r3, #1
 800f61e:	613b      	str	r3, [r7, #16]
		for( pxIterator  = ( const ListItem_t * ) listGET_NEXT( pxEnd );
 800f620:	697a      	ldr	r2, [r7, #20]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	429a      	cmp	r2, r3
 800f626:	d1bf      	bne.n	800f5a8 <prvTCPWindowFastRetransmit+0x1c>
			}
		}

		return ulCount;
 800f628:	693b      	ldr	r3, [r7, #16]
	}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3718      	adds	r7, #24
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	200047e0 	.word	0x200047e0

0800f638 <ulTCPWindowTxAck>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxAck( TCPWindow_t *pxWindow, uint32_t ulSequenceNumber )
	{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b084      	sub	sp, #16
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]
	uint32_t ulFirstSequence, ulReturn;

		/* Receive a normal ACK. */

		ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6a1b      	ldr	r3, [r3, #32]
 800f646:	60bb      	str	r3, [r7, #8]

		if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 800f648:	68b9      	ldr	r1, [r7, #8]
 800f64a:	6838      	ldr	r0, [r7, #0]
 800f64c:	f7ff f898 	bl	800e780 <xSequenceLessThanOrEqual>
 800f650:	4603      	mov	r3, r0
 800f652:	2b00      	cmp	r3, #0
 800f654:	d002      	beq.n	800f65c <ulTCPWindowTxAck+0x24>
		{
			ulReturn = 0UL;
 800f656:	2300      	movs	r3, #0
 800f658:	60fb      	str	r3, [r7, #12]
 800f65a:	e005      	b.n	800f668 <ulTCPWindowTxAck+0x30>
		}
		else
		{
			ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 800f65c:	683a      	ldr	r2, [r7, #0]
 800f65e:	68b9      	ldr	r1, [r7, #8]
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f7ff fecf 	bl	800f404 <prvTCPWindowTxCheckAck>
 800f666:	60f8      	str	r0, [r7, #12]
		}

		return ulReturn;
 800f668:	68fb      	ldr	r3, [r7, #12]
	}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3710      	adds	r7, #16
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
	...

0800f674 <ulTCPWindowTxSack>:
/*-----------------------------------------------------------*/

#if( ipconfigUSE_TCP_WIN == 1 )

	uint32_t ulTCPWindowTxSack( TCPWindow_t *pxWindow, uint32_t ulFirst, uint32_t ulLast )
	{
 800f674:	b580      	push	{r7, lr}
 800f676:	b086      	sub	sp, #24
 800f678:	af00      	add	r7, sp, #0
 800f67a:	60f8      	str	r0, [r7, #12]
 800f67c:	60b9      	str	r1, [r7, #8]
 800f67e:	607a      	str	r2, [r7, #4]
	uint32_t ulAckCount = 0UL;
 800f680:	2300      	movs	r3, #0
 800f682:	617b      	str	r3, [r7, #20]
	uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	6a1b      	ldr	r3, [r3, #32]
 800f688:	613b      	str	r3, [r7, #16]

		/* Receive a SACK option. */
		ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 800f68a:	687a      	ldr	r2, [r7, #4]
 800f68c:	68b9      	ldr	r1, [r7, #8]
 800f68e:	68f8      	ldr	r0, [r7, #12]
 800f690:	f7ff feb8 	bl	800f404 <prvTCPWindowTxCheckAck>
 800f694:	6178      	str	r0, [r7, #20]
		prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 800f696:	68b9      	ldr	r1, [r7, #8]
 800f698:	68f8      	ldr	r0, [r7, #12]
 800f69a:	f7ff ff77 	bl	800f58c <prvTCPWindowFastRetransmit>

		if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 800f69e:	4b06      	ldr	r3, [pc, #24]	; (800f6b8 <ulTCPWindowTxSack+0x44>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	dd03      	ble.n	800f6ae <ulTCPWindowTxSack+0x3a>
 800f6a6:	6939      	ldr	r1, [r7, #16]
 800f6a8:	68b8      	ldr	r0, [r7, #8]
 800f6aa:	f7ff f88c 	bl	800e7c6 <xSequenceGreaterThan>
				ulLast - pxWindow->tx.ulFirstSequenceNumber,
				pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
			FreeRTOS_flush_logging( );
		}

		return ulAckCount;
 800f6ae:	697b      	ldr	r3, [r7, #20]
	}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3718      	adds	r7, #24
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}
 800f6b8:	200047e0 	.word	0x200047e0

0800f6bc <vProcessGeneratedUDPPacket>:
	}
};
/*-----------------------------------------------------------*/

void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800f6bc:	b5b0      	push	{r4, r5, r7, lr}
 800f6be:	b088      	sub	sp, #32
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
UDPPacket_t *pxUDPPacket;
IPHeader_t *pxIPHeader;
eARPLookupResult_t eReturned;
uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	695b      	ldr	r3, [r3, #20]
 800f6c8:	60fb      	str	r3, [r7, #12]

	/* Map the UDP packet onto the start of the frame. */
	pxUDPPacket = ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	699b      	ldr	r3, [r3, #24]
 800f6ce:	61bb      	str	r3, [r7, #24]

	/* Determine the ARP cache status for the requested IP address. */
	eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 800f6d0:	69ba      	ldr	r2, [r7, #24]
 800f6d2:	f107 030c 	add.w	r3, r7, #12
 800f6d6:	4611      	mov	r1, r2
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7f9 f867 	bl	80087ac <eARPGetCacheEntry>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	77fb      	strb	r3, [r7, #31]

	if( eReturned != eCantSendPacket )
 800f6e2:	7ffb      	ldrb	r3, [r7, #31]
 800f6e4:	2b02      	cmp	r3, #2
 800f6e6:	f000 8089 	beq.w	800f7fc <vProcessGeneratedUDPPacket+0x140>
	{
		if( eReturned == eARPCacheHit )
 800f6ea:	7ffb      	ldrb	r3, [r7, #31]
 800f6ec:	2b01      	cmp	r3, #1
 800f6ee:	d174      	bne.n	800f7da <vProcessGeneratedUDPPacket+0x11e>
				uint8_t ucSocketOptions;
			#endif
			iptraceSENDING_UDP_PACKET( pxNetworkBuffer->ulIPAddress );

			/* Create short cuts to the data within the packet. */
			pxIPHeader = &( pxUDPPacket->xIPHeader );
 800f6f0:	69bb      	ldr	r3, [r7, #24]
 800f6f2:	330e      	adds	r3, #14
 800f6f4:	617b      	str	r3, [r7, #20]

		#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
			/* Is it possible that the packet is not actually a UDP packet
			after all, but an ICMP packet. */
			if( pxNetworkBuffer->usPort != ipPACKET_CONTAINS_ICMP_DATA )
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	8c1b      	ldrh	r3, [r3, #32]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d026      	beq.n	800f74c <vProcessGeneratedUDPPacket+0x90>
		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
			{
			UDPHeader_t *pxUDPHeader;

				pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	3322      	adds	r3, #34	; 0x22
 800f702:	613b      	str	r3, [r7, #16]

				pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	8c1a      	ldrh	r2, [r3, #32]
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	805a      	strh	r2, [r3, #2]
				pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	801a      	strh	r2, [r3, #0]
				pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( UDPHeader_t ) );
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	69db      	ldr	r3, [r3, #28]
 800f718:	b29b      	uxth	r3, r3
 800f71a:	3308      	adds	r3, #8
 800f71c:	b29a      	uxth	r2, r3
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	809a      	strh	r2, [r3, #4]
				pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	889b      	ldrh	r3, [r3, #4]
 800f726:	b29b      	uxth	r3, r3
 800f728:	021b      	lsls	r3, r3, #8
 800f72a:	b21a      	sxth	r2, r3
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	889b      	ldrh	r3, [r3, #4]
 800f730:	b29b      	uxth	r3, r3
 800f732:	0a1b      	lsrs	r3, r3, #8
 800f734:	b29b      	uxth	r3, r3
 800f736:	b21b      	sxth	r3, r3
 800f738:	4313      	orrs	r3, r2
 800f73a:	b21b      	sxth	r3, r3
 800f73c:	b29a      	uxth	r2, r3
 800f73e:	693b      	ldr	r3, [r7, #16]
 800f740:	809a      	strh	r2, [r3, #4]
				pxUDPHeader->usChecksum = 0u;
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	2200      	movs	r2, #0
 800f746:	719a      	strb	r2, [r3, #6]
 800f748:	2200      	movs	r2, #0
 800f74a:	71da      	strb	r2, [r3, #7]
			*/
			/* Save options now, as they will be overwritten by memcpy */
			#if( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
				ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
			#endif
			memcpy( ( void *) &( pxUDPPacket->xEthernetHeader.xSourceAddress ), ( void * ) xDefaultPartUDPPacketHeader.ucBytes, sizeof( xDefaultPartUDPPacketHeader ) );
 800f74c:	69bb      	ldr	r3, [r7, #24]
 800f74e:	3306      	adds	r3, #6
 800f750:	4a32      	ldr	r2, [pc, #200]	; (800f81c <vProcessGeneratedUDPPacket+0x160>)
 800f752:	461d      	mov	r5, r3
 800f754:	4614      	mov	r4, r2
 800f756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f758:	6028      	str	r0, [r5, #0]
 800f75a:	6069      	str	r1, [r5, #4]
 800f75c:	60aa      	str	r2, [r5, #8]
 800f75e:	60eb      	str	r3, [r5, #12]
 800f760:	cc03      	ldmia	r4!, {r0, r1}
 800f762:	6128      	str	r0, [r5, #16]
 800f764:	6169      	str	r1, [r5, #20]

		#if ipconfigSUPPORT_OUTGOING_PINGS == 1
			if( pxNetworkBuffer->usPort == ipPACKET_CONTAINS_ICMP_DATA )
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	8c1b      	ldrh	r3, [r3, #32]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d10a      	bne.n	800f784 <vProcessGeneratedUDPPacket+0xc8>
			{
				pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	2201      	movs	r2, #1
 800f772:	725a      	strb	r2, [r3, #9]
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) );
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	69db      	ldr	r3, [r3, #28]
 800f778:	b29b      	uxth	r3, r3
 800f77a:	3314      	adds	r3, #20
 800f77c:	b29a      	uxth	r2, r3
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	805a      	strh	r2, [r3, #2]
 800f782:	e006      	b.n	800f792 <vProcessGeneratedUDPPacket+0xd6>
			}
			else
		#endif /* ipconfigSUPPORT_OUTGOING_PINGS */
			{
				pxIPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	69db      	ldr	r3, [r3, #28]
 800f788:	b29b      	uxth	r3, r3
 800f78a:	331c      	adds	r3, #28
 800f78c:	b29a      	uxth	r2, r3
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	805a      	strh	r2, [r3, #2]
			}

			/* The total transmit size adds on the Ethernet header. */
			pxNetworkBuffer->xDataLength = pxIPHeader->usLength + sizeof( EthernetHeader_t );
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	885b      	ldrh	r3, [r3, #2]
 800f796:	b29b      	uxth	r3, r3
 800f798:	f103 020e 	add.w	r2, r3, #14
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	61da      	str	r2, [r3, #28]
			pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	885b      	ldrh	r3, [r3, #2]
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	021b      	lsls	r3, r3, #8
 800f7a8:	b21a      	sxth	r2, r3
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	885b      	ldrh	r3, [r3, #2]
 800f7ae:	b29b      	uxth	r3, r3
 800f7b0:	0a1b      	lsrs	r3, r3, #8
 800f7b2:	b29b      	uxth	r3, r3
 800f7b4:	b21b      	sxth	r3, r3
 800f7b6:	4313      	orrs	r3, r2
 800f7b8:	b21b      	sxth	r3, r3
 800f7ba:	b29a      	uxth	r2, r3
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	805a      	strh	r2, [r3, #2]
			/* HT:endian: changed back to network endian */
			pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	695a      	ldr	r2, [r3, #20]
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	611a      	str	r2, [r3, #16]

			#if( ipconfigUSE_LLMNR == 1 )
			{
				/* LLMNR messages are typically used on a LAN and they're
				 * not supposed to cross routers */
				if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	695b      	ldr	r3, [r3, #20]
 800f7cc:	4a14      	ldr	r2, [pc, #80]	; (800f820 <vProcessGeneratedUDPPacket+0x164>)
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	d114      	bne.n	800f7fc <vProcessGeneratedUDPPacket+0x140>
				{
					pxIPHeader->ucTimeToLive = 0x01;
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	721a      	strb	r2, [r3, #8]
 800f7d8:	e010      	b.n	800f7fc <vProcessGeneratedUDPPacket+0x140>
					pxUDPPacket->xUDPHeader.usChecksum = 0u;
				}
			}
			#endif
		}
		else if( eReturned == eARPCacheMiss )
 800f7da:	7ffb      	ldrb	r3, [r7, #31]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d10b      	bne.n	800f7f8 <vProcessGeneratedUDPPacket+0x13c>
		{
			/* Add an entry to the ARP table with a null hardware address.
			This allows the ARP timer to know that an ARP reply is
			outstanding, and perform retransmissions if necessary. */
			vARPRefreshCacheEntry( NULL, ulIPAddress );
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	2000      	movs	r0, #0
 800f7e6:	f7f8 fee9 	bl	80085bc <vARPRefreshCacheEntry>

			/* Generate an ARP for the required IP address. */
			iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->ulIPAddress );
			pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800f7ea:	68fa      	ldr	r2, [r7, #12]
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	615a      	str	r2, [r3, #20]
			vARPGenerateRequestPacket( pxNetworkBuffer );
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f7f9 f935 	bl	8008a60 <vARPGenerateRequestPacket>
 800f7f6:	e001      	b.n	800f7fc <vProcessGeneratedUDPPacket+0x140>
		}
		else
		{
			/* The lookup indicated that an ARP request has already been
			sent out for the queried IP address. */
			eReturned = eCantSendPacket;
 800f7f8:	2302      	movs	r3, #2
 800f7fa:	77fb      	strb	r3, [r7, #31]
		}
	}

	if( eReturned != eCantSendPacket )
 800f7fc:	7ffb      	ldrb	r3, [r7, #31]
 800f7fe:	2b02      	cmp	r3, #2
 800f800:	d004      	beq.n	800f80c <vProcessGeneratedUDPPacket+0x150>
				pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
			}
		}
		#endif

		xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800f802:	2101      	movs	r1, #1
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f7f4 ffe7 	bl	80047d8 <xNetworkInterfaceOutput>
	{
		/* The packet can't be sent (DHCP not completed?).  Just drop the
		packet. */
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
	}
}
 800f80a:	e002      	b.n	800f812 <vProcessGeneratedUDPPacket+0x156>
		vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 f9a5 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
}
 800f812:	bf00      	nop
 800f814:	3720      	adds	r7, #32
 800f816:	46bd      	mov	sp, r7
 800f818:	bdb0      	pop	{r4, r5, r7, pc}
 800f81a:	bf00      	nop
 800f81c:	2000009c 	.word	0x2000009c
 800f820:	fc0000e0 	.word	0xfc0000e0

0800f824 <xProcessReceivedUDPPacket>:
/*-----------------------------------------------------------*/

BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t *pxNetworkBuffer, uint16_t usPort )
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b086      	sub	sp, #24
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	460b      	mov	r3, r1
 800f82e:	807b      	strh	r3, [r7, #2]
BaseType_t xReturn = pdPASS;
 800f830:	2301      	movs	r3, #1
 800f832:	617b      	str	r3, [r7, #20]
FreeRTOS_Socket_t *pxSocket;

UDPPacket_t *pxUDPPacket = (UDPPacket_t *) pxNetworkBuffer->pucEthernetBuffer;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	699b      	ldr	r3, [r3, #24]
 800f838:	613b      	str	r3, [r7, #16]

	pxSocket = pxUDPSocketLookup( usPort );
 800f83a:	887b      	ldrh	r3, [r7, #2]
 800f83c:	4618      	mov	r0, r3
 800f83e:	f7fc f817 	bl	800b870 <pxUDPSocketLookup>
 800f842:	60f8      	str	r0, [r7, #12]

	if( pxSocket )
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d042      	beq.n	800f8d0 <xProcessReceivedUDPPacket+0xac>
	{

		/* When refreshing the ARP cache with received UDP packets we must be
		careful;  hundreds of broadcast messages may pass and if we're not
		handling them, no use to fill the ARP cache with those IP addresses. */
		vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	1d9a      	adds	r2, r3, #6
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f854:	4619      	mov	r1, r3
 800f856:	4610      	mov	r0, r2
 800f858:	f7f8 feb0 	bl	80085bc <vARPRefreshCacheEntry>
				}
			}
		}
		#endif

		if( xReturn == pdPASS )
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	2b01      	cmp	r3, #1
 800f860:	d171      	bne.n	800f946 <xProcessReceivedUDPPacket+0x122>
		{
			vTaskSuspendAll();
 800f862:	f7f7 fe99 	bl	8007598 <vTaskSuspendAll>
			{
				if( xReturn == pdPASS )
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	2b01      	cmp	r3, #1
 800f86a:	d10a      	bne.n	800f882 <xProcessReceivedUDPPacket+0x5e>
				{
					taskENTER_CRITICAL();
 800f86c:	f7f6 fbee 	bl	800604c <vPortEnterCritical>
					{
						/* Add the network packet to the list of packets to be
						processed by the socket. */
						vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	3338      	adds	r3, #56	; 0x38
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	4611      	mov	r1, r2
 800f878:	4618      	mov	r0, r3
 800f87a:	f7f6 fa3b 	bl	8005cf4 <vListInsertEnd>
					}
					taskEXIT_CRITICAL();
 800f87e:	f7f6 fc13 	bl	80060a8 <vPortExitCritical>
				}
			}
			xTaskResumeAll();
 800f882:	f7f7 fe97 	bl	80075b4 <xTaskResumeAll>

			/* Set the socket's receive event */
			if( pxSocket->xEventGroup != NULL )
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	685b      	ldr	r3, [r3, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d005      	beq.n	800f89a <xProcessReceivedUDPPacket+0x76>
			{
				xEventGroupSetBits( pxSocket->xEventGroup, eSOCKET_RECEIVE );
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	2101      	movs	r1, #1
 800f894:	4618      	mov	r0, r3
 800f896:	f7f6 f925 	bl	8005ae4 <xEventGroupSetBits>
			}

			#if( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
			{
				if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & eSELECT_READ ) != 0 ) )
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d00c      	beq.n	800f8bc <xProcessReceivedUDPPacket+0x98>
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8a6:	f003 0301 	and.w	r3, r3, #1
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d006      	beq.n	800f8bc <xProcessReceivedUDPPacket+0x98>
				{
					xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, eSELECT_READ );
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	2101      	movs	r1, #1
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7f6 f914 	bl	8005ae4 <xEventGroupSetBits>
			}
			#endif

			#if( ipconfigUSE_DHCP == 1 )
			{
				if( xIsDHCPSocket( pxSocket ) )
 800f8bc:	68f8      	ldr	r0, [r7, #12]
 800f8be:	f7f9 f911 	bl	8008ae4 <xIsDHCPSocket>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d03e      	beq.n	800f946 <xProcessReceivedUDPPacket+0x122>
				{
					xSendEventToIPTask( eDHCPEvent );
 800f8c8:	2004      	movs	r0, #4
 800f8ca:	f7fa fd41 	bl	800a350 <xSendEventToIPTask>
 800f8ce:	e03a      	b.n	800f946 <xProcessReceivedUDPPacket+0x122>
		#if( ipconfigUSE_DNS == 1 )
			/* a DNS reply, check for the source port.  Although the DNS client
			does open a UDP socket to send a messages, this socket will be
			closed after a short timeout.  Messages that come late (after the
			socket is closed) will be treated here. */
			if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ipDNS_PORT )
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	021b      	lsls	r3, r3, #8
 800f8d8:	b21a      	sxth	r2, r3
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	0a1b      	lsrs	r3, r3, #8
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	b21b      	sxth	r3, r3
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	b21b      	sxth	r3, r3
 800f8ea:	2b35      	cmp	r3, #53	; 0x35
 800f8ec:	d10e      	bne.n	800f90c <xProcessReceivedUDPPacket+0xe8>
			{
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800f8ee:	693b      	ldr	r3, [r7, #16]
 800f8f0:	1d9a      	adds	r2, r3, #6
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	4610      	mov	r0, r2
 800f8fc:	f7f8 fe5e 	bl	80085bc <vARPRefreshCacheEntry>
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f7f9 fe5d 	bl	80095c0 <ulDNSHandlePacket>
 800f906:	4603      	mov	r3, r0
 800f908:	617b      	str	r3, [r7, #20]
 800f90a:	e01c      	b.n	800f946 <xProcessReceivedUDPPacket+0x122>
			else
		#endif

		#if( ipconfigUSE_LLMNR == 1 )
			/* a LLMNR request, check for the destination port. */
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 800f90c:	887b      	ldrh	r3, [r7, #2]
 800f90e:	f64e 3214 	movw	r2, #60180	; 0xeb14
 800f912:	4293      	cmp	r3, r2
 800f914:	d006      	beq.n	800f924 <xProcessReceivedUDPPacket+0x100>
				( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f91a:	b29b      	uxth	r3, r3
			if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 800f91c:	f64e 3214 	movw	r2, #60180	; 0xeb14
 800f920:	4293      	cmp	r3, r2
 800f922:	d10e      	bne.n	800f942 <xProcessReceivedUDPPacket+0x11e>
			{
				vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	1d9a      	adds	r2, r3, #6
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800f92e:	4619      	mov	r1, r3
 800f930:	4610      	mov	r0, r2
 800f932:	f7f8 fe43 	bl	80085bc <vARPRefreshCacheEntry>
				xReturn = ( BaseType_t )ulDNSHandlePacket( pxNetworkBuffer );
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f7f9 fe42 	bl	80095c0 <ulDNSHandlePacket>
 800f93c:	4603      	mov	r3, r0
 800f93e:	617b      	str	r3, [r7, #20]
 800f940:	e001      	b.n	800f946 <xProcessReceivedUDPPacket+0x122>
				xReturn = ( BaseType_t )ulNBNSHandlePacket( pxNetworkBuffer );
			}
			else
		#endif /* ipconfigUSE_NBNS */
		{
			xReturn = pdFAIL;
 800f942:	2300      	movs	r3, #0
 800f944:	617b      	str	r3, [r7, #20]
		}
	}

	return xReturn;
 800f946:	697b      	ldr	r3, [r7, #20]
}
 800f948:	4618      	mov	r0, r3
 800f94a:	3718      	adds	r7, #24
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
BaseType_t xReturn, x;

	/* Only initialise the buffers and their associated kernel objects if they
	have not been initialised before. */
	if( xNetworkBufferSemaphore == NULL )
 800f956:	4b37      	ldr	r3, [pc, #220]	; (800fa34 <xNetworkBuffersInitialise+0xe4>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d15c      	bne.n	800fa18 <xNetworkBuffersInitialise+0xc8>
	{
		xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 800f95e:	2119      	movs	r1, #25
 800f960:	2019      	movs	r0, #25
 800f962:	f7f6 ff23 	bl	80067ac <xQueueCreateCountingSemaphore>
 800f966:	4602      	mov	r2, r0
 800f968:	4b32      	ldr	r3, [pc, #200]	; (800fa34 <xNetworkBuffersInitialise+0xe4>)
 800f96a:	601a      	str	r2, [r3, #0]
		configASSERT( xNetworkBufferSemaphore );
 800f96c:	4b31      	ldr	r3, [pc, #196]	; (800fa34 <xNetworkBuffersInitialise+0xe4>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d109      	bne.n	800f988 <xNetworkBuffersInitialise+0x38>
 800f974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f978:	f383 8811 	msr	BASEPRI, r3
 800f97c:	f3bf 8f6f 	isb	sy
 800f980:	f3bf 8f4f 	dsb	sy
 800f984:	607b      	str	r3, [r7, #4]
 800f986:	e7fe      	b.n	800f986 <xNetworkBuffersInitialise+0x36>
		#if ( configQUEUE_REGISTRY_SIZE > 0 )
		{
			vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 800f988:	4b2a      	ldr	r3, [pc, #168]	; (800fa34 <xNetworkBuffersInitialise+0xe4>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	492a      	ldr	r1, [pc, #168]	; (800fa38 <xNetworkBuffersInitialise+0xe8>)
 800f98e:	4618      	mov	r0, r3
 800f990:	f7f7 fb7e 	bl	8007090 <vQueueAddToRegistry>
			vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
			vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
		}
		#endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

		if( xNetworkBufferSemaphore != NULL )
 800f994:	4b27      	ldr	r3, [pc, #156]	; (800fa34 <xNetworkBuffersInitialise+0xe4>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d03d      	beq.n	800fa18 <xNetworkBuffersInitialise+0xc8>
		{
			vListInitialise( &xFreeBuffersList );
 800f99c:	4827      	ldr	r0, [pc, #156]	; (800fa3c <xNetworkBuffersInitialise+0xec>)
 800f99e:	f7f6 f97c 	bl	8005c9a <vListInitialise>

			/* Initialise all the network buffers.  No storage is allocated to
			the buffers yet. */
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	60bb      	str	r3, [r7, #8]
 800f9a6:	e031      	b.n	800fa0c <xNetworkBuffersInitialise+0xbc>
			{
				/* Initialise and set the owner of the buffer list items. */
				xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 800f9a8:	4925      	ldr	r1, [pc, #148]	; (800fa40 <xNetworkBuffersInitialise+0xf0>)
 800f9aa:	68ba      	ldr	r2, [r7, #8]
 800f9ac:	4613      	mov	r3, r2
 800f9ae:	00db      	lsls	r3, r3, #3
 800f9b0:	4413      	add	r3, r2
 800f9b2:	009b      	lsls	r3, r3, #2
 800f9b4:	440b      	add	r3, r1
 800f9b6:	3318      	adds	r3, #24
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	601a      	str	r2, [r3, #0]
				vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 800f9bc:	68ba      	ldr	r2, [r7, #8]
 800f9be:	4613      	mov	r3, r2
 800f9c0:	00db      	lsls	r3, r3, #3
 800f9c2:	4413      	add	r3, r2
 800f9c4:	009b      	lsls	r3, r3, #2
 800f9c6:	4a1e      	ldr	r2, [pc, #120]	; (800fa40 <xNetworkBuffersInitialise+0xf0>)
 800f9c8:	4413      	add	r3, r2
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7f6 f985 	bl	8005cda <vListInitialiseItem>
				listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 800f9d0:	68ba      	ldr	r2, [r7, #8]
 800f9d2:	4613      	mov	r3, r2
 800f9d4:	00db      	lsls	r3, r3, #3
 800f9d6:	4413      	add	r3, r2
 800f9d8:	009b      	lsls	r3, r3, #2
 800f9da:	4a19      	ldr	r2, [pc, #100]	; (800fa40 <xNetworkBuffersInitialise+0xf0>)
 800f9dc:	1899      	adds	r1, r3, r2
 800f9de:	4818      	ldr	r0, [pc, #96]	; (800fa40 <xNetworkBuffersInitialise+0xf0>)
 800f9e0:	68ba      	ldr	r2, [r7, #8]
 800f9e2:	4613      	mov	r3, r2
 800f9e4:	00db      	lsls	r3, r3, #3
 800f9e6:	4413      	add	r3, r2
 800f9e8:	009b      	lsls	r3, r3, #2
 800f9ea:	4403      	add	r3, r0
 800f9ec:	330c      	adds	r3, #12
 800f9ee:	6019      	str	r1, [r3, #0]

				/* Currently, all buffers are available for use. */
				vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 800f9f0:	68ba      	ldr	r2, [r7, #8]
 800f9f2:	4613      	mov	r3, r2
 800f9f4:	00db      	lsls	r3, r3, #3
 800f9f6:	4413      	add	r3, r2
 800f9f8:	009b      	lsls	r3, r3, #2
 800f9fa:	4a11      	ldr	r2, [pc, #68]	; (800fa40 <xNetworkBuffersInitialise+0xf0>)
 800f9fc:	4413      	add	r3, r2
 800f9fe:	4619      	mov	r1, r3
 800fa00:	480e      	ldr	r0, [pc, #56]	; (800fa3c <xNetworkBuffersInitialise+0xec>)
 800fa02:	f7f6 f99b 	bl	8005d3c <vListInsert>
			for( x = 0; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	3301      	adds	r3, #1
 800fa0a:	60bb      	str	r3, [r7, #8]
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	2b18      	cmp	r3, #24
 800fa10:	ddca      	ble.n	800f9a8 <xNetworkBuffersInitialise+0x58>
			}

			uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 800fa12:	4b0c      	ldr	r3, [pc, #48]	; (800fa44 <xNetworkBuffersInitialise+0xf4>)
 800fa14:	2219      	movs	r2, #25
 800fa16:	601a      	str	r2, [r3, #0]
		}
	}

	if( xNetworkBufferSemaphore == NULL )
 800fa18:	4b06      	ldr	r3, [pc, #24]	; (800fa34 <xNetworkBuffersInitialise+0xe4>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d102      	bne.n	800fa26 <xNetworkBuffersInitialise+0xd6>
	{
		xReturn = pdFAIL;
 800fa20:	2300      	movs	r3, #0
 800fa22:	60fb      	str	r3, [r7, #12]
 800fa24:	e001      	b.n	800fa2a <xNetworkBuffersInitialise+0xda>
	}
	else
	{
		xReturn = pdPASS;
 800fa26:	2301      	movs	r3, #1
 800fa28:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3710      	adds	r7, #16
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}
 800fa34:	20004b80 	.word	0x20004b80
 800fa38:	08010dc8 	.word	0x08010dc8
 800fa3c:	200047e4 	.word	0x200047e4
 800fa40:	200047fc 	.word	0x200047fc
 800fa44:	200047f8 	.word	0x200047f8

0800fa48 <vReleaseNetworkBuffer>:
	return pucEthernetBuffer;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBuffer( uint8_t *pucEthernetBuffer )
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
	/* There is space before the Ethernet buffer in which a pointer to the
	network buffer that references this Ethernet buffer is stored.  Remove the
	space before freeing the buffer. */
	if( pucEthernetBuffer != NULL )
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d005      	beq.n	800fa62 <vReleaseNetworkBuffer+0x1a>
	{
		pucEthernetBuffer -= ipBUFFER_PADDING;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	3b0a      	subs	r3, #10
 800fa5a:	607b      	str	r3, [r7, #4]
		vPortFree( ( void * ) pucEthernetBuffer );
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7f6 fcd1 	bl	8006404 <vPortFree>
	}
}
 800fa62:	bf00      	nop
 800fa64:	3708      	adds	r7, #8
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
	...

0800fa6c <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t *pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks )
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b086      	sub	sp, #24
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	6039      	str	r1, [r7, #0]
NetworkBufferDescriptor_t *pxReturn = NULL;
 800fa76:	2300      	movs	r3, #0
 800fa78:	617b      	str	r3, [r7, #20]
size_t uxCount;

	if( ( xRequestedSizeBytes != 0u ) && ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d004      	beq.n	800fa8a <pxGetNetworkBufferWithDescriptor+0x1e>
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2b45      	cmp	r3, #69	; 0x45
 800fa84:	d801      	bhi.n	800fa8a <pxGetNetworkBufferWithDescriptor+0x1e>
	{
		/* ARP packets can replace application packets, so the storage must be
		at least large enough to hold an ARP. */
		xRequestedSizeBytes = baMINIMAL_BUFFER_SIZE;
 800fa86:	2346      	movs	r3, #70	; 0x46
 800fa88:	607b      	str	r3, [r7, #4]
	}
	xRequestedSizeBytes += 2u;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	3302      	adds	r3, #2
 800fa8e:	607b      	str	r3, [r7, #4]
	if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1u ) ) != 0u )
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f003 0303 	and.w	r3, r3, #3
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d004      	beq.n	800faa4 <pxGetNetworkBufferWithDescriptor+0x38>
	{
		xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1u ) ) + 1u;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f043 0303 	orr.w	r3, r3, #3
 800faa0:	3301      	adds	r3, #1
 800faa2:	607b      	str	r3, [r7, #4]
	}

	/* If there is a semaphore available, there is a network buffer available. */
	if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 800faa4:	4b2a      	ldr	r3, [pc, #168]	; (800fb50 <pxGetNetworkBufferWithDescriptor+0xe4>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	6839      	ldr	r1, [r7, #0]
 800faaa:	4618      	mov	r0, r3
 800faac:	f7f7 f886 	bl	8006bbc <xQueueSemaphoreTake>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b01      	cmp	r3, #1
 800fab4:	d146      	bne.n	800fb44 <pxGetNetworkBufferWithDescriptor+0xd8>
	{
		/* Protect the structure as it is accessed from tasks and interrupts. */
		taskENTER_CRITICAL();
 800fab6:	f7f6 fac9 	bl	800604c <vPortEnterCritical>
		{
			pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 800faba:	4b26      	ldr	r3, [pc, #152]	; (800fb54 <pxGetNetworkBufferWithDescriptor+0xe8>)
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	68db      	ldr	r3, [r3, #12]
 800fac0:	617b      	str	r3, [r7, #20]
			uxListRemove( &( pxReturn->xBufferListItem ) );
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7f6 f972 	bl	8005dae <uxListRemove>
		}
		taskEXIT_CRITICAL();
 800faca:	f7f6 faed 	bl	80060a8 <vPortExitCritical>

		/* Reading UBaseType_t, no critical section needed. */
		uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 800face:	4b21      	ldr	r3, [pc, #132]	; (800fb54 <pxGetNetworkBufferWithDescriptor+0xe8>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	613b      	str	r3, [r7, #16]

		if( uxMinimumFreeNetworkBuffers > uxCount )
 800fad4:	4b20      	ldr	r3, [pc, #128]	; (800fb58 <pxGetNetworkBufferWithDescriptor+0xec>)
 800fad6:	681a      	ldr	r2, [r3, #0]
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d902      	bls.n	800fae4 <pxGetNetworkBufferWithDescriptor+0x78>
		{
			uxMinimumFreeNetworkBuffers = uxCount;
 800fade:	4a1e      	ldr	r2, [pc, #120]	; (800fb58 <pxGetNetworkBufferWithDescriptor+0xec>)
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	6013      	str	r3, [r2, #0]
		}

		/* Allocate storage of exactly the requested size to the buffer. */
		configASSERT( pxReturn->pucEthernetBuffer == NULL );
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	699b      	ldr	r3, [r3, #24]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d009      	beq.n	800fb00 <pxGetNetworkBufferWithDescriptor+0x94>
 800faec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf0:	f383 8811 	msr	BASEPRI, r3
 800faf4:	f3bf 8f6f 	isb	sy
 800faf8:	f3bf 8f4f 	dsb	sy
 800fafc:	60fb      	str	r3, [r7, #12]
 800fafe:	e7fe      	b.n	800fafe <pxGetNetworkBufferWithDescriptor+0x92>
		if( xRequestedSizeBytes > 0 )
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d01e      	beq.n	800fb44 <pxGetNetworkBufferWithDescriptor+0xd8>
		{
			/* Extra space is obtained so a pointer to the network buffer can
			be stored at the beginning of the buffer. */
			pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	330a      	adds	r3, #10
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7f6 fbb8 	bl	8006280 <pvPortMalloc>
 800fb10:	4602      	mov	r2, r0
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	619a      	str	r2, [r3, #24]

			if( pxReturn->pucEthernetBuffer == NULL )
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	699b      	ldr	r3, [r3, #24]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d105      	bne.n	800fb2a <pxGetNetworkBufferWithDescriptor+0xbe>
			{
				/* The attempt to allocate storage for the buffer payload failed,
				so the network buffer structure cannot be used and must be
				released. */
				vReleaseNetworkBufferAndDescriptor( pxReturn );
 800fb1e:	6978      	ldr	r0, [r7, #20]
 800fb20:	f000 f81c 	bl	800fb5c <vReleaseNetworkBufferAndDescriptor>
				pxReturn = NULL;
 800fb24:	2300      	movs	r3, #0
 800fb26:	617b      	str	r3, [r7, #20]
 800fb28:	e00c      	b.n	800fb44 <pxGetNetworkBufferWithDescriptor+0xd8>
			{
				/* Store a pointer to the network buffer structure in the
				buffer storage area, then move the buffer pointer on past the
				stored pointer so the pointer value is not overwritten by the
				application when the buffer is used. */
				*( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	699b      	ldr	r3, [r3, #24]
 800fb2e:	697a      	ldr	r2, [r7, #20]
 800fb30:	601a      	str	r2, [r3, #0]
				pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	699b      	ldr	r3, [r3, #24]
 800fb36:	f103 020a 	add.w	r2, r3, #10
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	619a      	str	r2, [r3, #24]

				/* Store the actual size of the allocated buffer, which may be
				greater than the original requested size. */
				pxReturn->xDataLength = xRequestedSizeBytes;
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	687a      	ldr	r2, [r7, #4]
 800fb42:	61da      	str	r2, [r3, #28]
	else
	{
		iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
	}

	return pxReturn;
 800fb44:	697b      	ldr	r3, [r7, #20]
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3718      	adds	r7, #24
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	20004b80 	.word	0x20004b80
 800fb54:	200047e4 	.word	0x200047e4
 800fb58:	200047f8 	.word	0x200047f8

0800fb5c <vReleaseNetworkBufferAndDescriptor>:
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
	/* Ensure the buffer is returned to the list of free buffers before the
	counting semaphore is 'given' to say a buffer is available.  Release the
	storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
	IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
	MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
	vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	699b      	ldr	r3, [r3, #24]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7ff ff6d 	bl	800fa48 <vReleaseNetworkBuffer>
	pxNetworkBuffer->pucEthernetBuffer = NULL;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2200      	movs	r2, #0
 800fb72:	619a      	str	r2, [r3, #24]

	taskENTER_CRITICAL();
 800fb74:	f7f6 fa6a 	bl	800604c <vPortEnterCritical>
	{
		xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	691b      	ldr	r3, [r3, #16]
 800fb7c:	4a0f      	ldr	r2, [pc, #60]	; (800fbbc <vReleaseNetworkBufferAndDescriptor+0x60>)
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	bf0c      	ite	eq
 800fb82:	2301      	moveq	r3, #1
 800fb84:	2300      	movne	r3, #0
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	60fb      	str	r3, [r7, #12]

		if( xListItemAlreadyInFreeList == pdFALSE )
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d104      	bne.n	800fb9a <vReleaseNetworkBufferAndDescriptor+0x3e>
		{
			vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	4619      	mov	r1, r3
 800fb94:	4809      	ldr	r0, [pc, #36]	; (800fbbc <vReleaseNetworkBufferAndDescriptor+0x60>)
 800fb96:	f7f6 f8ad 	bl	8005cf4 <vListInsertEnd>
		}
	}
	taskEXIT_CRITICAL();
 800fb9a:	f7f6 fa85 	bl	80060a8 <vPortExitCritical>

	if( xListItemAlreadyInFreeList == pdFALSE )
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d106      	bne.n	800fbb2 <vReleaseNetworkBufferAndDescriptor+0x56>
	{
		xSemaphoreGive( xNetworkBufferSemaphore );
 800fba4:	4b06      	ldr	r3, [pc, #24]	; (800fbc0 <vReleaseNetworkBufferAndDescriptor+0x64>)
 800fba6:	6818      	ldr	r0, [r3, #0]
 800fba8:	2300      	movs	r3, #0
 800fbaa:	2200      	movs	r2, #0
 800fbac:	2100      	movs	r1, #0
 800fbae:	f7f6 fe2f 	bl	8006810 <xQueueGenericSend>
	}

	iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
}
 800fbb2:	bf00      	nop
 800fbb4:	3710      	adds	r7, #16
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}
 800fbba:	bf00      	nop
 800fbbc:	200047e4 	.word	0x200047e4
 800fbc0:	20004b80 	.word	0x20004b80

0800fbc4 <main>:
static void MX_GPIO_Init(void);
void StartDefaultTask(void const * argument);
void ipInitHandlerTask( void *pvParameters );

int main(void)
{
 800fbc4:	b5b0      	push	{r4, r5, r7, lr}
 800fbc6:	b088      	sub	sp, #32
 800fbc8:	af02      	add	r7, sp, #8
  HAL_Init();
 800fbca:	f7f0 fc99 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 800fbce:	f000 f8a5 	bl	800fd1c <SystemClock_Config>
  MX_GPIO_Init();
 800fbd2:	f000 f917 	bl	800fe04 <MX_GPIO_Init>

  /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
  are created in the vApplicationIPNetworkEventHook() hook function
  below.  The hook function is called when the network connects. */

  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800fbd6:	4b0e      	ldr	r3, [pc, #56]	; (800fc10 <main+0x4c>)
 800fbd8:	1d3c      	adds	r4, r7, #4
 800fbda:	461d      	mov	r5, r3
 800fbdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbe0:	682b      	ldr	r3, [r5, #0]
 800fbe2:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800fbe4:	1d3b      	adds	r3, r7, #4
 800fbe6:	2100      	movs	r1, #0
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7f5 fe1e 	bl	800582a <osThreadCreate>
 800fbee:	4602      	mov	r2, r0
 800fbf0:	4b08      	ldr	r3, [pc, #32]	; (800fc14 <main+0x50>)
 800fbf2:	601a      	str	r2, [r3, #0]
  xTaskCreate( ipInitHandlerTask, "IPINIT",  configIPINIT_TASK_STACK_SIZE , NULL, configMAX_PRIORITIES - 1, &xipInitTaskHandle );
 800fbf4:	4b08      	ldr	r3, [pc, #32]	; (800fc18 <main+0x54>)
 800fbf6:	9301      	str	r3, [sp, #4]
 800fbf8:	2306      	movs	r3, #6
 800fbfa:	9300      	str	r3, [sp, #0]
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc02:	4906      	ldr	r1, [pc, #24]	; (800fc1c <main+0x58>)
 800fc04:	4806      	ldr	r0, [pc, #24]	; (800fc20 <main+0x5c>)
 800fc06:	f7f7 fa95 	bl	8007134 <xTaskCreate>

  osKernelStart();
 800fc0a:	f7f5 fe07 	bl	800581c <osKernelStart>
  
  while (1)
 800fc0e:	e7fe      	b.n	800fc0e <main+0x4a>
 800fc10:	08010de8 	.word	0x08010de8
 800fc14:	200058b0 	.word	0x200058b0
 800fc18:	2000583c 	.word	0x2000583c
 800fc1c:	08010dd4 	.word	0x08010dd4
 800fc20:	0800fc25 	.word	0x0800fc25

0800fc24 <ipInitHandlerTask>:

  }
}

void ipInitHandlerTask( void *pvParameters )
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b084      	sub	sp, #16
 800fc28:	af02      	add	r7, sp, #8
 800fc2a:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
    ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 800fc2c:	f04f 31ff 	mov.w	r1, #4294967295
 800fc30:	2000      	movs	r0, #0
 800fc32:	f7f8 fb05 	bl	8008240 <ulTaskNotifyTake>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800fc36:	2201      	movs	r2, #1
 800fc38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fc3c:	4808      	ldr	r0, [pc, #32]	; (800fc60 <ipInitHandlerTask+0x3c>)
 800fc3e:	f7f0 ff6d 	bl	8000b1c <HAL_GPIO_WritePin>
	FreeRTOS_IPInit( ucIPAddress,
 800fc42:	4b08      	ldr	r3, [pc, #32]	; (800fc64 <ipInitHandlerTask+0x40>)
 800fc44:	9300      	str	r3, [sp, #0]
 800fc46:	4b08      	ldr	r3, [pc, #32]	; (800fc68 <ipInitHandlerTask+0x44>)
 800fc48:	4a08      	ldr	r2, [pc, #32]	; (800fc6c <ipInitHandlerTask+0x48>)
 800fc4a:	4909      	ldr	r1, [pc, #36]	; (800fc70 <ipInitHandlerTask+0x4c>)
 800fc4c:	4809      	ldr	r0, [pc, #36]	; (800fc74 <ipInitHandlerTask+0x50>)
 800fc4e:	f7fa fa95 	bl	800a17c <FreeRTOS_IPInit>
				   ucNetMask,
				   ucGatewayAddress,
				   ucDNSServerAddress,
				   ucMACAddress );
	vTaskDelete( NULL );
 800fc52:	2000      	movs	r0, #0
 800fc54:	f7f7 fb98 	bl	8007388 <vTaskDelete>
}
 800fc58:	bf00      	nop
 800fc5a:	3708      	adds	r7, #8
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	40020c00 	.word	0x40020c00
 800fc64:	200000b4 	.word	0x200000b4
 800fc68:	08010f68 	.word	0x08010f68
 800fc6c:	08010f64 	.word	0x08010f64
 800fc70:	08010f60 	.word	0x08010f60
 800fc74:	08010f5c 	.word	0x08010f5c

0800fc78 <vApplicationPingReplyHook>:

/*-----------------------------------------------------------*/

void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b083      	sub	sp, #12
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	4603      	mov	r3, r0
 800fc80:	460a      	mov	r2, r1
 800fc82:	71fb      	strb	r3, [r7, #7]
 800fc84:	4613      	mov	r3, r2
 800fc86:	80bb      	strh	r3, [r7, #4]
}
 800fc88:	bf00      	nop
 800fc8a:	370c      	adds	r7, #12
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc92:	4770      	bx	lr

0800fc94 <vApplicationIPNetworkEventHook>:


/* Called by FreeRTOS+TCP when the network connects or disconnects.  Disconnect
events are only received if implemented in the MAC driver. */
void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 800fc94:	b480      	push	{r7}
 800fc96:	b083      	sub	sp, #12
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	71fb      	strb	r3, [r7, #7]

}
 800fc9e:	bf00      	nop
 800fca0:	370c      	adds	r7, #12
 800fca2:	46bd      	mov	sp, r7
 800fca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca8:	4770      	bx	lr
	...

0800fcac <pcApplicationHostnameHook>:

const char *pcApplicationHostnameHook( void )
{
 800fcac:	b480      	push	{r7}
 800fcae:	af00      	add	r7, sp, #0
	/* Assign the name "rtosdemo" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return mainHOST_NAME;
 800fcb0:	4b02      	ldr	r3, [pc, #8]	; (800fcbc <pcApplicationHostnameHook+0x10>)
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcba:	4770      	bx	lr
 800fcbc:	08010dfc 	.word	0x08010dfc

0800fcc0 <uxRand>:

UBaseType_t uxRand( void )
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	af00      	add	r7, sp, #0
	return( ( int ) ( rand() >> 16UL ) & 0x7fffUL );
 800fcc4:	f000 ff26 	bl	8010b14 <rand>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	141b      	asrs	r3, r3, #16
 800fccc:	f3c3 030e 	ubfx	r3, r3, #0, #15
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <xApplicationDNSQueryHook>:



BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b084      	sub	sp, #16
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 800fcdc:	f7ff ffe6 	bl	800fcac <pcApplicationHostnameHook>
 800fce0:	4603      	mov	r3, r0
 800fce2:	4619      	mov	r1, r3
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f000 ff4f 	bl	8010b88 <strcasecmp>
 800fcea:	4603      	mov	r3, r0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d102      	bne.n	800fcf6 <xApplicationDNSQueryHook+0x22>
	{
		xReturn = pdPASS;
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	60fb      	str	r3, [r7, #12]
 800fcf4:	e00b      	b.n	800fd0e <xApplicationDNSQueryHook+0x3a>
	}
	else if( strcasecmp( pcName, mainDEVICE_NICK_NAME ) == 0 )
 800fcf6:	4908      	ldr	r1, [pc, #32]	; (800fd18 <xApplicationDNSQueryHook+0x44>)
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f000 ff45 	bl	8010b88 <strcasecmp>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d102      	bne.n	800fd0a <xApplicationDNSQueryHook+0x36>
	{
		xReturn = pdPASS;
 800fd04:	2301      	movs	r3, #1
 800fd06:	60fb      	str	r3, [r7, #12]
 800fd08:	e001      	b.n	800fd0e <xApplicationDNSQueryHook+0x3a>
	}
	else
	{
		xReturn = pdFAIL;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3710      	adds	r7, #16
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	08010e08 	.word	0x08010e08

0800fd1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b094      	sub	sp, #80	; 0x50
 800fd20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800fd22:	2300      	movs	r3, #0
 800fd24:	60bb      	str	r3, [r7, #8]
 800fd26:	4a33      	ldr	r2, [pc, #204]	; (800fdf4 <SystemClock_Config+0xd8>)
 800fd28:	4b32      	ldr	r3, [pc, #200]	; (800fdf4 <SystemClock_Config+0xd8>)
 800fd2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd30:	6413      	str	r3, [r2, #64]	; 0x40
 800fd32:	4b30      	ldr	r3, [pc, #192]	; (800fdf4 <SystemClock_Config+0xd8>)
 800fd34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd3a:	60bb      	str	r3, [r7, #8]
 800fd3c:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800fd3e:	2300      	movs	r3, #0
 800fd40:	607b      	str	r3, [r7, #4]
 800fd42:	4a2d      	ldr	r2, [pc, #180]	; (800fdf8 <SystemClock_Config+0xdc>)
 800fd44:	4b2c      	ldr	r3, [pc, #176]	; (800fdf8 <SystemClock_Config+0xdc>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fd4c:	6013      	str	r3, [r2, #0]
 800fd4e:	4b2a      	ldr	r3, [pc, #168]	; (800fdf8 <SystemClock_Config+0xdc>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fd56:	607b      	str	r3, [r7, #4]
 800fd58:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800fd5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fd62:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800fd64:	2302      	movs	r3, #2
 800fd66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800fd68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fd6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800fd6e:	2304      	movs	r3, #4
 800fd70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800fd72:	2360      	movs	r3, #96	; 0x60
 800fd74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800fd76:	2306      	movs	r3, #6
 800fd78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800fd7a:	2304      	movs	r3, #4
 800fd7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800fd7e:	f107 0320 	add.w	r3, r7, #32
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7f1 ffac 	bl	8001ce0 <HAL_RCC_OscConfig>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d003      	beq.n	800fd96 <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800fd8e:	21d4      	movs	r1, #212	; 0xd4
 800fd90:	481a      	ldr	r0, [pc, #104]	; (800fdfc <SystemClock_Config+0xe0>)
 800fd92:	f000 f8bf 	bl	800ff14 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800fd96:	230f      	movs	r3, #15
 800fd98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800fd9a:	2302      	movs	r3, #2
 800fd9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800fda2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800fda6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800fdac:	f107 030c 	add.w	r3, r7, #12
 800fdb0:	2101      	movs	r1, #1
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7f2 f9d6 	bl	8002164 <HAL_RCC_ClockConfig>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d003      	beq.n	800fdc6 <SystemClock_Config+0xaa>
  {
    _Error_Handler(__FILE__, __LINE__);
 800fdbe:	21e2      	movs	r1, #226	; 0xe2
 800fdc0:	480e      	ldr	r0, [pc, #56]	; (800fdfc <SystemClock_Config+0xe0>)
 800fdc2:	f000 f8a7 	bl	800ff14 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800fdc6:	f7f2 fb87 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 800fdca:	4602      	mov	r2, r0
 800fdcc:	4b0c      	ldr	r3, [pc, #48]	; (800fe00 <SystemClock_Config+0xe4>)
 800fdce:	fba3 2302 	umull	r2, r3, r3, r2
 800fdd2:	099b      	lsrs	r3, r3, #6
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7f0 fcf6 	bl	80007c6 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800fdda:	2004      	movs	r0, #4
 800fddc:	f7f0 fd00 	bl	80007e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800fde0:	2200      	movs	r2, #0
 800fde2:	210f      	movs	r1, #15
 800fde4:	f04f 30ff 	mov.w	r0, #4294967295
 800fde8:	f7f0 fcc3 	bl	8000772 <HAL_NVIC_SetPriority>
}
 800fdec:	bf00      	nop
 800fdee:	3750      	adds	r7, #80	; 0x50
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	40023800 	.word	0x40023800
 800fdf8:	40007000 	.word	0x40007000
 800fdfc:	08010e10 	.word	0x08010e10
 800fe00:	10624dd3 	.word	0x10624dd3

0800fe04 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
*/

static void MX_GPIO_Init(void)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b088      	sub	sp, #32
 800fe08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	60bb      	str	r3, [r7, #8]
 800fe0e:	4a2b      	ldr	r2, [pc, #172]	; (800febc <MX_GPIO_Init+0xb8>)
 800fe10:	4b2a      	ldr	r3, [pc, #168]	; (800febc <MX_GPIO_Init+0xb8>)
 800fe12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe18:	6313      	str	r3, [r2, #48]	; 0x30
 800fe1a:	4b28      	ldr	r3, [pc, #160]	; (800febc <MX_GPIO_Init+0xb8>)
 800fe1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe22:	60bb      	str	r3, [r7, #8]
 800fe24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800fe26:	2300      	movs	r3, #0
 800fe28:	607b      	str	r3, [r7, #4]
 800fe2a:	4a24      	ldr	r2, [pc, #144]	; (800febc <MX_GPIO_Init+0xb8>)
 800fe2c:	4b23      	ldr	r3, [pc, #140]	; (800febc <MX_GPIO_Init+0xb8>)
 800fe2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe30:	f043 0308 	orr.w	r3, r3, #8
 800fe34:	6313      	str	r3, [r2, #48]	; 0x30
 800fe36:	4b21      	ldr	r3, [pc, #132]	; (800febc <MX_GPIO_Init+0xb8>)
 800fe38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe3a:	f003 0308 	and.w	r3, r3, #8
 800fe3e:	607b      	str	r3, [r7, #4]
 800fe40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe42:	2300      	movs	r3, #0
 800fe44:	603b      	str	r3, [r7, #0]
 800fe46:	4a1d      	ldr	r2, [pc, #116]	; (800febc <MX_GPIO_Init+0xb8>)
 800fe48:	4b1c      	ldr	r3, [pc, #112]	; (800febc <MX_GPIO_Init+0xb8>)
 800fe4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe4c:	f043 0301 	orr.w	r3, r3, #1
 800fe50:	6313      	str	r3, [r2, #48]	; 0x30
 800fe52:	4b1a      	ldr	r3, [pc, #104]	; (800febc <MX_GPIO_Init+0xb8>)
 800fe54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe56:	f003 0301 	and.w	r3, r3, #1
 800fe5a:	603b      	str	r3, [r7, #0]
 800fe5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800fe5e:	2200      	movs	r2, #0
 800fe60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fe64:	4816      	ldr	r0, [pc, #88]	; (800fec0 <MX_GPIO_Init+0xbc>)
 800fe66:	f7f0 fe59 	bl	8000b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800fe6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fe70:	2301      	movs	r3, #1
 800fe72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe74:	2300      	movs	r3, #0
 800fe76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800fe7c:	f107 030c 	add.w	r3, r7, #12
 800fe80:	4619      	mov	r1, r3
 800fe82:	480f      	ldr	r0, [pc, #60]	; (800fec0 <MX_GPIO_Init+0xbc>)
 800fe84:	f7f0 fcc8 	bl	8000818 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800fe88:	2200      	movs	r2, #0
 800fe8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fe8e:	480c      	ldr	r0, [pc, #48]	; (800fec0 <MX_GPIO_Init+0xbc>)
 800fe90:	f7f0 fe44 	bl	8000b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800fe94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fe98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fea2:	2300      	movs	r3, #0
 800fea4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800fea6:	f107 030c 	add.w	r3, r7, #12
 800feaa:	4619      	mov	r1, r3
 800feac:	4804      	ldr	r0, [pc, #16]	; (800fec0 <MX_GPIO_Init+0xbc>)
 800feae:	f7f0 fcb3 	bl	8000818 <HAL_GPIO_Init>

}
 800feb2:	bf00      	nop
 800feb4:	3720      	adds	r7, #32
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	40023800 	.word	0x40023800
 800fec0:	40020c00 	.word	0x40020c00

0800fec4 <StartDefaultTask>:
/* USER CODE END 4 */

/* StartDefaultTask function */

void StartDefaultTask(void const * argument)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800fecc:	f000 f93c 	bl	8010148 <MX_USB_DEVICE_Init>
  osDelay(2000);
 800fed0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800fed4:	f7f5 fcd0 	bl	8005878 <osDelay>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800fed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fedc:	4803      	ldr	r0, [pc, #12]	; (800feec <StartDefaultTask+0x28>)
 800fede:	f7f0 fe36 	bl	8000b4e <HAL_GPIO_TogglePin>
    osDelay(1000);
 800fee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fee6:	f7f5 fcc7 	bl	8005878 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800feea:	e7f5      	b.n	800fed8 <StartDefaultTask+0x14>
 800feec:	40020c00 	.word	0x40020c00

0800fef0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	4a04      	ldr	r2, [pc, #16]	; (800ff10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800fefe:	4293      	cmp	r3, r2
 800ff00:	d101      	bne.n	800ff06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800ff02:	f7f0 fb1f 	bl	8000544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800ff06:	bf00      	nop
 800ff08:	3708      	adds	r7, #8
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	40010000 	.word	0x40010000

0800ff14 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800ff14:	b480      	push	{r7}
 800ff16:	b083      	sub	sp, #12
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800ff1e:	e7fe      	b.n	800ff1e <_Error_Handler+0xa>

0800ff20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b082      	sub	sp, #8
 800ff24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ff26:	2300      	movs	r3, #0
 800ff28:	607b      	str	r3, [r7, #4]
 800ff2a:	4a25      	ldr	r2, [pc, #148]	; (800ffc0 <HAL_MspInit+0xa0>)
 800ff2c:	4b24      	ldr	r3, [pc, #144]	; (800ffc0 <HAL_MspInit+0xa0>)
 800ff2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ff34:	6453      	str	r3, [r2, #68]	; 0x44
 800ff36:	4b22      	ldr	r3, [pc, #136]	; (800ffc0 <HAL_MspInit+0xa0>)
 800ff38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff3e:	607b      	str	r3, [r7, #4]
 800ff40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ff42:	2300      	movs	r3, #0
 800ff44:	603b      	str	r3, [r7, #0]
 800ff46:	4a1e      	ldr	r2, [pc, #120]	; (800ffc0 <HAL_MspInit+0xa0>)
 800ff48:	4b1d      	ldr	r3, [pc, #116]	; (800ffc0 <HAL_MspInit+0xa0>)
 800ff4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff50:	6413      	str	r3, [r2, #64]	; 0x40
 800ff52:	4b1b      	ldr	r3, [pc, #108]	; (800ffc0 <HAL_MspInit+0xa0>)
 800ff54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ff5a:	603b      	str	r3, [r7, #0]
 800ff5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ff5e:	2003      	movs	r0, #3
 800ff60:	f7f0 fbfc 	bl	800075c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800ff64:	2200      	movs	r2, #0
 800ff66:	2100      	movs	r1, #0
 800ff68:	f06f 000b 	mvn.w	r0, #11
 800ff6c:	f7f0 fc01 	bl	8000772 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800ff70:	2200      	movs	r2, #0
 800ff72:	2100      	movs	r1, #0
 800ff74:	f06f 000a 	mvn.w	r0, #10
 800ff78:	f7f0 fbfb 	bl	8000772 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	2100      	movs	r1, #0
 800ff80:	f06f 0009 	mvn.w	r0, #9
 800ff84:	f7f0 fbf5 	bl	8000772 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800ff88:	2200      	movs	r2, #0
 800ff8a:	2100      	movs	r1, #0
 800ff8c:	f06f 0004 	mvn.w	r0, #4
 800ff90:	f7f0 fbef 	bl	8000772 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800ff94:	2200      	movs	r2, #0
 800ff96:	2100      	movs	r1, #0
 800ff98:	f06f 0003 	mvn.w	r0, #3
 800ff9c:	f7f0 fbe9 	bl	8000772 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	210f      	movs	r1, #15
 800ffa4:	f06f 0001 	mvn.w	r0, #1
 800ffa8:	f7f0 fbe3 	bl	8000772 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800ffac:	2200      	movs	r2, #0
 800ffae:	210f      	movs	r1, #15
 800ffb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffb4:	f7f0 fbdd 	bl	8000772 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ffb8:	bf00      	nop
 800ffba:	3708      	adds	r7, #8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	40023800 	.word	0x40023800

0800ffc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b08c      	sub	sp, #48	; 0x30
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ffcc:	2300      	movs	r3, #0
 800ffce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	6879      	ldr	r1, [r7, #4]
 800ffd8:	2019      	movs	r0, #25
 800ffda:	f7f0 fbca 	bl	8000772 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800ffde:	2019      	movs	r0, #25
 800ffe0:	f7f0 fbe3 	bl	80007aa <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	60fb      	str	r3, [r7, #12]
 800ffe8:	4a1e      	ldr	r2, [pc, #120]	; (8010064 <HAL_InitTick+0xa0>)
 800ffea:	4b1e      	ldr	r3, [pc, #120]	; (8010064 <HAL_InitTick+0xa0>)
 800ffec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffee:	f043 0301 	orr.w	r3, r3, #1
 800fff2:	6453      	str	r3, [r2, #68]	; 0x44
 800fff4:	4b1b      	ldr	r3, [pc, #108]	; (8010064 <HAL_InitTick+0xa0>)
 800fff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fff8:	f003 0301 	and.w	r3, r3, #1
 800fffc:	60fb      	str	r3, [r7, #12]
 800fffe:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010000:	f107 0210 	add.w	r2, r7, #16
 8010004:	f107 0314 	add.w	r3, r7, #20
 8010008:	4611      	mov	r1, r2
 801000a:	4618      	mov	r0, r3
 801000c:	f7f2 fa84 	bl	8002518 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8010010:	f7f2 fa6e 	bl	80024f0 <HAL_RCC_GetPCLK2Freq>
 8010014:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8010016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010018:	4a13      	ldr	r2, [pc, #76]	; (8010068 <HAL_InitTick+0xa4>)
 801001a:	fba2 2303 	umull	r2, r3, r2, r3
 801001e:	0c9b      	lsrs	r3, r3, #18
 8010020:	3b01      	subs	r3, #1
 8010022:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8010024:	4b11      	ldr	r3, [pc, #68]	; (801006c <HAL_InitTick+0xa8>)
 8010026:	4a12      	ldr	r2, [pc, #72]	; (8010070 <HAL_InitTick+0xac>)
 8010028:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 801002a:	4b10      	ldr	r3, [pc, #64]	; (801006c <HAL_InitTick+0xa8>)
 801002c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010030:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8010032:	4a0e      	ldr	r2, [pc, #56]	; (801006c <HAL_InitTick+0xa8>)
 8010034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010036:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8010038:	4b0c      	ldr	r3, [pc, #48]	; (801006c <HAL_InitTick+0xa8>)
 801003a:	2200      	movs	r2, #0
 801003c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801003e:	4b0b      	ldr	r3, [pc, #44]	; (801006c <HAL_InitTick+0xa8>)
 8010040:	2200      	movs	r2, #0
 8010042:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8010044:	4809      	ldr	r0, [pc, #36]	; (801006c <HAL_InitTick+0xa8>)
 8010046:	f7f2 fa99 	bl	800257c <HAL_TIM_Base_Init>
 801004a:	4603      	mov	r3, r0
 801004c:	2b00      	cmp	r3, #0
 801004e:	d104      	bne.n	801005a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8010050:	4806      	ldr	r0, [pc, #24]	; (801006c <HAL_InitTick+0xa8>)
 8010052:	f7f2 fac8 	bl	80025e6 <HAL_TIM_Base_Start_IT>
 8010056:	4603      	mov	r3, r0
 8010058:	e000      	b.n	801005c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 801005a:	2301      	movs	r3, #1
}
 801005c:	4618      	mov	r0, r3
 801005e:	3730      	adds	r7, #48	; 0x30
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	40023800 	.word	0x40023800
 8010068:	431bde83 	.word	0x431bde83
 801006c:	200058b4 	.word	0x200058b4
 8010070:	40010000 	.word	0x40010000

08010074 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8010074:	b480      	push	{r7}
 8010076:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8010078:	bf00      	nop
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr

08010082 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8010082:	b480      	push	{r7}
 8010084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010086:	e7fe      	b.n	8010086 <HardFault_Handler+0x4>

08010088 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8010088:	b480      	push	{r7}
 801008a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801008c:	e7fe      	b.n	801008c <MemManage_Handler+0x4>

0801008e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 801008e:	b480      	push	{r7}
 8010090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010092:	e7fe      	b.n	8010092 <BusFault_Handler+0x4>

08010094 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8010094:	b480      	push	{r7}
 8010096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010098:	e7fe      	b.n	8010098 <UsageFault_Handler+0x4>

0801009a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 801009a:	b480      	push	{r7}
 801009c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801009e:	bf00      	nop
 80100a0:	46bd      	mov	sp, r7
 80100a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a6:	4770      	bx	lr

080100a8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80100ac:	f7f5 fbf8 	bl	80058a0 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80100b0:	bf00      	nop
 80100b2:	bd80      	pop	{r7, pc}

080100b4 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80100b8:	4802      	ldr	r0, [pc, #8]	; (80100c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80100ba:	f7f2 faaf 	bl	800261c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80100be:	bf00      	nop
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	bf00      	nop
 80100c4:	200058b4 	.word	0x200058b4

080100c8 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80100cc:	4802      	ldr	r0, [pc, #8]	; (80100d8 <OTG_FS_IRQHandler+0x10>)
 80100ce:	f7f0 fe79 	bl	8000dc4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80100d2:	bf00      	nop
 80100d4:	bd80      	pop	{r7, pc}
 80100d6:	bf00      	nop
 80100d8:	20005b14 	.word	0x20005b14

080100dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80100dc:	b480      	push	{r7}
 80100de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80100e0:	4a16      	ldr	r2, [pc, #88]	; (801013c <SystemInit+0x60>)
 80100e2:	4b16      	ldr	r3, [pc, #88]	; (801013c <SystemInit+0x60>)
 80100e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80100ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80100f0:	4a13      	ldr	r2, [pc, #76]	; (8010140 <SystemInit+0x64>)
 80100f2:	4b13      	ldr	r3, [pc, #76]	; (8010140 <SystemInit+0x64>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f043 0301 	orr.w	r3, r3, #1
 80100fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80100fc:	4b10      	ldr	r3, [pc, #64]	; (8010140 <SystemInit+0x64>)
 80100fe:	2200      	movs	r2, #0
 8010100:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010102:	4a0f      	ldr	r2, [pc, #60]	; (8010140 <SystemInit+0x64>)
 8010104:	4b0e      	ldr	r3, [pc, #56]	; (8010140 <SystemInit+0x64>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 801010c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010110:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010112:	4b0b      	ldr	r3, [pc, #44]	; (8010140 <SystemInit+0x64>)
 8010114:	4a0b      	ldr	r2, [pc, #44]	; (8010144 <SystemInit+0x68>)
 8010116:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010118:	4a09      	ldr	r2, [pc, #36]	; (8010140 <SystemInit+0x64>)
 801011a:	4b09      	ldr	r3, [pc, #36]	; (8010140 <SystemInit+0x64>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010122:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010124:	4b06      	ldr	r3, [pc, #24]	; (8010140 <SystemInit+0x64>)
 8010126:	2200      	movs	r2, #0
 8010128:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801012a:	4b04      	ldr	r3, [pc, #16]	; (801013c <SystemInit+0x60>)
 801012c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010130:	609a      	str	r2, [r3, #8]
#endif
}
 8010132:	bf00      	nop
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr
 801013c:	e000ed00 	.word	0xe000ed00
 8010140:	40023800 	.word	0x40023800
 8010144:	24003010 	.word	0x24003010

08010148 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 801014c:	2200      	movs	r2, #0
 801014e:	4906      	ldr	r1, [pc, #24]	; (8010168 <MX_USB_DEVICE_Init+0x20>)
 8010150:	4806      	ldr	r0, [pc, #24]	; (801016c <MX_USB_DEVICE_Init+0x24>)
 8010152:	f7f4 fbeb 	bl	800492c <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8010156:	4906      	ldr	r1, [pc, #24]	; (8010170 <MX_USB_DEVICE_Init+0x28>)
 8010158:	4804      	ldr	r0, [pc, #16]	; (801016c <MX_USB_DEVICE_Init+0x24>)
 801015a:	f7f4 fc12 	bl	8004982 <USBD_RegisterClass>

  //USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);

  USBD_Start(&hUsbDeviceFS);
 801015e:	4803      	ldr	r0, [pc, #12]	; (801016c <MX_USB_DEVICE_Init+0x24>)
 8010160:	f7f4 fc29 	bl	80049b6 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010164:	bf00      	nop
 8010166:	bd80      	pop	{r7, pc}
 8010168:	200000c0 	.word	0x200000c0
 801016c:	200058f0 	.word	0x200058f0
 8010170:	20000004 	.word	0x20000004

08010174 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b088      	sub	sp, #32
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010184:	d139      	bne.n	80101fa <HAL_PCD_MspInit+0x86>
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8010186:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 801018a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801018c:	2302      	movs	r3, #2
 801018e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010190:	2300      	movs	r3, #0
 8010192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010194:	2303      	movs	r3, #3
 8010196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010198:	230a      	movs	r3, #10
 801019a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801019c:	f107 030c 	add.w	r3, r7, #12
 80101a0:	4619      	mov	r1, r3
 80101a2:	4818      	ldr	r0, [pc, #96]	; (8010204 <HAL_PCD_MspInit+0x90>)
 80101a4:	f7f0 fb38 	bl	8000818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80101a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80101ae:	2300      	movs	r3, #0
 80101b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101b2:	2300      	movs	r3, #0
 80101b4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80101b6:	f107 030c 	add.w	r3, r7, #12
 80101ba:	4619      	mov	r1, r3
 80101bc:	4811      	ldr	r0, [pc, #68]	; (8010204 <HAL_PCD_MspInit+0x90>)
 80101be:	f7f0 fb2b 	bl	8000818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80101c2:	4a11      	ldr	r2, [pc, #68]	; (8010208 <HAL_PCD_MspInit+0x94>)
 80101c4:	4b10      	ldr	r3, [pc, #64]	; (8010208 <HAL_PCD_MspInit+0x94>)
 80101c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101cc:	6353      	str	r3, [r2, #52]	; 0x34
 80101ce:	2300      	movs	r3, #0
 80101d0:	60bb      	str	r3, [r7, #8]
 80101d2:	4a0d      	ldr	r2, [pc, #52]	; (8010208 <HAL_PCD_MspInit+0x94>)
 80101d4:	4b0c      	ldr	r3, [pc, #48]	; (8010208 <HAL_PCD_MspInit+0x94>)
 80101d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80101dc:	6453      	str	r3, [r2, #68]	; 0x44
 80101de:	4b0a      	ldr	r3, [pc, #40]	; (8010208 <HAL_PCD_MspInit+0x94>)
 80101e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80101e6:	60bb      	str	r3, [r7, #8]
 80101e8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80101ea:	2200      	movs	r2, #0
 80101ec:	2105      	movs	r1, #5
 80101ee:	2043      	movs	r0, #67	; 0x43
 80101f0:	f7f0 fabf 	bl	8000772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80101f4:	2043      	movs	r0, #67	; 0x43
 80101f6:	f7f0 fad8 	bl	80007aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80101fa:	bf00      	nop
 80101fc:	3720      	adds	r7, #32
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}
 8010202:	bf00      	nop
 8010204:	40020000 	.word	0x40020000
 8010208:	40023800 	.word	0x40023800

0801020c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b082      	sub	sp, #8
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8010220:	4619      	mov	r1, r3
 8010222:	4610      	mov	r0, r2
 8010224:	f7f4 fc10 	bl	8004a48 <USBD_LL_SetupStage>
}
 8010228:	bf00      	nop
 801022a:	3708      	adds	r7, #8
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	460b      	mov	r3, r1
 801023a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 8010242:	78fa      	ldrb	r2, [r7, #3]
 8010244:	6879      	ldr	r1, [r7, #4]
 8010246:	4613      	mov	r3, r2
 8010248:	00db      	lsls	r3, r3, #3
 801024a:	1a9b      	subs	r3, r3, r2
 801024c:	009b      	lsls	r3, r3, #2
 801024e:	440b      	add	r3, r1
 8010250:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8010254:	681a      	ldr	r2, [r3, #0]
 8010256:	78fb      	ldrb	r3, [r7, #3]
 8010258:	4619      	mov	r1, r3
 801025a:	f7f4 fc3f 	bl	8004adc <USBD_LL_DataOutStage>
}
 801025e:	bf00      	nop
 8010260:	3708      	adds	r7, #8
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}

08010266 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010266:	b580      	push	{r7, lr}
 8010268:	b082      	sub	sp, #8
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
 801026e:	460b      	mov	r3, r1
 8010270:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 8010278:	78fa      	ldrb	r2, [r7, #3]
 801027a:	6879      	ldr	r1, [r7, #4]
 801027c:	4613      	mov	r3, r2
 801027e:	00db      	lsls	r3, r3, #3
 8010280:	1a9b      	subs	r3, r3, r2
 8010282:	009b      	lsls	r3, r3, #2
 8010284:	440b      	add	r3, r1
 8010286:	3344      	adds	r3, #68	; 0x44
 8010288:	681a      	ldr	r2, [r3, #0]
 801028a:	78fb      	ldrb	r3, [r7, #3]
 801028c:	4619      	mov	r1, r3
 801028e:	f7f4 fc80 	bl	8004b92 <USBD_LL_DataInStage>
}
 8010292:	bf00      	nop
 8010294:	3708      	adds	r7, #8
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}

0801029a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 801029a:	b580      	push	{r7, lr}
 801029c:	b082      	sub	sp, #8
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7f4 fd66 	bl	8004d7a <USBD_LL_SOF>
}
 80102ae:	bf00      	nop
 80102b0:	3708      	adds	r7, #8
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}

080102b6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80102b6:	b580      	push	{r7, lr}
 80102b8:	b084      	sub	sp, #16
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80102be:	2301      	movs	r3, #1
 80102c0:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	68db      	ldr	r3, [r3, #12]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d002      	beq.n	80102d0 <HAL_PCD_ResetCallback+0x1a>
 80102ca:	2b02      	cmp	r3, #2
 80102cc:	d003      	beq.n	80102d6 <HAL_PCD_ResetCallback+0x20>
 80102ce:	e005      	b.n	80102dc <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 80102d0:	2300      	movs	r3, #0
 80102d2:	73fb      	strb	r3, [r7, #15]
    break;
 80102d4:	e005      	b.n	80102e2 <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 80102d6:	2301      	movs	r3, #1
 80102d8:	73fb      	strb	r3, [r7, #15]
    break;
 80102da:	e002      	b.n	80102e2 <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 80102dc:	2301      	movs	r3, #1
 80102de:	73fb      	strb	r3, [r7, #15]
    break;    
 80102e0:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80102e8:	7bfa      	ldrb	r2, [r7, #15]
 80102ea:	4611      	mov	r1, r2
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7f4 fd0e 	bl	8004d0e <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7f4 fcd9 	bl	8004cb0 <USBD_LL_Reset>
}
 80102fe:	bf00      	nop
 8010300:	3710      	adds	r7, #16
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
	...

08010308 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8010316:	4618      	mov	r0, r3
 8010318:	f7f4 fd09 	bl	8004d2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010324:	461a      	mov	r2, r3
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	f043 0301 	orr.w	r3, r3, #1
 8010334:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6a1b      	ldr	r3, [r3, #32]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d005      	beq.n	801034a <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801033e:	4a05      	ldr	r2, [pc, #20]	; (8010354 <HAL_PCD_SuspendCallback+0x4c>)
 8010340:	4b04      	ldr	r3, [pc, #16]	; (8010354 <HAL_PCD_SuspendCallback+0x4c>)
 8010342:	691b      	ldr	r3, [r3, #16]
 8010344:	f043 0306 	orr.w	r3, r3, #6
 8010348:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801034a:	bf00      	nop
 801034c:	3708      	adds	r7, #8
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}
 8010352:	bf00      	nop
 8010354:	e000ed00 	.word	0xe000ed00

08010358 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8010366:	4618      	mov	r0, r3
 8010368:	f7f4 fcf6 	bl	8004d58 <USBD_LL_Resume>
}
 801036c:	bf00      	nop
 801036e:	3708      	adds	r7, #8
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b082      	sub	sp, #8
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	460b      	mov	r3, r1
 801037e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8010386:	78fa      	ldrb	r2, [r7, #3]
 8010388:	4611      	mov	r1, r2
 801038a:	4618      	mov	r0, r3
 801038c:	f7f4 fd1c 	bl	8004dc8 <USBD_LL_IsoOUTIncomplete>
}
 8010390:	bf00      	nop
 8010392:	3708      	adds	r7, #8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}

08010398 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b082      	sub	sp, #8
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	460b      	mov	r3, r1
 80103a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80103aa:	78fa      	ldrb	r2, [r7, #3]
 80103ac:	4611      	mov	r1, r2
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7f4 fcfd 	bl	8004dae <USBD_LL_IsoINIncomplete>
}
 80103b4:	bf00      	nop
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80103ca:	4618      	mov	r0, r3
 80103cc:	f7f4 fd09 	bl	8004de2 <USBD_LL_DevConnected>
}
 80103d0:	bf00      	nop
 80103d2:	3708      	adds	r7, #8
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7f4 fd06 	bl	8004df8 <USBD_LL_DevDisconnected>
}
 80103ec:	bf00      	nop
 80103ee:	3708      	adds	r7, #8
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	781b      	ldrb	r3, [r3, #0]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d147      	bne.n	8010494 <USBD_LL_Init+0xa0>
	  /* Link the driver to the stack. */
	  hpcd_USB_OTG_FS.pData = pdev;
 8010404:	4a26      	ldr	r2, [pc, #152]	; (80104a0 <USBD_LL_Init+0xac>)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
	  pdev->pData = &hpcd_USB_OTG_FS;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	4a24      	ldr	r2, [pc, #144]	; (80104a0 <USBD_LL_Init+0xac>)
 8010410:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

	  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010414:	4b22      	ldr	r3, [pc, #136]	; (80104a0 <USBD_LL_Init+0xac>)
 8010416:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801041a:	601a      	str	r2, [r3, #0]
	  hpcd_USB_OTG_FS.Init.dev_endpoints = 3;
 801041c:	4b20      	ldr	r3, [pc, #128]	; (80104a0 <USBD_LL_Init+0xac>)
 801041e:	2203      	movs	r2, #3
 8010420:	605a      	str	r2, [r3, #4]
	  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010422:	4b1f      	ldr	r3, [pc, #124]	; (80104a0 <USBD_LL_Init+0xac>)
 8010424:	2202      	movs	r2, #2
 8010426:	60da      	str	r2, [r3, #12]
	  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010428:	4b1d      	ldr	r3, [pc, #116]	; (80104a0 <USBD_LL_Init+0xac>)
 801042a:	2200      	movs	r2, #0
 801042c:	611a      	str	r2, [r3, #16]
	  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 801042e:	4b1c      	ldr	r3, [pc, #112]	; (80104a0 <USBD_LL_Init+0xac>)
 8010430:	2200      	movs	r2, #0
 8010432:	615a      	str	r2, [r3, #20]
	  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010434:	4b1a      	ldr	r3, [pc, #104]	; (80104a0 <USBD_LL_Init+0xac>)
 8010436:	2202      	movs	r2, #2
 8010438:	619a      	str	r2, [r3, #24]
	  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801043a:	4b19      	ldr	r3, [pc, #100]	; (80104a0 <USBD_LL_Init+0xac>)
 801043c:	2200      	movs	r2, #0
 801043e:	61da      	str	r2, [r3, #28]
	  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010440:	4b17      	ldr	r3, [pc, #92]	; (80104a0 <USBD_LL_Init+0xac>)
 8010442:	2200      	movs	r2, #0
 8010444:	621a      	str	r2, [r3, #32]
	  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010446:	4b16      	ldr	r3, [pc, #88]	; (80104a0 <USBD_LL_Init+0xac>)
 8010448:	2200      	movs	r2, #0
 801044a:	625a      	str	r2, [r3, #36]	; 0x24
	  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801044c:	4b14      	ldr	r3, [pc, #80]	; (80104a0 <USBD_LL_Init+0xac>)
 801044e:	2200      	movs	r2, #0
 8010450:	62da      	str	r2, [r3, #44]	; 0x2c
	  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010452:	4b13      	ldr	r3, [pc, #76]	; (80104a0 <USBD_LL_Init+0xac>)
 8010454:	2200      	movs	r2, #0
 8010456:	631a      	str	r2, [r3, #48]	; 0x30
	  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK){
 8010458:	4811      	ldr	r0, [pc, #68]	; (80104a0 <USBD_LL_Init+0xac>)
 801045a:	f7f0 fb8a 	bl	8000b72 <HAL_PCD_Init>
 801045e:	4603      	mov	r3, r0
 8010460:	2b00      	cmp	r3, #0
 8010462:	d004      	beq.n	801046e <USBD_LL_Init+0x7a>
		_Error_Handler(__FILE__, __LINE__);
 8010464:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8010468:	480e      	ldr	r0, [pc, #56]	; (80104a4 <USBD_LL_Init+0xb0>)
 801046a:	f7ff fd53 	bl	800ff14 <_Error_Handler>
	  }

	  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801046e:	2180      	movs	r1, #128	; 0x80
 8010470:	480b      	ldr	r0, [pc, #44]	; (80104a0 <USBD_LL_Init+0xac>)
 8010472:	f7f1 fc23 	bl	8001cbc <HAL_PCDEx_SetRxFiFo>
	  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010476:	2240      	movs	r2, #64	; 0x40
 8010478:	2100      	movs	r1, #0
 801047a:	4809      	ldr	r0, [pc, #36]	; (80104a0 <USBD_LL_Init+0xac>)
 801047c:	f7f1 fbd3 	bl	8001c26 <HAL_PCDEx_SetTxFiFo>
	  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x40);
 8010480:	2240      	movs	r2, #64	; 0x40
 8010482:	2101      	movs	r1, #1
 8010484:	4806      	ldr	r0, [pc, #24]	; (80104a0 <USBD_LL_Init+0xac>)
 8010486:	f7f1 fbce 	bl	8001c26 <HAL_PCDEx_SetTxFiFo>
	  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 0x64);
 801048a:	2264      	movs	r2, #100	; 0x64
 801048c:	2102      	movs	r1, #2
 801048e:	4804      	ldr	r0, [pc, #16]	; (80104a0 <USBD_LL_Init+0xac>)
 8010490:	f7f1 fbc9 	bl	8001c26 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010494:	2300      	movs	r3, #0
}
 8010496:	4618      	mov	r0, r3
 8010498:	3708      	adds	r7, #8
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop
 80104a0:	20005b14 	.word	0x20005b14
 80104a4:	08010e20 	.word	0x08010e20

080104a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b084      	sub	sp, #16
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104b0:	2300      	movs	r3, #0
 80104b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104b4:	2300      	movs	r3, #0
 80104b6:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80104be:	4618      	mov	r0, r3
 80104c0:	f7f0 fc5e 	bl	8000d80 <HAL_PCD_Start>
 80104c4:	4603      	mov	r3, r0
 80104c6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80104c8:	7bbb      	ldrb	r3, [r7, #14]
 80104ca:	2b03      	cmp	r3, #3
 80104cc:	d816      	bhi.n	80104fc <USBD_LL_Start+0x54>
 80104ce:	a201      	add	r2, pc, #4	; (adr r2, 80104d4 <USBD_LL_Start+0x2c>)
 80104d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104d4:	080104e5 	.word	0x080104e5
 80104d8:	080104eb 	.word	0x080104eb
 80104dc:	080104f1 	.word	0x080104f1
 80104e0:	080104f7 	.word	0x080104f7
    case HAL_OK :
      usb_status = USBD_OK;
 80104e4:	2300      	movs	r3, #0
 80104e6:	73fb      	strb	r3, [r7, #15]
    break;
 80104e8:	e00b      	b.n	8010502 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80104ea:	2302      	movs	r3, #2
 80104ec:	73fb      	strb	r3, [r7, #15]
    break;
 80104ee:	e008      	b.n	8010502 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80104f0:	2301      	movs	r3, #1
 80104f2:	73fb      	strb	r3, [r7, #15]
    break;
 80104f4:	e005      	b.n	8010502 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80104f6:	2302      	movs	r3, #2
 80104f8:	73fb      	strb	r3, [r7, #15]
    break;
 80104fa:	e002      	b.n	8010502 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80104fc:	2302      	movs	r3, #2
 80104fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010500:	bf00      	nop
  }
  return usb_status;
 8010502:	7bfb      	ldrb	r3, [r7, #15]
}
 8010504:	4618      	mov	r0, r3
 8010506:	3710      	adds	r7, #16
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b084      	sub	sp, #16
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	4608      	mov	r0, r1
 8010516:	4611      	mov	r1, r2
 8010518:	461a      	mov	r2, r3
 801051a:	4603      	mov	r3, r0
 801051c:	70fb      	strb	r3, [r7, #3]
 801051e:	460b      	mov	r3, r1
 8010520:	70bb      	strb	r3, [r7, #2]
 8010522:	4613      	mov	r3, r2
 8010524:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010526:	2300      	movs	r3, #0
 8010528:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801052a:	2300      	movs	r3, #0
 801052c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8010534:	78bb      	ldrb	r3, [r7, #2]
 8010536:	883a      	ldrh	r2, [r7, #0]
 8010538:	78f9      	ldrb	r1, [r7, #3]
 801053a:	f7f1 f8ee 	bl	800171a <HAL_PCD_EP_Open>
 801053e:	4603      	mov	r3, r0
 8010540:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010542:	7bbb      	ldrb	r3, [r7, #14]
 8010544:	2b03      	cmp	r3, #3
 8010546:	d817      	bhi.n	8010578 <USBD_LL_OpenEP+0x6c>
 8010548:	a201      	add	r2, pc, #4	; (adr r2, 8010550 <USBD_LL_OpenEP+0x44>)
 801054a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801054e:	bf00      	nop
 8010550:	08010561 	.word	0x08010561
 8010554:	08010567 	.word	0x08010567
 8010558:	0801056d 	.word	0x0801056d
 801055c:	08010573 	.word	0x08010573
    case HAL_OK :
      usb_status = USBD_OK;
 8010560:	2300      	movs	r3, #0
 8010562:	73fb      	strb	r3, [r7, #15]
    break;
 8010564:	e00b      	b.n	801057e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010566:	2302      	movs	r3, #2
 8010568:	73fb      	strb	r3, [r7, #15]
    break;
 801056a:	e008      	b.n	801057e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801056c:	2301      	movs	r3, #1
 801056e:	73fb      	strb	r3, [r7, #15]
    break;
 8010570:	e005      	b.n	801057e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010572:	2302      	movs	r3, #2
 8010574:	73fb      	strb	r3, [r7, #15]
    break;
 8010576:	e002      	b.n	801057e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8010578:	2302      	movs	r3, #2
 801057a:	73fb      	strb	r3, [r7, #15]
    break;
 801057c:	bf00      	nop
  }
  return usb_status;
 801057e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010580:	4618      	mov	r0, r3
 8010582:	3710      	adds	r7, #16
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}

08010588 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b084      	sub	sp, #16
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	460b      	mov	r3, r1
 8010592:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010594:	2300      	movs	r3, #0
 8010596:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010598:	2300      	movs	r3, #0
 801059a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80105a2:	78fa      	ldrb	r2, [r7, #3]
 80105a4:	4611      	mov	r1, r2
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7f1 f91f 	bl	80017ea <HAL_PCD_EP_Close>
 80105ac:	4603      	mov	r3, r0
 80105ae:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 80105b0:	7bbb      	ldrb	r3, [r7, #14]
 80105b2:	2b03      	cmp	r3, #3
 80105b4:	d816      	bhi.n	80105e4 <USBD_LL_CloseEP+0x5c>
 80105b6:	a201      	add	r2, pc, #4	; (adr r2, 80105bc <USBD_LL_CloseEP+0x34>)
 80105b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105bc:	080105cd 	.word	0x080105cd
 80105c0:	080105d3 	.word	0x080105d3
 80105c4:	080105d9 	.word	0x080105d9
 80105c8:	080105df 	.word	0x080105df
    case HAL_OK :
      usb_status = USBD_OK;
 80105cc:	2300      	movs	r3, #0
 80105ce:	73fb      	strb	r3, [r7, #15]
    break;
 80105d0:	e00b      	b.n	80105ea <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80105d2:	2302      	movs	r3, #2
 80105d4:	73fb      	strb	r3, [r7, #15]
    break;
 80105d6:	e008      	b.n	80105ea <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80105d8:	2301      	movs	r3, #1
 80105da:	73fb      	strb	r3, [r7, #15]
    break;
 80105dc:	e005      	b.n	80105ea <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80105de:	2302      	movs	r3, #2
 80105e0:	73fb      	strb	r3, [r7, #15]
    break;
 80105e2:	e002      	b.n	80105ea <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80105e4:	2302      	movs	r3, #2
 80105e6:	73fb      	strb	r3, [r7, #15]
    break;
 80105e8:	bf00      	nop
  }
  return usb_status;  
 80105ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3710      	adds	r7, #16
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b084      	sub	sp, #16
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	460b      	mov	r3, r1
 80105fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010600:	2300      	movs	r3, #0
 8010602:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010604:	2300      	movs	r3, #0
 8010606:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801060e:	78fa      	ldrb	r2, [r7, #3]
 8010610:	4611      	mov	r1, r2
 8010612:	4618      	mov	r0, r3
 8010614:	f7f1 f9df 	bl	80019d6 <HAL_PCD_EP_SetStall>
 8010618:	4603      	mov	r3, r0
 801061a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801061c:	7bbb      	ldrb	r3, [r7, #14]
 801061e:	2b03      	cmp	r3, #3
 8010620:	d816      	bhi.n	8010650 <USBD_LL_StallEP+0x5c>
 8010622:	a201      	add	r2, pc, #4	; (adr r2, 8010628 <USBD_LL_StallEP+0x34>)
 8010624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010628:	08010639 	.word	0x08010639
 801062c:	0801063f 	.word	0x0801063f
 8010630:	08010645 	.word	0x08010645
 8010634:	0801064b 	.word	0x0801064b
    case HAL_OK :
      usb_status = USBD_OK;
 8010638:	2300      	movs	r3, #0
 801063a:	73fb      	strb	r3, [r7, #15]
    break;
 801063c:	e00b      	b.n	8010656 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801063e:	2302      	movs	r3, #2
 8010640:	73fb      	strb	r3, [r7, #15]
    break;
 8010642:	e008      	b.n	8010656 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010644:	2301      	movs	r3, #1
 8010646:	73fb      	strb	r3, [r7, #15]
    break;
 8010648:	e005      	b.n	8010656 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801064a:	2302      	movs	r3, #2
 801064c:	73fb      	strb	r3, [r7, #15]
    break;
 801064e:	e002      	b.n	8010656 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010650:	2302      	movs	r3, #2
 8010652:	73fb      	strb	r3, [r7, #15]
    break;
 8010654:	bf00      	nop
  }
  return usb_status;  
 8010656:	7bfb      	ldrb	r3, [r7, #15]
}
 8010658:	4618      	mov	r0, r3
 801065a:	3710      	adds	r7, #16
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b084      	sub	sp, #16
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	460b      	mov	r3, r1
 801066a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801066c:	2300      	movs	r3, #0
 801066e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010670:	2300      	movs	r3, #0
 8010672:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801067a:	78fa      	ldrb	r2, [r7, #3]
 801067c:	4611      	mov	r1, r2
 801067e:	4618      	mov	r0, r3
 8010680:	f7f1 fa04 	bl	8001a8c <HAL_PCD_EP_ClrStall>
 8010684:	4603      	mov	r3, r0
 8010686:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8010688:	7bbb      	ldrb	r3, [r7, #14]
 801068a:	2b03      	cmp	r3, #3
 801068c:	d816      	bhi.n	80106bc <USBD_LL_ClearStallEP+0x5c>
 801068e:	a201      	add	r2, pc, #4	; (adr r2, 8010694 <USBD_LL_ClearStallEP+0x34>)
 8010690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010694:	080106a5 	.word	0x080106a5
 8010698:	080106ab 	.word	0x080106ab
 801069c:	080106b1 	.word	0x080106b1
 80106a0:	080106b7 	.word	0x080106b7
    case HAL_OK :
      usb_status = USBD_OK;
 80106a4:	2300      	movs	r3, #0
 80106a6:	73fb      	strb	r3, [r7, #15]
    break;
 80106a8:	e00b      	b.n	80106c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80106aa:	2302      	movs	r3, #2
 80106ac:	73fb      	strb	r3, [r7, #15]
    break;
 80106ae:	e008      	b.n	80106c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80106b0:	2301      	movs	r3, #1
 80106b2:	73fb      	strb	r3, [r7, #15]
    break;
 80106b4:	e005      	b.n	80106c2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80106b6:	2302      	movs	r3, #2
 80106b8:	73fb      	strb	r3, [r7, #15]
    break;
 80106ba:	e002      	b.n	80106c2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80106bc:	2302      	movs	r3, #2
 80106be:	73fb      	strb	r3, [r7, #15]
    break;
 80106c0:	bf00      	nop
  }
  return usb_status; 
 80106c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3710      	adds	r7, #16
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106cc:	b480      	push	{r7}
 80106ce:	b085      	sub	sp, #20
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	460b      	mov	r3, r1
 80106d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80106de:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80106e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	da0b      	bge.n	8010700 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80106e8:	78fb      	ldrb	r3, [r7, #3]
 80106ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80106ee:	68f9      	ldr	r1, [r7, #12]
 80106f0:	4613      	mov	r3, r2
 80106f2:	00db      	lsls	r3, r3, #3
 80106f4:	1a9b      	subs	r3, r3, r2
 80106f6:	009b      	lsls	r3, r3, #2
 80106f8:	440b      	add	r3, r1
 80106fa:	333a      	adds	r3, #58	; 0x3a
 80106fc:	781b      	ldrb	r3, [r3, #0]
 80106fe:	e00b      	b.n	8010718 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8010700:	78fb      	ldrb	r3, [r7, #3]
 8010702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010706:	68f9      	ldr	r1, [r7, #12]
 8010708:	4613      	mov	r3, r2
 801070a:	00db      	lsls	r3, r3, #3
 801070c:	1a9b      	subs	r3, r3, r2
 801070e:	009b      	lsls	r3, r3, #2
 8010710:	440b      	add	r3, r1
 8010712:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8010716:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010718:	4618      	mov	r0, r3
 801071a:	3714      	adds	r7, #20
 801071c:	46bd      	mov	sp, r7
 801071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010722:	4770      	bx	lr

08010724 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b084      	sub	sp, #16
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	460b      	mov	r3, r1
 801072e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010730:	2300      	movs	r3, #0
 8010732:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010734:	2300      	movs	r3, #0
 8010736:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801073e:	78fa      	ldrb	r2, [r7, #3]
 8010740:	4611      	mov	r1, r2
 8010742:	4618      	mov	r0, r3
 8010744:	f7f0 ffc8 	bl	80016d8 <HAL_PCD_SetAddress>
 8010748:	4603      	mov	r3, r0
 801074a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 801074c:	7bbb      	ldrb	r3, [r7, #14]
 801074e:	2b03      	cmp	r3, #3
 8010750:	d816      	bhi.n	8010780 <USBD_LL_SetUSBAddress+0x5c>
 8010752:	a201      	add	r2, pc, #4	; (adr r2, 8010758 <USBD_LL_SetUSBAddress+0x34>)
 8010754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010758:	08010769 	.word	0x08010769
 801075c:	0801076f 	.word	0x0801076f
 8010760:	08010775 	.word	0x08010775
 8010764:	0801077b 	.word	0x0801077b
    case HAL_OK :
      usb_status = USBD_OK;
 8010768:	2300      	movs	r3, #0
 801076a:	73fb      	strb	r3, [r7, #15]
    break;
 801076c:	e00b      	b.n	8010786 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801076e:	2302      	movs	r3, #2
 8010770:	73fb      	strb	r3, [r7, #15]
    break;
 8010772:	e008      	b.n	8010786 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010774:	2301      	movs	r3, #1
 8010776:	73fb      	strb	r3, [r7, #15]
    break;
 8010778:	e005      	b.n	8010786 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801077a:	2302      	movs	r3, #2
 801077c:	73fb      	strb	r3, [r7, #15]
    break;
 801077e:	e002      	b.n	8010786 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8010780:	2302      	movs	r3, #2
 8010782:	73fb      	strb	r3, [r7, #15]
    break;
 8010784:	bf00      	nop
  }
  return usb_status;  
 8010786:	7bfb      	ldrb	r3, [r7, #15]
}
 8010788:	4618      	mov	r0, r3
 801078a:	3710      	adds	r7, #16
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b086      	sub	sp, #24
 8010794:	af00      	add	r7, sp, #0
 8010796:	60f8      	str	r0, [r7, #12]
 8010798:	607a      	str	r2, [r7, #4]
 801079a:	461a      	mov	r2, r3
 801079c:	460b      	mov	r3, r1
 801079e:	72fb      	strb	r3, [r7, #11]
 80107a0:	4613      	mov	r3, r2
 80107a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107a4:	2300      	movs	r3, #0
 80107a6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107a8:	2300      	movs	r3, #0
 80107aa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80107b2:	893b      	ldrh	r3, [r7, #8]
 80107b4:	7af9      	ldrb	r1, [r7, #11]
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	f7f1 f8c4 	bl	8001944 <HAL_PCD_EP_Transmit>
 80107bc:	4603      	mov	r3, r0
 80107be:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80107c0:	7dbb      	ldrb	r3, [r7, #22]
 80107c2:	2b03      	cmp	r3, #3
 80107c4:	d816      	bhi.n	80107f4 <USBD_LL_Transmit+0x64>
 80107c6:	a201      	add	r2, pc, #4	; (adr r2, 80107cc <USBD_LL_Transmit+0x3c>)
 80107c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107cc:	080107dd 	.word	0x080107dd
 80107d0:	080107e3 	.word	0x080107e3
 80107d4:	080107e9 	.word	0x080107e9
 80107d8:	080107ef 	.word	0x080107ef
    case HAL_OK :
      usb_status = USBD_OK;
 80107dc:	2300      	movs	r3, #0
 80107de:	75fb      	strb	r3, [r7, #23]
    break;
 80107e0:	e00b      	b.n	80107fa <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80107e2:	2302      	movs	r3, #2
 80107e4:	75fb      	strb	r3, [r7, #23]
    break;
 80107e6:	e008      	b.n	80107fa <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80107e8:	2301      	movs	r3, #1
 80107ea:	75fb      	strb	r3, [r7, #23]
    break;
 80107ec:	e005      	b.n	80107fa <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80107ee:	2302      	movs	r3, #2
 80107f0:	75fb      	strb	r3, [r7, #23]
    break;
 80107f2:	e002      	b.n	80107fa <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80107f4:	2302      	movs	r3, #2
 80107f6:	75fb      	strb	r3, [r7, #23]
    break;
 80107f8:	bf00      	nop
  }
  return usb_status;    
 80107fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80107fc:	4618      	mov	r0, r3
 80107fe:	3718      	adds	r7, #24
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}

08010804 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b086      	sub	sp, #24
 8010808:	af00      	add	r7, sp, #0
 801080a:	60f8      	str	r0, [r7, #12]
 801080c:	607a      	str	r2, [r7, #4]
 801080e:	461a      	mov	r2, r3
 8010810:	460b      	mov	r3, r1
 8010812:	72fb      	strb	r3, [r7, #11]
 8010814:	4613      	mov	r3, r2
 8010816:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010818:	2300      	movs	r3, #0
 801081a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801081c:	2300      	movs	r3, #0
 801081e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8010826:	893b      	ldrh	r3, [r7, #8]
 8010828:	7af9      	ldrb	r1, [r7, #11]
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	f7f1 f827 	bl	800187e <HAL_PCD_EP_Receive>
 8010830:	4603      	mov	r3, r0
 8010832:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8010834:	7dbb      	ldrb	r3, [r7, #22]
 8010836:	2b03      	cmp	r3, #3
 8010838:	d816      	bhi.n	8010868 <USBD_LL_PrepareReceive+0x64>
 801083a:	a201      	add	r2, pc, #4	; (adr r2, 8010840 <USBD_LL_PrepareReceive+0x3c>)
 801083c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010840:	08010851 	.word	0x08010851
 8010844:	08010857 	.word	0x08010857
 8010848:	0801085d 	.word	0x0801085d
 801084c:	08010863 	.word	0x08010863
    case HAL_OK :
      usb_status = USBD_OK;
 8010850:	2300      	movs	r3, #0
 8010852:	75fb      	strb	r3, [r7, #23]
    break;
 8010854:	e00b      	b.n	801086e <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010856:	2302      	movs	r3, #2
 8010858:	75fb      	strb	r3, [r7, #23]
    break;
 801085a:	e008      	b.n	801086e <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801085c:	2301      	movs	r3, #1
 801085e:	75fb      	strb	r3, [r7, #23]
    break;
 8010860:	e005      	b.n	801086e <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010862:	2302      	movs	r3, #2
 8010864:	75fb      	strb	r3, [r7, #23]
    break;
 8010866:	e002      	b.n	801086e <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8010868:	2302      	movs	r3, #2
 801086a:	75fb      	strb	r3, [r7, #23]
    break;
 801086c:	bf00      	nop
  }
  return usb_status; 
 801086e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010870:	4618      	mov	r0, r3
 8010872:	3718      	adds	r7, #24
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}

08010878 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	460b      	mov	r3, r1
 8010882:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801088a:	78fa      	ldrb	r2, [r7, #3]
 801088c:	4611      	mov	r1, r2
 801088e:	4618      	mov	r0, r3
 8010890:	f7f1 f83f 	bl	8001912 <HAL_PCD_EP_GetRxCount>
 8010894:	4603      	mov	r3, r0
}
 8010896:	4618      	mov	r0, r3
 8010898:	3708      	adds	r7, #8
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}
	...

080108a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108a0:	b480      	push	{r7}
 80108a2:	b083      	sub	sp, #12
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	4603      	mov	r3, r0
 80108a8:	6039      	str	r1, [r7, #0]
 80108aa:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	2212      	movs	r2, #18
 80108b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80108b2:	4b03      	ldr	r3, [pc, #12]	; (80108c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	370c      	adds	r7, #12
 80108b8:	46bd      	mov	sp, r7
 80108ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108be:	4770      	bx	lr
 80108c0:	200000dc 	.word	0x200000dc

080108c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b083      	sub	sp, #12
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	4603      	mov	r3, r0
 80108cc:	6039      	str	r1, [r7, #0]
 80108ce:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	2204      	movs	r2, #4
 80108d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80108d6:	4b03      	ldr	r3, [pc, #12]	; (80108e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80108d8:	4618      	mov	r0, r3
 80108da:	370c      	adds	r7, #12
 80108dc:	46bd      	mov	sp, r7
 80108de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e2:	4770      	bx	lr
 80108e4:	200000f0 	.word	0x200000f0

080108e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	4603      	mov	r3, r0
 80108f0:	6039      	str	r1, [r7, #0]
 80108f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80108f4:	79fb      	ldrb	r3, [r7, #7]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d105      	bne.n	8010906 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80108fa:	683a      	ldr	r2, [r7, #0]
 80108fc:	4907      	ldr	r1, [pc, #28]	; (801091c <USBD_FS_ProductStrDescriptor+0x34>)
 80108fe:	4808      	ldr	r0, [pc, #32]	; (8010920 <USBD_FS_ProductStrDescriptor+0x38>)
 8010900:	f7f4 fe95 	bl	800562e <USBD_GetString>
 8010904:	e004      	b.n	8010910 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010906:	683a      	ldr	r2, [r7, #0]
 8010908:	4904      	ldr	r1, [pc, #16]	; (801091c <USBD_FS_ProductStrDescriptor+0x34>)
 801090a:	4805      	ldr	r0, [pc, #20]	; (8010920 <USBD_FS_ProductStrDescriptor+0x38>)
 801090c:	f7f4 fe8f 	bl	800562e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010910:	4b02      	ldr	r3, [pc, #8]	; (801091c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010912:	4618      	mov	r0, r3
 8010914:	3708      	adds	r7, #8
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
 801091a:	bf00      	nop
 801091c:	20005f04 	.word	0x20005f04
 8010920:	08010e34 	.word	0x08010e34

08010924 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b082      	sub	sp, #8
 8010928:	af00      	add	r7, sp, #0
 801092a:	4603      	mov	r3, r0
 801092c:	6039      	str	r1, [r7, #0]
 801092e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010930:	683a      	ldr	r2, [r7, #0]
 8010932:	4904      	ldr	r1, [pc, #16]	; (8010944 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010934:	4804      	ldr	r0, [pc, #16]	; (8010948 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010936:	f7f4 fe7a 	bl	800562e <USBD_GetString>
  return USBD_StrDesc;
 801093a:	4b02      	ldr	r3, [pc, #8]	; (8010944 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801093c:	4618      	mov	r0, r3
 801093e:	3708      	adds	r7, #8
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}
 8010944:	20005f04 	.word	0x20005f04
 8010948:	08010e44 	.word	0x08010e44

0801094c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
 8010952:	4603      	mov	r3, r0
 8010954:	6039      	str	r1, [r7, #0]
 8010956:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010958:	79fb      	ldrb	r3, [r7, #7]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d105      	bne.n	801096a <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 801095e:	683a      	ldr	r2, [r7, #0]
 8010960:	4907      	ldr	r1, [pc, #28]	; (8010980 <USBD_FS_SerialStrDescriptor+0x34>)
 8010962:	4808      	ldr	r0, [pc, #32]	; (8010984 <USBD_FS_SerialStrDescriptor+0x38>)
 8010964:	f7f4 fe63 	bl	800562e <USBD_GetString>
 8010968:	e004      	b.n	8010974 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 801096a:	683a      	ldr	r2, [r7, #0]
 801096c:	4904      	ldr	r1, [pc, #16]	; (8010980 <USBD_FS_SerialStrDescriptor+0x34>)
 801096e:	4805      	ldr	r0, [pc, #20]	; (8010984 <USBD_FS_SerialStrDescriptor+0x38>)
 8010970:	f7f4 fe5d 	bl	800562e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010974:	4b02      	ldr	r3, [pc, #8]	; (8010980 <USBD_FS_SerialStrDescriptor+0x34>)
}
 8010976:	4618      	mov	r0, r3
 8010978:	3708      	adds	r7, #8
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}
 801097e:	bf00      	nop
 8010980:	20005f04 	.word	0x20005f04
 8010984:	08010e54 	.word	0x08010e54

08010988 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
 801098e:	4603      	mov	r3, r0
 8010990:	6039      	str	r1, [r7, #0]
 8010992:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010994:	79fb      	ldrb	r3, [r7, #7]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d105      	bne.n	80109a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801099a:	683a      	ldr	r2, [r7, #0]
 801099c:	4907      	ldr	r1, [pc, #28]	; (80109bc <USBD_FS_ConfigStrDescriptor+0x34>)
 801099e:	4808      	ldr	r0, [pc, #32]	; (80109c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80109a0:	f7f4 fe45 	bl	800562e <USBD_GetString>
 80109a4:	e004      	b.n	80109b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80109a6:	683a      	ldr	r2, [r7, #0]
 80109a8:	4904      	ldr	r1, [pc, #16]	; (80109bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80109aa:	4805      	ldr	r0, [pc, #20]	; (80109c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80109ac:	f7f4 fe3f 	bl	800562e <USBD_GetString>
  }
  return USBD_StrDesc;
 80109b0:	4b02      	ldr	r3, [pc, #8]	; (80109bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80109b2:	4618      	mov	r0, r3
 80109b4:	3708      	adds	r7, #8
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd80      	pop	{r7, pc}
 80109ba:	bf00      	nop
 80109bc:	20005f04 	.word	0x20005f04
 80109c0:	08010e64 	.word	0x08010e64

080109c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	4603      	mov	r3, r0
 80109cc:	6039      	str	r1, [r7, #0]
 80109ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80109d0:	79fb      	ldrb	r3, [r7, #7]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d105      	bne.n	80109e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80109d6:	683a      	ldr	r2, [r7, #0]
 80109d8:	4907      	ldr	r1, [pc, #28]	; (80109f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80109da:	4808      	ldr	r0, [pc, #32]	; (80109fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80109dc:	f7f4 fe27 	bl	800562e <USBD_GetString>
 80109e0:	e004      	b.n	80109ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80109e2:	683a      	ldr	r2, [r7, #0]
 80109e4:	4904      	ldr	r1, [pc, #16]	; (80109f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80109e6:	4805      	ldr	r0, [pc, #20]	; (80109fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80109e8:	f7f4 fe21 	bl	800562e <USBD_GetString>
  }
  return USBD_StrDesc;
 80109ec:	4b02      	ldr	r3, [pc, #8]	; (80109f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80109ee:	4618      	mov	r0, r3
 80109f0:	3708      	adds	r7, #8
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}
 80109f6:	bf00      	nop
 80109f8:	20005f04 	.word	0x20005f04
 80109fc:	08010e74 	.word	0x08010e74

08010a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8010a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010a38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010a04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010a06:	e003      	b.n	8010a10 <LoopCopyDataInit>

08010a08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010a08:	4b0c      	ldr	r3, [pc, #48]	; (8010a3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010a0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010a0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010a0e:	3104      	adds	r1, #4

08010a10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010a10:	480b      	ldr	r0, [pc, #44]	; (8010a40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010a12:	4b0c      	ldr	r3, [pc, #48]	; (8010a44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010a14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010a16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010a18:	d3f6      	bcc.n	8010a08 <CopyDataInit>
  ldr  r2, =_sbss
 8010a1a:	4a0b      	ldr	r2, [pc, #44]	; (8010a48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010a1c:	e002      	b.n	8010a24 <LoopFillZerobss>

08010a1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010a1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010a20:	f842 3b04 	str.w	r3, [r2], #4

08010a24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010a24:	4b09      	ldr	r3, [pc, #36]	; (8010a4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010a26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010a28:	d3f9      	bcc.n	8010a1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010a2a:	f7ff fb57 	bl	80100dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010a2e:	f000 f811 	bl	8010a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010a32:	f7ff f8c7 	bl	800fbc4 <main>
  bx  lr    
 8010a36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8010a38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010a3c:	080110a0 	.word	0x080110a0
  ldr  r0, =_sdata
 8010a40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010a44:	200002c4 	.word	0x200002c4
  ldr  r2, =_sbss
 8010a48:	200002c4 	.word	0x200002c4
  ldr  r3, = _ebss
 8010a4c:	20006108 	.word	0x20006108

08010a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010a50:	e7fe      	b.n	8010a50 <ADC_IRQHandler>
	...

08010a54 <__libc_init_array>:
 8010a54:	b570      	push	{r4, r5, r6, lr}
 8010a56:	4e0d      	ldr	r6, [pc, #52]	; (8010a8c <__libc_init_array+0x38>)
 8010a58:	4c0d      	ldr	r4, [pc, #52]	; (8010a90 <__libc_init_array+0x3c>)
 8010a5a:	1ba4      	subs	r4, r4, r6
 8010a5c:	10a4      	asrs	r4, r4, #2
 8010a5e:	2500      	movs	r5, #0
 8010a60:	42a5      	cmp	r5, r4
 8010a62:	d109      	bne.n	8010a78 <__libc_init_array+0x24>
 8010a64:	4e0b      	ldr	r6, [pc, #44]	; (8010a94 <__libc_init_array+0x40>)
 8010a66:	4c0c      	ldr	r4, [pc, #48]	; (8010a98 <__libc_init_array+0x44>)
 8010a68:	f000 f988 	bl	8010d7c <_init>
 8010a6c:	1ba4      	subs	r4, r4, r6
 8010a6e:	10a4      	asrs	r4, r4, #2
 8010a70:	2500      	movs	r5, #0
 8010a72:	42a5      	cmp	r5, r4
 8010a74:	d105      	bne.n	8010a82 <__libc_init_array+0x2e>
 8010a76:	bd70      	pop	{r4, r5, r6, pc}
 8010a78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010a7c:	4798      	blx	r3
 8010a7e:	3501      	adds	r5, #1
 8010a80:	e7ee      	b.n	8010a60 <__libc_init_array+0xc>
 8010a82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010a86:	4798      	blx	r3
 8010a88:	3501      	adds	r5, #1
 8010a8a:	e7f2      	b.n	8010a72 <__libc_init_array+0x1e>
 8010a8c:	08011098 	.word	0x08011098
 8010a90:	08011098 	.word	0x08011098
 8010a94:	08011098 	.word	0x08011098
 8010a98:	0801109c 	.word	0x0801109c

08010a9c <memcmp>:
 8010a9c:	b510      	push	{r4, lr}
 8010a9e:	3901      	subs	r1, #1
 8010aa0:	4402      	add	r2, r0
 8010aa2:	4290      	cmp	r0, r2
 8010aa4:	d101      	bne.n	8010aaa <memcmp+0xe>
 8010aa6:	2000      	movs	r0, #0
 8010aa8:	bd10      	pop	{r4, pc}
 8010aaa:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010aae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010ab2:	42a3      	cmp	r3, r4
 8010ab4:	d0f5      	beq.n	8010aa2 <memcmp+0x6>
 8010ab6:	1b18      	subs	r0, r3, r4
 8010ab8:	bd10      	pop	{r4, pc}

08010aba <memcpy>:
 8010aba:	b510      	push	{r4, lr}
 8010abc:	1e43      	subs	r3, r0, #1
 8010abe:	440a      	add	r2, r1
 8010ac0:	4291      	cmp	r1, r2
 8010ac2:	d100      	bne.n	8010ac6 <memcpy+0xc>
 8010ac4:	bd10      	pop	{r4, pc}
 8010ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ace:	e7f7      	b.n	8010ac0 <memcpy+0x6>

08010ad0 <memmove>:
 8010ad0:	4288      	cmp	r0, r1
 8010ad2:	b510      	push	{r4, lr}
 8010ad4:	eb01 0302 	add.w	r3, r1, r2
 8010ad8:	d803      	bhi.n	8010ae2 <memmove+0x12>
 8010ada:	1e42      	subs	r2, r0, #1
 8010adc:	4299      	cmp	r1, r3
 8010ade:	d10c      	bne.n	8010afa <memmove+0x2a>
 8010ae0:	bd10      	pop	{r4, pc}
 8010ae2:	4298      	cmp	r0, r3
 8010ae4:	d2f9      	bcs.n	8010ada <memmove+0xa>
 8010ae6:	1881      	adds	r1, r0, r2
 8010ae8:	1ad2      	subs	r2, r2, r3
 8010aea:	42d3      	cmn	r3, r2
 8010aec:	d100      	bne.n	8010af0 <memmove+0x20>
 8010aee:	bd10      	pop	{r4, pc}
 8010af0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010af4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010af8:	e7f7      	b.n	8010aea <memmove+0x1a>
 8010afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010afe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010b02:	e7eb      	b.n	8010adc <memmove+0xc>

08010b04 <memset>:
 8010b04:	4402      	add	r2, r0
 8010b06:	4603      	mov	r3, r0
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d100      	bne.n	8010b0e <memset+0xa>
 8010b0c:	4770      	bx	lr
 8010b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8010b12:	e7f9      	b.n	8010b08 <memset+0x4>

08010b14 <rand>:
 8010b14:	4b19      	ldr	r3, [pc, #100]	; (8010b7c <rand+0x68>)
 8010b16:	b510      	push	{r4, lr}
 8010b18:	681c      	ldr	r4, [r3, #0]
 8010b1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010b1c:	b9d3      	cbnz	r3, 8010b54 <rand+0x40>
 8010b1e:	2018      	movs	r0, #24
 8010b20:	f000 f886 	bl	8010c30 <malloc>
 8010b24:	f243 330e 	movw	r3, #13070	; 0x330e
 8010b28:	63a0      	str	r0, [r4, #56]	; 0x38
 8010b2a:	8003      	strh	r3, [r0, #0]
 8010b2c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8010b30:	8043      	strh	r3, [r0, #2]
 8010b32:	f241 2334 	movw	r3, #4660	; 0x1234
 8010b36:	8083      	strh	r3, [r0, #4]
 8010b38:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8010b3c:	80c3      	strh	r3, [r0, #6]
 8010b3e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8010b42:	8103      	strh	r3, [r0, #8]
 8010b44:	2305      	movs	r3, #5
 8010b46:	8143      	strh	r3, [r0, #10]
 8010b48:	230b      	movs	r3, #11
 8010b4a:	8183      	strh	r3, [r0, #12]
 8010b4c:	2201      	movs	r2, #1
 8010b4e:	2300      	movs	r3, #0
 8010b50:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010b54:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010b56:	480a      	ldr	r0, [pc, #40]	; (8010b80 <rand+0x6c>)
 8010b58:	690a      	ldr	r2, [r1, #16]
 8010b5a:	694b      	ldr	r3, [r1, #20]
 8010b5c:	4c09      	ldr	r4, [pc, #36]	; (8010b84 <rand+0x70>)
 8010b5e:	4350      	muls	r0, r2
 8010b60:	fb04 0003 	mla	r0, r4, r3, r0
 8010b64:	fba2 2304 	umull	r2, r3, r2, r4
 8010b68:	3201      	adds	r2, #1
 8010b6a:	4403      	add	r3, r0
 8010b6c:	f143 0300 	adc.w	r3, r3, #0
 8010b70:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8010b74:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8010b78:	bd10      	pop	{r4, pc}
 8010b7a:	bf00      	nop
 8010b7c:	200000f4 	.word	0x200000f4
 8010b80:	5851f42d 	.word	0x5851f42d
 8010b84:	4c957f2d 	.word	0x4c957f2d

08010b88 <strcasecmp>:
 8010b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b8a:	4606      	mov	r6, r0
 8010b8c:	460f      	mov	r7, r1
 8010b8e:	f816 4b01 	ldrb.w	r4, [r6], #1
 8010b92:	f000 f83f 	bl	8010c14 <__locale_ctype_ptr>
 8010b96:	4420      	add	r0, r4
 8010b98:	f817 5b01 	ldrb.w	r5, [r7], #1
 8010b9c:	7843      	ldrb	r3, [r0, #1]
 8010b9e:	f003 0303 	and.w	r3, r3, #3
 8010ba2:	2b01      	cmp	r3, #1
 8010ba4:	bf08      	it	eq
 8010ba6:	3420      	addeq	r4, #32
 8010ba8:	f000 f834 	bl	8010c14 <__locale_ctype_ptr>
 8010bac:	4428      	add	r0, r5
 8010bae:	7843      	ldrb	r3, [r0, #1]
 8010bb0:	f003 0303 	and.w	r3, r3, #3
 8010bb4:	2b01      	cmp	r3, #1
 8010bb6:	bf08      	it	eq
 8010bb8:	3520      	addeq	r5, #32
 8010bba:	1b60      	subs	r0, r4, r5
 8010bbc:	d101      	bne.n	8010bc2 <strcasecmp+0x3a>
 8010bbe:	2d00      	cmp	r5, #0
 8010bc0:	d1e5      	bne.n	8010b8e <strcasecmp+0x6>
 8010bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010bc4 <strncmp>:
 8010bc4:	b510      	push	{r4, lr}
 8010bc6:	b16a      	cbz	r2, 8010be4 <strncmp+0x20>
 8010bc8:	3901      	subs	r1, #1
 8010bca:	1884      	adds	r4, r0, r2
 8010bcc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010bd0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d103      	bne.n	8010be0 <strncmp+0x1c>
 8010bd8:	42a0      	cmp	r0, r4
 8010bda:	d001      	beq.n	8010be0 <strncmp+0x1c>
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d1f5      	bne.n	8010bcc <strncmp+0x8>
 8010be0:	1a98      	subs	r0, r3, r2
 8010be2:	bd10      	pop	{r4, pc}
 8010be4:	4610      	mov	r0, r2
 8010be6:	bd10      	pop	{r4, pc}

08010be8 <strncpy>:
 8010be8:	b570      	push	{r4, r5, r6, lr}
 8010bea:	4604      	mov	r4, r0
 8010bec:	b902      	cbnz	r2, 8010bf0 <strncpy+0x8>
 8010bee:	bd70      	pop	{r4, r5, r6, pc}
 8010bf0:	4623      	mov	r3, r4
 8010bf2:	f811 5b01 	ldrb.w	r5, [r1], #1
 8010bf6:	f803 5b01 	strb.w	r5, [r3], #1
 8010bfa:	1e56      	subs	r6, r2, #1
 8010bfc:	b91d      	cbnz	r5, 8010c06 <strncpy+0x1e>
 8010bfe:	4414      	add	r4, r2
 8010c00:	42a3      	cmp	r3, r4
 8010c02:	d103      	bne.n	8010c0c <strncpy+0x24>
 8010c04:	bd70      	pop	{r4, r5, r6, pc}
 8010c06:	461c      	mov	r4, r3
 8010c08:	4632      	mov	r2, r6
 8010c0a:	e7ef      	b.n	8010bec <strncpy+0x4>
 8010c0c:	f803 5b01 	strb.w	r5, [r3], #1
 8010c10:	e7f6      	b.n	8010c00 <strncpy+0x18>
	...

08010c14 <__locale_ctype_ptr>:
 8010c14:	4b04      	ldr	r3, [pc, #16]	; (8010c28 <__locale_ctype_ptr+0x14>)
 8010c16:	4a05      	ldr	r2, [pc, #20]	; (8010c2c <__locale_ctype_ptr+0x18>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	6a1b      	ldr	r3, [r3, #32]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	bf08      	it	eq
 8010c20:	4613      	moveq	r3, r2
 8010c22:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8010c26:	4770      	bx	lr
 8010c28:	200000f4 	.word	0x200000f4
 8010c2c:	20000158 	.word	0x20000158

08010c30 <malloc>:
 8010c30:	4b02      	ldr	r3, [pc, #8]	; (8010c3c <malloc+0xc>)
 8010c32:	4601      	mov	r1, r0
 8010c34:	6818      	ldr	r0, [r3, #0]
 8010c36:	f000 b815 	b.w	8010c64 <_malloc_r>
 8010c3a:	bf00      	nop
 8010c3c:	200000f4 	.word	0x200000f4

08010c40 <__ascii_mbtowc>:
 8010c40:	b082      	sub	sp, #8
 8010c42:	b901      	cbnz	r1, 8010c46 <__ascii_mbtowc+0x6>
 8010c44:	a901      	add	r1, sp, #4
 8010c46:	b142      	cbz	r2, 8010c5a <__ascii_mbtowc+0x1a>
 8010c48:	b14b      	cbz	r3, 8010c5e <__ascii_mbtowc+0x1e>
 8010c4a:	7813      	ldrb	r3, [r2, #0]
 8010c4c:	600b      	str	r3, [r1, #0]
 8010c4e:	7812      	ldrb	r2, [r2, #0]
 8010c50:	1c10      	adds	r0, r2, #0
 8010c52:	bf18      	it	ne
 8010c54:	2001      	movne	r0, #1
 8010c56:	b002      	add	sp, #8
 8010c58:	4770      	bx	lr
 8010c5a:	4610      	mov	r0, r2
 8010c5c:	e7fb      	b.n	8010c56 <__ascii_mbtowc+0x16>
 8010c5e:	f06f 0001 	mvn.w	r0, #1
 8010c62:	e7f8      	b.n	8010c56 <__ascii_mbtowc+0x16>

08010c64 <_malloc_r>:
 8010c64:	b570      	push	{r4, r5, r6, lr}
 8010c66:	1ccd      	adds	r5, r1, #3
 8010c68:	f025 0503 	bic.w	r5, r5, #3
 8010c6c:	3508      	adds	r5, #8
 8010c6e:	2d0c      	cmp	r5, #12
 8010c70:	bf38      	it	cc
 8010c72:	250c      	movcc	r5, #12
 8010c74:	2d00      	cmp	r5, #0
 8010c76:	4606      	mov	r6, r0
 8010c78:	db01      	blt.n	8010c7e <_malloc_r+0x1a>
 8010c7a:	42a9      	cmp	r1, r5
 8010c7c:	d903      	bls.n	8010c86 <_malloc_r+0x22>
 8010c7e:	230c      	movs	r3, #12
 8010c80:	6033      	str	r3, [r6, #0]
 8010c82:	2000      	movs	r0, #0
 8010c84:	bd70      	pop	{r4, r5, r6, pc}
 8010c86:	f000 f868 	bl	8010d5a <__malloc_lock>
 8010c8a:	4a23      	ldr	r2, [pc, #140]	; (8010d18 <_malloc_r+0xb4>)
 8010c8c:	6814      	ldr	r4, [r2, #0]
 8010c8e:	4621      	mov	r1, r4
 8010c90:	b991      	cbnz	r1, 8010cb8 <_malloc_r+0x54>
 8010c92:	4c22      	ldr	r4, [pc, #136]	; (8010d1c <_malloc_r+0xb8>)
 8010c94:	6823      	ldr	r3, [r4, #0]
 8010c96:	b91b      	cbnz	r3, 8010ca0 <_malloc_r+0x3c>
 8010c98:	4630      	mov	r0, r6
 8010c9a:	f000 f841 	bl	8010d20 <_sbrk_r>
 8010c9e:	6020      	str	r0, [r4, #0]
 8010ca0:	4629      	mov	r1, r5
 8010ca2:	4630      	mov	r0, r6
 8010ca4:	f000 f83c 	bl	8010d20 <_sbrk_r>
 8010ca8:	1c43      	adds	r3, r0, #1
 8010caa:	d126      	bne.n	8010cfa <_malloc_r+0x96>
 8010cac:	230c      	movs	r3, #12
 8010cae:	6033      	str	r3, [r6, #0]
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	f000 f853 	bl	8010d5c <__malloc_unlock>
 8010cb6:	e7e4      	b.n	8010c82 <_malloc_r+0x1e>
 8010cb8:	680b      	ldr	r3, [r1, #0]
 8010cba:	1b5b      	subs	r3, r3, r5
 8010cbc:	d41a      	bmi.n	8010cf4 <_malloc_r+0x90>
 8010cbe:	2b0b      	cmp	r3, #11
 8010cc0:	d90f      	bls.n	8010ce2 <_malloc_r+0x7e>
 8010cc2:	600b      	str	r3, [r1, #0]
 8010cc4:	50cd      	str	r5, [r1, r3]
 8010cc6:	18cc      	adds	r4, r1, r3
 8010cc8:	4630      	mov	r0, r6
 8010cca:	f000 f847 	bl	8010d5c <__malloc_unlock>
 8010cce:	f104 000b 	add.w	r0, r4, #11
 8010cd2:	1d23      	adds	r3, r4, #4
 8010cd4:	f020 0007 	bic.w	r0, r0, #7
 8010cd8:	1ac3      	subs	r3, r0, r3
 8010cda:	d01b      	beq.n	8010d14 <_malloc_r+0xb0>
 8010cdc:	425a      	negs	r2, r3
 8010cde:	50e2      	str	r2, [r4, r3]
 8010ce0:	bd70      	pop	{r4, r5, r6, pc}
 8010ce2:	428c      	cmp	r4, r1
 8010ce4:	bf0d      	iteet	eq
 8010ce6:	6863      	ldreq	r3, [r4, #4]
 8010ce8:	684b      	ldrne	r3, [r1, #4]
 8010cea:	6063      	strne	r3, [r4, #4]
 8010cec:	6013      	streq	r3, [r2, #0]
 8010cee:	bf18      	it	ne
 8010cf0:	460c      	movne	r4, r1
 8010cf2:	e7e9      	b.n	8010cc8 <_malloc_r+0x64>
 8010cf4:	460c      	mov	r4, r1
 8010cf6:	6849      	ldr	r1, [r1, #4]
 8010cf8:	e7ca      	b.n	8010c90 <_malloc_r+0x2c>
 8010cfa:	1cc4      	adds	r4, r0, #3
 8010cfc:	f024 0403 	bic.w	r4, r4, #3
 8010d00:	42a0      	cmp	r0, r4
 8010d02:	d005      	beq.n	8010d10 <_malloc_r+0xac>
 8010d04:	1a21      	subs	r1, r4, r0
 8010d06:	4630      	mov	r0, r6
 8010d08:	f000 f80a 	bl	8010d20 <_sbrk_r>
 8010d0c:	3001      	adds	r0, #1
 8010d0e:	d0cd      	beq.n	8010cac <_malloc_r+0x48>
 8010d10:	6025      	str	r5, [r4, #0]
 8010d12:	e7d9      	b.n	8010cc8 <_malloc_r+0x64>
 8010d14:	bd70      	pop	{r4, r5, r6, pc}
 8010d16:	bf00      	nop
 8010d18:	20004b84 	.word	0x20004b84
 8010d1c:	20004b88 	.word	0x20004b88

08010d20 <_sbrk_r>:
 8010d20:	b538      	push	{r3, r4, r5, lr}
 8010d22:	4c06      	ldr	r4, [pc, #24]	; (8010d3c <_sbrk_r+0x1c>)
 8010d24:	2300      	movs	r3, #0
 8010d26:	4605      	mov	r5, r0
 8010d28:	4608      	mov	r0, r1
 8010d2a:	6023      	str	r3, [r4, #0]
 8010d2c:	f000 f818 	bl	8010d60 <_sbrk>
 8010d30:	1c43      	adds	r3, r0, #1
 8010d32:	d102      	bne.n	8010d3a <_sbrk_r+0x1a>
 8010d34:	6823      	ldr	r3, [r4, #0]
 8010d36:	b103      	cbz	r3, 8010d3a <_sbrk_r+0x1a>
 8010d38:	602b      	str	r3, [r5, #0]
 8010d3a:	bd38      	pop	{r3, r4, r5, pc}
 8010d3c:	20006104 	.word	0x20006104

08010d40 <__ascii_wctomb>:
 8010d40:	b149      	cbz	r1, 8010d56 <__ascii_wctomb+0x16>
 8010d42:	2aff      	cmp	r2, #255	; 0xff
 8010d44:	bf85      	ittet	hi
 8010d46:	238a      	movhi	r3, #138	; 0x8a
 8010d48:	6003      	strhi	r3, [r0, #0]
 8010d4a:	700a      	strbls	r2, [r1, #0]
 8010d4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010d50:	bf98      	it	ls
 8010d52:	2001      	movls	r0, #1
 8010d54:	4770      	bx	lr
 8010d56:	4608      	mov	r0, r1
 8010d58:	4770      	bx	lr

08010d5a <__malloc_lock>:
 8010d5a:	4770      	bx	lr

08010d5c <__malloc_unlock>:
 8010d5c:	4770      	bx	lr
	...

08010d60 <_sbrk>:
 8010d60:	4b04      	ldr	r3, [pc, #16]	; (8010d74 <_sbrk+0x14>)
 8010d62:	6819      	ldr	r1, [r3, #0]
 8010d64:	4602      	mov	r2, r0
 8010d66:	b909      	cbnz	r1, 8010d6c <_sbrk+0xc>
 8010d68:	4903      	ldr	r1, [pc, #12]	; (8010d78 <_sbrk+0x18>)
 8010d6a:	6019      	str	r1, [r3, #0]
 8010d6c:	6818      	ldr	r0, [r3, #0]
 8010d6e:	4402      	add	r2, r0
 8010d70:	601a      	str	r2, [r3, #0]
 8010d72:	4770      	bx	lr
 8010d74:	20004b8c 	.word	0x20004b8c
 8010d78:	20006108 	.word	0x20006108

08010d7c <_init>:
 8010d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d7e:	bf00      	nop
 8010d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d82:	bc08      	pop	{r3}
 8010d84:	469e      	mov	lr, r3
 8010d86:	4770      	bx	lr

08010d88 <_fini>:
 8010d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d8a:	bf00      	nop
 8010d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d8e:	bc08      	pop	{r3}
 8010d90:	469e      	mov	lr, r3
 8010d92:	4770      	bx	lr
